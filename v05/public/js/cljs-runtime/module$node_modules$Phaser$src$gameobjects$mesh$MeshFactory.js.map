{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$mesh$MeshFactory.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,4DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOxH,IAAIC,KAAOH,OAAA,CAAQ,sDAAR,CACPI,OAAAA,CAAoBJ,OAAA,CAAQ,8DAAR,CAsBpB,OAAOK,eAAX,EAEID,MAAAE,SAAA,CAA2B,MAA3B,CAAmC,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,QAAP,CAAiBC,EAAjB,CAAqBC,MAArB,CAA6BC,MAA7B,CAAqCC,OAArC,CAA8CC,KAA9C,CAC5C,CACI,MAAO,KAAAC,YAAAC,IAAA,CAAqB,IAAIb,IAAJ,CAAS,IAAAc,MAAT,CAAqBV,CAArB,CAAwBC,CAAxB,CAA2BC,QAA3B,CAAqCC,EAArC,CAAyCC,MAAzC,CAAiDC,MAAjD,CAAyDC,OAAzD,CAAkEC,KAAlE,CAArB,CADX,CADA,CAhCoH;",
"sources":["node_modules/Phaser/src/gameobjects/mesh/MeshFactory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$mesh$MeshFactory\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Mesh = require('./Mesh');\r\nvar GameObjectFactory = require('../GameObjectFactory');\r\n\r\n/**\r\n * Creates a new Mesh Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the Mesh Game Object and WebGL support have been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#mesh\r\n * @webglOnly\r\n * @since 3.0.0\r\n *\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number[]} vertices - An array containing the vertices data for this Mesh.\r\n * @param {number[]} uv - An array containing the uv data for this Mesh.\r\n * @param {number[]} colors - An array containing the color data for this Mesh.\r\n * @param {number[]} alphas - An array containing the alpha data for this Mesh.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n *\r\n * @return {Phaser.GameObjects.Mesh} The Game Object that was created.\r\n */\r\nif (typeof WEBGL_RENDERER)\r\n{\r\n    GameObjectFactory.register('mesh', function (x, y, vertices, uv, colors, alphas, texture, frame)\r\n    {\r\n        return this.displayList.add(new Mesh(this.scene, x, y, vertices, uv, colors, alphas, texture, frame));\r\n    });\r\n}\r\n\r\n//  When registering a factory function 'this' refers to the GameObjectFactory context.\r\n//\r\n//  There are several properties available to use:\r\n//\r\n//  this.scene - a reference to the Scene that owns the GameObjectFactory\r\n//  this.displayList - a reference to the Display List the Scene owns\r\n//  this.updateList - a reference to the Update List the Scene owns\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Mesh","GameObjectFactory","WEBGL_RENDERER","register","x","y","vertices","uv","colors","alphas","texture","frame","displayList","add","scene"]
}
