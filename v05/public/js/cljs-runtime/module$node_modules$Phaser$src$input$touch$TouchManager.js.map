{
"version":3,
"file":"module$node_modules$Phaser$src$input$touch$TouchManager.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/input/touch/TouchManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$input$touch$TouchManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\r\n// https://patrickhlauke.github.io/touch/tests/results/\r\n// https://www.html5rocks.com/en/mobile/touch/\r\n\r\n/**\r\n * @classdesc\r\n * The Touch Manager is a helper class that belongs to the Input Manager.\r\n * \r\n * Its role is to listen for native DOM Touch Events and then pass them onto the Input Manager for further processing.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically.\r\n *\r\n * @class TouchManager\r\n * @memberOf Phaser.Input.Touch\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\r\nvar TouchManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function TouchManager (inputManager)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = inputManager;\r\n\r\n        /**\r\n         * If true the DOM events will have event.preventDefault applied to them, if false they will propagate fully.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#capture\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.capture = true;\r\n\r\n        /**\r\n         * A boolean that controls if the Touch Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#enabled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = false;\r\n\r\n        /**\r\n         * The Touch Event target, as defined in the Game Config.\r\n         * Typically the canvas to which the game is rendering, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#target\r\n         * @type {any}\r\n         * @since 3.0.0\r\n         */\r\n        this.target;\r\n\r\n        inputManager.events.once('boot', this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Touch Manager boot process.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#boot\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var config = this.manager.config;\r\n\r\n        this.enabled = config.inputTouch;\r\n        this.target = config.inputTouchEventTarget;\r\n        this.capture = config.inputTouchCapture;\r\n\r\n        if (!this.target)\r\n        {\r\n            this.target = this.manager.game.canvas;\r\n        }\r\n\r\n        if (this.enabled)\r\n        {\r\n            this.startListeners();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The Touch Start Event Handler.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#onTouchStart\r\n     * @since 3.10.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM Touch Start Event.\r\n     */\r\n    onTouchStart: function (event)\r\n    {\r\n        if (event.defaultPrevented || !this.enabled || !this.manager)\r\n        {\r\n            // Do nothing if event already handled\r\n            return;\r\n        }\r\n\r\n        this.manager.queueTouchStart(event);\r\n\r\n        if (this.capture)\r\n        {\r\n            event.preventDefault();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The Touch Move Event Handler.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#onTouchMove\r\n     * @since 3.10.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM Touch Move Event.\r\n     */\r\n    onTouchMove: function (event)\r\n    {\r\n        if (event.defaultPrevented || !this.enabled || !this.manager)\r\n        {\r\n            // Do nothing if event already handled\r\n            return;\r\n        }\r\n\r\n        this.manager.queueTouchMove(event);\r\n\r\n        if (this.capture)\r\n        {\r\n            event.preventDefault();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The Touch End Event Handler.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#onTouchEnd\r\n     * @since 3.10.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM Touch End Event.\r\n     */\r\n    onTouchEnd: function (event)\r\n    {\r\n        if (event.defaultPrevented || !this.enabled || !this.manager)\r\n        {\r\n            // Do nothing if event already handled\r\n            return;\r\n        }\r\n\r\n        this.manager.queueTouchEnd(event);\r\n\r\n        if (this.capture)\r\n        {\r\n            event.preventDefault();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Starts the Touch Event listeners running.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#startListeners\r\n     * @since 3.0.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var target = this.target;\r\n\r\n        var passive = { passive: true };\r\n        var nonPassive = { passive: false };\r\n\r\n        if (this.capture)\r\n        {\r\n            target.addEventListener('touchstart', this.onTouchStart.bind(this), nonPassive);\r\n            target.addEventListener('touchmove', this.onTouchMove.bind(this), nonPassive);\r\n            target.addEventListener('touchend', this.onTouchEnd.bind(this), nonPassive);\r\n        }\r\n        else\r\n        {\r\n            target.addEventListener('touchstart', this.onTouchStart.bind(this), passive);\r\n            target.addEventListener('touchmove', this.onTouchMove.bind(this), passive);\r\n            target.addEventListener('touchend', this.onTouchEnd.bind(this), passive);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Stops the Touch Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#stopListeners\r\n     * @since 3.0.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        var target = this.target;\r\n\r\n        target.removeEventListener('touchstart', this.onTouchStart);\r\n        target.removeEventListener('touchmove', this.onTouchMove);\r\n        target.removeEventListener('touchend', this.onTouchEnd);\r\n    },\r\n\r\n    /**\r\n     * Destroys this Touch Manager instance.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.target = null;\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TouchManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","TouchManager","Class","initialize","inputManager","manager","capture","enabled","events","once","boot","config","inputTouch","target","inputTouchEventTarget","inputTouchCapture","game","canvas","startListeners","onTouchStart","event","defaultPrevented","queueTouchStart","preventDefault","onTouchMove","queueTouchMove","onTouchEnd","queueTouchEnd","passive","nonPassive","addEventListener","bind","stopListeners","removeEventListener","destroy"]
}
