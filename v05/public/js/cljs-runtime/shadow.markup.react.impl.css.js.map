{"version":3,"sources":["shadow/markup/react/impl/css.cljs"],"mappings":"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","names":["js/shadow","js/shadow.markup","js/shadow.markup.react","js/shadow.markup.react.impl","js/shadow.markup.react.impl.css","js/shadow.markup.react.impl.css.env-ref","shadow.markup.react.impl.css/env-ref","cljs.core/volatile!","js/shadow.markup.react.impl.css.active-elements-ref","shadow.markup.react.impl.css/active-elements-ref","cljs.core/sorted-map","js/shadow.markup.react.impl.css.style-cache-ref","shadow.markup.react.impl.css/style-cache-ref","shadow.markup.react.impl.css/get-rules-for-el","env","el","name","shadow.markup.css.impl.gen/el-selector","or__4126__auto__","cljs.core/deref","cljs.core.get","css","shadow.markup.css.impl.gen/css-rules-for-el","cljs.core.assoc","shadow.markup.react.impl.css/style-container","styles-container-id","shadow.dom.by_id","node","G__27440","shadow.dom/build","shadow.dom.append","js/document.head","shadow.markup.react.impl.css/insert-styles!","container","n","rules","n__4613__auto__","i","cljs.core/count","cljs.core.nth","shadow.markup.react.impl.css/regenerate-styles!","styles","cljs.core/vals","p1__27441#","cljs.core.mapcat","clojure.string.join","shadow.markup.react.impl.css/set-env!","new-env","cljs.core/vreset!","cljs.core/empty?","shadow.markup.react.impl.css/inject-rules!","selector","cljs.core.dissoc","shadow.markup.env/DEBUG","e27443","e","js/console.error","p__27445","map__27447","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","shadow.markup.react.impl.css/check-conflicting-props!","class","className","classes","props","total","G__27450","cljs.core.ex_info","shadow.markup.react.impl.css/merge-props-and-class","class-from-props","temp__5735__auto__","cljs.core/map?","cljs.core/keys","cljs.core.filter","key","cljs.core.map","cljs.core/name","cljs.core.remove","cljs.core/nil?","shadow.markup.react.impl.interop/convert-props","shadow.markup.react.impl.css/styled-element-invoke","args","cljs.core/not","css-sel","el-type","shadow.markup.css.impl.gen/el-type","js/module$node_modules$react$index.createElement","unused__9542__auto__","self__","G__27455","js/Error","args27454","cljs.core/aclone","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","shadow.markup.react.impl.css/StyledElement","shadow.markup.react.impl.css/->StyledElement","style-fn","injected?","_","c1","c2","c3","c4","c5","c6","c7","c8","c9","c10","c11","c12","c13","c14","c15","c16"],"sourcesContent":["(ns shadow.markup.react.impl.css\n  (:require [clojure.string :as str]\n            [shadow.markup.react.impl.interop :as interop]\n            [shadow.markup.css.impl.gen :as gen]\n            [shadow.markup.env :as env]\n            [shadow.dom :as dom]\n            [\"react\" :as react]))\n\n(defonce env-ref (volatile! {}))\n\n(defonce active-elements-ref\n  ;; FIXME: is sorting useful?\n  ;; {classname-of-el el-instance}\n  ;; keyed by classname since live-reloading will create a new el-instance\n  ;; which can't remove the old instance since it is not equal\n  (volatile! (sorted-map)))\n\n(defonce style-cache-ref\n  (volatile! {}))\n\n(defn get-rules-for-el [env el]\n  (let [name (gen/el-selector el)]\n    (or (get @style-cache-ref name)\n        (let [css\n              (gen/css-rules-for-el env el)]\n          (vswap! style-cache-ref assoc name css)\n          css\n          ))))\n\n(defn style-container []\n  (let [styles-container-id \"shadow-markup-styles\"]\n    (or (dom/by-id styles-container-id)\n        (let [node (dom/build [:style {:id styles-container-id :type \"text/css\"}])]\n          (dom/append js/document.head node)\n          node))))\n\n(defn insert-styles!\n  \"inserts rules for a single el using sheet.insertRule\"\n  [el]\n  (let [container\n        (style-container)\n\n        n\n        (.. container -sheet -rules -length)\n\n        rules\n        (get-rules-for-el @env-ref el)]\n\n    (dotimes [i (count rules)]\n      (.. container -sheet (insertRule (nth rules i) (+ n i))))\n    ))\n\n(defn regenerate-styles!\n  \"generates a css string and replace the textContent of the <style> container\"\n  []\n  (let [env\n        @env-ref\n\n        styles\n        (->> @active-elements-ref\n             (vals)\n             (mapcat #(get-rules-for-el env %))\n             (str/join \"\\n\"))\n\n        container\n        (style-container)]\n\n    (set! (.-textContent container) styles)))\n\n(defn set-env! [new-env]\n  (vreset! env-ref new-env)\n  (vreset! style-cache-ref {})\n\n  (when-not (empty? @active-elements-ref)\n    (regenerate-styles!)))\n\n(defn inject-rules! [el]\n  (let [selector (gen/el-selector el)]\n    (vswap! style-cache-ref dissoc selector)\n    (vswap! active-elements-ref assoc selector el)\n\n    ;; when using many elements for the first time\n    ;; each element will cause a re-parse of all previously generated css rules\n    ;; since we replace the textContent of the <style> element\n    ;; the better option would be to use style.sheet.insertRule\n    ;; but that has the effect of not being able to modify styles in devtools\n    ;; which is annoying, so we only do it when env/DEBUG is false\n\n    (if ^boolean env/DEBUG\n      (regenerate-styles!)\n      (try\n        (insert-styles! el)\n        (catch :default e\n          (js/console.error \"insert-styles failed\" e el)\n          ;; fallback in case insertRule fails\n          (regenerate-styles!))))))\n\n(defn check-conflicting-props! [{:keys [class className classes] :as props}]\n  (let [total\n        (cond-> 0\n          class\n          (inc)\n          className\n          (inc)\n          classes\n          (inc))]\n\n    (when (> total 1)\n      (throw (ex-info \"conflicting props, can only have one of: class className classes\" props)))\n    ))\n\n(defn merge-props-and-class [props class]\n  (when ^boolean env/DEBUG\n    (check-conflicting-props! props))\n\n  (let [class-from-props\n        (or (:class props)\n            (:className props)\n            (when-let [classes (:classes props)]\n              (if (map? classes)\n                ;; {:selected boolean-ish}\n                (->> classes\n                     (keys)\n                     (filter\n                       (fn [key]\n                         (get classes key)))\n                     (map name)\n                     (str/join \" \"))\n\n                ;; [(when x \"selected\") ...]\n                (->> classes\n                     (remove nil?)\n                     (str/join \" \")))))\n\n        className\n        (if (nil? class-from-props)\n          class\n          (str class \" \" class-from-props))]\n\n    (-> props\n        (dissoc :class :classes)\n        (assoc :className className)\n        (interop/convert-props))))\n\n(defn styled-element-invoke [^clj el props ^js args]\n  (when (not (.-injected? el))\n    (inject-rules! el)\n    (set! (.-injected? el) true))\n\n  (let [css-sel (gen/el-selector el)\n        el-type (gen/el-type el)]\n\n    (if (map? props)\n      (.unshift args (merge-props-and-class props css-sel))\n      (do (.unshift args props)\n          (.unshift args #js {:className css-sel})))\n\n    (.unshift args el-type)\n    (.apply react/createElement nil args)))\n\n(deftype StyledElement\n  [el-type css-sel style-fn ^:mutable injected?]\n  gen/IElement\n  (el-type [_]\n    el-type)\n  (el-selector [_]\n    css-sel)\n  (el-root [_ env]\n    (style-fn env))\n\n  IFn\n  (-invoke [el props]\n    (styled-element-invoke el props #js []))\n  (-invoke [el props c1]\n    (styled-element-invoke el props #js [c1]))\n  (-invoke [el props c1 c2]\n    (styled-element-invoke el props #js [c1 c2]))\n  (-invoke [el props c1 c2 c3]\n    (styled-element-invoke el props #js [c1 c2 c3]))\n  (-invoke [el props c1 c2 c3 c4]\n    (styled-element-invoke el props #js [c1 c2 c3 c4]))\n  (-invoke [el props c1 c2 c3 c4 c5]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16]))\n  ;; FIXME: add more\n  )\n"]}