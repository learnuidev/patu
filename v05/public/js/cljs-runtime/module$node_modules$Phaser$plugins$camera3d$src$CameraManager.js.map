{
"version":3,
"file":"module$node_modules$Phaser$plugins$camera3d$src$CameraManager.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/plugins/camera3d/src/CameraManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$plugins$camera3d$src$CameraManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../src/utils/Class');\r\nvar OrthographicCamera = require('./OrthographicCamera');\r\nvar PerspectiveCamera = require('./PerspectiveCamera');\r\nvar PluginCache = require('../../../src/plugins/PluginCache');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class CameraManager\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\r\nvar CameraManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function CameraManager (scene)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.CameraManager#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.CameraManager#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * An Array of the Camera objects being managed by this Camera Manager.\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.CameraManager#cameras\r\n         * @type {Phaser.Cameras.Sprite3D.Camera[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.cameras = [];\r\n\r\n        scene.sys.events.once('boot', this.boot, this);\r\n        scene.sys.events.on('start', this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Cameras.Scene3D.CameraManager#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.systems.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on('update', this.update, this);\r\n        eventEmitter.once('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [fieldOfView=80] - [description]\r\n     * @param {number} [width] - [description]\r\n     * @param {number} [height] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n     */\r\n    add: function (fieldOfView, width, height)\r\n    {\r\n        return this.addPerspectiveCamera(fieldOfView, width, height);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#addOrthographicCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n     */\r\n    addOrthographicCamera: function (width, height)\r\n    {\r\n        var config = this.scene.sys.game.config;\r\n\r\n        if (width === undefined) { width = config.width; }\r\n        if (height === undefined) { height = config.height; }\r\n\r\n        var camera = new OrthographicCamera(this.scene, width, height);\r\n\r\n        this.cameras.push(camera);\r\n\r\n        return camera;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#addPerspectiveCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [fieldOfView=80] - [description]\r\n     * @param {number} [width] - [description]\r\n     * @param {number} [height] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n     */\r\n    addPerspectiveCamera: function (fieldOfView, width, height)\r\n    {\r\n        var config = this.scene.sys.game.config;\r\n\r\n        if (fieldOfView === undefined) { fieldOfView = 80; }\r\n        if (width === undefined) { width = config.width; }\r\n        if (height === undefined) { height = config.height; }\r\n\r\n        var camera = new PerspectiveCamera(this.scene, fieldOfView, width, height);\r\n\r\n        this.cameras.push(camera);\r\n\r\n        return camera;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#getCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - [description]\r\n     *\r\n     * @return {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} [description]\r\n     */\r\n    getCamera: function (name)\r\n    {\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            if (this.cameras[i].name === name)\r\n            {\r\n                return this.cameras[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#removeCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} camera - [description]\r\n     */\r\n    removeCamera: function (camera)\r\n    {\r\n        var cameraIndex = this.cameras.indexOf(camera);\r\n\r\n        if (cameraIndex !== -1)\r\n        {\r\n            this.cameras.splice(cameraIndex, 1);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#removeAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} [description]\r\n     */\r\n    removeAll: function ()\r\n    {\r\n        while (this.cameras.length > 0)\r\n        {\r\n            var camera = this.cameras.pop();\r\n\r\n            camera.destroy();\r\n        }\r\n\r\n        return this.main;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} timestep - [description]\r\n     * @param {number} delta - [description]\r\n     */\r\n    update: function (timestep, delta)\r\n    {\r\n        for (var i = 0, l = this.cameras.length; i < l; ++i)\r\n        {\r\n            this.cameras[i].update(timestep, delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off('update', this.update, this);\r\n        eventEmitter.off('shutdown', this.shutdown, this);\r\n\r\n        this.removeAll();\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off('start', this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('CameraManager3D', CameraManager, 'cameras3d');\r\n\r\nmodule.exports = CameraManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","OrthographicCamera","PerspectiveCamera","PluginCache","CameraManager","initialize","scene","systems","sys","cameras","events","once","boot","on","start","destroy","eventEmitter","update","shutdown","add","fieldOfView","width","height","addPerspectiveCamera","addOrthographicCamera","config","game","undefined","camera","push","getCamera","name","i","length","removeCamera","cameraIndex","indexOf","splice","removeAll","pop","main","timestep","delta","l","off","register"]
}
