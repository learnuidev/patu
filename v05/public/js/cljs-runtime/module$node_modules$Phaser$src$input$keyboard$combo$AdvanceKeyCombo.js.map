{
"version":3,
"file":"module$node_modules$Phaser$src$input$keyboard$combo$AdvanceKeyCombo.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,oEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAoChID,MAAAC,QAAA,CAhBsBC,QAAS,CAACC,KAAD,CAAQC,KAAR,CAC/B,CACIA,KAAAC,gBAAA,CAAwBF,KAAAG,UACxBF,MAAAG,MAAA,EAEA,IAAIH,KAAAG,MAAJ,GAAoBH,KAAAI,KAApB,CAEI,MAAO,CAAA,CAIPJ,MAAAK,QAAA,CAAgBL,KAAAM,SAAA,CAAeN,KAAAG,MAAf,CAChB,OAAO,CAAA,CAXf,CArBgI;",
"sources":["node_modules/Phaser/src/input/keyboard/combo/AdvanceKeyCombo.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$input$keyboard$combo$AdvanceKeyCombo\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Used internally by the KeyCombo class.\r\n * Return `true` if it reached the end of the combo, `false` if not.\r\n *\r\n * @function Phaser.Input.Keyboard.KeyCombo.AdvanceKeyCombo\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {KeyboardEvent} event - The native Keyboard Event.\r\n * @param {Phaser.Input.Keyboard.KeyCombo} combo - The KeyCombo object to advance.\r\n *\r\n * @return {boolean} `true` if it reached the end of the combo, `false` if not.\r\n */\r\nvar AdvanceKeyCombo = function (event, combo)\r\n{\r\n    combo.timeLastMatched = event.timeStamp;\r\n    combo.index++;\r\n\r\n    if (combo.index === combo.size)\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        combo.current = combo.keyCodes[combo.index];\r\n        return false;\r\n    }\r\n};\r\n\r\nmodule.exports = AdvanceKeyCombo;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","AdvanceKeyCombo","event","combo","timeLastMatched","timeStamp","index","size","current","keyCodes"]
}
