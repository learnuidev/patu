{
"version":3,
"file":"module$node_modules$Phaser$src$input$gamepad$Button.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,oDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAsB5GC,MAAAA,CAAS,KAfDH,OAAAI,CAAQ,4CAARA,CAeC,EAAU,CAEnBC,WAEAF,QAAgB,CAACG,GAAD,CAAMC,KAAN,CAChB,CAQI,IAAAD,IAAA,CAAWA,GASX,KAAAE,OAAA,CAAcF,GAAAG,QASd,KAAAF,MAAA,CAAaA,KAUb,KAAAG,MAAA,CAAa,CAWb,KAAAC,UAAA,CAAiB,CAUjB,KAAAC,QAAA,CAAe,CAAA,CAzDnB,CALmB,CA2EnBC,OAAQA,QAAS,CAACH,KAAD,CACjB,CACI,IAAAA,MAAA,CAAaA,KAEb,KAAIJ,IAAM,IAAAA,IAAV,CACIC,MAAQ,IAAAA,MAERG,MAAJ,EAAa,IAAAC,UAAb,CAES,IAAAC,QAFT,GAIQ,IAAAA,QAEA,CAFe,CAAA,CAEf,CADA,IAAAJ,OAAAM,KAAA,CAAiB,MAAjB,CAAyBR,GAAzB,CAA8B,IAA9B,CAAoCI,KAApC,CACA,CAAA,IAAAJ,IAAAQ,KAAA,CAAc,MAAd,CAAsBP,KAAtB;AAA6BG,KAA7B,CAAoC,IAApC,CANR,EASS,IAAAE,QATT,GAWI,IAAAA,QAEA,CAFe,CAAA,CAEf,CADA,IAAAJ,OAAAM,KAAA,CAAiB,IAAjB,CAAuBR,GAAvB,CAA4B,IAA5B,CAAkCI,KAAlC,CACA,CAAA,IAAAJ,IAAAQ,KAAA,CAAc,IAAd,CAAoBP,KAApB,CAA2BG,KAA3B,CAAkC,IAAlC,CAbJ,CANJ,CA5EmB,CAyGnBK,QAASA,QAAS,EAClB,CAEI,IAAAP,OAAA,CADA,IAAAF,IACA,CADW,IADf,CA1GmB,CAAV,CAiHbL,OAAAC,QAAA,CAAiBC,MAvI+F;",
"sources":["node_modules/Phaser/src/input/gamepad/Button.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$input$gamepad$Button\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * Contains information about a specific button on a Gamepad.\r\n * Button objects are created automatically by the Gamepad as they are needed.\r\n *\r\n * @class Button\r\n * @memberOf Phaser.Input.Gamepad\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.Gamepad.Gamepad} pad - A reference to the Gamepad that this Button belongs to.\r\n * @param {integer} index - The index of this Button.\r\n */\r\nvar Button = new Class({\r\n\r\n    initialize:\r\n\r\n    function Button (pad, index)\r\n    {\r\n        /**\r\n         * A reference to the Gamepad that this Button belongs to.\r\n         *\r\n         * @name Phaser.Input.Gamepad.Button#pad\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @since 3.0.0\r\n         */\r\n        this.pad = pad;\r\n\r\n        /**\r\n         * An event emitter to use to emit the button events.\r\n         *\r\n         * @name Phaser.Input.Gamepad.Button#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events = pad.manager;\r\n\r\n        /**\r\n         * The index of this Button.\r\n         *\r\n         * @name Phaser.Input.Gamepad.Button#index\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.index = index;\r\n\r\n        /**\r\n         * Between 0 and 1.\r\n         *\r\n         * @name Phaser.Input.Gamepad.Button#value\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.value = 0;\r\n\r\n        /**\r\n         * Can be set for analogue buttons to enable a 'pressure' threshold,\r\n         * before a button is considered as being 'pressed'.\r\n         *\r\n         * @name Phaser.Input.Gamepad.Button#threshold\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.threshold = 1;\r\n\r\n        /**\r\n         * Is the Button being pressed down or not?\r\n         *\r\n         * @name Phaser.Input.Gamepad.Button#pressed\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.pressed = false;\r\n    },\r\n\r\n    /**\r\n     * Internal update handler for this Button.\r\n     * Called automatically by the Gamepad as part of its update.\r\n     *\r\n     * @method Phaser.Input.Gamepad.Button#update\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The GamepadButton value.\r\n     */\r\n    update: function (value)\r\n    {\r\n        this.value = value;\r\n\r\n        var pad = this.pad;\r\n        var index = this.index;\r\n\r\n        if (value >= this.threshold)\r\n        {\r\n            if (!this.pressed)\r\n            {\r\n                this.pressed = true;\r\n                this.events.emit('down', pad, this, value);\r\n                this.pad.emit('down', index, value, this);\r\n            }\r\n        }\r\n        else if (this.pressed)\r\n        {\r\n            this.pressed = false;\r\n            this.events.emit('up', pad, this, value);\r\n            this.pad.emit('up', index, value, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Button instance and releases external references it holds.\r\n     *\r\n     * @method Phaser.Input.Gamepad.Button#destroy\r\n     * @since 3.10.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.pad = null;\r\n        this.events = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Button;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Button","Class","initialize","pad","index","events","manager","value","threshold","pressed","update","emit","destroy"]
}
