{
"version":3,
"file":"module$node_modules$Phaser$src$geom$triangle$InCenter.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYlHC,QAASA,UAAU,CAACC,EAAD,CAAKC,EAAL,CAASC,EAAT,CAAaC,EAAb,CACnB,CACYH,EAAJI,EAASF,EACLD,GAAJI,EAASF,EAGb,OAAOG,KAAAC,KAAA,CAFUH,EAEV,CAFcA,EAEd,CAFoBC,EAEpB,CAFwBA,EAExB,CALX,CANA,IAAIG,MAAQZ,OAAA,CAAQ,iDAAR,CAoDZC,OAAAC,QAAA,CAzBeW,QAAS,CAACC,QAAD,CAAWC,GAAX,CACxB,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,IAAIH,KAAnC,CAEA,KAAIR,GAAKU,QAAAV,GAAT,CACIC,GAAKS,QAAAT,GADT,CAGIC,GAAKQ,QAAAR,GAHT,CAIIC,GAAKO,QAAAP,GAJT,CAMIU,GAAKH,QAAAG,GACLC,SAAAA,CAAKJ,QAAAI,GAET,KAAIC,GAAKhB,SAAA,CAAUc,EAAV,CAAcC,QAAd,CAAkBZ,EAAlB,CAAsBC,EAAtB,CAAT,CACIa,GAAKjB,SAAA,CAAUC,EAAV,CAAcC,EAAd,CAAkBY,EAAlB,CAAsBC,QAAtB,CADT,CAEIG,GAAKlB,SAAA,CAAUG,EAAV;AAAcC,EAAd,CAAkBH,EAAlB,CAAsBC,EAAtB,CAFT,CAIIiB,EAAIH,EAAJG,CAASF,EAATE,CAAcD,EAElBN,IAAAP,EAAA,EAASJ,EAAT,CAAce,EAAd,CAAmBb,EAAnB,CAAwBc,EAAxB,CAA6BH,EAA7B,CAAkCI,EAAlC,EAAwCC,CACxCP,IAAAN,EAAA,EAASJ,EAAT,CAAcc,EAAd,CAAmBZ,EAAnB,CAAwBa,EAAxB,CAA6BF,QAA7B,CAAkCG,EAAlC,EAAwCC,CAExC,OAAOP,IArBX,CAnCkH;",
"sources":["node_modules/Phaser/src/geom/triangle/InCenter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$triangle$InCenter\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n// The three angle bisectors of a triangle meet in one point called the incenter.\r\n// It is the center of the incircle, the circle inscribed in the triangle.\r\n\r\nfunction getLength (x1, y1, x2, y2)\r\n{\r\n    var x = x1 - x2;\r\n    var y = y1 - y2;\r\n    var magnitude = (x * x) + (y * y);\r\n\r\n    return Math.sqrt(magnitude);\r\n}\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Geom.Triangle.InCenter\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - [description]\r\n * @param {Phaser.Geom.Point} [out] - [description]\r\n *\r\n * @return {Phaser.Geom.Point} [description]\r\n */\r\nvar InCenter = function (triangle, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var x1 = triangle.x1;\r\n    var y1 = triangle.y1;\r\n\r\n    var x2 = triangle.x2;\r\n    var y2 = triangle.y2;\r\n\r\n    var x3 = triangle.x3;\r\n    var y3 = triangle.y3;\r\n\r\n    var d1 = getLength(x3, y3, x2, y2);\r\n    var d2 = getLength(x1, y1, x3, y3);\r\n    var d3 = getLength(x2, y2, x1, y1);\r\n\r\n    var p = d1 + d2 + d3;\r\n\r\n    out.x = (x1 * d1 + x2 * d2 + x3 * d3) / p;\r\n    out.y = (y1 * d1 + y2 * d2 + y3 * d3) / p;\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = InCenter;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","getLength","x1","y1","x2","y2","x","y","Math","sqrt","Point","InCenter","triangle","out","undefined","x3","y3","d1","d2","d3","p"]
}
