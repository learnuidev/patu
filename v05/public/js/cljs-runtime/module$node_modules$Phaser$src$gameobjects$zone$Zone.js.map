{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$zone$Zone.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/zone/Zone.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$zone$Zone\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar BlendModes = require('../../renderer/BlendModes');\r\nvar Circle = require('../../geom/circle/Circle');\r\nvar CircleContains = require('../../geom/circle/Contains');\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar GameObject = require('../GameObject');\r\nvar Rectangle = require('../../geom/rectangle/Rectangle');\r\nvar RectangleContains = require('../../geom/rectangle/Contains');\r\n\r\n/**\r\n * @classdesc\r\n * A Zone Game Object.\r\n *\r\n * A Zone is a non-rendering rectangular Game Object that has a position and size.\r\n * It has no texture and never displays, but does live on the display list and\r\n * can be moved, scaled and rotated like any other Game Object.\r\n *\r\n * Its primary use is for creating Drop Zones and Input Hit Areas and it has a couple of helper methods\r\n * specifically for this. It is also useful for object overlap checks, or as a base for your own\r\n * non-displaying Game Objects.\r\n\r\n * The default origin is 0.5, the center of the Zone, the same as with Game Objects.\r\n *\r\n * @class Zone\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number} [width=1] - The width of the Game Object.\r\n * @param {number} [height=1] - The height of the Game Object.\r\n */\r\nvar Zone = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Depth,\r\n        Components.GetBounds,\r\n        Components.Origin,\r\n        Components.ScaleMode,\r\n        Components.Transform,\r\n        Components.ScrollFactor,\r\n        Components.Visible\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Zone (scene, x, y, width, height)\r\n    {\r\n        if (width === undefined) { width = 1; }\r\n        if (height === undefined) { height = width; }\r\n\r\n        GameObject.call(this, scene, 'Zone');\r\n\r\n        this.setPosition(x, y);\r\n\r\n        /**\r\n         * The native (un-scaled) width of this Game Object.\r\n         *\r\n         * @name Phaser.GameObjects.Zone#width\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = width;\r\n\r\n        /**\r\n         * The native (un-scaled) height of this Game Object.\r\n         *\r\n         * @name Phaser.GameObjects.Zone#height\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = height;\r\n\r\n        /**\r\n         * The Blend Mode of the Game Object.\r\n         * Although a Zone never renders, it still has a blend mode to allow it to fit seamlessly into\r\n         * display lists without causing a batch flush.\r\n         *\r\n         * @name Phaser.GameObjects.Zone#blendMode\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.blendMode = BlendModes.NORMAL;\r\n\r\n        this.updateDisplayOrigin();\r\n    },\r\n\r\n    /**\r\n     * The displayed width of this Game Object.\r\n     * This value takes into account the scale factor.\r\n     *\r\n     * @name Phaser.GameObjects.Zone#displayWidth\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    displayWidth: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.scaleX * this.width;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.scaleX = value / this.width;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The displayed height of this Game Object.\r\n     * This value takes into account the scale factor.\r\n     *\r\n     * @name Phaser.GameObjects.Zone#displayHeight\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    displayHeight: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.scaleY * this.height;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.scaleY = value / this.height;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the size of this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of this Game Object.\r\n     * @param {number} height - The height of this Game Object.\r\n     * @param {boolean} [resizeInput=true] - If this Zone has a Rectangle for a hit area this argument will resize the hit area as well.\r\n     *\r\n     * @return {Phaser.GameObjects.Zone} This Game Object.\r\n     */\r\n    setSize: function (width, height, resizeInput)\r\n    {\r\n        if (resizeInput === undefined) { resizeInput = true; }\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        if (resizeInput && this.input && this.input.hitArea instanceof Rectangle)\r\n        {\r\n            this.input.hitArea.width = width;\r\n            this.input.hitArea.height = height;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the display size of this Game Object.\r\n     * Calling this will adjust the scale.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setDisplaySize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of this Game Object.\r\n     * @param {number} height - The height of this Game Object.\r\n     *\r\n     * @return {Phaser.GameObjects.Zone} This Game Object.\r\n     */\r\n    setDisplaySize: function (width, height)\r\n    {\r\n        this.displayWidth = width;\r\n        this.displayHeight = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets this Zone to be a Circular Drop Zone.\r\n     * The circle is centered on this Zones `x` and `y` coordinates.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setCircleDropZone\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radius - The radius of the Circle that will form the Drop Zone.\r\n     *\r\n     * @return {Phaser.GameObjects.Zone} This Game Object.\r\n     */\r\n    setCircleDropZone: function (radius)\r\n    {\r\n        return this.setDropZone(new Circle(0, 0, radius), CircleContains);\r\n    },\r\n\r\n    /**\r\n     * Sets this Zone to be a Rectangle Drop Zone.\r\n     * The rectangle is centered on this Zones `x` and `y` coordinates.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setRectangleDropZone\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of the rectangle drop zone.\r\n     * @param {number} height - The height of the rectangle drop zone.\r\n     *\r\n     * @return {Phaser.GameObjects.Zone} This Game Object.\r\n     */\r\n    setRectangleDropZone: function (width, height)\r\n    {\r\n        return this.setDropZone(new Rectangle(0, 0, width, height), RectangleContains);\r\n    },\r\n\r\n    /**\r\n     * Allows you to define your own Geometry shape to be used as a Drop Zone.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setDropZone\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} shape - A Geometry shape instance, such as Phaser.Geom.Ellipse, or your own custom shape.\r\n     * @param {HitAreaCallback} callback - A function that will return `true` if the given x/y coords it is sent are within the shape.\r\n     *\r\n     * @return {Phaser.GameObjects.Zone} This Game Object.\r\n     */\r\n    setDropZone: function (shape, callback)\r\n    {\r\n        if (shape === undefined)\r\n        {\r\n            this.setRectangleDropZone(this.width, this.height);\r\n        }\r\n        else if (!this.input)\r\n        {\r\n            this.setInteractive(shape, callback, true);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * A NOOP method so you can pass a Zone to a Container.\r\n     * Calling this method will do nothing. It is intentionally empty.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setAlpha\r\n     * @private\r\n     * @since 3.11.0\r\n     */\r\n    setAlpha: function ()\r\n    {\r\n    },\r\n    \r\n    /**\r\n     * A Zone does not render.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#renderCanvas\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    renderCanvas: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * A Zone does not render.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#renderWebGL\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    renderWebGL: function ()\r\n    {\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Zone;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BlendModes","Circle","CircleContains","Class","Components","GameObject","Rectangle","RectangleContains","Zone","Extends","Mixins","Depth","GetBounds","Origin","ScaleMode","Transform","ScrollFactor","Visible","initialize","scene","x","y","width","height","undefined","call","setPosition","blendMode","NORMAL","updateDisplayOrigin","displayWidth","get","scaleX","set","value","displayHeight","scaleY","setSize","resizeInput","input","hitArea","setDisplaySize","setCircleDropZone","radius","setDropZone","setRectangleDropZone","shape","callback","setInteractive","setAlpha","renderCanvas","renderWebGL"]
}
