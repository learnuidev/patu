{
"version":3,
"file":"module$node_modules$Phaser$src$loader$filetypes$AudioFile.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/Phaser/src/loader/filetypes/AudioFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$filetypes$AudioFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar HTML5AudioFile = require('./HTML5AudioFile');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.AudioFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within the Loader and Audio Cache.\r\n * @property {string} [urlConfig] - The absolute or relative URL to load the file from.\r\n * @property {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n * @property {AudioContext} [audioContext] - The AudioContext this file will use to process itself.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A single Audio File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#audio method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audio.\r\n *\r\n * @class AudioFile\r\n * @extends Phaser.Loader.File\r\n * @memberOf Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.AudioFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {any} [urlConfig] - The absolute or relative URL to load this file from in a config object.\r\n * @param {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n * @param {AudioContext} [audioContext] - The AudioContext this file will use to process itself.\r\n */\r\nvar AudioFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    //  URL is an object created by AudioFile.findAudioURL\r\n    function AudioFile (loader, key, urlConfig, xhrSettings, audioContext)\r\n    {\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            audioContext = GetFastValue(config, 'context', audioContext);\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'audio',\r\n            cache: loader.cacheManager.audio,\r\n            extension: urlConfig.type,\r\n            responseType: 'arraybuffer',\r\n            key: key,\r\n            url: urlConfig.url,\r\n            xhrSettings: xhrSettings,\r\n            config: { context: audioContext }\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.AudioFile#onProcess\r\n     * @since 3.0.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        var _this = this;\r\n\r\n        // interesting read https://github.com/WebAudio/web-audio-api/issues/1305\r\n        this.config.context.decodeAudioData(this.xhrLoader.response,\r\n            function (audioBuffer)\r\n            {\r\n                _this.data = audioBuffer;\r\n\r\n                _this.onProcessComplete();\r\n            },\r\n            function (e)\r\n            {\r\n                // eslint-disable-next-line no-console\r\n                console.error('Error decoding audio: ' + this.key + ' - ', e ? e.message : null);\r\n\r\n                _this.onProcessError();\r\n            }\r\n        );\r\n\r\n        this.config.context = null;\r\n    }\r\n\r\n});\r\n\r\nAudioFile.create = function (loader, key, urls, config, xhrSettings)\r\n{\r\n    var game = loader.systems.game;\r\n    var audioConfig = game.config.audio;\r\n    var deviceAudio = game.device.audio;\r\n\r\n    //  url may be inside key, which may be an object\r\n    if (IsPlainObject(key))\r\n    {\r\n        urls = GetFastValue(key, 'url', []);\r\n        config = GetFastValue(key, 'config', {});\r\n    }\r\n\r\n    var urlConfig = AudioFile.getAudioURL(game, urls);\r\n\r\n    if (!urlConfig)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    // https://developers.google.com/web/updates/2012/02/HTML5-audio-and-the-Web-Audio-API-are-BFFs\r\n    // var stream = GetFastValue(config, 'stream', false);\r\n\r\n    if (deviceAudio.webAudio && !(audioConfig && audioConfig.disableWebAudio))\r\n    {\r\n        return new AudioFile(loader, key, urlConfig, xhrSettings, game.sound.context);\r\n    }\r\n    else\r\n    {\r\n        return new HTML5AudioFile(loader, key, urlConfig, config);\r\n    }\r\n};\r\n\r\nAudioFile.getAudioURL = function (game, urls)\r\n{\r\n    if (!Array.isArray(urls))\r\n    {\r\n        urls = [ urls ];\r\n    }\r\n\r\n    for (var i = 0; i < urls.length; i++)\r\n    {\r\n        var url = GetFastValue(urls[i], 'url', urls[i]);\r\n\r\n        if (url.indexOf('blob:') === 0 || url.indexOf('data:') === 0)\r\n        {\r\n            return url;\r\n        }\r\n\r\n        var audioType = url.match(/\\.([a-zA-Z0-9]+)($|\\?)/);\r\n\r\n        audioType = GetFastValue(urls[i], 'type', (audioType) ? audioType[1] : '').toLowerCase();\r\n\r\n        if (game.device.audio[audioType])\r\n        {\r\n            return {\r\n                url: url,\r\n                type: audioType\r\n            };\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Adds an Audio or HTML5Audio file, or array of audio files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.audio('title', [ 'music/Title.ogg', 'music/Title.mp3', 'music/Title.m4a' ]);\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Audio Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Audio Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Audio Cache first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.audio({\r\n *     key: 'title',\r\n *     url: [ 'music/Title.ogg', 'music/Title.mp3', 'music/Title.m4a' ]\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.AudioFileConfig` for more details.\r\n *\r\n * The URLs can be relative or absolute. If the URLs are relative the `Loader.baseURL` and `Loader.path` values will be prepended to them.\r\n *\r\n * Due to different browsers supporting different audio file types you should usually provide your audio files in a variety of formats.\r\n * ogg, mp3 and m4a are the most common. If you provide an array of URLs then the Loader will determine which _one_ file to load based on\r\n * browser support.\r\n *\r\n * If audio has been disabled in your game, either via the game config, or lack of support from the device, then no audio will be loaded.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Audio File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#audio\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.AudioFileConfig|Phaser.Loader.FileTypes.AudioFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {(string|string[])} [urls] - The absolute or relative URL to load the audio files from.\r\n * @param {any} [config] - An object containing an `instances` property for HTML5Audio. Defaults to 1.\r\n * @param {XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('audio', function (key, urls, config, xhrSettings)\r\n{\r\n    var game = this.systems.game;\r\n    var audioConfig = game.config.audio;\r\n    var deviceAudio = game.device.audio;\r\n\r\n    if ((audioConfig && audioConfig.noAudio) || (!deviceAudio.webAudio && !deviceAudio.audioData))\r\n    {\r\n        //  Sounds are disabled, so skip loading audio\r\n        return this;\r\n    }\r\n\r\n    var audioFile;\r\n\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            audioFile = AudioFile.create(this, key[i]);\r\n\r\n            if (audioFile)\r\n            {\r\n                this.addFile(audioFile);\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        audioFile = AudioFile.create(this, key, urls, config, xhrSettings);\r\n\r\n        if (audioFile)\r\n        {\r\n            this.addFile(audioFile);\r\n        }\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = AudioFile;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","CONST","File","FileTypesManager","GetFastValue","HTML5AudioFile","IsPlainObject","AudioFile","Extends","initialize","loader","key","urlConfig","xhrSettings","audioContext","config","call","fileConfig","type","cache","cacheManager","audio","extension","responseType","url","context","onProcess","state","FILE_PROCESSING","_this","decodeAudioData","xhrLoader","response","audioBuffer","data","onProcessComplete","e","console","error","message","onProcessError","create","AudioFile.create","urls","game","systems","audioConfig","deviceAudio","device","getAudioURL","webAudio","disableWebAudio","sound","AudioFile.getAudioURL","Array","isArray","i","length","indexOf","audioType","match","toLowerCase","register","noAudio","audioData","audioFile","addFile"]
}
