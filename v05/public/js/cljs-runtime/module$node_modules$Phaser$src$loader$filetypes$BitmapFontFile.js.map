{
"version":3,
"file":"module$node_modules$Phaser$src$loader$filetypes$BitmapFontFile.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/loader/filetypes/BitmapFontFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$filetypes$BitmapFontFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar ImageFile = require('./ImageFile.js');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\nvar MultiFile = require('../MultiFile.js');\r\nvar ParseXMLBitmapFont = require('../../gameobjects/bitmaptext/ParseXMLBitmapFont.js');\r\nvar XMLFile = require('./XMLFile.js');\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.BitmapFontFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within both the Loader and the Texture Manager.\r\n * @property {string} [textureURL] - The absolute or relative URL to load the texture image file from.\r\n * @property {string} [textureExtension='png'] - The default file extension to use for the image texture if no url is provided.\r\n * @property {XHRSettingsObject} [textureXhrSettings] - Extra XHR Settings specifically for the texture image file.\r\n * @property {string} [normalMap] - The filename of an associated normal map. It uses the same path and url to load as the texture image.\r\n * @property {string} [fontDataURL] - The absolute or relative URL to load the font data xml file from.\r\n * @property {string} [fontDataExtension='xml'] - The default file extension to use for the font data xml if no url is provided.\r\n * @property {XHRSettingsObject} [fontDataXhrSettings] - Extra XHR Settings specifically for the font data xml file.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A single Bitmap Font based File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#bitmapFont method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#bitmapFont.\r\n *\r\n * @class BitmapFontFile\r\n * @extends Phaser.Loader.MultiFile\r\n * @memberOf Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.BitmapFontFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string|string[]} [textureURL] - The absolute or relative URL to load the font image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {string} [fontDataURL] - The absolute or relative URL to load the font xml data file from. If undefined or `null` it will be set to `<key>.xml`, i.e. if `key` was \"alien\" then the URL will be \"alien.xml\".\r\n * @param {XHRSettingsObject} [textureXhrSettings] - An XHR Settings configuration object for the font image file. Used in replacement of the Loaders default XHR Settings.\r\n * @param {XHRSettingsObject} [fontDataXhrSettings] - An XHR Settings configuration object for the font data xml file. Used in replacement of the Loaders default XHR Settings.\r\n */\r\nvar BitmapFontFile = new Class({\r\n\r\n    Extends: MultiFile,\r\n\r\n    initialize:\r\n\r\n    function BitmapFontFile (loader, key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings)\r\n    {\r\n        var image;\r\n        var data;\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n\r\n            image = new ImageFile(loader, {\r\n                key: key,\r\n                url: GetFastValue(config, 'textureURL'),\r\n                extension: GetFastValue(config, 'textureExtension', 'png'),\r\n                normalMap: GetFastValue(config, 'normalMap'),\r\n                xhrSettings: GetFastValue(config, 'textureXhrSettings')\r\n            });\r\n\r\n            data = new XMLFile(loader, {\r\n                key: key,\r\n                url: GetFastValue(config, 'fontDataURL'),\r\n                extension: GetFastValue(config, 'fontDataExtension', 'xml'),\r\n                xhrSettings: GetFastValue(config, 'fontDataXhrSettings')\r\n            });\r\n        }\r\n        else\r\n        {\r\n            image = new ImageFile(loader, key, textureURL, textureXhrSettings);\r\n            data = new XMLFile(loader, key, fontDataURL, fontDataXhrSettings);\r\n        }\r\n\r\n        if (image.linkFile)\r\n        {\r\n            //  Image has a normal map\r\n            MultiFile.call(this, loader, 'bitmapfont', key, [ image, data, image.linkFile ]);\r\n        }\r\n        else\r\n        {\r\n            MultiFile.call(this, loader, 'bitmapfont', key, [ image, data ]);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.BitmapFontFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        if (this.isReadyToProcess())\r\n        {\r\n            var image = this.files[0];\r\n            var xml = this.files[1];\r\n\r\n            image.addToCache();\r\n            xml.addToCache();\r\n\r\n            this.loader.cacheManager.bitmapFont.add(image.key, { data: ParseXMLBitmapFont(xml.data), texture: image.key, frame: null });\r\n\r\n            this.complete = true;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds an XML based Bitmap Font, or array of fonts, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n\r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.bitmapFont('goldenFont', 'images/GoldFont.png', 'images/GoldFont.xml');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\r\n * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\r\n *\r\n * Phaser expects the font data to be provided in an XML file format.\r\n * These files are created by software such as the [Angelcode Bitmap Font Generator](http://www.angelcode.com/products/bmfont/),\r\n * [Littera](http://kvazars.com/littera/) or [Glyph Designer](https://71squared.com/glyphdesigner)\r\n * \r\n * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.bitmapFont({\r\n *     key: 'goldenFont',\r\n *     textureURL: 'images/GoldFont.png',\r\n *     fontDataURL: 'images/GoldFont.xml'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.BitmapFontFileConfig` for more details.\r\n *\r\n * Once the atlas has finished loading you can use key of it when creating a Bitmap Text Game Object:\r\n * \r\n * ```javascript\r\n * this.load.bitmapFont('goldenFont', 'images/GoldFont.png', 'images/GoldFont.xml');\r\n * // and later in your game ...\r\n * this.add.bitmapText(x, y, 'goldenFont', 'Hello World');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use when creating a Bitmap Text object.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\r\n * then you can specify it by providing an array as the `url` where the second element is the normal map:\r\n * \r\n * ```javascript\r\n * this.load.bitmapFont('goldenFont', [ 'images/GoldFont.png', 'images/GoldFont-n.png' ], 'images/GoldFont.xml');\r\n * ```\r\n *\r\n * Or, if you are using a config object use the `normalMap` property:\r\n * \r\n * ```javascript\r\n * this.load.bitmapFont({\r\n *     key: 'goldenFont',\r\n *     textureURL: 'images/GoldFont.png',\r\n *     normalMap: 'images/GoldFont-n.png',\r\n *     fontDataURL: 'images/GoldFont.xml'\r\n * });\r\n * ```\r\n *\r\n * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\r\n * Normal maps are a WebGL only feature.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Bitmap Font File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#bitmapFont\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.BitmapFontFileConfig|Phaser.Loader.FileTypes.BitmapFontFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string|string[]} [textureURL] - The absolute or relative URL to load the font image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {string} [fontDataURL] - The absolute or relative URL to load the font xml data file from. If undefined or `null` it will be set to `<key>.xml`, i.e. if `key` was \"alien\" then the URL will be \"alien.xml\".\r\n * @param {XHRSettingsObject} [textureXhrSettings] - An XHR Settings configuration object for the font image file. Used in replacement of the Loaders default XHR Settings.\r\n * @param {XHRSettingsObject} [fontDataXhrSettings] - An XHR Settings configuration object for the font data xml file. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('bitmapFont', function (key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings)\r\n{\r\n    var multifile;\r\n\r\n    //  Supports an Object file definition in the key argument\r\n    //  Or an array of objects in the key argument\r\n    //  Or a single entry where all arguments have been defined\r\n\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            multifile = new BitmapFontFile(this, key[i]);\r\n\r\n            this.addFile(multifile.files);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        multifile = new BitmapFontFile(this, key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings);\r\n\r\n        this.addFile(multifile.files);\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = BitmapFontFile;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","FileTypesManager","GetFastValue","ImageFile","IsPlainObject","MultiFile","ParseXMLBitmapFont","XMLFile","BitmapFontFile","Extends","initialize","loader","key","textureURL","fontDataURL","textureXhrSettings","fontDataXhrSettings","config","image","url","extension","normalMap","xhrSettings","data","linkFile","call","addToCache","isReadyToProcess","files","xml","cacheManager","bitmapFont","add","texture","frame","complete","register","Array","isArray","i","length","multifile","addFile"]
}
