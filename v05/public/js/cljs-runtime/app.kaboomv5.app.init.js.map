{"version":3,"sources":["app/kaboomv5/app/init.cljs"],"mappings":";;;AAIA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAmBM;AAAnB,AACE,AAAMC,AAAO,AAAA,AAACC;AAAd,AACE,AAAMF;AAAN,AACE,AAAA,AAAMC,AAAW,AAAAE,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAAA;;;;AADnB;;AAEA,AAAc,AAAQC,AAAaH;;AACnCA;;AACJ,AAAA,AAAA,AAAAI,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AACM,AAAA,AAACE,AAAY,AAAA,AAAA,AAAA,AAACV;;;AADpB,AAAA,AAAA,AAAMQ,AAEFN,AAAOS;AAFX,AAGG,AAAA,AAAA,AAACC,AAAMC,AAAUC,AACFZ,AACAS;;;AALlB,AAAA,AAAA,AAAMH;;AAAN,AAQA,AAAA,AAAMO,AAAQb;AAAd,AACE,AAAA,AAAaA;;AAEf,AAAA,AAAMc,AAAed;AAArB,AACE,AAAIA;AACF,AAAA,AAACU,AAAMC,AAAWC,AAAU,AAACC,AAAOb;;AACpC,AAAA,AAACU,AAAMC,AAAWC,AAAU,AAACC,AAAO,AAAA,AAAA,AAAA,AAACf","names":["p__26625","map__26626","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.kaboomv5.app.init/new-canvas","id","canvas","js/document.createElement","or__4126__auto__","js/document","var_args","G__26631","app.kaboomv5.app.init/init-canvas","js/Error","app.kaboomv5.app.init.init_canvas","config","cljs.core.swap_BANG_","app.kaboomv5.app.state/app-state","cljs.core/assoc","app.kaboomv5.app.init/new-gl","app.kaboomv5.app.init/init-gl-state"],"sourcesContent":["(ns app.kaboomv5.app.init\n  (:require [app.kaboomv5.app.state :refer [app-state key-map]]))\n\n;; 1. New Canvas\n(defn new-canvas [{id :id}]\n  (let [canvas (js/document.createElement \"canvas\")]\n    (when id\n      (set! canvas -id (or id \"mooo\")))\n    (.appendChild (.-body js/document) canvas)\n    canvas))\n(defn init-canvas\n  ([] (init-canvas (new-canvas {:id \"app\"}) {}))\n  ([canvas config]\n   (swap! app-state assoc\n          :canvas canvas\n          :config config)))\n\n;; 2. New Gl\n(defn new-gl [canvas]\n  (.getContext canvas \"webgl\"))\n\n(defn init-gl-state [canvas]\n  (if canvas\n    (swap! app-state  assoc :gl (new-gl canvas))\n    (swap! app-state  assoc :gl (new-gl (new-canvas {:id \"app\"})))))\n"]}