{
"version":3,
"file":"module$node_modules$$formatjs$ecma402_abstract$RelativeTimeFormat$PartitionRelativeTimePattern.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,+FAAA,CAAmH,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE3JC,MAAAC,eAAA,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAAI,6BAAA,CAAuC,IAAK,EAC5C,KAAIC,QAAUP,OAAA,CAAQ,sDAAR,CAAd,CACIQ,2BAA6BR,OAAA,CAAQ,4FAAR,CADjC,CAEIS,gBAAkBT,OAAA,CAAQ,iFAAR,CAFtB;AAGIU,OAASV,OAAA,CAAQ,oDAAR,CAmDbE,QAAAI,6BAAA,CAlDAA,QAAqC,CAACK,GAAD,CAAMN,KAAN,CAAaO,IAAb,CAAmBC,EAAnB,CAAuB,CACxD,IAAIC,iBAAmBD,EAAAC,iBACvBP,QAAAQ,UAAA,CAAyC,QAAzC,GAAkBL,MAAAM,KAAA,CAAYX,KAAZ,CAAlB,CAAmD,oCAAnD,CAA0F,MAAOA,MAAjG,CAAwGY,SAAxG,CACAV,QAAAQ,UAAA,CAAwC,QAAxC,GAAkBL,MAAAM,KAAA,CAAYJ,IAAZ,CAAlB,CAAkD,mCAAlD,CAAwF,MAAOP,MAA/F,CAAsGY,SAAtG,CACA,IAAIC,KAAA,CAAMb,KAAN,CAAJ,EAAoB,CAACc,QAAA,CAASd,KAAT,CAArB,CACI,KAAM,KAAIe,UAAJ,CAAe,gBAAf,CAAkCf,KAAlC,CAAN,CAEAgB,EAAAA,CAAeb,0BAAAc,yBAAA,CAAoDV,IAApD,CACfW;gBAAAA,CAAKT,gBAAA,CAAiBH,GAAjB,CAR+C,KAQxBa,OAASD,gBAAAC,OARe,CAQJC,MAAQF,gBAAAE,MARJ,CAQcC,QAAUH,gBAAAG,QAAYC,IAAAA,CAAcJ,gBAAAI,YAAgBC,iBAAAA,CAAeL,gBAAAK,aACzI,KAAIC,MAAQR,EACE,QAAd,GAAII,KAAJ,CACII,KADJ,CACYR,EADZ,CAC2B,QAD3B,CAGmB,QAHnB,GAGSI,KAHT,GAIII,KAJJ,CAIYR,EAJZ,CAI2B,SAJ3B,CAMMQ,MAAN,GAAeL,OAAf,GACIK,KADJ,CACYR,EADZ,CAGIS,OAAAA,CAAWN,MAAA,CAAOK,KAAP,CACf,IAAgB,MAAhB,GAAIH,OAAJ,EACQhB,MAAAqB,SAAA,CAAgB1B,KAAhB,CADR,EACkCyB,OADlC,CAEQ,MAAO,CACH,CACIE,KAAM,SADV,CAEI3B,MAAOyB,MAAA,CAASpB,MAAAqB,SAAA,CAAgB1B,KAAhB,CAAT,CAFX,CADG,CAQX4B,QAAAA,CAAK,QACT,IAAIvB,MAAAwB,UAAA,CAAiB7B,KAAjB;AAAwB,EAAxB,CAAJ,EAA2C,CAA3C,CAAmCA,KAAnC,CACI4B,OAAA,CAAK,MAELE,QAAAA,CAAKL,MAAA,CAASG,OAAT,CACLG,KAAAA,CAA2C,UAAtC,GAAA,MAAOR,iBAAAS,cAAP,CACHT,gBAAAS,cAAA,CAA2BC,IAAAC,IAAA,CAASlC,KAAT,CAA3B,CADG,CAID,CACI,CACI2B,KAAM,SADV,CAEI3B,MAAOuB,gBAAAY,OAAA,CAAoBF,IAAAC,IAAA,CAASlC,KAAT,CAApB,CAFX,CAGIO,KAAMA,IAHV,CADJ,CAOJ6B,MAAAA,CAAKd,GAAAe,OAAA,CAAmBrC,KAAnB,CAET,OAAOI,gBAAAkC,cAAA,CADOR,OAAAS,CAAGH,KAAHG,CACP,CAAuCvB,EAAvC,CAAqDe,IAArD,CAhDiD,CAR+F;",
"sources":["node_modules/@formatjs/ecma402-abstract/RelativeTimeFormat/PartitionRelativeTimePattern.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$formatjs$ecma402_abstract$RelativeTimeFormat$PartitionRelativeTimePattern\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartitionRelativeTimePattern = void 0;\nvar utils_1 = require(\"../utils\");\nvar SingularRelativeTimeUnit_1 = require(\"./SingularRelativeTimeUnit\");\nvar MakePartsList_1 = require(\"./MakePartsList\");\nvar _262_1 = require(\"../262\");\nfunction PartitionRelativeTimePattern(rtf, value, unit, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    utils_1.invariant(_262_1.Type(value) === 'Number', \"value must be number, instead got \" + typeof value, TypeError);\n    utils_1.invariant(_262_1.Type(unit) === 'String', \"unit must be number, instead got \" + typeof value, TypeError);\n    if (isNaN(value) || !isFinite(value)) {\n        throw new RangeError(\"Invalid value \" + value);\n    }\n    var resolvedUnit = SingularRelativeTimeUnit_1.SingularRelativeTimeUnit(unit);\n    var _b = getInternalSlots(rtf), fields = _b.fields, style = _b.style, numeric = _b.numeric, pluralRules = _b.pluralRules, numberFormat = _b.numberFormat;\n    var entry = resolvedUnit;\n    if (style === 'short') {\n        entry = resolvedUnit + \"-short\";\n    }\n    else if (style === 'narrow') {\n        entry = resolvedUnit + \"-narrow\";\n    }\n    if (!(entry in fields)) {\n        entry = resolvedUnit;\n    }\n    var patterns = fields[entry];\n    if (numeric === 'auto') {\n        if (_262_1.ToString(value) in patterns) {\n            return [\n                {\n                    type: 'literal',\n                    value: patterns[_262_1.ToString(value)],\n                },\n            ];\n        }\n    }\n    var tl = 'future';\n    if (_262_1.SameValue(value, -0) || value < 0) {\n        tl = 'past';\n    }\n    var po = patterns[tl];\n    var fv = typeof numberFormat.formatToParts === 'function'\n        ? numberFormat.formatToParts(Math.abs(value))\n        : // TODO: If formatToParts is not supported, we assume the whole formatted\n            // number is a part\n            [\n                {\n                    type: 'literal',\n                    value: numberFormat.format(Math.abs(value)),\n                    unit: unit,\n                },\n            ];\n    var pr = pluralRules.select(value);\n    var pattern = po[pr];\n    return MakePartsList_1.MakePartsList(pattern, resolvedUnit, fv);\n}\nexports.PartitionRelativeTimePattern = PartitionRelativeTimePattern;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","PartitionRelativeTimePattern","utils_1","SingularRelativeTimeUnit_1","MakePartsList_1","_262_1","rtf","unit","_a","getInternalSlots","invariant","Type","TypeError","isNaN","isFinite","RangeError","resolvedUnit","SingularRelativeTimeUnit","_b","fields","style","numeric","pluralRules","numberFormat","entry","patterns","ToString","type","tl","SameValue","po","fv","formatToParts","Math","abs","format","pr","select","MakePartsList","pattern"]
}
