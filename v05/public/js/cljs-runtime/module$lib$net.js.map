{
"version":3,
"file":"module$lib$net.js",
"lineCount":62,
"mappings":"AAAAA,QAASA,wBAAO,CAACC,GAAD,CAAM;AAMpBC,UAASA,UAAS,EAAG;AACnB,WAAOC,MAAP,KAAkB,IAAlB,IAA0BA,MAAAC,WAA1B,KAAgD,CAAhD;AADmB;AAIrBC,UAASA,QAAO,EAAG;kBACjB,IAAMC,KAAK,IAAIC,SAAJ,CAAcN,GAAd,CAAX;AAEA,WACE,IAAIO,OADN,GAEED,SAFF,GAGG,QAAA,CAACE,OAAD,EAAUC,MAAV,CAAqB;AACpBJ,QAAAK,OAAA,GAAYC,QAAA,EAAM;AAChBH,eAAA,CAAQH,EAAR,CAAA;AACAH,cAAA,GAASG,EAAT;AAFgB,YAGhB,iBAAA,OAAA,aAAA,CAAkBO,SAAlB,CAHgB;AAGhB,aAAA,IAAA,kBAAA,cAAA,KAAA,EAAA,EAAA,CAAA,eAAA,KAAA,EAAA,eAAA,GAAA,cAAA,KAAA,EAAA,CAA6B;wBAA7B,IAAWC,MAAX,eAAA,MAAA;AAA6B;AAC3BR,cAAAS,KAAA,CAAQD,GAAR,CAAA;AAD2B;AAAA;AAHb,OAAlB;AAQAR,QAAAU,QAAA,GAAaC,QAAA,EAAM;AACjBP,cAAA,CAAO,uBAAP,GAA+BT,GAA/B,CAAA;AADiB,OAAnB;AAIAK,QAAAY,UAAA,GAAeC,QAAA,CAACC,CAAD,CAAO;sBACpB,IAAMN,MAAMO,IAAAC,MAAA,CAAWF,CAAAG,KAAX,CAAZ;AACA,YAAIC,QAAA,CAASV,GAAAW,KAAT,CAAJ,CAAwB;AAAA,cACtB,iBAAA,OAAA,aAAA,CAAsBD,QAAA,CAASV,GAAAW,KAAT,CAAtB,CADsB;AACtB,eAAA,IAAA,sBAAA,cAAA,KAAA,EAAA,EAAA,CAAA,mBAAA,KAAA,EAAA,mBAAA,GAAA,cAAA,KAAA,EAAA,CAA0C;0BAA1C,IAAWC,UAAX,mBAAA,MAAA;AAA0C;AACxCA,qBAAA,CAAQZ,GAAAa,GAAR,EAAgBb,GAAAS,KAAhB,CAAA;AADwC;AAAA;AADpB;AAFJ,OAAtB;AAboB,KAHxB;AAHiB;AA+BnBK,UAASA,KAAI,CAACH,IAAD,EAAOC,OAAP,CAAgB;AAC3B,QAAI,CAACF,QAAA,CAASC,IAAT,CAAL;AACED,cAAA,CAASC,IAAT,CAAA,GAAiB,EAAjB;AADF;AAGAD,YAAA,CAASC,IAAT,CAAAI,KAAA,CAAoBH,OAApB,CAAA;AAJ2B;AAO7BX,UAASA,KAAI,CAACU,IAAD,EAAOF,IAAP,CAAa;kBACxB,IAAMT,MAAMO,IAAAS,UAAA,CAAe,CACzBL,KAAMA,IADmB,EAEzBF,KAAMA,IAFmB,CAAf,CAAZ;AAIA,QAAIpB,MAAJ;AACEA,YAAAY,KAAA,CAAYD,GAAZ,CAAA;AADF;AAGED,eAAAgB,KAAA,CAAef,GAAf,CAAA;AAHF;AALwB;AAY1BiB,UAASA,MAAK,EAAG;AACf,QAAI5B,MAAJ;AACEA,YAAA4B,MAAA,EAAA;AADF;AADe;AA5DG,gBACpB,IAAMP,WAAW,EAAjB;AADoB,gBAEpB,IAAMX,YAAY,EAAlB;AAEA,MAAIV,SAAS,IAAb;AA8DA,SAAO,CACLE,QAAAA,OADK,EAEL0B,MAAAA,KAFK,EAGL7B,UAAAA,SAHK,EAIL0B,KAAAA,IAJK,EAKLb,KAAAA,IALK,CAAP;AAlEoB;AAAtB,cAAA,IAAAiB,iBAAA,EAAA;AA2EShC,cAAAA,cAAAA,QAAAA,GAAAA,uBAAAA;;",
"sources":["lib/net.js"],
"sourcesContent":["function netInit(url) {\n  const handlers = {};\n  const sendQueue = [];\n\n  let socket = null;\n\n  function connected() {\n    return socket !== null && socket.readyState === 1;\n  }\n\n  function connect() {\n    const ws = new WebSocket(url);\n\n    return (\n      new Promise() <\n      WebSocket >\n      ((resolve, reject) => {\n        ws.onopen = () => {\n          resolve(ws);\n          socket = ws;\n          for (const msg of sendQueue) {\n            ws.send(msg);\n          }\n        };\n\n        ws.onerror = () => {\n          reject(`failed to connect to ${url}`);\n        };\n\n        ws.onmessage = (e) => {\n          const msg = JSON.parse(e.data);\n          if (handlers[msg.type]) {\n            for (const handler of handlers[msg.type]) {\n              handler(msg.id, msg.data);\n            }\n          }\n        };\n      })\n    );\n  }\n\n  function recv(type, handler) {\n    if (!handlers[type]) {\n      handlers[type] = [];\n    }\n    handlers[type].push(handler);\n  }\n\n  function send(type, data) {\n    const msg = JSON.stringify({\n      type: type,\n      data: data,\n    });\n    if (socket) {\n      socket.send(msg);\n    } else {\n      sendQueue.push(msg);\n    }\n  }\n\n  function close() {\n    if (socket) {\n      socket.close();\n    }\n  }\n\n  return {\n    connect,\n    close,\n    connected,\n    recv,\n    send,\n  };\n}\n\nexport { netInit };\n"],
"names":["netInit","url","connected","socket","readyState","connect","ws","WebSocket","Promise","resolve","reject","onopen","ws.onopen","sendQueue","msg","send","onerror","ws.onerror","onmessage","ws.onmessage","e","JSON","parse","data","handlers","type","handler","id","recv","push","stringify","close","$jscomp$tmp$exports$module$name"]
}
