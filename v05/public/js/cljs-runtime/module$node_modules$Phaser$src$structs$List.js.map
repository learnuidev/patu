{
"version":3,
"file":"module$node_modules$Phaser$src$structs$List.js",
"lineCount":8,
"mappings":"AAAAA,cAAA,4CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOxG,IAAIC,WAAaH,OAAA,CAAQ,kDAAR,CACbI,OAAAA,CAAQJ,OAAA,CAAQ,4CAAR,CACZ,KAAIK,KAAOL,OAAA,CAAQ,2CAAR,CAAX,CACIM,WAAaN,OAAA,CAAQ,uDAAR,CAuBbO,QAAAA,CAAO,IAAIH,MAAJ,CAAU,CAEjBI,WAEAD,QAAc,CAACE,MAAD,CACd,CAQI,IAAAA,OAAA,CAAcA,MAYd,KAAAC,KAAA,CAAY,EAYZ,KAAAC,SAAA,CAAgB,CAkBhB,KAAAC,eAAA,CATA,IAAAC,YASA;AATmBR,IAkBnB,KAAAS,SAAA,CAAgB,EA3DpB,CALiB,CAgFjBC,IAAKA,QAAS,CAACC,KAAD,CAAQC,YAAR,CACd,CACI,MAAIA,aAAJ,CAEWd,UAAAe,IAAA,CAAe,IAAAR,KAAf,CAA0BM,KAA1B,CAFX,CAMWb,UAAAe,IAAA,CAAe,IAAAR,KAAf,CAA0BM,KAA1B,CAAiC,CAAjC,CAAoC,IAAAH,YAApC,CAAsD,IAAtD,CAPf,CAjFiB,CA0GjBM,MAAOA,QAAS,CAACH,KAAD,CAAQI,KAAR,CAAeH,YAAf,CAChB,CACI,MAAIA,aAAJ,CAEWd,UAAAkB,MAAA,CAAiB,IAAAX,KAAjB,CAA4BM,KAA5B,CAAmCI,KAAnC,CAFX,CAMWjB,UAAAkB,MAAA,CAAiB,IAAAX,KAAjB,CAA4BM,KAA5B,CAAmCI,KAAnC,CAA0C,CAA1C,CAA6C,IAAAP,YAA7C,CAA+D,IAA/D,CAPf,CA3GiB,CAkIjBS,MAAOA,QAAS,CAACF,KAAD,CAChB,CACI,MAAO,KAAAV,KAAA,CAAUU,KAAV,CADX,CAnIiB,CAmJjBG,SAAUA,QAAS,CAACP,KAAD,CACnB,CAEI,MAAO,KAAAN,KAAAc,QAAA,CAAkBR,KAAlB,CAFX,CApJiB,CAuKjBS,KAAMA,QAAS,CAACC,QAAD,CACf,CACQA,QAAJ,GAEI,IAAAZ,SAEA,CAFgBY,QAEhB,CAAApB,UAAAqB,QAAA,CAAmB,IAAAjB,KAAnB;AAA8B,IAAAkB,YAA9B,CAJJ,CAOA,OAAO,KARX,CAxKiB,CAiMjBA,YAAaA,QAAS,CAACC,MAAD,CAASC,MAAT,CACtB,CACI,MAAOD,OAAA,CAAO,IAAAf,SAAP,CAAP,CAA+BgB,MAAA,CAAO,IAAAhB,SAAP,CADnC,CAlMiB,CAoNjBiB,UAAWA,QAAS,CAACC,IAAD,CACpB,CACI,MAAO7B,WAAA8B,SAAA,CAAoB,IAAAvB,KAApB,CAA+B,MAA/B,CAAuCsB,IAAvC,CADX,CArNiB,CAsOjBE,UAAWA,QAAS,CAACC,UAAD,CAAaC,MAAb,CACpB,CACI,MAAOjC,WAAAkC,UAAA,CAAqB,IAAA3B,KAArB,CAAgCyB,UAAhC,CAA4CC,MAA5C,CADX,CAvOiB,CA2PjBE,SAAUA,QAAS,CAACZ,QAAD,CAAWa,KAAX,CAAkBJ,UAAlB,CAA8BK,QAA9B,CACnB,CACI,MAAOrC,WAAAsC,gBAAA,CAA2B,IAAA/B,KAA3B,CAAsCgB,QAAtC,CAAgDa,KAAhD,CAAuDJ,UAAvD,CAAmEK,QAAnE,CADX,CA5PiB,CA4RjBE,OAAQA,QAAS,CAAChB,QAAD,CAAWa,KAAX,CAAkBJ,UAAlB,CAA8BK,QAA9B,CACjB,CACI,MAAOrC,WAAAwC,OAAA,CAAkB,IAAAjC,KAAlB;AAA6BgB,QAA7B,CAAuCa,KAAvC,CAA8CJ,UAA9C,CAA0DK,QAA1D,CADX,CA7RiB,CA8SjBI,MAAOA,QAAS,CAAClB,QAAD,CAAWa,KAAX,CAChB,CACI,MAAOpC,WAAA0C,iBAAA,CAA4B,IAAAnC,KAA5B,CAAuCgB,QAAvC,CAAiDa,KAAjD,CADX,CA/SiB,CA8TjBO,KAAMA,QAAS,CAACC,MAAD,CAASC,MAAT,CACf,CACI7C,UAAA8C,KAAA,CAAgB,IAAAvC,KAAhB,CAA2BqC,MAA3B,CAAmCC,MAAnC,CADJ,CA/TiB,CAgVjBE,OAAQA,QAAS,CAAClC,KAAD,CAAQI,KAAR,CACjB,CACI,MAAOjB,WAAAgD,OAAA,CAAkB,IAAAzC,KAAlB,CAA6BM,KAA7B,CAAoCI,KAApC,CADX,CAjViB,CAkWjBgC,OAAQA,QAAS,CAACpC,KAAD,CAAQC,YAAR,CACjB,CACI,MAAIA,aAAJ,CAEWd,UAAAkD,OAAA,CAAkB,IAAA3C,KAAlB,CAA6BM,KAA7B,CAFX,CAMWb,UAAAkD,OAAA,CAAkB,IAAA3C,KAAlB,CAA6BM,KAA7B,CAAoC,IAAAJ,eAApC,CAAyD,IAAzD,CAPf,CAnWiB,CA2XjB0C,SAAUA,QAAS,CAAClC,KAAD,CAAQH,YAAR,CACnB,CACI,MAAIA,aAAJ,CAEWd,UAAAoD,SAAA,CAAoB,IAAA7C,KAApB;AAA+BU,KAA/B,CAFX,CAMWjB,UAAAoD,SAAA,CAAoB,IAAA7C,KAApB,CAA+BU,KAA/B,CAAsC,IAAAR,eAAtC,CAA2D,IAA3D,CAPf,CA5XiB,CAqZjB4C,cAAeA,QAAS,CAACrB,UAAD,CAAaK,QAAb,CAAuBvB,YAAvB,CACxB,CACI,MAAIA,aAAJ,CAEWd,UAAAsD,cAAA,CAAyB,IAAA/C,KAAzB,CAAoCyB,UAApC,CAAgDK,QAAhD,CAFX,CAMWrC,UAAAsD,cAAA,CAAyB,IAAA/C,KAAzB,CAAoCyB,UAApC,CAAgDK,QAAhD,CAA0D,IAAA5B,eAA1D,CAA+E,IAA/E,CAPf,CAtZiB,CA6ajB8C,UAAWA,QAAS,CAACzC,YAAD,CACpB,CAGI,IAFA,IAAI0C,EAAI,IAAAjD,KAAA0B,OAER,CAAOuB,CAAA,EAAP,CAAA,CAEI,IAAAP,OAAA,CAAY,IAAA1C,KAAA,CAAUiD,CAAV,CAAZ,CAA0B1C,YAA1B,CAGJ,OAAO,KARX,CA9aiB,CAqcjB2C,WAAYA,QAAS,CAAC5C,KAAD,CACrB,CACI,MAAOb,WAAA0D,WAAA,CAAsB,IAAAnD,KAAtB,CAAiCM,KAAjC,CADX,CAtciB,CAsdjB8C,WAAYA,QAAS,CAAC9C,KAAD,CACrB,CACI,MAAOb,WAAA4D,WAAA,CAAsB,IAAArD,KAAtB;AAAiCM,KAAjC,CADX,CAvdiB,CAuejBgD,OAAQA,QAAS,CAAChD,KAAD,CACjB,CACIb,UAAA8D,OAAA,CAAkB,IAAAvD,KAAlB,CAA6BM,KAA7B,CAEA,OAAOA,MAHX,CAxeiB,CA0fjBkD,SAAUA,QAAS,CAAClD,KAAD,CACnB,CACIb,UAAAgE,SAAA,CAAoB,IAAAzD,KAApB,CAA+BM,KAA/B,CAEA,OAAOA,MAHX,CA3fiB,CA2gBjBoD,QAASA,QAAS,EAClB,CACI,IAAA1D,KAAA0D,QAAA,EAEA,OAAO,KAHX,CA5gBiB,CA4hBjBC,QAASA,QAAS,EAClB,CACIlE,UAAAmE,QAAA,CAAmB,IAAA5D,KAAnB,CAEA,OAAO,KAHX,CA7hBiB,CAgjBjB6D,QAASA,QAAS,CAACC,QAAD,CAAWC,QAAX,CAClB,CACI,MAAOtE,WAAAuE,QAAA,CAAmB,IAAAhE,KAAnB,CAA8B8D,QAA9B,CAAwCC,QAAxC,CADX,CAjjBiB,CAikBjBE,OAAQA,QAAS,CAAC3D,KAAD,CACjB,CACI,MAAmC,EAAnC,CAAQ,IAAAN,KAAAc,QAAA,CAAkBR,KAAlB,CADZ,CAlkBiB,CAmlBjB4D,OAAQA,QAAS,CAAClD,QAAD,CAAWa,KAAX,CAAkBJ,UAAlB,CAA8BK,QAA9B,CACjB,CACIrC,UAAA0E,OAAA,CAAkB,IAAAnE,KAAlB,CAA6BgB,QAA7B;AAAuCa,KAAvC,CAA8CJ,UAA9C,CAA0DK,QAA1D,CAEA,OAAO,KAHX,CAplBiB,CAsmBjBsC,KAAMA,QAAS,CAACC,QAAD,CAAWC,OAAX,CACf,CAGI,IAFA,IAAIC,KAAO,CAAE,IAAF,CAAX,CAEStB,EAAI,CAAb,CAAgBA,CAAhB,CAAoBuB,SAAA9C,OAApB,CAAsCuB,CAAA,EAAtC,CAEIsB,IAAAE,KAAA,CAAUD,SAAA,CAAUvB,CAAV,CAAV,CAGJ,KAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgB,IAAAjD,KAAA0B,OAAhB,CAAkCuB,CAAA,EAAlC,CAEIsB,IAAA,CAAK,CAAL,CAEA,CAFU,IAAAvE,KAAA,CAAUiD,CAAV,CAEV,CAAAoB,QAAAK,MAAA,CAAeJ,OAAf,CAAwBC,IAAxB,CAZR,CAvmBiB,CA6nBjBI,SAAUA,QAAS,EACnB,CACI,IAAA3B,UAAA,EAEA,KAAAhD,KAAA,CAAY,EAHhB,CA9nBiB,CA0oBjB4E,QAASA,QAAS,EAClB,CACI,IAAA5B,UAAA,EAIA,KAAA9C,eAAA,CADA,IAAAC,YACA,CAFA,IAAAJ,OAEA,CAFc,IAHlB,CA3oBiB,CA2pBjB2B,OAAQ,CAEJmD,IAAKA,QAAS,EACd,CACI,MAAO,KAAA7E,KAAA0B,OADX,CAHI,CA3pBS,CA4qBjBoD,MAAO,CAEHD,IAAKA,QAAS,EACd,CACI,IAAA5E,SAAA,CAAgB,CAEhB,OAAuB,EAAvB,CAAI,IAAAD,KAAA0B,OAAJ,CAEW,IAAA1B,KAAA,CAAU,CAAV,CAFX,CAMW,IATf,CAHG,CA5qBU,CAssBjB+E,KAAM,CAEFF,IAAKA,QAAS,EACd,CACI,MAAuB,EAAvB;AAAI,IAAA7E,KAAA0B,OAAJ,EAEI,IAAAzB,SAEO,CAFS,IAAAD,KAAA0B,OAET,CAF4B,CAE5B,CAAA,IAAA1B,KAAA,CAAU,IAAAC,SAAV,CAJX,EAQW,IATf,CAHE,CAtsBW,CAkuBjB+E,KAAM,CAEFH,IAAKA,QAAS,EACd,CACI,MAAI,KAAA5E,SAAJ,CAAoB,IAAAD,KAAA0B,OAApB,EAEI,IAAAzB,SAAA,EAEO,CAAA,IAAAD,KAAA,CAAU,IAAAC,SAAV,CAJX,EAQW,IATf,CAHE,CAluBW,CA8vBjBgF,SAAU,CAENJ,IAAKA,QAAS,EACd,CACI,MAAoB,EAApB,CAAI,IAAA5E,SAAJ,EAEI,IAAAA,SAAA,EAEO,CAAA,IAAAD,KAAA,CAAU,IAAAC,SAAV,CAJX,EAQW,IATf,CAHM,CA9vBO,CAAV,CAkxBXV,OAAAC,QAAA,CAAiBK,OAnzBuF;",
"sources":["node_modules/Phaser/src/structs/List.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$structs$List\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar ArrayUtils = require('../utils/array');\r\nvar Class = require('../utils/Class');\r\nvar NOOP = require('../utils/NOOP');\r\nvar StableSort = require('../utils/array/StableSort');\r\n\r\n/**\r\n * @callback EachListCallback\r\n * @generic I - [item]\r\n *\r\n * @param {*} item - The item which is currently being processed.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * List is a generic implementation of an ordered list which contains utility methods for retrieving, manipulating, and iterating items.\r\n *\r\n * @class List\r\n * @memberOf Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n *\r\n * @param {*} parent - The parent of this list.\r\n */\r\nvar List = new Class({\r\n\r\n    initialize:\r\n\r\n    function List (parent)\r\n    {\r\n        /**\r\n         * The parent of this list.\r\n         *\r\n         * @name Phaser.Structs.List#parent\r\n         * @type {*}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent = parent;\r\n\r\n        /**\r\n         * The objects that belong to this collection.\r\n         *\r\n         * @genericUse {T[]} - [$type]\r\n         *\r\n         * @name Phaser.Structs.List#list\r\n         * @type {Array.<*>}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.list = [];\r\n\r\n        /**\r\n         * The index of the current element.\r\n         * \r\n         * This is used internally when iterating through the list with the {@link #first}, {@link #last}, {@link #get}, and {@link #previous} properties.\r\n         *\r\n         * @name Phaser.Structs.List#position\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.position = 0;\r\n\r\n        /**\r\n         * A callback that is invoked every time a child is added to this list.\r\n         *\r\n         * @name Phaser.Structs.List#addCallback\r\n         * @type {function}\r\n         * @since 3.4.0\r\n         */\r\n        this.addCallback = NOOP;\r\n\r\n        /**\r\n         * A callback that is invoked every time a child is removed from this list.\r\n         *\r\n         * @name Phaser.Structs.List#removeCallback\r\n         * @type {function}\r\n         * @since 3.4.0\r\n         */\r\n        this.removeCallback = NOOP;\r\n\r\n        /**\r\n         * The property key to sort by.\r\n         *\r\n         * @name Phaser.Structs.List#_sortKey\r\n         * @type {string}\r\n         * @since 3.4.0\r\n         */\r\n        this._sortKey = '';\r\n    },\r\n\r\n    /**\r\n     * Adds the given item to the end of the list. Each item must be unique.\r\n     *\r\n     * @method Phaser.Structs.List#add\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*|Array.<*>} child - The item, or array of items, to add to the list.\r\n     * @param {boolean} [skipCallback=false] - Skip calling the List.addCallback if this child is added successfully.\r\n     *\r\n     * @return {*} The list's underlying array.\r\n     */\r\n    add: function (child, skipCallback)\r\n    {\r\n        if (skipCallback)\r\n        {\r\n            return ArrayUtils.Add(this.list, child);\r\n        }\r\n        else\r\n        {\r\n            return ArrayUtils.Add(this.list, child, 0, this.addCallback, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds an item to list, starting at a specified index. Each item must be unique within the list.\r\n     *\r\n     * @method Phaser.Structs.List#addAt\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item, or array of items, to add to the list.\r\n     * @param {integer} [index=0] - The index in the list at which the element(s) will be inserted.\r\n     * @param {boolean} [skipCallback=false] - Skip calling the List.addCallback if this child is added successfully.\r\n     *\r\n     * @return {*} The List's underlying array.\r\n     */\r\n    addAt: function (child, index, skipCallback)\r\n    {\r\n        if (skipCallback)\r\n        {\r\n            return ArrayUtils.AddAt(this.list, child, index);\r\n        }\r\n        else\r\n        {\r\n            return ArrayUtils.AddAt(this.list, child, index, 0, this.addCallback, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Retrieves the item at a given position inside the List.\r\n     *\r\n     * @method Phaser.Structs.List#getAt\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [$return]\r\n     *\r\n     * @param {integer} index - The index of the item.\r\n     *\r\n     * @return {*} The retrieved item, or `undefined` if it's outside the List's bounds.\r\n     */\r\n    getAt: function (index)\r\n    {\r\n        return this.list[index];\r\n    },\r\n\r\n    /**\r\n     * Locates an item within the List and returns its index.\r\n     *\r\n     * @method Phaser.Structs.List#getIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child]\r\n     *\r\n     * @param {*} child - The item to locate.\r\n     *\r\n     * @return {integer} The index of the item within the List, or -1 if it's not in the List.\r\n     */\r\n    getIndex: function (child)\r\n    {\r\n        //  Return -1 if given child isn't a child of this display list\r\n        return this.list.indexOf(child);\r\n    },\r\n\r\n    /**\r\n     * Sort the contents of this List so the items are in order based\r\n     * on the given property. For example, `sort('alpha')` would sort the List\r\n     * contents based on the value of their `alpha` property.\r\n     *\r\n     * @method Phaser.Structs.List#sort\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T[]} - [children,$return]\r\n     *\r\n     * @param {string} property - The property to lexically sort by.\r\n     *\r\n     * @return {Phaser.Structs.List} This List object.\r\n     */\r\n    sort: function (property)\r\n    {\r\n        if (property)\r\n        {\r\n            this._sortKey = property;\r\n\r\n            StableSort.inplace(this.list, this.sortHandler);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal handler for the {@link #sort} method which compares two items.\r\n     *\r\n     * @method Phaser.Structs.List#sortHandler\r\n     * @private\r\n     * @since 3.4.0\r\n     *\r\n     * @genericUse {T} - [childA,childB]\r\n     *\r\n     * @param {*} childA - The first item to compare.\r\n     * @param {*} childB - The second item to compare.\r\n     *\r\n     * @return {integer} The result of the comparison, which will be negative if the first item is smaller then second, positive if the first item is larger than the second, or 0 if they're equal.\r\n     */\r\n    sortHandler: function (childA, childB)\r\n    {\r\n        return childA[this._sortKey] - childB[this._sortKey];\r\n    },\r\n\r\n    /**\r\n     * Searches for the first instance of a child with its `name`\r\n     * property matching the given argument. Should more than one child have\r\n     * the same name only the first is returned.\r\n     *\r\n     * @method Phaser.Structs.List#getByName\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T | null} - [$return]\r\n     *\r\n     * @param {string} name - The name to search for.\r\n     *\r\n     * @return {?*} The first child with a matching name, or null if none were found.\r\n     */\r\n    getByName: function (name)\r\n    {\r\n        return ArrayUtils.GetFirst(this.list, 'name', name);\r\n    },\r\n\r\n    /**\r\n     * Returns a random child from the group.\r\n     *\r\n     * @method Phaser.Structs.List#getRandom\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T | null} - [$return]\r\n     *\r\n     * @param {integer} [startIndex=0] - Offset from the front of the group (lowest child).\r\n     * @param {integer} [length=(to top)] - Restriction on the number of values you want to randomly select from.\r\n     *\r\n     * @return {?*} A random child of this Group.\r\n     */\r\n    getRandom: function (startIndex, length)\r\n    {\r\n        return ArrayUtils.GetRandom(this.list, startIndex, length);\r\n    },\r\n\r\n    /**\r\n     * Returns the first element in a given part of the List which matches a specific criterion.\r\n     *\r\n     * @method Phaser.Structs.List#getFirst\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [value]\r\n     * @genericUse {T | null} - [$return]\r\n     *\r\n     * @param {string} property - The name of the property to test or a falsey value to have no criterion.\r\n     * @param {*} value - The value to test the `property` against, or `undefined` to allow any value and only check for existence.\r\n     * @param {number} [startIndex=0] - The position in the List to start the search at.\r\n     * @param {number} [endIndex] - The position in the List to optionally stop the search at. It won't be checked.\r\n     *\r\n     * @return {?*} The first item which matches the given criterion, or `null` if no such item exists.\r\n     */\r\n    getFirst: function (property, value, startIndex, endIndex)\r\n    {\r\n        return ArrayUtils.GetFirstElement(this.list, property, value, startIndex, endIndex);\r\n    },\r\n\r\n    /**\r\n     * Returns all children in this List.\r\n     *\r\n     * You can optionally specify a matching criteria using the `property` and `value` arguments.\r\n     *\r\n     * For example: `getAll('parent')` would return only children that have a property called `parent`.\r\n     *\r\n     * You can also specify a value to compare the property to:\r\n     * \r\n     * `getAll('visible', true)` would return only children that have their visible property set to `true`.\r\n     *\r\n     * Optionally you can specify a start and end index. For example if this List had 100 children,\r\n     * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\r\n     * the first 50 children in the List.\r\n     *\r\n     * @method Phaser.Structs.List#getAll\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [value]\r\n     * @genericUse {T[]} - [$return]\r\n     *\r\n     * @param {string} [property] - An optional property to test against the value argument.\r\n     * @param {*} [value] - If property is set then Child.property must strictly equal this value to be included in the results.\r\n     * @param {integer} [startIndex] - The first child index to start the search from.\r\n     * @param {integer} [endIndex] - The last child index to search up until.\r\n     *\r\n     * @return {Array.<*>} All items of the List which match the given criterion, if any.\r\n     */\r\n    getAll: function (property, value, startIndex, endIndex)\r\n    {\r\n        return ArrayUtils.GetAll(this.list, property, value, startIndex, endIndex);\r\n    },\r\n\r\n    /**\r\n     * Returns the total number of items in the List which have a property matching the given value.\r\n     *\r\n     * @method Phaser.Structs.List#count\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [value]\r\n     *\r\n     * @param {string} property - The property to test on each item.\r\n     * @param {*} value - The value to test the property against.\r\n     *\r\n     * @return {integer} The total number of matching elements.\r\n     */\r\n    count: function (property, value)\r\n    {\r\n        return ArrayUtils.CountAllMatching(this.list, property, value);\r\n    },\r\n\r\n    /**\r\n     * Swaps the positions of two items in the list.\r\n     *\r\n     * @method Phaser.Structs.List#swap\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child1,child2]\r\n     *\r\n     * @param {*} child1 - The first item to swap.\r\n     * @param {*} child2 - The second item to swap.\r\n     */\r\n    swap: function (child1, child2)\r\n    {\r\n        ArrayUtils.Swap(this.list, child1, child2);\r\n    },\r\n\r\n    /**\r\n     * Moves an item in the List to a new position.\r\n     *\r\n     * @method Phaser.Structs.List#moveTo\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item to move.\r\n     * @param {integer} index - Moves an item in the List to a new position.\r\n     *\r\n     * @return {*} The item that was moved.\r\n     */\r\n    moveTo: function (child, index)\r\n    {\r\n        return ArrayUtils.MoveTo(this.list, child, index);\r\n    },\r\n\r\n    /**\r\n     * Removes one or many items from the List.\r\n     *\r\n     * @method Phaser.Structs.List#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item, or array of items, to remove.\r\n     * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n     *\r\n     * @return {*} The item, or array of items, which were successfully removed from the List.\r\n     */\r\n    remove: function (child, skipCallback)\r\n    {\r\n        if (skipCallback)\r\n        {\r\n            return ArrayUtils.Remove(this.list, child);\r\n        }\r\n        else\r\n        {\r\n            return ArrayUtils.Remove(this.list, child, this.removeCallback, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Removes the item at the given position in the List.\r\n     *\r\n     * @method Phaser.Structs.List#removeAt\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [$return]\r\n     *\r\n     * @param {integer} index - The position to remove the item from.\r\n     * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n     *\r\n     * @return {*} The item that was removed.\r\n     */\r\n    removeAt: function (index, skipCallback)\r\n    {\r\n        if (skipCallback)\r\n        {\r\n            return ArrayUtils.RemoveAt(this.list, index);\r\n        }\r\n        else\r\n        {\r\n            return ArrayUtils.RemoveAt(this.list, index, this.removeCallback, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Removes the items within the given range in the List.\r\n     *\r\n     * @method Phaser.Structs.List#removeBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T[]} - [$return]\r\n     *\r\n     * @param {integer} [startIndex=0] - The index to start removing from.\r\n     * @param {integer} [endIndex] - The position to stop removing at. The item at this position won't be removed.\r\n     * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n     *\r\n     * @return {Array.<*>} An array of the items which were removed.[description]\r\n     */\r\n    removeBetween: function (startIndex, endIndex, skipCallback)\r\n    {\r\n        if (skipCallback)\r\n        {\r\n            return ArrayUtils.RemoveBetween(this.list, startIndex, endIndex);\r\n        }\r\n        else\r\n        {\r\n            return ArrayUtils.RemoveBetween(this.list, startIndex, endIndex, this.removeCallback, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Removes all the items.\r\n     *\r\n     * @method Phaser.Structs.List#removeAll\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.List.<T>} - [$return]\r\n     * \r\n     * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n     *\r\n     * @return {Phaser.Structs.List} This List object.\r\n     */\r\n    removeAll: function (skipCallback)\r\n    {\r\n        var i = this.list.length;\r\n\r\n        while (i--)\r\n        {\r\n            this.remove(this.list[i], skipCallback);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Brings the given child to the top of this List.\r\n     *\r\n     * @method Phaser.Structs.List#bringToTop\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item to bring to the top of the List.\r\n     *\r\n     * @return {*} The item which was moved.\r\n     */\r\n    bringToTop: function (child)\r\n    {\r\n        return ArrayUtils.BringToTop(this.list, child);\r\n    },\r\n\r\n    /**\r\n     * Sends the given child to the bottom of this List.\r\n     *\r\n     * @method Phaser.Structs.List#sendToBack\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item to send to the back of the list.\r\n     *\r\n     * @return {*} The item which was moved.\r\n     */\r\n    sendToBack: function (child)\r\n    {\r\n        return ArrayUtils.SendToBack(this.list, child);\r\n    },\r\n\r\n    /**\r\n     * Moves the given child up one place in this group unless it's already at the top.\r\n     *\r\n     * @method Phaser.Structs.List#moveUp\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item to move up.\r\n     *\r\n     * @return {*} The item which was moved.\r\n     */\r\n    moveUp: function (child)\r\n    {\r\n        ArrayUtils.MoveUp(this.list, child);\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * Moves the given child down one place in this group unless it's already at the bottom.\r\n     *\r\n     * @method Phaser.Structs.List#moveDown\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item to move down.\r\n     *\r\n     * @return {*} The item which was moved.\r\n     */\r\n    moveDown: function (child)\r\n    {\r\n        ArrayUtils.MoveDown(this.list, child);\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * Reverses the order of all children in this List.\r\n     *\r\n     * @method Phaser.Structs.List#reverse\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.List.<T>} - [$return]\r\n     *\r\n     * @return {Phaser.Structs.List} This List object.\r\n     */\r\n    reverse: function ()\r\n    {\r\n        this.list.reverse();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shuffles the items in the list.\r\n     *\r\n     * @method Phaser.Structs.List#shuffle\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.List.<T>} - [$return]\r\n     *\r\n     * @return {Phaser.Structs.List} This List object.\r\n     */\r\n    shuffle: function ()\r\n    {\r\n        ArrayUtils.Shuffle(this.list);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Replaces a child of this List with the given newChild. The newChild cannot be a member of this List.\r\n     *\r\n     * @method Phaser.Structs.List#replace\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [oldChild,newChild,$return]\r\n     *\r\n     * @param {*} oldChild - The child in this List that will be replaced.\r\n     * @param {*} newChild - The child to be inserted into this List.\r\n     *\r\n     * @return {*} Returns the oldChild that was replaced within this group.\r\n     */\r\n    replace: function (oldChild, newChild)\r\n    {\r\n        return ArrayUtils.Replace(this.list, oldChild, newChild);\r\n    },\r\n\r\n    /**\r\n     * Checks if an item exists within the List.\r\n     *\r\n     * @method Phaser.Structs.List#exists\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child]\r\n     *\r\n     * @param {*} child - The item to check for the existence of.\r\n     *\r\n     * @return {boolean} `true` if the item is found in the list, otherwise `false`.\r\n     */\r\n    exists: function (child)\r\n    {\r\n        return (this.list.indexOf(child) > -1);\r\n    },\r\n\r\n    /**\r\n     * Sets the property `key` to the given value on all members of this List.\r\n     *\r\n     * @method Phaser.Structs.List#setAll\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [value]\r\n     *\r\n     * @param {string} property - The name of the property to set.\r\n     * @param {*} value - The value to set the property to.\r\n     * @param {integer} [startIndex] - The first child index to start the search from.\r\n     * @param {integer} [endIndex] - The last child index to search up until.\r\n     */\r\n    setAll: function (property, value, startIndex, endIndex)\r\n    {\r\n        ArrayUtils.SetAll(this.list, property, value, startIndex, endIndex);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Passes all children to the given callback.\r\n     *\r\n     * @method Phaser.Structs.List#each\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {EachListCallback.<T>} - [callback]\r\n     *\r\n     * @param {EachListCallback} callback - The function to call.\r\n     * @param {*} [context] - Value to use as `this` when executing callback.\r\n     * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n     */\r\n    each: function (callback, context)\r\n    {\r\n        var args = [ null ];\r\n\r\n        for (var i = 2; i < arguments.length; i++)\r\n        {\r\n            args.push(arguments[i]);\r\n        }\r\n\r\n        for (i = 0; i < this.list.length; i++)\r\n        {\r\n            args[0] = this.list[i];\r\n\r\n            callback.apply(context, args);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Clears the List and recreates its internal array.\r\n     *\r\n     * @method Phaser.Structs.List#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.removeAll();\r\n\r\n        this.list = [];\r\n    },\r\n\r\n    /**\r\n     * Destroys this List.\r\n     *\r\n     * @method Phaser.Structs.List#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.removeAll();\r\n\r\n        this.parent = null;\r\n        this.addCallback = null;\r\n        this.removeCallback = null;\r\n    },\r\n\r\n    /**\r\n     * The number of items inside the List.\r\n     *\r\n     * @name Phaser.Structs.List#length\r\n     * @type {integer}\r\n     * @readOnly\r\n     * @since 3.0.0\r\n     */\r\n    length: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.list.length;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The first item in the List or `null` for an empty List.\r\n     *\r\n     * @name Phaser.Structs.List#first\r\n     * @type {integer}\r\n     * @readOnly\r\n     * @since 3.0.0\r\n     */\r\n    first: {\r\n\r\n        get: function ()\r\n        {\r\n            this.position = 0;\r\n\r\n            if (this.list.length > 0)\r\n            {\r\n                return this.list[0];\r\n            }\r\n            else\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The last item in the List, or `null` for an empty List.\r\n     *\r\n     * @name Phaser.Structs.List#last\r\n     * @type {integer}\r\n     * @readOnly\r\n     * @since 3.0.0\r\n     */\r\n    last: {\r\n\r\n        get: function ()\r\n        {\r\n            if (this.list.length > 0)\r\n            {\r\n                this.position = this.list.length - 1;\r\n\r\n                return this.list[this.position];\r\n            }\r\n            else\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The next item in the List, or `null` if the entire List has been traversed.\r\n     * \r\n     * This property can be read successively after reading {@link #first} or manually setting the {@link #position} to iterate the List.\r\n     *\r\n     * @name Phaser.Structs.List#next\r\n     * @type {integer}\r\n     * @readOnly\r\n     * @since 3.0.0\r\n     */\r\n    next: {\r\n\r\n        get: function ()\r\n        {\r\n            if (this.position < this.list.length)\r\n            {\r\n                this.position++;\r\n\r\n                return this.list[this.position];\r\n            }\r\n            else\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The previous item in the List, or `null` if the entire List has been traversed.\r\n     * \r\n     * This property can be read successively after reading {@link #last} or manually setting the {@link #position} to iterate the List backwards.\r\n     *\r\n     * @name Phaser.Structs.List#previous\r\n     * @type {integer}\r\n     * @readOnly\r\n     * @since 3.0.0\r\n     */\r\n    previous: {\r\n\r\n        get: function ()\r\n        {\r\n            if (this.position > 0)\r\n            {\r\n                this.position--;\r\n\r\n                return this.list[this.position];\r\n            }\r\n            else\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = List;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","ArrayUtils","Class","NOOP","StableSort","List","initialize","parent","list","position","removeCallback","addCallback","_sortKey","add","child","skipCallback","Add","addAt","index","AddAt","getAt","getIndex","indexOf","sort","property","inplace","sortHandler","childA","childB","getByName","name","GetFirst","getRandom","startIndex","length","GetRandom","getFirst","value","endIndex","GetFirstElement","getAll","GetAll","count","CountAllMatching","swap","child1","child2","Swap","moveTo","MoveTo","remove","Remove","removeAt","RemoveAt","removeBetween","RemoveBetween","removeAll","i","bringToTop","BringToTop","sendToBack","SendToBack","moveUp","MoveUp","moveDown","MoveDown","reverse","shuffle","Shuffle","replace","oldChild","newChild","Replace","exists","setAll","SetAll","each","callback","context","args","arguments","push","apply","shutdown","destroy","get","first","last","next","previous"]
}
