{"version":3,"sources":["app/examples/metro/events.cljs"],"mappings":";;;;;;;;;;;AAeA,AAAA,AAACA,AAEA,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAQE;AAAR,AAAAD,AAAAD,AAAA,AAAA,AAAUG;AAAV,AACE,AAAI,AAAA,AAAM,AAAK,AAAOA;AACpB,AAAOA,AAAO,AAAQ,AAAA,AAAA,AAAA,AAACC,AAAe,AAAA,AAAG,AAASD;;AAClD,AAAA,AAACE;;;AACH,AAAA,AAAQ,AAAA,AAACC;;AACT,AAAM,AAAAC,AAAK,AAACC,AAAYL;AAAlB,AAAA,AAAAI;AAAA,AACK,AAAK,AAAA,AAACE,AAAYN,AAClB,AAAK,AAAA,AAACM,AAAYN;;AAFvBI;;;AAAN,AAGE,AAAA,AAAA,AAACG;;AAHH;;;AAKH,AAAA,AAACZ,AAEA,AAAAa,AAAKT;AAAL,AAAA,AAAAU,AAAAD;AAAA,AAAAV,AAAAW,AAAA,AAAA,AAAQV;AAAR,AAAAD,AAAAW,AAAA,AAAA,AAAUT;AAAV,AACE,AAAM,AAAA,AAAO,AAAK,AAAOA;AAAzB,AACE,AAAOA,AAAO,AAAQ,AAAA,AAAA,AAAA,AAACC,AAAc,AAASD;;AADhD;;AAEA,AAAA,AAAQ,AAAA,AAACG;;AACT,AAAM,AAAAC,AAAK,AAACC,AAAYL;AAAlB,AAAA,AAAAI;AAAA,AACK,AAAK,AAAA,AAACE,AAAYN,AAClB,AAAK,AAAA,AAACM,AAAYN;;AAFvBI;;;AAAN,AAGE,AAAA,AAAA,AAACG;;AAHH;;;AAKH,AAAA,AAACZ,AAEA,AAAAe,AAAKX;AAAL,AAAA,AAAAY,AAAAD;AAAA,AAAAZ,AAAAa,AAAA,AAAA,AAAQZ;AAAR,AAAAD,AAAAa,AAAA,AAAA,AAAUX;AAAV,AACE,AAAI,AAACK,AAAYL;AACf,AAAA,AAACY,AAAQZ;;AADX;;;AAGH,AAAA,AAACL,AAEA,AAAAkB,AAAKd;AAAL,AAAA,AAAAe,AAAAD;AAAA,AAAAf,AAAAgB,AAAA,AAAA,AAAQf;AAAR,AAAAD,AAAAgB,AAAA,AAAA,AAAUd;AAAV,AACE,AAAMe,AAAK,AAAA,AAAA,AAAI,AAAA,AAACC;AAAhB,AACE,AAAM,AAACC,AAAI,AAACZ,AAAYL;AAAxB,AACE,AAAOA,AAAO,AAAQ,AAAA,AAAA,AAAA,AAACC,AAAc,AAAGc,AAAK,AAASf;;AACtD,AAAA,AAAA,AAACO;;AAFH;;;AAIL,AAAA,AAACZ,AAEA,AAAAuB,AAAKnB;AAAL,AAAA,AAAAoB,AAAAD;AAAA,AAAApB,AAAAqB,AAAA,AAAA,AAAQpB;AAAR,AAAAD,AAAAqB,AAAA,AAAA,AAAUnB;AAAV,AACE,AAAM,AAAK,AAACiB,AAAI,AAAA,AAAA,AAAA,AAAA,AAACD,AACN,AAAK,AAAA,AAACV,AAAYN,AAClB,AAAK,AAAA,AAACM,AAAYN,AAClB,AAAK,AAAA,AAACM,AAAYN;AAH7B,AAIE,AAAA,AAAA,AAACO;;AAJH;;;AAMH,AAAA,AAACZ,AAEA,AAAAyB,AAAKrB;AAAL,AAAA,AAAAsB,AAAAD;AAAA,AAAAtB,AAAAuB,AAAA,AAAA,AAAQtB;AAAR,AAAAD,AAAAuB,AAAA,AAAA,AAAUrB;AAAV,AAAAF,AAAAuB,AAAA,AAAA,AAAiBC;AAAjB,AAEE,AAAA,AAAA,AAAMA;;AACN,AAAA,AAAA,AAACC,AAAiBD","names":["app.patu.events/reg-event","p__32444","vec__32445","cljs.core.nth","_","player","app.patu.core/vec2","app.patu.core.go","app.patu.core/get-component","and__4115__auto__","app.patu.components/grounded?","app.patu.components/cur-anim?","app.patu.core/play","p__32452","vec__32453","p__32457","vec__32458","app.patu.components/jump!","p__32465","vec__32466","diff","app.patu.events/key-down?","cljs.core/not","p__32473","vec__32474","p__32481","vec__32482","lever","app.patu.core/change-sprite"],"sourcesContent":["(ns app.examples.metro.events\n  (:require\n   [clojure.repl :refer [doc]]\n   ;; Main Libs ===\n   [app.patu.core :as p]\n   [app.patu.loaders :as l]\n   [app.patu.cam :as cam]\n   [app.patu.audio :as a]\n   [app.patu.components :as c]\n   [app.patu.utils :refer [js-get]]\n   ;; Event System\n   [app.patu.events :refer [dispatch reg-event key-down?]]\n   ;; Assets\n   [app.examples.metro.assets :refer [main-map level-handler level-two-handler]]))\n\n(reg-event\n :player/move-left\n (fn [_ [_ player]]\n   (if (< 20 (.-x (.-pos player)))\n     (.move player (.scale (p/vec2 [-1 0]) (+ (.-speed player) 30)))\n     (p/go :scene/two))\n   (.flipX (p/get-component :player) -1)\n   (when (and (c/grounded? player)\n              (not (c/cur-anim? player :run))\n              (not (c/cur-anim? player :attack)))\n     (p/play :player :player/run))))\n\n(reg-event\n :player/move-right\n (fn [_ [_ player]]\n   (when (> 650 (.-x (.-pos player)))\n     (.move player (.scale (p/vec2 [1 0]) (.-speed player))))\n   (.flipX (p/get-component :player) 1)\n   (when (and (c/grounded? player)\n              (not (c/cur-anim? player :run))\n              (not (c/cur-anim? player :attack)))\n     (p/play :player :player/run))))\n\n(reg-event\n :player/jump\n (fn [_ [_ player]]\n   (if (c/grounded? player)\n     (c/jump! player 540))))\n\n(reg-event\n :player/zoom\n (fn [_ [_ player]]\n   (let [diff (if (key-down? :left) -800 400)]\n     (when (not (c/grounded? player))\n       (.move player (.scale (p/vec2 [1 0]) (+ diff (.-speed player))))\n       (p/play :player :player/boom)))))\n\n(reg-event\n :player/idle\n (fn [_ [_ player]]\n   (when (or  (not (key-down? [:left :right :x]))\n              (not (c/cur-anim? player :player/attack))\n              (not (c/cur-anim? player :run))\n              (not (c/cur-anim? player :nod)))\n     (p/play :player :player/nod))))\n\n(reg-event\n :player/process-lever\n (fn [_ [_ player lever]]\n   ; (when (c/cur-anim? player :player/attack)\n   (set! lever -open true)\n   (p/change-sprite [lever :lever-right])))\n     ; (p/play :player :player/nod))))\n"]}