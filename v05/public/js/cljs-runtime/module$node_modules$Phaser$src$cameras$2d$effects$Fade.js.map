{
"version":3,
"file":"module$node_modules$Phaser$src$cameras$2d$effects$Fade.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/cameras/2d/effects/Fade.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$cameras$2d$effects$Fade\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../../math/Clamp');\r\nvar Class = require('../../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A Camera Fade effect.\r\n *\r\n * This effect will fade the camera viewport to the given color, over the duration specified.\r\n *\r\n * Only the camera viewport is faded. None of the objects it is displaying are impacted, i.e. their colors do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect, if required.\r\n *\r\n * @class Fade\r\n * @memberOf Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.5.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\r\nvar Fade = new Class({\r\n\r\n    initialize:\r\n\r\n    function Fade (camera)\r\n    {\r\n        /**\r\n         * The Camera this effect belongs to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @readOnly\r\n         * @since 3.5.0\r\n         */\r\n        this.camera = camera;\r\n\r\n        /**\r\n         * Is this effect actively running?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#isRunning\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @default false\r\n         * @since 3.5.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * Has this effect finished running?\r\n         * \r\n         * This is different from `isRunning` because it remains set to `true` when the effect is over,\r\n         * until the effect is either reset or started again.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#isComplete\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @default false\r\n         * @since 3.5.0\r\n         */\r\n        this.isComplete = false;\r\n\r\n        /**\r\n         * The direction of the fade.\r\n         * `true` = fade out (transparent to color), `false` = fade in (color to transparent)\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#direction\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @since 3.5.0\r\n         */\r\n        this.direction = true;\r\n\r\n        /**\r\n         * The duration of the effect, in milliseconds.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#duration\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @default 0\r\n         * @since 3.5.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * The value of the red color channel the camera will use for the fade effect.\r\n         * A value between 0 and 255.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#red\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.red = 0;\r\n\r\n        /**\r\n         * The value of the green color channel the camera will use for the fade effect.\r\n         * A value between 0 and 255.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#green\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.green = 0;\r\n\r\n        /**\r\n         * The value of the blue color channel the camera will use for the fade effect.\r\n         * A value between 0 and 255.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#blue\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.blue = 0;\r\n\r\n        /**\r\n         * The value of the alpha channel used during the fade effect.\r\n         * A value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#alpha\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.alpha = 0;\r\n\r\n        /**\r\n         * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#progress\r\n         * @type {number}\r\n         * @since 3.5.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Effect elapsed timer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#_elapsed\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._elapsed = 0;\r\n\r\n        /**\r\n         * @callback CameraFadeCallback\r\n         *\r\n         * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.\r\n         * @param {number} progress - The progress of the effect. A value between 0 and 1.\r\n         */\r\n\r\n        /**\r\n         * This callback is invoked every frame for the duration of the effect.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#_onUpdate\r\n         * @type {?CameraFadeCallback}\r\n         * @private\r\n         * @default null\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdate;\r\n\r\n        /**\r\n         * On Complete callback scope.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#_onUpdateScope\r\n         * @type {any}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdateScope;\r\n    },\r\n\r\n    /**\r\n     * This event is fired when the fade in effect begins to run on a camera.\r\n     *\r\n     * @event CameraFadeInStartEvent\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera that the effect began on.\r\n     * @param {Phaser.Cameras.Scene2D.Effects.Fade} effect - A reference to the effect instance.\r\n     * @param {integer} duration - The duration of the effect.\r\n     * @param {integer} red - The red color channel value.\r\n     * @param {integer} green - The green color channel value.\r\n     * @param {integer} blue - The blue color channel value.\r\n     */\r\n\r\n    /**\r\n     * This event is fired when the fade out effect begins to run on a camera.\r\n     *\r\n     * @event CameraFadeOutStartEvent\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera that the effect began on.\r\n     * @param {Phaser.Cameras.Scene2D.Effects.Fade} effect - A reference to the effect instance.\r\n     * @param {integer} duration - The duration of the effect.\r\n     * @param {integer} red - The red color channel value.\r\n     * @param {integer} green - The green color channel value.\r\n     * @param {integer} blue - The blue color channel value.\r\n     */\r\n\r\n    /**\r\n     * This event is fired when the fade in effect completes.\r\n     *\r\n     * @event CameraFadeInCompleteEvent\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera that the effect began on.\r\n     * @param {Phaser.Cameras.Scene2D.Effects.Fade} effect - A reference to the effect instance.\r\n     */\r\n\r\n    /**\r\n     * This event is fired when the fade out effect completes.\r\n     *\r\n     * @event CameraFadeOutCompleteEvent\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera that the effect began on.\r\n     * @param {Phaser.Cameras.Scene2D.Effects.Fade} effect - A reference to the effect instance.\r\n     */\r\n\r\n    /**\r\n     * Fades the Camera to or from the given color over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#start\r\n     * @fires CameraFadeInStartEvent\r\n     * @fires CameraFadeInCompleteEvent\r\n     * @fires CameraFadeOutStartEvent\r\n     * @fires CameraFadeOutCompleteEvent\r\n     * @since 3.5.0\r\n     *\r\n     * @param {boolean} [direction=true] - The direction of the fade. `true` = fade out (transparent to color), `false` = fade in (color to transparent)\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n     * @param {CameraFadeCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n     */\r\n    start: function (direction, duration, red, green, blue, force, callback, context)\r\n    {\r\n        if (direction === undefined) { direction = true; }\r\n        if (duration === undefined) { duration = 1000; }\r\n        if (red === undefined) { red = 0; }\r\n        if (green === undefined) { green = 0; }\r\n        if (blue === undefined) { blue = 0; }\r\n        if (force === undefined) { force = false; }\r\n        if (callback === undefined) { callback = null; }\r\n        if (context === undefined) { context = this.camera.scene; }\r\n\r\n        if (!force && this.isRunning)\r\n        {\r\n            return this.camera;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this.isComplete = false;\r\n        this.duration = duration;\r\n        this.direction = direction;\r\n        this.progress = 0;\r\n\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n        this.alpha = (direction) ? Number.MIN_VALUE : 1;\r\n\r\n        this._elapsed = 0;\r\n\r\n        this._onUpdate = callback;\r\n        this._onUpdateScope = context;\r\n\r\n        var eventName = (direction) ? 'camerafadeoutstart' : 'camerafadeinstart';\r\n\r\n        this.camera.emit(eventName, this.camera, this, duration, red, green, blue);\r\n\r\n        return this.camera;\r\n    },\r\n\r\n    /**\r\n     * The main update loop for this effect. Called automatically by the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#update\r\n     * @since 3.5.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._elapsed += delta;\r\n\r\n        this.progress = Clamp(this._elapsed / this.duration, 0, 1);\r\n\r\n        if (this._onUpdate)\r\n        {\r\n            this._onUpdate.call(this._onUpdateScope, this.camera, this.progress);\r\n        }\r\n\r\n        if (this._elapsed < this.duration)\r\n        {\r\n            this.alpha = (this.direction) ? this.progress : 1 - this.progress;\r\n        }\r\n        else\r\n        {\r\n            this.effectComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called internally by the Canvas Renderer.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#postRenderCanvas\r\n     * @since 3.5.0\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx - The Canvas context to render to.\r\n     *\r\n     * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n     */\r\n    postRenderCanvas: function (ctx)\r\n    {\r\n        if (!this.isRunning && !this.isComplete)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var camera = this.camera;\r\n\r\n        ctx.fillStyle = 'rgba(' + this.red + ',' + this.green + ',' + this.blue + ',' + this.alpha + ')';\r\n        ctx.fillRect(camera._cx, camera._cy, camera._cw, camera._ch);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Called internally by the WebGL Renderer.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#postRenderWebGL\r\n     * @since 3.5.0\r\n     *\r\n     * @param {Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline} pipeline - The WebGL Pipeline to render to.\r\n     * @param {function} getTintFunction - A function that will return the gl safe tint colors.\r\n     *\r\n     * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n     */\r\n    postRenderWebGL: function (pipeline, getTintFunction)\r\n    {\r\n        if (!this.isRunning && !this.isComplete)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var camera = this.camera;\r\n        var red = this.red / 255;\r\n        var blue = this.blue / 255;\r\n        var green = this.green / 255;\r\n\r\n        pipeline.drawFillRect(\r\n            camera._cx, camera._cy, camera._cw, camera._ch,\r\n            getTintFunction(red, green, blue, 1),\r\n            this.alpha\r\n        );\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Called internally when the effect completes.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#effectComplete\r\n     * @since 3.5.0\r\n     */\r\n    effectComplete: function ()\r\n    {\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n\r\n        this.isRunning = false;\r\n        this.isComplete = true;\r\n\r\n        var eventName = (this.direction) ? 'camerafadeoutcomplete' : 'camerafadeincomplete';\r\n\r\n        this.camera.emit(eventName, this.camera, this);\r\n    },\r\n\r\n    /**\r\n     * Resets this camera effect.\r\n     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#reset\r\n     * @since 3.5.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.isRunning = false;\r\n        this.isComplete = false;\r\n\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n    },\r\n\r\n    /**\r\n     * Destroys this effect, releasing it from the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.camera = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Fade;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Clamp","Fade","Class","initialize","camera","isComplete","isRunning","direction","_elapsed","progress","alpha","blue","green","red","duration","start","force","callback","context","undefined","scene","Number","MIN_VALUE","_onUpdate","_onUpdateScope","emit","eventName","update","time","delta","call","effectComplete","postRenderCanvas","ctx","fillStyle","fillRect","_cx","_cy","_cw","_ch","postRenderWebGL","pipeline","getTintFunction","drawFillRect","reset","destroy"]
}
