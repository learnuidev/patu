{
"version":3,
"file":"module$node_modules$Phaser$src$utils$array$Remove.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9G,IAAIC,UAAYH,OAAA,CAAQ,sDAAR,CA8EhBC,OAAAC,QAAA,CA3DaE,QAAS,CAACC,KAAD,CAAQC,IAAR,CAAcC,QAAd,CAAwBC,OAAxB,CACtB,CACoBC,IAAAA,EAAhB,GAAID,OAAJ,GAA6BA,OAA7B,CAAuCH,KAAvC,CAKA,IAAI,CAACK,KAAAC,QAAA,CAAcL,IAAd,CAAL,CACA,CACI,IAAAM,MAAQP,KAAAQ,QAAA,CAAcP,IAAd,CAER,OAAc,EAAd,GAAIM,KAAJ,EAEIT,SAAA,CAAUE,KAAV,CAAiBO,KAAjB,CAOON,CALHC,QAKGD,EAHHC,QAAAO,KAAA,CAAcN,OAAd,CAAuBF,IAAvB,CAGGA,CAAAA,IATX,EAaW,IAhBf,CAwBA,IAFA,IAAIS,WAAaT,IAAAU,OAAbD,CAA2B,CAE/B,CAAqB,CAArB,EAAOA,UAAP,CAAA,CACA,CACI,IAAIE,MAAQX,IAAA,CAAKS,UAAL,CAEZH,MAAA,CAAQP,KAAAQ,QAAA,CAAcI,KAAd,CAEM;EAAd,GAAIL,KAAJ,EAEIT,SAAA,CAAUE,KAAV,CAAiBO,KAAjB,CAEA,CAAIL,QAAJ,EAEIA,QAAAO,KAAA,CAAcN,OAAd,CAAuBS,KAAvB,CANR,EAYIX,IAAAY,IAAA,EAGJH,WAAA,EApBJ,CAuBA,MAAOT,KAvDX,CA3B8G;",
"sources":["node_modules/Phaser/src/utils/array/Remove.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$array$Remove\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar SpliceOne = require('./SpliceOne');\r\n\r\n/**\r\n * Removes the given item, or array of items, from the array.\r\n * \r\n * The array is modified in-place.\r\n * \r\n * You can optionally specify a callback to be invoked for each item successfully removed from the array.\r\n *\r\n * @function Phaser.Utils.Array.Remove\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be modified.\r\n * @param {*|Array.<*>} item - The item, or array of items, to be removed from the array.\r\n * @param {function} [callback] - A callback to be invoked for each item successfully removed from the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {*|Array.<*>} The item, or array of items, that were successfully removed from the array.\r\n */\r\nvar Remove = function (array, item, callback, context)\r\n{\r\n    if (context === undefined) { context = array; }\r\n\r\n    var index;\r\n\r\n    //  Fast path to avoid array mutation and iteration\r\n    if (!Array.isArray(item))\r\n    {\r\n        index = array.indexOf(item);\r\n\r\n        if (index !== -1)\r\n        {\r\n            SpliceOne(array, index);\r\n\r\n            if (callback)\r\n            {\r\n                callback.call(context, item);\r\n            }\r\n\r\n            return item;\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //  If we got this far, we have an array of items to remove\r\n\r\n    var itemLength = item.length - 1;\r\n\r\n    while (itemLength >= 0)\r\n    {\r\n        var entry = item[itemLength];\r\n\r\n        index = array.indexOf(entry);\r\n\r\n        if (index !== -1)\r\n        {\r\n            SpliceOne(array, index);\r\n\r\n            if (callback)\r\n            {\r\n                callback.call(context, entry);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  Item wasn't found in the array, so remove it from our return results\r\n            item.pop();\r\n        }\r\n\r\n        itemLength--;\r\n    }\r\n\r\n    return item;\r\n};\r\n\r\nmodule.exports = Remove;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","SpliceOne","Remove","array","item","callback","context","undefined","Array","isArray","index","indexOf","call","itemLength","length","entry","pop"]
}
