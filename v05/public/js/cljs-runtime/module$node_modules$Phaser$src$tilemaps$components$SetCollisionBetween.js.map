{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$SetCollisionBetween.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uEAAA,CAA2F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOnI,IAAIC,iBAAmBH,OAAA,CAAQ,qEAAR,CAAvB,CACII,qBAAuBJ,OAAA,CAAQ,yEAAR,CAD3B,CAEIK,uBAAyBL,OAAA,CAAQ,2EAAR,CAqD7BC,OAAAC,QAAA,CAnC0BI,QAAS,CAACC,KAAD,CAAQC,IAAR,CAAcC,QAAd,CAAwBC,gBAAxB,CAA0CC,KAA1C,CACnC,CACqBC,IAAAA,EAAjB;AAAIH,QAAJ,GAA8BA,QAA9B,CAAyC,CAAA,CAAzC,CACyBG,KAAAA,EAAzB,GAAIF,gBAAJ,GAAsCA,gBAAtC,CAAyD,CAAA,CAAzD,CAEA,IAAI,EAAAH,KAAA,CAAQC,IAAR,CAAJ,CAAA,CAGA,IAAK,IAAIK,MAAQN,KAAjB,CAAwBM,KAAxB,EAAiCL,IAAjC,CAAuCK,KAAA,EAAvC,CAEIR,sBAAA,CAAuBQ,KAAvB,CAA8BJ,QAA9B,CAAwCE,KAAxC,CAIJ,KAASG,KAAT,CAAc,CAAd,CAAiBA,KAAjB,CAAsBH,KAAAI,OAAtB,CAAoCD,KAAA,EAApC,CAEI,IAAK,IAAIE,GAAK,CAAd,CAAiBA,EAAjB,CAAsBL,KAAAM,MAAtB,CAAmCD,EAAA,EAAnC,CACA,CACI,IAAIE,KAAOP,KAAAQ,KAAA,CAAWL,KAAX,CAAA,CAAeE,EAAf,CACPE,KAAJ,EAEQA,IAAAL,MAFR,EAEsBN,KAFtB,EAE+BW,IAAAL,MAF/B,EAE6CL,IAF7C,EAIQL,gBAAA,CAAiBe,IAAjB,CAAuBT,QAAvB,CANZ,CAYAC,gBAAJ,EAEIN,oBAAA,CAAqB,CAArB,CAAwB,CAAxB,CAA2BO,KAAAM,MAA3B,CAAwCN,KAAAI,OAAxC,CAAsDJ,KAAtD,CA1BJ,CAJJ,CA5BmI;",
"sources":["node_modules/Phaser/src/tilemaps/components/SetCollisionBetween.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$SetCollisionBetween\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar SetTileCollision = require('./SetTileCollision');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\nvar SetLayerCollisionIndex = require('./SetLayerCollisionIndex');\r\n\r\n/**\r\n * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n * enabled (true) or disabled (false).\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionBetween\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} start - The first index of the tile to be set for collision.\r\n * @param {integer} stop - The last index of the tile to be set for collision.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar SetCollisionBetween = function (start, stop, collides, recalculateFaces, layer)\r\n{\r\n    if (collides === undefined) { collides = true; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n\r\n    if (start > stop) { return; }\r\n\r\n    // Update the array of colliding indexes\r\n    for (var index = start; index <= stop; index++)\r\n    {\r\n        SetLayerCollisionIndex(index, collides, layer);\r\n    }\r\n\r\n    // Update the tiles\r\n    for (var ty = 0; ty < layer.height; ty++)\r\n    {\r\n        for (var tx = 0; tx < layer.width; tx++)\r\n        {\r\n            var tile = layer.data[ty][tx];\r\n            if (tile)\r\n            {\r\n                if (tile.index >= start && tile.index <= stop)\r\n                {\r\n                    SetTileCollision(tile, collides);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = SetCollisionBetween;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","SetTileCollision","CalculateFacesWithin","SetLayerCollisionIndex","SetCollisionBetween","start","stop","collides","recalculateFaces","layer","undefined","index","ty","height","tx","width","tile","data"]
}
