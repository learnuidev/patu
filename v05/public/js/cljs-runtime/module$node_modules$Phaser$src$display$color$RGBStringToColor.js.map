{
"version":3,
"file":"module$node_modules$Phaser$src$display$color$RGBStringToColor.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,8DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO1H,IAAIC,MAAQH,OAAA,CAAQ,oDAAR,CAiCZC,OAAAC,QAAA,CAnBuBE,QAAS,CAACC,GAAD,CAChC,CACI,IAAIC,MAAQ,IAAIH,KAAhB,CAEII,OAAU,2EAADC,KAAA,CAAmFH,GAAAI,YAAA,EAAnF,CAEb,IAAIF,MAAJ,CACA,CACQG,GAAAA,CAAIC,QAAA,CAASJ,MAAA,CAAO,CAAP,CAAT,CAAoB,EAApB,CACR,KAAIK,EAAID,QAAA,CAASJ,MAAA,CAAO,CAAP,CAAT,CAAoB,EAApB,CAAR,CACIM,EAAIF,QAAA,CAASJ,MAAA,CAAO,CAAP,CAAT,CAAoB,EAApB,CACJO,OAAAA,CAAmBC,IAAAA,EAAf,GAACR,MAAA,CAAO,CAAP,CAAD,CAA4BS,UAAA,CAAWT,MAAA,CAAO,CAAP,CAAX,CAA5B,CAAoD,CAE5DD,MAAAW,MAAA,CAAYP,GAAZ;AAAeE,CAAf,CAAkBC,CAAlB,CAAyB,GAAzB,CAAqBC,MAArB,CANJ,CASA,MAAOR,MAfX,CAtB0H;",
"sources":["node_modules/Phaser/src/display/color/RGBStringToColor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$display$color$RGBStringToColor\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar Color = require('./Color');\n\n/**\n * Converts a CSS 'web' string into a Phaser Color object.\n * \n * The web string can be in the format `'rgb(r,g,b)'` or `'rgba(r,g,b,a)'` where r/g/b are in the range [0..255] and a is in the range [0..1].\n *\n * @function Phaser.Display.Color.RGBStringToColor\n * @since 3.0.0\n *\n * @param {string} rgb - The CSS format color string, using the `rgb` or `rgba` format.\n *\n * @return {Phaser.Display.Color} A Color object.\n */\nvar RGBStringToColor = function (rgb)\n{\n    var color = new Color();\n\n    var result = (/^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d+(?:\\.\\d+)?))?\\s*\\)$/).exec(rgb.toLowerCase());\n\n    if (result)\n    {\n        var r = parseInt(result[1], 10);\n        var g = parseInt(result[2], 10);\n        var b = parseInt(result[3], 10);\n        var a = (result[4] !== undefined) ? parseFloat(result[4]) : 1;\n\n        color.setTo(r, g, b, a * 255);\n    }\n\n    return color;\n};\n\nmodule.exports = RGBStringToColor;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Color","RGBStringToColor","rgb","color","result","exec","toLowerCase","r","parseInt","g","b","a","undefined","parseFloat","setTo"]
}
