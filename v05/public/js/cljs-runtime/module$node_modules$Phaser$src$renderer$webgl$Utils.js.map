{
"version":3,
"file":"module$node_modules$Phaser$src$renderer$webgl$Utils.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,oDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYhHD,MAAAC,QAAA,CAAiB,CAebC,kBAAmBA,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAC5B,CAMI,SAFe,GAEf,CAFWA,CAEX,CAFsB,CAEtB,EAF2B,GAE3B,GAAe,EAAf,GALe,GAKf,CALWH,CAKX,CALsB,CAKtB,EAL2B,GAK3B,GAA4B,EAA5B,GAJe,GAIf,CAJWC,CAIX,CAJsB,CAItB,EAJ2B,GAI3B,GAAyC,CAAzC,EAHe,GAGf,CAHWC,CAGX,CAHsB,CAGtB,EAH2B,GAG3B,IAAsD,CAN1D,CAhBa,CAqCbE,wBAAyBA,QAAS,CAACC,GAAD,CAAMF,CAAN,CAClC,CAEI,SADe,GACf,CADWA,CACX,CADsB,CACtB,EAD2B,GAC3B,GAAe,EAAf,CAAqBE,GAArB,IAA8B,CAFlC,CAtCa,CAwDbC,+BAAgCA,QAAS,CAACD,GAAD,CAAMF,CAAN,CACzC,CAMI,SAFe,GAEf,CAFWA,CAEX,CAFsB,CAEtB,EAF2B,GAE3B,GAAe,EAAf,GAHUE,GAGV,CAHc,CAGd,EAHmB,GAGnB,GAA4B,EAA5B,GAJWA,GAIX,EAJkB,CAIlB,CAJqB,CAIrB,EAJ0B,GAI1B,GAAyC,CAAzC,EALWA,GAKX,EALkB,EAKlB,CALsB,CAKtB,EAL2B,GAK3B,IAAsD,CAN1D,CAzDa,CA4EbE,qBAAsBA,QAAS,CAACF,GAAD,CAC/B,CAKI,MAAO,GAJIA,GAIJ;AAJW,EAIX,CAJe,CAIf,EAJoB,GAIpB,EAAO,GAAP,GAHIA,GAGJ,EAHW,CAGX,CAHc,CAGd,EAHmB,GAGnB,EAAmB,GAAnB,GAFGA,GAEH,CAFO,CAEP,EAFY,GAEZ,EAA+B,GAA/B,CALX,CA7Ea,CAgGbG,kBAAmBA,QAAS,CAACC,UAAD,CAAaC,SAAb,CAC5B,CAGI,IAFA,IAAIC,MAAQ,CAAZ,CAESC,MAAQ,CAAjB,CAAoBA,KAApB,CAA4BH,UAAAI,OAA5B,CAA+C,EAAED,KAAjD,CACA,CACI,IAAIE,QAAUL,UAAA,CAAWG,KAAX,CAIVD,MAAA,CAFAG,OAAAC,KAAJ,GAAqBL,SAAAM,MAArB,CAEIL,KAFJ,CAEaG,OAAAG,KAFb,CAMIN,KANJ,CAMa,CATjB,CAaA,MAAOA,MAjBX,CAjGa,CAZ+F;",
"sources":["node_modules/Phaser/src/renderer/webgl/Utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$renderer$webgl$Utils\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Renderer.WebGL.Utils\r\n * @since 3.0.0\r\n */\r\nmodule.exports = {\r\n\r\n    /**\r\n     * Packs four floats on a range from 0.0 to 1.0 into a single Uint32\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getTintFromFloats\r\n     * @since 3.0.0\r\n     * \r\n     * @param {number} r - Red component in a range from 0.0 to 1.0 \r\n     * @param {number} g - [description]\r\n     * @param {number} b - [description]\r\n     * @param {number} a - Alpha component in a range from 0.0 to 1.0\r\n     * \r\n     * @return {number} [description]\r\n     */\r\n    getTintFromFloats: function (r, g, b, a)\r\n    {\r\n        var ur = ((r * 255.0)|0) & 0xFF;\r\n        var ug = ((g * 255.0)|0) & 0xFF;\r\n        var ub = ((b * 255.0)|0) & 0xFF;\r\n        var ua = ((a * 255.0)|0) & 0xFF;\r\n\r\n        return ((ua << 24) | (ur << 16) | (ug << 8) | ub) >>> 0;\r\n    },\r\n\r\n    /**\r\n     * Packs a Uint24, representing RGB components, with a Float32, representing\r\n     * the alpha component, with a range between 0.0 and 1.0 and return a Uint32\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha\r\n     * @since 3.0.0\r\n     * \r\n     * @param {number} rgb - Uint24 representing RGB components\r\n     * @param {number} a - Float32 representing Alpha component\r\n     * \r\n     * @return {number} Packed RGBA as Uint32\r\n     */\r\n    getTintAppendFloatAlpha: function (rgb, a)\r\n    {\r\n        var ua = ((a * 255.0)|0) & 0xFF;\r\n        return ((ua << 24) | rgb) >>> 0;\r\n    },\r\n\r\n    /**\r\n     * Packs a Uint24, representing RGB components, with a Float32, representing\r\n     * the alpha component, with a range between 0.0 and 1.0 and return a \r\n     * swizzled Uint32\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlphaAndSwap\r\n     * @since 3.0.0\r\n     * \r\n     * @param {number} rgb - Uint24 representing RGB components\r\n     * @param {number} a - Float32 representing Alpha component\r\n     * \r\n     * @return {number} Packed RGBA as Uint32\r\n     */\r\n    getTintAppendFloatAlphaAndSwap: function (rgb, a)\r\n    {\r\n        var ur = ((rgb >> 16)|0) & 0xff;\r\n        var ug = ((rgb >> 8)|0) & 0xff;\r\n        var ub = (rgb|0) & 0xff;\r\n        var ua = ((a * 255.0)|0) & 0xFF;\r\n\r\n        return ((ua << 24) | (ub << 16) | (ug << 8) | ur) >>> 0;\r\n    },\r\n\r\n    /**\r\n     * Unpacks a Uint24 RGB into an array of floats of ranges of 0.0 and 1.0\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getFloatsFromUintRGB\r\n     * @since 3.0.0\r\n     * \r\n     * @param {number} rgb - RGB packed as a Uint24\r\n     * \r\n     * @return {array} Array of floats representing each component as a float \r\n     */\r\n    getFloatsFromUintRGB: function (rgb)\r\n    {\r\n        var ur = ((rgb >> 16)|0) & 0xff;\r\n        var ug = ((rgb >> 8)|0) & 0xff;\r\n        var ub = (rgb|0) & 0xff;\r\n\r\n        return [ ur / 255.0, ug / 255.0, ub / 255.0 ];\r\n    },\r\n\r\n    /**\r\n     * Counts how many attributes of 32 bits a vertex has\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getComponentCount\r\n     * @since 3.0.0\r\n     * \r\n     * @param {array} attributes - Array of attributes \r\n     * @param {WebGLRenderingContext} glContext - WebGLContext used for check types\r\n     * \r\n     * @return {number} Count of 32 bit attributes in vertex\r\n     */\r\n    getComponentCount: function (attributes, glContext)\r\n    {\r\n        var count = 0;\r\n\r\n        for (var index = 0; index < attributes.length; ++index)\r\n        {\r\n            var element = attributes[index];\r\n            \r\n            if (element.type === glContext.FLOAT)\r\n            {\r\n                count += element.size;\r\n            }\r\n            else\r\n            {\r\n                count += 1; // We'll force any other type to be 32 bit. for now\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n};\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","getTintFromFloats","r","g","b","a","getTintAppendFloatAlpha","rgb","getTintAppendFloatAlphaAndSwap","getFloatsFromUintRGB","getComponentCount","attributes","glContext","count","index","length","element","type","FLOAT","size"]
}
