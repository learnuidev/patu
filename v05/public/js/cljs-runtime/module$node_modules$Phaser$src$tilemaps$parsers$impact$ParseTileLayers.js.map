{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$parsers$impact$ParseTileLayers.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uEAAA,CAA2F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOnI,IAAIC,UAAYH,OAAA,CAAQ,2DAAR,CAAhB,CACII,KAAOJ,OAAA,CAAQ,8CAAR,CAsEXC,OAAAC,QAAA,CAzDsBG,QAAS,CAACC,IAAD,CAAOC,UAAP,CAC/B,CAGI,IAFA,IAAIC,WAAa,EAAjB,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,IAAAI,MAAAC,OAApB,CAAuCF,CAAA,EAAvC,CACA,CAiBI,IAhBA,IAAIC,MAAQJ,IAAAI,MAAA,CAAWD,CAAX,CAAZ,CAEIG,UAAY,IAAIT,SAAJ,CAAc,CAC1BU,KAAMH,KAAAG,KADoB,CAE1BC,MAAOJ,KAAAI,MAFmB,CAG1BC,OAAQL,KAAAK,OAHkB,CAI1BC,UAAWN,KAAAO,SAJe,CAK1BC,WAAYR,KAAAO,SALc;AAM1BE,QAA2B,CAA3BA,GAAST,KAAAS,QANiB,CAAd,CAFhB,CAWIC,IAAM,EAXV,CAYIC,SAAW,EAZf,CAgBSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBZ,KAAAa,KAAAZ,OAApB,CAAuCW,CAAA,EAAvC,CACA,CACI,IAAK,IAAIE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBd,KAAAa,KAAA,CAAWD,CAAX,CAAAX,OAApB,CAA0Ca,CAAA,EAA1C,CACA,CAEI,IAAIC,MAAQf,KAAAa,KAAA,CAAWD,CAAX,CAAA,CAAcE,CAAd,CAARC,CAA2B,CAM3BC,MAAA,CAFQ,EAAZ,CAAID,KAAJ,CAEW,IAAIrB,IAAJ,CAASQ,SAAT,CAAoBa,KAApB,CAA2BD,CAA3B,CAA8BF,CAA9B,CAAiCZ,KAAAO,SAAjC,CAAiDP,KAAAO,SAAjD,CAFX,CAMWV,UAAA,CACD,IADC,CAED,IAAIH,IAAJ,CAASQ,SAAT,CAAoB,EAApB,CAAwBY,CAAxB,CAA2BF,CAA3B,CAA8BZ,KAAAO,SAA9B,CAA8CP,KAAAO,SAA9C,CAGVG,IAAAO,KAAA,CAASD,KAAT,CAjBJ,CAoBAL,QAAAM,KAAA,CAAcP,GAAd,CACAA,IAAA,CAAM,EAvBV,CA0BAR,SAAAW,KAAA,CAAiBF,QAEjBb,WAAAmB,KAAA,CAAgBf,SAAhB,CA9CJ,CAiDA,MAAOJ,WArDX,CAtBmI;",
"sources":["node_modules/Phaser/src/tilemaps/parsers/impact/ParseTileLayers.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$parsers$impact$ParseTileLayers\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar LayerData = require('../../mapdata/LayerData');\r\nvar Tile = require('../../Tile');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Impact.ParseTileLayers\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - [description]\r\n * @param {boolean} insertNull - [description]\r\n *\r\n * @return {array} [description]\r\n */\r\nvar ParseTileLayers = function (json, insertNull)\r\n{\r\n    var tileLayers = [];\r\n\r\n    for (var i = 0; i < json.layer.length; i++)\r\n    {\r\n        var layer = json.layer[i];\r\n\r\n        var layerData = new LayerData({\r\n            name: layer.name,\r\n            width: layer.width,\r\n            height: layer.height,\r\n            tileWidth: layer.tilesize,\r\n            tileHeight: layer.tilesize,\r\n            visible: layer.visible === 1\r\n        });\r\n\r\n        var row = [];\r\n        var tileGrid = [];\r\n\r\n        //  Loop through the data field in the JSON. This is a 2D array containing the tile indexes,\r\n        //  one after the other. The indexes are relative to the tileset that contains the tile.\r\n        for (var y = 0; y < layer.data.length; y++)\r\n        {\r\n            for (var x = 0; x < layer.data[y].length; x++)\r\n            {\r\n                // In Weltmeister, 0 = no tile, but the Tilemap API expects -1 = no tile.\r\n                var index = layer.data[y][x] - 1;\r\n\r\n                var tile;\r\n\r\n                if (index > -1)\r\n                {\r\n                    tile = new Tile(layerData, index, x, y, layer.tilesize, layer.tilesize);\r\n                }\r\n                else\r\n                {\r\n                    tile = insertNull\r\n                        ? null\r\n                        : new Tile(layerData, -1, x, y, layer.tilesize, layer.tilesize);\r\n                }\r\n\r\n                row.push(tile);\r\n            }\r\n\r\n            tileGrid.push(row);\r\n            row = [];\r\n        }\r\n\r\n        layerData.data = tileGrid;\r\n\r\n        tileLayers.push(layerData);\r\n    }\r\n\r\n    return tileLayers;\r\n};\r\n\r\nmodule.exports = ParseTileLayers;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","LayerData","Tile","ParseTileLayers","json","insertNull","tileLayers","i","layer","length","layerData","name","width","height","tileWidth","tilesize","tileHeight","visible","row","tileGrid","y","data","x","index","tile","push"]
}
