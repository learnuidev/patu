{
"version":3,
"file":"module$node_modules$Phaser$src$textures$parsers$JSONHash.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOrH,IAAIC,MAAQH,OAAA,CAAQ,mDAAR,CAsFZC,OAAAC,QAAA,CArEeE,QAAS,CAACC,OAAD,CAAUC,WAAV,CAAuBC,IAAvB,CACxB,CAEI,GAAKA,IAAA,OAAL,CAAA,CAOA,IAAIC,OAASH,OAAAG,OAAA,CAAeF,WAAf,CAEbD,QAAAI,IAAA,CAAY,QAAZ,CAAsBH,WAAtB,CAAmC,CAAnC,CAAsC,CAAtC,CAAyCE,MAAAE,MAAzC,CAAuDF,MAAAG,OAAvD,CAGIC,OAAAA,CAASL,IAAA,OACb,KAESM,GAAT,KAASA,GAAT,GAAgBD,OAAhB,CACA,CACI,IAAIE,IAAMF,MAAA,CAAOC,GAAP,CAGV,KAAAE,SAAWV,OAAAI,IAAA,CAAYI,GAAZ,CAAiBP,WAAjB,CAA8BQ,GAAAE,MAAAC,EAA9B,CAA2CH,GAAAE,MAAAE,EAA3C,CAAwDJ,GAAAE,MAAAG,EAAxD,CAAqEL,GAAAE,MAAAI,EAArE,CAGPN;GAAAO,QAAJ,EAEIN,QAAAO,QAAA,CACIR,GAAAS,WAAAJ,EADJ,CAEIL,GAAAS,WAAAH,EAFJ,CAGIN,GAAAU,iBAAAP,EAHJ,CAIIH,GAAAU,iBAAAN,EAJJ,CAKIJ,GAAAU,iBAAAL,EALJ,CAMIL,GAAAU,iBAAAJ,EANJ,CAUAN,IAAAW,QAAJ,GAEIV,QAAAU,QACA,CADmB,CAAA,CACnB,CAAAV,QAAAW,kBAAA,EAHJ,CAOAX,SAAAY,WAAA,CAAsBxB,KAAA,CAAMW,GAAN,CA1B1B,CA8BA,IAAKc,IAAIA,OAAT,GAAoBrB,KAApB,CAEoB,QAAhB,GAAIqB,OAAJ,GAKIC,KAAAC,QAAA,CAAcvB,IAAA,CAAKqB,OAAL,CAAd,CAAJ,CAEIvB,OAAAsB,WAAA,CAAmBC,OAAnB,CAFJ,CAEkCrB,IAAA,CAAKqB,OAAL,CAAAG,MAAA,CAAoB,CAApB,CAFlC,CAMI1B,OAAAsB,WAAA,CAAmBC,OAAnB,CANJ,CAMkCrB,IAAA,CAAKqB,OAAL,CAXlC,CAeJ,OAAOvB,QA/DP,CAEI2B,OAAAC,KAAA,CAAa,gEAAb,CAJR,CAzBqH;",
"sources":["node_modules/Phaser/src/textures/parsers/JSONHash.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$textures$parsers$JSONHash\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Clone = require('../../utils/object/Clone');\r\n\r\n/**\r\n * Parses a Texture Atlas JSON Hash and adds the Frames to the Texture.\r\n * JSON format expected to match that defined by Texture Packer, with the frames property containing an object of Frames.\r\n *\r\n * @function Phaser.Textures.Parsers.JSONHash\r\n * @memberOf Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {integer} sourceIndex - The index of the TextureSource.\r\n * @param {object} json - The JSON data.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\r\nvar JSONHash = function (texture, sourceIndex, json)\r\n{\r\n    //  Malformed?\r\n    if (!json['frames'])\r\n    {\r\n        console.warn('Invalid Texture Atlas JSON Hash given, missing \\'frames\\' Object');\r\n        return;\r\n    }\r\n\r\n    //  Add in a __BASE entry (for the entire atlas)\r\n    var source = texture.source[sourceIndex];\r\n\r\n    texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height);\r\n\r\n    //  By this stage frames is a fully parsed Object\r\n    var frames = json['frames'];\r\n    var newFrame;\r\n\r\n    for (var key in frames)\r\n    {\r\n        var src = frames[key];\r\n\r\n        //  The frame values are the exact coordinates to cut the frame out of the atlas from\r\n        newFrame = texture.add(key, sourceIndex, src.frame.x, src.frame.y, src.frame.w, src.frame.h);\r\n\r\n        //  These are the original (non-trimmed) sprite values\r\n        if (src.trimmed)\r\n        {\r\n            newFrame.setTrim(\r\n                src.sourceSize.w,\r\n                src.sourceSize.h,\r\n                src.spriteSourceSize.x,\r\n                src.spriteSourceSize.y,\r\n                src.spriteSourceSize.w,\r\n                src.spriteSourceSize.h\r\n            );\r\n        }\r\n\r\n        if (src.rotated)\r\n        {\r\n            newFrame.rotated = true;\r\n            newFrame.updateUVsInverted();\r\n        }\r\n\r\n        //  Copy over any extra data\r\n        newFrame.customData = Clone(src);\r\n    }\r\n\r\n    //  Copy over any additional data that was in the JSON to Texture.customData\r\n    for (var dataKey in json)\r\n    {\r\n        if (dataKey === 'frames')\r\n        {\r\n            continue;\r\n        }\r\n\r\n        if (Array.isArray(json[dataKey]))\r\n        {\r\n            texture.customData[dataKey] = json[dataKey].slice(0);\r\n        }\r\n        else\r\n        {\r\n            texture.customData[dataKey] = json[dataKey];\r\n        }\r\n    }\r\n\r\n    return texture;\r\n};\r\n\r\nmodule.exports = JSONHash;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Clone","JSONHash","texture","sourceIndex","json","source","add","width","height","frames","key","src","newFrame","frame","x","y","w","h","trimmed","setTrim","sourceSize","spriteSourceSize","rotated","updateUVsInverted","customData","dataKey","Array","isArray","slice","console","warn"]
}
