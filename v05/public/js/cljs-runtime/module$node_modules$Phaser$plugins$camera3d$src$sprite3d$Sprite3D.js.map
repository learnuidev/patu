{
"version":3,
"file":"module$node_modules$Phaser$plugins$camera3d$src$sprite3d$Sprite3D.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/plugins/camera3d/src/sprite3d/Sprite3D.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$plugins$camera3d$src$sprite3d$Sprite3D\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../../src/utils/Class');\r\nvar GameObject = require('../../../../src/gameobjects/GameObject');\r\nvar Sprite = require('../../../../src/gameobjects/sprite/Sprite');\r\nvar Vector2 = require('../../../../src/math/Vector2');\r\nvar Vector4 = require('../../../../src/math/Vector4');\r\n\r\n/**\r\n * @classdesc\r\n * A Sprite 3D Game Object.\r\n *\r\n * The Sprite 3D object is an encapsulation of a standard Sprite object, with additional methods to allow\r\n * it to be rendered by a 3D Camera. The Sprite can be positioned anywhere within 3D space.\r\n *\r\n * @class Sprite3D\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The x position of this Game Object.\r\n * @param {number} y - The y position of this Game Object.\r\n * @param {number} z - The z position of this Game Object.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\r\nvar Sprite3D = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    initialize:\r\n\r\n    function Sprite3D (scene, x, y, z, texture, frame)\r\n    {\r\n        GameObject.call(this, scene, 'Sprite3D');\r\n\r\n        /**\r\n         * The encapsulated Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#gameObject\r\n         * @type {Phaser.GameObjects.GameObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.gameObject = new Sprite(scene, 0, 0, texture, frame);\r\n\r\n        /**\r\n         * The position of the Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#position\r\n         * @type {Phaser.Math.Vector4}\r\n         * @since 3.0.0\r\n         */\r\n        this.position = new Vector4(x, y, z);\r\n\r\n        /**\r\n         * The 2D size of the Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#size\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.size = new Vector2(this.gameObject.width, this.gameObject.height);\r\n\r\n        /**\r\n         * The 2D scale of the Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#scale\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.scale = new Vector2(1, 1);\r\n\r\n        /**\r\n         * Whether to automatically set the horizontal scale of the encapsulated Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#adjustScaleX\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.adjustScaleX = true;\r\n\r\n        /**\r\n         * Whether to automatically set the vertical scale of the encapsulated Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#adjustScaleY\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.adjustScaleY = true;\r\n\r\n        /**\r\n         * The visible state of the Game Object.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#_visible\r\n         * @type {boolean}\r\n         * @default true\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._visible = true;\r\n    },\r\n\r\n    /**\r\n     * Project this Sprite onto the given 3D Camera.\r\n     *\r\n     * @method Phaser.GameObjects.Sprite3D#project\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Sprite3D.Camera} camera - The 3D Camera onto which to project this Sprite.\r\n     */\r\n    project: function (camera)\r\n    {\r\n        var pos = this.position;\r\n\r\n        var gameObject = this.gameObject;\r\n\r\n        camera.project(pos, gameObject);\r\n\r\n        camera.getPointSize(pos, this.size, this.scale);\r\n\r\n        if (this.scale.x <= 0 || this.scale.y <= 0)\r\n        {\r\n            gameObject.setVisible(false);\r\n        }\r\n        else\r\n        {\r\n            if (!gameObject.visible)\r\n            {\r\n                gameObject.setVisible(true);\r\n            }\r\n\r\n            if (this.adjustScaleX)\r\n            {\r\n                gameObject.scaleX = this.scale.x;\r\n            }\r\n\r\n            if (this.adjustScaleY)\r\n            {\r\n                gameObject.scaleY = this.scale.y;\r\n            }\r\n\r\n            gameObject.setDepth(gameObject.z * -1);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set the visible state of the Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Sprite3D#setVisible\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - The visible state of the Game Object.\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D} This Sprite3D Object.\r\n     */\r\n    setVisible: function (value)\r\n    {\r\n        this.visible = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The visible state of the Game Object.\r\n     *\r\n     * An invisible Game Object will skip rendering, but will still process update logic.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#visible\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\r\n    visible: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._visible;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._visible = value;\r\n            this.gameObject.visible = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The x position of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.x = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y position of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.y = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The z position of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#z\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    z: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.z;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.z = value;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Sprite3D;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","GameObject","Sprite","Vector2","Vector4","Sprite3D","Extends","initialize","scene","x","y","z","texture","frame","call","gameObject","position","size","width","height","scale","_visible","adjustScaleY","adjustScaleX","project","camera","pos","getPointSize","setVisible","visible","scaleX","scaleY","setDepth","value","get","set"]
}
