{
"version":3,
"file":"module$node_modules$Phaser$src$renderer$canvas$utils$SetTransform.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,kEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA+E9HD,MAAAC,QAAA,CAhDmBC,QAAS,CAACC,QAAD,CAAWC,GAAX,CAAgBC,GAAhB,CAAqBC,MAArB,CAA6BC,YAA7B,CAC5B,CACI,IAAIC,MAAQF,MAAAE,MAARA,CAAuBH,GAAAG,MAE3B,IAAa,CAAb,EAAIA,KAAJ,CAGI,MAAO,CAAA,CAGX,KAAIC,UAAYN,QAAAO,aAAAC,cAAA,CAAoCL,MAAAM,OAAAA,OAApC,CAAhB,CACIC,iBAAmBV,QAAAW,aAAAC,UAAA,CAAgCV,GAAAW,EAAhC,CAAuCX,GAAAY,EAAvC,CAA8CZ,GAAAa,SAA9C,CAA4Db,GAAAc,OAA5D,CAAwEd,GAAAe,OAAxE,CADvB,CAEIC,WAAalB,QAAAmB,aAEbf,aAAJ,EAGIE,SAAAc,mBAAA,CAA6BhB,YAA7B,CAA2C,CAACD,MAAAkB,QAA5C;AAA6DnB,GAAAoB,cAA7D,CAAgF,CAACnB,MAAAoB,QAAjF,CAAkGrB,GAAAsB,cAAlG,CAIA,CADAd,gBAAAe,EACA,CADqBvB,GAAAW,EACrB,CAAAH,gBAAAgB,EAAA,CAAqBxB,GAAAY,EAPzB,GAcIJ,gBAAAe,EACA,EADsBtB,MAAAkB,QACtB,CADuCnB,GAAAoB,cACvC,CAAAZ,gBAAAgB,EAAA,EAAsBvB,MAAAoB,QAAtB,CAAuCrB,GAAAsB,cAf3C,CAUIlB,UAAAqB,SAAA,CAAmBjB,gBAAnB,CAAqCQ,UAArC,CAYJjB,IAAA2B,yBAAA,CAA+B5B,QAAA6B,WAAA,CAAoB3B,GAAA4B,UAApB,CAG/B7B,IAAA8B,YAAA,CAAkB1B,KAElBJ,IAAA+B,KAAA,EAEAd,WAAAe,aAAA,CAAwBhC,GAAxB,CAEA,OAAO,CAAA,CA5CX,CAhC8H;",
"sources":["node_modules/Phaser/src/renderer/canvas/utils/SetTransform.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$renderer$canvas$utils$SetTransform\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Takes a reference to the Canvas Renderer, a Canvas Rendering Context, a Game Object, a Camera and a parent matrix\r\n * and then performs the following steps:\r\n * \r\n * 1) Checks the alpha of the source combined with the Camera alpha. If 0 or less it aborts.\r\n * 2) Takes the Camera and Game Object matrix and multiplies them, combined with the parent matrix if given.\r\n * 3) Sets the blend mode of the context to be that used by the Game Object.\r\n * 4) Sets the alpha value of the context to be that used by the Game Object combined with the Camera.\r\n * 5) Saves the context state.\r\n * 6) Sets the final matrix values into the context via setTransform.\r\n * \r\n * This function is only meant to be used internally. Most of the Canvas Renderer classes use it.\r\n *\r\n * @function Phaser.Renderer.Canvas.SetTransform\r\n * @since 3.12.0\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {CanvasRenderingContext2D} ctx - The canvas context to set the transform on.\r\n * @param {Phaser.GameObjects.GameObject} src - The Game Object being rendered. Can be any type that extends the base class.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} [parentMatrix] - A parent transform matrix to apply to the Game Object before rendering.\r\n * \r\n * @return {boolean} `true` if the Game Object context was set, otherwise `false`.\r\n */\r\nvar SetTransform = function (renderer, ctx, src, camera, parentMatrix)\r\n{\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    if (alpha <= 0)\r\n    {\r\n        //  Nothing to see, so don't waste time calculating stuff\r\n        return false;\r\n    }\r\n\r\n    var camMatrix = renderer._tempMatrix1.copyFromArray(camera.matrix.matrix);\r\n    var gameObjectMatrix = renderer._tempMatrix2.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\r\n    var calcMatrix = renderer._tempMatrix3;\r\n\r\n    if (parentMatrix)\r\n    {\r\n        //  Multiply the camera by the parent matrix\r\n        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);\r\n\r\n        //  Undo the camera scroll\r\n        gameObjectMatrix.e = src.x;\r\n        gameObjectMatrix.f = src.y;\r\n\r\n        //  Multiply by the Sprite matrix, store result in calcMatrix\r\n        camMatrix.multiply(gameObjectMatrix, calcMatrix);\r\n    }\r\n    else\r\n    {\r\n        gameObjectMatrix.e -= camera.scrollX * src.scrollFactorX;\r\n        gameObjectMatrix.f -= camera.scrollY * src.scrollFactorY;\r\n\r\n        //  Multiply by the Sprite matrix, store result in calcMatrix\r\n        camMatrix.multiply(gameObjectMatrix, calcMatrix);\r\n    }\r\n\r\n    //  Blend Mode\r\n    ctx.globalCompositeOperation = renderer.blendModes[src.blendMode];\r\n\r\n    //  Alpha\r\n    ctx.globalAlpha = alpha;\r\n\r\n    ctx.save();\r\n\r\n    calcMatrix.setToContext(ctx);\r\n\r\n    return true;\r\n};\r\n\r\nmodule.exports = SetTransform;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","SetTransform","renderer","ctx","src","camera","parentMatrix","alpha","camMatrix","_tempMatrix1","copyFromArray","matrix","gameObjectMatrix","_tempMatrix2","applyITRS","x","y","rotation","scaleX","scaleY","calcMatrix","_tempMatrix3","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","multiply","globalCompositeOperation","blendModes","blendMode","globalAlpha","save","setToContext"]
}
