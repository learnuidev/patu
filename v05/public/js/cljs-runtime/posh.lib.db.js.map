{"version":3,"sources":["posh/lib/db.cljc"],"mappings":"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","names":["posh.lib.db/get-parent-db","poshdb","G__46990","cljs.core/Keyword","js/Error","cljs.core/first","cljs.core/second","cljs.core.nth","posh.lib.db/get-db-path","path","pdb","cljs.core/cons","posh.lib.db/db-id->conn","posh-tree","db-id","cljs.core.get","posh.lib.db/db-id->schema","posh.lib.db/db-id->db","posh.lib.db/poshdb->db-id","cljs.core._EQ_","posh.lib.db/db-id->attrs","posh.lib.db/poshdb->attrs","posh.lib.db/make-filter-pred","tx-patterns","_","datom","posh.lib.datom-matcher/datom-match?","var_args","G__47005","posh.lib.db/generate-initial-db","dcfg","conn","filters","posh.lib.db.generate_initial_db","db","map__47009","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","filter","as-of","since","with","or__4126__auto__","fexpr__47014","fexpr__47018","fexpr__47019","fexpr__47020","G__47025","G__47026","fexpr__47024","cljs.core/Symbol","p__47030","map__47031","posh.lib.db/poshdb->db","cache","G__47040","G__47041","fexpr__47039","G__47042","G__47043","posh.lib.db/poshdb->analyze-db"],"sourcesContent":["(ns posh.lib.db\n  (:require [posh.lib.datom-matcher :as dm]))\n\n(defn get-parent-db [poshdb]\n  (case (first poshdb)\n    :db nil\n    :filter-tx (second poshdb)\n    :filter-pull (second poshdb)\n    :filter-q (first (nth poshdb 2))))\n\n(defn get-db-path [poshdb]\n  (loop [path []\n         pdb  poshdb]\n    (if pdb\n      (recur (cons pdb path) (get-parent-db pdb))\n      path)))\n\n(defn db-id->conn [posh-tree db-id]\n  (get (:conns posh-tree) db-id))\n\n(defn db-id->schema [posh-tree db-id]\n  (get (:schemas posh-tree) db-id))\n\n(defn db-id->db [posh-tree db-id]\n  (get (:dbs posh-tree) db-id))\n\n(defn poshdb->db-id [poshdb]\n  (if (= (first poshdb) :db)\n    (second poshdb)\n    (recur (get-parent-db poshdb))))\n\n(defn db-id->attrs [posh-tree db-id]\n  {:conn    (db-id->conn posh-tree db-id)\n   :schema  (db-id->schema posh-tree db-id)\n   :db      (db-id->db posh-tree db-id)\n   :db-id db-id})\n\n(defn poshdb->attrs [posh-tree poshdb]\n  (db-id->attrs posh-tree (poshdb->db-id poshdb)))\n\n(defn make-filter-pred [tx-patterns]\n  (fn [_ datom]\n    (dm/datom-match? tx-patterns datom)))\n\n(defn generate-initial-db\n  ([dcfg conn filters] (generate-initial-db dcfg conn filters nil))\n  ([dcfg conn filters db]\n     (let [{:keys [filter as-of since with]} filters\n           ;; generate db (order matters, or I would use reduce)\n           db (or db ((:db dcfg) conn)) ;; create initial db\n           db (if since ((:since dcfg) db since) db)  ;; since t\n           db (if as-of ((:as-of dcfg) db as-of) db)  ;; as-of t\n           db (if with (:db-after ((:with dcfg) db with)) db)  ;; with tx-data\n           db (if filter\n                ((:filter dcfg) db (if (symbol? filter)\n                                     #?(:clj (resolve filter) :cljs nil)\n                                     filter))\n                db) ;; filter pred-sym\n           ]\n       db)))\n\n(defn poshdb->db [{:keys [dcfg cache] :as posh-tree}  poshdb]\n  (if (= (first poshdb) :db)\n    (db-id->db posh-tree (second poshdb))\n    ((:filter dcfg)\n     (poshdb->db posh-tree (get-parent-db poshdb))\n     (make-filter-pred (:pass-patterns (get cache poshdb))))))\n\n\n(defn poshdb->analyze-db [posh-tree poshdb]\n  (let [db-id (poshdb->db-id poshdb)]\n    {:db (poshdb->db posh-tree poshdb)\n     :conn (db-id->conn posh-tree db-id)\n     :schema (db-id->schema posh-tree db-id)\n     :db-id db-id}))\n"]}