{
"version":3,
"file":"module$node_modules$Phaser$src$loader$filetypes$HTML5AudioFile.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/loader/filetypes/HTML5AudioFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$filetypes$HTML5AudioFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar File = require('../File');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar GetURL = require('../GetURL');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @classdesc\r\n * A single Audio File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#audio method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audio.\r\n *\r\n * @class HTML5AudioFile\r\n * @extends Phaser.Loader.File\r\n * @memberOf Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.AudioFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [urlConfig] - The absolute or relative URL to load this file from.\r\n * @param {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar HTML5AudioFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function HTML5AudioFile (loader, key, urlConfig, audioConfig)\r\n    {\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            audioConfig = GetFastValue(config, 'config', audioConfig);\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'audio',\r\n            cache: loader.cacheManager.audio,\r\n            extension: urlConfig.type,\r\n            key: key,\r\n            url: urlConfig.url,\r\n            config: audioConfig\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n\r\n        //  New properties specific to this class\r\n        this.locked = 'ontouchstart' in window;\r\n        this.loaded = false;\r\n        this.filesLoaded = 0;\r\n        this.filesTotal = 0;\r\n    },\r\n\r\n    /**\r\n     * Called when the file finishes loading.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTML5AudioFile#onLoad\r\n     * @since 3.0.0\r\n     */\r\n    onLoad: function ()\r\n    {\r\n        if (this.loaded)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.loaded = true;\r\n\r\n        this.loader.nextFile(this, true);\r\n    },\r\n\r\n    /**\r\n     * Called if the file errors while loading.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTML5AudioFile#onError\r\n     * @since 3.0.0\r\n     */\r\n    onError: function ()\r\n    {\r\n        for (var i = 0; i < this.data.length; i++)\r\n        {\r\n            var audio = this.data[i];\r\n\r\n            audio.oncanplaythrough = null;\r\n            audio.onerror = null;\r\n        }\r\n\r\n        this.loader.nextFile(this, false);\r\n    },\r\n\r\n    /**\r\n     * Called during the file load progress. Is sent a DOM ProgressEvent.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTML5AudioFile#onProgress\r\n     * @since 3.0.0\r\n     */\r\n    onProgress: function (event)\r\n    {\r\n        var audio = event.target;\r\n\r\n        audio.oncanplaythrough = null;\r\n        audio.onerror = null;\r\n\r\n        this.filesLoaded++;\r\n\r\n        this.percentComplete = Math.min((this.filesLoaded / this.filesTotal), 1);\r\n\r\n        this.loader.emit('fileprogress', this, this.percentComplete);\r\n\r\n        if (this.filesLoaded === this.filesTotal)\r\n        {\r\n            this.onLoad();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by the Loader, starts the actual file downloading.\r\n     * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\r\n     * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTML5AudioFile#load\r\n     * @since 3.0.0\r\n     */\r\n    load: function ()\r\n    {\r\n        this.data = [];\r\n\r\n        var instances = (this.config && this.config.instances) || 1;\r\n\r\n        this.filesTotal = instances;\r\n        this.filesLoaded = 0;\r\n        this.percentComplete = 0;\r\n\r\n        for (var i = 0; i < instances; i++)\r\n        {\r\n            var audio = new Audio();\r\n\r\n            audio.dataset.name = this.key + ('0' + i).slice(-2);\r\n            audio.dataset.used = 'false';\r\n\r\n            if (this.locked)\r\n            {\r\n                audio.dataset.locked = 'true';\r\n            }\r\n            else\r\n            {\r\n                audio.dataset.locked = 'false';\r\n\r\n                audio.preload = 'auto';\r\n                audio.oncanplaythrough = this.onProgress.bind(this);\r\n                audio.onerror = this.onError.bind(this);\r\n            }\r\n\r\n            this.data.push(audio);\r\n        }\r\n\r\n        for (i = 0; i < this.data.length; i++)\r\n        {\r\n            audio = this.data[i];\r\n            audio.src = GetURL(this, this.loader.baseURL);\r\n\r\n            if (!this.locked)\r\n            {\r\n                audio.load();\r\n            }\r\n        }\r\n\r\n        if (this.locked)\r\n        {\r\n            //  This is super-dangerous but works. Race condition potential high.\r\n            //  Is there another way?\r\n            setTimeout(this.onLoad.bind(this));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = HTML5AudioFile;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","File","GetFastValue","GetURL","IsPlainObject","HTML5AudioFile","Extends","initialize","loader","key","urlConfig","audioConfig","config","call","fileConfig","type","cache","cacheManager","audio","extension","url","locked","window","loaded","filesTotal","filesLoaded","onLoad","nextFile","onError","i","data","length","oncanplaythrough","onerror","onProgress","event","target","percentComplete","Math","min","emit","load","instances","Audio","dataset","name","slice","used","preload","bind","push","src","baseURL","setTimeout"]
}
