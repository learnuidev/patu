{
"version":3,
"file":"goog.math.matrix.js",
"lineCount":460,
"mappings":"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",
"sources":["goog/math/matrix.js"],
"sourcesContent":["// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Class for representing matrices and static helper functions.\n */\n\ngoog.provide('goog.math.Matrix');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.math');\ngoog.require('goog.math.Size');\ngoog.require('goog.string');\n\n\n\n/**\n * Class for representing and manipulating matrices.\n *\n * The entry that lies in the i-th row and the j-th column of a matrix is\n * typically referred to as the i,j entry of the matrix.\n *\n * The m-by-n matrix A would have its entries referred to as:\n *   [ a0,0   a0,1   a0,2   ...   a0,j  ...  a0,n ]\n *   [ a1,0   a1,1   a1,2   ...   a1,j  ...  a1,n ]\n *   [ a2,0   a2,1   a2,2   ...   a2,j  ...  a2,n ]\n *   [  .      .      .            .          .   ]\n *   [  .      .      .            .          .   ]\n *   [  .      .      .            .          .   ]\n *   [ ai,0   ai,1   ai,2   ...   ai,j  ...  ai,n ]\n *   [  .      .      .            .          .   ]\n *   [  .      .      .            .          .   ]\n *   [  .      .      .            .          .   ]\n *   [ am,0   am,1   am,2   ...   am,j  ...  am,n ]\n *\n * @param {!goog.math.Matrix|!Array<!Array<number>>|!goog.math.Size|number} m\n *     A matrix to copy, a 2D-array to take as a template, a size object for\n *     dimensions, or the number of rows.\n * @param {number=} opt_n Number of columns of the matrix (only applicable if\n *     the first argument is also numeric).\n * @struct\n * @constructor\n * @final\n */\ngoog.math.Matrix = function(m, opt_n) {\n  if (m instanceof goog.math.Matrix) {\n    this.array_ = m.toArray();\n  } else if (\n      goog.isArrayLike(m) &&\n      goog.math.Matrix.isValidArray(\n          /** @type {!Array<!Array<number>>} */ (m))) {\n    this.array_ = goog.array.clone(/** @type {!Array<!Array<number>>} */ (m));\n  } else if (m instanceof goog.math.Size) {\n    this.array_ = goog.math.Matrix.createZeroPaddedArray_(m.height, m.width);\n  } else if (\n      typeof m === 'number' && typeof opt_n === 'number' && m > 0 &&\n      opt_n > 0) {\n    this.array_ = goog.math.Matrix.createZeroPaddedArray_(\n        /** @type {number} */ (m), opt_n);\n  } else {\n    throw new Error('Invalid argument(s) for Matrix contructor');\n  }\n\n  this.size_ = new goog.math.Size(this.array_[0].length, this.array_.length);\n};\n\n\n/**\n * Creates a square identity matrix. i.e. for n = 3:\n * <pre>\n * [ 1 0 0 ]\n * [ 0 1 0 ]\n * [ 0 0 1 ]\n * </pre>\n * @param {number} n The size of the square identity matrix.\n * @return {!goog.math.Matrix} Identity matrix of width and height `n`.\n */\ngoog.math.Matrix.createIdentityMatrix = function(n) {\n  var rv = [];\n  for (var i = 0; i < n; i++) {\n    rv[i] = [];\n    for (var j = 0; j < n; j++) {\n      rv[i][j] = i == j ? 1 : 0;\n    }\n  }\n  return new goog.math.Matrix(rv);\n};\n\n\n/**\n * Calls a function for each cell in a matrix.\n * @param {goog.math.Matrix} matrix The matrix to iterate over.\n * @param {function(this:T, number, number, number, !goog.math.Matrix)} fn\n *     The function to call for every element. This function\n *     takes 4 arguments (value, i, j, and the matrix)\n *     and the return value is irrelevant.\n * @param {T=} opt_obj The object to be used as the value of 'this'\n *     within `fn`.\n * @template T\n */\ngoog.math.Matrix.forEach = function(matrix, fn, opt_obj) {\n  for (var i = 0; i < matrix.getSize().height; i++) {\n    for (var j = 0; j < matrix.getSize().width; j++) {\n      fn.call(opt_obj, matrix.array_[i][j], i, j, matrix);\n    }\n  }\n};\n\n\n/**\n * Tests whether an array is a valid matrix.  A valid array is an array of\n * arrays where all arrays are of the same length and all elements are numbers.\n * @param {!Array<!Array<number>>} arr An array to test.\n * @return {boolean} Whether the array is a valid matrix.\n */\ngoog.math.Matrix.isValidArray = function(arr) {\n  var len = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (!goog.isArrayLike(arr[i]) || len > 0 && arr[i].length != len) {\n      return false;\n    }\n    for (var j = 0; j < arr[i].length; j++) {\n      if (typeof arr[i][j] !== 'number') {\n        return false;\n      }\n    }\n    if (len == 0) {\n      len = arr[i].length;\n    }\n  }\n  return len != 0;\n};\n\n\n/**\n * Calls a function for every cell in a matrix and inserts the result into a\n * new matrix of equal dimensions.\n * @param {!goog.math.Matrix} matrix The matrix to iterate over.\n * @param {function(this:T, number, number, number, !goog.math.Matrix): number}\n *     fn The function to call for every element. This function\n *     takes 4 arguments (value, i, j and the matrix)\n *     and should return a number, which will be inserted into a new matrix.\n * @param {T=} opt_obj The object to be used as the value of 'this'\n *     within `fn`.\n * @return {!goog.math.Matrix} A new matrix with the results from `fn`.\n * @template T\n */\ngoog.math.Matrix.map = function(matrix, fn, opt_obj) {\n  var m = new goog.math.Matrix(matrix.getSize());\n  goog.math.Matrix.forEach(matrix, function(value, i, j) {\n    m.array_[i][j] = fn.call(opt_obj, value, i, j, matrix);\n  });\n  return m;\n};\n\n\n/**\n * Creates a new zero padded matix.\n * @param {number} m Height of matrix.\n * @param {number} n Width of matrix.\n * @return {!Array<!Array<number>>} The new zero padded matrix.\n * @private\n */\ngoog.math.Matrix.createZeroPaddedArray_ = function(m, n) {\n  var rv = [];\n  for (var i = 0; i < m; i++) {\n    rv[i] = [];\n    for (var j = 0; j < n; j++) {\n      rv[i][j] = 0;\n    }\n  }\n  return rv;\n};\n\n\n/**\n * Internal array representing the matrix.\n * @type {!Array<!Array<number>>}\n * @private\n */\ngoog.math.Matrix.prototype.array_;\n\n\n/**\n * After construction the Matrix's size is constant and stored in this object.\n * @type {!goog.math.Size}\n * @private\n */\ngoog.math.Matrix.prototype.size_;\n\n\n/**\n * Returns a new matrix that is the sum of this and the provided matrix.\n * @param {goog.math.Matrix} m The matrix to add to this one.\n * @return {!goog.math.Matrix} Resultant sum.\n */\ngoog.math.Matrix.prototype.add = function(m) {\n  if (!goog.math.Size.equals(this.size_, m.getSize())) {\n    throw new Error(\n        'Matrix summation is only supported on arrays of equal size');\n  }\n  return goog.math.Matrix.map(\n      this, function(val, i, j) { return val + m.array_[i][j]; });\n};\n\n\n/**\n * Appends the given matrix to the right side of this matrix.\n * @param {goog.math.Matrix} m The matrix to augment this matrix with.\n * @return {!goog.math.Matrix} A new matrix with additional columns on the\n *     right.\n */\ngoog.math.Matrix.prototype.appendColumns = function(m) {\n  if (this.size_.height != m.getSize().height) {\n    throw new Error(\n        'The given matrix has height ' + m.size_.height + ', but ' +\n        ' needs to have height ' + this.size_.height + '.');\n  }\n  var result =\n      new goog.math.Matrix(this.size_.height, this.size_.width + m.size_.width);\n  goog.math.Matrix.forEach(\n      this, function(value, i, j) { result.array_[i][j] = value; });\n  goog.math.Matrix.forEach(m, function(value, i, j) {\n    result.array_[i][this.size_.width + j] = value;\n  }, this);\n  return result;\n};\n\n\n/**\n * Appends the given matrix to the bottom of this matrix.\n * @param {goog.math.Matrix} m The matrix to augment this matrix with.\n * @return {!goog.math.Matrix} A new matrix with added columns on the bottom.\n */\ngoog.math.Matrix.prototype.appendRows = function(m) {\n  if (this.size_.width != m.getSize().width) {\n    throw new Error(\n        'The given matrix has width ' + m.size_.width + ', but ' +\n        ' needs to have width ' + this.size_.width + '.');\n  }\n  var result = new goog.math.Matrix(\n      this.size_.height + m.size_.height, this.size_.width);\n  goog.math.Matrix.forEach(\n      this, function(value, i, j) { result.array_[i][j] = value; });\n  goog.math.Matrix.forEach(m, function(value, i, j) {\n    result.array_[this.size_.height + i][j] = value;\n  }, this);\n  return result;\n};\n\n\n/**\n * Returns whether the given matrix equals this matrix.\n * @param {goog.math.Matrix} m The matrix to compare to this one.\n * @param {number=} opt_tolerance The tolerance when comparing array entries.\n * @return {boolean} Whether the given matrix equals this matrix.\n */\ngoog.math.Matrix.prototype.equals = function(m, opt_tolerance) {\n  if (this.size_.width != m.size_.width) {\n    return false;\n  }\n  if (this.size_.height != m.size_.height) {\n    return false;\n  }\n\n  var tolerance = opt_tolerance || 0;\n  for (var i = 0; i < this.size_.height; i++) {\n    for (var j = 0; j < this.size_.width; j++) {\n      if (!goog.math.nearlyEquals(\n              this.array_[i][j], m.array_[i][j], tolerance)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\n\n/**\n * Returns the determinant of this matrix.  The determinant of a matrix A is\n * often denoted as |A| and can only be applied to a square matrix.\n * @return {number} The determinant of this matrix.\n */\ngoog.math.Matrix.prototype.getDeterminant = function() {\n  if (!this.isSquare()) {\n    throw new Error('A determinant can only be take on a square matrix');\n  }\n\n  return this.getDeterminant_();\n};\n\n\n/**\n * Returns the inverse of this matrix if it exists or null if the matrix is\n * not invertible.\n * @return {goog.math.Matrix} A new matrix which is the inverse of this matrix.\n */\ngoog.math.Matrix.prototype.getInverse = function() {\n  if (!this.isSquare()) {\n    throw new Error('An inverse can only be taken on a square matrix.');\n  }\n  if (this.getSize().width == 1) {\n    var a = this.getValueAt(0, 0);\n    return a == 0 ? null : new goog.math.Matrix([[1 / Number(a)]]);\n  }\n  var identity = goog.math.Matrix.createIdentityMatrix(this.size_.height);\n  var mi = this.appendColumns(identity).getReducedRowEchelonForm();\n  var i = mi.getSubmatrixByCoordinates_(\n      0, 0, identity.size_.width - 1, identity.size_.height - 1);\n  if (!i.equals(identity)) {\n    return null;  // This matrix was not invertible\n  }\n  return mi.getSubmatrixByCoordinates_(0, identity.size_.width);\n};\n\n\n/**\n * Transforms this matrix into reduced row echelon form.\n * @return {!goog.math.Matrix} A new matrix reduced row echelon form.\n */\ngoog.math.Matrix.prototype.getReducedRowEchelonForm = function() {\n  var result = new goog.math.Matrix(this);\n  var col = 0;\n  // Each iteration puts one row in reduced row echelon form\n  for (var row = 0; row < result.size_.height; row++) {\n    if (col >= result.size_.width) {\n      return result;\n    }\n\n    // Scan each column starting from this row on down for a non-zero value\n    var i = row;\n    while (result.array_[i][col] == 0) {\n      i++;\n      if (i == result.size_.height) {\n        i = row;\n        col++;\n        if (col == result.size_.width) {\n          return result;\n        }\n      }\n    }\n\n    // Make the row we found the current row with a leading 1\n    this.swapRows_(i, row);\n    var divisor = result.array_[row][col];\n    for (var j = col; j < result.size_.width; j++) {\n      result.array_[row][j] = result.array_[row][j] / divisor;\n    }\n\n    // Subtract a multiple of this row from each other row\n    // so that all the other entries in this column are 0\n    for (i = 0; i < result.size_.height; i++) {\n      if (i != row) {\n        var multiple = result.array_[i][col];\n        for (var j = col; j < result.size_.width; j++) {\n          result.array_[i][j] -= multiple * result.array_[row][j];\n        }\n      }\n    }\n\n    // Move on to the next column\n    col++;\n  }\n  return result;\n};\n\n\n/**\n * @return {!goog.math.Size} The dimensions of the matrix.\n */\ngoog.math.Matrix.prototype.getSize = function() {\n  return this.size_;\n};\n\n\n/**\n * Return the transpose of this matrix.  For an m-by-n matrix, the transpose\n * is the n-by-m matrix which results from turning rows into columns and columns\n * into rows\n * @return {!goog.math.Matrix} A new matrix A^T.\n */\ngoog.math.Matrix.prototype.getTranspose = function() {\n  var m = new goog.math.Matrix(this.size_.width, this.size_.height);\n  goog.math.Matrix.forEach(\n      this, function(value, i, j) { m.array_[j][i] = value; });\n  return m;\n};\n\n\n/**\n * Retrieves the value of a particular coordinate in the matrix or null if the\n * requested coordinates are out of range.\n * @param {number} i The i index of the coordinate.\n * @param {number} j The j index of the coordinate.\n * @return {?number} The value at the specified coordinate.\n */\ngoog.math.Matrix.prototype.getValueAt = function(i, j) {\n  if (!this.isInBounds_(i, j)) {\n    return null;\n  }\n  return this.array_[i][j];\n};\n\n\n/**\n * @return {boolean} Whether the horizontal and vertical dimensions of this\n *     matrix are the same.\n */\ngoog.math.Matrix.prototype.isSquare = function() {\n  return this.size_.width == this.size_.height;\n};\n\n\n/**\n * Sets the value at a particular coordinate (if the coordinate is within the\n * bounds of the matrix).\n * @param {number} i The i index of the coordinate.\n * @param {number} j The j index of the coordinate.\n * @param {number} value The new value for the coordinate.\n */\ngoog.math.Matrix.prototype.setValueAt = function(i, j, value) {\n  if (!this.isInBounds_(i, j)) {\n    throw new Error(\n        'Index out of bounds when setting matrix value, (' + i + ',' + j +\n        ') in size (' + this.size_.height + ',' + this.size_.width + ')');\n  }\n  this.array_[i][j] = value;\n};\n\n\n/**\n * Performs matrix or scalar multiplication on a matrix and returns the\n * resultant matrix.\n *\n * Matrix multiplication is defined between two matrices only if the number of\n * columns of the first matrix is the same as the number of rows of the second\n * matrix. If A is an m-by-n matrix and B is an n-by-p matrix, then their\n * product AB is an m-by-p matrix\n *\n * Scalar multiplication returns a matrix of the same size as the original,\n * each value multiplied by the given value.\n *\n * @param {goog.math.Matrix|number} m Matrix/number to multiply the matrix by.\n * @return {!goog.math.Matrix} Resultant product.\n */\ngoog.math.Matrix.prototype.multiply = function(m) {\n  if (m instanceof goog.math.Matrix) {\n    if (this.size_.width != m.getSize().height) {\n      throw new Error(\n          'Invalid matrices for multiplication. Second matrix ' +\n          'should have the same number of rows as the first has columns.');\n    }\n    return this.matrixMultiply_(/** @type {!goog.math.Matrix} */ (m));\n  } else if (typeof m === 'number') {\n    return this.scalarMultiply_(/** @type {number} */ (m));\n  } else {\n    throw new Error(\n        'A matrix can only be multiplied by' +\n        ' a number or another matrix.');\n  }\n};\n\n\n/**\n * Returns a new matrix that is the difference of this and the provided matrix.\n * @param {goog.math.Matrix} m The matrix to subtract from this one.\n * @return {!goog.math.Matrix} Resultant difference.\n */\ngoog.math.Matrix.prototype.subtract = function(m) {\n  if (!goog.math.Size.equals(this.size_, m.getSize())) {\n    throw new Error(\n        'Matrix subtraction is only supported on arrays of equal size.');\n  }\n  return goog.math.Matrix.map(\n      this, function(val, i, j) { return val - m.array_[i][j]; });\n};\n\n\n/**\n * @return {!Array<!Array<number>>} A 2D internal array representing this\n *     matrix.  Not a clone.\n */\ngoog.math.Matrix.prototype.toArray = function() {\n  return this.array_;\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a string representation of the matrix.  e.g.\n   * <pre>\n   * [ 12  5  9  1 ]\n   * [  4 16  0 17 ]\n   * [ 12  5  1 23 ]\n   * </pre>\n   *\n   * @return {string} A string representation of this matrix.\n   * @override\n   */\n  goog.math.Matrix.prototype.toString = function() {\n    // Calculate correct padding for optimum display of matrix\n    var maxLen = 0;\n    goog.math.Matrix.forEach(this, function(val) {\n      var len = String(val).length;\n      if (len > maxLen) {\n        maxLen = len;\n      }\n    });\n\n    // Build the string\n    var sb = [];\n    goog.array.forEach(this.array_, function(row, x) {\n      sb.push('[ ');\n      goog.array.forEach(row, function(val, y) {\n        var strval = String(val);\n        sb.push(goog.string.repeat(' ', maxLen - strval.length) + strval + ' ');\n      });\n      sb.push(']\\n');\n    });\n\n    return sb.join('');\n  };\n}\n\n\n/**\n * Returns the signed minor.\n * @param {number} i The row index.\n * @param {number} j The column index.\n * @return {number} The cofactor C[i,j] of this matrix.\n * @private\n */\ngoog.math.Matrix.prototype.getCofactor_ = function(i, j) {\n  return (i + j % 2 == 0 ? 1 : -1) * this.getMinor_(i, j);\n};\n\n\n/**\n * Returns the determinant of this matrix.  The determinant of a matrix A is\n * often denoted as |A| and can only be applied to a square matrix.  Same as\n * public method but without validation.  Implemented using Laplace's formula.\n * @return {number} The determinant of this matrix.\n * @private\n */\ngoog.math.Matrix.prototype.getDeterminant_ = function() {\n  if (this.getSize().area() == 1) {\n    return this.array_[0][0];\n  }\n\n  // We might want to use matrix decomposition to improve running time\n  // For now we'll do a Laplace expansion along the first row\n  var determinant = 0;\n  for (var j = 0; j < this.size_.width; j++) {\n    determinant += (this.array_[0][j] * this.getCofactor_(0, j));\n  }\n  return determinant;\n};\n\n\n/**\n * Returns the determinant of the submatrix resulting from the deletion of row i\n * and column j.\n * @param {number} i The row to delete.\n * @param {number} j The column to delete.\n * @return {number} The first minor M[i,j] of this matrix.\n * @private\n */\ngoog.math.Matrix.prototype.getMinor_ = function(i, j) {\n  return this.getSubmatrixByDeletion_(i, j).getDeterminant_();\n};\n\n\n/**\n * Returns a submatrix contained within this matrix.\n * @param {number} i1 The upper row index.\n * @param {number} j1 The left column index.\n * @param {number=} opt_i2 The lower row index.\n * @param {number=} opt_j2 The right column index.\n * @return {!goog.math.Matrix} The submatrix contained within the given bounds.\n * @private\n */\ngoog.math.Matrix.prototype.getSubmatrixByCoordinates_ = function(\n    i1, j1, opt_i2, opt_j2) {\n  var i2 = opt_i2 ? opt_i2 : this.size_.height - 1;\n  var j2 = opt_j2 ? opt_j2 : this.size_.width - 1;\n  var result = new goog.math.Matrix(i2 - i1 + 1, j2 - j1 + 1);\n  goog.math.Matrix.forEach(result, function(value, i, j) {\n    result.array_[i][j] = this.array_[i1 + i][j1 + j];\n  }, this);\n  return result;\n};\n\n\n/**\n * Returns a new matrix equal to this one, but with row i and column j deleted.\n * @param {number} i The row index of the coordinate.\n * @param {number} j The column index of the coordinate.\n * @return {!goog.math.Matrix} The value at the specified coordinate.\n * @private\n */\ngoog.math.Matrix.prototype.getSubmatrixByDeletion_ = function(i, j) {\n  var m = new goog.math.Matrix(this.size_.width - 1, this.size_.height - 1);\n  goog.math.Matrix.forEach(m, function(value, x, y) {\n    m.setValueAt(x, y, this.array_[x >= i ? x + 1 : x][y >= j ? y + 1 : y]);\n  }, this);\n  return m;\n};\n\n\n/**\n * Returns whether the given coordinates are contained within the bounds of the\n * matrix.\n * @param {number} i The i index of the coordinate.\n * @param {number} j The j index of the coordinate.\n * @return {boolean} The value at the specified coordinate.\n * @private\n */\ngoog.math.Matrix.prototype.isInBounds_ = function(i, j) {\n  return i >= 0 && i < this.size_.height && j >= 0 && j < this.size_.width;\n};\n\n\n/**\n * Matrix multiplication is defined between two matrices only if the number of\n * columns of the first matrix is the same as the number of rows of the second\n * matrix. If A is an m-by-n matrix and B is an n-by-p matrix, then their\n * product AB is an m-by-p matrix\n *\n * @param {goog.math.Matrix} m Matrix to multiply the matrix by.\n * @return {!goog.math.Matrix} Resultant product.\n * @private\n */\ngoog.math.Matrix.prototype.matrixMultiply_ = function(m) {\n  var resultMatrix = new goog.math.Matrix(this.size_.height, m.getSize().width);\n  goog.math.Matrix.forEach(resultMatrix, function(val, x, y) {\n    var newVal = 0;\n    for (var i = 0; i < this.size_.width; i++) {\n      newVal += goog.asserts.assertNumber(this.getValueAt(x, i)) *\n          goog.asserts.assertNumber(m.getValueAt(i, y));\n    }\n    resultMatrix.setValueAt(x, y, newVal);\n  }, this);\n  return resultMatrix;\n};\n\n\n/**\n * Scalar multiplication returns a matrix of the same size as the original,\n * each value multiplied by the given value.\n *\n * @param {number} m number to multiply the matrix by.\n * @return {!goog.math.Matrix} Resultant product.\n * @private\n */\ngoog.math.Matrix.prototype.scalarMultiply_ = function(m) {\n  return goog.math.Matrix.map(this, function(val, x, y) { return val * m; });\n};\n\n\n/**\n * Swaps two rows.\n * @param {number} i1 The index of the first row to swap.\n * @param {number} i2 The index of the second row to swap.\n * @private\n */\ngoog.math.Matrix.prototype.swapRows_ = function(i1, i2) {\n  var tmp = this.array_[i1];\n  this.array_[i1] = this.array_[i2];\n  this.array_[i2] = tmp;\n};\n"],
"names":["goog","provide","require","math","Matrix","goog.math.Matrix","m","opt_n","array_","toArray","isArrayLike","isValidArray","array","clone","Size","createZeroPaddedArray_","height","width","Error","size_","length","createIdentityMatrix","goog.math.Matrix.createIdentityMatrix","n","rv","i","j","forEach","goog.math.Matrix.forEach","matrix","fn","opt_obj","getSize","call","goog.math.Matrix.isValidArray","arr","len","map","goog.math.Matrix.map","value","goog.math.Matrix.createZeroPaddedArray_","prototype","add","goog.math.Matrix.prototype.add","equals","val","appendColumns","goog.math.Matrix.prototype.appendColumns","result","appendRows","goog.math.Matrix.prototype.appendRows","goog.math.Matrix.prototype.equals","opt_tolerance","tolerance","nearlyEquals","getDeterminant","goog.math.Matrix.prototype.getDeterminant","isSquare","getDeterminant_","getInverse","goog.math.Matrix.prototype.getInverse","a","getValueAt","Number","identity","mi","getReducedRowEchelonForm","getSubmatrixByCoordinates_","goog.math.Matrix.prototype.getReducedRowEchelonForm","col","row","swapRows_","divisor","multiple","goog.math.Matrix.prototype.getSize","getTranspose","goog.math.Matrix.prototype.getTranspose","goog.math.Matrix.prototype.getValueAt","isInBounds_","goog.math.Matrix.prototype.isSquare","setValueAt","goog.math.Matrix.prototype.setValueAt","multiply","goog.math.Matrix.prototype.multiply","matrixMultiply_","scalarMultiply_","subtract","goog.math.Matrix.prototype.subtract","goog.math.Matrix.prototype.toArray","DEBUG","toString","goog.math.Matrix.prototype.toString","maxLen","String","sb","x","push","y","strval","string","repeat","join","getCofactor_","goog.math.Matrix.prototype.getCofactor_","getMinor_","goog.math.Matrix.prototype.getDeterminant_","area","determinant","goog.math.Matrix.prototype.getMinor_","getSubmatrixByDeletion_","goog.math.Matrix.prototype.getSubmatrixByCoordinates_","i1","j1","opt_i2","opt_j2","i2","j2","goog.math.Matrix.prototype.getSubmatrixByDeletion_","goog.math.Matrix.prototype.isInBounds_","goog.math.Matrix.prototype.matrixMultiply_","resultMatrix","newVal","asserts","assertNumber","goog.math.Matrix.prototype.scalarMultiply_","goog.math.Matrix.prototype.swapRows_","tmp"]
}
