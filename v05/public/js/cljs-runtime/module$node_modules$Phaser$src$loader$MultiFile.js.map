{
"version":3,
"file":"module$node_modules$Phaser$src$loader$MultiFile.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,gDAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0BxGC,MAAAA,CAAY,KAnBJH,OAAAI,CAAQ,4CAARA,CAmBI,EAAU,CAEtBC,WAEAF,QAAmB,CAACG,MAAD,CAASC,IAAT,CAAeC,GAAf,CAAoBC,KAApB,CACnB,CAQI,IAAAH,OAAA,CAAcA,MASd,KAAAC,KAAA,CAAYA,IASZ,KAAAC,IAAA,CAAWA,GASX,KAAAC,MAAA,CAAaA,KAUb,KAAAC,SAAA,CAAgB,CAAA,CAUhB,KAAAC,QAAA,CAAeF,KAAAG,OAUf,KAAAC,OAAA,CAAc,CASd,KAAAC,OAAA,CAAc,EAGd,KAASC,MAAT,CAAa,CAAb,CAAgBA,MAAhB,CAAoBN,KAAAG,OAApB,CAAkCG,MAAA,EAAlC,CAEIN,KAAA,CAAMM,MAAN,CAAAC,UAAA,CAAqB,IA/E7B,CALsB,CAgGtBC,iBAAkBA,QAAS,EAC3B,CACI,MAAyB,EAAzB,GAAQ,IAAAN,QAAR,EAA8C,CAA9C,GAA8B,IAAAE,OAA9B,EAAmD,CAAC,IAAAH,SADxD,CAjGsB;AA+GtBQ,eAAgBA,QAAS,CAACC,IAAD,CACzB,CACI,IAAAV,MAAAW,KAAA,CAAgBD,IAAhB,CAEAA,KAAAH,UAAA,CAAiB,IAEjB,KAAAL,QAAA,EAEA,KAAAD,SAAA,CAAgB,CAAA,CAEhB,OAAO,KATX,CAhHsB,CAoItBW,eAAgBA,QAAS,CAACF,IAAD,CACzB,CAGkB,EAAd,GAFY,IAAAV,MAAAa,QAAAC,CAAmBJ,IAAnBI,CAEZ,EAEI,IAAAZ,QAAA,EALR,CArIsB,CAsJtBa,aAAcA,QAAS,CAACL,IAAD,CACvB,CAGkB,EAAd,GAFY,IAAAV,MAAAa,QAAAC,CAAmBJ,IAAnBI,CAEZ,EAEI,IAAAV,OAAA,EALR,CAvJsB,CAAV,CAkKhBZ,OAAAC,QAAA,CAAiBC,MA5L2F;",
"sources":["node_modules/Phaser/src/loader/MultiFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$MultiFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A MultiFile is a special kind of parent that contains two, or more, Files as children and looks after\r\n * the loading and processing of them all. It is commonly extended and used as a base class for file types such as AtlasJSON or BitmapFont.\r\n * \r\n * You shouldn't create an instance of a MultiFile directly, but should extend it with your own class, setting a custom type and processing methods.\r\n *\r\n * @class MultiFile\r\n * @memberOf Phaser.Loader\r\n * @constructor\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - The Loader that is going to load this File.\r\n * @param {string} type - The file type string for sorting within the Loader.\r\n * @param {string} key - The key of the file within the loader.\r\n * @param {Phaser.Loader.File[]} files - An array of Files that make-up this MultiFile.\r\n */\r\nvar MultiFile = new Class({\r\n\r\n    initialize:\r\n\r\n    function MultiFile (loader, type, key, files)\r\n    {\r\n        /**\r\n         * A reference to the Loader that is going to load this file.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#loader\r\n         * @type {Phaser.Loader.LoaderPlugin}\r\n         * @since 3.7.0\r\n         */\r\n        this.loader = loader;\r\n\r\n        /**\r\n         * The file type string for sorting within the Loader.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#type\r\n         * @type {string}\r\n         * @since 3.7.0\r\n         */\r\n        this.type = type;\r\n\r\n        /**\r\n         * Unique cache key (unique within its file type)\r\n         *\r\n         * @name Phaser.Loader.MultiFile#key\r\n         * @type {string}\r\n         * @since 3.7.0\r\n         */\r\n        this.key = key;\r\n\r\n        /**\r\n         * Array of files that make up this MultiFile.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#files\r\n         * @type {Phaser.Loader.File[]}\r\n         * @since 3.7.0\r\n         */\r\n        this.files = files;\r\n\r\n        /**\r\n         * The completion status of this MultiFile.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#complete\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.7.0\r\n         */\r\n        this.complete = false;\r\n\r\n        /**\r\n         * The number of files to load.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#pending\r\n         * @type {integer}\r\n         * @since 3.7.0\r\n         */\r\n\r\n        this.pending = files.length;\r\n\r\n        /**\r\n         * The number of files that failed to load.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#failed\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.7.0\r\n         */\r\n        this.failed = 0;\r\n\r\n        /**\r\n         * A storage container for transient data that the loading files need.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#config\r\n         * @type {any}\r\n         * @since 3.7.0\r\n         */\r\n        this.config = {};\r\n\r\n        //  Link the files\r\n        for (var i = 0; i < files.length; i++)\r\n        {\r\n            files[i].multiFile = this;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Checks if this MultiFile is ready to process its children or not.\r\n     *\r\n     * @method Phaser.Loader.MultiFile#isReadyToProcess\r\n     * @since 3.7.0\r\n     *\r\n     * @return {boolean} `true` if all children of this MultiFile have loaded, otherwise `false`.\r\n     */\r\n    isReadyToProcess: function ()\r\n    {\r\n        return (this.pending === 0 && this.failed === 0 && !this.complete);\r\n    },\r\n\r\n    /**\r\n     * Adds another child to this MultiFile, increases the pending count and resets the completion status.\r\n     *\r\n     * @method Phaser.Loader.MultiFile#addToMultiFile\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} files - The File to add to this MultiFile.\r\n     *\r\n     * @return {Phaser.Loader.MultiFile} This MultiFile instance.\r\n     */\r\n    addToMultiFile: function (file)\r\n    {\r\n        this.files.push(file);\r\n\r\n        file.multiFile = this;\r\n\r\n        this.pending++;\r\n\r\n        this.complete = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Called by each File when it finishes loading.\r\n     *\r\n     * @method Phaser.Loader.MultiFile#onFileComplete\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The File that has completed processing.\r\n     */\r\n    onFileComplete: function (file)\r\n    {\r\n        var index = this.files.indexOf(file);\r\n\r\n        if (index !== -1)\r\n        {\r\n            this.pending--;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by each File that fails to load.\r\n     *\r\n     * @method Phaser.Loader.MultiFile#onFileFailed\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The File that has failed to load.\r\n     */\r\n    onFileFailed: function (file)\r\n    {\r\n        var index = this.files.indexOf(file);\r\n\r\n        if (index !== -1)\r\n        {\r\n            this.failed++;\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = MultiFile;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","MultiFile","Class","initialize","loader","type","key","files","complete","pending","length","failed","config","i","multiFile","isReadyToProcess","addToMultiFile","file","push","onFileComplete","indexOf","index","onFileFailed"]
}
