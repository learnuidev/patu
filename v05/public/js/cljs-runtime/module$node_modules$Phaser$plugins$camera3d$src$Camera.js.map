{
"version":3,
"file":"module$node_modules$Phaser$plugins$camera3d$src$Camera.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/Phaser/plugins/camera3d/src/Camera.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$plugins$camera3d$src$Camera\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../src/utils/Class');\r\nvar Matrix4 = require('../../../src/math/Matrix4');\r\nvar RandomXYZ = require('../../../src/math/RandomXYZ');\r\nvar RandomXYZW = require('../../../src/math/RandomXYZW');\r\nvar RotateVec3 = require('../../../src/math/RotateVec3');\r\nvar Set = require('../../../src/structs/Set');\r\nvar Sprite3D = require('./sprite3d/Sprite3D');\r\nvar Vector2 = require('../../../src/math/Vector2');\r\nvar Vector3 = require('../../../src/math/Vector3');\r\nvar Vector4 = require('../../../src/math/Vector4');\r\n\r\n//  Local cache vars\r\nvar tmpVec3 = new Vector3();\r\nvar tmpVec4 = new Vector4();\r\nvar dirvec = new Vector3();\r\nvar rightvec = new Vector3();\r\nvar billboardMatrix = new Matrix4();\r\n\r\n//  @author attribute https://github.com/mattdesl/cam3d/wiki\r\n\r\n/**\r\n * @typedef {object} RayDef\r\n *\r\n * @property {Phaser.Math.Vector3} origin - [description]\r\n * @property {Phaser.Math.Vector3} direction - [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\r\nvar Camera = new Class({\r\n\r\n    initialize:\r\n\r\n    function Camera (scene)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#displayList\r\n         * @type {Phaser.GameObjects.DisplayList}\r\n         * @since 3.0.0\r\n         */\r\n        this.displayList = scene.sys.displayList;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#updateList\r\n         * @type {Phaser.GameObjects.UpdateList}\r\n         * @since 3.0.0\r\n         */\r\n        this.updateList = scene.sys.updateList;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#name\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.name = '';\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#direction\r\n         * @type {Phaser.Math.Vector3}\r\n         * @since 3.0.0\r\n         */\r\n        this.direction = new Vector3(0, 0, -1);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#up\r\n         * @type {Phaser.Math.Vector3}\r\n         * @since 3.0.0\r\n         */\r\n        this.up = new Vector3(0, 1, 0);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#position\r\n         * @type {Phaser.Math.Vector3}\r\n         * @since 3.0.0\r\n         */\r\n        this.position = new Vector3();\r\n\r\n        //  The mapping from 3D size units to pixels.\r\n        //  In the default case 1 3D unit = 128 pixels. So a sprite that is\r\n        //  256 x 128 px in size will be 2 x 1 units.\r\n        //  Change to whatever best fits your game assets.\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#pixelScale\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.pixelScale = 128;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#projection\r\n         * @type {Phaser.Math.Matrix4}\r\n         * @since 3.0.0\r\n         */\r\n        this.projection = new Matrix4();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#view\r\n         * @type {Phaser.Math.Matrix4}\r\n         * @since 3.0.0\r\n         */\r\n        this.view = new Matrix4();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#combined\r\n         * @type {Phaser.Math.Matrix4}\r\n         * @since 3.0.0\r\n         */\r\n        this.combined = new Matrix4();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#invProjectionView\r\n         * @type {Phaser.Math.Matrix4}\r\n         * @since 3.0.0\r\n         */\r\n        this.invProjectionView = new Matrix4();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#near\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.near = 1;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#far\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.far = 100;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#ray\r\n         * @type {RayDef}\r\n         * @since 3.0.0\r\n         */\r\n        this.ray = {\r\n            origin: new Vector3(),\r\n            direction: new Vector3()\r\n        };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#viewportWidth\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportWidth = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#viewportHeight\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportHeight = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#billboardMatrixDirty\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.billboardMatrixDirty = true;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#children\r\n         * @type {Phaser.Structs.Set.<Phaser.GameObjects.GameObject>}\r\n         * @since 3.0.0\r\n         */\r\n        this.children = new Set();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} z - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setPosition: function (x, y, z)\r\n    {\r\n        this.position.set(x, y, z);\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setScene\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Scene} scene - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setScene: function (scene)\r\n    {\r\n        this.scene = scene;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setPixelScale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setPixelScale: function (value)\r\n    {\r\n        this.pixelScale = value;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Sprite3D} sprite3D - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D} [description]\r\n     */\r\n    add: function (sprite3D)\r\n    {\r\n        this.children.set(sprite3D);\r\n\r\n        this.displayList.add(sprite3D.gameObject);\r\n        this.updateList.add(sprite3D.gameObject);\r\n\r\n        this.updateChildren();\r\n\r\n        return sprite3D;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    remove: function (child)\r\n    {\r\n        this.displayList.remove(child.gameObject);\r\n        this.updateList.remove(child.gameObject);\r\n\r\n        this.children.delete(child);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#clear\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    clear: function ()\r\n    {\r\n        var children = this.getChildren();\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            this.remove(children[i]);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#getChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @return {array} [description]\r\n     */\r\n    getChildren: function ()\r\n    {\r\n        return this.children.entries;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} z - [description]\r\n     * @param {string} key - [description]\r\n     * @param {(string|number)} frame - [description]\r\n     * @param {boolean} [visible=true] - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D} [description]\r\n     */\r\n    create: function (x, y, z, key, frame, visible)\r\n    {\r\n        if (visible === undefined) { visible = true; }\r\n\r\n        var child = new Sprite3D(this.scene, x, y, z, key, frame);\r\n\r\n        this.displayList.add(child.gameObject);\r\n        this.updateList.add(child.gameObject);\r\n\r\n        child.visible = visible;\r\n\r\n        this.children.set(child);\r\n\r\n        this.updateChildren();\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#createMultiple\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} quantity - [description]\r\n     * @param {string} key - [description]\r\n     * @param {(string|number)} frame - [description]\r\n     * @param {boolean} [visible=true] - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D[]} [description]\r\n     */\r\n    createMultiple: function (quantity, key, frame, visible)\r\n    {\r\n        if (visible === undefined) { visible = true; }\r\n\r\n        var output = [];\r\n\r\n        for (var i = 0; i < quantity; i++)\r\n        {\r\n            var child = new Sprite3D(this.scene, 0, 0, 0, key, frame);\r\n\r\n            this.displayList.add(child.gameObject);\r\n            this.updateList.add(child.gameObject);\r\n\r\n            child.visible = visible;\r\n\r\n            this.children.set(child);\r\n\r\n            output.push(child);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    //  Create a bunch of Sprite3D objects in a rectangle\r\n    //  size and spacing are Vec3s (or if integers are converted to vec3s)\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#createRect\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|{x:number,y:number})} size - [description]\r\n     * @param {(number|{x:number,y:number,z:number})} spacing - [description]\r\n     * @param {string} key - [description]\r\n     * @param {(string|number)} [frame] - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D[]} [description]\r\n     */\r\n    createRect: function (size, spacing, key, frame)\r\n    {\r\n        if (typeof size === 'number') { size = { x: size, y: size, z: size }; }\r\n        if (typeof spacing === 'number') { spacing = { x: spacing, y: spacing, z: spacing }; }\r\n\r\n        var quantity = size.x * size.y * size.z;\r\n\r\n        var sprites = this.createMultiple(quantity, key, frame);\r\n\r\n        var i = 0;\r\n\r\n        for (var z = 0.5 - (size.z / 2); z < (size.z / 2); z++)\r\n        {\r\n            for (var y = 0.5 - (size.y / 2); y < (size.y / 2); y++)\r\n            {\r\n                for (var x = 0.5 - (size.x / 2); x < (size.x / 2); x++)\r\n                {\r\n                    var bx = (x * spacing.x);\r\n                    var by = (y * spacing.y);\r\n                    var bz = (z * spacing.z);\r\n\r\n                    sprites[i].position.set(bx, by, bz);\r\n\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.update();\r\n\r\n        return sprites;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#randomSphere\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [radius=1] - [description]\r\n     * @param {Phaser.GameObjects.Sprite3D[]} [sprites] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    randomSphere: function (radius, sprites)\r\n    {\r\n        if (sprites === undefined) { sprites = this.getChildren(); }\r\n\r\n        for (var i = 0; i < sprites.length; i++)\r\n        {\r\n            RandomXYZ(sprites[i].position, radius);\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#randomCube\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [scale=1] - [description]\r\n     * @param {Phaser.GameObjects.Sprite3D[]} [sprites] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    randomCube: function (scale, sprites)\r\n    {\r\n        if (sprites === undefined) { sprites = this.getChildren(); }\r\n\r\n        for (var i = 0; i < sprites.length; i++)\r\n        {\r\n            RandomXYZW(sprites[i].position, scale);\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#translateChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} vec3 - [description]\r\n     * @param {Phaser.GameObjects.Sprite3D[]} sprites - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    translateChildren: function (vec3, sprites)\r\n    {\r\n        if (sprites === undefined) { sprites = this.getChildren(); }\r\n\r\n        for (var i = 0; i < sprites.length; i++)\r\n        {\r\n            sprites[i].position.add(vec3);\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#transformChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat4 - [description]\r\n     * @param {Phaser.GameObjects.Sprite3D[]} sprites - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    transformChildren: function (mat4, sprites)\r\n    {\r\n        if (sprites === undefined) { sprites = this.getChildren(); }\r\n\r\n        for (var i = 0; i < sprites.length; i++)\r\n        {\r\n            sprites[i].position.transformMat4(mat4);\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * Sets the width and height of the viewport. Does not update any matrices.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setViewport\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setViewport: function (width, height)\r\n    {\r\n        this.viewportWidth = width;\r\n        this.viewportHeight = height;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * Translates this camera by a specified Vector3 object\r\n     * or x, y, z parameters. Any undefined x y z values will\r\n     * default to zero, leaving that component unaffected.\r\n     * If you wish to set the camera position directly call setPosition instead.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#translate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} x - [description]\r\n     * @param {number} [y] - [description]\r\n     * @param {number} [z] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    translate: function (x, y, z)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            this.position.x += x.x || 0;\r\n            this.position.y += x.y || 0;\r\n            this.position.z += x.z || 0;\r\n        }\r\n        else\r\n        {\r\n            this.position.x += x || 0;\r\n            this.position.y += y || 0;\r\n            this.position.z += z || 0;\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#lookAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} x - [description]\r\n     * @param {number} [y] - [description]\r\n     * @param {number} [z] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    lookAt: function (x, y, z)\r\n    {\r\n        var dir = this.direction;\r\n        var up = this.up;\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            dir.copy(x);\r\n        }\r\n        else\r\n        {\r\n            dir.set(x, y, z);\r\n        }\r\n\r\n        dir.subtract(this.position).normalize();\r\n\r\n        //  Calculate right vector\r\n        tmpVec3.copy(dir).cross(up).normalize();\r\n\r\n        //  Calculate up vector\r\n        up.copy(tmpVec3).cross(dir).normalize();\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#rotate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radians - [description]\r\n     * @param {Phaser.Math.Vector3} axis - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    rotate: function (radians, axis)\r\n    {\r\n        RotateVec3(this.direction, axis, radians);\r\n        RotateVec3(this.up, axis, radians);\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#rotateAround\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} point - [description]\r\n     * @param {number} radians - [description]\r\n     * @param {Phaser.Math.Vector3} axis - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    rotateAround: function (point, radians, axis)\r\n    {\r\n        tmpVec3.copy(point).subtract(this.position);\r\n\r\n        this.translate(tmpVec3);\r\n        this.rotate(radians, axis);\r\n        this.translate(tmpVec3.negate());\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#project\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} vec - [description]\r\n     * @param {Phaser.Math.Vector4} out - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector4} [description]\r\n     */\r\n    project: function (vec, out)\r\n    {\r\n        if (out === undefined) { out = new Vector4(); }\r\n\r\n        //  TODO: support viewport XY\r\n        var viewportWidth = this.viewportWidth;\r\n        var viewportHeight = this.viewportHeight;\r\n        var n = Camera.NEAR_RANGE;\r\n        var f = Camera.FAR_RANGE;\r\n\r\n        //  For useful Z and W values we should do the usual steps: clip space -> NDC -> window coords\r\n\r\n        //  Implicit 1.0 for w component\r\n        tmpVec4.set(vec.x, vec.y, vec.z, 1.0);\r\n\r\n        //  Transform into clip space\r\n        tmpVec4.transformMat4(this.combined);\r\n\r\n        //  Avoid divide by zero when 0x0x0 camera projects to a 0x0x0 vec3\r\n        if (tmpVec4.w === 0)\r\n        {\r\n            tmpVec4.w = 1;\r\n        }\r\n\r\n        //  Now into NDC\r\n        tmpVec4.x = tmpVec4.x / tmpVec4.w;\r\n        tmpVec4.y = tmpVec4.y / tmpVec4.w;\r\n        tmpVec4.z = tmpVec4.z / tmpVec4.w;\r\n\r\n        //  And finally into window coordinates\r\n        out.x = viewportWidth / 2 * tmpVec4.x + (0 + viewportWidth / 2);\r\n        out.y = viewportHeight / 2 * tmpVec4.y + (0 + viewportHeight / 2);\r\n        out.z = (f - n) / 2 * tmpVec4.z + (f + n) / 2;\r\n\r\n        //  If the out vector has a fourth component, we also store (1/clip.w), same idea as gl_FragCoord.w\r\n        if (out.w === 0 || out.w)\r\n        {\r\n            out.w = 1 / tmpVec4.w;\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#unproject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} vec - [description]\r\n     * @param {Phaser.Math.Vector3} out - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector3} [description]\r\n     */\r\n    unproject: function (vec, out)\r\n    {\r\n        if (out === undefined) { out = new Vector3(); }\r\n\r\n        var viewport = tmpVec4.set(0, 0, this.viewportWidth, this.viewportHeight);\r\n\r\n        return out.copy(vec).unproject(viewport, this.invProjectionView);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#getPickRay\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} [y] - [description]\r\n     *\r\n     * @return {RayDef} [description]\r\n     */\r\n    getPickRay: function (x, y)\r\n    {\r\n        var origin = this.ray.origin.set(x, y, 0);\r\n        var direction = this.ray.direction.set(x, y, 1);\r\n        var viewport = tmpVec4.set(0, 0, this.viewportWidth, this.viewportHeight);\r\n        var mtx = this.invProjectionView;\r\n\r\n        origin.unproject(viewport, mtx);\r\n\r\n        direction.unproject(viewport, mtx);\r\n\r\n        direction.subtract(origin).normalize();\r\n\r\n        return this.ray;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#updateChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    updateChildren: function ()\r\n    {\r\n        var children = this.children.entries;\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            children[i].project(this);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    //  Overriden by subclasses\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#update\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    update: function ()\r\n    {\r\n        return this.updateChildren();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#updateBillboardMatrix\r\n     * @since 3.0.0\r\n     */\r\n    updateBillboardMatrix: function ()\r\n    {\r\n        var dir = dirvec.set(this.direction).negate();\r\n\r\n        // Better view-aligned billboards might use this:\r\n        // var dir = tmp.set(camera.position).subtract(p).normalize();\r\n\r\n        var right = rightvec.set(this.up).cross(dir).normalize();\r\n        var up = tmpVec3.set(dir).cross(right).normalize();\r\n\r\n        var out = billboardMatrix.val;\r\n\r\n        out[0] = right.x;\r\n        out[1] = right.y;\r\n        out[2] = right.z;\r\n        out[3] = 0;\r\n\r\n        out[4] = up.x;\r\n        out[5] = up.y;\r\n        out[6] = up.z;\r\n        out[7] = 0;\r\n\r\n        out[8] = dir.x;\r\n        out[9] = dir.y;\r\n        out[10] = dir.z;\r\n        out[11] = 0;\r\n\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n\r\n        this.billboardMatrixDirty = false;\r\n    },\r\n\r\n    /**\r\n     * This is a utility function for canvas 3D rendering,\r\n     * which determines the \"point size\" of a camera-facing\r\n     * sprite billboard given its 3D world position\r\n     * (origin at center of sprite) and its world width\r\n     * and height in x/y.\r\n     *\r\n     * We place into the output Vector2 the scaled width\r\n     * and height. If no `out` is specified, a new Vector2\r\n     * will be created for convenience (this should be avoided\r\n     * in tight loops).\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#getPointSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} vec - The position of the 3D Sprite.\r\n     * @param {Phaser.Math.Vector2} size - The x and y dimensions.\r\n     * @param {Phaser.Math.Vector2} out - The result, scaled x and y dimensions.\r\n     *\r\n     * @return {Phaser.Math.Vector2} [description]\r\n     */\r\n    getPointSize: function (vec, size, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        // TODO: optimize this with a simple distance calculation:\r\n        // https://developer.valvesoftware.com/wiki/Field_of_View\r\n\r\n        if (this.billboardMatrixDirty)\r\n        {\r\n            this.updateBillboardMatrix();\r\n        }\r\n\r\n        var tmp = tmpVec3;\r\n\r\n        var dx = (size.x / this.pixelScale) / 2;\r\n        var dy = (size.y / this.pixelScale) / 2;\r\n\r\n        tmp.set(-dx, -dy, 0).transformMat4(billboardMatrix).add(vec);\r\n\r\n        this.project(tmp, tmp);\r\n\r\n        var tlx = tmp.x;\r\n        var tly = tmp.y;\r\n\r\n        tmp.set(dx, dy, 0).transformMat4(billboardMatrix).add(vec);\r\n\r\n        this.project(tmp, tmp);\r\n\r\n        var brx = tmp.x;\r\n        var bry = tmp.y;\r\n\r\n        // var w = Math.abs(brx - tlx);\r\n        // var h = Math.abs(bry - tly);\r\n\r\n        //  Allow the projection to get negative ...\r\n        var w = brx - tlx;\r\n        var h = bry - tly;\r\n\r\n        return out.set(w, h);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.children.clear();\r\n\r\n        this.scene = undefined;\r\n        this.children = undefined;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setX: function (value)\r\n    {\r\n        this.position.x = value;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setY: function (value)\r\n    {\r\n        this.position.y = value;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setZ\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setZ: function (value)\r\n    {\r\n        this.position.z = value;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.Camera#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n        get: function ()\r\n        {\r\n            return this.position.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.x = value;\r\n            this.update();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.Camera#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n        get: function ()\r\n        {\r\n            return this.position.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.y = value;\r\n            this.update();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.Camera#z\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    z: {\r\n        get: function ()\r\n        {\r\n            return this.position.z;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.z = value;\r\n            this.update();\r\n        }\r\n    }\r\n\r\n});\r\n\r\nCamera.FAR_RANGE = 1.0;\r\nCamera.NEAR_RANGE = 0.0;\r\n\r\nmodule.exports = Camera;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Matrix4","RandomXYZ","RandomXYZW","RotateVec3","Set","Sprite3D","Vector2","Vector3","Vector4","tmpVec3","tmpVec4","dirvec","rightvec","billboardMatrix","Camera","initialize","scene","displayList","sys","updateList","name","direction","up","position","pixelScale","projection","view","combined","invProjectionView","near","far","ray","origin","viewportHeight","viewportWidth","billboardMatrixDirty","children","setPosition","x","y","z","set","update","setScene","setPixelScale","value","add","sprite3D","gameObject","updateChildren","remove","child","delete","clear","getChildren","i","length","entries","create","key","frame","visible","undefined","createMultiple","quantity","output","push","createRect","size","spacing","sprites","randomSphere","radius","randomCube","scale","translateChildren","vec3","transformChildren","mat4","transformMat4","setViewport","width","height","translate","lookAt","dir","copy","subtract","normalize","cross","rotate","radians","axis","rotateAround","point","negate","project","vec","out","n","NEAR_RANGE","f","FAR_RANGE","w","unproject","viewport","getPickRay","mtx","updateBillboardMatrix","right","val","getPointSize","dx","dy","tlx","tly","destroy","setX","setY","setZ","get"]
}
