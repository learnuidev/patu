{
"version":3,
"file":"module$node_modules$Phaser$src$actions$GridAlign.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,iDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO7G,IAAIC,QAAUH,OAAA,CAAQ,0DAAR,CAAd,CACII,MAAQJ,OAAA,CAAQ,oDAAR,CADZ,CAEIK,aAAeL,OAAA,CAAQ,0DAAR,CACfM,OAAAA,CAAON,OAAA,CAAQ,2CAAR,CAGX,KAAIO,SAAW,KAFJP,OAAAQ,CAAQ,sDAARA,CAEI,EAAS,CAAEC,IAAK,CAAEC,eAAgBJ,MAAlB;AAAwBK,OAAQ,CAAEC,KAAMN,MAAR,CAAhC,CAAP,CAAT,CAAoE,CAApE,CAAuE,CAAvE,CAA0E,CAA1E,CAA6E,CAA7E,CAyGfL,OAAAC,QAAA,CA3EgBW,QAAS,CAACC,KAAD,CAAQC,OAAR,CACzB,CACoBC,IAAAA,EAAhB,GAAID,OAAJ,GAA6BA,OAA7B,CAAuC,EAAvC,CAEA,KAAIE,MAAQZ,YAAA,CAAaU,OAAb,CAAsB,OAAtB,CAA+B,EAA/B,CAAZ,CACIG,OAASb,YAAA,CAAaU,OAAb,CAAsB,QAAtB,CAAgC,EAAhC,CADb,CAEII,UAAYd,YAAA,CAAaU,OAAb,CAAsB,WAAtB,CAAmC,CAAnC,CAFhB,CAGIK,WAAaf,YAAA,CAAaU,OAAb,CAAsB,YAAtB,CAAoCI,SAApC,CAHjB,CAIIE,SAAWhB,YAAA,CAAaU,OAAb,CAAsB,UAAtB,CAAkCX,KAAAkB,SAAlC,CAJf,CAKIC,EAAIlB,YAAA,CAAaU,OAAb,CAAsB,GAAtB,CAA2B,CAA3B,CACJS,QAAAA,CAAInB,YAAA,CAAaU,OAAb,CAAsB,GAAtB,CAA2B,CAA3B,CAER,KAAIU,GAAK,CAAT,CACIC,GAAK,CADT,CAEIC,EAAKV,KAALU,CAAaR,SAFjB,CAGIS,EAAKV,MAALU,CAAcR,UAElBb,SAAAsB,YAAA,CAAqBN,CAArB,CAAwBC,OAAxB,CACAjB,SAAAuB,QAAA,CAAiBX,SAAjB;AAA4BC,UAA5B,CAEA,KAAK,IAAIW,EAAI,CAAb,CAAgBA,CAAhB,CAAoBjB,KAAAkB,OAApB,CAAkCD,CAAA,EAAlC,CAII,GAFA5B,OAAA,CAAQW,KAAA,CAAMiB,CAAN,CAAR,CAAkBxB,QAAlB,CAA4Bc,QAA5B,CAEI,CAAU,EAAV,GAAAJ,KAAJ,CAGIS,EAGA,EAHMN,UAGN,CAFAb,QAAAiB,EAEA,EAFcJ,UAEd,CAAIM,EAAJ,GAAWE,CAAX,GAEIF,EAEA,CAFK,CAEL,CADAnB,QAAAgB,EACA,EADcJ,SACd,CAAAZ,QAAAiB,EAAA,CAAaA,OAJjB,CANJ,KAaK,IAAe,EAAf,GAAIN,MAAJ,CAGDO,EAGA,EAHMN,SAGN,CAFAZ,QAAAgB,EAEA,EAFcJ,SAEd,CAAIM,EAAJ,GAAWE,CAAX,GAEIF,EAEA,CAFK,CAEL,CADAlB,QAAAgB,EACA,CADaA,CACb,CAAAhB,QAAAiB,EAAA,EAAcJ,UAJlB,CANC,KAmBD,IAHAK,EAGI,EAHEN,SAGF,CAFJZ,QAAAgB,EAEI,EAFUJ,SAEV,CAAAM,EAAA,GAAOE,CAAP,GAEAF,EAKI,CALC,CAKD,CAJJC,EAII,EAJEN,UAIF,CAHJb,QAAAgB,EAGI,CAHSA,CAGT,CAFJhB,QAAAiB,EAEI,EAFUJ,UAEV,CAAAM,EAAA,GAAOE,CAPX,CAAJ,CAUQ,KAMhB,OAAOd,MAvEX,CA5C6G;",
"sources":["node_modules/Phaser/src/actions/GridAlign.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$actions$GridAlign\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar AlignIn = require('../display/align/in/QuickSet');\r\nvar CONST = require('../display/align/const');\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\nvar NOOP = require('../utils/NOOP');\r\nvar Zone = require('../gameobjects/zone/Zone');\r\n\r\nvar tempZone = new Zone({ sys: { queueDepthSort: NOOP, events: { once: NOOP } } }, 0, 0, 1, 1);\r\n\r\n/**\r\n * @typedef {object} GridAlignConfig\r\n *\r\n * @property {integer} [width=-1] - The width of the grid in items (not pixels). -1 means lay all items out horizontally, regardless of quantity.\r\n *                                  If both this value and height are set to -1 then this value overrides it and the `height` value is ignored.\r\n * @property {integer} [height=-1] - The height of the grid in items (not pixels). -1 means lay all items out vertically, regardless of quantity.\r\n *                                   If both this value and `width` are set to -1 then `width` overrides it and this value is ignored.\r\n * @property {integer} [cellWidth=1] - The width of the cell, in pixels, in which the item is positioned.\r\n * @property {integer} [cellHeight=1] - The height of the cell, in pixels, in which the item is positioned.\r\n * @property {integer} [position=0] - The alignment position. One of the Phaser.Display.Align consts such as `TOP_LEFT` or `RIGHT_CENTER`.\r\n * @property {number} [x=0] - Optionally place the top-left of the final grid at this coordinate.\r\n * @property {number} [y=0] - Optionally place the top-left of the final grid at this coordinate.\r\n */\r\n\r\n/**\r\n * Takes an array of Game Objects, or any objects that have public `x` and `y` properties,\r\n * and then aligns them based on the grid configuration given to this action.\r\n *\r\n * @function Phaser.Actions.GridAlign\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - The array of items to be updated by this action.\r\n * @param {GridAlignConfig} options - The GridAlign Configuration object.\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of objects that were passed to this Action.\r\n */\r\nvar GridAlign = function (items, options)\r\n{\r\n    if (options === undefined) { options = {}; }\r\n\r\n    var width = GetFastValue(options, 'width', -1);\r\n    var height = GetFastValue(options, 'height', -1);\r\n    var cellWidth = GetFastValue(options, 'cellWidth', 1);\r\n    var cellHeight = GetFastValue(options, 'cellHeight', cellWidth);\r\n    var position = GetFastValue(options, 'position', CONST.TOP_LEFT);\r\n    var x = GetFastValue(options, 'x', 0);\r\n    var y = GetFastValue(options, 'y', 0);\r\n\r\n    var cx = 0;\r\n    var cy = 0;\r\n    var w = (width * cellWidth);\r\n    var h = (height * cellHeight);\r\n\r\n    tempZone.setPosition(x, y);\r\n    tempZone.setSize(cellWidth, cellHeight);\r\n\r\n    for (var i = 0; i < items.length; i++)\r\n    {\r\n        AlignIn(items[i], tempZone, position);\r\n\r\n        if (width === -1)\r\n        {\r\n            //  We keep laying them out horizontally until we've done them all\r\n            cy += cellHeight;\r\n            tempZone.y += cellHeight;\r\n\r\n            if (cy === h)\r\n            {\r\n                cy = 0;\r\n                tempZone.x += cellWidth;\r\n                tempZone.y = y;\r\n            }\r\n        }\r\n        else if (height === -1)\r\n        {\r\n            //  We keep laying them out vertically until we've done them all\r\n            cx += cellWidth;\r\n            tempZone.x += cellWidth;\r\n\r\n            if (cx === w)\r\n            {\r\n                cx = 0;\r\n                tempZone.x = x;\r\n                tempZone.y += cellHeight;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  We keep laying them out until we hit the column limit\r\n            cx += cellWidth;\r\n            tempZone.x += cellWidth;\r\n\r\n            if (cx === w)\r\n            {\r\n                cx = 0;\r\n                cy += cellHeight;\r\n                tempZone.x = x;\r\n                tempZone.y += cellHeight;\r\n\r\n                if (cy === h)\r\n                {\r\n                    //  We've hit the column limit, so return, even if there are items left\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return items;\r\n};\r\n\r\nmodule.exports = GridAlign;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","AlignIn","CONST","GetFastValue","NOOP","tempZone","Zone","sys","queueDepthSort","events","once","GridAlign","items","options","undefined","width","height","cellWidth","cellHeight","position","TOP_LEFT","x","y","cx","cy","w","h","setPosition","setSize","i","length"]
}
