{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$CullTiles.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/tilemaps/components/CullTiles.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$CullTiles\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar SnapFloor = require('../../math/snap/SnapFloor');\r\nvar SnapCeil = require('../../math/snap/SnapCeil');\r\n\r\n/**\r\n * Returns the tiles in the given layer that are within the camera's viewport. This is used internally.\r\n *\r\n * @function Phaser.Tilemaps.Components.CullTiles\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n * @param {array} [outputArray] - An optional array to store the Tile objects within.\r\n *\r\n * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n */\r\nvar CullTiles = function (layer, camera, outputArray, renderOrder)\r\n{\r\n    if (outputArray === undefined) { outputArray = []; }\r\n    if (renderOrder === undefined) { renderOrder = 0; }\r\n\r\n    outputArray.length = 0;\r\n\r\n    var tilemap = layer.tilemapLayer.tilemap;\r\n    var tilemapLayer = layer.tilemapLayer;\r\n\r\n    var mapData = layer.data;\r\n    var mapWidth = layer.width;\r\n    var mapHeight = layer.height;\r\n\r\n    //  We need to use the tile sizes defined for the map as a whole, not the layer,\r\n    //  in order to calculate the bounds correctly. As different sized tiles may be\r\n    //  placed on the grid and we cannot trust layer.baseTileWidth to give us the true size.\r\n    var tileW = Math.floor(tilemap.tileWidth * tilemapLayer.scaleX);\r\n    var tileH = Math.floor(tilemap.tileHeight * tilemapLayer.scaleY);\r\n\r\n    var drawLeft = 0;\r\n    var drawRight = mapWidth;\r\n    var drawTop = 0;\r\n    var drawBottom = mapHeight;\r\n\r\n    if (!tilemapLayer.skipCull && tilemapLayer.scrollFactorX === 1 && tilemapLayer.scrollFactorY === 1)\r\n    {\r\n        //  Camera world view bounds, snapped for scaled tile size\r\n        //  Cull Padding values are given in tiles, not pixels\r\n\r\n        var boundsLeft = SnapFloor(camera.worldView.x - tilemapLayer.x, tileW, 0, true) - tilemapLayer.cullPaddingX;\r\n        var boundsRight = SnapCeil(camera.worldView.right - tilemapLayer.x, tileW, 0, true) + tilemapLayer.cullPaddingX;\r\n        var boundsTop = SnapFloor(camera.worldView.y - tilemapLayer.y, tileH, 0, true) - tilemapLayer.cullPaddingY;\r\n        var boundsBottom = SnapCeil(camera.worldView.bottom - tilemapLayer.y, tileH, 0, true) + tilemapLayer.cullPaddingY;\r\n\r\n        drawLeft = Math.max(0, boundsLeft);\r\n        drawRight = Math.min(mapWidth, boundsRight);\r\n        drawTop = Math.max(0, boundsTop);\r\n        drawBottom = Math.min(mapHeight, boundsBottom);\r\n    }\r\n\r\n    var x;\r\n    var y;\r\n    var tile;\r\n\r\n    if (renderOrder === 0)\r\n    {\r\n        //  right-down\r\n\r\n        for (y = drawTop; y < drawBottom; y++)\r\n        {\r\n            for (x = drawLeft; x < drawRight; x++)\r\n            {\r\n                tile = mapData[y][x];\r\n    \r\n                if (!tile || tile.index === -1 || !tile.visible || tile.alpha === 0)\r\n                {\r\n                    continue;\r\n                }\r\n    \r\n                outputArray.push(tile);\r\n            }\r\n        }\r\n    }\r\n    else if (renderOrder === 1)\r\n    {\r\n        //  left-down\r\n\r\n        for (y = drawTop; y < drawBottom; y++)\r\n        {\r\n            for (x = drawRight; x >= drawLeft; x--)\r\n            {\r\n                tile = mapData[y][x];\r\n    \r\n                if (!tile || tile.index === -1 || !tile.visible || tile.alpha === 0)\r\n                {\r\n                    continue;\r\n                }\r\n    \r\n                outputArray.push(tile);\r\n            }\r\n        }\r\n    }\r\n    else if (renderOrder === 2)\r\n    {\r\n        //  right-up\r\n\r\n        for (y = drawBottom; y >= drawTop; y--)\r\n        {\r\n            for (x = drawLeft; x < drawRight; x++)\r\n            {\r\n                tile = mapData[y][x];\r\n    \r\n                if (!tile || tile.index === -1 || !tile.visible || tile.alpha === 0)\r\n                {\r\n                    continue;\r\n                }\r\n    \r\n                outputArray.push(tile);\r\n            }\r\n        }\r\n    }\r\n    else if (renderOrder === 3)\r\n    {\r\n        //  left-up\r\n\r\n        for (y = drawBottom; y >= drawTop; y--)\r\n        {\r\n            for (x = drawRight; x >= drawLeft; x--)\r\n            {\r\n                tile = mapData[y][x];\r\n    \r\n                if (!tile || tile.index === -1 || !tile.visible || tile.alpha === 0)\r\n                {\r\n                    continue;\r\n                }\r\n    \r\n                outputArray.push(tile);\r\n            }\r\n        }\r\n    }\r\n\r\n    tilemapLayer.tilesDrawn = outputArray.length;\r\n    tilemapLayer.tilesTotal = mapWidth * mapHeight;\r\n\r\n    return outputArray;\r\n};\r\n\r\nmodule.exports = CullTiles;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","SnapFloor","SnapCeil","CullTiles","layer","camera","outputArray","renderOrder","undefined","length","tilemap","tilemapLayer","mapData","data","mapWidth","width","mapHeight","height","tileW","Math","floor","tileWidth","scaleX","tileH","tileHeight","scaleY","drawLeft","drawRight","drawTop","drawBottom","skipCull","scrollFactorX","scrollFactorY","boundsLeft","worldView","x","cullPaddingX","boundsRight","right","boundsTop","y","cullPaddingY","boundsBottom","bottom","max","min","tile","index","visible","alpha","push","tilesDrawn","tilesTotal"]
}
