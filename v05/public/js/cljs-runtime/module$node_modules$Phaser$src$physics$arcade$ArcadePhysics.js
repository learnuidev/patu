shadow$provide.module$node_modules$Phaser$src$physics$arcade$ArcadePhysics=function(global,require,module,exports){exports=require("module$node_modules$Phaser$src$utils$Class");var DegToRad=require("module$node_modules$Phaser$src$math$DegToRad"),DistanceBetween=require("module$node_modules$Phaser$src$math$distance$DistanceBetween"),DistanceSquared=require("module$node_modules$Phaser$src$math$distance$DistanceSquared"),Factory=require("module$node_modules$Phaser$src$physics$arcade$Factory"),GetFastValue=
require("module$node_modules$Phaser$src$utils$object$GetFastValue"),Merge=require("module$node_modules$Phaser$src$utils$object$Merge");global=require("module$node_modules$Phaser$src$plugins$PluginCache");var Vector2=require("module$node_modules$Phaser$src$math$Vector2"),World=require("module$node_modules$Phaser$src$physics$arcade$World");require=new exports({initialize:function(scene){this.scene=scene;this.systems=scene.sys;this.config=this.getConfig();scene.sys.events.once("boot",this.boot,this);
scene.sys.events.on("start",this.start,this)},boot:function(){this.world=new World(this.scene,this.config);this.add=new Factory(this.world);this.systems.events.once("destroy",this.destroy,this)},start:function(){this.world||(this.world=new World(this.scene,this.config),this.add=new Factory(this.world));var eventEmitter=this.systems.events;eventEmitter.on("update",this.world.update,this.world);eventEmitter.on("postupdate",this.world.postUpdate,this.world);eventEmitter.once("shutdown",this.shutdown,
this)},getConfig:function(){var gameConfig=this.systems.game.config.physics;return Merge(GetFastValue(this.systems.settings.physics,"arcade",{}),GetFastValue(gameConfig,"arcade",{}))},overlap:function(object1,object2,overlapCallback,processCallback,callbackContext){void 0===overlapCallback&&(overlapCallback=null);void 0===processCallback&&(processCallback=null);void 0===callbackContext&&(callbackContext=overlapCallback);return this.world.collideObjects(object1,object2,overlapCallback,processCallback,
callbackContext,!0)},collide:function(object1,object2,collideCallback,processCallback,callbackContext){void 0===collideCallback&&(collideCallback=null);void 0===processCallback&&(processCallback=null);void 0===callbackContext&&(callbackContext=collideCallback);return this.world.collideObjects(object1,object2,collideCallback,processCallback,callbackContext,!1)},pause:function(){return this.world.pause()},resume:function(){return this.world.resume()},accelerateTo:function(gameObject,x,y,speed,xSpeedMax,
ySpeedMax){void 0===speed&&(speed=60);x=Math.atan2(y-gameObject.y,x-gameObject.x);gameObject.body.acceleration.setToPolar(x,speed);void 0!==xSpeedMax&&void 0!==ySpeedMax&&gameObject.body.maxVelocity.set(xSpeedMax,ySpeedMax);return x},accelerateToObject:function(gameObject,destination,speed,xSpeedMax,ySpeedMax){return this.accelerateTo(gameObject,destination.x,destination.y,speed,xSpeedMax,ySpeedMax)},closest:function(source){var bodies=this.world.tree.all(),min=Number.MAX_VALUE,closest=null,x=source.x;
source=source.y;for(var i=bodies.length-1;0<=i;i--){var target=bodies[i],distance=DistanceSquared(x,source,target.x,target.y);distance<min&&(closest=target,min=distance)}return closest},furthest:function(source){var bodies=this.world.tree.all(),max=-1,farthest=null,x=source.x;source=source.y;for(var i=bodies.length-1;0<=i;i--){var target=bodies[i],distance=DistanceSquared(x,source,target.x,target.y);distance>max&&(farthest=target,max=distance)}return farthest},moveTo:function(gameObject,x,y,speed,
maxTime){void 0===speed&&(speed=60);void 0===maxTime&&(maxTime=0);var angle=Math.atan2(y-gameObject.y,x-gameObject.x);0<maxTime&&(speed=DistanceBetween(gameObject.x,gameObject.y,x,y)/(maxTime/1E3));gameObject.body.velocity.setToPolar(angle,speed);return angle},moveToObject:function(gameObject,destination,speed,maxTime){return this.moveTo(gameObject,destination.x,destination.y,speed,maxTime)},velocityFromAngle:function(angle,speed,vec2){void 0===speed&&(speed=60);void 0===vec2&&(vec2=new Vector2);
return vec2.setToPolar(DegToRad(angle),speed)},velocityFromRotation:function(rotation,speed,vec2){void 0===speed&&(speed=60);void 0===vec2&&(vec2=new Vector2);return vec2.setToPolar(rotation,speed)},shutdown:function(){if(this.world){var eventEmitter=this.systems.events;eventEmitter.off("update",this.world.update,this.world);eventEmitter.off("postupdate",this.world.postUpdate,this.world);eventEmitter.off("shutdown",this.shutdown,this);this.add.destroy();this.world.destroy();this.world=this.add=null}},
destroy:function(){this.shutdown();this.scene.sys.events.off("start",this.start,this);this.systems=this.scene=null}});global.register("ArcadePhysics",require,"arcadePhysics");module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$physics$arcade$ArcadePhysics.js.map
