{
"version":3,
"file":"module$node_modules$Phaser$src$boot$TimeStep.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/boot/TimeStep.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$boot$TimeStep\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar GetValue = require('../utils/object/GetValue');\r\nvar NOOP = require('../utils/NOOP');\r\nvar RequestAnimationFrame = require('../dom/RequestAnimationFrame');\r\n\r\n//  Frame Rate config\r\n//      fps: {\r\n//          min: 10,\r\n//          target: 60,\r\n//          forceSetTimeOut: false,\r\n//          deltaHistory: 10,\r\n//          panicMax: 120\r\n//     }\r\n\r\n// http://www.testufo.com/#test=animation-time-graph\r\n\r\n/**\r\n * @callback TimeStepCallback\r\n *\r\n * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n * @param {number} average - The Delta Average.\r\n * @param {number} interpolation - Interpolation - how far between what is expected and where we are?\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class TimeStep\r\n * @memberOf Phaser.Boot\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance that owns this Time Step.\r\n * @param {FPSConfig} config\r\n */\r\nvar TimeStep = new Class({\r\n\r\n    initialize:\r\n\r\n    function TimeStep (game, config)\r\n    {\r\n        /**\r\n         * A reference to the Phaser.Game instance.\r\n         *\r\n         * @name Phaser.Boot.TimeStep#game\r\n         * @type {Phaser.Game}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#raf\r\n         * @type {Phaser.DOM.RequestAnimationFrame}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.raf = new RequestAnimationFrame();\r\n\r\n        /**\r\n         * A flag that is set once the TimeStep has started running and toggled when it stops.\r\n         *\r\n         * @name Phaser.Boot.TimeStep#started\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.started = false;\r\n\r\n        /**\r\n         * A flag that is set once the TimeStep has started running and toggled when it stops.\r\n         * The difference between this value and `started` is that `running` is toggled when\r\n         * the TimeStep is sent to sleep, where-as `started` remains `true`, only changing if\r\n         * the TimeStep is actually stopped, not just paused.\r\n         *\r\n         * @name Phaser.Boot.TimeStep#running\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.running = false;\r\n\r\n        /**\r\n         * The minimum fps rate you want the Time Step to run at.\r\n         *\r\n         * @name Phaser.Boot.TimeStep#minFps\r\n         * @type {integer}\r\n         * @default 5\r\n         * @since 3.0.0\r\n         */\r\n        this.minFps = GetValue(config, 'min', 5);\r\n\r\n        /**\r\n         * The target fps rate for the Time Step to run at.\r\n         *\r\n         * Setting this value will not actually change the speed at which the browser runs, that is beyond\r\n         * the control of Phaser. Instead, it allows you to determine performance issues and if the Time Step\r\n         * is spiraling out of control.\r\n         *\r\n         * @name Phaser.Boot.TimeStep#targetFps\r\n         * @type {integer}\r\n         * @default 60\r\n         * @since 3.0.0\r\n         */\r\n        this.targetFps = GetValue(config, 'target', 60);\r\n\r\n        /**\r\n         * The minFps value in ms.\r\n         * Defaults to 200ms between frames (i.e. super slow!)\r\n         *\r\n         * @name Phaser.Boot.TimeStep#_min\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._min = 1000 / this.minFps;\r\n\r\n        /**\r\n         * The targetFps value in ms.\r\n         * Defaults to 16.66ms between frames (i.e. normal)\r\n         *\r\n         * @name Phaser.Boot.TimeStep#_target\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._target = 1000 / this.targetFps;\r\n\r\n        /**\r\n         * An exponential moving average of the frames per second.\r\n         *\r\n         * @name Phaser.Boot.TimeStep#actualFps\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @default 60\r\n         * @since 3.0.0\r\n         */\r\n        this.actualFps = this.targetFps;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#nextFpsUpdate\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.nextFpsUpdate = 0;\r\n\r\n        /**\r\n         * The number of frames processed this second.\r\n         *\r\n         * @name Phaser.Boot.TimeStep#framesThisSecond\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.framesThisSecond = 0;\r\n\r\n        /**\r\n         * A callback to be invoked each time the Time Step steps.\r\n         *\r\n         * @name Phaser.Boot.TimeStep#callback\r\n         * @type {TimeStepCallback}\r\n         * @default NOOP\r\n         * @since 3.0.0\r\n         */\r\n        this.callback = NOOP;\r\n\r\n        /**\r\n         * You can force the Time Step to use Set Timeout instead of Request Animation Frame by setting\r\n         * the `forceSetTimeOut` property to `true` in the Game Configuration object. It cannot be changed at run-time.\r\n         *\r\n         * @name Phaser.Boot.TimeStep#forceSetTimeOut\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.forceSetTimeOut = GetValue(config, 'forceSetTimeOut', false);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#time\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.time = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#startTime\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.startTime = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#lastTime\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.lastTime = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#frame\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.frame = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#inFocus\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.inFocus = true;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#_pauseTime\r\n         * @type {integer}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._pauseTime = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#_coolDown\r\n         * @type {integer}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._coolDown = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#delta\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.delta = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#deltaIndex\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.deltaIndex = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#deltaHistory\r\n         * @type {integer[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.deltaHistory = [];\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#deltaSmoothingMax\r\n         * @type {integer}\r\n         * @default 10\r\n         * @since 3.0.0\r\n         */\r\n        this.deltaSmoothingMax = GetValue(config, 'deltaHistory', 10);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Boot.TimeStep#panicMax\r\n         * @type {integer}\r\n         * @default 120\r\n         * @since 3.0.0\r\n         */\r\n        this.panicMax = GetValue(config, 'panicMax', 120);\r\n\r\n        /**\r\n         * The actual elapsed time in ms between one update and the next.\r\n         * Unlike with `delta` no smoothing, capping, or averaging is applied to this value.\r\n         * So please be careful when using this value in calculations.\r\n         *\r\n         * @name Phaser.Boot.TimeStep#rawDelta\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.rawDelta = 0;\r\n    },\r\n\r\n    /**\r\n     * Called when the DOM window.onBlur event triggers.\r\n     *\r\n     * @method Phaser.Boot.TimeStep#blur\r\n     * @since 3.0.0\r\n     */\r\n    blur: function ()\r\n    {\r\n        this.inFocus = false;\r\n    },\r\n\r\n    /**\r\n     * Called when the DOM window.onFocus event triggers.\r\n     *\r\n     * @method Phaser.Boot.TimeStep#focus\r\n     * @since 3.0.0\r\n     */\r\n    focus: function ()\r\n    {\r\n        this.inFocus = true;\r\n\r\n        this.resetDelta();\r\n    },\r\n\r\n    /**\r\n     * Called when the visibility API says the game is 'hidden' (tab switch out of view, etc)\r\n     *\r\n     * @method Phaser.Boot.TimeStep#pause\r\n     * @since 3.0.0\r\n     */\r\n    pause: function ()\r\n    {\r\n        this._pauseTime = window.performance.now();\r\n    },\r\n\r\n    /**\r\n     * Called when the visibility API says the game is 'visible' again (tab switch back into view, etc)\r\n     *\r\n     * @method Phaser.Boot.TimeStep#resume\r\n     * @since 3.0.0\r\n     */\r\n    resume: function ()\r\n    {\r\n        this.resetDelta();\r\n\r\n        this.startTime += this.time - this._pauseTime;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Boot.TimeStep#resetDelta\r\n     * @since 3.0.0\r\n     */\r\n    resetDelta: function ()\r\n    {\r\n        var now = window.performance.now();\r\n\r\n        this.time = now;\r\n        this.lastTime = now;\r\n        this.nextFpsUpdate = now + 1000;\r\n        this.framesThisSecond = 0;\r\n        this.frame = 0;\r\n\r\n        //  Pre-populate smoothing array\r\n\r\n        for (var i = 0; i < this.deltaSmoothingMax; i++)\r\n        {\r\n            this.deltaHistory[i] = Math.min(this._target, this.deltaHistory[i]);\r\n        }\r\n\r\n        this.delta = 0;\r\n        this.deltaIndex = 0;\r\n\r\n        this._coolDown = this.panicMax;\r\n    },\r\n\r\n    /**\r\n     * Starts the Time Step running, if it is not already doing so.\r\n     * Called automatically by the Game Boot process.\r\n     *\r\n     * @method Phaser.Boot.TimeStep#start\r\n     * @since 3.0.0\r\n     *\r\n     * @param {TimeStepCallback} callback - The callback to be invoked each time the Time Step steps.\r\n     */\r\n    start: function (callback)\r\n    {\r\n        if (this.started)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        this.started = true;\r\n        this.running = true;\r\n\r\n        for (var i = 0; i < this.deltaSmoothingMax; i++)\r\n        {\r\n            this.deltaHistory[i] = this._target;\r\n        }\r\n\r\n        this.resetDelta();\r\n\r\n        this.startTime = window.performance.now();\r\n\r\n        this.callback = callback;\r\n\r\n        this.raf.start(this.step.bind(this), this.forceSetTimeOut);\r\n    },\r\n\r\n    /**\r\n     * The main step method. This is called each time the browser updates, either by Request Animation Frame,\r\n     * or by Set Timeout. It is responsible for calculating the delta values, frame totals, cool down history and more.\r\n     * You generally should never call this method directly.\r\n     *\r\n     * @method Phaser.Boot.TimeStep#step\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     */\r\n    step: function (time)\r\n    {\r\n        this.frame++;\r\n\r\n        var before = time - this.lastTime;\r\n\r\n        if (before < 0)\r\n        {\r\n            //  Because, Chrome.\r\n            before = 0;\r\n        }\r\n\r\n        this.rawDelta = before;\r\n\r\n        var idx = this.deltaIndex;\r\n        var history = this.deltaHistory;\r\n        var max = this.deltaSmoothingMax;\r\n\r\n        //  delta time (time is in ms)\r\n        var dt = before;\r\n\r\n        //  When a browser switches tab, then comes back again, it takes around 10 frames before\r\n        //  the delta time settles down so we employ a 'cooling down' period before we start\r\n        //  trusting the delta values again, to avoid spikes flooding through our delta average\r\n\r\n        if (this._coolDown > 0 || !this.inFocus)\r\n        {\r\n            this._coolDown--;\r\n\r\n            dt = Math.min(dt, this._target);\r\n        }\r\n\r\n        if (dt > this._min)\r\n        {\r\n            //  Probably super bad start time or browser tab context loss,\r\n            //  so use the last 'sane' dt value\r\n\r\n            dt = history[idx];\r\n\r\n            //  Clamp delta to min (in case history has become corrupted somehow)\r\n            dt = Math.min(dt, this._min);\r\n        }\r\n\r\n        //  Smooth out the delta over the previous X frames\r\n\r\n        //  add the delta to the smoothing array\r\n        history[idx] = dt;\r\n\r\n        //  adjusts the delta history array index based on the smoothing count\r\n        //  this stops the array growing beyond the size of deltaSmoothingMax\r\n        this.deltaIndex++;\r\n\r\n        if (this.deltaIndex > max)\r\n        {\r\n            this.deltaIndex = 0;\r\n        }\r\n\r\n        //  Delta Average\r\n        var avg = 0;\r\n\r\n        //  Loop the history array, adding the delta values together\r\n\r\n        for (var i = 0; i < max; i++)\r\n        {\r\n            avg += history[i];\r\n        }\r\n\r\n        //  Then divide by the array length to get the average delta\r\n        avg /= max;\r\n\r\n        //  Set as the world delta value\r\n        this.delta = avg;\r\n\r\n        //  Real-world timer advance\r\n        this.time += this.rawDelta;\r\n\r\n        // Update the estimate of the frame rate, `fps`. Every second, the number\r\n        // of frames that occurred in that second are included in an exponential\r\n        // moving average of all frames per second, with an alpha of 0.25. This\r\n        // means that more recent seconds affect the estimated frame rate more than\r\n        // older seconds.\r\n        //\r\n        // When a browser window is NOT minimized, but is covered up (i.e. you're using\r\n        // another app which has spawned a window over the top of the browser), then it\r\n        // will start to throttle the raf callback time. It waits for a while, and then\r\n        // starts to drop the frame rate at 1 frame per second until it's down to just over 1fps.\r\n        // So if the game was running at 60fps, and the player opens a new window, then\r\n        // after 60 seconds (+ the 'buffer time') it'll be down to 1fps, so rafin'g at 1Hz.\r\n        //\r\n        // When they make the game visible again, the frame rate is increased at a rate of\r\n        // approx. 8fps, back up to 60fps (or the max it can obtain)\r\n        //\r\n        // There is no easy way to determine if this drop in frame rate is because the\r\n        // browser is throttling raf, or because the game is struggling with performance\r\n        // because you're asking it to do too much on the device.\r\n\r\n        if (time > this.nextFpsUpdate)\r\n        {\r\n            //  Compute the new exponential moving average with an alpha of 0.25.\r\n            this.actualFps = 0.25 * this.framesThisSecond + 0.75 * this.actualFps;\r\n            this.nextFpsUpdate = time + 1000;\r\n            this.framesThisSecond = 0;\r\n        }\r\n\r\n        this.framesThisSecond++;\r\n\r\n        //  Interpolation - how far between what is expected and where we are?\r\n        var interpolation = avg / this._target;\r\n\r\n        this.callback(time, avg, interpolation);\r\n\r\n        //  Shift time value over\r\n        this.lastTime = time;\r\n    },\r\n\r\n    /**\r\n     * Manually calls TimeStep.step, passing in the performance.now value to it.\r\n     *\r\n     * @method Phaser.Boot.TimeStep#tick\r\n     * @since 3.0.0\r\n     */\r\n    tick: function ()\r\n    {\r\n        this.step(window.performance.now());\r\n    },\r\n\r\n    /**\r\n     * Sends the TimeStep to sleep, stopping Request Animation Frame (or SetTimeout) and toggling the `running` flag to false.\r\n     *\r\n     * @method Phaser.Boot.TimeStep#sleep\r\n     * @since 3.0.0\r\n     */\r\n    sleep: function ()\r\n    {\r\n        if (this.running)\r\n        {\r\n            this.raf.stop();\r\n\r\n            this.running = false;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Wakes-up the TimeStep, restarting Request Animation Frame (or SetTimeout) and toggling the `running` flag to true.\r\n     * The `seamless` argument controls if the wake-up should adjust the start time or not.\r\n     *\r\n     * @method Phaser.Boot.TimeStep#wake\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [seamless=false] - Adjust the startTime based on the lastTime values.\r\n     */\r\n    wake: function (seamless)\r\n    {\r\n        if (this.running)\r\n        {\r\n            this.sleep();\r\n        }\r\n        else if (seamless)\r\n        {\r\n            this.startTime += -this.lastTime + (this.lastTime = window.performance.now());\r\n        }\r\n\r\n        this.raf.start(this.step.bind(this), this.useRAF);\r\n\r\n        this.running = true;\r\n\r\n        this.step(window.performance.now());\r\n    },\r\n\r\n    /**\r\n     * Stops the TimeStep running.\r\n     *\r\n     * @method Phaser.Boot.TimeStep#stop\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Boot.TimeStep} The TimeStep object.\r\n     */\r\n    stop: function ()\r\n    {\r\n        this.running = false;\r\n        this.started = false;\r\n\r\n        this.raf.stop();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroys the TimeStep. This will stop Request Animation Frame, stop the step, clear the callbacks and null\r\n     * any objects.\r\n     *\r\n     * @method Phaser.Boot.TimeStep#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stop();\r\n\r\n        this.callback = NOOP;\r\n\r\n        this.raf = null;\r\n        this.game = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TimeStep;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","GetValue","NOOP","RequestAnimationFrame","TimeStep","initialize","game","config","raf","running","started","minFps","targetFps","_min","_target","actualFps","framesThisSecond","nextFpsUpdate","callback","forceSetTimeOut","frame","lastTime","startTime","time","inFocus","deltaIndex","delta","_coolDown","_pauseTime","deltaHistory","deltaSmoothingMax","panicMax","rawDelta","blur","focus","resetDelta","pause","window","performance","now","resume","i","Math","min","start","step","bind","before","idx","history","max","dt","avg","tick","sleep","stop","wake","seamless","useRAF","destroy"]
}
