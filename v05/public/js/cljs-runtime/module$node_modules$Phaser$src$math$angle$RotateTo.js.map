{
"version":3,
"file":"module$node_modules$Phaser$src$math$angle$RotateTo.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,mDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO/G,IAAIC,WAAaH,OAAA,CAAQ,2CAAR,CAsDjBC,OAAAC,QAAA,CAxCeE,QAAS,CAACC,YAAD,CAAeC,WAAf,CAA4BC,IAA5B,CACxB,CACiBC,IAAAA,EAAb,GAAID,IAAJ,GAA0BA,IAA1B,CAAiC,GAAjC,CAEA,IAAIF,YAAJ,GAAqBC,WAArB,CAEI,MAAOD,aAGPI,KAAAC,IAAA,CAASJ,WAAT,CAAuBD,YAAvB,CAAJ,EAA4CE,IAA5C,EAAoDE,IAAAC,IAAA,CAASJ,WAAT,CAAuBD,YAAvB,CAApD,EAA6FF,UAAAQ,IAA7F,CAA8GJ,IAA9G,CAEIF,YAFJ,CAEmBC,WAFnB,EAMQG,IAAAC,IAAA,CAASJ,WAAT,CAAuBD,YAAvB,CAYJ,CAZ2CI,IAAAG,GAY3C,GARQN,WAQR,CAVQA,WAAJ,CAAkBD,YAAlB;AAEIC,WAFJ,CAEmBH,UAAAQ,IAFnB,CAMIL,WANJ,CAMmBH,UAAAQ,IAIvB,EAAIL,WAAJ,CAAkBD,YAAlB,CAEIA,YAFJ,EAEoBE,IAFpB,CAISD,WAJT,CAIuBD,YAJvB,GAMIA,YANJ,EAMoBE,IANpB,CAlBJ,CA4BA,OAAOF,aApCX,CAtB+G;",
"sources":["node_modules/Phaser/src/math/angle/RotateTo.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$angle$RotateTo\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar MATH_CONST = require('../const');\r\n\r\n/**\r\n * Rotates `currentAngle` towards `targetAngle`, taking the shortest rotation distance. The `lerp` argument is the amount to rotate by in this call.\r\n *\r\n * @function Phaser.Math.Angle.RotateTo\r\n * @since 3.0.0\r\n *\r\n * @param {number} currentAngle - The current angle, in radians.\r\n * @param {number} targetAngle - The target angle to rotate to, in radians.\r\n * @param {number} [lerp=0.05] - The lerp value to add to the current angle.\r\n *\r\n * @return {number} The adjusted angle.\r\n */\r\nvar RotateTo = function (currentAngle, targetAngle, lerp)\r\n{\r\n    if (lerp === undefined) { lerp = 0.05; }\r\n\r\n    if (currentAngle === targetAngle)\r\n    {\r\n        return currentAngle;\r\n    }\r\n\r\n    if (Math.abs(targetAngle - currentAngle) <= lerp || Math.abs(targetAngle - currentAngle) >= (MATH_CONST.PI2 - lerp))\r\n    {\r\n        currentAngle = targetAngle;\r\n    }\r\n    else\r\n    {\r\n        if (Math.abs(targetAngle - currentAngle) > Math.PI)\r\n        {\r\n            if (targetAngle < currentAngle)\r\n            {\r\n                targetAngle += MATH_CONST.PI2;\r\n            }\r\n            else\r\n            {\r\n                targetAngle -= MATH_CONST.PI2;\r\n            }\r\n        }\r\n\r\n        if (targetAngle > currentAngle)\r\n        {\r\n            currentAngle += lerp;\r\n        }\r\n        else if (targetAngle < currentAngle)\r\n        {\r\n            currentAngle -= lerp;\r\n        }\r\n    }\r\n\r\n    return currentAngle;\r\n};\r\n\r\nmodule.exports = RotateTo;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","MATH_CONST","RotateTo","currentAngle","targetAngle","lerp","undefined","Math","abs","PI2","PI"]
}
