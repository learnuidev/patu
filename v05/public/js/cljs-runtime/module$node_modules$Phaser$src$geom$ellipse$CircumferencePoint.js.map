{
"version":3,
"file":"module$node_modules$Phaser$src$geom$ellipse$CircumferencePoint.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,+DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO3H,IAAIC,MAAQH,OAAA,CAAQ,iDAAR,CA6BZC,OAAAC,QAAA,CAbyBE,QAAS,CAACC,OAAD,CAAUC,KAAV,CAAiBC,GAAjB,CAClC,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,IAAIJ,KAAnC,CAGA,KAAIM,WAAaJ,OAAAK,OAAbD,CAA8B,CAElCF,IAAAI,EAAA,CAAQN,OAAAM,EAAR,CAHgBN,OAAAO,MAGhB,CAHgC,CAGhC,CAAgCC,IAAAC,IAAA,CAASR,KAAT,CAChCC,IAAAQ,EAAA,CAAQV,OAAAU,EAAR,CAAoBN,UAApB,CAAiCI,IAAAG,IAAA,CAASV,KAAT,CAEjC,OAAOC,IATX,CAxB2H;",
"sources":["node_modules/Phaser/src/geom/ellipse/CircumferencePoint.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$ellipse$CircumferencePoint\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Returns a Point object containing the coordinates of a point on the circumference of the Ellipse based on the given angle.\r\n *\r\n * @function Phaser.Geom.Ellipse.CircumferencePoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Ellipse} ellipse - The Ellipse to get the circumference point on.\r\n * @param {number} angle - The angle from the center of the Ellipse to the circumference to return the point from. Given in radians.\r\n * @param {(Phaser.Geom.Point|object)} [out] - A Point, or point-like object, to store the results in. If not given a Point will be created.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object where the `x` and `y` properties are the point on the circumference.\r\n */\r\nvar CircumferencePoint = function (ellipse, angle, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var halfWidth = ellipse.width / 2;\r\n    var halfHeight = ellipse.height / 2;\r\n\r\n    out.x = ellipse.x + halfWidth * Math.cos(angle);\r\n    out.y = ellipse.y + halfHeight * Math.sin(angle);\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = CircumferencePoint;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Point","CircumferencePoint","ellipse","angle","out","undefined","halfHeight","height","x","width","Math","cos","y","sin"]
}
