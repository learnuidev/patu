{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$collision$Pairs.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/collision/Pairs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$collision$Pairs\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\r\n*\r\n* @class Pairs\r\n*/\r\n\r\nvar Pairs = {};\r\n\r\nmodule.exports = Pairs;\r\n\r\nvar Pair = require('./Pair');\r\nvar Common = require('../core/Common');\r\n\r\n(function() {\r\n    \r\n    Pairs._pairMaxIdleLife = 1000;\r\n\r\n    /**\r\n     * Creates a new pairs structure.\r\n     * @method create\r\n     * @param {object} options\r\n     * @return {pairs} A new pairs structure\r\n     */\r\n    Pairs.create = function(options) {\r\n        return Common.extend({ \r\n            table: {},\r\n            list: [],\r\n            collisionStart: [],\r\n            collisionActive: [],\r\n            collisionEnd: []\r\n        }, options);\r\n    };\r\n\r\n    /**\r\n     * Updates pairs given a list of collisions.\r\n     * @method update\r\n     * @param {object} pairs\r\n     * @param {collision[]} collisions\r\n     * @param {number} timestamp\r\n     */\r\n    Pairs.update = function(pairs, collisions, timestamp) {\r\n        var pairsList = pairs.list,\r\n            pairsTable = pairs.table,\r\n            collisionStart = pairs.collisionStart,\r\n            collisionEnd = pairs.collisionEnd,\r\n            collisionActive = pairs.collisionActive,\r\n            collision,\r\n            pairId,\r\n            pair,\r\n            i;\r\n\r\n        // clear collision state arrays, but maintain old reference\r\n        collisionStart.length = 0;\r\n        collisionEnd.length = 0;\r\n        collisionActive.length = 0;\r\n\r\n        for (i = 0; i < pairsList.length; i++) {\r\n            pairsList[i].confirmedActive = false;\r\n        }\r\n\r\n        for (i = 0; i < collisions.length; i++) {\r\n            collision = collisions[i];\r\n\r\n            if (collision.collided) {\r\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\r\n\r\n                pair = pairsTable[pairId];\r\n                \r\n                if (pair) {\r\n                    // pair already exists (but may or may not be active)\r\n                    if (pair.isActive) {\r\n                        // pair exists and is active\r\n                        collisionActive.push(pair);\r\n                    } else {\r\n                        // pair exists but was inactive, so a collision has just started again\r\n                        collisionStart.push(pair);\r\n                    }\r\n\r\n                    // update the pair\r\n                    Pair.update(pair, collision, timestamp);\r\n                    pair.confirmedActive = true;\r\n                } else {\r\n                    // pair did not exist, create a new pair\r\n                    pair = Pair.create(collision, timestamp);\r\n                    pairsTable[pairId] = pair;\r\n\r\n                    // push the new pair\r\n                    collisionStart.push(pair);\r\n                    pairsList.push(pair);\r\n                }\r\n            }\r\n        }\r\n\r\n        // deactivate previously active pairs that are now inactive\r\n        for (i = 0; i < pairsList.length; i++) {\r\n            pair = pairsList[i];\r\n            if (pair.isActive && !pair.confirmedActive) {\r\n                Pair.setActive(pair, false, timestamp);\r\n                collisionEnd.push(pair);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Finds and removes pairs that have been inactive for a set amount of time.\r\n     * @method removeOld\r\n     * @param {object} pairs\r\n     * @param {number} timestamp\r\n     */\r\n    Pairs.removeOld = function(pairs, timestamp) {\r\n        var pairsList = pairs.list,\r\n            pairsTable = pairs.table,\r\n            indexesToRemove = [],\r\n            pair,\r\n            collision,\r\n            pairIndex,\r\n            i;\r\n\r\n        for (i = 0; i < pairsList.length; i++) {\r\n            pair = pairsList[i];\r\n            collision = pair.collision;\r\n            \r\n            // never remove sleeping pairs\r\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\r\n                pair.timeUpdated = timestamp;\r\n                continue;\r\n            }\r\n\r\n            // if pair is inactive for too long, mark it to be removed\r\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\r\n                indexesToRemove.push(i);\r\n            }\r\n        }\r\n\r\n        // remove marked pairs\r\n        for (i = 0; i < indexesToRemove.length; i++) {\r\n            pairIndex = indexesToRemove[i] - i;\r\n            pair = pairsList[pairIndex];\r\n            delete pairsTable[pair.id];\r\n            pairsList.splice(pairIndex, 1);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Clears the given pairs structure.\r\n     * @method clear\r\n     * @param {pairs} pairs\r\n     * @return {pairs} pairs\r\n     */\r\n    Pairs.clear = function(pairs) {\r\n        pairs.table = {};\r\n        pairs.list.length = 0;\r\n        pairs.collisionStart.length = 0;\r\n        pairs.collisionActive.length = 0;\r\n        pairs.collisionEnd.length = 0;\r\n        return pairs;\r\n    };\r\n\r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Pairs","Pair","Common","_pairMaxIdleLife","create","Pairs.create","options","extend","table","list","collisionStart","collisionActive","collisionEnd","update","Pairs.update","pairs","collisions","timestamp","pairsList","pairsTable","pair","i","length","confirmedActive","collision","collided","pairId","id","bodyA","bodyB","isActive","push","setActive","removeOld","Pairs.removeOld","indexesToRemove","isSleeping","timeUpdated","pairIndex","splice","clear","Pairs.clear"]
}
