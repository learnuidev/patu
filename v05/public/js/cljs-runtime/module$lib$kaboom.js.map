{
"version":3,
"file":"module$lib$kaboom.js",
"lineCount":1393,
"mappings":"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",
"sources":["lib/kaboom.js"],
"sourcesContent":["import {\n  vec2,\n  mat4,\n  quad,\n  rgba,\n  rgb,\n  makeRng,\n  rand,\n  randSeed,\n  chance,\n  choose,\n  clamp,\n  lerp,\n  map,\n  mapc,\n  wave,\n  colRectRect,\n  overlapRectRect,\n  colRectPt,\n  vec2FromAngle,\n  deg2rad,\n  rad2deg\n} from \"/lib/math.js\";\n\nimport { originPt, gfxInit } from \"/lib/gfx.js\";\n\nimport { appInit } from \"/lib/app.js\";\n\nimport { audioInit } from \"/lib/audio.js\";\n\nimport { assetsInit, DEF_FONT } from \"/lib/assets.js\";\n\nimport { loggerInit } from \"/lib/logger.js\";\n\nimport { netInit } from \"/lib/net.js\";\n\n// @ts-ignore\nconst kaboom = (\n  gconf = {\n    width: 640,\n    height: 480,\n    scale: 1,\n    fullscreen: false,\n    debug: false,\n    crisp: false,\n    canvas: null,\n    connect: null,\n    logMax: 8,\n    root: document.body\n  }\n) => {\n  const app = appInit({\n    width: gconf.width,\n    height: gconf.height,\n    scale: gconf.scale,\n    fullscreen: gconf.fullscreen,\n    crisp: gconf.crisp,\n    canvas: gconf.canvas,\n    root: gconf.root\n  });\n\n  const gfx = gfxInit(app.gl, {\n    clearColor: gconf.clearColor ? rgba(gconf.clearColor) : undefined,\n    scale: gconf.scale,\n    texFilter: gconf.texFilter\n  });\n\n  const audio = audioInit();\n  const assets = assetsInit(gfx, audio, {\n    errHandler: err => {\n      logger.error(err);\n    }\n  });\n\n  const logger = loggerInit(gfx, assets, {\n    max: gconf.logMax\n  });\n\n  const net = gconf.connect ? netInit(gconf.connect) : null;\n\n  const NetMsg = {\n    AddObj: \"ADD_OBJ\",\n    UpdateObj: \"UPDATE_OBJ\",\n    DestroyObj: \"DESTROY_OBJ\",\n    Disconnect: \"DISCONNECT\"\n  };\n\n  function sync(obj) {\n    if (!net) {\n      throw new Error(\"not connected to any websockets\");\n    }\n    const scene = curScene();\n    scene.travelers.push(obj._id);\n    send(NetMsg.AddObj, obj._data());\n  }\n\n  if (net) {\n    recv(NetMsg.AddObj, (id, data) => {\n      const scene = curScene();\n      if (!scene.visitors[id]) {\n        scene.visitors[id] = {};\n      }\n      // TODO: reconstruct\n      //  \t\tconst obj = add(data);\n      //  \t\tscene.visitors[id][data.id] = obj._id;\n    });\n\n    recv(NetMsg.DestroyObj, (id, data) => {\n      const scene = curScene();\n      if (!scene.visitors[id]) {\n        return;\n      }\n      const oid = scene.visitors[id][data.id];\n      if (oid != null) {\n        destroy(scene.objs.get(oid));\n        delete scene.visitors[id][data.id];\n      }\n    });\n\n    recv(NetMsg.Disconnect, (id, data) => {\n      const scene = curScene();\n      if (scene.visitors[id]) {\n        for (const oid of Object.values(scene.visitors[id])) {\n          destroy(scene.objs.get(oid));\n        }\n        delete scene.visitors[id];\n      }\n    });\n  }\n\n  function recv(ty, handler) {\n    if (!net) {\n      throw new Error(\"not connected to any websockets\");\n    }\n    net.recv(ty, (data, id) => {\n      try {\n        handler(data, id);\n      } catch (err) {\n        logger.error(err);\n      }\n    });\n  }\n\n  function send(ty, data) {\n    if (!net) {\n      throw new Error(\"not connected to any websockets\");\n    }\n    net.send(ty, data);\n  }\n\n  function dt() {\n    return app.dt() * debug.timeScale;\n  }\n\n  function play(id, conf = {}) {\n    const sound = assets.sounds[id];\n    if (!sound) {\n      throw new Error(`sound not found: \"${id}\"`);\n    }\n    return audio.play(sound, conf);\n  }\n\n  function isCamLayer(layer) {\n    const scene = curScene();\n    var noCam =\n      scene.layers[layer ? layer : scene.defLayer] &&\n      scene.layers[layer ? layer : scene.defLayer].noCam;\n    return !noCam;\n  }\n\n  // check input state last frame\n  function mousePos(layer) {\n    return isCamLayer(layer) ? curScene().camMousePos : app.mousePos();\n  }\n\n  function drawSprite(id, conf = {}) {\n    const spr = (() => {\n      if (typeof id === \"string\") {\n        return assets.sprites[id];\n      } else {\n        return id;\n      }\n    })();\n    if (!spr) {\n      throw new Error(`sprite not found: \"${id}\"`);\n    }\n    const q = spr.frames[conf.frame ? conf.frame : 0];\n    gfx.drawTexture(spr.tex, {\n      ...conf,\n      quad: q\n    });\n  }\n\n  // TODO: DrawTextComf\n  function drawText(txt, conf = {}) {\n    // @ts-ignore\n    const fid = conf.font ? conf.font : DEF_FONT;\n    const font = assets.fonts[fid];\n    if (!font) {\n      throw new Error(`font not found: ${fid}`);\n    }\n    gfx.drawText(txt, font, conf);\n  }\n\n  // TODO: comp registry?\n  // TODO: comps assert required other comps\n\n  const DEF_GRAVITY = 980;\n  const DEF_ORIGIN = \"topleft\";\n\n  const game = {\n    loaded: false,\n    scenes: {},\n    curScene: null,\n    nextScene: null,\n    compReg: {}\n  };\n\n  // start describing a scene (this should be called before start())\n  function scene(name, cb) {\n    game.scenes[name] = {\n      init: cb,\n      initialized: false,\n\n      // event callbacks\n      events: {\n        add: [],\n        update: [],\n        draw: [],\n        destroy: [],\n        keyDown: [],\n        keyPress: [],\n        keyPressRep: [],\n        keyRelease: [],\n        mouseClick: [],\n        mouseRelease: [],\n        mouseDown: [],\n        charInput: []\n      },\n\n      action: [],\n      render: [],\n\n      // in game pool\n      objs: new Map(),\n      lastObjID: 0,\n      timers: {},\n      lastTimerID: 0,\n\n      // cam\n      cam: {\n        pos: vec2(gfx.width() / 2, gfx.height() / 2),\n        scale: vec2(1, 1),\n        angle: 0,\n        shake: 0\n      },\n\n      camMousePos: vec2(0),\n      camMatrix: mat4(),\n\n      // misc\n      layers: {},\n      defLayer: null,\n      gravity: DEF_GRAVITY,\n      data: {},\n\n      // net\n      travelers: [],\n      visitors: {}\n    };\n  }\n\n  function curScene() {\n    return game.scenes[game.curScene];\n  }\n\n  // custom data kv store for scene\n  function sceneData() {\n    return curScene().data;\n  }\n\n  // register inputs for controlling debug features\n  function regDebugInputs() {\n    keyPress(\"`\", () => {\n      debug.showLog = !debug.showLog;\n      logger.info(`show log: ${debug.showLog ? \"on\" : \"off\"}`);\n    });\n\n    keyPress(\"f1\", () => {\n      debug.inspect = !debug.inspect;\n      logger.info(`inspect: ${debug.inspect ? \"on\" : \"off\"}`);\n    });\n\n    keyPress(\"f2\", () => {\n      debug.clearLog();\n    });\n\n    keyPress(\"f8\", () => {\n      debug.paused = !debug.paused;\n      logger.info(`${debug.paused ? \"paused\" : \"unpaused\"}`);\n    });\n\n    keyPress(\"f7\", () => {\n      debug.timeScale = clamp(debug.timeScale - 0.2, 0, 2);\n      logger.info(`time scale: ${debug.timeScale.toFixed(1)}`);\n    });\n\n    keyPress(\"f9\", () => {\n      debug.timeScale = clamp(debug.timeScale + 0.2, 0, 2);\n      logger.info(`time scale: ${debug.timeScale.toFixed(1)}`);\n    });\n\n    keyPress(\"f10\", () => {\n      debug.stepFrame();\n      logger.info(`stepped frame`);\n    });\n  }\n\n  // schedule to switch to a scene\n  function go(name, ...args) {\n    game.nextScene = {\n      name: name,\n      args: [...args]\n    };\n  }\n\n  function switchScene(name, ...args) {\n    reload(name);\n    game.curScene = name;\n    const scene = game.scenes[name];\n    if (!scene) {\n      throw new Error(`scene not found: '${name}'`);\n    }\n    if (!scene.initialized) {\n      try {\n        scene.init(...args);\n      } catch (e) {\n        logger.error(e.stack);\n      }\n      if (gconf.debug) {\n        regDebugInputs();\n      }\n      scene.initialized = true;\n    }\n  }\n\n  // reload a scene, reset all objs to their init states\n  function reload(name) {\n    if (!game.scenes[name]) {\n      throw new Error(`scene not found: '${name}'`);\n    }\n    scene(name, game.scenes[name].init);\n  }\n\n  function layers(list, def) {\n    const scene = curScene();\n\n    if (!scene) {\n      return;\n    }\n\n    list.forEach((name, idx) => {\n      scene.layers[name] = {\n        alpha: 1,\n        order: idx + 1,\n        noCam: false\n      };\n    });\n\n    if (def) {\n      scene.defLayer = def;\n    }\n  }\n\n  function camPos(...pos) {\n    const cam = curScene().cam;\n    if (pos.length > 0) {\n      cam.pos = vec2(...pos);\n    }\n    return cam.pos.clone();\n  }\n\n  function camScale(...scale) {\n    const cam = curScene().cam;\n    if (scale.length > 0) {\n      cam.scale = vec2(...scale);\n    }\n    return cam.scale.clone();\n  }\n\n  function camRot(angle) {\n    const cam = curScene().cam;\n    if (angle !== undefined) {\n      cam.angle = angle;\n    }\n    return cam.angle;\n  }\n\n  function camShake(intensity) {\n    const cam = curScene().cam;\n    cam.shake = intensity;\n  }\n\n  function camIgnore(layers) {\n    const scene = curScene();\n    layers.forEach(name => {\n      if (scene.layers[name]) {\n        scene.layers[name].noCam = true;\n      }\n    });\n  }\n\n  // define a component with its dependencies and state builder\n  function defComp(id, require, builder) {\n    const comp = (...args) => {\n      return {\n        ...builder(...args),\n        id: id,\n        require: require\n      };\n    };\n    game.compReg[id] = comp;\n    return comp;\n  }\n\n  function makeComp(id, ...args) {\n    if (!game.compReg[id]) {\n      throw new Error(`comp not found: ${id}`);\n    }\n    return game.compReg[id](...args);\n  }\n\n  // TODO: make tags also comp?\n  function add(comps) {\n    const compStates = {};\n    const customState = {};\n\n    const obj = {\n      hidden: false,\n      paused: false,\n      _tags: [],\n      _id: null,\n      _client: null,\n\n      _events: {\n        add: [],\n        update: [],\n        draw: [],\n        destroy: [],\n        inspect: []\n      },\n\n      // use a comp\n      use(comp) {\n        if (comp === undefined) {\n          return;\n        }\n\n        const ty = typeof comp;\n\n        // tags\n        if (ty === \"string\") {\n          this._tags.push(comp);\n          return;\n        }\n\n        if (ty !== \"object\") {\n          throw new Error(`invalid comp type: ${ty}`);\n        }\n\n        let stateContainer = customState;\n\n        if (comp.id) {\n          compStates[comp.id] = {};\n          stateContainer = compStates[comp.id];\n        }\n\n        for (const k in comp) {\n          if (k === \"id\") {\n            continue;\n          }\n\n          // event / custom method\n          if (typeof comp[k] === \"function\") {\n            if (this._events[k]) {\n              this._events[k].push(comp[k].bind(this));\n              continue;\n            } else {\n              stateContainer[k] = comp[k].bind(this);\n            }\n          } else {\n            stateContainer[k] = comp[k];\n          }\n\n          if (k === \"require\") {\n            continue;\n          }\n\n          // fields\n          Object.defineProperty(this, k, {\n            get() {\n              return stateContainer[k];\n            },\n            set(val) {\n              stateContainer[k] = val;\n            }\n          });\n        }\n      },\n\n      c(id) {\n        return compStates[id];\n      },\n\n      // if obj is current in scene\n      exists() {\n        return this._id !== undefined;\n      },\n\n      // if obj has certain tag\n      is(tag) {\n        if (tag === \"*\") {\n          return true;\n        }\n        if (Array.isArray(tag)) {\n          for (const t of tag) {\n            if (!this._tags.includes(t)) {\n              return false;\n            }\n          }\n          return true;\n        }\n        return this._tags.includes(tag);\n      },\n\n      on(event, cb) {\n        if (!this._events[event]) {\n          this._events[event] = [];\n        }\n        this._events[event].push(cb);\n      },\n\n      action(cb) {\n        this.on(\"update\", cb);\n      },\n\n      trigger(event, ...args) {\n        if (this._events[event]) {\n          for (const f of this._events[event]) {\n            f.call(this, ...args);\n          }\n        }\n\n        const scene = curScene();\n        const events = scene.events[event];\n\n        if (events) {\n          for (const ev of events) {\n            if (this.is(ev.tag)) {\n              ev.cb(this, ...args);\n            }\n          }\n        }\n      },\n\n      rmTag(t) {\n        const idx = this._tags.indexOf(t);\n        if (idx > -1) {\n          this._tags.splice(idx, 1);\n        }\n      },\n\n      // data to send over the net for reconstruction\n      _data() {\n        return {\n          hidden: this.hidden,\n          paused: this.paused,\n          tags: this._tags,\n          id: this._id,\n          comps: compStates,\n          custom: customState\n        };\n      }\n    };\n\n    for (const comp of comps) {\n      obj.use(comp);\n    }\n\n    const scene = curScene();\n    const id = scene.lastObjID++;\n\n    scene.objs.set(id, obj);\n    obj._id = id;\n\n    obj.trigger(\"add\");\n\n    // check comp dependencies\n    for (const id in compStates) {\n      const comp = compStates[id];\n      const deps = comp.require || [];\n      for (const dep of deps) {\n        if (!obj.c(dep)) {\n          throw new Error(`comp '${id}' requires comp '${dep}'`);\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  function readd(obj) {\n    if (!obj.exists()) {\n      return;\n    }\n\n    const scene = curScene();\n\n    scene.objs.delete(obj._id);\n    const id = scene.lastObjID++;\n    scene.objs.set(id, obj);\n    obj._id = id;\n\n    return obj;\n  }\n\n  // add an event to a tag\n  function on(event, tag, cb) {\n    const scene = curScene();\n    if (!scene.events[event]) {\n      scene.events[event] = [];\n    }\n    scene.events[event].push({\n      tag: tag,\n      cb: cb\n    });\n  }\n\n  // add update event to a tag or global update\n  function action(tag, cb) {\n    if (typeof tag === \"function\" && cb === undefined) {\n      curScene().action.push(tag);\n    } else if (typeof tag === \"string\") {\n      on(\"update\", tag, cb);\n    }\n  }\n\n  // add draw event to a tag or global draw\n  function render(tag, cb) {\n    if (typeof tag === \"function\" && cb === undefined) {\n      curScene().render.push(tag);\n    } else if (typeof tag === \"string\") {\n      on(\"update\", tag, cb);\n    }\n  }\n\n  // add an event that runs with objs with t1 collides with objs with t2\n  function collides(t1, t2, f) {\n    action(t1, o1 => {\n      o1._checkCollisions(t2, o2 => {\n        f(o1, o2);\n      });\n    });\n  }\n\n  // add an event that runs with objs with t1 overlaps with objs with t2\n  function overlaps(t1, t2, f) {\n    action(t1, o1 => {\n      o1._checkOverlaps(t2, o2 => {\n        f(o1, o2);\n      });\n    });\n  }\n\n  // add an event that runs when objs with tag t is clicked\n  function clicks(t, f) {\n    action(t, o => {\n      if (o.isClicked()) {\n        f(o);\n      }\n    });\n  }\n\n  // add an event that'd be run after t\n  function wait(t, f) {\n    return new Promise(resolve => {\n      const scene = curScene();\n      scene.timers[scene.lastTimerID++] = {\n        time: t,\n        cb: () => {\n          if (f) {\n            f();\n          }\n          resolve();\n        }\n      };\n    });\n  }\n\n  // add an event that's run every t seconds\n  function loop(t, f) {\n    let stopped = false;\n\n    const newF = () => {\n      if (stopped) {\n        return;\n      }\n      f();\n      wait(t, newF);\n    };\n\n    newF();\n\n    return {\n      stop() {\n        stopped = true;\n      }\n    };\n  }\n\n  function pushKeyEvent(e, k, f) {\n    if (Array.isArray(k)) {\n      for (const key of k) {\n        pushKeyEvent(e, key, f);\n      }\n    } else {\n      const scene = curScene();\n      scene.events[e].push({\n        key: k,\n        cb: f\n      });\n    }\n  }\n\n  // input callbacks\n  function keyDown(k, f) {\n    pushKeyEvent(\"keyDown\", k, f);\n  }\n\n  function keyPress(k, f) {\n    pushKeyEvent(\"keyPress\", k, f);\n  }\n\n  function keyPressRep(k, f) {\n    pushKeyEvent(\"keyPressRep\", k, f);\n  }\n\n  function keyRelease(k, f) {\n    pushKeyEvent(\"keyRelease\", k, f);\n  }\n\n  function charInput(f) {\n    const scene = curScene();\n    scene.events.charInput.push({\n      cb: f\n    });\n  }\n\n  function mouseDown(f) {\n    const scene = curScene();\n    scene.events.mouseDown.push({\n      cb: f\n    });\n  }\n\n  function mouseClick(f) {\n    const scene = curScene();\n    scene.events.mouseClick.push({\n      cb: f\n    });\n  }\n\n  function mouseRelease(f) {\n    const scene = curScene();\n    scene.events.mouseRelease.push({\n      cb: f\n    });\n  }\n\n  // TODO: cache sorted list\n  // get all objects with tag\n  function get(t) {\n    const scene = curScene();\n    const objs = [...scene.objs.values()].sort((o1, o2) => {\n      const l1 =\n        (scene.layers[o1.layer ? o1.layer : scene.defLayer] &&\n          scene.layers[o1.layer ? o1.layer : scene.defLayer].order) ||\n        0;\n      const l2 =\n        (scene.layers[o2.layer ? o2.layer : scene.defLayer] &&\n          scene.layers[o2.layer ? o2.layer : scene.defLayer].order) ||\n        0;\n      return l1 - l2;\n    });\n\n    if (!t) {\n      return objs;\n    } else {\n      return objs.filter(obj => obj.is(t));\n    }\n  }\n\n  // apply a function to all objects currently in scene with tag t\n  function every(t, f) {\n    if (typeof t === \"function\" && f === undefined) {\n      return get().map(t);\n    } else if (typeof t === \"string\") {\n      return get(t).map(f);\n    }\n  }\n\n  // every but in reverse order\n  function revery(t, f) {\n    if (typeof t === \"function\" && f === undefined) {\n      return get()\n        .reverse()\n        .map(t);\n    } else if (typeof t === \"string\") {\n      return get(t)\n        .reverse()\n        .map(f);\n    }\n  }\n\n  // destroy an obj\n  function destroy(obj) {\n    if (!obj.exists()) {\n      return;\n    }\n\n    const scene = curScene();\n\n    if (!scene) {\n      return;\n    }\n\n    obj.trigger(\"destroy\");\n    scene.objs.delete(obj._id);\n    delete obj._id;\n  }\n\n  // destroy all obj with the tag\n  function destroyAll(t) {\n    every(t, obj => {\n      destroy(obj);\n    });\n  }\n\n  // get / set gravity\n  function gravity(g) {\n    const scene = curScene();\n    if (g !== undefined) {\n      scene.gravity = g;\n    }\n    return scene.gravity;\n  }\n\n  // TODO: cleaner pause logic\n  function gameFrame(ignorePause) {\n    const scene = curScene();\n\n    if (!scene) {\n      throw new Error(`scene not found: '${game.curScene}'`);\n    }\n\n    const doUpdate = ignorePause || !debug.paused;\n\n    if (doUpdate) {\n      // update timers\n      for (const id in scene.timers) {\n        const t = scene.timers[id];\n        t.time -= dt();\n        if (t.time <= 0) {\n          t.cb();\n          delete scene.timers[id];\n        }\n      }\n    }\n\n    // update every obj\n    revery(obj => {\n      if (!obj.paused && doUpdate) {\n        obj.trigger(\"update\");\n      }\n    });\n\n    if (doUpdate) {\n      for (const f of scene.action) {\n        f();\n      }\n    }\n\n    // calculate camera matrix\n    const size = vec2(gfx.width(), gfx.height());\n    const cam = scene.cam;\n    const shake = vec2FromAngle(rand(0, Math.PI * 2)).scale(cam.shake);\n\n    cam.shake = lerp(cam.shake, 0, 5 * dt());\n    scene.camMatrix = mat4()\n      .translate(size.scale(0.5))\n      .scale(cam.scale)\n      .rotateZ(cam.angle)\n      .translate(size.scale(-0.5))\n      .translate(\n        cam.pos\n          .scale(-1)\n          .add(size.scale(0.5))\n          .add(shake)\n      );\n\n    scene.camMousePos = scene.camMatrix.invert().multVec2(app.mousePos());\n\n    // draw every obj\n    every(obj => {\n      if (!obj.hidden) {\n        gfx.pushTransform();\n\n        if (isCamLayer(obj.layer)) {\n          gfx.pushMatrix(scene.camMatrix);\n        }\n\n        obj.trigger(\"draw\");\n        gfx.popTransform();\n      }\n    });\n\n    for (const f of scene.render) {\n      f();\n    }\n  }\n\n  function handleEvents() {\n    const scene = curScene();\n\n    for (const e of scene.events.charInput) {\n      app.charInputted().forEach(e.cb);\n    }\n\n    // run input checks & callbacks\n    for (const e of scene.events.keyDown) {\n      if (app.keyDown(e.key)) {\n        e.cb();\n      }\n    }\n\n    for (const e of scene.events.keyPress) {\n      if (app.keyPressed(e.key)) {\n        e.cb();\n      }\n    }\n\n    for (const e of scene.events.keyPressRep) {\n      if (app.keyPressedRep(e.key)) {\n        e.cb();\n      }\n    }\n\n    for (const e of scene.events.keyRelease) {\n      if (app.keyReleased(e.key)) {\n        e.cb();\n      }\n    }\n\n    for (const e of scene.events.mouseDown) {\n      if (app.mouseDown()) {\n        e.cb();\n      }\n    }\n\n    for (const e of scene.events.mouseClick) {\n      if (app.mouseClicked()) {\n        e.cb();\n      }\n    }\n\n    for (const e of scene.events.mouseRelease) {\n      if (app.mouseReleased()) {\n        e.cb();\n      }\n    }\n  }\n\n  function drawInspect() {\n    const scene = curScene();\n    let inspecting = null;\n    const font = assets.defFont();\n    const lcolor = rgba(gconf.inspectColor ? gconf.inspectColor : [0, 1, 1, 1]);\n\n    function drawInspectTxt(pos, txt, scale) {\n      const pad = vec2(4).scale(1 / scale);\n\n      const ftxt = gfx.fmtText(txt, font, {\n        size: 12 / scale,\n        pos: pos.add(vec2(pad.x, pad.y))\n      });\n\n      gfx.drawRect(pos, ftxt.width + pad.x * 2, ftxt.height + pad.x * 2, {\n        color: rgba(0, 0, 0, 1)\n      });\n\n      gfx.drawFmtText(ftxt);\n    }\n\n    function drawObj(obj, f) {\n      const isCam = isCamLayer(obj.layer);\n      const scale =\n        gfx.scale() * (isCam ? (scene.cam.scale.x + scene.cam.scale.y) / 2 : 1);\n      if (isCam) {\n        gfx.pushTransform();\n        gfx.pushMatrix(scene.camMatrix);\n      }\n      f(scale);\n      if (isCam) {\n        gfx.popTransform();\n      }\n    }\n\n    revery(obj => {\n      if (!obj.area) {\n        return;\n      }\n\n      if (obj.hidden) {\n        return;\n      }\n\n      drawObj(obj, scale => {\n        if (!inspecting) {\n          if (obj.isHovered()) {\n            inspecting = obj;\n          }\n        }\n\n        const lwidth = (inspecting === obj ? 6 : 2) / scale;\n        const a = obj._worldArea();\n        const w = a.p2.x - a.p1.x;\n        const h = a.p2.y - a.p1.y;\n\n        gfx.drawRectStroke(a.p1, w, h, {\n          width: lwidth,\n          color: lcolor\n        });\n      });\n    });\n\n    if (inspecting) {\n      drawObj(inspecting, scale => {\n        const mpos = mousePos(inspecting.layer);\n        const lines = [];\n\n        for (const tag of inspecting._tags) {\n          lines.push(`\"${tag}\"`);\n        }\n\n        for (const inspect of inspecting._events.inspect) {\n          const info = inspect();\n          for (const field in info) {\n            lines.push(`${field}: ${info[field]}`);\n          }\n        }\n\n        drawInspectTxt(mpos, lines.join(\"\\n\"), scale);\n      });\n    }\n\n    drawInspectTxt(vec2(0), app.fps() + \"\", gfx.scale());\n  }\n\n  // start the game with a scene\n  function start(name, ...args) {\n    app.run(() => {\n      gfx.frameStart();\n\n      if (!game.loaded) {\n        // if assets are not fully loaded, draw a progress bar\n        const progress = assets.loadProgress();\n\n        if (progress === 1) {\n          game.loaded = true;\n          switchScene(name, ...args);\n          if (net) {\n            net.connect().catch(logger.error);\n          }\n        } else {\n          const w = gfx.width() / 2;\n          const h = 24 / gfx.scale();\n          const pos = vec2(gfx.width() / 2, gfx.height() / 2).sub(\n            vec2(w / 2, h / 2)\n          );\n          gfx.drawRect(vec2(0), gfx.width(), gfx.height(), {\n            color: rgb(0, 0, 0)\n          });\n          gfx.drawRectStroke(pos, w, h, { width: 4 / gfx.scale() });\n          gfx.drawRect(pos, w * progress, h);\n        }\n      } else {\n        try {\n          if (!curScene()) {\n            throw new Error(`scene not found: '${game.curScene}'`);\n          }\n\n          handleEvents();\n          gameFrame();\n\n          if (debug.inspect) {\n            drawInspect();\n          }\n        } catch (e) {\n          logger.error(e.stack);\n          app.quit();\n        }\n\n        if (debug.showLog) {\n          logger.draw();\n        }\n\n        if (game.nextScene) {\n          switchScene.apply(null, [\n            game.nextScene.name,\n            ...game.nextScene.args\n          ]);\n          game.nextScene = null;\n        }\n      }\n\n      gfx.frameEnd();\n    });\n  }\n\n  // TODO: have velocity here?\n  const pos = defComp(\"pos\", [], (...args) => {\n    return {\n      pos: vec2(...args),\n\n      // TODO: check physics here?\n      move(...args) {\n        const p = vec2(...args);\n        const dx = p.x * dt();\n        const dy = p.y * dt();\n\n        this.pos.x += dx;\n        this.pos.y += dy;\n      },\n\n      screenPos() {\n        const scene = curScene();\n        return scene.camMatrix.multVec2(this.pos);\n      },\n\n      inspect() {\n        return {\n          pos: `(${~~this.pos.x}, ${~~this.pos.y})`\n        };\n      }\n    };\n  });\n\n  // TODO: allow single number assignment\n  const scale = defComp(\"scale\", [], (...args) => {\n    if (args.length === 0) {\n      return scale(1);\n    }\n    return {\n      scale: vec2(...args),\n      flipX(s) {\n        this.scale.x = Math.sign(s) * Math.abs(this.scale.x);\n      },\n      flipY(s) {\n        this.scale.y = Math.sign(s) * Math.abs(this.scale.y);\n      }\n    };\n  });\n\n  const rotate = defComp(\"rotate\", [], r => {\n    return {\n      angle: r ? r : 0\n    };\n  });\n\n  const color = defComp(\"color\", [], (...args) => {\n    return {\n      color: rgba(...args)\n    };\n  });\n\n  const origin = defComp(\"origin\", [], origin => {\n    return {\n      origin\n    };\n  });\n\n  const layer = defComp(\"layer\", [], layer => {\n    return {\n      layer,\n      inspect() {\n        const scene = curScene();\n        return {\n          layer: this.layer ? this.layer : scene.defLayer\n        };\n      }\n    };\n  });\n\n  function isSameLayer(o1, o2) {\n    const scene = curScene();\n    return (\n      (o1.layer ? o1.layer : scene.defLayer) ===\n      (o2.layer ? o2.layer : scene.defLayer)\n    );\n  }\n\n  // TODO: active flag\n  // TODO: tell which size collides\n  // TODO: dynamic update when size change\n  const area = defComp(\"area\", [], (p1, p2) => {\n    const colliding = {};\n    const overlapping = {};\n\n    return {\n      area: {\n        p1: p1,\n        p2: p2\n      },\n\n      areaWidth() {\n        const { p1, p2 } = this._worldArea();\n        return p2.x - p1.x;\n      },\n\n      areaHeight() {\n        const { p1, p2 } = this._worldArea();\n        return p2.y - p1.y;\n      },\n\n      isClicked() {\n        return app.mouseClicked() && this.isHovered();\n      },\n\n      isHovered() {\n        return this.hasPt(mousePos(this.layer));\n      },\n\n      isCollided(other) {\n        if (!other.area) {\n          return false;\n        }\n\n        if (!isSameLayer(this, other)) {\n          return false;\n        }\n\n        const a1 = this._worldArea();\n        const a2 = other._worldArea();\n\n        return colRectRect(a1, a2);\n      },\n\n      isOverlapped(other) {\n        if (!other.area) {\n          return false;\n        }\n\n        if (!isSameLayer(this, other)) {\n          return false;\n        }\n\n        const a1 = this._worldArea();\n        const a2 = other._worldArea();\n\n        return overlapRectRect(a1, a2);\n      },\n\n      clicks(f) {\n        this.action(() => {\n          if (this.isClicked()) {\n            f();\n          }\n        });\n      },\n\n      hovers(f) {\n        this.action(() => {\n          if (this.isHovered()) {\n            f();\n          }\n        });\n      },\n\n      collides(tag, f) {\n        this.action(() => {\n          this._checkCollisions(tag, f);\n        });\n      },\n\n      overlaps(tag, f) {\n        this.action(() => {\n          this._checkOverlaps(tag, f);\n        });\n      },\n\n      hasPt(pt) {\n        const a = this._worldArea();\n        return colRectPt(\n          {\n            p1: a.p1,\n            p2: a.p2\n          },\n          pt\n        );\n      },\n\n      // TODO: make overlap events still trigger\n      // push an obj out of another if they're overlapped\n      pushOut(obj) {\n        if (obj === this) {\n          return null;\n        }\n\n        if (!obj.area) {\n          return null;\n        }\n\n        if (!isSameLayer(this, obj)) {\n          return null;\n        }\n\n        const a1 = this._worldArea();\n        const a2 = obj._worldArea();\n\n        if (!colRectRect(a1, a2)) {\n          return null;\n        }\n\n        const disLeft = a1.p2.x - a2.p1.x;\n        const disRight = a2.p2.x - a1.p1.x;\n        const disTop = a1.p2.y - a2.p1.y;\n        const disBottom = a2.p2.y - a1.p1.y;\n        const min = Math.min(disLeft, disRight, disTop, disBottom);\n\n        switch (min) {\n          case disLeft:\n            this.pos.x -= disLeft;\n            return {\n              obj: obj,\n              side: \"right\",\n              dis: -disLeft\n            };\n          case disRight:\n            this.pos.x += disRight;\n            return {\n              obj: obj,\n              side: \"left\",\n              dis: disRight\n            };\n          case disTop:\n            this.pos.y -= disTop;\n            return {\n              obj: obj,\n              side: \"bottom\",\n              dis: -disTop\n            };\n          case disBottom:\n            this.pos.y += disBottom;\n            return {\n              obj: obj,\n              side: \"top\",\n              dis: disBottom\n            };\n        }\n\n        return null;\n      },\n\n      // push object out of other solid objects\n      pushOutAll() {\n        return every(\n          other => (other.solid ? this.pushOut(other) : null)\n        ).filter(res => res != null);\n      },\n\n      _checkCollisions(tag, f) {\n        every(tag, obj => {\n          if (this === obj) {\n            return;\n          }\n          if (colliding[obj._id]) {\n            return;\n          }\n          if (this.isCollided(obj)) {\n            f(obj);\n            colliding[obj._id] = obj;\n          }\n        });\n\n        for (const id in colliding) {\n          const obj = colliding[id];\n          if (!this.isCollided(obj)) {\n            delete colliding[id];\n          }\n        }\n      },\n\n      // TODO: repetitive with collides\n      _checkOverlaps(tag, f) {\n        every(tag, obj => {\n          if (this === obj) {\n            return;\n          }\n          if (overlapping[obj._id]) {\n            return;\n          }\n          if (this.isOverlapped(obj)) {\n            f(obj);\n            overlapping[obj._id] = obj;\n          }\n        });\n\n        for (const id in overlapping) {\n          const obj = overlapping[id];\n          if (!this.isOverlapped(obj)) {\n            delete overlapping[id];\n          }\n        }\n      },\n\n      // TODO: cache\n      // TODO: use matrix mult for more accuracy and rotation?\n      _worldArea() {\n        const a = this.area;\n        const pos = this.pos || vec2(0);\n        const scale = this.scale || vec2(1);\n        const p1 = pos.add(a.p1.scale(scale));\n        const p2 = pos.add(a.p2.scale(scale));\n\n        const area = {\n          p1: vec2(Math.min(p1.x, p2.x), Math.min(p1.y, p2.y)),\n          p2: vec2(Math.max(p1.x, p2.x), Math.max(p1.y, p2.y))\n        };\n\n        return area;\n      }\n    };\n  });\n\n  function getAreaFromSize(w, h, o) {\n    const size = vec2(w, h);\n    const offset = originPt(o || DEF_ORIGIN)\n      .scale(size)\n      .scale(-0.5);\n    return area(offset.sub(size.scale(0.5)), offset.add(size.scale(0.5)));\n  }\n\n  const sprite = defComp(\"sprite\", [], (id, conf = {}) => {\n    let spr = assets.sprites[id];\n\n    if (!spr) {\n      throw new Error(`sprite not found: \"${id}\"`);\n    }\n\n    const q = { ...spr.frames[0] };\n\n    if (conf.quad) {\n      q.x += conf.quad.x * q.w;\n      q.y += conf.quad.y * q.h;\n      q.w *= conf.quad.w;\n      q.h *= conf.quad.h;\n    }\n\n    const width = spr.tex.width * q.w;\n    const height = spr.tex.height * q.h;\n\n    // SPRITE ===\n    let curAnim = null;\n\n    return {\n      width: width,\n      height: height,\n      animSpeed: conf.animSpeed || 0.1,\n      frame: conf.frame || 0,\n      quad: conf.quad || quad(0, 0, 1, 1),\n\n      add() {\n        // add default area\n        if (!this.area && !conf.noArea) {\n          this.use(getAreaFromSize(this.width, this.height, this.origin));\n        }\n      },\n\n      draw() {\n        const scene = curScene();\n        const q = spr.frames[this.frame];\n\n        drawSprite(spr, {\n          pos: this.pos,\n          scale: this.scale,\n          rot: this.angle,\n          color: this.color,\n          frame: this.frame,\n          origin: this.origin,\n          quad: this.quad,\n          prog: assets.shaders[this.shader],\n          uniform: this.uniform\n        });\n      },\n\n      update() {\n        if (!curAnim) {\n          return;\n        }\n\n        const anim = spr.anims[curAnim.name];\n\n        curAnim.timer += dt();\n\n        if (curAnim.timer >= this.animSpeed) {\n          // TODO: anim dir\n          this.frame++;\n          if (this.frame > anim.to) {\n            if (curAnim.loop) {\n              this.frame = anim.from;\n            } else {\n              this.frame--;\n              this.stop();\n            }\n          }\n          if (curAnim) {\n            curAnim.timer -= this.animSpeed;\n          }\n        }\n      },\n\n      play(name, loop = true) {\n        const anim = spr.anims[name];\n\n        if (!anim) {\n          throw new Error(`anim not found: ${name}`);\n        }\n\n        if (curAnim) {\n          this.stop();\n        }\n\n        curAnim = {\n          name: name,\n          loop: loop,\n          timer: 0\n        };\n\n        this.frame = anim.from;\n        this.trigger(\"animPlay\", name);\n      },\n\n      stop() {\n        if (!curAnim) {\n          return;\n        }\n        const prevAnim = curAnim.name;\n        curAnim = null;\n        this.trigger(\"animEnd\", prevAnim);\n      },\n\n      changeSprite(id) {\n        spr = assets.sprites[id];\n\n        if (!spr) {\n          throw new Error(`sprite not found: \"${id}\"`);\n        }\n\n        const q = { ...spr.frames[0] };\n\n        if (conf.quad) {\n          q.x += conf.quad.x * q.w;\n          q.y += conf.quad.y * q.h;\n          q.w *= conf.quad.w;\n          q.h *= conf.quad.h;\n        }\n\n        this.width = spr.tex.width * q.w;\n        this.height = spr.tex.height * q.h;\n\n        if (this.area && !conf.noArea) {\n          this.use(getAreaFromSize(this.width, this.height, this.origin));\n        }\n\n        curAnim = null;\n        this.frame = 0;\n      },\n\n      numFrames() {\n        return spr.frames.length;\n      },\n\n      curAnim() {\n        return curAnim && curAnim.name;\n      },\n\n      inspect() {\n        // SpriteCompInspect\n        const info = {};\n        if (curAnim) {\n          info.curAnim = `\"${curAnim.name}\"`;\n        }\n        return info;\n      }\n    };\n  });\n\n  const text = defComp(\"text\", [], (t, size, conf = {}) => {\n    return {\n      text: t,\n      textSize: size,\n      font: conf.font,\n      // TODO: calc these at init\n      width: 0,\n      height: 0,\n\n      add() {\n        // add default area\n        if (!this.area && !conf.noArea) {\n          const scene = curScene();\n          const font = assets.fonts[this.font ? this.font : DEF_FONT];\n          const ftext = gfx.fmtText(this.text + \"\", font, {\n            pos: this.pos,\n            scale: this.scale,\n            rot: this.angle,\n            size: this.textSize,\n            origin: this.origin,\n            color: this.color,\n            width: conf.width\n          });\n          this.width = ftext.width / ((this.scale && this.scale.x) || 1);\n          this.height = ftext.height / ((this.scale && this.scale.y) || 1);\n          this.use(getAreaFromSize(this.width, this.height, this.origin));\n        }\n      },\n\n      draw() {\n        const scene = curScene();\n        const font = assets.fonts[this.font ? this.font : DEF_FONT];\n\n        const ftext = gfx.fmtText(this.text + \"\", font, {\n          pos: this.pos,\n          scale: this.scale,\n          rot: this.angle,\n          size: this.textSize,\n          origin: this.origin,\n          color: this.color,\n          width: conf.width\n        });\n\n        this.width = ftext.width;\n        this.height = ftext.height;\n\n        gfx.drawFmtText(ftext);\n      }\n    };\n  });\n\n  const rect = defComp(\"rect\", [], (w, h, conf = {}) => {\n    return {\n      width: w,\n      height: h,\n\n      add() {\n        // add default area\n        if (!this.area && !conf.noArea) {\n          this.use(getAreaFromSize(this.width, this.height, this.origin));\n        }\n      },\n\n      draw() {\n        const scene = curScene();\n\n        gfx.drawRect(this.pos, this.width, this.height, {\n          scale: this.scale,\n          rot: this.angle,\n          color: this.color,\n          origin: this.origin,\n          prog: assets.shaders[this.shader],\n          uniform: this.uniform\n        });\n      }\n    };\n  });\n\n  const solid = defComp(\"solid\", [], () => {\n    return {\n      solid: true\n    };\n  });\n\n  // maximum y velocity with body()\n  const DEF_MAX_VEL = 960;\n  const DEF_JUMP_FORCE = 480;\n\n  const body = defComp(\"body\", [\"pos\", \"area\"], (conf = {}) => {\n    let velY = 0;\n    //  GameObj\n    let curPlatform = null;\n    let lastPlatformPos = null;\n    const maxVel = conf.maxVel ? conf.maxVel : DEF_MAX_VEL;\n\n    return {\n      jumpForce: conf.jumpForce ? conf.jumpForce : DEF_JUMP_FORCE,\n\n      update() {\n        this.move(0, velY);\n\n        const targets = this.pushOutAll();\n        let justOff = false;\n\n        // check if loses current platform\n        if (curPlatform) {\n          if (!curPlatform.exists() || !this.isCollided(curPlatform)) {\n            curPlatform = null;\n            lastPlatformPos = null;\n            justOff = true;\n          } else {\n            if (lastPlatformPos) {\n              // sticky platform\n              this.pos = this.pos.add(curPlatform.pos.sub(lastPlatformPos));\n              lastPlatformPos = curPlatform.pos.clone();\n            }\n          }\n        }\n\n        if (!curPlatform) {\n          velY = Math.min(velY + gravity() * dt(), maxVel);\n\n          // check if grounded to a new platform\n          for (const target of targets) {\n            if (target.side === \"bottom\" && velY > 0) {\n              curPlatform = target.obj;\n              velY = 0;\n              // TODO: might not have pos\n              lastPlatformPos = curPlatform.pos.clone();\n              if (!justOff) {\n                this.trigger(\"grounded\", curPlatform);\n              }\n            } else if (target.side === \"top\" && velY < 0) {\n              velY = 0;\n              this.trigger(\"headbutt\", target.obj);\n            }\n          }\n        }\n      },\n\n      curPlatform() {\n        return curPlatform;\n      },\n\n      grounded() {\n        return curPlatform !== null;\n      },\n\n      falling() {\n        return velY > 0;\n      },\n\n      jump(force) {\n        curPlatform = null;\n        velY = -force || -this.jumpForce;\n      }\n    };\n  });\n\n  const shader = defComp(\"shader\", [], (id, uniform = {}) => {\n    const prog = assets.shaders[id];\n    return {\n      shader: id,\n      uniform: uniform\n    };\n  });\n\n  const debug = {\n    paused: false,\n    inspect: false,\n    timeScale: 1,\n    showLog: true,\n    fps: app.fps,\n    objCount() {\n      return curScene().objs.size;\n    },\n    stepFrame() {\n      gameFrame(true);\n    },\n    drawCalls: gfx.drawCalls,\n    clearLog: logger.clear,\n    log: logger.info,\n    error: logger.error\n  };\n\n  const gridder = defComp(\"gridder\", [], (level, pos) => {\n    return {\n      gridPos: pos.clone(),\n\n      setGridPos(p) {\n        this.gridPos = p.clone();\n        this.pos = vec2(\n          level.offset().x + this.gridPos.x * level.gridWidth(),\n          level.offset().y + this.gridPos.y * level.gridHeight()\n        );\n      },\n\n      moveLeft() {\n        this.setGridPos(this.gridPos.add(vec2(-1, 0)));\n      },\n\n      moveRight() {\n        this.setGridPos(this.gridPos.add(vec2(1, 0)));\n      },\n\n      moveUp() {\n        this.setGridPos(this.gridPos.add(vec2(0, -1)));\n      },\n\n      moveDown() {\n        this.setGridPos(this.gridPos.add(vec2(0, 1)));\n      }\n    };\n  });\n\n  function addLevel(map, conf) {\n    const pool = []; // GameObj[]\n    const offset = vec2(conf.pos || 0);\n    let longRow = 0;\n\n    const level = {\n      offset() {\n        return offset.clone();\n      },\n\n      gridWidth() {\n        return conf.width;\n      },\n\n      gridHeight() {\n        return conf.height;\n      },\n\n      getPos(...args) {\n        const p = vec2(...args);\n        return vec2(offset.x + p.x * conf.width, offset.y + p.y * conf.height);\n      },\n\n      spawn(sym, p) {\n        const comps = (() => {\n          if (Array.isArray(sym)) {\n            return sym;\n          } else if (conf[sym]) {\n            if (typeof conf[sym] === \"function\") {\n              return conf[sym]();\n            } else if (Array.isArray(conf[sym])) {\n              return [...conf[sym]];\n            }\n          } else if (conf.any) {\n            return conf.any(sym);\n          }\n        })();\n\n        if (!comps) {\n          return;\n        }\n\n        comps.push(\n          pos(offset.x + p.x * conf.width, offset.y + p.y * conf.height)\n        );\n\n        const obj = add(comps);\n\n        pool.push(obj);\n\n        obj.use(gridder(this, p));\n\n        return obj;\n      },\n\n      width() {\n        return longRow * conf.width;\n      },\n\n      height() {\n        return map.length * conf.height;\n      },\n\n      destroy() {\n        for (const obj of pool) {\n          destroy(obj);\n        }\n      }\n    };\n\n    map.forEach((row, i) => {\n      const syms = row.split(\"\");\n\n      longRow = Math.max(syms.length, longRow);\n\n      syms.forEach((sym, j) => {\n        level.spawn(sym, vec2(j, i));\n      });\n    });\n\n    return level;\n  }\n\n  const ctx = {\n    start,\n    // asset load\n    loadRoot: assets.loadRoot,\n    loadSprite: assets.loadSprite,\n    loadSound: assets.loadSound,\n    loadFont: assets.loadFont,\n    loadShader: assets.loadShader,\n    addLoader: assets.addLoader,\n    // query\n    width: gfx.width,\n    height: gfx.height,\n    // center: gfx.center,\n    dt: dt,\n    time: app.time,\n    screenshot: app.screenshot,\n    focused: app.focused,\n    focus: app.focus,\n    // scene\n    scene,\n    go,\n    sceneData,\n    // misc\n    layers,\n    camPos,\n    camScale,\n    camRot,\n    camShake,\n    camIgnore,\n    gravity,\n    // obj\n    add,\n    readd,\n    destroy,\n    destroyAll,\n    get,\n    every,\n    revery,\n    defComp,\n    // net\n    sync,\n    send,\n    recv,\n    // comps\n    pos,\n    scale,\n    rotate,\n    color,\n    origin,\n    layer,\n    area,\n    sprite,\n    text,\n    rect,\n    solid,\n    body,\n    shader,\n    // group events\n    on,\n    action,\n    render,\n    collides,\n    overlaps,\n    clicks,\n    // input\n    keyDown,\n    keyPress,\n    keyPressRep,\n    keyRelease,\n    charInput,\n    mouseDown,\n    mouseClick,\n    mouseRelease,\n    mousePos,\n    cursor: app.cursor,\n    keyIsDown: app.keyDown,\n    keyIsPressed: app.keyPressed,\n    keyIsPressedRep: app.keyPressedRep,\n    keyIsReleased: app.keyReleased,\n    mouseIsDown: app.mouseDown,\n    mouseIsClicked: app.mouseClicked,\n    mouseIsReleased: app.mouseReleased,\n    // timer\n    loop,\n    wait,\n    // audio\n    play,\n    volume: audio.volume,\n    // math\n    makeRng,\n    rand,\n    randSeed,\n    vec2,\n    rgb,\n    rgba,\n    quad,\n    choose,\n    chance,\n    lerp,\n    map,\n    mapc,\n    wave,\n    deg2rad,\n    rad2deg,\n    // raw draw\n    drawSprite,\n    drawText,\n    drawRect: gfx.drawRect,\n    drawRectStroke: gfx.drawRectStroke,\n    drawLine: gfx.drawLine,\n    // debug\n    debug,\n    // level\n    addLevel\n  };\n\n  if (gconf.plugins) {\n    for (const src of gconf.plugins) {\n      const map = src(ctx);\n      for (const k in map) {\n        ctx[k] = map[k];\n      }\n    }\n  }\n\n  if (gconf.global) {\n    for (const k in ctx) {\n      window[k] = ctx[k];\n    }\n  }\n\n  return ctx;\n};\n\nexport default kaboom;\n"],
"names":["kaboom","gconf","sync","obj","net","Error","scene","curScene","travelers","push","_id","send","NetMsg","AddObj","_data","recv","ty","handler","data","id","err","logger","error","dt","app","debug","timeScale","play","conf","sound","assets","sounds","audio","isCamLayer","layer","noCam","layers","defLayer","mousePos","camMousePos","drawSprite","spr","sprites","q","frames","frame","gfx","drawTexture","tex","quad","drawText","txt","fid","font","DEF_FONT","fonts","name","cb","game","scenes","init","initialized","events","add","update","draw","destroy","keyDown","keyPress","keyPressRep","keyRelease","mouseClick","mouseRelease","mouseDown","charInput","action","render","objs","Map","lastObjID","timers","lastTimerID","cam","pos","vec2","width","height","scale","angle","shake","camMatrix","mat4","gravity","DEF_GRAVITY","visitors","sceneData","regDebugInputs","showLog","info","inspect","clearLog","paused","clamp","toFixed","stepFrame","go","args","nextScene","switchScene","reload","e","stack","list","def","forEach","idx","alpha","order","camPos","length","clone","camScale","camRot","undefined","camShake","intensity","camIgnore","defComp","require","builder","comp","compReg","makeComp","comps","compStates","customState","hidden","_tags","_client","_events","use","stateContainer","k","bind","Object","defineProperty","get","set","val","c","exists","is","tag","Array","isArray","t","includes","on","event","trigger","f","call","ev","rmTag","indexOf","splice","tags","custom","deps","dep","readd","delete","collides","t1","t2","o1","_checkCollisions","o2","overlaps","_checkOverlaps","clicks","o","isClicked","wait","Promise","resolve","time","loop","stopped","newF","stop","pushKeyEvent","key","values","sort","l1","l2","filter","every","map","revery","reverse","destroyAll","g","gameFrame","ignorePause","doUpdate","size","vec2FromAngle","rand","Math","PI","lerp","translate","rotateZ","invert","multVec2","pushTransform","pushMatrix","popTransform","handleEvents","charInputted","keyPressed","keyPressedRep","keyReleased","mouseClicked","mouseReleased","drawInspect","drawInspectTxt","pad","ftxt","fmtText","x","y","drawRect","color","rgba","drawFmtText","drawObj","isCam","inspecting","defFont","lcolor","inspectColor","area","isHovered","lwidth","a","_worldArea","w","p2","p1","h","drawRectStroke","mpos","lines","field","join","fps","start","run","frameStart","loaded","progress","loadProgress","connect","catch","sub","rgb","quit","apply","frameEnd","isSameLayer","getAreaFromSize","offset","originPt","DEF_ORIGIN","addLevel","pool","longRow","level","gridWidth","gridHeight","getPos","p","spawn","sym","any","gridder","row","i","syms","split","max","j","fullscreen","crisp","canvas","logMax","root","document","body","appInit","gfxInit","gl","clearColor","texFilter","audioInit","assetsInit","errHandler","loggerInit","netInit","UpdateObj","DestroyObj","Disconnect","oid","move","dx","dy","screenPos","flipX","s","sign","abs","flipY","rotate","r","origin","colliding","overlapping","areaWidth","areaHeight","hasPt","isCollided","other","a1","a2","colRectRect","isOverlapped","overlapRectRect","hovers","pt","colRectPt","pushOut","disLeft","disRight","disTop","disBottom","min","side","dis","pushOutAll","solid","res","sprite","curAnim","animSpeed","noArea","rot","prog","shaders","shader","uniform","anim","anims","timer","to","from","prevAnim","changeSprite","numFrames","text","textSize","ftext","rect","DEF_MAX_VEL","DEF_JUMP_FORCE","velY","curPlatform","lastPlatformPos","maxVel","jumpForce","targets","justOff","target","grounded","falling","jump","force","objCount","drawCalls","clear","log","gridPos","setGridPos","moveLeft","moveRight","moveUp","moveDown","ctx","loadRoot","loadSprite","loadSound","loadFont","loadShader","addLoader","screenshot","focused","focus","cursor","keyIsDown","keyIsPressed","keyIsPressedRep","keyIsReleased","mouseIsDown","mouseIsClicked","mouseIsReleased","volume","makeRng","randSeed","choose","chance","mapc","wave","deg2rad","rad2deg","drawLine","plugins","src","global","window","$jscompDefaultExport","$jscomp$tmp$exports$module$name"]
}
