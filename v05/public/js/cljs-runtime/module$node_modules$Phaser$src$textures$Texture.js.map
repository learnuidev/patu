{
"version":3,
"file":"module$node_modules$Phaser$src$textures$Texture.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/Phaser/src/textures/Texture.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$textures$Texture\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Frame = require('./Frame');\r\nvar TextureSource = require('./TextureSource');\r\n\r\nvar TEXTURE_MISSING_ERROR = 'Texture.frame missing: ';\r\n\r\n/**\r\n * @classdesc\r\n * A Texture consists of a source, usually an Image from the Cache, and a collection of Frames.\r\n * The Frames represent the different areas of the Texture. For example a texture atlas\r\n * may have many Frames, one for each element within the atlas. Where-as a single image would have\r\n * just one frame, that encompasses the whole image.\r\n *\r\n * Textures are managed by the global TextureManager. This is a singleton class that is\r\n * responsible for creating and delivering Textures and their corresponding Frames to Game Objects.\r\n *\r\n * Sprites and other Game Objects get the texture data they need from the TextureManager.\r\n *\r\n * @class Texture\r\n * @memberOf Phaser.Textures\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.TextureManager} manager - A reference to the Texture Manager this Texture belongs to.\r\n * @param {string} key - The unique string-based key of this Texture.\r\n * @param {(HTMLImageElement[]|HTMLCanvasElement[])} source - An array of sources that are used to create the texture. Usually Images, but can also be a Canvas.\r\n * @param {number} [width] - The width of the Texture. This is optional and automatically derived from the source images.\r\n * @param {number} [height] - The height of the Texture. This is optional and automatically derived from the source images.\r\n */\r\nvar Texture = new Class({\r\n\r\n    initialize:\r\n\r\n    function Texture (manager, key, source, width, height)\r\n    {\r\n        if (!Array.isArray(source))\r\n        {\r\n            source = [ source ];\r\n        }\r\n\r\n        /**\r\n         * A reference to the Texture Manager this Texture belongs to.\r\n         *\r\n         * @name Phaser.Textures.Texture#manager\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = manager;\r\n\r\n        /**\r\n         * The unique string-based key of this Texture.\r\n         *\r\n         * @name Phaser.Textures.Texture#key\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.key = key;\r\n\r\n        /**\r\n         * An array of TextureSource instances.\r\n         * These are unique to this Texture and contain the actual Image (or Canvas) data.\r\n         *\r\n         * @name Phaser.Textures.Texture#source\r\n         * @type {Phaser.Textures.TextureSource[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.source = [];\r\n\r\n        /**\r\n         * An array of TextureSource data instances.\r\n         * Used to store additional data images, such as normal maps or specular maps.\r\n         *\r\n         * @name Phaser.Textures.Texture#dataSource\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.dataSource = [];\r\n\r\n        /**\r\n         * A key-value object pair associating the unique Frame keys with the Frames objects.\r\n         *\r\n         * @name Phaser.Textures.Texture#frames\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.frames = {};\r\n\r\n        /**\r\n         * Any additional data that was set in the source JSON (if any),\r\n         * or any extra data you'd like to store relating to this texture\r\n         *\r\n         * @name Phaser.Textures.Texture#customData\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.customData = {};\r\n\r\n        /**\r\n         * The name of the first frame of the Texture.\r\n         *\r\n         * @name Phaser.Textures.Texture#firstFrame\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.firstFrame = '__BASE';\r\n\r\n        /**\r\n         * The total number of Frames in this Texture.\r\n         *\r\n         * @name Phaser.Textures.Texture#frameTotal\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.frameTotal = 0;\r\n\r\n        //  Load the Sources\r\n        for (var i = 0; i < source.length; i++)\r\n        {\r\n            this.source.push(new TextureSource(this, source[i], width, height));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds a new Frame to this Texture.\r\n     *\r\n     * A Frame is a rectangular region of a TextureSource with a unique index or string-based key.\r\n     *\r\n     * @method Phaser.Textures.Texture#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|string)} name - The name of this Frame. The name is unique within the Texture.\r\n     * @param {integer} sourceIndex - The index of the TextureSource that this Frame is a part of.\r\n     * @param {number} x - The x coordinate of the top-left of this Frame.\r\n     * @param {number} y - The y coordinate of the top-left of this Frame.\r\n     * @param {number} width - The width of this Frame.\r\n     * @param {number} height - The height of this Frame.\r\n     *\r\n     * @return {Phaser.Textures.Frame} The Frame that was added to this Texture.\r\n     */\r\n    add: function (name, sourceIndex, x, y, width, height)\r\n    {\r\n        var frame = new Frame(this, name, sourceIndex, x, y, width, height);\r\n\r\n        this.frames[name] = frame;\r\n\r\n        //  Set the first frame of the Texture (other than __BASE)\r\n        //  This is used to ensure we don't spam the display with entire\r\n        //  atlases of sprite sheets, but instead just the first frame of them\r\n        //  should the dev incorrectly specify the frame index\r\n        if (this.frameTotal === 1)\r\n        {\r\n            this.firstFrame = name;\r\n        }\r\n\r\n        this.frameTotal++;\r\n\r\n        return frame;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if a Frame matching the given key exists within this Texture.\r\n     *\r\n     * @method Phaser.Textures.Texture#has\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The key of the Frame to check for.\r\n     *\r\n     * @return {boolean} True if a Frame with the matching key exists in this Texture.\r\n     */\r\n    has: function (name)\r\n    {\r\n        return (this.frames[name]);\r\n    },\r\n\r\n    /**\r\n     * Gets a Frame from this Texture based on either the key or the index of the Frame.\r\n     *\r\n     * In a Texture Atlas Frames are typically referenced by a key.\r\n     * In a Sprite Sheet Frames are referenced by an index.\r\n     * Passing no value for the name returns the base texture.\r\n     *\r\n     * @method Phaser.Textures.Texture#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer)} [name] - The string-based name, or integer based index, of the Frame to get from this Texture.\r\n     *\r\n     * @return {Phaser.Textures.Frame} The Texture Frame.\r\n     */\r\n    get: function (name)\r\n    {\r\n        //  null, undefined, empty string, zero\r\n        if (!name)\r\n        {\r\n            name = this.firstFrame;\r\n        }\r\n\r\n        var frame = this.frames[name];\r\n\r\n        if (!frame)\r\n        {\r\n            console.warn(TEXTURE_MISSING_ERROR + name);\r\n\r\n            frame = this.frames[this.firstFrame];\r\n        }\r\n\r\n        return frame;\r\n    },\r\n\r\n    /**\r\n     * Takes the given TextureSource and returns the index of it within this Texture.\r\n     * If it's not in this Texture, it returns -1.\r\n     * Unless this Texture has multiple TextureSources, such as with a multi-atlas, this\r\n     * method will always return zero or -1.\r\n     *\r\n     * @method Phaser.Textures.Texture#getTextureSourceIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Textures.TextureSource} source - The TextureSource to check.\r\n     *\r\n     * @return {integer} The index of the TextureSource within this Texture, or -1 if not in this Texture.\r\n     */\r\n    getTextureSourceIndex: function (source)\r\n    {\r\n        for (var i = 0; i < this.source.length; i++)\r\n        {\r\n            if (this.source[i] === source)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of all the Frames in the given TextureSource.\r\n     *\r\n     * @method Phaser.Textures.Texture#getFramesFromTextureSource\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} sourceIndex - The index of the TextureSource to get the Frames from.\r\n     * @param {boolean} [includeBase=false] - Include the `__BASE` Frame in the output array?\r\n     *\r\n     * @return {Phaser.Textures.Frame[]} An array of Texture Frames.\r\n     */\r\n    getFramesFromTextureSource: function (sourceIndex, includeBase)\r\n    {\r\n        if (includeBase === undefined) { includeBase = false; }\r\n\r\n        var out = [];\r\n\r\n        for (var frameName in this.frames)\r\n        {\r\n            if (frameName === '__BASE' && !includeBase)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var frame = this.frames[frameName];\r\n\r\n            if (frame.sourceIndex === sourceIndex)\r\n            {\r\n                out.push(frame);\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Returns an array with all of the names of the Frames in this Texture.\r\n     *\r\n     * Useful if you want to randomly assign a Frame to a Game Object, as you can\r\n     * pick a random element from the returned array.\r\n     *\r\n     * @method Phaser.Textures.Texture#getFrameNames\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [includeBase=false] - Include the `__BASE` Frame in the output array?\r\n     *\r\n     * @return {string[]} An array of all Frame names in this Texture.\r\n     */\r\n    getFrameNames: function (includeBase)\r\n    {\r\n        if (includeBase === undefined) { includeBase = false; }\r\n\r\n        var out = Object.keys(this.frames);\r\n\r\n        if (!includeBase)\r\n        {\r\n            var idx = out.indexOf('__BASE');\r\n\r\n            if (idx !== -1)\r\n            {\r\n                out.splice(idx, 1);\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Given a Frame name, return the source image it uses to render with.\r\n     *\r\n     * This will return the actual DOM Image or Canvas element.\r\n     *\r\n     * @method Phaser.Textures.Texture#getSourceImage\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer)} [name] - The string-based name, or integer based index, of the Frame to get from this Texture.\r\n     *\r\n     * @return {(HTMLImageElement|HTMLCanvasElement|Phaser.GameObjects.RenderTexture)} The DOM Image, Canvas Element or Render Texture.\r\n     */\r\n    getSourceImage: function (name)\r\n    {\r\n        if (name === undefined || name === null || this.frameTotal === 1)\r\n        {\r\n            name = '__BASE';\r\n        }\r\n\r\n        var frame = this.frames[name];\r\n\r\n        if (frame)\r\n        {\r\n            return frame.source.image;\r\n        }\r\n        else\r\n        {\r\n            console.warn(TEXTURE_MISSING_ERROR + name);\r\n\r\n            return this.frames['__BASE'].source.image;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Given a Frame name, return the data source image it uses to render with.\r\n     * You can use this to get the normal map for an image for example.\r\n     *\r\n     * This will return the actual DOM Image.\r\n     *\r\n     * @method Phaser.Textures.Texture#getDataSourceImage\r\n     * @since 3.7.0\r\n     *\r\n     * @param {(string|integer)} [name] - The string-based name, or integer based index, of the Frame to get from this Texture.\r\n     *\r\n     * @return {(HTMLImageElement|HTMLCanvasElement)} The DOM Image or Canvas Element.\r\n     */\r\n    getDataSourceImage: function (name)\r\n    {\r\n        if (name === undefined || name === null || this.frameTotal === 1)\r\n        {\r\n            name = '__BASE';\r\n        }\r\n\r\n        var frame = this.frames[name];\r\n        var idx;\r\n\r\n        if (!frame)\r\n        {\r\n            console.warn(TEXTURE_MISSING_ERROR + name);\r\n\r\n            idx = this.frames['__BASE'].sourceIndex;\r\n        }\r\n        else\r\n        {\r\n            idx = frame.sourceIndex;\r\n        }\r\n\r\n        return this.dataSource[idx].image;\r\n    },\r\n\r\n    /**\r\n     * Adds a data source image to this Texture.\r\n     *\r\n     * An example of a data source image would be a normal map, where all of the Frames for this Texture\r\n     * equally apply to the normal map.\r\n     *\r\n     * @method Phaser.Textures.Texture#setDataSource\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(HTMLImageElement|HTMLCanvasElement)} data - The source image.\r\n     */\r\n    setDataSource: function (data)\r\n    {\r\n        if (!Array.isArray(data))\r\n        {\r\n            data = [ data ];\r\n        }\r\n        \r\n        for (var i = 0; i < data.length; i++)\r\n        {\r\n            var source = this.source[i];\r\n\r\n            this.dataSource.push(new TextureSource(this, data[i], source.width, source.height));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the Filter Mode for this Texture.\r\n     *\r\n     * The mode can be either Linear, the default, or Nearest.\r\n     *\r\n     * For pixel-art you should use Nearest.\r\n     *\r\n     * The mode applies to the entire Texture, not just a specific Frame of it.\r\n     *\r\n     * @method Phaser.Textures.Texture#setFilter\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Textures.FilterMode} filterMode - The Filter Mode.\r\n     */\r\n    setFilter: function (filterMode)\r\n    {\r\n        var i;\r\n\r\n        for (i = 0; i < this.source.length; i++)\r\n        {\r\n            this.source[i].setFilter(filterMode);\r\n        }\r\n\r\n        for (i = 0; i < this.dataSource.length; i++)\r\n        {\r\n            this.dataSource[i].setFilter(filterMode);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Texture and releases references to its sources and frames.\r\n     *\r\n     * @method Phaser.Textures.Texture#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        var i;\r\n\r\n        for (i = 0; i < this.source.length; i++)\r\n        {\r\n            this.source[i].destroy();\r\n        }\r\n\r\n        for (i = 0; i < this.dataSource.length; i++)\r\n        {\r\n            this.dataSource[i].destroy();\r\n        }\r\n\r\n        for (var frameName in this.frames)\r\n        {\r\n            var frame = this.frames[frameName];\r\n\r\n            frame.destroy();\r\n        }\r\n\r\n        this.source = [];\r\n        this.dataSource = [];\r\n        this.frames = {};\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Texture;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Frame","TextureSource","Texture","initialize","manager","key","source","width","height","Array","isArray","dataSource","frames","customData","firstFrame","i","frameTotal","length","push","add","name","sourceIndex","x","y","frame","has","get","console","warn","TEXTURE_MISSING_ERROR","getTextureSourceIndex","getFramesFromTextureSource","includeBase","undefined","out","frameName","getFrameNames","Object","keys","idx","indexOf","splice","getSourceImage","image","getDataSourceImage","setDataSource","data","setFilter","filterMode","destroy"]
}
