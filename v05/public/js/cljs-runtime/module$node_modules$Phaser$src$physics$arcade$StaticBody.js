shadow$provide.module$node_modules$Phaser$src$physics$arcade$StaticBody=function(global,require,module,exports){var CircleContains=require("module$node_modules$Phaser$src$geom$circle$Contains");global=require("module$node_modules$Phaser$src$utils$Class");var CONST=require("module$node_modules$Phaser$src$physics$arcade$const"),RectangleContains=require("module$node_modules$Phaser$src$geom$rectangle$Contains"),Vector2=require("module$node_modules$Phaser$src$math$Vector2");require=new global({initialize:function(world,
gameObject){var width=gameObject.width?gameObject.width:64,height=gameObject.height?gameObject.height:64;this.world=world;this.gameObject=gameObject;this.debugShowBody=world.defaults.debugShowStaticBody;this.debugBodyColor=world.defaults.staticBodyDebugColor;this.enable=!0;this.isCircle=!1;this.radius=0;this.offset=new Vector2;this.position=new Vector2(gameObject.x-gameObject.displayOriginX,gameObject.y-gameObject.displayOriginY);this.width=width;this.height=height;this.halfWidth=Math.abs(this.width/
2);this.halfHeight=Math.abs(this.height/2);this.center=new Vector2(gameObject.x+this.halfWidth,gameObject.y+this.halfHeight);this.velocity=Vector2.ZERO;this.allowGravity=!1;this.bounce=this.gravity=Vector2.ZERO;this.onOverlap=this.onCollide=this.onWorldBounds=!1;this.mass=1;this.immovable=!0;this.customSeparateY=this.customSeparateX=!1;this.overlapR=this.overlapY=this.overlapX=0;this.collideWorldBounds=this.embedded=!1;this.checkCollision={none:!1,up:!0,down:!0,left:!0,right:!0};this.touching={none:!0,
up:!1,down:!1,left:!1,right:!1};this.wasTouching={none:!0,up:!1,down:!1,left:!1,right:!1};this.blocked={none:!0,up:!1,down:!1,left:!1,right:!1};this.physicsType=CONST.STATIC_BODY;this._dy=this._dx=0},setGameObject:function(gameObject,update){gameObject&&gameObject!==this.gameObject&&(this.gameObject.body=null,gameObject.body=this,this.gameObject=gameObject);update&&this.updateFromGameObject();return this},updateFromGameObject:function(){this.world.staticTree.remove(this);var gameObject=this.gameObject;
gameObject.getTopLeft(this.position);this.width=gameObject.displayWidth;this.height=gameObject.displayHeight;this.halfWidth=Math.abs(this.width/2);this.halfHeight=Math.abs(this.height/2);this.center.set(this.position.x+this.halfWidth,this.position.y+this.halfHeight);this.world.staticTree.insert(this);return this},setOffset:function(x,y){void 0===y&&(y=x);this.world.staticTree.remove(this);this.position.x-=this.offset.x;this.position.y-=this.offset.y;this.offset.set(x,y);this.position.x+=this.offset.x;
this.position.y+=this.offset.y;this.updateCenter();this.world.staticTree.insert(this);return this},setSize:function(width,height,offsetX,offsetY){void 0===offsetX&&(offsetX=this.offset.x);void 0===offsetY&&(offsetY=this.offset.y);var gameObject=this.gameObject;!width&&gameObject.frame&&(width=gameObject.frame.realWidth);!height&&gameObject.frame&&(height=gameObject.frame.realHeight);this.world.staticTree.remove(this);this.width=width;this.height=height;this.halfWidth=Math.floor(width/2);this.halfHeight=
Math.floor(height/2);this.offset.set(offsetX,offsetY);this.updateCenter();this.isCircle=!1;this.radius=0;this.world.staticTree.insert(this);return this},setCircle:function(radius,offsetX,offsetY){void 0===offsetX&&(offsetX=this.offset.x);void 0===offsetY&&(offsetY=this.offset.y);0<radius?(this.world.staticTree.remove(this),this.isCircle=!0,this.radius=radius,this.width=2*radius,this.height=2*radius,this.halfWidth=Math.floor(this.width/2),this.halfHeight=Math.floor(this.height/2),this.offset.set(offsetX,
offsetY),this.updateCenter(),this.world.staticTree.insert(this)):this.isCircle=!1;return this},updateCenter:function(){this.center.set(this.position.x+this.halfWidth,this.position.y+this.halfHeight)},reset:function(x,y){x=this.gameObject;this.world.staticTree.remove(this);x.getTopLeft(this.position);this.updateCenter();this.world.staticTree.insert(this)},stop:function(){return this},getBounds:function(obj){obj.x=this.x;obj.y=this.y;obj.right=this.right;obj.bottom=this.bottom;return obj},hitTest:function(x,
y){return this.isCircle?CircleContains(this,x,y):RectangleContains(this,x,y)},postUpdate:function(){},deltaAbsX:function(){return 0},deltaAbsY:function(){return 0},deltaX:function(){return 0},deltaY:function(){return 0},deltaZ:function(){return 0},destroy:function(){this.enable=!1;this.world.pendingDestroy.set(this)},drawDebug:function(graphic){var pos=this.position;this.debugShowBody&&(graphic.lineStyle(1,this.debugBodyColor,1),graphic.strokeRect(pos.x,pos.y,this.width,this.height))},willDrawDebug:function(){return this.debugShowBody},
setMass:function(value){0>=value&&(value=.1);this.mass=value;return this},x:{get:function(){return this.position.x},set:function(value){this.world.staticTree.remove(this);this.position.x=value;this.world.staticTree.insert(this)}},y:{get:function(){return this.position.y},set:function(value){this.world.staticTree.remove(this);this.position.y=value;this.world.staticTree.insert(this)}},left:{get:function(){return this.position.x}},right:{get:function(){return this.position.x+this.width}},top:{get:function(){return this.position.y}},
bottom:{get:function(){return this.position.y+this.height}}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$physics$arcade$StaticBody.js.map
