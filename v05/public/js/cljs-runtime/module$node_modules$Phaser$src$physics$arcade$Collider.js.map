{
"version":3,
"file":"module$node_modules$Phaser$src$physics$arcade$Collider.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0B/GC,MAAAA,CAAW,KAnBHH,OAAAI,CAAQ,4CAARA,CAmBG,EAAU,CAErBC,WAEAF,QAAkB,CAACG,KAAD,CAAQC,WAAR,CAAqBC,OAArB,CAA8BC,OAA9B,CAAuCC,eAAvC,CAAwDC,eAAxD,CAAyEC,eAAzE,CAClB,CAQI,IAAAN,MAAA,CAAaA,KASb,KAAAO,KAAA,CAAY,EAUZ,KAAAC,OAAA,CAAc,CAAA,CASd,KAAAP,YAAA,CAAmBA,WASnB,KAAAC,QAAA,CAAeA,OASf,KAAAC,QAAA,CAAeA,OASf,KAAAC,gBAAA,CAAuBA,eASvB,KAAAC,gBAAA,CAAuBA,eASvB,KAAAC,gBAAA,CAAuBA,eAjF3B,CALqB;AAmGrBG,QAASA,QAAS,CAACF,IAAD,CAClB,CACI,IAAAA,KAAA,CAAYA,IAEZ,OAAO,KAHX,CApGqB,CAgHrBG,OAAQA,QAAS,EACjB,CACI,IAAAV,MAAAW,eAAA,CACI,IAAAT,QADJ,CAEI,IAAAC,QAFJ,CAGI,IAAAC,gBAHJ,CAII,IAAAC,gBAJJ,CAKI,IAAAC,gBALJ,CAMI,IAAAL,YANJ,CADJ,CAjHqB,CAkIrBW,QAASA,QAAS,EAClB,CACI,IAAAZ,MAAAa,eAAA,CAA0B,IAA1B,CAEA,KAAAL,OAAA,CAAc,CAAA,CASd,KAAAF,gBAAA,CADA,IAAAD,gBACA,CAFA,IAAAD,gBAEA,CAJA,IAAAD,QAIA,CALA,IAAAD,QAKA,CAPA,IAAAF,MAOA,CAPa,IALjB,CAnIqB,CAAV,CAoJfL,OAAAC,QAAA,CAAiBC,MA9KkG;",
"sources":["node_modules/Phaser/src/physics/arcade/Collider.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$arcade$Collider\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class Collider\r\n * @memberOf Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - [description]\r\n * @param {boolean} overlapOnly - [description]\r\n * @param {ArcadeColliderType} object1 - The first object to check for collision.\r\n * @param {ArcadeColliderType} object2 - The second object to check for collision.\r\n * @param {ArcadePhysicsCallback} collideCallback - The callback to invoke when the two objects collide.\r\n * @param {ArcadePhysicsCallback} processCallback - The callback to invoke when the two objects collide. Must return a boolean.\r\n * @param {any} callbackContext - The scope in which to call the callbacks.\r\n */\r\nvar Collider = new Class({\r\n\r\n    initialize:\r\n\r\n    function Collider (world, overlapOnly, object1, object2, collideCallback, processCallback, callbackContext)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Arcade.Collider#world\r\n         * @type {Phaser.Physics.Arcade.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Arcade.Collider#name\r\n         * @type {string}\r\n         * @since 3.1.0\r\n         */\r\n        this.name = '';\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Arcade.Collider#active\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.active = true;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Arcade.Collider#overlapOnly\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.overlapOnly = overlapOnly;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Arcade.Collider#object1\r\n         * @type {ArcadeColliderType}\r\n         * @since 3.0.0\r\n         */\r\n        this.object1 = object1;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Arcade.Collider#object2\r\n         * @type {ArcadeColliderType}\r\n         * @since 3.0.0\r\n         */\r\n        this.object2 = object2;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Arcade.Collider#collideCallback\r\n         * @type {ArcadePhysicsCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.collideCallback = collideCallback;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Arcade.Collider#processCallback\r\n         * @type {ArcadePhysicsCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.processCallback = processCallback;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Arcade.Collider#callbackContext\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.callbackContext = callbackContext;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Arcade.Collider#setName\r\n     * @since 3.1.0\r\n     *\r\n     * @param {string} name - [description]\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Collider} [description]\r\n     */\r\n    setName: function (name)\r\n    {\r\n        this.name = name;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Arcade.Collider#update\r\n     * @since 3.0.0\r\n     */\r\n    update: function ()\r\n    {\r\n        this.world.collideObjects(\r\n            this.object1,\r\n            this.object2,\r\n            this.collideCallback,\r\n            this.processCallback,\r\n            this.callbackContext,\r\n            this.overlapOnly\r\n        );\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Arcade.Collider#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.world.removeCollider(this);\r\n\r\n        this.active = false;\r\n\r\n        this.world = null;\r\n\r\n        this.object1 = null;\r\n        this.object2 = null;\r\n\r\n        this.collideCallback = null;\r\n        this.processCallback = null;\r\n        this.callbackContext = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Collider;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Collider","Class","initialize","world","overlapOnly","object1","object2","collideCallback","processCallback","callbackContext","name","active","setName","update","collideObjects","destroy","removeCollider"]
}
