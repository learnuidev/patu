shadow$provide.module$node_modules$Phaser$src$gameobjects$graphics$GraphicsWebGLRenderer=function(global,require,module,exports){var Commands=require("module$node_modules$Phaser$src$gameobjects$graphics$Commands"),Utils=require("module$node_modules$Phaser$src$renderer$webgl$Utils"),Point=function(x,y,width){this.x=x;this.y=y;this.width=width},Path=function(x,y,width){this.points=[];this.pointsLength=1;this.points[0]=new Point(x,y,width)},matrixStack=[];module.exports=function(renderer,src,interpolationPercentage,
camera,parentMatrix){if(0!==src.commandBuffer.length){interpolationPercentage=this.pipeline;var camMatrix=interpolationPercentage._tempMatrix1,graphicsMatrix=interpolationPercentage._tempMatrix2,currentMatrix=interpolationPercentage._tempMatrix4;renderer.setPipeline(interpolationPercentage);currentMatrix.loadIdentity();graphicsMatrix.applyITRS(src.x,src.y,src.rotation,src.scaleX,src.scaleY);camMatrix.copyFrom(camera.matrix);parentMatrix?(camMatrix.multiplyWithOffset(parentMatrix,-camera.scrollX*src.scrollFactorX,
-camera.scrollY*src.scrollFactorY),graphicsMatrix.e=src.x,graphicsMatrix.f=src.y):(graphicsMatrix.e-=camera.scrollX*src.scrollFactorX,graphicsMatrix.f-=camera.scrollY*src.scrollFactorY);camMatrix.multiply(graphicsMatrix);parentMatrix=src.commandBuffer;src=camera.alpha*src.alpha;camera=1;graphicsMatrix=interpolationPercentage.fillTint;for(var strokeTint=interpolationPercentage.strokeTint,tx,ty,PI2=2*Math.PI,cmd,path=[],pathOpen=!1,lastPath=null,getTint=Utils.getTintAppendFloatAlphaAndSwap,cmdIndex=
0;cmdIndex<parentMatrix.length;cmdIndex++)switch(cmd=parentMatrix[cmdIndex],cmd){case Commands.BEGIN_PATH:path.length=0;lastPath=null;pathOpen=!0;break;case Commands.CLOSE_PATH:pathOpen=!1;lastPath&&lastPath.points.length&&lastPath.points.push(lastPath.points[0]);break;case Commands.FILL_PATH:for(cmd=0;cmd<path.length;cmd++)interpolationPercentage.batchFillPath(path[cmd].points,currentMatrix,camMatrix);break;case Commands.STROKE_PATH:for(cmd=0;cmd<path.length;cmd++)interpolationPercentage.batchStrokePath(path[cmd].points,
camera,pathOpen,currentMatrix,camMatrix);break;case Commands.LINE_STYLE:camera=parentMatrix[++cmdIndex];cmd=parentMatrix[++cmdIndex];var strokeAlpha=parentMatrix[++cmdIndex]*src;cmd=getTint(cmd,strokeAlpha);strokeTint.TL=cmd;strokeTint.TR=cmd;strokeTint.BL=cmd;strokeTint.BR=cmd;break;case Commands.FILL_STYLE:cmd=parentMatrix[++cmdIndex];strokeAlpha=parentMatrix[++cmdIndex]*src;cmd=getTint(cmd,strokeAlpha);graphicsMatrix.TL=cmd;graphicsMatrix.TR=cmd;graphicsMatrix.BL=cmd;graphicsMatrix.BR=cmd;break;
case Commands.GRADIENT_FILL_STYLE:cmd=parentMatrix[++cmdIndex]*src;graphicsMatrix.TL=getTint(parentMatrix[++cmdIndex],cmd);graphicsMatrix.TR=getTint(parentMatrix[++cmdIndex],cmd);graphicsMatrix.BL=getTint(parentMatrix[++cmdIndex],cmd);graphicsMatrix.BR=getTint(parentMatrix[++cmdIndex],cmd);break;case Commands.GRADIENT_LINE_STYLE:camera=parentMatrix[++cmdIndex];cmd=parentMatrix[++cmdIndex]*src;strokeTint.TL=getTint(parentMatrix[++cmdIndex],cmd);strokeTint.TR=getTint(parentMatrix[++cmdIndex],cmd);strokeTint.BL=
getTint(parentMatrix[++cmdIndex],cmd);strokeTint.BR=getTint(parentMatrix[++cmdIndex],cmd);break;case Commands.ARC:cmd=0;strokeAlpha=parentMatrix[++cmdIndex];var y=parentMatrix[++cmdIndex],radius=parentMatrix[++cmdIndex],startAngle=parentMatrix[++cmdIndex],endAngle=parentMatrix[++cmdIndex];tx=parentMatrix[++cmdIndex];var overshoot=parentMatrix[++cmdIndex];endAngle-=startAngle;tx?endAngle<-PI2?endAngle=-PI2:0<endAngle&&(endAngle=-PI2+endAngle%PI2):endAngle>PI2?endAngle=PI2:0>endAngle&&(endAngle=PI2+
endAngle%PI2);null===lastPath&&(lastPath=new Path(strokeAlpha+Math.cos(startAngle)*radius,y+Math.sin(startAngle)*radius,camera),path.push(lastPath),cmd+=.01);for(;cmd<1+overshoot;)ty=endAngle*cmd+startAngle,tx=strokeAlpha+Math.cos(ty)*radius,ty=y+Math.sin(ty)*radius,lastPath.points.push(new Point(tx,ty,camera)),cmd+=.01;ty=endAngle+startAngle;tx=strokeAlpha+Math.cos(ty)*radius;ty=y+Math.sin(ty)*radius;lastPath.points.push(new Point(tx,ty,camera));break;case Commands.FILL_RECT:interpolationPercentage.batchFillRect(parentMatrix[++cmdIndex],
parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],currentMatrix,camMatrix);break;case Commands.FILL_TRIANGLE:interpolationPercentage.batchFillTriangle(parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],currentMatrix,camMatrix);break;case Commands.STROKE_TRIANGLE:interpolationPercentage.batchStrokeTriangle(parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],
parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],camera,currentMatrix,camMatrix);break;case Commands.LINE_TO:null!==lastPath?lastPath.points.push(new Point(parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],camera)):(lastPath=new Path(parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],camera),path.push(lastPath));break;case Commands.MOVE_TO:lastPath=new Path(parentMatrix[++cmdIndex],parentMatrix[++cmdIndex],camera);path.push(lastPath);break;case Commands.SAVE:matrixStack.push(currentMatrix.copyToArray());
break;case Commands.RESTORE:currentMatrix.copyFromArray(matrixStack.pop());break;case Commands.TRANSLATE:strokeAlpha=parentMatrix[++cmdIndex];y=parentMatrix[++cmdIndex];currentMatrix.translate(strokeAlpha,y);break;case Commands.SCALE:strokeAlpha=parentMatrix[++cmdIndex];y=parentMatrix[++cmdIndex];currentMatrix.scale(strokeAlpha,y);break;case Commands.ROTATE:currentMatrix.rotate(parentMatrix[++cmdIndex]);break;case Commands.SET_TEXTURE:cmd=parentMatrix[++cmdIndex];strokeAlpha=parentMatrix[++cmdIndex];
interpolationPercentage.currentFrame=cmd;renderer.setTexture2D(cmd.glTexture,0);interpolationPercentage.tintEffect=strokeAlpha;break;case Commands.CLEAR_TEXTURE:interpolationPercentage.currentFrame=renderer.blankTexture,renderer.setTexture2D(renderer.blankTexture.glTexture,0),interpolationPercentage.tintEffect=2}}}}
//# sourceMappingURL=module$node_modules$Phaser$src$gameobjects$graphics$GraphicsWebGLRenderer.js.map
