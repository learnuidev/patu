{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$CalculateFacesWithin.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,wEAAA,CAA4F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOpI,IAAIC,UAAYH,OAAA,CAAQ,8DAAR,CAAhB,CACII,eAAiBJ,OAAA,CAAQ,mEAAR,CAoDrBC,OAAAC,QAAA,CAnC2BG,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAeC,KAAf,CAAsBC,MAAtB,CAA8BC,KAA9B,CACpC,CAQI,IAFA,IAAIC,MAAQP,cAAA,CAAeE,KAAf,CAAsBC,KAAtB,CAA6BC,KAA7B,CAAoCC,MAApC,CAA4C,IAA5C,CAAkDC,KAAlD,CAAZ,CAESE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBD,KAAAE,OAApB,CAAkCD,CAAA,EAAlC,CACA,CACI,IAAIE,KAAOH,KAAA,CAAMC,CAAN,CAEPE,KAAJ,GAEQA,IAAAC,SAAJ,EAEIC,KAQA,CARQb,SAAA,CAAUW,IAAAG,EAAV;AAAkBH,IAAAI,EAAlB,CAA2B,CAA3B,CAA8B,CAAA,CAA9B,CAAoCR,KAApC,CAQR,CAPAS,KAOA,CAPQhB,SAAA,CAAUW,IAAAG,EAAV,CAAkBH,IAAAI,EAAlB,CAA2B,CAA3B,CAA8B,CAAA,CAA9B,CAAoCR,KAApC,CAOR,CANAU,KAMA,CANOjB,SAAA,CAAUW,IAAAG,EAAV,CAAmB,CAAnB,CAAsBH,IAAAI,EAAtB,CAA8B,CAAA,CAA9B,CAAoCR,KAApC,CAMP,CALAW,MAKA,CALQlB,SAAA,CAAUW,IAAAG,EAAV,CAAmB,CAAnB,CAAsBH,IAAAI,EAAtB,CAA8B,CAAA,CAA9B,CAAoCR,KAApC,CAKR,CAHAI,IAAAQ,QAGA,CAHgBN,KAAD,EAAUA,KAAAD,SAAV,CAA4B,CAAA,CAA5B,CAAoC,CAAA,CAGnD,CAFAD,IAAAS,WAEA,CAFmBJ,KAAD,EAAUA,KAAAJ,SAAV,CAA4B,CAAA,CAA5B,CAAoC,CAAA,CAEtD,CADAD,IAAAU,SACA,CADiBJ,KAAD,EAASA,KAAAL,SAAT,CAA0B,CAAA,CAA1B,CAAkC,CAAA,CAClD,CAAAD,IAAAW,UAAA,CAAkBJ,MAAD,EAAUA,MAAAN,SAAV,CAA4B,CAAA,CAA5B,CAAoC,CAAA,CAVzD,EAcID,IAAAY,WAAA,EAhBR,CAHJ,CATJ,CA1BoI;",
"sources":["node_modules/Phaser/src/tilemaps/components/CalculateFacesWithin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$CalculateFacesWithin\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetTileAt = require('./GetTileAt');\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\n\r\n/**\r\n * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n * is mostly used internally.\r\n *\r\n * @function Phaser.Tilemaps.Components.CalculateFacesWithin\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} tileY - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} width - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} height - How many tiles tall from the `tileY` index the area will be.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar CalculateFacesWithin = function (tileX, tileY, width, height, layer)\r\n{\r\n    var above = null;\r\n    var below = null;\r\n    var left = null;\r\n    var right = null;\r\n\r\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\r\n\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        var tile = tiles[i];\r\n\r\n        if (tile)\r\n        {\r\n            if (tile.collides)\r\n            {\r\n                above = GetTileAt(tile.x, tile.y - 1, true, layer);\r\n                below = GetTileAt(tile.x, tile.y + 1, true, layer);\r\n                left = GetTileAt(tile.x - 1, tile.y, true, layer);\r\n                right = GetTileAt(tile.x + 1, tile.y, true, layer);\r\n\r\n                tile.faceTop = (above && above.collides) ? false : true;\r\n                tile.faceBottom = (below && below.collides) ? false : true;\r\n                tile.faceLeft = (left && left.collides) ? false : true;\r\n                tile.faceRight = (right && right.collides) ? false : true;\r\n            }\r\n            else\r\n            {\r\n                tile.resetFaces();\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = CalculateFacesWithin;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetTileAt","GetTilesWithin","CalculateFacesWithin","tileX","tileY","width","height","layer","tiles","i","length","tile","collides","above","x","y","below","left","right","faceTop","faceBottom","faceLeft","faceRight","resetFaces"]
}
