{
"version":3,
"file":"module$node_modules$Phaser$src$math$SinCosTableGenerator.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAuDrHD,MAAAC,QAAA,CA3B2BC,QAAS,CAACC,MAAD,CAASC,MAAT,CAAiBC,MAAjB,CAAyBC,SAAzB,CACpC,CACmBC,IAAAA,EAAf,GAAIH,MAAJ,GAA4BA,MAA5B,CAAqC,CAArC,CACeG,KAAAA,EAAf,GAAIF,MAAJ,GAA4BA,MAA5B,CAAqC,CAArC,CACkBE,KAAAA,EAAlB,GAAID,SAAJ,GAA+BA,SAA/B,CAA2C,CAA3C,CAEAA,UAAA,EAAaE,IAAAC,GAAb,CAAuBN,MAKvB,KAHA,IAAIO,IAAM,EAAV,CACIC,IAAM,EADV,CAGSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBT,MAApB,CAA4BS,CAAA,EAA5B,CAEIP,MAIA,EAJUD,MAIV,CAJmBE,SAInB,CAHAF,MAGA,EAHUC,MAGV,CAHmBC,SAGnB,CADAI,GAAA,CAAIE,CAAJ,CACA,CADSP,MACT,CAAAM,GAAA,CAAIC,CAAJ,CAAA,CAASR,MAGb,OAAO,CACHO,IAAKA,GADF,CAEHD,IAAKA,GAFF,CAGHP,OAAQA,MAHL,CAnBX,CA7BqH;",
"sources":["node_modules/Phaser/src/math/SinCosTableGenerator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$SinCosTableGenerator\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * @typedef {object} SinCosTable\r\n *\r\n * @property {number} sin - The sine value.\r\n * @property {number} cos - The cosine value.\r\n * @property {number} length - The length.\r\n */\r\n\r\n/**\r\n * Generate a series of sine and cosine values.\r\n *\r\n * @function Phaser.Math.SinCosTableGenerator\r\n * @since 3.0.0\r\n *\r\n * @param {number} length - The number of values to generate.\r\n * @param {number} [sinAmp=1] - The sine value amplitude.\r\n * @param {number} [cosAmp=1] - The cosine value amplitude.\r\n * @param {number} [frequency=1] - The frequency of the values.\r\n *\r\n * @return {SinCosTable} The generated values.\r\n */\r\nvar SinCosTableGenerator = function (length, sinAmp, cosAmp, frequency)\r\n{\r\n    if (sinAmp === undefined) { sinAmp = 1; }\r\n    if (cosAmp === undefined) { cosAmp = 1; }\r\n    if (frequency === undefined) { frequency = 1; }\r\n\r\n    frequency *= Math.PI / length;\r\n\r\n    var cos = [];\r\n    var sin = [];\r\n\r\n    for (var c = 0; c < length; c++)\r\n    {\r\n        cosAmp -= sinAmp * frequency;\r\n        sinAmp += cosAmp * frequency;\r\n\r\n        cos[c] = cosAmp;\r\n        sin[c] = sinAmp;\r\n    }\r\n\r\n    return {\r\n        sin: sin,\r\n        cos: cos,\r\n        length: length\r\n    };\r\n};\r\n\r\nmodule.exports = SinCosTableGenerator;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","SinCosTableGenerator","length","sinAmp","cosAmp","frequency","undefined","Math","PI","cos","sin","c"]
}
