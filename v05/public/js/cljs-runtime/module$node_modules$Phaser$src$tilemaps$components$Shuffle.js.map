{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$Shuffle.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,2DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOvH,IAAIC,eAAiBH,OAAA,CAAQ,mEAAR,CAArB,CACII,aAAeJ,OAAA,CAAQ,oDAAR,CA+BnBC,OAAAC,QAAA,CAbcG,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAeC,KAAf,CAAsBC,MAAtB,CAA8BC,KAA9B,CACvB,CACQC,KAAAA,CAAQR,cAAA,CAAeG,KAAf,CAAsBC,KAAtB,CAA6BC,KAA7B,CAAoCC,MAApC,CAA4C,IAA5C,CAAkDC,KAAlD,CAERE,MAAAA,CAAUD,KAAAE,IAAA,CAAU,QAAS,CAACC,IAAD,CAAO,CAAE,MAAOA,KAAAC,MAAT,CAA1B,CACdX,aAAA,CAAaQ,KAAb,CAEA,KAASI,KAAT,CAAa,CAAb,CAAgBA,KAAhB,CAAoBL,KAAAM,OAApB,CAAkCD,KAAA,EAAlC,CAEIL,KAAA,CAAMK,KAAN,CAAAD,MAAA;AAAiBH,KAAA,CAAQI,KAAR,CARzB,CA3BuH;",
"sources":["node_modules/Phaser/src/tilemaps/components/Shuffle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$Shuffle\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar ShuffleArray = require('../../utils/array/Shuffle');\r\n\r\n/**\r\n * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n * appear to have changed! This method only modifies tile indexes and does not change collision\r\n * information.\r\n *\r\n * @function Phaser.Tilemaps.Components.Shuffle\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar Shuffle = function (tileX, tileY, width, height, layer)\r\n{\r\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\r\n\r\n    var indexes = tiles.map(function (tile) { return tile.index; });\r\n    ShuffleArray(indexes);\r\n\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        tiles[i].index = indexes[i];\r\n    }\r\n};\r\n\r\nmodule.exports = Shuffle;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetTilesWithin","ShuffleArray","Shuffle","tileX","tileY","width","height","layer","tiles","indexes","map","tile","index","i","length"]
}
