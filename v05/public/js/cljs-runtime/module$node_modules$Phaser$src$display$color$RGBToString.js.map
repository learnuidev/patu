{
"version":3,
"file":"module$node_modules$Phaser$src$display$color$RGBToString.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOrH,IAAIC,eAAiBH,OAAA,CAAQ,6DAAR,CA+BrBC,OAAAC,QAAA,CAfkBE,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAaC,MAAb,CAC3B,CACcC,IAAAA,EAAV,GAAIF,CAAJ,GAAuBA,CAAvB,CAA2B,GAA3B,CACeE,KAAAA,EAAf,GAAID,MAAJ,GAA4BA,MAA5B,CAAqC,GAArC,CAEA,OAAe,GAAf,GAAIA,MAAJ,CAEW,GAFX,CAEiBE,CAAE,QAAFA,EAAcN,CAAdM,EAAmB,EAAnBA,GAA0BL,CAA1BK,EAA+B,CAA/BA,EAAoCJ,CAApCI,UAAA,CAAgD,EAAhD,CAAAC,MAAA,CAA0D,CAA1D,CAFjB,CAMW,IANX,CAMkBT,cAAA,CAAeK,CAAf,CANlB,CAMsCL,cAAA,CAAeE,CAAf,CANtC,CAM0DF,cAAA,CAAeG,CAAf,CAN1D,CAM8EH,cAAA,CAAeI,CAAf,CAVlF,CAxBqH;",
"sources":["node_modules/Phaser/src/display/color/RGBToString.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$display$color$RGBToString\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar ComponentToHex = require('./ComponentToHex');\r\n\r\n/**\r\n * Converts the color values into an HTML compatible color string, prefixed with either `#` or `0x`.\r\n *\r\n * @function Phaser.Display.Color.RGBToString\r\n * @since 3.0.0\r\n *\r\n * @param {integer} r - The red color value. A number between 0 and 255.\r\n * @param {integer} g - The green color value. A number between 0 and 255.\r\n * @param {integer} b - The blue color value. A number between 0 and 255.\r\n * @param {integer} [a=255] - The alpha value. A number between 0 and 255.\r\n * @param {string} [prefix=#] - The prefix of the string. Either `#` or `0x`.\r\n *\r\n * @return {string} A string-based representation of the color values.\r\n */\r\nvar RGBToString = function (r, g, b, a, prefix)\r\n{\r\n    if (a === undefined) { a = 255; }\r\n    if (prefix === undefined) { prefix = '#'; }\r\n\r\n    if (prefix === '#')\r\n    {\r\n        return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n    }\r\n    else\r\n    {\r\n        return '0x' + ComponentToHex(a) + ComponentToHex(r) + ComponentToHex(g) + ComponentToHex(b);\r\n    }\r\n};\r\n\r\nmodule.exports = RGBToString;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","ComponentToHex","RGBToString","r","g","b","a","prefix","undefined","toString","slice"]
}
