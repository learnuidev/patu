{
"version":3,
"file":"module$node_modules$Phaser$src$display$canvas$CanvasPool.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/display/canvas/CanvasPool.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$display$canvas$CanvasPool\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar CONST = require('../../const');\r\nvar Smoothing = require('./Smoothing');\r\n\r\n// The pool into which the canvas elements are placed.\r\nvar pool = [];\r\n\r\n//  Automatically apply smoothing(false) to created Canvas elements\r\nvar _disableContextSmoothing = false;\r\n\r\n/**\r\n * The CanvasPool is a global static object, that allows Phaser to recycle and pool 2D Context Canvas DOM elements.\r\n * It does not pool WebGL Contexts, because once the context options are set they cannot be modified again, \r\n * which is useless for some of the Phaser pipelines / renderer.\r\n *\r\n * This singleton is instantiated as soon as Phaser loads, before a Phaser.Game instance has even been created.\r\n * Which means all instances of Phaser Games on the same page can share the one single pool.\r\n *\r\n * @namespace Phaser.Display.Canvas.CanvasPool\r\n * @since 3.0.0\r\n */\r\nvar CanvasPool = function ()\r\n{\r\n    /**\r\n     * Creates a new Canvas DOM element, or pulls one from the pool if free.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {*} parent - The parent of the Canvas object.\r\n     * @param {integer} [width=1] - The width of the Canvas.\r\n     * @param {integer} [height=1] - The height of the Canvas.\r\n     * @param {integer} [canvasType=Phaser.CANVAS] - The type of the Canvas. Either `Phaser.CANVAS` or `Phaser.WEBGL`.\r\n     * @param {boolean} [selfParent=false] - Use the generated Canvas element as the parent?\r\n     *\r\n     * @return {HTMLCanvasElement} [description]\r\n     */\r\n    var create = function (parent, width, height, canvasType, selfParent)\r\n    {\r\n        if (width === undefined) { width = 1; }\r\n        if (height === undefined) { height = 1; }\r\n        if (canvasType === undefined) { canvasType = CONST.CANVAS; }\r\n        if (selfParent === undefined) { selfParent = false; }\r\n\r\n        var canvas;\r\n        var container = first(canvasType);\r\n\r\n        if (container === null)\r\n        {\r\n            container = {\r\n                parent: parent,\r\n                canvas: document.createElement('canvas'),\r\n                type: canvasType\r\n            };\r\n\r\n            if (canvasType === CONST.CANVAS)\r\n            {\r\n                pool.push(container);\r\n            }\r\n\r\n            canvas = container.canvas;\r\n        }\r\n        else\r\n        {\r\n            container.parent = parent;\r\n\r\n            canvas = container.canvas;\r\n        }\r\n\r\n        if (selfParent)\r\n        {\r\n            container.parent = canvas;\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        if (_disableContextSmoothing && canvasType === CONST.CANVAS)\r\n        {\r\n            Smoothing.disable(canvas.getContext('2d'));\r\n        }\r\n\r\n        return canvas;\r\n    };\r\n\r\n    /**\r\n     * Creates a new Canvas DOM element, or pulls one from the pool if free.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.create2D\r\n     * @since 3.0.0\r\n     *\r\n     * @param {*} parent - The parent of the Canvas object.\r\n     * @param {integer} [width=1] - The width of the Canvas.\r\n     * @param {integer} [height=1] - The height of the Canvas.\r\n     *\r\n     * @return {HTMLCanvasElement} [description]\r\n     */\r\n    var create2D = function (parent, width, height)\r\n    {\r\n        return create(parent, width, height, CONST.CANVAS);\r\n    };\r\n\r\n    /**\r\n     * Creates a new Canvas DOM element, or pulls one from the pool if free.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.createWebGL\r\n     * @since 3.0.0\r\n     *\r\n     * @param {*} parent - The parent of the Canvas object.\r\n     * @param {integer} [width=1] - The width of the Canvas.\r\n     * @param {integer} [height=1] - The height of the Canvas.\r\n     *\r\n     * @return {HTMLCanvasElement} [description]\r\n     */\r\n    var createWebGL = function (parent, width, height)\r\n    {\r\n        return create(parent, width, height, CONST.WEBGL);\r\n    };\r\n\r\n    /**\r\n     * Gets the first free canvas index from the pool.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.first\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [canvasType=Phaser.CANVAS] - The type of the Canvas. Either `Phaser.CANVAS` or `Phaser.WEBGL`.\r\n     *\r\n     * @return {HTMLCanvasElement} [description]\r\n     */\r\n    var first = function (canvasType)\r\n    {\r\n        if (canvasType === undefined) { canvasType = CONST.CANVAS; }\r\n\r\n        if (canvasType === CONST.WEBGL)\r\n        {\r\n            return null;\r\n        }\r\n\r\n        for (var i = 0; i < pool.length; i++)\r\n        {\r\n            var container = pool[i];\r\n\r\n            if (!container.parent && container.type === canvasType)\r\n            {\r\n                return container;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Looks up a canvas based on its parent, and if found puts it back in the pool, freeing it up for re-use.\r\n     * The canvas has its width and height set to 1, and its parent attribute nulled.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {*} parent - [description]\r\n     */\r\n    var remove = function (parent)\r\n    {\r\n        //  Check to see if the parent is a canvas object\r\n        var isCanvas = parent instanceof HTMLCanvasElement;\r\n\r\n        pool.forEach(function (container)\r\n        {\r\n            if ((isCanvas && container.canvas === parent) || (!isCanvas && container.parent === parent))\r\n            {\r\n                container.parent = null;\r\n                container.canvas.width = 1;\r\n                container.canvas.height = 1;\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Gets the total number of used canvas elements in the pool.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.total\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} [description]\r\n     */\r\n    var total = function ()\r\n    {\r\n        var c = 0;\r\n\r\n        pool.forEach(function (container)\r\n        {\r\n            if (container.parent)\r\n            {\r\n                c++;\r\n            }\r\n        });\r\n\r\n        return c;\r\n    };\r\n\r\n    /**\r\n     * Gets the total number of free canvas elements in the pool.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.free\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} [description]\r\n     */\r\n    var free = function ()\r\n    {\r\n        return pool.length - total();\r\n    };\r\n\r\n    /**\r\n     * Disable context smoothing on any new Canvas element created.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.disableSmoothing\r\n     * @since 3.0.0\r\n     */\r\n    var disableSmoothing = function ()\r\n    {\r\n        _disableContextSmoothing = true;\r\n    };\r\n\r\n    /**\r\n     * Enable context smoothing on any new Canvas element created.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.enableSmoothing\r\n     * @since 3.0.0\r\n     */\r\n    var enableSmoothing = function ()\r\n    {\r\n        _disableContextSmoothing = false;\r\n    };\r\n\r\n    return {\r\n        create2D: create2D,\r\n        create: create,\r\n        createWebGL: createWebGL,\r\n        disableSmoothing: disableSmoothing,\r\n        enableSmoothing: enableSmoothing,\r\n        first: first,\r\n        free: free,\r\n        pool: pool,\r\n        remove: remove,\r\n        total: total\r\n    };\r\n};\r\n\r\n//  If we export the called function here, it'll only be invoked once (not every time it's required).\r\nmodule.exports = CanvasPool();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","CONST","Smoothing","pool","_disableContextSmoothing","CanvasPool","create","parent","width","height","canvasType","selfParent","undefined","CANVAS","container","first","canvas","document","createElement","type","push","disable","getContext","WEBGL","i","length","total","c","forEach","create2D","createWebGL","disableSmoothing","enableSmoothing","free","remove","isCanvas","HTMLCanvasElement"]
}
