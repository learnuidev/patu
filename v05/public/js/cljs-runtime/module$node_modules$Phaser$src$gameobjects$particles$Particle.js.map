{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$particles$Particle.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/particles/Particle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$particles$Particle\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar DegToRad = require('../../math/DegToRad');\r\nvar DistanceBetween = require('../../math/distance/DistanceBetween');\r\n\r\n/**\r\n * @classdesc\r\n * A Particle is a simple Game Object controlled by a Particle Emitter and Manager, and rendered by the Manager.\r\n * It uses its own lightweight physics system, and can interact only with its Emitter's bounds and zones.\r\n *\r\n * @class Particle\r\n * @memberOf Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter to which this Particle belongs.\r\n */\r\nvar Particle = new Class({\r\n\r\n    initialize:\r\n\r\n    function Particle (emitter)\r\n    {\r\n        /**\r\n         * The Emitter to which this Particle belongs.\r\n         *\r\n         * A Particle can only belong to a single Emitter and is created, updated and destroyed via it.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#emitter\r\n         * @type {Phaser.GameObjects.Particles.ParticleEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.emitter = emitter;\r\n\r\n        /**\r\n         * The texture frame used to render this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#frame\r\n         * @type {Phaser.Textures.Frame}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.frame = null;\r\n\r\n        /**\r\n         * The position of this Particle within its Emitter's particle pool.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#index\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.index = 0;\r\n\r\n        /**\r\n         * The x coordinate of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = 0;\r\n\r\n        /**\r\n         * The y coordinate of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = 0;\r\n\r\n        /**\r\n         * The x velocity of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#velocityX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.velocityX = 0;\r\n\r\n        /**\r\n         * The y velocity of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#velocityY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.velocityY = 0;\r\n\r\n        /**\r\n         * The x acceleration of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#accelerationX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelerationX = 0;\r\n\r\n        /**\r\n         * The y acceleration of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#accelerationY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelerationY = 0;\r\n\r\n        /**\r\n         * The maximum horizontal velocity this Particle can travel at.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#maxVelocityX\r\n         * @type {number}\r\n         * @default 10000\r\n         * @since 3.0.0\r\n         */\r\n        this.maxVelocityX = 10000;\r\n\r\n        /**\r\n         * The maximum vertical velocity this Particle can travel at.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#maxVelocityY\r\n         * @type {number}\r\n         * @default 10000\r\n         * @since 3.0.0\r\n         */\r\n        this.maxVelocityY = 10000;\r\n\r\n        /**\r\n         * The bounciness, or restitution, of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#bounce\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.bounce = 0;\r\n\r\n        /**\r\n         * The horizontal scale of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#scaleX\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.scaleX = 1;\r\n\r\n        /**\r\n         * The vertical scale of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#scaleY\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.scaleY = 1;\r\n\r\n        /**\r\n         * The alpha value of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#alpha\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.alpha = 1;\r\n\r\n        /**\r\n         * The angle of this Particle in degrees.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#angle\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.angle = 0;\r\n\r\n        /**\r\n         * The angle of this Particle in radians.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#rotation\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.rotation = 0;\r\n\r\n        /**\r\n         * The tint applied to this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#tint\r\n         * @type {integer}\r\n         * @webglOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.tint = 0xffffff;\r\n\r\n        /**\r\n         * The lifespan of this Particle in ms.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#life\r\n         * @type {number}\r\n         * @default 1000\r\n         * @since 3.0.0\r\n         */\r\n        this.life = 1000;\r\n\r\n        /**\r\n         * The current life of this Particle in ms.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#lifeCurrent\r\n         * @type {number}\r\n         * @default 1000\r\n         * @since 3.0.0\r\n         */\r\n        this.lifeCurrent = 1000;\r\n\r\n        /**\r\n         * The delay applied to this Particle upon emission, in ms.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#delayCurrent\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.delayCurrent = 0;\r\n\r\n        /**\r\n         * The normalized lifespan T value, where 0 is the start and 1 is the end.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#lifeT\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.lifeT = 0;\r\n\r\n        /**\r\n         * The data used by the ease equation.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#data\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.data = {\r\n            tint: { min: 0xffffff, max: 0xffffff, current: 0xffffff },\r\n            alpha: { min: 1, max: 1 },\r\n            rotate: { min: 0, max: 0 },\r\n            scaleX: { min: 1, max: 1 },\r\n            scaleY: { min: 1, max: 1 }\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Checks to see if this Particle is alive and updating.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Particle#isAlive\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if this Particle is alive and updating, otherwise `false`.\r\n     */\r\n    isAlive: function ()\r\n    {\r\n        return (this.lifeCurrent > 0);\r\n    },\r\n\r\n    /**\r\n     * Starts this Particle from the given coordinates.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Particle#fire\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to launch this Particle from.\r\n     * @param {number} y - The y coordinate to launch this Particle from.\r\n     */\r\n    fire: function (x, y)\r\n    {\r\n        var emitter = this.emitter;\r\n\r\n        this.frame = emitter.getFrame();\r\n\r\n        if (emitter.emitZone)\r\n        {\r\n            //  Updates particle.x and particle.y during this call\r\n            emitter.emitZone.getPoint(this);\r\n        }\r\n\r\n        if (x === undefined)\r\n        {\r\n            if (emitter.follow)\r\n            {\r\n                this.x += emitter.follow.x + emitter.followOffset.x;\r\n            }\r\n\r\n            this.x += emitter.x.onEmit(this, 'x');\r\n        }\r\n        else\r\n        {\r\n            this.x += x;\r\n        }\r\n\r\n        if (y === undefined)\r\n        {\r\n            if (emitter.follow)\r\n            {\r\n                this.y += emitter.follow.y + emitter.followOffset.y;\r\n            }\r\n\r\n            this.y += emitter.y.onEmit(this, 'y');\r\n        }\r\n        else\r\n        {\r\n            this.y += y;\r\n        }\r\n\r\n        this.life = emitter.lifespan.onEmit(this, 'lifespan');\r\n        this.lifeCurrent = this.life;\r\n        this.lifeT = 0;\r\n\r\n        var sx = emitter.speedX.onEmit(this, 'speedX');\r\n        var sy = (emitter.speedY) ? emitter.speedY.onEmit(this, 'speedY') : sx;\r\n\r\n        if (emitter.radial)\r\n        {\r\n            var rad = DegToRad(emitter.angle.onEmit(this, 'angle'));\r\n\r\n            this.velocityX = Math.cos(rad) * Math.abs(sx);\r\n            this.velocityY = Math.sin(rad) * Math.abs(sy);\r\n        }\r\n        else if (emitter.moveTo)\r\n        {\r\n            var mx = emitter.moveToX.onEmit(this, 'moveToX');\r\n            var my = (emitter.moveToY) ? emitter.moveToY.onEmit(this, 'moveToY') : mx;\r\n\r\n            var angle = Math.atan2(my - this.y, mx - this.x);\r\n\r\n            var speed = DistanceBetween(this.x, this.y, mx, my) / (this.life / 1000);\r\n\r\n            //  We know how many pixels we need to move, but how fast?\r\n            // var speed = this.distanceToXY(displayObject, x, y) / (maxTime / 1000);\r\n\r\n            this.velocityX = Math.cos(angle) * speed;\r\n            this.velocityY = Math.sin(angle) * speed;\r\n        }\r\n        else\r\n        {\r\n            this.velocityX = sx;\r\n            this.velocityY = sy;\r\n        }\r\n\r\n        if (emitter.acceleration)\r\n        {\r\n            this.accelerationX = emitter.accelerationX.onEmit(this, 'accelerationX');\r\n            this.accelerationY = emitter.accelerationY.onEmit(this, 'accelerationY');\r\n        }\r\n\r\n        this.maxVelocityX = emitter.maxVelocityX.onEmit(this, 'maxVelocityX');\r\n        this.maxVelocityY = emitter.maxVelocityY.onEmit(this, 'maxVelocityY');\r\n\r\n        this.delayCurrent = emitter.delay.onEmit(this, 'delay');\r\n\r\n        this.scaleX = emitter.scaleX.onEmit(this, 'scaleX');\r\n        this.scaleY = (emitter.scaleY) ? emitter.scaleY.onEmit(this, 'scaleY') : this.scaleX;\r\n\r\n        this.angle = emitter.rotate.onEmit(this, 'rotate');\r\n        this.rotation = DegToRad(this.angle);\r\n\r\n        this.bounce = emitter.bounce.onEmit(this, 'bounce');\r\n\r\n        this.alpha = emitter.alpha.onEmit(this, 'alpha');\r\n\r\n        this.tint = emitter.tint.onEmit(this, 'tint');\r\n\r\n        this.index = emitter.alive.length;\r\n    },\r\n\r\n    /**\r\n     * An internal method that calculates the velocity of the Particle.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Particle#computeVelocity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter that is updating this Particle.\r\n     * @param {number} delta - The delta time in ms.\r\n     * @param {number} step - The delta value divided by 1000.\r\n     * @param {array} processors - Particle processors (gravity wells).\r\n     */\r\n    computeVelocity: function (emitter, delta, step, processors)\r\n    {\r\n        var vx = this.velocityX;\r\n        var vy = this.velocityY;\r\n\r\n        var ax = this.accelerationX;\r\n        var ay = this.accelerationY;\r\n\r\n        var mx = this.maxVelocityX;\r\n        var my = this.maxVelocityY;\r\n\r\n        vx += (emitter.gravityX * step);\r\n        vy += (emitter.gravityY * step);\r\n\r\n        if (ax)\r\n        {\r\n            vx += (ax * step);\r\n        }\r\n\r\n        if (ay)\r\n        {\r\n            vy += (ay * step);\r\n        }\r\n\r\n        if (vx > mx)\r\n        {\r\n            vx = mx;\r\n        }\r\n        else if (vx < -mx)\r\n        {\r\n            vx = -mx;\r\n        }\r\n\r\n        if (vy > my)\r\n        {\r\n            vy = my;\r\n        }\r\n        else if (vy < -my)\r\n        {\r\n            vy = -my;\r\n        }\r\n\r\n        this.velocityX = vx;\r\n        this.velocityY = vy;\r\n\r\n        //  Apply any additional processors\r\n        for (var i = 0; i < processors.length; i++)\r\n        {\r\n            processors[i].update(this, delta, step);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Checks if this Particle is still within the bounds defined by the given Emitter.\r\n     *\r\n     * If not, and depending on the Emitter collision flags, the Particle may either stop or rebound.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Particle#checkBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter to check the bounds against.\r\n     */\r\n    checkBounds: function (emitter)\r\n    {\r\n        var bounds = emitter.bounds;\r\n        var bounce = -this.bounce;\r\n\r\n        if (this.x < bounds.x && emitter.collideLeft)\r\n        {\r\n            this.x = bounds.x;\r\n            this.velocityX *= bounce;\r\n        }\r\n        else if (this.x > bounds.right && emitter.collideRight)\r\n        {\r\n            this.x = bounds.right;\r\n            this.velocityX *= bounce;\r\n        }\r\n\r\n        if (this.y < bounds.y && emitter.collideTop)\r\n        {\r\n            this.y = bounds.y;\r\n            this.velocityY *= bounce;\r\n        }\r\n        else if (this.y > bounds.bottom && emitter.collideBottom)\r\n        {\r\n            this.y = bounds.bottom;\r\n            this.velocityY *= bounce;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The main update method for this Particle.\r\n     *\r\n     * Updates its life values, computes the velocity and repositions the Particle.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Particle#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} delta - The delta time in ms.\r\n     * @param {number} step - The delta value divided by 1000.\r\n     * @param {array} processors - An optional array of update processors.\r\n     *\r\n     * @return {boolean} Returns `true` if this Particle has now expired and should be removed, otherwise `false` if still active.\r\n     */\r\n    update: function (delta, step, processors)\r\n    {\r\n        if (this.delayCurrent > 0)\r\n        {\r\n            this.delayCurrent -= delta;\r\n\r\n            return false;\r\n        }\r\n\r\n        var emitter = this.emitter;\r\n\r\n        //  How far along in life is this particle? (t = 0 to 1)\r\n        var t = 1 - (this.lifeCurrent / this.life);\r\n\r\n        this.lifeT = t;\r\n\r\n        this.computeVelocity(emitter, delta, step, processors);\r\n\r\n        this.x += this.velocityX * step;\r\n        this.y += this.velocityY * step;\r\n\r\n        if (emitter.bounds)\r\n        {\r\n            this.checkBounds(emitter);\r\n        }\r\n\r\n        if (emitter.deathZone && emitter.deathZone.willKill(this))\r\n        {\r\n            this.lifeCurrent = 0;\r\n\r\n            //  No need to go any further, particle has been killed\r\n            return true;\r\n        }\r\n\r\n        this.scaleX = emitter.scaleX.onUpdate(this, 'scaleX', t, this.scaleX);\r\n\r\n        if (emitter.scaleY)\r\n        {\r\n            this.scaleY = emitter.scaleY.onUpdate(this, 'scaleY', t, this.scaleY);\r\n        }\r\n        else\r\n        {\r\n            this.scaleY = this.scaleX;\r\n        }\r\n\r\n        this.angle = emitter.rotate.onUpdate(this, 'rotate', t, this.angle);\r\n        this.rotation = DegToRad(this.angle);\r\n\r\n        this.alpha = emitter.alpha.onUpdate(this, 'alpha', t, this.alpha);\r\n\r\n        this.tint = emitter.tint.onUpdate(this, 'tint', t, this.tint);\r\n\r\n        this.lifeCurrent -= delta;\r\n\r\n        return (this.lifeCurrent <= 0);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Particle;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","DegToRad","DistanceBetween","Particle","initialize","emitter","frame","accelerationY","accelerationX","velocityY","velocityX","y","x","index","maxVelocityY","maxVelocityX","bounce","alpha","scaleY","scaleX","rotation","angle","tint","lifeCurrent","life","lifeT","delayCurrent","data","min","max","current","rotate","isAlive","fire","getFrame","emitZone","getPoint","undefined","follow","followOffset","onEmit","lifespan","sx","speedX","sy","speedY","radial","rad","Math","cos","abs","sin","moveTo","mx","moveToX","my","moveToY","atan2","speed","acceleration","delay","alive","length","computeVelocity","delta","step","processors","vx","vy","ax","ay","gravityX","gravityY","i","update","checkBounds","bounds","collideLeft","right","collideRight","collideTop","bottom","collideBottom","t","deathZone","willKill","onUpdate"]
}
