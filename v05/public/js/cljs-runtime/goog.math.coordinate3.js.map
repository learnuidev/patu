{
"version":3,
"file":"goog.math.coordinate3.js",
"lineCount":90,
"mappings":"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",
"sources":["goog/math/coordinate3.js"],
"sourcesContent":["// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A utility class for representing three-dimensional points.\n *\n * Based heavily on coordinate.js by:\n */\n\ngoog.provide('goog.math.Coordinate3');\n\n\n\n/**\n * Class for representing coordinates and positions in 3 dimensions.\n *\n * @param {number=} opt_x X coordinate, defaults to 0.\n * @param {number=} opt_y Y coordinate, defaults to 0.\n * @param {number=} opt_z Z coordinate, defaults to 0.\n * @struct\n * @constructor\n */\ngoog.math.Coordinate3 = function(opt_x, opt_y, opt_z) {\n  /**\n   * X-value\n   * @type {number}\n   */\n  this.x = (opt_x !== undefined) ? opt_x : 0;\n\n  /**\n   * Y-value\n   * @type {number}\n   */\n  this.y = (opt_y !== undefined) ? opt_y : 0;\n\n  /**\n   * Z-value\n   * @type {number}\n   */\n  this.z = (opt_z !== undefined) ? opt_z : 0;\n};\n\n\n/**\n * Returns a new copy of the coordinate.\n *\n * @return {!goog.math.Coordinate3} A clone of this coordinate.\n */\ngoog.math.Coordinate3.prototype.clone = function() {\n  return new goog.math.Coordinate3(this.x, this.y, this.z);\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a nice string representing the coordinate.\n   *\n   * @return {string} In the form (50, 73, 31).\n   * @override\n   */\n  goog.math.Coordinate3.prototype.toString = function() {\n    return '(' + this.x + ', ' + this.y + ', ' + this.z + ')';\n  };\n}\n\n\n/**\n * Compares coordinates for equality.\n *\n * @param {goog.math.Coordinate3} a A Coordinate3.\n * @param {goog.math.Coordinate3} b A Coordinate3.\n * @return {boolean} True iff the coordinates are equal, or if both are null.\n */\ngoog.math.Coordinate3.equals = function(a, b) {\n  if (a == b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  return a.x == b.x && a.y == b.y && a.z == b.z;\n};\n\n\n/**\n * Returns the distance between two coordinates.\n *\n * @param {goog.math.Coordinate3} a A Coordinate3.\n * @param {goog.math.Coordinate3} b A Coordinate3.\n * @return {number} The distance between `a` and `b`.\n */\ngoog.math.Coordinate3.distance = function(a, b) {\n  const dx = a.x - b.x;\n  const dy = a.y - b.y;\n  const dz = a.z - b.z;\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n};\n\n\n/**\n * Returns the squared distance between two coordinates. Squared distances can\n * be used for comparisons when the actual value is not required.\n *\n * Performance note: eliminating the square root is an optimization often used\n * in lower-level languages, but the speed difference is not nearly as\n * pronounced in JavaScript (only a few percent.)\n *\n * @param {goog.math.Coordinate3} a A Coordinate3.\n * @param {goog.math.Coordinate3} b A Coordinate3.\n * @return {number} The squared distance between `a` and `b`.\n */\ngoog.math.Coordinate3.squaredDistance = function(a, b) {\n  const dx = a.x - b.x;\n  const dy = a.y - b.y;\n  const dz = a.z - b.z;\n  return dx * dx + dy * dy + dz * dz;\n};\n\n\n/**\n * Returns the difference between two coordinates as a new\n * goog.math.Coordinate3.\n *\n * @param {goog.math.Coordinate3} a A Coordinate3.\n * @param {goog.math.Coordinate3} b A Coordinate3.\n * @return {!goog.math.Coordinate3} A Coordinate3 representing the difference\n *     between `a` and `b`.\n */\ngoog.math.Coordinate3.difference = function(a, b) {\n  return new goog.math.Coordinate3(a.x - b.x, a.y - b.y, a.z - b.z);\n};\n\n\n/**\n * Returns the contents of this coordinate as a 3 value Array.\n *\n * @return {!Array<number>} A new array.\n */\ngoog.math.Coordinate3.prototype.toArray = function() {\n  return [this.x, this.y, this.z];\n};\n\n\n/**\n * Converts a three element array into a Coordinate3 object.  If the value\n * passed in is not an array, not array-like, or not of the right length, an\n * error is thrown.\n *\n * @param {Array<number>} a Array of numbers to become a coordinate.\n * @return {!goog.math.Coordinate3} A new coordinate from the array values.\n * @throws {Error} When the oject passed in is not valid.\n */\ngoog.math.Coordinate3.fromArray = function(a) {\n  if (a.length <= 3) {\n    return new goog.math.Coordinate3(a[0], a[1], a[2]);\n  }\n\n  throw new Error('Conversion from an array requires an array of length 3');\n};\n"],
"names":["goog","provide","math","Coordinate3","goog.math.Coordinate3","opt_x","opt_y","opt_z","x","undefined","y","z","prototype","clone","goog.math.Coordinate3.prototype.clone","DEBUG","toString","goog.math.Coordinate3.prototype.toString","equals","goog.math.Coordinate3.equals","a","b","distance","goog.math.Coordinate3.distance","dx","dy","dz","Math","sqrt","squaredDistance","goog.math.Coordinate3.squaredDistance","difference","goog.math.Coordinate3.difference","toArray","goog.math.Coordinate3.prototype.toArray","fromArray","goog.math.Coordinate3.fromArray","length","Error"]
}
