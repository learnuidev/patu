{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$blitter$BlitterCanvasRenderer.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,yEAAA,CAA6F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0HrID,MAAAC,QAAA,CApG4BC,QAAS,CAACC,QAAD,CAAWC,GAAX,CAAgBC,uBAAhB,CAAyCC,MAAzC,CAAiDC,YAAjD,CACrC,CACQC,uBAAAA,CAAOJ,GAAAK,cAAA,EAEX,IAAoB,CAApB,GAAID,uBAAAE,OAAJ,CAAA,CAKA,IAAIC,IAAMR,QAAAS,eAAV,CAEIC,MAAQP,MAAAO,MAARA,CAAuBT,GAAAS,MAE3B,IAAc,CAAd,GAAIA,KAAJ,CAAA,CAOAF,GAAAG,yBAAA,CAA+BX,QAAAY,WAAA,CAAoBX,GAAAY,UAApB,CAE3BC,SAAAA,CAAgBb,GAAAc,EAAhBD,CAAwBX,MAAAa,QAAxBF,CAAyCb,GAAAgB,cACzCC,IAAAA,CAAgBjB,GAAAkB,EAAhBD,CAAwBf,MAAAiB,QAAxBF;AAAyCjB,GAAAoB,cAE7Cb,IAAAc,KAAA,EAEIlB,aAAJ,EAEIA,YAAAmB,cAAA,CAA2Bf,GAA3B,CAGAgB,OAAAA,CAAcrB,MAAAqB,YAGlB,KAASC,YAAT,CAAa,CAAb,CAAgBA,YAAhB,CAAoBpB,uBAAAE,OAApB,CAAiCkB,YAAA,EAAjC,CACA,CACI,IAAIC,IAAMrB,uBAAA,CAAKoB,YAAL,CAAV,CACIE,KAAQD,GAAAE,MAARD,EAAqBD,GAAAG,MADzB,CAEIC,MAAQJ,GAAAI,MAFZ,CAGIC,GAAKD,KAAAE,WAHT,CAIIC,GAAKH,KAAAf,EAJT,CAKImB,GAAKJ,KAAAX,EALT,CAMIgB,GAAK,CANT,CAOIC,GAAK,CAPT,CASIC,SAAWX,GAAAhB,MAAX2B,CAAuB3B,KAEV,EAAjB,GAAI2B,QAAJ,GAKA7B,GAAA8B,YAEA,CAFkBD,QAElB,CAAKV,IAAL,EAsBQD,GAAAE,MAgBJ,GAdIO,EACA,CADK,EACL,CAAAF,EAAA,EAAMF,EAAAQ,MAaV,EAVIb,GAAAG,MAUJ,GARIO,EACA,CADK,EACL,CAAAF,EAAA,EAAMH,EAAAS,OAOV,EAJAhC,GAAAc,KAAA,EAIA,CAHAd,GAAAiC,UAAA,CAAcf,GAAAX,EAAd,CAAsBD,QAAtB,CAAqCY,GAAAP,EAArC;AAA6CD,GAA7C,CAGA,CAFAV,GAAAkC,MAAA,CAAUP,EAAV,CAAcC,EAAd,CAEA,CADA5B,GAAAmC,UAAA,CAAcb,KAAAc,OAAAC,MAAd,CAAkCd,EAAAhB,EAAlC,CAAwCgB,EAAAZ,EAAxC,CAA8CY,EAAAQ,MAA9C,CAAwDR,EAAAS,OAAxD,CAAmEP,EAAnE,CAAuEC,EAAvE,CAA2EH,EAAAQ,MAA3E,CAAqFR,EAAAS,OAArF,CACA,CAAAhC,GAAAsC,QAAA,EAtCJ,GAEQtB,MAMJ,GAJIS,EACA,EADM,CACN,CAAAC,EAAA,EAAM,CAGV,EAAA1B,GAAAmC,UAAA,CACIb,KAAAc,OAAAC,MADJ,CAEId,EAAAhB,EAFJ,CAGIgB,EAAAZ,EAHJ,CAIIY,EAAAQ,MAJJ,CAKIR,EAAAS,OALJ,CAMIP,EANJ,CAMSP,GAAAX,EANT,CAMiBD,QANjB,CAOIoB,EAPJ,CAOSR,GAAAP,EAPT,CAOiBD,GAPjB,CAQIa,EAAAQ,MARJ,CASIR,EAAAS,OATJ,CARJ,CAPA,CAZJ,CA6DAhC,GAAAsC,QAAA,EApFA,CATA,CAHJ,CAvBqI;",
"sources":["node_modules/Phaser/src/gameobjects/blitter/BlitterCanvasRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$blitter$BlitterCanvasRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Blitter#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Blitter} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar BlitterCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var list = src.getRenderList();\r\n\r\n    if (list.length === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var ctx = renderer.currentContext;\r\n\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    if (alpha === 0)\r\n    {\r\n        //  Nothing to see, so abort early\r\n        return;\r\n    }\r\n\r\n    //  Blend Mode\r\n    ctx.globalCompositeOperation = renderer.blendModes[src.blendMode];\r\n\r\n    var cameraScrollX = src.x - camera.scrollX * src.scrollFactorX;\r\n    var cameraScrollY = src.y - camera.scrollY * src.scrollFactorY;\r\n\r\n    ctx.save();\r\n\r\n    if (parentMatrix)\r\n    {\r\n        parentMatrix.copyToContext(ctx);\r\n    }\r\n\r\n    var roundPixels = camera.roundPixels;\r\n\r\n    //  Render bobs\r\n    for (var i = 0; i < list.length; i++)\r\n    {\r\n        var bob = list[i];\r\n        var flip = (bob.flipX || bob.flipY);\r\n        var frame = bob.frame;\r\n        var cd = frame.canvasData;\r\n        var dx = frame.x;\r\n        var dy = frame.y;\r\n        var fx = 1;\r\n        var fy = 1;\r\n\r\n        var bobAlpha = bob.alpha * alpha;\r\n\r\n        if (bobAlpha === 0)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        ctx.globalAlpha = bobAlpha;\r\n    \r\n        if (!flip)\r\n        {\r\n            if (roundPixels)\r\n            {\r\n                dx |= 0;\r\n                dy |= 0;\r\n            }\r\n\r\n            ctx.drawImage(\r\n                frame.source.image,\r\n                cd.x,\r\n                cd.y,\r\n                cd.width,\r\n                cd.height,\r\n                dx + bob.x + cameraScrollX,\r\n                dy + bob.y + cameraScrollY,\r\n                cd.width,\r\n                cd.height\r\n            );\r\n        }\r\n        else\r\n        {\r\n            if (bob.flipX)\r\n            {\r\n                fx = -1;\r\n                dx -= cd.width;\r\n            }\r\n\r\n            if (bob.flipY)\r\n            {\r\n                fy = -1;\r\n                dy -= cd.height;\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(bob.x + cameraScrollX, bob.y + cameraScrollY);\r\n            ctx.scale(fx, fy);\r\n            ctx.drawImage(frame.source.image, cd.x, cd.y, cd.width, cd.height, dx, dy, cd.width, cd.height);\r\n            ctx.restore();\r\n        }\r\n    }\r\n    \r\n    ctx.restore();\r\n};\r\n\r\nmodule.exports = BlitterCanvasRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BlitterCanvasRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","list","getRenderList","length","ctx","currentContext","alpha","globalCompositeOperation","blendModes","blendMode","cameraScrollX","x","scrollX","scrollFactorX","cameraScrollY","y","scrollY","scrollFactorY","save","copyToContext","roundPixels","i","bob","flip","flipX","flipY","frame","cd","canvasData","dx","dy","fx","fy","bobAlpha","globalAlpha","width","height","translate","scale","drawImage","source","image","restore"]
}
