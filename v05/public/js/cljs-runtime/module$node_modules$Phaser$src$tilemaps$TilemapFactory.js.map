{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$TilemapFactory.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO/GC,MAAAA,CAAoBH,OAAA,CAAQ,8DAAR,CACxB,KAAII,eAAiBJ,OAAA,CAAQ,wDAAR,CA+BrBG,OAAAE,SAAA,CAA2B,SAA3B,CAAsC,QAAS,CAACC,GAAD,CAAMC,SAAN,CAAiBC,UAAjB,CAA6BC,KAA7B,CAAoCC,MAApC,CAA4CC,IAA5C,CAAkDC,UAAlD,CAC/C,CAKgB,IAAZ,GAAIN,GAAJ,GAAoBA,GAApB,CAA0BO,IAAAA,EAA1B,CACkB,KAAlB,GAAIN,SAAJ,GAA0BA,SAA1B,CAAsCM,IAAAA,EAAtC,CACmB,KAAnB,GAAIL,UAAJ,GAA2BA,UAA3B,CAAwCK,IAAAA,EAAxC,CACc,KAAd,GAAIJ,KAAJ,GAAsBA,KAAtB,CAA8BI,IAAAA,EAA9B,CACe,KAAf;AAAIH,MAAJ,GAAuBA,MAAvB,CAAgCG,IAAAA,EAAhC,CAEA,OAAOT,eAAA,CAAe,IAAAU,MAAf,CAA2BR,GAA3B,CAAgCC,SAAhC,CAA2CC,UAA3C,CAAuDC,KAAvD,CAA8DC,MAA9D,CAAsEC,IAAtE,CAA4EC,UAA5E,CAXX,CADA,CAvCmH;",
"sources":["node_modules/Phaser/src/tilemaps/TilemapFactory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$TilemapFactory\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar GameObjectFactory = require('../gameobjects/GameObjectFactory');\r\nvar ParseToTilemap = require('./ParseToTilemap');\r\n\r\n/**\r\n * Creates a Tilemap from the given key or data, or creates a blank Tilemap if no key/data provided.\r\n * When loading from CSV or a 2D array, you should specify the tileWidth & tileHeight. When parsing\r\n * from a map from Tiled, the tileWidth, tileHeight, width & height will be pulled from the map\r\n * data. For an empty map, you should specify tileWidth, tileHeight, width & height.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#tilemap\r\n * @since 3.0.0\r\n *\r\n * @param {string} [key] - The key in the Phaser cache that corresponds to the loaded tilemap data.\r\n * @param {integer} [tileWidth=32] - The width of a tile in pixels. Pass in `null` to leave as the\r\n * default.\r\n * @param {integer} [tileHeight=32] - The height of a tile in pixels. Pass in `null` to leave as the\r\n * default.\r\n * @param {integer} [width=10] - The width of the map in tiles. Pass in `null` to leave as the\r\n * default.\r\n * @param {integer} [height=10] - The height of the map in tiles. Pass in `null` to leave as the\r\n * default.\r\n * @param {integer[][]} [data] - Instead of loading from the cache, you can also load directly from\r\n * a 2D array of tile indexes. Pass in `null` for no data.\r\n * @param {boolean} [insertNull=false] - Controls how empty tiles, tiles with an index of -1, in the\r\n * map data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n * \r\n * @return {Phaser.Tilemaps.Tilemap}\r\n */\r\nGameObjectFactory.register('tilemap', function (key, tileWidth, tileHeight, width, height, data, insertNull)\r\n{\r\n    // Allow users to specify null to indicate that they want the default value, since null is\r\n    // shorter & more legible than undefined. Convert null to undefined to allow ParseToTilemap\r\n    // defaults to take effect.\r\n\r\n    if (key === null) { key = undefined; }\r\n    if (tileWidth === null) { tileWidth = undefined; }\r\n    if (tileHeight === null) { tileHeight = undefined; }\r\n    if (width === null) { width = undefined; }\r\n    if (height === null) { height = undefined; }\r\n\r\n    return ParseToTilemap(this.scene, key, tileWidth, tileHeight, width, height, data, insertNull);\r\n});\r\n\r\n//  When registering a factory function 'this' refers to the GameObjectFactory context.\r\n//\r\n//  There are several properties available to use:\r\n//\r\n//  this.scene - a reference to the Scene that owns the GameObjectFactory\r\n//  this.displayList - a reference to the Display List the Scene owns\r\n//  this.updateList - a reference to the Update List the Scene owns\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GameObjectFactory","ParseToTilemap","register","key","tileWidth","tileHeight","width","height","data","insertNull","undefined","scene"]
}
