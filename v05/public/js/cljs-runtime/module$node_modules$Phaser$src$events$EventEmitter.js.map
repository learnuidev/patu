{
"version":3,
"file":"module$node_modules$Phaser$src$events$EventEmitter.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,mDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO3GC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,GAAKJ,OAAA,CAAQ,yCAAR,CACLK,QAAAA,CAAcL,OAAA,CAAQ,oDAAR,CAWdM,OAAAA,CAAe,IAAIH,MAAJ,CAAU,CAEzBI,QAASH,EAFgB,CAIzBI,WAEAF,QAAsB,EACtB,CACIF,EAAAK,KAAA,CAAQ,IAAR,CADJ,CAPyB,CAiBzBC,SAAUA,QAAS,EACnB,CACI,IAAAC,mBAAA,EADJ,CAlByB,CA4BzBC,QAASA,QAAS,EAClB,CACI,IAAAD,mBAAA,EADJ,CA7ByB,CAAV,CA4JnBN,QAAAQ,SAAA,CAAqB,cAArB,CAAqCP,MAArC,CAAmD,QAAnD,CAEAL;MAAAC,QAAA,CAAiBI,MAlL8F;",
"sources":["node_modules/Phaser/src/events/EventEmitter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$events$EventEmitter\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar EE = require('eventemitter3');\r\nvar PluginCache = require('../plugins/PluginCache');\r\n\r\n/**\r\n * @classdesc\r\n * EventEmitter is a Scene Systems plugin compatible version of eventemitter3.\r\n *\r\n * @class EventEmitter\r\n * @memberOf Phaser.Events\r\n * @constructor\r\n * @since 3.0.0\r\n */\r\nvar EventEmitter = new Class({\r\n\r\n    Extends: EE,\r\n\r\n    initialize:\r\n\r\n    function EventEmitter ()\r\n    {\r\n        EE.call(this);\r\n    },\r\n\r\n    /**\r\n     * Removes all listeners.\r\n     *\r\n     * @method Phaser.Events.EventEmitter#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.removeAllListeners();\r\n    },\r\n\r\n    /**\r\n     * Removes all listeners.\r\n     *\r\n     * @method Phaser.Events.EventEmitter#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.removeAllListeners();\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Return an array listing the events for which the emitter has registered listeners.\r\n *\r\n * @method Phaser.Events.EventEmitter#eventNames\r\n * @since 3.0.0\r\n *\r\n * @return {array}\r\n */\r\n\r\n/**\r\n * Return the listeners registered for a given event.\r\n *\r\n * @method Phaser.Events.EventEmitter#listeners\r\n * @since 3.0.0\r\n *\r\n * @param {(string|symbol)} event - The event name.\r\n *\r\n * @return {array} The registered listeners.\r\n */\r\n\r\n/**\r\n * Return the number of listeners listening to a given event.\r\n *\r\n * @method Phaser.Events.EventEmitter#listenerCount\r\n * @since 3.0.0\r\n *\r\n * @param {(string|symbol)} event - The event name.\r\n *\r\n * @return {number} The number of listeners.\r\n */\r\n\r\n/**\r\n * Calls each of the listeners registered for a given event.\r\n *\r\n * @method Phaser.Events.EventEmitter#emit\r\n * @since 3.0.0\r\n *\r\n * @param {(string|symbol)} event - The event name.\r\n * @param {...*} [args] - Additional arguments that will be passed to the event handler.\r\n *\r\n * @return {boolean} `true` if the event had listeners, else `false`.\r\n */\r\n\r\n/**\r\n * Add a listener for a given event.\r\n *\r\n * @method Phaser.Events.EventEmitter#on\r\n * @since 3.0.0\r\n *\r\n * @param {(string|symbol)} event - The event name.\r\n * @param {function} fn - The listener function.\r\n * @param {*} [context=this] - The context to invoke the listener with.\r\n *\r\n * @return {Phaser.Events.EventEmitter} `this`.\r\n */\r\n\r\n/**\r\n * Add a listener for a given event.\r\n *\r\n * @method Phaser.Events.EventEmitter#addListener\r\n * @since 3.0.0\r\n *\r\n * @param {(string|symbol)} event - The event name.\r\n * @param {function} fn - The listener function.\r\n * @param {*} [context=this] - The context to invoke the listener with.\r\n *\r\n * @return {Phaser.Events.EventEmitter} `this`.\r\n */\r\n\r\n/**\r\n * Add a one-time listener for a given event.\r\n *\r\n * @method Phaser.Events.EventEmitter#once\r\n * @since 3.0.0\r\n *\r\n * @param {(string|symbol)} event - The event name.\r\n * @param {function} fn - The listener function.\r\n * @param {*} [context=this] - The context to invoke the listener with.\r\n *\r\n * @return {Phaser.Events.EventEmitter} `this`.\r\n */\r\n\r\n/**\r\n * Remove the listeners of a given event.\r\n *\r\n * @method Phaser.Events.EventEmitter#removeListener\r\n * @since 3.0.0\r\n *\r\n * @param {(string|symbol)} event - The event name.\r\n * @param {function} fn - Only remove the listeners that match this function.\r\n * @param {*} context - Only remove the listeners that have this context.\r\n * @param {boolean} once - Only remove one-time listeners.\r\n *\r\n * @return {Phaser.Events.EventEmitter} `this`.\r\n */\r\n\r\n/**\r\n * Remove the listeners of a given event.\r\n *\r\n * @method Phaser.Events.EventEmitter#off\r\n * @since 3.0.0\r\n *\r\n * @param {(string|symbol)} event - The event name.\r\n * @param {function} fn - Only remove the listeners that match this function.\r\n * @param {*} context - Only remove the listeners that have this context.\r\n * @param {boolean} once - Only remove one-time listeners.\r\n *\r\n * @return {Phaser.Events.EventEmitter} `this`.\r\n */\r\n\r\n/**\r\n * Remove all listeners, or those of the specified event.\r\n *\r\n * @method Phaser.Events.EventEmitter#removeAllListeners\r\n * @since 3.0.0\r\n *\r\n * @param {(string|symbol)} [event] - The event name.\r\n *\r\n * @return {Phaser.Events.EventEmitter} `this`.\r\n */\r\n\r\nPluginCache.register('EventEmitter', EventEmitter, 'events');\r\n\r\nmodule.exports = EventEmitter;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","EE","PluginCache","EventEmitter","Extends","initialize","call","shutdown","removeAllListeners","destroy","register"]
}
