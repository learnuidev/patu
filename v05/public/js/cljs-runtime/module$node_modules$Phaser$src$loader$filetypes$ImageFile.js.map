{
"version":3,
"file":"module$node_modules$Phaser$src$loader$filetypes$ImageFile.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/loader/filetypes/ImageFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$filetypes$ImageFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.ImageFrameConfig\r\n *\r\n * @property {integer} frameWidth - The width of the frame in pixels.\r\n * @property {integer} [frameHeight] - The height of the frame in pixels. Uses the `frameWidth` value if not provided.\r\n * @property {integer} [startFrame=0] - The first frame to start parsing from.\r\n * @property {integer} [endFrame] - The frame to stop parsing at. If not provided it will calculate the value based on the image and frame dimensions.\r\n * @property {integer} [margin=0] - The margin in the image. This is the space around the edge of the frames.\r\n * @property {integer} [spacing=0] - The spacing between each frame in the image.\r\n */\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.ImageFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within both the Loader and the Texture Manager.\r\n * @property {string} [url] - The absolute or relative URL to load the file from.\r\n * @property {string} [extension='png'] - The default file extension to use if no url is provided.\r\n * @property {string} [normalMap] - The filename of an associated normal map. It uses the same path and url to load as the image.\r\n * @property {Phaser.Loader.FileTypes.ImageFrameConfig} [frameConfig] - The frame configuration object. Only provided for, and used by, Sprite Sheets.\r\n * @property {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A single Image File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#image method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#image.\r\n *\r\n * @class ImageFile\r\n * @extends Phaser.Loader.File\r\n * @memberOf Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.ImageFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string|string[]} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n * @param {Phaser.Loader.FileTypes.ImageFrameConfig} [frameConfig] - The frame configuration object. Only provided for, and used by, Sprite Sheets.\r\n */\r\nvar ImageFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function ImageFile (loader, key, url, xhrSettings, frameConfig)\r\n    {\r\n        var extension = 'png';\r\n        var normalMapURL;\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            url = GetFastValue(config, 'url');\r\n            normalMapURL = GetFastValue(config, 'normalMap');\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            extension = GetFastValue(config, 'extension', extension);\r\n            frameConfig = GetFastValue(config, 'frameConfig');\r\n        }\r\n\r\n        if (Array.isArray(url))\r\n        {\r\n            normalMapURL = url[1];\r\n            url = url[0];\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'image',\r\n            cache: loader.textureManager,\r\n            extension: extension,\r\n            responseType: 'blob',\r\n            key: key,\r\n            url: url,\r\n            xhrSettings: xhrSettings,\r\n            config: frameConfig\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n\r\n        //  Do we have a normal map to load as well?\r\n        if (normalMapURL)\r\n        {\r\n            var normalMap = new ImageFile(loader, this.key, normalMapURL, xhrSettings, frameConfig);\r\n\r\n            normalMap.type = 'normalMap';\r\n\r\n            this.setLink(normalMap);\r\n\r\n            loader.addFile(normalMap);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.ImageFile#onProcess\r\n     * @since 3.7.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        this.data = new Image();\r\n\r\n        this.data.crossOrigin = this.crossOrigin;\r\n\r\n        var _this = this;\r\n\r\n        this.data.onload = function ()\r\n        {\r\n            File.revokeObjectURL(_this.data);\r\n\r\n            _this.onProcessComplete();\r\n        };\r\n\r\n        this.data.onerror = function ()\r\n        {\r\n            File.revokeObjectURL(_this.data);\r\n\r\n            _this.onProcessError();\r\n        };\r\n\r\n        File.createObjectURL(this.data, this.xhrLoader.response, 'image/png');\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.ImageFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        var texture;\r\n        var linkFile = this.linkFile;\r\n\r\n        if (linkFile && linkFile.state === CONST.FILE_COMPLETE)\r\n        {\r\n            if (this.type === 'image')\r\n            {\r\n                texture = this.cache.addImage(this.key, this.data, linkFile.data);\r\n            }\r\n            else\r\n            {\r\n                texture = this.cache.addImage(linkFile.key, linkFile.data, this.data);\r\n            }\r\n\r\n            this.pendingDestroy(texture);\r\n\r\n            linkFile.pendingDestroy(texture);\r\n        }\r\n        else if (!linkFile)\r\n        {\r\n            texture = this.cache.addImage(this.key, this.data);\r\n\r\n            this.pendingDestroy(texture);\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds an Image, or array of Images, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.image('logo', 'images/phaserLogo.png');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\r\n * If you try to load an animated gif only the first frame will be rendered. Browsers do not natively support playback\r\n * of animated gifs to Canvas elements.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.image({\r\n *     key: 'logo',\r\n *     url: 'images/AtariLogo.png'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.ImageFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can use it as a texture for a Game Object by referencing its key:\r\n * \r\n * ```javascript\r\n * this.load.image('logo', 'images/AtariLogo.png');\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'logo');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\r\n * then you can specify it by providing an array as the `url` where the second element is the normal map:\r\n * \r\n * ```javascript\r\n * this.load.image('logo', [ 'images/AtariLogo.png', 'images/AtariLogo-n.png' ]);\r\n * ```\r\n *\r\n * Or, if you are using a config object use the `normalMap` property:\r\n * \r\n * ```javascript\r\n * this.load.image({\r\n *     key: 'logo',\r\n *     url: 'images/AtariLogo.png',\r\n *     normalMap: 'images/AtariLogo-n.png'\r\n * });\r\n * ```\r\n *\r\n * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\r\n * Normal maps are a WebGL only feature.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Image File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#image\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.ImageFileConfig|Phaser.Loader.FileTypes.ImageFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string|string[]} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('image', function (key, url, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new ImageFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new ImageFile(this, key, url, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = ImageFile;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","CONST","File","FileTypesManager","GetFastValue","IsPlainObject","ImageFile","Extends","initialize","loader","key","url","xhrSettings","frameConfig","extension","config","normalMapURL","Array","isArray","call","fileConfig","type","cache","textureManager","responseType","normalMap","setLink","addFile","onProcess","state","FILE_PROCESSING","data","Image","crossOrigin","_this","onload","this.data.onload","revokeObjectURL","onProcessComplete","onerror","this.data.onerror","onProcessError","createObjectURL","xhrLoader","response","addToCache","linkFile","FILE_COMPLETE","texture","addImage","pendingDestroy","register","i","length"]
}
