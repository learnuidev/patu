{
"version":3,
"file":"module$node_modules$Phaser$src$physics$impact$World.js",
"lineCount":18,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/impact/World.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$impact$World\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Body = require('./Body');\r\nvar Class = require('../../utils/Class');\r\nvar COLLIDES = require('./COLLIDES');\r\nvar CollisionMap = require('./CollisionMap');\r\nvar EventEmitter = require('eventemitter3');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar HasValue = require('../../utils/object/HasValue');\r\nvar Set = require('../../structs/Set');\r\nvar Solver = require('./Solver');\r\nvar TILEMAP_FORMATS = require('../../tilemaps/Formats');\r\nvar TYPE = require('./TYPE');\r\n\r\n/**\r\n * @typedef {object} Phaser.Physics.Impact.WorldConfig\r\n *\r\n * @property {number} [gravity=0] - Sets {@link Phaser.Physics.Impact.World#gravity}\r\n * @property {number} [cellSize=64] - The size of the cells used for the broadphase pass. Increase this value if you have lots of large objects in the world.\r\n * @property {number} [timeScale=1] - A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\r\n * @property {number} [maxStep=0.05] - [description]\r\n * @property {boolean} [debug=false] - Sets {@link Phaser.Physics.Impact.World#debug}.\r\n * @property {number} [maxVelocity=100] - The maximum velocity a body can move.\r\n * @property {boolean} [debugShowBody=true] - Whether the Body's boundary is drawn to the debug display.\r\n * @property {boolean} [debugShowVelocity=true] - Whether the Body's velocity is drawn to the debug display.\r\n * @property {number} [debugBodyColor=0xff00ff] - The color of this Body on the debug display.\r\n * @property {number} [debugVelocityColor=0x00ff00] - The color of the Body's velocity on the debug display.\r\n * @property {number} [maxVelocityX=maxVelocity] - Maximum X velocity objects can move.\r\n * @property {number} [maxVelocityY=maxVelocity] - Maximum Y velocity objects can move.\r\n * @property {number} [minBounceVelocity=40] - The minimum velocity an object can be moving at to be considered for bounce.\r\n * @property {number} [gravityFactor=1] - Gravity multiplier. Set to 0 for no gravity.\r\n * @property {number} [bounciness=0] - The default bounce, or restitution, of bodies in the world.\r\n * @property {(object|boolean)} [setBounds] - Should the world have bounds enabled by default?\r\n * @property {number} [setBounds.x=0] - The x coordinate of the world bounds.\r\n * @property {number} [setBounds.y=0] - The y coordinate of the world bounds.\r\n * @property {number} [setBounds.width] - The width of the world bounds.\r\n * @property {number} [setBounds.height] - The height of the world bounds.\r\n * @property {number} [setBounds.thickness=64] - The thickness of the walls of the world bounds.\r\n * @property {boolean} [setBounds.left=true] - Should the left-side world bounds wall be created?\r\n * @property {boolean} [setBounds.right=true] - Should the right-side world bounds wall be created?\r\n * @property {boolean} [setBounds.top=true] - Should the top world bounds wall be created?\r\n * @property {boolean} [setBounds.bottom=true] - Should the bottom world bounds wall be created?\r\n */\r\n\r\n/**\r\n * An object containing the 4 wall bodies that bound the physics world.\r\n * \r\n * @typedef {object} Phaser.Physics.Impact.WorldDefaults\r\n *\r\n * @property {boolean} debugShowBody - Whether the Body's boundary is drawn to the debug display.\r\n * @property {boolean} debugShowVelocity - Whether the Body's velocity is drawn to the debug display.\r\n * @property {number} bodyDebugColor - The color of this Body on the debug display.\r\n * @property {number} velocityDebugColor - The color of the Body's velocity on the debug display.\r\n * @property {number} maxVelocityX - Maximum X velocity objects can move.\r\n * @property {number} maxVelocityY - Maximum Y velocity objects can move.\r\n * @property {number} minBounceVelocity - The minimum velocity an object can be moving at to be considered for bounce.\r\n * @property {number} gravityFactor - Gravity multiplier. Set to 0 for no gravity.\r\n * @property {number} bounciness - The default bounce, or restitution, of bodies in the world.\r\n */\r\n\r\n/**\r\n * @typedef {object} Phaser.Physics.Impact.WorldWalls\r\n *\r\n * @property {?Phaser.Physics.Impact.Body} left - The left-side wall of the world bounds.\r\n * @property {?Phaser.Physics.Impact.Body} right - The right-side wall of the world bounds.\r\n * @property {?Phaser.Physics.Impact.Body} top - The top wall of the world bounds.\r\n * @property {?Phaser.Physics.Impact.Body} bottom - The bottom wall of the world bounds.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class World\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberOf Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {Phaser.Physics.Impact.WorldConfig} config - [description]\r\n */\r\nvar World = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function World (scene, config)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.World#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.World#bodies\r\n         * @type {Phaser.Structs.Set.<Phaser.Physics.Impact.Body>}\r\n         * @since 3.0.0\r\n         */\r\n        this.bodies = new Set();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.World#gravity\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.gravity = GetFastValue(config, 'gravity', 0);\r\n\r\n        /**\r\n         * Spatial hash cell dimensions\r\n         *\r\n         * @name Phaser.Physics.Impact.World#cellSize\r\n         * @type {integer}\r\n         * @default 64\r\n         * @since 3.0.0\r\n         */\r\n        this.cellSize = GetFastValue(config, 'cellSize', 64);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.World#collisionMap\r\n         * @type {Phaser.Physics.Impact.CollisionMap}\r\n         * @since 3.0.0\r\n         */\r\n        this.collisionMap = new CollisionMap();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.World#timeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.timeScale = GetFastValue(config, 'timeScale', 1);\r\n\r\n        /**\r\n         * Impacts maximum time step is 20 fps.\r\n         *\r\n         * @name Phaser.Physics.Impact.World#maxStep\r\n         * @type {number}\r\n         * @default 0.05\r\n         * @since 3.0.0\r\n         */\r\n        this.maxStep = GetFastValue(config, 'maxStep', 0.05);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.World#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.World#drawDebug\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.drawDebug = GetFastValue(config, 'debug', false);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.World#debugGraphic\r\n         * @type {Phaser.GameObjects.Graphics}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugGraphic;\r\n\r\n        var _maxVelocity = GetFastValue(config, 'maxVelocity', 100);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.World#defaults\r\n         * @type {Phaser.Physics.Impact.WorldDefaults}\r\n         * @since 3.0.0\r\n         */\r\n        this.defaults = {\r\n            debugShowBody: GetFastValue(config, 'debugShowBody', true),\r\n            debugShowVelocity: GetFastValue(config, 'debugShowVelocity', true),\r\n            bodyDebugColor: GetFastValue(config, 'debugBodyColor', 0xff00ff),\r\n            velocityDebugColor: GetFastValue(config, 'debugVelocityColor', 0x00ff00),\r\n            maxVelocityX: GetFastValue(config, 'maxVelocityX', _maxVelocity),\r\n            maxVelocityY: GetFastValue(config, 'maxVelocityY', _maxVelocity),\r\n            minBounceVelocity: GetFastValue(config, 'minBounceVelocity', 40),\r\n            gravityFactor: GetFastValue(config, 'gravityFactor', 1),\r\n            bounciness: GetFastValue(config, 'bounciness', 0)\r\n        };\r\n\r\n        /**\r\n         * An object containing the 4 wall bodies that bound the physics world.\r\n         *\r\n         * @name Phaser.Physics.Impact.World#walls\r\n         * @type {Phaser.Physics.Impact.WorldWalls}\r\n         * @since 3.0.0\r\n         */\r\n        this.walls = { left: null, right: null, top: null, bottom: null };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.World#delta\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.delta = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.World#_lastId\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._lastId = 0;\r\n\r\n        if (GetFastValue(config, 'setBounds', false))\r\n        {\r\n            var boundsConfig = config['setBounds'];\r\n\r\n            if (typeof boundsConfig === 'boolean')\r\n            {\r\n                this.setBounds();\r\n            }\r\n            else\r\n            {\r\n                var x = GetFastValue(boundsConfig, 'x', 0);\r\n                var y = GetFastValue(boundsConfig, 'y', 0);\r\n                var width = GetFastValue(boundsConfig, 'width', scene.sys.game.config.width);\r\n                var height = GetFastValue(boundsConfig, 'height', scene.sys.game.config.height);\r\n                var thickness = GetFastValue(boundsConfig, 'thickness', 64);\r\n                var left = GetFastValue(boundsConfig, 'left', true);\r\n                var right = GetFastValue(boundsConfig, 'right', true);\r\n                var top = GetFastValue(boundsConfig, 'top', true);\r\n                var bottom = GetFastValue(boundsConfig, 'bottom', true);\r\n\r\n                this.setBounds(x, y, width, height, thickness, left, right, top, bottom);\r\n            }\r\n        }\r\n\r\n        if (this.drawDebug)\r\n        {\r\n            this.createDebugGraphic();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the collision map for the world either from a Weltmeister JSON level in the cache or from\r\n     * a 2D array. If loading from a Weltmeister level, the map must have a layer called \"collision\".\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setCollisionMap\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer[][])} key - Either a string key that corresponds to a Weltmeister level\r\n     * in the cache, or a 2D array of collision IDs.\r\n     * @param {integer} tileSize - The size of a tile. This is optional if loading from a Weltmeister\r\n     * level in the cache.\r\n     *\r\n     * @return {?Phaser.Physics.Impact.CollisionMap} The newly created CollisionMap, or null if the method failed to\r\n     * create the CollisionMap.\r\n     */\r\n    setCollisionMap: function (key, tileSize)\r\n    {\r\n        if (typeof key === 'string')\r\n        {\r\n            var tilemapData = this.scene.cache.tilemap.get(key);\r\n\r\n            if (!tilemapData || tilemapData.format !== TILEMAP_FORMATS.WELTMEISTER)\r\n            {\r\n                console.warn('The specified key does not correspond to a Weltmeister tilemap: ' + key);\r\n                return null;\r\n            }\r\n\r\n            var layers = tilemapData.data.layer;\r\n            var collisionLayer;\r\n            for (var i = 0; i < layers.length; i++)\r\n            {\r\n                if (layers[i].name === 'collision')\r\n                {\r\n                    collisionLayer = layers[i];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (tileSize === undefined) { tileSize = collisionLayer.tilesize; }\r\n\r\n            this.collisionMap = new CollisionMap(tileSize, collisionLayer.data);\r\n        }\r\n        else if (Array.isArray(key))\r\n        {\r\n            this.collisionMap = new CollisionMap(tileSize, key);\r\n        }\r\n        else\r\n        {\r\n            console.warn('Invalid Weltmeister collision map data: ' + key);\r\n        }\r\n\r\n        return this.collisionMap;\r\n    },\r\n\r\n    /**\r\n     * Sets the collision map for the world from a tilemap layer. Only tiles that are marked as\r\n     * colliding will be used. You can specify the mapping from tiles to slope IDs in a couple of\r\n     * ways. The easiest is to use Tiled and the slopeTileProperty option. Alternatively, you can\r\n     * manually create a slopeMap that stores the mapping between tile indices and slope IDs.\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setCollisionMapFromTilemapLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} tilemapLayer - The tilemap layer to use.\r\n     * @param {object} [options] - Options for controlling the mapping from tiles to slope IDs.\r\n     * @param {string} [options.slopeTileProperty=null] - Slope IDs can be stored on tiles directly\r\n     * using Tiled's tileset editor. If a tile has a property with the given slopeTileProperty string\r\n     * name, the value of that property for the tile will be used for its slope mapping. E.g. a 45\r\n     * degree slope upward could be given a \"slope\" property with a value of 2.\r\n     * @param {object} [options.slopeMap=null] - A tile index to slope definition map.\r\n     * @param {integer} [options.defaultCollidingSlope=null] - If specified, the default slope ID to\r\n     * assign to a colliding tile. If not specified, the tile's index is used.\r\n     * @param {integer} [options.defaultNonCollidingSlope=0] - The default slope ID to assign to a\r\n     * non-colliding tile.\r\n     *\r\n     * @return {Phaser.Physics.Impact.CollisionMap} The newly created CollisionMap.\r\n     */\r\n    setCollisionMapFromTilemapLayer: function (tilemapLayer, options)\r\n    {\r\n        if (options === undefined) { options = {}; }\r\n        var slopeProperty = GetFastValue(options, 'slopeProperty', null);\r\n        var slopeMap = GetFastValue(options, 'slopeMap', null);\r\n        var collidingSlope = GetFastValue(options, 'defaultCollidingSlope', null);\r\n        var nonCollidingSlope = GetFastValue(options, 'defaultNonCollidingSlope', 0);\r\n\r\n        var layerData = tilemapLayer.layer;\r\n        var tileSize = layerData.baseTileWidth;\r\n        var collisionData = [];\r\n\r\n        for (var ty = 0; ty < layerData.height; ty++)\r\n        {\r\n            collisionData[ty] = [];\r\n\r\n            for (var tx = 0; tx < layerData.width; tx++)\r\n            {\r\n                var tile = layerData.data[ty][tx];\r\n\r\n                if (tile && tile.collides)\r\n                {\r\n                    if (slopeProperty !== null && HasValue(tile.properties, slopeProperty))\r\n                    {\r\n                        collisionData[ty][tx] = parseInt(tile.properties[slopeProperty], 10);\r\n                    }\r\n                    else if (slopeMap !== null && HasValue(slopeMap, tile.index))\r\n                    {\r\n                        collisionData[ty][tx] = slopeMap[tile.index];\r\n                    }\r\n                    else if (collidingSlope !== null)\r\n                    {\r\n                        collisionData[ty][tx] = collidingSlope;\r\n                    }\r\n                    else\r\n                    {\r\n                        collisionData[ty][tx] = tile.index;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    collisionData[ty][tx] = nonCollidingSlope;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.collisionMap = new CollisionMap(tileSize, collisionData);\r\n\r\n        return this.collisionMap;\r\n    },\r\n\r\n    /**\r\n     * Sets the bounds of the Physics world to match the given world pixel dimensions.\r\n     * You can optionally set which 'walls' to create: left, right, top or bottom.\r\n     * If none of the walls are given it will default to use the walls settings it had previously.\r\n     * I.e. if you previously told it to not have the left or right walls, and you then adjust the world size\r\n     * the newly created bounds will also not have the left and right walls.\r\n     * Explicitly state them in the parameters to override this.\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x] - The x coordinate of the top-left corner of the bounds.\r\n     * @param {number} [y] - The y coordinate of the top-left corner of the bounds.\r\n     * @param {number} [width] - The width of the bounds.\r\n     * @param {number} [height] - The height of the bounds.\r\n     * @param {number} [thickness=64] - [description]\r\n     * @param {boolean} [left=true] - If true will create the left bounds wall.\r\n     * @param {boolean} [right=true] - If true will create the right bounds wall.\r\n     * @param {boolean} [top=true] - If true will create the top bounds wall.\r\n     * @param {boolean} [bottom=true] - If true will create the bottom bounds wall.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setBounds: function (x, y, width, height, thickness, left, right, top, bottom)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = this.scene.sys.game.config.width; }\r\n        if (height === undefined) { height = this.scene.sys.game.config.height; }\r\n        if (thickness === undefined) { thickness = 64; }\r\n        if (left === undefined) { left = true; }\r\n        if (right === undefined) { right = true; }\r\n        if (top === undefined) { top = true; }\r\n        if (bottom === undefined) { bottom = true; }\r\n\r\n        this.updateWall(left, 'left', x - thickness, y, thickness, height);\r\n        this.updateWall(right, 'right', x + width, y, thickness, height);\r\n        this.updateWall(top, 'top', x, y - thickness, width, thickness);\r\n        this.updateWall(bottom, 'bottom', x, y + height, width, thickness);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * position = 'left', 'right', 'top' or 'bottom'\r\n     *\r\n     * @method Phaser.Physics.Impact.World#updateWall\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} add - [description]\r\n     * @param {string} position - [description]\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     */\r\n    updateWall: function (add, position, x, y, width, height)\r\n    {\r\n        var wall = this.walls[position];\r\n\r\n        if (add)\r\n        {\r\n            if (wall)\r\n            {\r\n                wall.resetSize(x, y, width, height);\r\n            }\r\n            else\r\n            {\r\n                this.walls[position] = this.create(x, y, width, height);\r\n                this.walls[position].name = position;\r\n                this.walls[position].gravityFactor = 0;\r\n                this.walls[position].collides = COLLIDES.FIXED;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (wall)\r\n            {\r\n                this.bodies.remove(wall);\r\n            }\r\n\r\n            this.walls[position] = null;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Creates a Graphics Game Object used for debug display and enables the world for debug drawing.\r\n     *\r\n     * @method Phaser.Physics.Impact.World#createDebugGraphic\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} The Graphics object created that will have the debug visuals drawn to it.\r\n     */\r\n    createDebugGraphic: function ()\r\n    {\r\n        var graphic = this.scene.sys.add.graphics({ x: 0, y: 0 });\r\n\r\n        graphic.setDepth(Number.MAX_VALUE);\r\n\r\n        this.debugGraphic = graphic;\r\n\r\n        this.drawDebug = true;\r\n\r\n        return graphic;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#getNextID\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} [description]\r\n     */\r\n    getNextID: function ()\r\n    {\r\n        return this._lastId++;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} sizeX - [description]\r\n     * @param {number} sizeY - [description]\r\n     *\r\n     * @return {Phaser.Physics.Impact.Body} The Body that was added to this World.\r\n     */\r\n    create: function (x, y, sizeX, sizeY)\r\n    {\r\n        var body = new Body(this, x, y, sizeX, sizeY);\r\n\r\n        this.bodies.set(body);\r\n\r\n        return body;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body} object - The Body to remove from this World.\r\n     */\r\n    remove: function (object)\r\n    {\r\n        this.bodies.delete(object);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    pause: function ()\r\n    {\r\n        this.enabled = false;\r\n\r\n        this.emit('pause');\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    resume: function ()\r\n    {\r\n        this.enabled = true;\r\n\r\n        this.emit('resume');\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.enabled || this.bodies.size === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        //  Impact uses a divided delta value that is clamped to the maxStep (20fps) maximum\r\n\r\n        var clampedDelta = Math.min(delta / 1000, this.maxStep) * this.timeScale;\r\n\r\n        this.delta = clampedDelta;\r\n\r\n        //  Update all active bodies\r\n\r\n        var i;\r\n        var body;\r\n        var bodies = this.bodies.entries;\r\n        var len = bodies.length;\r\n        var hash = {};\r\n        var size = this.cellSize;\r\n\r\n        for (i = 0; i < len; i++)\r\n        {\r\n            body = bodies[i];\r\n\r\n            if (body.enabled)\r\n            {\r\n                body.update(clampedDelta);\r\n            }\r\n        }\r\n\r\n        //  Run collision against them all now they're in the new positions from the update\r\n\r\n        for (i = 0; i < len; i++)\r\n        {\r\n            body = bodies[i];\r\n\r\n            if (body && !body.skipHash())\r\n            {\r\n                this.checkHash(body, hash, size);\r\n            }\r\n        }\r\n\r\n        if (this.drawDebug)\r\n        {\r\n            var graphics = this.debugGraphic;\r\n\r\n            graphics.clear();\r\n\r\n            for (i = 0; i < len; i++)\r\n            {\r\n                body = bodies[i];\r\n\r\n                if (body && body.willDrawDebug())\r\n                {\r\n                    body.drawDebug(graphics);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Check the body against the spatial hash.\r\n     *\r\n     * @method Phaser.Physics.Impact.World#checkHash\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body} body - [description]\r\n     * @param {object} hash - [description]\r\n     * @param {number} size - [description]\r\n     */\r\n    checkHash: function (body, hash, size)\r\n    {\r\n        var checked = {};\r\n\r\n        var xmin = Math.floor(body.pos.x / size);\r\n        var ymin = Math.floor(body.pos.y / size);\r\n        var xmax = Math.floor((body.pos.x + body.size.x) / size) + 1;\r\n        var ymax = Math.floor((body.pos.y + body.size.y) / size) + 1;\r\n\r\n        for (var x = xmin; x < xmax; x++)\r\n        {\r\n            for (var y = ymin; y < ymax; y++)\r\n            {\r\n                if (!hash[x])\r\n                {\r\n                    hash[x] = {};\r\n                    hash[x][y] = [ body ];\r\n                }\r\n                else if (!hash[x][y])\r\n                {\r\n                    hash[x][y] = [ body ];\r\n                }\r\n                else\r\n                {\r\n                    var cell = hash[x][y];\r\n\r\n                    for (var c = 0; c < cell.length; c++)\r\n                    {\r\n                        if (body.touches(cell[c]) && !checked[cell[c].id])\r\n                        {\r\n                            checked[cell[c].id] = true;\r\n\r\n                            this.checkBodies(body, cell[c]);\r\n                        }\r\n                    }\r\n\r\n                    cell.push(body);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#checkBodies\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body} bodyA - [description]\r\n     * @param {Phaser.Physics.Impact.Body} bodyB - [description]\r\n     */\r\n    checkBodies: function (bodyA, bodyB)\r\n    {\r\n        //  2 fixed bodies won't do anything\r\n        if (bodyA.collides === COLLIDES.FIXED && bodyB.collides === COLLIDES.FIXED)\r\n        {\r\n            return;\r\n        }\r\n\r\n        //  bitwise checks\r\n        if (bodyA.checkAgainst & bodyB.type)\r\n        {\r\n            bodyA.check(bodyB);\r\n        }\r\n\r\n        if (bodyB.checkAgainst & bodyA.type)\r\n        {\r\n            bodyB.check(bodyA);\r\n        }\r\n\r\n        if (bodyA.collides && bodyB.collides && bodyA.collides + bodyB.collides > COLLIDES.ACTIVE)\r\n        {\r\n            Solver(this, bodyA, bodyB);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setCollidesNever\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the collides value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setCollidesNever: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].collides = COLLIDES.NEVER;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setLite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the collides value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setLite: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].collides = COLLIDES.LITE;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setPassive\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the collides value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setPassive: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].collides = COLLIDES.PASSIVE;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setActive\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the collides value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setActive: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].collides = COLLIDES.ACTIVE;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setFixed\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the collides value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setFixed: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].collides = COLLIDES.FIXED;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setTypeNone\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the type value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setTypeNone: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].type = TYPE.NONE;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setTypeA\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the type value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setTypeA: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].type = TYPE.A;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setTypeB\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the type value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setTypeB: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].type = TYPE.B;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setAvsB\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the type value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setAvsB: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].type = TYPE.A;\r\n            bodies[i].checkAgainst = TYPE.B;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setBvsA\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the type value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setBvsA: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].type = TYPE.B;\r\n            bodies[i].checkAgainst = TYPE.A;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setCheckAgainstNone\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the type value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setCheckAgainstNone: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].checkAgainst = TYPE.NONE;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setCheckAgainstA\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the type value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setCheckAgainstA: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].checkAgainst = TYPE.A;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#setCheckAgainstB\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body[]} bodies - An Array of Impact Bodies to set the type value on.\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} This World object.\r\n     */\r\n    setCheckAgainstB: function (bodies)\r\n    {\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            bodies[i].checkAgainst = TYPE.B;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.removeAllListeners();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.World#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.removeAllListeners();\r\n\r\n        this.scene = null;\r\n\r\n        this.bodies.clear();\r\n\r\n        this.bodies = null;\r\n\r\n        this.collisionMap = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = World;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Body","Class","COLLIDES","CollisionMap","EventEmitter","GetFastValue","HasValue","Set","Solver","TILEMAP_FORMATS","TYPE","World","Extends","initialize","scene","config","call","bodies","gravity","cellSize","collisionMap","timeScale","maxStep","enabled","drawDebug","_maxVelocity","defaults","debugShowBody","debugShowVelocity","bodyDebugColor","velocityDebugColor","maxVelocityX","maxVelocityY","minBounceVelocity","gravityFactor","bounciness","walls","left","right","top","bottom","_lastId","delta","boundsConfig","setBounds","x","y","width","sys","game","height","thickness","createDebugGraphic","setCollisionMap","key","tileSize","tilemapData","cache","tilemap","get","format","WELTMEISTER","console","warn","layers","data","layer","i","length","name","collisionLayer","undefined","tilesize","Array","isArray","setCollisionMapFromTilemapLayer","tilemapLayer","options","slopeProperty","slopeMap","collidingSlope","nonCollidingSlope","layerData","baseTileWidth","collisionData","ty","tx","tile","collides","properties","parseInt","index","updateWall","add","position","wall","resetSize","create","FIXED","remove","graphic","graphics","setDepth","Number","MAX_VALUE","debugGraphic","getNextID","sizeX","sizeY","body","set","object","delete","pause","emit","resume","update","time","size","clampedDelta","Math","min","entries","len","hash","skipHash","checkHash","clear","willDrawDebug","checked","ymin","floor","pos","xmax","ymax","xmin","cell","c","touches","id","checkBodies","push","bodyA","bodyB","checkAgainst","type","check","ACTIVE","setCollidesNever","NEVER","setLite","LITE","setPassive","PASSIVE","setActive","setFixed","setTypeNone","NONE","setTypeA","A","setTypeB","B","setAvsB","setBvsA","setCheckAgainstNone","setCheckAgainstA","setCheckAgainstB","shutdown","removeAllListeners","destroy"]
}
