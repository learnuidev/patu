{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$PointerConstraint.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/PointerConstraint.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$PointerConstraint\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Bounds = require('./lib/geometry/Bounds');\r\nvar Class = require('../../utils/Class');\r\nvar Composite = require('./lib/body/Composite');\r\nvar Constraint = require('./lib/constraint/Constraint');\r\nvar Detector = require('./lib/collision/Detector');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Merge = require('../../utils/object/Merge');\r\nvar Sleeping = require('./lib/core/Sleeping');\r\nvar Vector2 = require('../../math/Vector2');\r\nvar Vertices = require('./lib/geometry/Vertices');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class PointerConstraint\r\n * @memberOf Phaser.Physics.Matter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {Phaser.Physics.Matter.World} world - [description]\r\n * @param {object} options - [description]\r\n */\r\nvar PointerConstraint = new Class({\r\n\r\n    initialize:\r\n\r\n    function PointerConstraint (scene, world, options)\r\n    {\r\n        if (options === undefined) { options = {}; }\r\n\r\n        //  Defaults\r\n        var defaults = {\r\n            label: 'Pointer Constraint',\r\n            pointA: { x: 0, y: 0 },\r\n            pointB: { x: 0, y: 0 },\r\n            damping: 0,\r\n            length: 0.01,\r\n            stiffness: 0.1,\r\n            angularStiffness: 1,\r\n            collisionFilter: {\r\n                category: 0x0001,\r\n                mask: 0xFFFFFFFF,\r\n                group: 0\r\n            }\r\n        };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.PointerConstraint#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.PointerConstraint#world\r\n         * @type {Phaser.Physics.Matter.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.PointerConstraint#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @since 3.0.0\r\n         */\r\n        var camera = GetFastValue(options, 'camera', null);\r\n\r\n        if (!camera)\r\n        {\r\n            this.camera = scene.sys.cameras.main;\r\n        }\r\n        else\r\n        {\r\n            this.camera = camera;\r\n\r\n            delete options.camera;\r\n        }\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.PointerConstraint#pointer\r\n         * @type {Phaser.Input.Pointer}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.pointer = null;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.PointerConstraint#active\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.active = true;\r\n\r\n        /**\r\n         * The transformed position.\r\n         *\r\n         * @name Phaser.Physics.Matter.PointerConstraint#position\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.position = new Vector2();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.PointerConstraint#constraint\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.constraint = Constraint.create(Merge(options, defaults));\r\n\r\n        this.world.on('beforeupdate', this.update, this);\r\n\r\n        scene.sys.input.on('pointerdown', this.onDown, this);\r\n\r\n        scene.sys.input.on('pointerup', this.onUp, this);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.PointerConstraint#onDown\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Input.Pointer} pointer - [description]\r\n     */\r\n    onDown: function (pointer)\r\n    {\r\n        this.pointer = pointer;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.PointerConstraint#onUp\r\n     * @since 3.0.0\r\n     */\r\n    onUp: function ()\r\n    {\r\n        this.pointer = null;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.PointerConstraint#getBodyPart\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MatterJS.Body} body - [description]\r\n     * @param {Phaser.Math.Vector2} position - [description]\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    getBodyPart: function (body, position)\r\n    {\r\n        var constraint = this.constraint;\r\n\r\n        var start = (body.parts.length > 1) ? 1 : 0;\r\n\r\n        for (var i = start; i < body.parts.length; i++)\r\n        {\r\n            var part = body.parts[i];\r\n\r\n            if (Vertices.contains(part.vertices, position))\r\n            {\r\n                constraint.bodyB = body;\r\n\r\n                constraint.pointA.x = position.x;\r\n                constraint.pointA.y = position.y;\r\n\r\n                constraint.pointB.x = position.x - body.position.x;\r\n                constraint.pointB.y = position.y - body.position.y;\r\n\r\n                constraint.angleB = body.angle;\r\n\r\n                Sleeping.set(body, false);\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.PointerConstraint#update\r\n     * @since 3.0.0\r\n     */\r\n    update: function ()\r\n    {\r\n        if (!this.active)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var pointer = this.pointer;\r\n        var constraint = this.constraint;\r\n\r\n        if (!pointer)\r\n        {\r\n            //  Pointer is up / released\r\n            if (constraint.bodyB)\r\n            {\r\n                constraint.bodyB = null;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            var pos = this.position;\r\n\r\n            this.camera.getWorldPoint(pointer.x, pointer.y, pos);\r\n\r\n            if (constraint.bodyB)\r\n            {\r\n                //  Pointer is down and we have bodyB, so wake it up\r\n                Sleeping.set(constraint.bodyB, false);\r\n\r\n                constraint.pointA.x = pos.x;\r\n                constraint.pointA.y = pos.y;\r\n            }\r\n            else\r\n            {\r\n                var bodies = Composite.allBodies(this.world.localWorld);\r\n\r\n                //  Pointer is down and no bodyB, so check if we've hit anything\r\n                for (var i = 0; i < bodies.length; i++)\r\n                {\r\n                    var body = bodies[i];\r\n\r\n                    if (!body.ignorePointer && Bounds.contains(body.bounds, pos) &&\r\n                        Detector.canCollide(body.collisionFilter, constraint.collisionFilter))\r\n                    {\r\n                        if (this.getBodyPart(body, pos))\r\n                        {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.PointerConstraint#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.world.removeConstraint(this.constraint);\r\n\r\n        this.constraint = null;\r\n\r\n        this.world.off('beforeupdate', this.update);\r\n\r\n        this.scene.sys.input.off('pointerdown', this.onDown, this);\r\n\r\n        this.scene.sys.input.off('pointerup', this.onUp, this);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = PointerConstraint;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Bounds","Class","Composite","Constraint","Detector","GetFastValue","Merge","Sleeping","Vector2","Vertices","PointerConstraint","initialize","scene","world","options","undefined","camera","sys","cameras","main","pointer","active","position","constraint","create","defaults","label","pointA","x","y","pointB","damping","length","stiffness","angularStiffness","collisionFilter","category","mask","group","on","update","input","onDown","onUp","getBodyPart","body","i","start","parts","contains","part","vertices","bodyB","angleB","angle","set","pos","getWorldPoint","bodies","allBodies","localWorld","ignorePointer","bounds","canCollide","destroy","removeConstraint","off"]
}
