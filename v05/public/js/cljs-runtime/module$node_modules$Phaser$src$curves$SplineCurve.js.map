{
"version":3,
"file":"module$node_modules$Phaser$src$curves$SplineCurve.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/curves/SplineCurve.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$curves$SplineCurve\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n//  Based on the three.js Curve classes created by [zz85](http://www.lab4games.net/zz85/blog)\r\n\r\nvar CatmullRom = require('../math/CatmullRom');\r\nvar Class = require('../utils/Class');\r\nvar Curve = require('./Curve');\r\nvar Vector2 = require('../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class Spline\r\n * @extends Phaser.Curves.Curve\r\n * @memberOf Phaser.Curves\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector2[]} [points] - [description]\r\n */\r\nvar SplineCurve = new Class({\r\n\r\n    Extends: Curve,\r\n\r\n    initialize:\r\n\r\n    function SplineCurve (points)\r\n    {\r\n        if (points === undefined) { points = []; }\r\n\r\n        Curve.call(this, 'SplineCurve');\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.Spline#points\r\n         * @type {Phaser.Math.Vector2[]}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.points = [];\r\n\r\n        this.addPoints(points);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Spline#addPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2[]|number[]|number[][])} points - [description]\r\n     *\r\n     * @return {Phaser.Curves.Spline} This curve object.\r\n     */\r\n    addPoints: function (points)\r\n    {\r\n        for (var i = 0; i < points.length; i++)\r\n        {\r\n            var p = new Vector2();\r\n\r\n            if (typeof points[i] === 'number')\r\n            {\r\n                p.x = points[i];\r\n                p.y = points[i + 1];\r\n                i++;\r\n            }\r\n            else if (Array.isArray(points[i]))\r\n            {\r\n                //  An array of arrays?\r\n                p.x = points[i][0];\r\n                p.y = points[i][1];\r\n            }\r\n            else\r\n            {\r\n                p.x = points[i].x;\r\n                p.y = points[i].y;\r\n            }\r\n\r\n            this.points.push(p);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Spline#addPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector2} [description]\r\n     */\r\n    addPoint: function (x, y)\r\n    {\r\n        var vec = new Vector2(x, y);\r\n\r\n        this.points.push(vec);\r\n\r\n        return vec;\r\n    },\r\n\r\n    /**\r\n     * Gets the starting point on the curve.\r\n     *\r\n     * @method Phaser.Curves.Spline#getStartPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getStartPoint: function (out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        return out.copy(this.points[0]);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Spline#getResolution\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} divisions - [description]\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getResolution: function (divisions)\r\n    {\r\n        return divisions * this.points.length;\r\n    },\r\n\r\n    /**\r\n     * Get point at relative position in curve according to length.\r\n     *\r\n     * @method Phaser.Curves.Spline#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getPoint: function (t, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        var points = this.points;\r\n\r\n        var point = (points.length - 1) * t;\r\n\r\n        var intPoint = Math.floor(point);\r\n\r\n        var weight = point - intPoint;\r\n\r\n        var p0 = points[(intPoint === 0) ? intPoint : intPoint - 1];\r\n        var p1 = points[intPoint];\r\n        var p2 = points[(intPoint > points.length - 2) ? points.length - 1 : intPoint + 1];\r\n        var p3 = points[(intPoint > points.length - 3) ? points.length - 1 : intPoint + 2];\r\n\r\n        return out.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Spline#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {JSONCurve} The JSON object containing this curve data.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var points = [];\r\n\r\n        for (var i = 0; i < this.points.length; i++)\r\n        {\r\n            points.push(this.points[i].x);\r\n            points.push(this.points[i].y);\r\n        }\r\n\r\n        return {\r\n            type: this.type,\r\n            points: points\r\n        };\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Curves.Spline.fromJSON\r\n * @since 3.0.0\r\n *\r\n * @param {JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.Spline} [description]\r\n */\r\nSplineCurve.fromJSON = function (data)\r\n{\r\n    return new SplineCurve(data.points);\r\n};\r\n\r\nmodule.exports = SplineCurve;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","CatmullRom","Class","Curve","Vector2","SplineCurve","Extends","initialize","points","undefined","call","addPoints","i","length","p","x","y","Array","isArray","push","addPoint","vec","getStartPoint","out","copy","getResolution","divisions","getPoint","t","point","intPoint","Math","floor","weight","p0","p1","p2","p3","set","toJSON","type","fromJSON","SplineCurve.fromJSON","data"]
}
