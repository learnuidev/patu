{
"version":3,
"file":"module$node_modules$Phaser$src$structs$Map.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/structs/Map.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$structs$Map\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @callback EachMapCallback\r\n * @generic E - [entry]\r\n *\r\n * @param {string} key - [description]\r\n * @param {*} entry - [description]\r\n *\r\n * @return {?boolean} [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The keys of a Map can be arbitrary values.\r\n * \r\n * ```javascript\r\n * var map = new Map([\r\n *    [ 1, 'one' ],\r\n *    [ 2, 'two' ],\r\n *    [ 3, 'three' ]\r\n * ]);\r\n * ```\r\n *\r\n * @class Map\r\n * @memberOf Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @generic K\r\n * @generic V\r\n * @genericUse {V[]} - [elements]\r\n *\r\n * @param {Array.<*>} elements - An optional array of key-value pairs to populate this Map with.\r\n */\r\nvar Map = new Class({\r\n\r\n    initialize:\r\n\r\n    function Map (elements)\r\n    {\r\n        /**\r\n         * The entries in this Map.\r\n         *\r\n         * @genericUse {Object.<string, V>} - [$type]\r\n         *\r\n         * @name Phaser.Structs.Map#entries\r\n         * @type {Object.<string, *>}\r\n         * @default {}\r\n         * @since 3.0.0\r\n         */\r\n        this.entries = {};\r\n\r\n        /**\r\n         * The number of key / value pairs in this Map.\r\n         *\r\n         * @name Phaser.Structs.Map#size\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.size = 0;\r\n\r\n        if (Array.isArray(elements))\r\n        {\r\n            for (var i = 0; i < elements.length; i++)\r\n            {\r\n                this.set(elements[i][0], elements[i][1]);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds an element with a specified `key` and `value` to this Map.\r\n     *\r\n     * @method Phaser.Structs.Map#set\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {K} - [key]\r\n     * @genericUse {V} - [value]\r\n     * @genericUse {Phaser.Structs.Map.<K, V>} - [$return]\r\n     *\r\n     * @param {string} key - The key of the element to be added to this Map.\r\n     * @param {*} value - The value of the element to be added to this Map.\r\n     *\r\n     * @return {Phaser.Structs.Map} This Map object.\r\n     */\r\n    set: function (key, value)\r\n    {\r\n        if (!this.has(key))\r\n        {\r\n            this.entries[key] = value;\r\n            this.size++;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the value associated to the `key`, or `undefined` if there is none.\r\n     *\r\n     * @method Phaser.Structs.Map#get\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {K} - [key]\r\n     * @genericUse {V} - [$return]\r\n     *\r\n     * @param {string} key - The key of the element to return from the `Map` object.\r\n     *\r\n     * @return {*} The element associated with the specified key or `undefined` if the key can't be found in this Map object.\r\n     */\r\n    get: function (key)\r\n    {\r\n        if (this.has(key))\r\n        {\r\n            return this.entries[key];\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns an `Array` of all the values stored in this Map.\r\n     *\r\n     * @method Phaser.Structs.Map#getArray\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {V[]} - [$return]\r\n     *\r\n     * @return {Array.<*>} An array of the values stored in this Map.\r\n     */\r\n    getArray: function ()\r\n    {\r\n        var output = [];\r\n        var entries = this.entries;\r\n\r\n        for (var key in entries)\r\n        {\r\n            output.push(entries[key]);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Returns a boolean indicating whether an element with the specified key exists or not.\r\n     *\r\n     * @method Phaser.Structs.Map#has\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {K} - [key]\r\n     *\r\n     * @param {string} key - The key of the element to test for presence of in this Map.\r\n     *\r\n     * @return {boolean} Returns `true` if an element with the specified key exists in this Map, otherwise `false`.\r\n     */\r\n    has: function (key)\r\n    {\r\n        return (this.entries.hasOwnProperty(key));\r\n    },\r\n\r\n    /**\r\n     * Delete the specified element from this Map.\r\n     *\r\n     * @method Phaser.Structs.Map#delete\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {K} - [key]\r\n     * @genericUse {Phaser.Structs.Map.<K, V>} - [$return]\r\n     *\r\n     * @param {string} key - The key of the element to delete from this Map.\r\n     *\r\n     * @return {Phaser.Structs.Map} This Map object.\r\n     */\r\n    delete: function (key)\r\n    {\r\n        if (this.has(key))\r\n        {\r\n            delete this.entries[key];\r\n            this.size--;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Delete all entries from this Map.\r\n     *\r\n     * @method Phaser.Structs.Map#clear\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.Map.<K, V>} - [$return]\r\n     *\r\n     * @return {Phaser.Structs.Map} This Map object.\r\n     */\r\n    clear: function ()\r\n    {\r\n        Object.keys(this.entries).forEach(function (prop)\r\n        {\r\n            delete this.entries[prop];\r\n\r\n        }, this);\r\n\r\n        this.size = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns all entries keys in this Map.\r\n     *\r\n     * @method Phaser.Structs.Map#keys\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {K[]} - [$return]\r\n     *\r\n     * @return {string[]} Array containing entries' keys.\r\n     */\r\n    keys: function ()\r\n    {\r\n        return Object.keys(this.entries);\r\n    },\r\n\r\n    /**\r\n     * Returns an `Array` of all entries.\r\n     *\r\n     * @method Phaser.Structs.Map#values\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {V[]} - [$return]\r\n     *\r\n     * @return {Array.<*>} An `Array` of entries.\r\n     */\r\n    values: function ()\r\n    {\r\n        var output = [];\r\n        var entries = this.entries;\r\n\r\n        for (var key in entries)\r\n        {\r\n            output.push(entries[key]);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Dumps the contents of this Map to the console via `console.group`.\r\n     *\r\n     * @method Phaser.Structs.Map#dump\r\n     * @since 3.0.0\r\n     */\r\n    dump: function ()\r\n    {\r\n        var entries = this.entries;\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.group('Map');\r\n\r\n        for (var key in entries)\r\n        {\r\n            console.log(key, entries[key]);\r\n        }\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.groupEnd();\r\n    },\r\n\r\n    /**\r\n     * Passes all entries in this Map to the given callback.\r\n     *\r\n     * @method Phaser.Structs.Map#each\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {EachMapCallback.<V>} - [callback]\r\n     * @genericUse {Phaser.Structs.Map.<K, V>} - [$return]\r\n     *\r\n     * @param {EachMapCallback} callback - The callback which will receive the keys and entries held in this Map.\r\n     *\r\n     * @return {Phaser.Structs.Map} This Map object.\r\n     */\r\n    each: function (callback)\r\n    {\r\n        var entries = this.entries;\r\n\r\n        for (var key in entries)\r\n        {\r\n            if (callback(key, entries[key]) === false)\r\n            {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns `true` if the value exists within this Map. Otherwise, returns `false`.\r\n     *\r\n     * @method Phaser.Structs.Map#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {V} - [value]\r\n     *\r\n     * @param {*} value - The value to search for.\r\n     *\r\n     * @return {boolean} `true` if the value is found, otherwise `false`.\r\n     */\r\n    contains: function (value)\r\n    {\r\n        var entries = this.entries;\r\n\r\n        for (var key in entries)\r\n        {\r\n            if (entries[key] === value)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Merges all new keys from the given Map into this one.\r\n     * If it encounters a key that already exists it will be skipped unless override is set to `true`.\r\n     *\r\n     * @method Phaser.Structs.Map#merge\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.Map.<K, V>} - [map,$return]\r\n     *\r\n     * @param {Phaser.Structs.Map} map - The Map to merge in to this Map.\r\n     * @param {boolean} [override=false] - Set to `true` to replace values in this Map with those from the source map, or `false` to skip them.\r\n     *\r\n     * @return {Phaser.Structs.Map} This Map object.\r\n     */\r\n    merge: function (map, override)\r\n    {\r\n        if (override === undefined) { override = false; }\r\n\r\n        var local = this.entries;\r\n        var source = map.entries;\r\n\r\n        for (var key in source)\r\n        {\r\n            if (local.hasOwnProperty(key) && override)\r\n            {\r\n                local[key] = source[key];\r\n            }\r\n            else\r\n            {\r\n                this.set(key, source[key]);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Map;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Map","Class","initialize","elements","entries","size","Array","isArray","i","length","set","key","value","has","get","getArray","output","push","hasOwnProperty","delete","clear","Object","keys","forEach","prop","values","dump","console","group","log","groupEnd","each","callback","contains","merge","map","override","undefined","local","source"]
}
