shadow$provide.module$node_modules$Phaser$src$gameobjects$shape$rectangle$RectangleWebGLRenderer=function(global,require,module,exports){var StrokePathWebGL=require("module$node_modules$Phaser$src$gameobjects$shape$StrokePathWebGL"),Utils=require("module$node_modules$Phaser$src$renderer$webgl$Utils");module.exports=function(renderer,src,interpolationPercentage,camera,parentMatrix){interpolationPercentage=this.pipeline;var camMatrix=interpolationPercentage._tempMatrix1,shapeMatrix=interpolationPercentage._tempMatrix2,
calcMatrix=interpolationPercentage._tempMatrix3;renderer.setPipeline(interpolationPercentage);shapeMatrix.applyITRS(src.x,src.y,src.rotation,src.scaleX,src.scaleY);camMatrix.copyFrom(camera.matrix);parentMatrix?(camMatrix.multiplyWithOffset(parentMatrix,-camera.scrollX*src.scrollFactorX,-camera.scrollY*src.scrollFactorY),shapeMatrix.e=src.x,shapeMatrix.f=src.y):(shapeMatrix.e-=camera.scrollX*src.scrollFactorX,shapeMatrix.f-=camera.scrollY*src.scrollFactorY);camMatrix.multiply(shapeMatrix,calcMatrix);
renderer=src._displayOriginX;parentMatrix=src._displayOriginY;camera=camera.alpha*src.alpha;src.isFilled&&(camMatrix=interpolationPercentage.fillTint,shapeMatrix=Utils.getTintAppendFloatAlphaAndSwap(src.fillColor,src.fillAlpha*camera),camMatrix.TL=shapeMatrix,camMatrix.TR=shapeMatrix,camMatrix.BL=shapeMatrix,camMatrix.BR=shapeMatrix,interpolationPercentage.batchFillRect(-renderer,-parentMatrix,src.width,src.height));src.isStroked&&StrokePathWebGL(interpolationPercentage,src,camera,renderer,parentMatrix)}}
//# sourceMappingURL=module$node_modules$Phaser$src$gameobjects$shape$rectangle$RectangleWebGLRenderer.js.map
