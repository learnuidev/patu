{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$MatterSprite.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,8DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO1H,IAAIC,mBAAqBH,OAAA,CAAQ,iEAAR,CACrBI,OAAAA,CAAQJ,OAAA,CAAQ,4CAAR,CACRK,QAAAA,CAAaL,OAAA,CAAQ,mEAAR,CACjB,KAAIM,WAAaN,OAAA,CAAQ,uDAAR,CAAjB,CACIO,aAAeP,OAAA,CAAQ,0DAAR,CADnB;AAEIQ,SAAWR,OAAA,CAAQ,gEAAR,CAFf,CAGIS,OAAST,OAAA,CAAQ,0DAAR,CAHb,CAIIU,QAAUV,OAAA,CAAQ,6CAAR,CAsDVW,QAAAA,CAAe,IAAIP,MAAJ,CAAU,CAEzBQ,QAASH,MAFgB,CAIzBI,OAAQ,CACJR,OAAAS,OADI,CAEJT,OAAAU,UAFI,CAGJV,OAAAW,MAHI,CAIJX,OAAAY,SAJI,CAKJZ,OAAAa,QALI,CAMJb,OAAAc,KANI,CAOJd,OAAAe,OAPI,CAQJf,OAAAgB,QARI,CASJhB,OAAAiB,MATI,CAUJjB,OAAAkB,OAVI,CAWJlB,OAAAmB,UAXI,CAYJnB,OAAAoB,SAZI,CAaJjB,QAbI,CAJiB,CAoBzBkB,WAEAf,QAAsB,CAACgB,KAAD,CAAQC,CAAR,CAAWC,CAAX,CAAcC,OAAd,CAAuBC,KAAvB;AAA8BC,OAA9B,CACtB,CACI1B,UAAA2B,KAAA,CAAgB,IAAhB,CAAsBN,KAAAO,MAAtB,CAAmC,OAAnC,CAEA,KAAAC,MAAA,CAAa,IAAIhC,kBAAJ,CAAuB,IAAvB,CAEb,KAAAiC,WAAA,CAAgBN,OAAhB,CAAyBC,KAAzB,CACA,KAAAM,eAAA,EACA,KAAAC,UAAA,EASA,KAAAX,MAAA,CAAaA,KAUb,KAAAY,UAAA,CAAiB,IAAI7B,OAAJ,CAAYkB,CAAZ,CAAeC,CAAf,CAIjB,EAFIW,KAEJ,CAFYjC,YAAA,CAAayB,OAAb,CAAsB,OAAtB,CAA+B,IAA/B,CAEZ,EAEI,IAAAS,QAAA,CAAaD,KAAb,CAAoBR,OAApB,CAFJ,CAMI,IAAAU,aAAA,CAAkB,IAAAC,MAAlB,CAA8B,IAAAC,OAA9B,CAA2CZ,OAA3C,CAGJ,KAAAa,YAAA,CAAiBjB,CAAjB,CAAoBC,CAApB,CAEA,KAAAiB,aAAA,CAAkB,qBAAlB,CAzCJ,CAvByB,CAAV,CAqEnB7C,OAAAC,QAAA,CAAiBS,OAzIyG;",
"sources":["node_modules/Phaser/src/physics/matter-js/MatterSprite.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$MatterSprite\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar AnimationComponent = require('../../gameobjects/components/Animation');\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('./components');\r\nvar GameObject = require('../../gameobjects/GameObject');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Pipeline = require('../../gameobjects/components/Pipeline');\r\nvar Sprite = require('../../gameobjects/sprite/Sprite');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Matter Physics Sprite Game Object.\r\n *\r\n * A Sprite Game Object is used for the display of both static and animated images in your game.\r\n * Sprites can have input events and physics bodies. They can also be tweened, tinted, scrolled\r\n * and animated.\r\n *\r\n * The main difference between a Sprite and an Image Game Object is that you cannot animate Images.\r\n * As such, Sprites take a fraction longer to process and have a larger API footprint due to the Animation\r\n * Component. If you do not require animation then you can safely use Images to replace Sprites in all cases.\r\n *\r\n * @class Sprite\r\n * @extends Phaser.GameObjects.Sprite\r\n * @memberOf Phaser.Physics.Matter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.Physics.Matter.Components.Bounce\r\n * @extends Phaser.Physics.Matter.Components.Collision\r\n * @extends Phaser.Physics.Matter.Components.Force\r\n * @extends Phaser.Physics.Matter.Components.Friction\r\n * @extends Phaser.Physics.Matter.Components.Gravity\r\n * @extends Phaser.Physics.Matter.Components.Mass\r\n * @extends Phaser.Physics.Matter.Components.Sensor\r\n * @extends Phaser.Physics.Matter.Components.SetBody\r\n * @extends Phaser.Physics.Matter.Components.Sleep\r\n * @extends Phaser.Physics.Matter.Components.Static\r\n * @extends Phaser.Physics.Matter.Components.Transform\r\n * @extends Phaser.Physics.Matter.Components.Velocity\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Tint\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Physics.Matter.World} world - [description]\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n * @param {object} [options={}] - Matter.js configuration object.\r\n */\r\nvar MatterSprite = new Class({\r\n\r\n    Extends: Sprite,\r\n\r\n    Mixins: [\r\n        Components.Bounce,\r\n        Components.Collision,\r\n        Components.Force,\r\n        Components.Friction,\r\n        Components.Gravity,\r\n        Components.Mass,\r\n        Components.Sensor,\r\n        Components.SetBody,\r\n        Components.Sleep,\r\n        Components.Static,\r\n        Components.Transform,\r\n        Components.Velocity,\r\n        Pipeline\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function MatterSprite (world, x, y, texture, frame, options)\r\n    {\r\n        GameObject.call(this, world.scene, 'Image');\r\n\r\n        this.anims = new AnimationComponent(this);\r\n\r\n        this.setTexture(texture, frame);\r\n        this.setSizeToFrame();\r\n        this.setOrigin();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.Sprite#world\r\n         * @type {Phaser.Physics.Matter.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.Sprite#_tempVec2\r\n         * @type {Phaser.Math.Vector2}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._tempVec2 = new Vector2(x, y);\r\n\r\n        var shape = GetFastValue(options, 'shape', null);\r\n\r\n        if (shape)\r\n        {\r\n            this.setBody(shape, options);\r\n        }\r\n        else\r\n        {\r\n            this.setRectangle(this.width, this.height, options);\r\n        }\r\n\r\n        this.setPosition(x, y);\r\n\r\n        this.initPipeline('TextureTintPipeline');\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = MatterSprite;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","AnimationComponent","Class","Components","GameObject","GetFastValue","Pipeline","Sprite","Vector2","MatterSprite","Extends","Mixins","Bounce","Collision","Force","Friction","Gravity","Mass","Sensor","SetBody","Sleep","Static","Transform","Velocity","initialize","world","x","y","texture","frame","options","call","scene","anims","setTexture","setSizeToFrame","setOrigin","_tempVec2","shape","setBody","setRectangle","width","height","setPosition","initPipeline"]
}
