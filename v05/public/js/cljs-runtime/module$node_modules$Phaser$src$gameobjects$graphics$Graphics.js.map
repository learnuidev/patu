{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$graphics$Graphics.js",
"lineCount":23,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/graphics/Graphics.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$graphics$Graphics\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar BaseCamera = require('../../cameras/2d/BaseCamera.js');\r\nvar Class = require('../../utils/Class');\r\nvar Commands = require('./Commands');\r\nvar ComponentsAlpha = require('../components/Alpha');\r\nvar ComponentsBlendMode = require('../components/BlendMode');\r\nvar ComponentsDepth = require('../components/Depth');\r\nvar ComponentsMask = require('../components/Mask');\r\nvar ComponentsPipeline = require('../components/Pipeline');\r\nvar ComponentsTransform = require('../components/Transform');\r\nvar ComponentsVisible = require('../components/Visible');\r\nvar ComponentsScrollFactor = require('../components/ScrollFactor');\r\n\r\nvar Ellipse = require('../../geom/ellipse/Ellipse');\r\nvar GameObject = require('../GameObject');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar MATH_CONST = require('../../math/const');\r\nvar Render = require('./GraphicsRender');\r\n\r\n/**\r\n * Graphics line style (or stroke style) settings.\r\n *\r\n * @typedef {object} GraphicsLineStyle\r\n *\r\n * @property {number} [width] - The stroke width.\r\n * @property {number} [color] - The stroke color.\r\n * @property {number} [alpha] - The stroke alpha.\r\n */\r\n\r\n/**\r\n * Graphics fill style settings.\r\n *\r\n * @typedef {object} GraphicsFillStyle\r\n *\r\n * @property {number} [color] - The fill color.\r\n * @property {number} [alpha] - The fill alpha.\r\n */\r\n\r\n/**\r\n * Graphics style settings.\r\n *\r\n * @typedef {object} GraphicsStyles\r\n *\r\n * @property {GraphicsLineStyle} [lineStyle] - The style applied to shape outlines.\r\n * @property {GraphicsFillStyle} [fillStyle] - The style applied to shape areas.\r\n */\r\n\r\n/**\r\n * Options for the Graphics game Object.\r\n *\r\n * @typedef {object} GraphicsOptions\r\n * @extends GraphicsStyles\r\n *\r\n * @property {number} [x] - The x coordinate of the Graphics.\r\n * @property {number} [y] - The y coordinate of the Graphics.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A Graphics object is a way to draw primitive shapes to your game. Primitives include forms of geometry, such as\r\n * Rectangles, Circles, and Polygons. They also include lines, arcs and curves. When you initially create a Graphics\r\n * object it will be empty.\r\n *\r\n * To draw to it you must first specify a line style or fill style (or both), draw shapes using paths, and finally\r\n * fill or stroke them. For example:\r\n *\r\n * ```javascript\r\n * graphics.lineStyle(5, 0xFF00FF, 1.0);\r\n * graphics.beginPath();\r\n * graphics.moveTo(100, 100);\r\n * graphics.lineTo(200, 200);\r\n * graphics.closePath();\r\n * graphics.strokePath();\r\n * ```\r\n *\r\n * There are also many helpful methods that draw and fill/stroke common shapes for you.\r\n *\r\n * ```javascript\r\n * graphics.lineStyle(5, 0xFF00FF, 1.0);\r\n * graphics.fillStyle(0xFFFFFF, 1.0);\r\n * graphics.fillRect(50, 50, 400, 200);\r\n * graphics.strokeRect(50, 50, 400, 200);\r\n * ```\r\n *\r\n * When a Graphics object is rendered it will render differently based on if the game is running under Canvas or WebGL.\r\n * Under Canvas it will use the HTML Canvas context drawing operations to draw the path.\r\n * Under WebGL the graphics data is decomposed into polygons. Both of these are expensive processes, especially with\r\n * complex shapes.\r\n *\r\n * If your Graphics object doesn't change much (or at all) once you've drawn your shape to it, then you will help\r\n * performance by calling {@link Phaser.GameObjects.Graphics#generateTexture}. This will 'bake' the Graphics object into\r\n * a Texture, and return it. You can then use this Texture for Sprites or other display objects. If your Graphics object\r\n * updates frequently then you should avoid doing this, as it will constantly generate new textures, which will consume\r\n * memory.\r\n *\r\n * As you can tell, Graphics objects are a bit of a trade-off. While they are extremely useful, you need to be careful\r\n * in their complexity and quantity of them in your game.\r\n *\r\n * @class Graphics\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Graphics object belongs.\r\n * @param {GraphicsOptions} [options] - Options that set the position and default style of this Graphics object.\r\n */\r\nvar Graphics = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        ComponentsAlpha,\r\n        ComponentsBlendMode,\r\n        ComponentsDepth,\r\n        ComponentsMask,\r\n        ComponentsPipeline,\r\n        ComponentsTransform,\r\n        ComponentsVisible,\r\n        ComponentsScrollFactor,\r\n        Render\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Graphics (scene, options)\r\n    {\r\n        var x = GetValue(options, 'x', 0);\r\n        var y = GetValue(options, 'y', 0);\r\n\r\n        GameObject.call(this, scene, 'Graphics');\r\n\r\n        this.setPosition(x, y);\r\n        this.initPipeline();\r\n\r\n        /**\r\n         * The horizontal display origin of the Graphics.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#displayOriginX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.displayOriginX = 0;\r\n\r\n        /**\r\n         * The vertical display origin of the Graphics.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#displayOriginY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.displayOriginY = 0;\r\n\r\n        /**\r\n         * The array of commands used to render the Graphics.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#commandBuffer\r\n         * @type {array}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.commandBuffer = [];\r\n\r\n        /**\r\n         * The default fill color for shapes rendered by this Graphics object.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#defaultFillColor\r\n         * @type {number}\r\n         * @default -1\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultFillColor = -1;\r\n\r\n        /**\r\n         * The default fill alpha for shapes rendered by this Graphics object.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#defaultFillAlpha\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultFillAlpha = 1;\r\n\r\n        /**\r\n         * The default stroke width for shapes rendered by this Graphics object.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#defaultStrokeWidth\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultStrokeWidth = 1;\r\n\r\n        /**\r\n         * The default stroke color for shapes rendered by this Graphics object.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#defaultStrokeColor\r\n         * @type {number}\r\n         * @default -1\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultStrokeColor = -1;\r\n\r\n        /**\r\n         * The default stroke alpha for shapes rendered by this Graphics object.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#defaultStrokeAlpha\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultStrokeAlpha = 1;\r\n\r\n        /**\r\n         * Internal property that keeps track of the line width style setting.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#_lineWidth\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._lineWidth = 1.0;\r\n\r\n        this.setDefaultStyles(options);\r\n    },\r\n\r\n    /**\r\n     * Set the default style settings for this Graphics object.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#setDefaultStyles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {GraphicsStyles} options - The styles to set as defaults.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    setDefaultStyles: function (options)\r\n    {\r\n        if (GetValue(options, 'lineStyle', null))\r\n        {\r\n            this.defaultStrokeWidth = GetValue(options, 'lineStyle.width', 1);\r\n            this.defaultStrokeColor = GetValue(options, 'lineStyle.color', 0xffffff);\r\n            this.defaultStrokeAlpha = GetValue(options, 'lineStyle.alpha', 1);\r\n\r\n            this.lineStyle(this.defaultStrokeWidth, this.defaultStrokeColor, this.defaultStrokeAlpha);\r\n        }\r\n\r\n        if (GetValue(options, 'fillStyle', null))\r\n        {\r\n            this.defaultFillColor = GetValue(options, 'fillStyle.color', 0xffffff);\r\n            this.defaultFillAlpha = GetValue(options, 'fillStyle.alpha', 1);\r\n\r\n            this.fillStyle(this.defaultFillColor, this.defaultFillAlpha);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the current line style.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#lineStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} lineWidth - The stroke width.\r\n     * @param {number} color - The stroke color.\r\n     * @param {number} [alpha=1] - The stroke alpha.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    lineStyle: function (lineWidth, color, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        this.commandBuffer.push(\r\n            Commands.LINE_STYLE,\r\n            lineWidth, color, alpha\r\n        );\r\n\r\n        this._lineWidth = lineWidth;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the current fill style.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} color - The fill color.\r\n     * @param {number} [alpha=1] - The fill alpha.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillStyle: function (color, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        this.commandBuffer.push(\r\n            Commands.FILL_STYLE,\r\n            color, alpha\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a gradient fill style. This is a WebGL only feature.\r\n     *\r\n     * The gradient color values represent the 4 corners of an untransformed rectangle.\r\n     * The gradient is used to color all filled shapes and paths drawn after calling this method.\r\n     * If you wish to turn a gradient off, call `fillStyle` and provide a new single fill color.\r\n     *\r\n     * When filling a triangle only the first 3 color values provided are used for the 3 points of a triangle.\r\n     *\r\n     * This feature is best used only on rectangles and triangles. All other shapes will give strange results.\r\n     *\r\n     * Note that for objects such as arcs or ellipses, or anything which is made out of triangles, each triangle used\r\n     * will be filled with a gradient on its own. There is no ability to gradient fill a shape or path as a single\r\n     * entity at this time.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillGradientStyle\r\n     * @webglOnly\r\n     * @since 3.12.0\r\n     *\r\n     * @param {integer} topLeft - The tint being applied to the top-left of the Game Object.\r\n     * @param {integer} topRight - The tint being applied to the top-right of the Game Object.\r\n     * @param {integer} bottomLeft - The tint being applied to the bottom-left of the Game Object.\r\n     * @param {integer} bottomRight - The tint being applied to the bottom-right of the Game Object.\r\n     * @param {number} [alpha=1] - The fill alpha.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillGradientStyle: function (topLeft, topRight, bottomLeft, bottomRight, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        this.commandBuffer.push(\r\n            Commands.GRADIENT_FILL_STYLE,\r\n            alpha, topLeft, topRight, bottomLeft, bottomRight\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a gradient line style. This is a WebGL only feature.\r\n     *\r\n     * The gradient color values represent the 4 corners of an untransformed rectangle.\r\n     * The gradient is used to color all stroked shapes and paths drawn after calling this method.\r\n     * If you wish to turn a gradient off, call `lineStyle` and provide a new single line color.\r\n     *\r\n     * This feature is best used only on single lines. All other shapes will give strange results.\r\n     *\r\n     * Note that for objects such as arcs or ellipses, or anything which is made out of triangles, each triangle used\r\n     * will be filled with a gradient on its own. There is no ability to gradient stroke a shape or path as a single\r\n     * entity at this time.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#lineGradientStyle\r\n     * @webglOnly\r\n     * @since 3.12.0\r\n     *\r\n     * @param {number} lineWidth - The stroke width.\r\n     * @param {integer} topLeft - The tint being applied to the top-left of the Game Object.\r\n     * @param {integer} topRight - The tint being applied to the top-right of the Game Object.\r\n     * @param {integer} bottomLeft - The tint being applied to the bottom-left of the Game Object.\r\n     * @param {integer} bottomRight - The tint being applied to the bottom-right of the Game Object.\r\n     * @param {number} [alpha=1] - The fill alpha.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    lineGradientStyle: function (lineWidth, topLeft, topRight, bottomLeft, bottomRight, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        this.commandBuffer.push(\r\n            Commands.GRADIENT_LINE_STYLE,\r\n            lineWidth, alpha, topLeft, topRight, bottomLeft, bottomRight\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the texture frame this Graphics Object will use when drawing all shapes defined after calling this.\r\n     *\r\n     * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n     *\r\n     * Once set, all shapes will use this texture. Call this method with no arguments to clear it.\r\n     *\r\n     * The textures are not tiled. They are stretched to the dimensions of the shapes being rendered. For this reason,\r\n     * it works best with seamless / tileable textures.\r\n     *\r\n     * The mode argument controls how the textures are combined with the fill colors. The default value (0) will\r\n     * multiply the texture by the fill color. A value of 1 will use just the fill color, but the alpha data from the texture,\r\n     * and a value of 2 will use just the texture and no fill color at all.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#setTexture\r\n     * @since 3.12.0\r\n     * @webglOnly\r\n     *\r\n     * @param {string} [key] - The key of the texture to be used, as stored in the Texture Manager. Leave blank to clear a previously set texture.\r\n     * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n     * @param {number} [mode=0] - The texture tint mode. 0 is multiply, 1 is alpha only and 2 is texture only.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setTexture: function (key, frame, mode)\r\n    {\r\n        if (mode === undefined) { mode = 0; }\r\n\r\n        if (key === undefined)\r\n        {\r\n            this.commandBuffer.push(\r\n                Commands.CLEAR_TEXTURE\r\n            );\r\n        }\r\n        else\r\n        {\r\n            var textureFrame = this.scene.sys.textures.getFrame(key, frame);\r\n\r\n            if (textureFrame)\r\n            {\r\n                if (mode === 2)\r\n                {\r\n                    mode = 3;\r\n                }\r\n\r\n                this.commandBuffer.push(\r\n                    Commands.SET_TEXTURE,\r\n                    textureFrame,\r\n                    mode\r\n                );\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Start a new shape path.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#beginPath\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    beginPath: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.BEGIN_PATH\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Close the current path.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#closePath\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    closePath: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.CLOSE_PATH\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the current path.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillPath\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillPath: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.FILL_PATH\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke the current path.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokePath\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokePath: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.STROKE_PATH\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the given circle.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillCircleShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Circle} circle - The circle to fill.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillCircleShape: function (circle)\r\n    {\r\n        return this.fillCircle(circle.x, circle.y, circle.radius);\r\n    },\r\n\r\n    /**\r\n     * Stroke the given circle.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeCircleShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Circle} circle - The circle to stroke.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeCircleShape: function (circle)\r\n    {\r\n        return this.strokeCircle(circle.x, circle.y, circle.radius);\r\n    },\r\n\r\n    /**\r\n     * Fill a circle with the given position and radius.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillCircle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the center of the circle.\r\n     * @param {number} y - The y coordinate of the center of the circle.\r\n     * @param {number} radius - The radius of the circle.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillCircle: function (x, y, radius)\r\n    {\r\n        this.beginPath();\r\n        this.arc(x, y, radius, 0, MATH_CONST.PI2);\r\n        this.fillPath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke a circle with the given position and radius.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeCircle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the center of the circle.\r\n     * @param {number} y - The y coordinate of the center of the circle.\r\n     * @param {number} radius - The radius of the circle.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeCircle: function (x, y, radius)\r\n    {\r\n        this.beginPath();\r\n        this.arc(x, y, radius, 0, MATH_CONST.PI2);\r\n        this.strokePath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the given rectangle.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillRectShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Rectangle} rect - The rectangle to fill.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillRectShape: function (rect)\r\n    {\r\n        return this.fillRect(rect.x, rect.y, rect.width, rect.height);\r\n    },\r\n\r\n    /**\r\n     * Stroke the given rectangle.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeRectShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Rectangle} rect - The rectangle to stroke.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeRectShape: function (rect)\r\n    {\r\n        return this.strokeRect(rect.x, rect.y, rect.width, rect.height);\r\n    },\r\n\r\n    /**\r\n     * Fill a rectangle with the given position and size.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillRect\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n     * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n     * @param {number} width - The width of the rectangle.\r\n     * @param {number} height - The height of the rectangle.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillRect: function (x, y, width, height)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.FILL_RECT,\r\n            x, y, width, height\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke a rectangle with the given position and size.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeRect\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n     * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n     * @param {number} width - The width of the rectangle.\r\n     * @param {number} height - The height of the rectangle.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeRect: function (x, y, width, height)\r\n    {\r\n        var lineWidthHalf = this._lineWidth / 2;\r\n        var minx = x - lineWidthHalf;\r\n        var maxx = x + lineWidthHalf;\r\n\r\n        this.beginPath();\r\n        this.moveTo(x, y);\r\n        this.lineTo(x, y + height);\r\n        this.strokePath();\r\n\r\n        this.beginPath();\r\n        this.moveTo(x + width, y);\r\n        this.lineTo(x + width, y + height);\r\n        this.strokePath();\r\n\r\n        this.beginPath();\r\n        this.moveTo(minx, y);\r\n        this.lineTo(maxx + width, y);\r\n        this.strokePath();\r\n\r\n        this.beginPath();\r\n        this.moveTo(minx, y + height);\r\n        this.lineTo(maxx + width, y + height);\r\n        this.strokePath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill a rounded rectangle with the given position, size and radius.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillRoundedRect\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n     * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n     * @param {number} width - The width of the rectangle.\r\n     * @param {number} height - The height of the rectangle.\r\n     * @param {number} [radius = 20] - The corner radius; It can also be an object to specify different radii for corners\r\n     * @param {number} [radius.tl = 20] Top left\r\n     * @param {number} [radius.tr = 20] Top right\r\n     * @param {number} [radius.br = 20] Bottom right\r\n     * @param {number} [radius.bl = 20] Bottom left\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillRoundedRect: function (x, y, width, height, radius)\r\n    {\r\n        if (radius === undefined) { radius = 20; }\r\n\r\n        var tl = radius;\r\n        var tr = radius;\r\n        var bl = radius;\r\n        var br = radius;\r\n\r\n        if (typeof radius !== 'number')\r\n        {\r\n            tl = GetFastValue(radius, 'tl', 20);\r\n            tr = GetFastValue(radius, 'tr', 20);\r\n            bl = GetFastValue(radius, 'bl', 20);\r\n            br = GetFastValue(radius, 'br', 20);\r\n        }\r\n\r\n        this.beginPath();\r\n        this.moveTo(x + tl, y);\r\n        this.lineTo(x + width - tr, y);\r\n        this.arc(x + width - tr, y + tr, tr, -MATH_CONST.TAU, 0);\r\n        this.lineTo(x + width, y + height - br);\r\n        this.arc(x + width - br, y + height - br, br, 0, MATH_CONST.TAU);\r\n        this.lineTo(x + bl, y + height);\r\n        this.arc(x + bl, y + height - bl, bl, MATH_CONST.TAU, Math.PI);\r\n        this.lineTo(x, y + tl);\r\n        this.arc(x + tl, y + tl, tl, -Math.PI, -MATH_CONST.TAU);\r\n        this.fillPath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke a rounded rectangle with the given position, size and radius.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeRoundedRect\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n     * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n     * @param {number} width - The width of the rectangle.\r\n     * @param {number} height - The height of the rectangle.\r\n     * @param {number} [radius = 20] - The corner radius; It can also be an object to specify different radii for corners\r\n     * @param {number} [radius.tl = 20] Top left\r\n     * @param {number} [radius.tr = 20] Top right\r\n     * @param {number} [radius.br = 20] Bottom right\r\n     * @param {number} [radius.bl = 20] Bottom left\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeRoundedRect: function (x, y, width, height, radius)\r\n    {\r\n        if (radius === undefined) { radius = 20; }\r\n\r\n        var tl = radius;\r\n        var tr = radius;\r\n        var bl = radius;\r\n        var br = radius;\r\n\r\n        if (typeof radius !== 'number')\r\n        {\r\n            tl = GetFastValue(radius, 'tl', 20);\r\n            tr = GetFastValue(radius, 'tr', 20);\r\n            bl = GetFastValue(radius, 'bl', 20);\r\n            br = GetFastValue(radius, 'br', 20);\r\n        }\r\n\r\n        this.beginPath();\r\n        this.moveTo(x + tl, y);\r\n        this.lineTo(x + width - tr, y);\r\n        this.arc(x + width - tr, y + tr, tr, -MATH_CONST.TAU, 0);\r\n        this.lineTo(x + width, y + height - br);\r\n        this.arc(x + width - br, y + height - br, br, 0, MATH_CONST.TAU);\r\n        this.lineTo(x + bl, y + height);\r\n        this.arc(x + bl, y + height - bl, bl, MATH_CONST.TAU, Math.PI);\r\n        this.lineTo(x, y + tl);\r\n        this.arc(x + tl, y + tl, tl, -Math.PI, -MATH_CONST.TAU);\r\n        this.strokePath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the given point.\r\n     *\r\n     * Draws a square at the given position, 1 pixel in size by default.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillPointShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Point|Phaser.Math.Vector2|object)} point - The point to fill.\r\n     * @param {number} [size=1] - The size of the square to draw.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillPointShape: function (point, size)\r\n    {\r\n        return this.fillPoint(point.x, point.y, size);\r\n    },\r\n\r\n    /**\r\n     * Fill a point at the given position.\r\n     *\r\n     * Draws a square at the given position, 1 pixel in size by default.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the point.\r\n     * @param {number} y - The y coordinate of the point.\r\n     * @param {number} [size=1] - The size of the square to draw.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillPoint: function (x, y, size)\r\n    {\r\n        if (!size || size < 1)\r\n        {\r\n            size = 1;\r\n        }\r\n        else\r\n        {\r\n            x -= (size / 2);\r\n            y -= (size / 2);\r\n        }\r\n\r\n        this.commandBuffer.push(\r\n            Commands.FILL_RECT,\r\n            x, y, size, size\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the given triangle.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillTriangleShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Triangle} triangle - The triangle to fill.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillTriangleShape: function (triangle)\r\n    {\r\n        return this.fillTriangle(triangle.x1, triangle.y1, triangle.x2, triangle.y2, triangle.x3, triangle.y3);\r\n    },\r\n\r\n    /**\r\n     * Stroke the given triangle.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeTriangleShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Triangle} triangle - The triangle to stroke.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeTriangleShape: function (triangle)\r\n    {\r\n        return this.strokeTriangle(triangle.x1, triangle.y1, triangle.x2, triangle.y2, triangle.x3, triangle.y3);\r\n    },\r\n\r\n    /**\r\n     * Fill a triangle with the given points.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillTriangle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x0 - The x coordinate of the first point.\r\n     * @param {number} y0 - The y coordinate of the first point.\r\n     * @param {number} x1 - The x coordinate of the second point.\r\n     * @param {number} y1 - The y coordinate of the second point.\r\n     * @param {number} x2 - The x coordinate of the third point.\r\n     * @param {number} y2 - The y coordinate of the third point.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillTriangle: function (x0, y0, x1, y1, x2, y2)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.FILL_TRIANGLE,\r\n            x0, y0, x1, y1, x2, y2\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke a triangle with the given points.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeTriangle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x0 - The x coordinate of the first point.\r\n     * @param {number} y0 - The y coordinate of the first point.\r\n     * @param {number} x1 - The x coordinate of the second point.\r\n     * @param {number} y1 - The y coordinate of the second point.\r\n     * @param {number} x2 - The x coordinate of the third point.\r\n     * @param {number} y2 - The y coordinate of the third point.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeTriangle: function (x0, y0, x1, y1, x2, y2)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.STROKE_TRIANGLE,\r\n            x0, y0, x1, y1, x2, y2\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Draw the given line.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeLineShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Line} line - The line to stroke.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeLineShape: function (line)\r\n    {\r\n        return this.lineBetween(line.x1, line.y1, line.x2, line.y2);\r\n    },\r\n\r\n    /**\r\n     * Draw a line between the given points.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#lineBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x1 - The x coordinate of the start point of the line.\r\n     * @param {number} y1 - The y coordinate of the start point of the line.\r\n     * @param {number} x2 - The x coordinate of the end point of the line.\r\n     * @param {number} y2 - The y coordinate of the end point of the line.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    lineBetween: function (x1, y1, x2, y2)\r\n    {\r\n        this.beginPath();\r\n        this.moveTo(x1, y1);\r\n        this.lineTo(x2, y2);\r\n        this.strokePath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Draw a line from the current drawing position to the given position.\r\n     *\r\n     * Moves the current drawing position to the given position.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#lineTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to draw the line to.\r\n     * @param {number} y - The y coordinate to draw the line to.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    lineTo: function (x, y)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.LINE_TO,\r\n            x, y\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Move the current drawing position to the given position.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#moveTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to move to.\r\n     * @param {number} y - The y coordinate to move to.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    moveTo: function (x, y)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.MOVE_TO,\r\n            x, y\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#lineFxTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} rgb - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    lineFxTo: function (x, y, width, rgb)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.LINE_FX_TO,\r\n            x, y, width, rgb, 1\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#moveFxTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} rgb - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    moveFxTo: function (x, y, width, rgb)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.MOVE_FX_TO,\r\n            x, y, width, rgb, 1\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke the shape represented by the given array of points.\r\n     *\r\n     * Pass `true` to `autoClose` to close the shape automatically.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokePoints\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(array|Phaser.Geom.Point[])} points - The points to stroke.\r\n     * @param {boolean} [autoClose=false] - When `true`, the shape is closed by joining the last point to the first point.\r\n     * @param {integer} [endIndex] - The index of `points` to stop drawing at. Defaults to `points.length`.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokePoints: function (points, autoClose, endIndex)\r\n    {\r\n        if (autoClose === undefined) { autoClose = false; }\r\n        if (endIndex === undefined) { endIndex = points.length; }\r\n\r\n        this.beginPath();\r\n\r\n        this.moveTo(points[0].x, points[0].y);\r\n\r\n        for (var i = 1; i < endIndex; i++)\r\n        {\r\n            this.lineTo(points[i].x, points[i].y);\r\n        }\r\n\r\n        if (autoClose)\r\n        {\r\n            this.lineTo(points[0].x, points[0].y);\r\n        }\r\n\r\n        this.strokePath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the shape represented by the given array of points.\r\n     *\r\n     * Pass `true` to `autoClose` to close the shape automatically.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(array|Phaser.Geom.Point[])} points - The points to fill.\r\n     * @param {boolean} [autoClose=false] - Whether to automatically close the polygon.\r\n     * @param {integer} [endIndex] - The index of `points` to stop at. Defaults to `points.length`.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillPoints: function (points, autoClose, endIndex)\r\n    {\r\n        if (autoClose === undefined) { autoClose = false; }\r\n        if (endIndex === undefined) { endIndex = points.length; }\r\n\r\n        this.beginPath();\r\n\r\n        this.moveTo(points[0].x, points[0].y);\r\n\r\n        for (var i = 1; i < endIndex; i++)\r\n        {\r\n            this.lineTo(points[i].x, points[i].y);\r\n        }\r\n\r\n        if (autoClose)\r\n        {\r\n            this.lineTo(points[0].x, points[0].y);\r\n        }\r\n\r\n        this.fillPath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke the given ellipse.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeEllipseShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Ellipse} ellipse - The ellipse to stroke.\r\n     * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeEllipseShape: function (ellipse, smoothness)\r\n    {\r\n        if (smoothness === undefined) { smoothness = 32; }\r\n\r\n        var points = ellipse.getPoints(smoothness);\r\n\r\n        return this.strokePoints(points, true);\r\n    },\r\n\r\n    /**\r\n     * Stroke an ellipse with the given position and size.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeEllipse\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the center of the ellipse.\r\n     * @param {number} y - The y coordinate of the center of the ellipse.\r\n     * @param {number} width - The width of the ellipse.\r\n     * @param {number} height - The height of the ellipse.\r\n     * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeEllipse: function (x, y, width, height, smoothness)\r\n    {\r\n        if (smoothness === undefined) { smoothness = 32; }\r\n\r\n        var ellipse = new Ellipse(x, y, width, height);\r\n\r\n        var points = ellipse.getPoints(smoothness);\r\n\r\n        return this.strokePoints(points, true);\r\n    },\r\n\r\n    /**\r\n     * Fill the given ellipse.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillEllipseShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Ellipse} ellipse - The ellipse to fill.\r\n     * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillEllipseShape: function (ellipse, smoothness)\r\n    {\r\n        if (smoothness === undefined) { smoothness = 32; }\r\n\r\n        var points = ellipse.getPoints(smoothness);\r\n\r\n        return this.fillPoints(points, true);\r\n    },\r\n\r\n    /**\r\n     * Fill an ellipse with the given position and size.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillEllipse\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the center of the ellipse.\r\n     * @param {number} y - The y coordinate of the center of the ellipse.\r\n     * @param {number} width - The width of the ellipse.\r\n     * @param {number} height - The height of the ellipse.\r\n     * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillEllipse: function (x, y, width, height, smoothness)\r\n    {\r\n        if (smoothness === undefined) { smoothness = 32; }\r\n\r\n        var ellipse = new Ellipse(x, y, width, height);\r\n\r\n        var points = ellipse.getPoints(smoothness);\r\n\r\n        return this.fillPoints(points, true);\r\n    },\r\n\r\n    /**\r\n     * Draw an arc.\r\n     *\r\n     * This method can be used to create circles, or parts of circles.\r\n     * \r\n     * Make sure you call `beginPath` before starting the arc unless you wish for the arc to automatically\r\n     * close when filled or stroked.\r\n     *\r\n     * Use the optional `overshoot` argument increase the number of iterations that take place when\r\n     * the arc is rendered in WebGL. This is useful if you're drawing an arc with an especially thick line,\r\n     * as it will allow the arc to fully join-up. Try small values at first, i.e. 0.01.\r\n     *\r\n     * Call {@link Phaser.GameObjects.Graphics#fillPath} or {@link Phaser.GameObjects.Graphics#strokePath} after calling\r\n     * this method to draw the arc.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#arc\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the center of the circle.\r\n     * @param {number} y - The y coordinate of the center of the circle.\r\n     * @param {number} radius - The radius of the circle.\r\n     * @param {number} startAngle - The starting angle, in radians.\r\n     * @param {number} endAngle - The ending angle, in radians.\r\n     * @param {boolean} [anticlockwise=false] - Whether the drawing should be anticlockwise or clockwise.\r\n     * @param {number} [overshoot=0] - This value allows you to increase the segment iterations in WebGL rendering. Useful if the arc has a thick stroke and needs to overshoot to join-up cleanly. Use small numbers such as 0.01 to start with and increase as needed.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    arc: function (x, y, radius, startAngle, endAngle, anticlockwise, overshoot)\r\n    {\r\n        if (anticlockwise === undefined) { anticlockwise = false; }\r\n        if (overshoot === undefined) { overshoot = 0; }\r\n\r\n        this.commandBuffer.push(\r\n            Commands.ARC,\r\n            x, y, radius, startAngle, endAngle, anticlockwise, overshoot\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a pie-chart slice shape centered at `x`, `y` with the given radius.\r\n     * You must define the start and end angle of the slice.\r\n     *\r\n     * Setting the `anticlockwise` argument to `true` creates a shape similar to Pacman.\r\n     * Setting it to `false` creates a shape like a slice of pie.\r\n     *\r\n     * This method will begin a new path and close the path at the end of it.\r\n     * To display the actual slice you need to call either `strokePath` or `fillPath` after it.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#slice\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} x - The horizontal center of the slice.\r\n     * @param {number} y - The vertical center of the slice.\r\n     * @param {number} radius - The radius of the slice.\r\n     * @param {number} startAngle - The start angle of the slice, given in radians.\r\n     * @param {number} endAngle - The end angle of the slice, given in radians.\r\n     * @param {boolean} [anticlockwise=false] - Whether the drawing should be anticlockwise or clockwise.\r\n     * @param {number} [overshoot=0] - This value allows you to overshoot the endAngle by this amount. Useful if the arc has a thick stroke and needs to overshoot to join-up cleanly.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    slice: function (x, y, radius, startAngle, endAngle, anticlockwise, overshoot)\r\n    {\r\n        if (anticlockwise === undefined) { anticlockwise = false; }\r\n        if (overshoot === undefined) { overshoot = 0; }\r\n\r\n        this.commandBuffer.push(Commands.BEGIN_PATH);\r\n\r\n        this.commandBuffer.push(Commands.MOVE_TO, x, y);\r\n\r\n        this.commandBuffer.push(Commands.ARC, x, y, radius, startAngle, endAngle, anticlockwise, overshoot);\r\n\r\n        this.commandBuffer.push(Commands.CLOSE_PATH);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Saves the state of the Graphics by pushing the current state onto a stack.\r\n     *\r\n     * The most recently saved state can then be restored with {@link Phaser.GameObjects.Graphics#restore}.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#save\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    save: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.SAVE\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Restores the most recently saved state of the Graphics by popping from the state stack.\r\n     *\r\n     * Use {@link Phaser.GameObjects.Graphics#save} to save the current state, and call this afterwards to restore that state.\r\n     *\r\n     * If there is no saved state, this command does nothing.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#restore\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    restore: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.RESTORE\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Translate the graphics.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#translate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal translation to apply.\r\n     * @param {number} y - The vertical translation to apply.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    translate: function (x, y)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.TRANSLATE,\r\n            x, y\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale the graphics.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal scale to apply.\r\n     * @param {number} y - The vertical scale to apply.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    scale: function (x, y)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.SCALE,\r\n            x, y\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate the graphics.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#rotate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radians - The rotation angle, in radians.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    rotate: function (radians)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.ROTATE,\r\n            radians\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Clear the command buffer and reset the fill style and line style to their defaults.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#clear\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    clear: function ()\r\n    {\r\n        this.commandBuffer.length = 0;\r\n\r\n        if (this.defaultFillColor > -1)\r\n        {\r\n            this.fillStyle(this.defaultFillColor, this.defaultFillAlpha);\r\n        }\r\n\r\n        if (this.defaultStrokeColor > -1)\r\n        {\r\n            this.lineStyle(this.defaultStrokeWidth, this.defaultStrokeColor, this.defaultStrokeAlpha);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Generate a texture from this Graphics object.\r\n     *\r\n     * If `key` is a string it'll generate a new texture using it and add it into the\r\n     * Texture Manager (assuming no key conflict happens).\r\n     *\r\n     * If `key` is a Canvas it will draw the texture to that canvas context. Note that it will NOT\r\n     * automatically upload it to the GPU in WebGL mode.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#generateTexture\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|HTMLCanvasElement)} key - The key to store the texture with in the Texture Manager, or a Canvas to draw to.\r\n     * @param {integer} [width] - The width of the graphics to generate.\r\n     * @param {integer} [height] - The height of the graphics to generate.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    generateTexture: function (key, width, height)\r\n    {\r\n        var sys = this.scene.sys;\r\n        var renderer = sys.game.renderer;\r\n\r\n        if (width === undefined) { width = sys.game.config.width; }\r\n        if (height === undefined) { height = sys.game.config.height; }\r\n\r\n        Graphics.TargetCamera.setScene(this.scene);\r\n        Graphics.TargetCamera.setViewport(0, 0, width, height);\r\n        Graphics.TargetCamera.scrollX = this.x;\r\n        Graphics.TargetCamera.scrollY = this.y;\r\n\r\n        var texture;\r\n        var ctx;\r\n\r\n        if (typeof key === 'string')\r\n        {\r\n            if (sys.textures.exists(key))\r\n            {\r\n                //  Key is a string, it DOES exist in the Texture Manager AND is a canvas, so draw to it\r\n\r\n                texture = sys.textures.get(key);\r\n\r\n                var src = texture.getSourceImage();\r\n\r\n                if (src instanceof HTMLCanvasElement)\r\n                {\r\n                    ctx = src.getContext('2d');\r\n                }\r\n            }\r\n            else\r\n            {\r\n                //  Key is a string and doesn't exist in the Texture Manager, so generate and save it\r\n\r\n                texture = sys.textures.createCanvas(key, width, height);\r\n\r\n                ctx = texture.getSourceImage().getContext('2d');\r\n            }\r\n        }\r\n        else if (key instanceof HTMLCanvasElement)\r\n        {\r\n            //  Key is a Canvas, so draw to it\r\n\r\n            ctx = key.getContext('2d');\r\n        }\r\n\r\n        if (ctx)\r\n        {\r\n            // var GraphicsCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix, renderTargetCtx, allowClip)\r\n            this.renderCanvas(renderer, this, 0, Graphics.TargetCamera, null, ctx, false);\r\n\r\n            if (texture)\r\n            {\r\n                texture.refresh();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal destroy handler, called as part of the destroy process.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#preDestroy\r\n     * @protected\r\n     * @since 3.9.0\r\n     */\r\n    preDestroy: function ()\r\n    {\r\n        this.commandBuffer = [];\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * A Camera used specifically by the Graphics system for rendering to textures.\r\n *\r\n * @name Phaser.GameObjects.Graphics.TargetCamera\r\n * @type {Phaser.Cameras.Scene2D.Camera}\r\n * @since 3.1.0\r\n */\r\nGraphics.TargetCamera = new BaseCamera();\r\n\r\nmodule.exports = Graphics;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BaseCamera","Class","Commands","ComponentsAlpha","ComponentsBlendMode","ComponentsDepth","ComponentsMask","ComponentsPipeline","ComponentsTransform","ComponentsVisible","ComponentsScrollFactor","Ellipse","GameObject","GetFastValue","GetValue","MATH_CONST","Render","Graphics","Extends","Mixins","initialize","scene","options","x","y","call","setPosition","initPipeline","displayOriginY","displayOriginX","commandBuffer","defaultFillColor","defaultStrokeWidth","defaultFillAlpha","defaultStrokeColor","_lineWidth","defaultStrokeAlpha","setDefaultStyles","lineStyle","fillStyle","lineWidth","color","alpha","undefined","push","LINE_STYLE","FILL_STYLE","fillGradientStyle","topLeft","topRight","bottomLeft","bottomRight","GRADIENT_FILL_STYLE","lineGradientStyle","GRADIENT_LINE_STYLE","setTexture","key","frame","mode","CLEAR_TEXTURE","textureFrame","sys","textures","getFrame","SET_TEXTURE","beginPath","BEGIN_PATH","closePath","CLOSE_PATH","fillPath","FILL_PATH","strokePath","STROKE_PATH","fillCircleShape","circle","fillCircle","radius","strokeCircleShape","strokeCircle","arc","PI2","fillRectShape","rect","fillRect","width","height","strokeRectShape","strokeRect","FILL_RECT","lineWidthHalf","minx","maxx","moveTo","lineTo","fillRoundedRect","tl","tr","bl","br","TAU","Math","PI","strokeRoundedRect","fillPointShape","point","size","fillPoint","fillTriangleShape","triangle","fillTriangle","x1","y1","x2","y2","x3","y3","strokeTriangleShape","strokeTriangle","x0","y0","FILL_TRIANGLE","STROKE_TRIANGLE","strokeLineShape","line","lineBetween","LINE_TO","MOVE_TO","lineFxTo","rgb","LINE_FX_TO","moveFxTo","MOVE_FX_TO","strokePoints","points","autoClose","endIndex","length","i","fillPoints","strokeEllipseShape","ellipse","smoothness","getPoints","strokeEllipse","fillEllipseShape","fillEllipse","startAngle","endAngle","anticlockwise","overshoot","ARC","slice","save","SAVE","restore","RESTORE","translate","TRANSLATE","scale","SCALE","rotate","radians","ROTATE","clear","generateTexture","renderer","game","config","TargetCamera","setScene","setViewport","scrollX","scrollY","ctx","exists","texture","get","src","getSourceImage","HTMLCanvasElement","getContext","createCanvas","renderCanvas","refresh","preDestroy"]
}
