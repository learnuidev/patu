{
"version":3,
"file":"module$node_modules$Phaser$src$sound$html5$HTML5AudioSound.js",
"lineCount":13,
"mappings":"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",
"sources":["node_modules/Phaser/src/sound/html5/HTML5AudioSound.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$sound$html5$HTML5AudioSound\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar BaseSound = require('../BaseSound');\r\nvar Class = require('../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * HTML5 Audio implementation of the sound.\r\n *\r\n * @class HTML5AudioSound\r\n * @extends Phaser.Sound.BaseSound\r\n * @memberOf Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Sound.HTML5AudioSoundManager} manager - Reference to the current sound manager instance.\r\n * @param {string} key - Asset key for the sound.\r\n * @param {SoundConfig} [config={}] - An optional config object containing default sound settings.\r\n */\r\nvar HTML5AudioSound = new Class({\r\n\r\n    Extends: BaseSound,\r\n\r\n    initialize:\r\n\r\n    function HTML5AudioSound (manager, key, config)\r\n    {\r\n        if (config === undefined) { config = {}; }\r\n\r\n        /**\r\n         * An array containing all HTML5 Audio tags that could be used for individual\r\n         * sound's playback. Number of instances depends on the config value passed\r\n         * to the Loader#audio method call, default is 1.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSound#tags\r\n         * @type {HTMLAudioElement[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.tags = manager.game.cache.audio.get(key);\r\n\r\n        if (!this.tags)\r\n        {\r\n            // eslint-disable-next-line no-console\r\n            console.warn('Audio cache entry missing: ' + key);\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * Reference to an HTML5 Audio tag used for playing sound.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSound#audio\r\n         * @type {HTMLAudioElement}\r\n         * @private\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.audio = null;\r\n\r\n        /**\r\n         * Timestamp as generated by the Request Animation Frame or SetTimeout\r\n         * representing the time at which the delayed sound playback should start.\r\n         * Set to 0 if sound playback is not delayed.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSound#startTime\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.startTime = 0;\r\n\r\n        /**\r\n         * Audio tag's playback position recorded on previous\r\n         * update method call. Set to 0 if sound is not playing.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSound#previousTime\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.previousTime = 0;\r\n\r\n        this.duration = this.tags[0].duration;\r\n\r\n        this.totalDuration = this.tags[0].duration;\r\n\r\n        BaseSound.call(this, manager, key, config);\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSound#playEvent\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Reference to the sound that emitted event.\r\n     */\r\n\r\n    /**\r\n     * Play this sound, or a marked section of it.\r\n     * It always plays the sound from the start. If you want to start playback from a specific time\r\n     * you can set 'seek' setting of the config object, provided to this call, to that value.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#play\r\n     * @fires Phaser.Sound.HTML5AudioSound#playEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [markerName=''] - If you want to play a marker then provide the marker name here, otherwise omit it to play the full sound.\r\n     * @param {SoundConfig} [config] - Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.\r\n     *\r\n     * @return {boolean} Whether the sound started playing successfully.\r\n     */\r\n    play: function (markerName, config)\r\n    {\r\n        if (this.manager.isLocked(this, 'play', [ markerName, config ]))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!BaseSound.prototype.play.call(this, markerName, config))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  \\/\\/\\/ isPlaying = true, isPaused = false \\/\\/\\/\r\n        if (!this.pickAndPlayAudioTag())\r\n        {\r\n            return false;\r\n        }\r\n\r\n        this.emit('play', this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSound#pauseEvent\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Reference to the sound that emitted event.\r\n     */\r\n\r\n    /**\r\n     * Pauses the sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#pause\r\n     * @fires Phaser.Sound.HTML5AudioSound#pauseEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was paused successfully.\r\n     */\r\n    pause: function ()\r\n    {\r\n        if (this.manager.isLocked(this, 'pause'))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (this.startTime > 0)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!BaseSound.prototype.pause.call(this))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  \\/\\/\\/ isPlaying = false, isPaused = true \\/\\/\\/\r\n        this.currentConfig.seek = this.audio.currentTime - (this.currentMarker ? this.currentMarker.start : 0);\r\n\r\n        this.stopAndReleaseAudioTag();\r\n\r\n        this.emit('pause', this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSound#resumeEvent\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Reference to the sound that emitted event.\r\n     */\r\n\r\n    /**\r\n     * Resumes the sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#resume\r\n     * @fires Phaser.Sound.HTML5AudioSound#resumeEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was resumed successfully.\r\n     */\r\n    resume: function ()\r\n    {\r\n        if (this.manager.isLocked(this, 'resume'))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (this.startTime > 0)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!BaseSound.prototype.resume.call(this))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  \\/\\/\\/ isPlaying = true, isPaused = false \\/\\/\\/\r\n        if (!this.pickAndPlayAudioTag())\r\n        {\r\n            return false;\r\n        }\r\n\r\n        this.emit('resume', this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSound#stopEvent\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Reference to the sound that emitted event.\r\n     */\r\n\r\n    /**\r\n     * Stop playing this sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#stop\r\n     * @fires Phaser.Sound.HTML5AudioSound#stopEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was stopped successfully.\r\n     */\r\n    stop: function ()\r\n    {\r\n        if (this.manager.isLocked(this, 'stop'))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!BaseSound.prototype.stop.call(this))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  \\/\\/\\/ isPlaying = false, isPaused = false \\/\\/\\/\r\n        this.stopAndReleaseAudioTag();\r\n\r\n        this.emit('stop', this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Used internally to do what the name says.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#pickAndPlayAudioTag\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was assigned an audio tag successfully.\r\n     */\r\n    pickAndPlayAudioTag: function ()\r\n    {\r\n        if (!this.pickAudioTag())\r\n        {\r\n            this.reset();\r\n            return false;\r\n        }\r\n\r\n        var seek = this.currentConfig.seek;\r\n        var delay = this.currentConfig.delay;\r\n        var offset = (this.currentMarker ? this.currentMarker.start : 0) + seek;\r\n\r\n        this.previousTime = offset;\r\n        this.audio.currentTime = offset;\r\n        this.applyConfig();\r\n\r\n        if (delay === 0)\r\n        {\r\n            this.startTime = 0;\r\n\r\n            if (this.audio.paused)\r\n            {\r\n                this.playCatchPromise();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.startTime = window.performance.now() + delay * 1000;\r\n\r\n            if (!this.audio.paused)\r\n            {\r\n                this.audio.pause();\r\n            }\r\n        }\r\n\r\n        this.resetConfig();\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * This method performs the audio tag pooling logic. It first looks for\r\n     * unused audio tag to assign to this sound object. If there are no unused\r\n     * audio tags, based on HTML5AudioSoundManager#override property value, it\r\n     * looks for sound with most advanced playback and hijacks its audio tag or\r\n     * does nothing.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#pickAudioTag\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was assigned an audio tag successfully.\r\n     */\r\n    pickAudioTag: function ()\r\n    {\r\n        if (this.audio)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        for (var i = 0; i < this.tags.length; i++)\r\n        {\r\n            var audio = this.tags[i];\r\n\r\n            if (audio.dataset.used === 'false')\r\n            {\r\n                audio.dataset.used = 'true';\r\n                this.audio = audio;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.manager.override)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var otherSounds = [];\r\n\r\n        this.manager.forEachActiveSound(function (sound)\r\n        {\r\n            if (sound.key === this.key && sound.audio)\r\n            {\r\n                otherSounds.push(sound);\r\n            }\r\n        }, this);\r\n\r\n        otherSounds.sort(function (a1, a2)\r\n        {\r\n            if (a1.loop === a2.loop)\r\n            {\r\n                // sort by progress\r\n                return (a2.seek / a2.duration) - (a1.seek / a1.duration);\r\n            }\r\n            return a1.loop ? 1 : -1;\r\n        });\r\n\r\n        var selectedSound = otherSounds[0];\r\n\r\n        this.audio = selectedSound.audio;\r\n\r\n        selectedSound.reset();\r\n        selectedSound.audio = null;\r\n        selectedSound.startTime = 0;\r\n        selectedSound.previousTime = 0;\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Method used for playing audio tag and catching possible exceptions\r\n     * thrown from rejected Promise returned from play method call.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#playCatchPromise\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    playCatchPromise: function ()\r\n    {\r\n        var playPromise = this.audio.play();\r\n\r\n        if (playPromise)\r\n        {\r\n            // eslint-disable-next-line no-unused-vars\r\n            playPromise.catch(function (reason)\r\n            {\r\n                console.warn(reason);\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Used internally to do what the name says.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#stopAndReleaseAudioTag\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    stopAndReleaseAudioTag: function ()\r\n    {\r\n        this.audio.pause();\r\n        this.audio.dataset.used = 'false';\r\n        this.audio = null;\r\n        this.startTime = 0;\r\n        this.previousTime = 0;\r\n    },\r\n\r\n    /**\r\n     * Method used internally to reset sound state, usually when stopping sound\r\n     * or when hijacking audio tag from another sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#reset\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        BaseSound.prototype.stop.call(this);\r\n    },\r\n\r\n    /**\r\n     * Method used internally by sound manager for pausing sound if\r\n     * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#onBlur\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: function ()\r\n    {\r\n        this.isPlaying = false;\r\n        this.isPaused = true;\r\n\r\n        this.currentConfig.seek = this.audio.currentTime - (this.currentMarker ? this.currentMarker.start : 0);\r\n\r\n        this.currentConfig.delay = Math.max(0, (this.startTime - window.performance.now()) / 1000);\r\n\r\n        this.stopAndReleaseAudioTag();\r\n    },\r\n\r\n    /**\r\n     * Method used internally by sound manager for resuming sound if\r\n     * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#onFocus\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: function ()\r\n    {\r\n        this.isPlaying = true;\r\n        this.isPaused = false;\r\n        this.pickAndPlayAudioTag();\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSound#loopedEvent\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Reference to the sound that emitted event.\r\n     */\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSound#endedEvent\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Reference to the sound that emitted event.\r\n     */\r\n\r\n    /**\r\n     * Update method called automatically by sound manager on every game step.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#update\r\n     * @fires Phaser.Sound.HTML5AudioSound#loopedEvent\r\n     * @fires Phaser.Sound.HTML5AudioSound#endedEvent\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time elapsed since the last frame.\r\n     */\r\n    // eslint-disable-next-line no-unused-vars\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.isPlaying)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // handling delayed playback\r\n        if (this.startTime > 0)\r\n        {\r\n            if (this.startTime < time - this.manager.audioPlayDelay)\r\n            {\r\n                this.audio.currentTime += Math.max(0, time - this.startTime) / 1000;\r\n                this.startTime = 0;\r\n                this.previousTime = this.audio.currentTime;\r\n                this.playCatchPromise();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // handle looping and ending\r\n        var startTime = this.currentMarker ? this.currentMarker.start : 0;\r\n        var endTime = startTime + this.duration;\r\n        var currentTime = this.audio.currentTime;\r\n\r\n        if (this.currentConfig.loop)\r\n        {\r\n            if (currentTime >= endTime - this.manager.loopEndOffset)\r\n            {\r\n                this.audio.currentTime = startTime + Math.max(0, currentTime - endTime);\r\n                currentTime = this.audio.currentTime;\r\n            }\r\n            else if (currentTime < startTime)\r\n            {\r\n                this.audio.currentTime += startTime;\r\n                currentTime = this.audio.currentTime;\r\n            }\r\n\r\n            if (currentTime < this.previousTime)\r\n            {\r\n                this.emit('looped', this);\r\n            }\r\n        }\r\n        else if (currentTime >= endTime)\r\n        {\r\n            this.reset();\r\n\r\n            this.stopAndReleaseAudioTag();\r\n\r\n            this.emit('ended', this);\r\n\r\n            return;\r\n        }\r\n\r\n        this.previousTime = currentTime;\r\n    },\r\n\r\n    /**\r\n     * Calls Phaser.Sound.BaseSound#destroy method\r\n     * and cleans up all HTML5 Audio related stuff.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        BaseSound.prototype.destroy.call(this);\r\n\r\n        this.tags = null;\r\n\r\n        if (this.audio)\r\n        {\r\n            this.stopAndReleaseAudioTag();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally to determine mute setting of the sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#updateMute\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    updateMute: function ()\r\n    {\r\n        if (this.audio)\r\n        {\r\n            this.audio.muted = this.currentConfig.mute || this.manager.mute;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally to calculate total volume of the sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#updateVolume\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    updateVolume: function ()\r\n    {\r\n        if (this.audio)\r\n        {\r\n            this.audio.volume = this.currentConfig.volume * this.manager.volume;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally to calculate total playback rate of the sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#calculateRate\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    calculateRate: function ()\r\n    {\r\n        BaseSound.prototype.calculateRate.call(this);\r\n\r\n        if (this.audio)\r\n        {\r\n            this.audio.playbackRate = this.totalRate;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSound#muteEvent\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Reference to the sound that emitted event.\r\n     * @param {boolean} value - An updated value of Phaser.Sound.HTML5AudioSound#mute property.\r\n     */\r\n\r\n    /**\r\n     * Boolean indicating whether the sound is muted or not.\r\n     * Gets or sets the muted state of this sound.\r\n     * \r\n     * @name Phaser.Sound.HTML5AudioSound#mute\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\r\n    mute: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.mute;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.mute = value;\r\n\r\n            if (this.manager.isLocked(this, 'mute', value))\r\n            {\r\n                return;\r\n            }\r\n\r\n            this.emit('mute', this, value);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the muted state of this Sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setMute\r\n     * @fires Phaser.Sound.HTML5AudioSound#muteEvent\r\n     * @since 3.4.0\r\n     *\r\n     * @param {boolean} value - `true` to mute this sound, `false` to unmute it.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSound} This Sound instance.\r\n     */\r\n    setMute: function (value)\r\n    {\r\n        this.mute = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSound#volumeEvent\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Reference to the sound that emitted event.\r\n     * @param {number} value - An updated value of Phaser.Sound.HTML5AudioSound#volume property.\r\n     */\r\n\r\n    /**\r\n     * Gets or sets the volume of this sound, a value between 0 (silence) and 1 (full volume).\r\n     * \r\n     * @name Phaser.Sound.HTML5AudioSound#volume\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    volume: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.volume;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.volume = value;\r\n\r\n            if (this.manager.isLocked(this, 'volume', value))\r\n            {\r\n                return;\r\n            }\r\n\r\n            this.emit('volume', this, value);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the volume of this Sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setVolume\r\n     * @fires Phaser.Sound.HTML5AudioSound#volumeEvent\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} value - The volume of the sound.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSound} This Sound instance.\r\n     */\r\n    setVolume: function (value)\r\n    {\r\n        this.volume = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSound#rateEvent\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Reference to the sound that emitted the event.\r\n     * @param {number} value - An updated value of Phaser.Sound.HTML5AudioSound#rate property.\r\n     */\r\n\r\n    /**\r\n     * Rate at which this Sound will be played.\r\n     * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n     * and 2.0 doubles the audios playback speed.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#rate\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    rate: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.rate;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.rate = value;\r\n\r\n            if (this.manager.isLocked(this, 'rate', value))\r\n            {\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                this.calculateRate();\r\n\r\n                this.emit('rate', this, value);\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the playback rate of this Sound.\r\n     * \r\n     * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n     * and 2.0 doubles the audios playback speed.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setRate\r\n     * @fires Phaser.Sound.HTML5AudioSound#rateEvent\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The playback rate at of this Sound.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSound} This Sound.\r\n     */\r\n    setRate: function (value)\r\n    {\r\n        this.rate = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSound#detuneEvent\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Reference to the Sound that emitted event.\r\n     * @param {number} value - An updated value of Phaser.Sound.HTML5AudioSound#detune property.\r\n     */\r\n\r\n    /**\r\n     * The detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#detune\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    detune: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.detune;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.detune = value;\r\n\r\n            if (this.manager.isLocked(this, 'detune', value))\r\n            {\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                this.calculateRate();\r\n\r\n                this.emit('detune', this, value);\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setDetune\r\n     * @fires Phaser.Sound.HTML5AudioSound#detuneEvent\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSound} This Sound.\r\n     */\r\n    setDetune: function (value)\r\n    {\r\n        this.detune = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSound#seekEvent\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Reference to the sound that emitted event.\r\n     * @param {number} value - An updated value of Phaser.Sound.HTML5AudioSound#seek property.\r\n     */\r\n\r\n    /**\r\n     * Property representing the position of playback for this sound, in seconds.\r\n     * Setting it to a specific value moves current playback to that position.\r\n     * The value given is clamped to the range 0 to current marker duration.\r\n     * Setting seek of a stopped sound has no effect.\r\n     * \r\n     * @name Phaser.Sound.HTML5AudioSound#seek\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    seek: {\r\n\r\n        get: function ()\r\n        {\r\n            if (this.isPlaying)\r\n            {\r\n                return this.audio.currentTime - (this.currentMarker ? this.currentMarker.start : 0);\r\n            }\r\n            else if (this.isPaused)\r\n            {\r\n                return this.currentConfig.seek;\r\n            }\r\n            else\r\n            {\r\n                return 0;\r\n            }\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (this.manager.isLocked(this, 'seek', value))\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (this.startTime > 0)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (this.isPlaying || this.isPaused)\r\n            {\r\n                value = Math.min(Math.max(0, value), this.duration);\r\n\r\n                if (this.isPlaying)\r\n                {\r\n                    this.previousTime = value;\r\n                    this.audio.currentTime = value;\r\n                }\r\n                else if (this.isPaused)\r\n                {\r\n                    this.currentConfig.seek = value;\r\n                }\r\n\r\n                this.emit('seek', this, value);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Seeks to a specific point in this sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setSeek\r\n     * @fires Phaser.Sound.HTML5AudioSound#seekEvent\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} value - The point in the sound to seek to.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSound} This Sound instance.\r\n     */\r\n    setSeek: function (value)\r\n    {\r\n        this.seek = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSound#loopEvent\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Reference to the sound that emitted event.\r\n     * @param {boolean} value - An updated value of Phaser.Sound.HTML5AudioSound#loop property.\r\n     */\r\n\r\n    /**\r\n     * Flag indicating whether or not the sound or current sound marker will loop.\r\n     * \r\n     * @name Phaser.Sound.HTML5AudioSound#loop\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\r\n    loop: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.loop;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.loop = value;\r\n\r\n            if (this.manager.isLocked(this, 'loop', value))\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (this.audio)\r\n            {\r\n                this.audio.loop = value;\r\n            }\r\n\r\n            this.emit('loop', this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the loop state of this Sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setLoop\r\n     * @fires Phaser.Sound.HTML5AudioSound#loopEvent\r\n     * @since 3.4.0\r\n     *\r\n     * @param {boolean} value - `true` to loop this sound, `false` to not loop it.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSound} This Sound instance.\r\n     */\r\n    setLoop: function (value)\r\n    {\r\n        this.loop = value;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = HTML5AudioSound;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BaseSound","HTML5AudioSound","Class","Extends","initialize","manager","key","config","undefined","tags","game","cache","audio","get","previousTime","startTime","duration","totalDuration","call","console","warn","play","markerName","isLocked","prototype","pickAndPlayAudioTag","emit","pause","currentConfig","seek","currentTime","currentMarker","start","stopAndReleaseAudioTag","resume","stop","pickAudioTag","reset","delay","offset","applyConfig","paused","playCatchPromise","window","performance","now","resetConfig","i","length","dataset","used","override","otherSounds","forEachActiveSound","sound","push","sort","a1","a2","loop","selectedSound","playPromise","catch","reason","onBlur","isPlaying","isPaused","Math","max","onFocus","update","time","delta","audioPlayDelay","endTime","loopEndOffset","destroy","updateMute","muted","mute","updateVolume","volume","calculateRate","playbackRate","totalRate","set","value","setMute","setVolume","rate","setRate","detune","setDetune","min","setSeek","setLoop"]
}
