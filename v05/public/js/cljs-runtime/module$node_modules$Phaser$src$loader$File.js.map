{
"version":3,
"file":"module$node_modules$Phaser$src$loader$File.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/Phaser/src/loader/File.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$File\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar CONST = require('./const');\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\nvar GetURL = require('./GetURL');\r\nvar MergeXHRSettings = require('./MergeXHRSettings');\r\nvar XHRLoader = require('./XHRLoader');\r\nvar XHRSettings = require('./XHRSettings');\r\n\r\n/**\r\n * @typedef {object} FileConfig\r\n *\r\n * @property {string} type - The file type string (image, json, etc) for sorting within the Loader.\r\n * @property {string} key - Unique cache key (unique within its file type)\r\n * @property {string} [url] - The URL of the file, not including baseURL.\r\n * @property {string} [path] - The path of the file, not including the baseURL.\r\n * @property {string} [extension] - The default extension this file uses.\r\n * @property {XMLHttpRequestResponseType} [responseType] - The responseType to be used by the XHR request.\r\n * @property {(XHRSettingsObject|false)} [xhrSettings=false] - Custom XHR Settings specific to this file and merged with the Loader defaults.\r\n * @property {any} [config] - A config object that can be used by file types to store transitional data.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The base File class used by all File Types that the Loader can support.\r\n * You shouldn't create an instance of a File directly, but should extend it with your own class, setting a custom type and processing methods.\r\n *\r\n * @class File\r\n * @memberOf Phaser.Loader\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - The Loader that is going to load this File.\r\n * @param {FileConfig} fileConfig - The file configuration object, as created by the file type.\r\n */\r\nvar File = new Class({\r\n\r\n    initialize:\r\n\r\n    function File (loader, fileConfig)\r\n    {\r\n        /**\r\n         * A reference to the Loader that is going to load this file.\r\n         *\r\n         * @name Phaser.Loader.File#loader\r\n         * @type {Phaser.Loader.LoaderPlugin}\r\n         * @since 3.0.0\r\n         */\r\n        this.loader = loader;\r\n\r\n        /**\r\n         * A reference to the Cache, or Texture Manager, that is going to store this file if it loads.\r\n         *\r\n         * @name Phaser.Loader.File#cache\r\n         * @type {(Phaser.Cache.BaseCache|Phaser.Textures.TextureManager)}\r\n         * @since 3.7.0\r\n         */\r\n        this.cache = GetFastValue(fileConfig, 'cache', false);\r\n\r\n        /**\r\n         * The file type string (image, json, etc) for sorting within the Loader.\r\n         *\r\n         * @name Phaser.Loader.File#type\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.type = GetFastValue(fileConfig, 'type', false);\r\n\r\n        /**\r\n         * Unique cache key (unique within its file type)\r\n         *\r\n         * @name Phaser.Loader.File#key\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.key = GetFastValue(fileConfig, 'key', false);\r\n\r\n        var loadKey = this.key;\r\n\r\n        if (loader.prefix && loader.prefix !== '')\r\n        {\r\n            this.key = loader.prefix + loadKey;\r\n        }\r\n\r\n        if (!this.type || !this.key)\r\n        {\r\n            throw new Error('Error calling \\'Loader.' + this.type + '\\' invalid key provided.');\r\n        }\r\n\r\n        /**\r\n         * The URL of the file, not including baseURL.\r\n         * Automatically has Loader.path prepended to it.\r\n         *\r\n         * @name Phaser.Loader.File#url\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.url = GetFastValue(fileConfig, 'url');\r\n\r\n        if (this.url === undefined)\r\n        {\r\n            this.url = loader.path + loadKey + '.' + GetFastValue(fileConfig, 'extension', '');\r\n        }\r\n        else if (typeof(this.url) !== 'function')\r\n        {\r\n            this.url = loader.path + this.url;\r\n        }\r\n\r\n        /**\r\n         * The final URL this file will load from, including baseURL and path.\r\n         * Set automatically when the Loader calls 'load' on this file.\r\n         *\r\n         * @name Phaser.Loader.File#src\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.src = '';\r\n\r\n        /**\r\n         * The merged XHRSettings for this file.\r\n         *\r\n         * @name Phaser.Loader.File#xhrSettings\r\n         * @type {XHRSettingsObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.xhrSettings = XHRSettings(GetFastValue(fileConfig, 'responseType', undefined));\r\n\r\n        if (GetFastValue(fileConfig, 'xhrSettings', false))\r\n        {\r\n            this.xhrSettings = MergeXHRSettings(this.xhrSettings, GetFastValue(fileConfig, 'xhrSettings', {}));\r\n        }\r\n\r\n        /**\r\n         * The XMLHttpRequest instance (as created by XHR Loader) that is loading this File.\r\n         *\r\n         * @name Phaser.Loader.File#xhrLoader\r\n         * @type {?XMLHttpRequest}\r\n         * @since 3.0.0\r\n         */\r\n        this.xhrLoader = null;\r\n\r\n        /**\r\n         * The current state of the file. One of the FILE_CONST values.\r\n         *\r\n         * @name Phaser.Loader.File#state\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.state = (typeof(this.url) === 'function') ? CONST.FILE_POPULATED : CONST.FILE_PENDING;\r\n\r\n        /**\r\n         * The total size of this file.\r\n         * Set by onProgress and only if loading via XHR.\r\n         *\r\n         * @name Phaser.Loader.File#bytesTotal\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.bytesTotal = 0;\r\n\r\n        /**\r\n         * Updated as the file loads.\r\n         * Only set if loading via XHR.\r\n         *\r\n         * @name Phaser.Loader.File#bytesLoaded\r\n         * @type {number}\r\n         * @default -1\r\n         * @since 3.0.0\r\n         */\r\n        this.bytesLoaded = -1;\r\n\r\n        /**\r\n         * A percentage value between 0 and 1 indicating how much of this file has loaded.\r\n         * Only set if loading via XHR.\r\n         *\r\n         * @name Phaser.Loader.File#percentComplete\r\n         * @type {number}\r\n         * @default -1\r\n         * @since 3.0.0\r\n         */\r\n        this.percentComplete = -1;\r\n\r\n        /**\r\n         * For CORs based loading.\r\n         * If this is undefined then the File will check BaseLoader.crossOrigin and use that (if set)\r\n         *\r\n         * @name Phaser.Loader.File#crossOrigin\r\n         * @type {(string|undefined)}\r\n         * @since 3.0.0\r\n         */\r\n        this.crossOrigin = undefined;\r\n\r\n        /**\r\n         * The processed file data, stored here after the file has loaded.\r\n         *\r\n         * @name Phaser.Loader.File#data\r\n         * @type {*}\r\n         * @since 3.0.0\r\n         */\r\n        this.data = undefined;\r\n\r\n        /**\r\n         * A config object that can be used by file types to store transitional data.\r\n         *\r\n         * @name Phaser.Loader.File#config\r\n         * @type {*}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = GetFastValue(fileConfig, 'config', {});\r\n\r\n        /**\r\n         * If this is a multipart file, i.e. an atlas and its json together, then this is a reference\r\n         * to the parent MultiFile. Set and used internally by the Loader or specific file types.\r\n         *\r\n         * @name Phaser.Loader.File#multiFile\r\n         * @type {?Phaser.Loader.MultiFile}\r\n         * @since 3.7.0\r\n         */\r\n        this.multiFile;\r\n\r\n        /**\r\n         * Does this file have an associated linked file? Such as an image and a normal map.\r\n         * Atlases and Bitmap Fonts use the multiFile, because those files need loading together but aren't\r\n         * actually bound by data, where-as a linkFile is.\r\n         *\r\n         * @name Phaser.Loader.File#linkFile\r\n         * @type {?Phaser.Loader.File}\r\n         * @since 3.7.0\r\n         */\r\n        this.linkFile;\r\n    },\r\n\r\n    /**\r\n     * Links this File with another, so they depend upon each other for loading and processing.\r\n     *\r\n     * @method Phaser.Loader.File#setLink\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} fileB - The file to link to this one.\r\n     */\r\n    setLink: function (fileB)\r\n    {\r\n        this.linkFile = fileB;\r\n\r\n        fileB.linkFile = this;\r\n    },\r\n\r\n    /**\r\n     * Resets the XHRLoader instance this file is using.\r\n     *\r\n     * @method Phaser.Loader.File#resetXHR\r\n     * @since 3.0.0\r\n     */\r\n    resetXHR: function ()\r\n    {\r\n        if (this.xhrLoader)\r\n        {\r\n            this.xhrLoader.onload = undefined;\r\n            this.xhrLoader.onerror = undefined;\r\n            this.xhrLoader.onprogress = undefined;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by the Loader, starts the actual file downloading.\r\n     * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\r\n     * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.\r\n     *\r\n     * @method Phaser.Loader.File#load\r\n     * @since 3.0.0\r\n     */\r\n    load: function ()\r\n    {\r\n        if (this.state === CONST.FILE_POPULATED)\r\n        {\r\n            //  Can happen for example in a JSONFile if they've provided a JSON object instead of a URL\r\n            this.loader.nextFile(this, true);\r\n        }\r\n        else\r\n        {\r\n            this.src = GetURL(this, this.loader.baseURL);\r\n\r\n            if (this.src.indexOf('data:') === 0)\r\n            {\r\n                console.warn('Local data URIs are not supported: ' + this.key);\r\n            }\r\n            else\r\n            {\r\n                //  The creation of this XHRLoader starts the load process going.\r\n                //  It will automatically call the following, based on the load outcome:\r\n                //  \r\n                // xhr.onload = this.onLoad\r\n                // xhr.onerror = this.onError\r\n                // xhr.onprogress = this.onProgress\r\n\r\n                this.xhrLoader = XHRLoader(this, this.loader.xhr);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called when the file finishes loading, is sent a DOM ProgressEvent.\r\n     *\r\n     * @method Phaser.Loader.File#onLoad\r\n     * @since 3.0.0\r\n     *\r\n     * @param {XMLHttpRequest} xhr - The XMLHttpRequest that caused this onload event.\r\n     * @param {ProgressEvent} event - The DOM ProgressEvent that resulted from this load.\r\n     */\r\n    onLoad: function (xhr, event)\r\n    {\r\n        var success = !(event.target && event.target.status !== 200);\r\n\r\n        //  Handle HTTP status codes of 4xx and 5xx as errors, even if xhr.onerror was not called.\r\n        if (xhr.readyState === 4 && xhr.status >= 400 && xhr.status <= 599)\r\n        {\r\n            success = false;\r\n        }\r\n\r\n        this.resetXHR();\r\n\r\n        this.loader.nextFile(this, success);\r\n    },\r\n\r\n    /**\r\n     * Called if the file errors while loading, is sent a DOM ProgressEvent.\r\n     *\r\n     * @method Phaser.Loader.File#onError\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ProgressEvent} event - The DOM ProgressEvent that resulted from this error.\r\n     */\r\n    onError: function ()\r\n    {\r\n        this.resetXHR();\r\n\r\n        this.loader.nextFile(this, false);\r\n    },\r\n\r\n    /**\r\n     * Called during the file load progress. Is sent a DOM ProgressEvent.\r\n     *\r\n     * @method Phaser.Loader.File#onProgress\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ProgressEvent} event - The DOM ProgressEvent.\r\n     */\r\n    onProgress: function (event)\r\n    {\r\n        if (event.lengthComputable)\r\n        {\r\n            this.bytesLoaded = event.loaded;\r\n            this.bytesTotal = event.total;\r\n\r\n            this.percentComplete = Math.min((this.bytesLoaded / this.bytesTotal), 1);\r\n\r\n            this.loader.emit('fileprogress', this, this.percentComplete);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Usually overridden by the FileTypes and is called by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data, for example a JSON file will parse itself during this stage.\r\n     *\r\n     * @method Phaser.Loader.File#onProcess\r\n     * @since 3.0.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        this.onProcessComplete();\r\n    },\r\n\r\n    /**\r\n     * Called when the File has completed processing.\r\n     * Checks on the state of its multifile, if set.\r\n     *\r\n     * @method Phaser.Loader.File#onProcessComplete\r\n     * @since 3.7.0\r\n     */\r\n    onProcessComplete: function ()\r\n    {\r\n        this.state = CONST.FILE_COMPLETE;\r\n\r\n        if (this.multiFile)\r\n        {\r\n            this.multiFile.onFileComplete(this);\r\n        }\r\n\r\n        this.loader.fileProcessComplete(this);\r\n    },\r\n\r\n    /**\r\n     * Called when the File has completed processing but it generated an error.\r\n     * Checks on the state of its multifile, if set.\r\n     *\r\n     * @method Phaser.Loader.File#onProcessError\r\n     * @since 3.7.0\r\n     */\r\n    onProcessError: function ()\r\n    {\r\n        this.state = CONST.FILE_ERRORED;\r\n\r\n        if (this.multiFile)\r\n        {\r\n            this.multiFile.onFileFailed(this);\r\n        }\r\n\r\n        this.loader.fileProcessComplete(this);\r\n    },\r\n\r\n    /**\r\n     * Checks if a key matching the one used by this file exists in the target Cache or not.\r\n     * This is called automatically by the LoaderPlugin to decide if the file can be safely\r\n     * loaded or will conflict.\r\n     *\r\n     * @method Phaser.Loader.File#hasCacheConflict\r\n     * @since 3.7.0\r\n     *\r\n     * @return {boolean} `true` if adding this file will cause a conflict, otherwise `false`.\r\n     */\r\n    hasCacheConflict: function ()\r\n    {\r\n        return (this.cache && this.cache.exists(this.key));\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     * This method is often overridden by specific file types.\r\n     *\r\n     * @method Phaser.Loader.File#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        if (this.cache)\r\n        {\r\n            this.cache.add(this.key, this.data);\r\n        }\r\n\r\n        this.pendingDestroy();\r\n    },\r\n\r\n    /**\r\n     * You can listen for this event from the LoaderPlugin. It is dispatched _every time_\r\n     * a file loads and is sent 3 arguments, which allow you to identify the file:\r\n     *\r\n     * ```javascript\r\n     * this.load.on('filecomplete', function (key, type, data) {\r\n     *     // Your handler code\r\n     * });\r\n     * ```\r\n     * \r\n     * @event Phaser.Loader.File#fileCompleteEvent\r\n     * @param {string} key - The key of the file that just loaded and finished processing.\r\n     * @param {string} type - The type of the file that just loaded and finished processing.\r\n     * @param {any} data - The data of the file.\r\n     */\r\n\r\n    /**\r\n     * You can listen for this event from the LoaderPlugin. It is dispatched only once per\r\n     * file and you have to use a special listener handle to pick it up.\r\n     * \r\n     * The string of the event is based on the file type and the key you gave it, split up\r\n     * using hyphens.\r\n     * \r\n     * For example, if you have loaded an image with a key of `monster`, you can listen for it\r\n     * using the following:\r\n     *\r\n     * ```javascript\r\n     * this.load.on('filecomplete-image-monster', function (key, type, data) {\r\n     *     // Your handler code\r\n     * });\r\n     * ```\r\n     *\r\n     * Or, if you have loaded a texture atlas with a key of `Level1`:\r\n     * \r\n     * ```javascript\r\n     * this.load.on('filecomplete-atlas-Level1', function (key, type, data) {\r\n     *     // Your handler code\r\n     * });\r\n     * ```\r\n     * \r\n     * Or, if you have loaded a sprite sheet with a key of `Explosion` and a prefix of `GAMEOVER`:\r\n     * \r\n     * ```javascript\r\n     * this.load.on('filecomplete-spritesheet-GAMEOVERExplosion', function (key, type, data) {\r\n     *     // Your handler code\r\n     * });\r\n     * ```\r\n     * \r\n     * @event Phaser.Loader.File#singleFileCompleteEvent\r\n     * @param {any} data - The data of the file.\r\n     */\r\n\r\n    /**\r\n     * Called once the file has been added to its cache and is now ready for deletion from the Loader.\r\n     * It will emit a `filecomplete` event from the LoaderPlugin.\r\n     *\r\n     * @method Phaser.Loader.File#pendingDestroy\r\n     * @fires Phaser.Loader.File#fileCompleteEvent\r\n     * @fires Phaser.Loader.File#singleFileCompleteEvent\r\n     * @since 3.7.0\r\n     */\r\n    pendingDestroy: function (data)\r\n    {\r\n        if (data === undefined) { data = this.data; }\r\n\r\n        var key = this.key;\r\n        var type = this.type;\r\n\r\n        this.loader.emit('filecomplete', key, type, data);\r\n        this.loader.emit('filecomplete-' + type + '-' + key, key, type, data);\r\n\r\n        this.loader.flagForRemoval(this);\r\n    },\r\n\r\n    /**\r\n     * Destroy this File and any references it holds.\r\n     *\r\n     * @method Phaser.Loader.File#destroy\r\n     * @since 3.7.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.loader = null;\r\n        this.cache = null;\r\n        this.xhrSettings = null;\r\n        this.multiFile = null;\r\n        this.linkFile = null;\r\n        this.data = null;\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Static method for creating object URL using URL API and setting it as image 'src' attribute.\r\n * If URL API is not supported (usually on old browsers) it falls back to creating Base64 encoded url using FileReader.\r\n *\r\n * @method Phaser.Loader.File.createObjectURL\r\n * @static\r\n * @param {HTMLImageElement} image - Image object which 'src' attribute should be set to object URL.\r\n * @param {Blob} blob - A Blob object to create an object URL for.\r\n * @param {string} defaultType - Default mime type used if blob type is not available.\r\n */\r\nFile.createObjectURL = function (image, blob, defaultType)\r\n{\r\n    if (typeof URL === 'function')\r\n    {\r\n        image.src = URL.createObjectURL(blob);\r\n    }\r\n    else\r\n    {\r\n        var reader = new FileReader();\r\n\r\n        reader.onload = function ()\r\n        {\r\n            image.removeAttribute('crossOrigin');\r\n            image.src = 'data:' + (blob.type || defaultType) + ';base64,' + reader.result.split(',')[1];\r\n        };\r\n\r\n        reader.onerror = image.onerror;\r\n\r\n        reader.readAsDataURL(blob);\r\n    }\r\n};\r\n\r\n/**\r\n * Static method for releasing an existing object URL which was previously created\r\n * by calling {@link File#createObjectURL} method.\r\n *\r\n * @method Phaser.Loader.File.revokeObjectURL\r\n * @static\r\n * @param {HTMLImageElement} image - Image object which 'src' attribute should be revoked.\r\n */\r\nFile.revokeObjectURL = function (image)\r\n{\r\n    if (typeof URL === 'function')\r\n    {\r\n        URL.revokeObjectURL(image.src);\r\n    }\r\n};\r\n\r\nmodule.exports = File;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","CONST","GetFastValue","GetURL","MergeXHRSettings","XHRLoader","XHRSettings","File","initialize","loader","fileConfig","cache","type","loadKey","key","prefix","Error","url","undefined","path","src","xhrSettings","xhrLoader","state","FILE_POPULATED","FILE_PENDING","bytesTotal","percentComplete","bytesLoaded","data","crossOrigin","config","setLink","fileB","linkFile","resetXHR","onload","onerror","onprogress","load","nextFile","baseURL","indexOf","console","warn","xhr","onLoad","event","success","target","status","readyState","onError","onProgress","lengthComputable","loaded","total","Math","min","emit","onProcess","FILE_PROCESSING","onProcessComplete","FILE_COMPLETE","multiFile","onFileComplete","fileProcessComplete","onProcessError","FILE_ERRORED","onFileFailed","hasCacheConflict","exists","addToCache","add","pendingDestroy","flagForRemoval","destroy","createObjectURL","File.createObjectURL","image","blob","defaultType","URL","reader","FileReader","reader.onload","removeAttribute","result","split","readAsDataURL","revokeObjectURL","File.revokeObjectURL"]
}
