{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$star$StarFactory.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,kEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9H,IAAIC,KAAOH,OAAA,CAAQ,4DAAR,CACaA,QAAAI,CAAQ,8DAARA,CAmCxBC,SAAA,CAA2B,MAA3B,CAAmC,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,MAAP,CAAeC,WAAf,CAA4BC,WAA5B,CAAyCC,SAAzC,CAAoDC,SAApD,CAC5C,CACI,MAAO,KAAAC,YAAAC,IAAA,CAAqB,IAAIX,IAAJ,CAAS,IAAAY,MAAT,CAAqBT,CAArB,CAAwBC,CAAxB,CAA2BC,MAA3B,CAAmCC,WAAnC,CAAgDC,WAAhD,CAA6DC,SAA7D,CAAwEC,SAAxE,CAArB,CADX,CADA,CA3C8H;",
"sources":["node_modules/Phaser/src/gameobjects/shape/star/StarFactory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$star$StarFactory\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Star = require('./Star');\r\nvar GameObjectFactory = require('../../GameObjectFactory');\r\n\r\n/**\r\n * Creates a new Star Shape Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the Star Game Object has been built into Phaser.\r\n * \r\n * The Star Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * As the name implies, the Star shape will display a star in your game. You can control several\r\n * aspects of it including the number of points that constitute the star. The default is 5. If\r\n * you change it to 4 it will render as a diamond. If you increase them, you'll get a more spiky\r\n * star shape.\r\n * \r\n * You can also control the inner and outer radius, which is how 'long' each point of the star is.\r\n * Modify these values to create more interesting shapes.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#star\r\n * @since 3.13.0\r\n *\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [points=5] - The number of points on the star.\r\n * @param {number} [innerRadius=32] - The inner radius of the star.\r\n * @param {number} [outerRadius=64] - The outer radius of the star.\r\n * @param {number} [fillColor] - The color the star will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the star will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n *\r\n * @return {Phaser.GameObjects.Star} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('star', function (x, y, points, innerRadius, outerRadius, fillColor, fillAlpha)\r\n{\r\n    return this.displayList.add(new Star(this.scene, x, y, points, innerRadius, outerRadius, fillColor, fillAlpha));\r\n});\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Star","GameObjectFactory","register","x","y","points","innerRadius","outerRadius","fillColor","fillAlpha","displayList","add","scene"]
}
