{"version":3,"sources":["tongue/inst.cljc"],"mappings":"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","names":["tongue.inst/pad2","i","tongue.inst/pad3","tongue.inst/hour24","c","tongue.inst/hour12","cljs.core/mod","tongue.inst/minutes","tongue.inst/seconds","tongue.inst/milliseconds","tongue.inst/day-of-week","tongue.inst/day-of-month","tongue.inst/month","tongue.inst/year","tongue.inst/era","tongue.inst/format-token","strings","token","G__28270","cljs.core/Keyword","cljs.core.nth","cljs.core/name","tongue.inst/inst->date","inst","js/Date","cljs.core/inst-ms","tongue.inst/formatter","template","tokens","cljs.core/re-seq","cljs.core.map","p__28278","vec__28279","string","code","cljs.core.keyword","t","date","cljs.core.reduce","s","tz-offset-min","system-offset-min","corrected-t","tongue$inst$formatter_$_format"],"sourcesContent":["(ns tongue.inst\n  (:require\n    [clojure.string :as str]\n    [tongue.macro :as macro]\n    #?(:clj [clojure.future :refer :all])\n    #?(:clj [clojure.spec.alpha :as spec]))\n  #?(:clj\n      (:import\n        [java.util Calendar])))\n\n\n(defn- pad2 [i]\n  (if (< i 10)\n    (str \"0\" i)\n    (str i)))\n\n\n(defn- pad3 [i]\n  (cond\n    (< i 10)  (str \"00\" i)\n    (< i 100) (str \"0\" i)\n    :else     (str i)))\n\n\n(defn hour24 [c]\n  #?(:clj  (.get ^Calendar c Calendar/HOUR_OF_DAY)\n     :cljs (.getHours c)))\n\n\n(defn hour12 [c]\n  (-> (hour24 c) (+ 11) (mod 12) inc))\n\n\n(defn minutes [c]\n  #?(:clj  (.get ^Calendar c Calendar/MINUTE)\n     :cljs (.getMinutes c)))\n\n\n(defn seconds [c]\n  #?(:clj  (.get ^Calendar c Calendar/SECOND)\n     :cljs (.getSeconds c)))\n\n\n(defn milliseconds [c]\n  #?(:clj  (.get ^Calendar c Calendar/MILLISECOND)\n     :cljs (.getMilliseconds c)))\n\n\n(defn day-of-week [c] ;; Sunday => 0, ...\n  #?(:clj  (dec (.get ^Calendar c Calendar/DAY_OF_WEEK))\n     :cljs (.getDay c)))\n  \n  \n(defn day-of-month [c]\n  #?(:clj  (.get ^Calendar c Calendar/DAY_OF_MONTH)\n     :cljs (.getDate c)))\n\n\n(defn month [c] ;; January => 0, ...\n  #?(:clj  (.get ^Calendar c Calendar/MONTH)\n     :cljs (.getMonth c)))\n\n\n(defn year [c] ;; January => 0, ...\n  #?(:clj  (.get ^Calendar c Calendar/YEAR)\n     :cljs (+ 1900 (.getYear c))))\n\n\n(defn era [c] ;; BC => 0, AD => 1\n  (if (< (year c) 1)\n    0 1))\n\n\n(defn format-token ^String [strings token c]\n  (case token\n    :hour24-padded   (pad2 (hour24 c))\n    :hour24          (str (hour24 c))\n    :hour12-padded   (pad2 (hour12 c))\n    :hour12          (str (hour12 c))\n    :dayperiod       (nth (:dayperiods strings) (if (< (hour24 c) 12) 0 1))\n    :minutes-padded  (pad2 (minutes c))\n    :minutes         (str (minutes c))\n    :seconds-padded  (pad2 (seconds c))\n    :seconds         (str (seconds c))\n    :milliseconds    (pad3 (milliseconds c))\n    :weekday-long    (nth (:weekdays-long strings)   (day-of-week c))\n    :weekday-short   (nth (:weekdays-short strings)  (day-of-week c))\n    :weekday-narrow  (nth (:weekdays-narrow strings) (day-of-week c))\n    :weekday-numeric (str (inc (day-of-week c)))\n    :day-padded      (pad2 (day-of-month c))\n    :day             (str (day-of-month c))\n    :month-long      (nth (:months-long strings)   (month c))\n    :month-short     (nth (:months-short strings)  (month c))\n    :month-narrow    (nth (:months-narrow strings) (month c))\n    :month-numeric-padded (pad2 (inc (month c)))\n    :month-numeric   (str (inc (month c)))\n    :year            (str (year c))\n    :year-2digit     (pad2 (mod (year c) 100))\n    :era-long        (nth (:eras-long strings)  (era c))\n    :era-short       (nth (:eras-short strings) (era c))\n    (if (string? token)\n      token\n      (str \"{\" (name token) \"}\"))))\n\n\n#?(:clj (def ^:private UTC (java.util.TimeZone/getTimeZone \"UTC\")))\n\n\n(macro/with-spec\n  (spec/def ::weekdays-narrow (spec/coll-of string? :count 7))\n  (spec/def ::weekdays-short  (spec/coll-of string? :count 7))\n  (spec/def ::weekdays-long   (spec/coll-of string? :count 7))\n  (spec/def ::months-narrow   (spec/coll-of string? :count 12))\n  (spec/def ::months-short    (spec/coll-of string? :count 12))\n  (spec/def ::months-long     (spec/coll-of string? :count 12))\n  (spec/def ::dayperiods      (spec/coll-of string? :count 2))\n  (spec/def ::eras-short      (spec/coll-of string? :count 2))\n  (spec/def ::eras-long       (spec/coll-of string? :count 2))\n\n  (spec/def ::template string?)\n  (spec/def ::strings\n    (spec/keys :opt-un [::weekdays-narrow ::weekdays-short ::weekdays-long ::months-narrow ::months-short ::months-long ::dayperiods ::eras-short ::eras-long])))\n\n\n#?(:cljs\n    (defn inst->date [inst]\n      (if (instance? js/Date inst)\n        inst\n        (js/Date. (inst-ms inst)))))\n\n\n(defn formatter\n  [template strings]\n\n  (macro/with-spec\n    (spec/assert ::template template)\n    (spec/assert ::strings strings))\n  \n  (let [tokens (->> (re-seq #\"(?:\\{([^{} ]+)\\}|\\{|[^{]*)\" template)\n                    (map (fn [[string code]] (if code (keyword code) string))))]\n    #?(:clj\n        (fn format\n          ([t] \n            (macro/with-spec\n              (spec/assert inst? t))\n            (format t UTC))\n          ([t tz]\n            (macro/with-spec\n              (spec/assert inst? t)\n              (spec/assert #(instance? java.util.TimeZone %) tz))\n            (let [cal (doto (Calendar/getInstance)\n                        (.setTimeZone tz)\n                        (.setTimeInMillis (inst-ms t)))]\n              (str\n                (reduce\n                  (fn [^StringBuilder sb token]\n                    (.append sb (format-token strings token cal)))\n                  (StringBuilder.)\n                  tokens)))))\n       :cljs\n        (fn format\n          ([t]\n            (macro/with-spec\n              (spec/assert inst? t))\n            (let [date (inst->date t)]\n              (reduce\n                (fn [s token]\n                  (str s (format-token strings token date)))\n                \"\" tokens)))\n          ([t tz-offset-min]\n            (macro/with-spec\n              (spec/assert inst? t)\n              (spec/assert #(spec/int-in-range? -1440 1440 %)  tz-offset-min))\n            (let [date              (inst->date t)\n                  system-offset-min (- (.getTimezoneOffset date))\n                  corrected-t       (if (== system-offset-min tz-offset-min)\n                                      date\n                                      (js/Date. (+ (inst-ms date)\n                                                   (* 60000 (- tz-offset-min system-offset-min)))))]\n              (format corrected-t)))))))\n"]}