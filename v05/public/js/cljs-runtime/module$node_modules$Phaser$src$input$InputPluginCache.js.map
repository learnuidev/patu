{
"version":3,
"file":"module$node_modules$Phaser$src$input$InputPluginCache.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOlH,IAAIC,SAAWH,OAAA,CAAQ,sDAAR,CAAf,CAIII,aAAe,EA2FnBH,OAAAC,QAAA,CAjFuBG,CAiBN,SAAWC,QAAS,CAACC,GAAD,CAAMC,MAAN,CAAcC,OAAd,CAAuBC,WAAvB,CAAoCC,SAApC,CACrC,CACIP,YAAA,CAAaG,GAAb,CAAA,CAAoB,CAAEC,OAAQA,MAAV,CAAkBC,QAASA,OAA3B,CAAoCC,YAAaA,WAAjD,CAA8DC,UAAWA,SAAzE,CADxB,CAlBuBN,CAgCN,UAAYO,QAAS,CAACL,GAAD,CACtC,CACI,MAAOH,aAAA,CAAaG,GAAb,CADX,CAjCuBF,CA6CN,QAAUQ,QAAS,CAACC,MAAD,CACpC,CACI,IAAIC,IAAMD,MAAAE,MAAAD,IAAV,CACIE,SAAWF,GAAAE,SAAAC,MACXC;GAAAA,CAASJ,GAAAK,KAAAD,OAEb,KAAKZ,IAAIA,GAAT,GAAgBH,aAAhB,CACA,CACI,IAAIiB,OAASjB,YAAA,CAAaG,GAAb,CAAAC,OAAb,CACIC,QAAUL,YAAA,CAAaG,GAAb,CAAAE,QAIVN,SAAA,CAASc,QAAT,CAHcb,YAAA,CAAaG,GAAb,CAAAG,YAGd,CAAgCS,GAAA,CAFpBf,YAAA,CAAaG,GAAb,CAAAI,UAEoB,CAAhC,CAAJ,GAEIG,MAAA,CAAOL,OAAP,CAFJ,CAEsB,IAAIY,MAAJ,CAAWP,MAAX,CAFtB,CANJ,CANJ,CA9CuBT,CAyEN,OAASiB,QAAS,CAACf,GAAD,CACnC,CACQH,YAAAmB,eAAA,CAA4BhB,GAA5B,CAAJ,EAEI,OAAOH,YAAA,CAAaG,GAAb,CAHf,CA1EuBF,CArB2F;",
"sources":["node_modules/Phaser/src/input/InputPluginCache.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$input$InputPluginCache\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetValue = require('../utils/object/GetValue');\r\n\r\n//  Contains the plugins that Phaser uses globally and locally.\r\n//  These are the source objects, not instantiated.\r\nvar inputPlugins = {};\r\n\r\n/**\r\n * @typedef {object} InputPluginContainer\r\n *\r\n * @property {string} key - The unique name of this plugin in the input plugin cache.\r\n * @property {function} plugin - The plugin to be stored. Should be the source object, not instantiated.\r\n * @property {string} [mapping] - If this plugin is to be injected into the Input Plugin, this is the property key map used.\r\n */\r\n\r\nvar InputPluginCache = {};\r\n\r\n/**\r\n * Static method called directly by the Core internal Plugins.\r\n * Key is a reference used to get the plugin from the plugins object (i.e. InputPlugin)\r\n * Plugin is the object to instantiate to create the plugin\r\n * Mapping is what the plugin is injected into the Scene.Systems as (i.e. input)\r\n *\r\n * @method Phaser.Input.InputPluginCache.register\r\n * @since 3.10.0\r\n * \r\n * @param {string} key - A reference used to get this plugin from the plugin cache.\r\n * @param {function} plugin - The plugin to be stored. Should be the core object, not instantiated.\r\n * @param {string} mapping - If this plugin is to be injected into the Input Plugin, this is the property key used.\r\n * @param {string} settingsKey - The key in the Scene Settings to check to see if this plugin should install or not.\r\n * @param {string} configKey - The key in the Game Config to check to see if this plugin should install or not.\r\n */\r\nInputPluginCache.register = function (key, plugin, mapping, settingsKey, configKey)\r\n{\r\n    inputPlugins[key] = { plugin: plugin, mapping: mapping, settingsKey: settingsKey, configKey: configKey };\r\n};\r\n\r\n/**\r\n * Returns the input plugin object from the cache based on the given key.\r\n *\r\n * @method Phaser.Input.InputPluginCache.getCore\r\n * @since 3.10.0\r\n * \r\n * @param {string} key - The key of the input plugin to get.\r\n *\r\n * @return {InputPluginContainer} The input plugin object.\r\n */\r\nInputPluginCache.getPlugin = function (key)\r\n{\r\n    return inputPlugins[key];\r\n};\r\n\r\n/**\r\n * Installs all of the registered Input Plugins into the given target.\r\n *\r\n * @method Phaser.Input.InputPluginCache.install\r\n * @since 3.10.0\r\n * \r\n * @param {Phaser.Input.InputPlugin} target - The target InputPlugin to install the plugins into.\r\n */\r\nInputPluginCache.install = function (target)\r\n{\r\n    var sys = target.scene.sys;\r\n    var settings = sys.settings.input;\r\n    var config = sys.game.config;\r\n\r\n    for (var key in inputPlugins)\r\n    {\r\n        var source = inputPlugins[key].plugin;\r\n        var mapping = inputPlugins[key].mapping;\r\n        var settingsKey = inputPlugins[key].settingsKey;\r\n        var configKey = inputPlugins[key].configKey;\r\n\r\n        if (GetValue(settings, settingsKey, config[configKey]))\r\n        {\r\n            target[mapping] = new source(target);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Removes an input plugin based on the given key.\r\n *\r\n * @method Phaser.Input.InputPluginCache.remove\r\n * @since 3.10.0\r\n * \r\n * @param {string} key - The key of the input plugin to remove.\r\n */\r\nInputPluginCache.remove = function (key)\r\n{\r\n    if (inputPlugins.hasOwnProperty(key))\r\n    {\r\n        delete inputPlugins[key];\r\n    }\r\n};\r\n\r\nmodule.exports = InputPluginCache;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetValue","inputPlugins","InputPluginCache","InputPluginCache.register","key","plugin","mapping","settingsKey","configKey","InputPluginCache.getPlugin","InputPluginCache.install","target","sys","scene","settings","input","config","game","source","InputPluginCache.remove","hasOwnProperty"]
}
