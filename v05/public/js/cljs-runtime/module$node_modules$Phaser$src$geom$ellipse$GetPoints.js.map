{
"version":3,
"file":"module$node_modules$Phaser$src$geom$ellipse$GetPoints.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOlH,IAAIC,cAAgBH,OAAA,CAAQ,2DAAR,CAApB,CACII,mBAAqBJ,OAAA,CAAQ,gEAAR,CADzB,CAEIK,YAAcL,OAAA,CAAQ,iDAAR,CAFlB,CAGIM,WAAaN,OAAA,CAAQ,2CAAR,CAsCjBC,OAAAC,QAAA,CApBgBK,QAAS,CAACC,OAAD,CAAUC,QAAV,CAAoBC,QAApB,CAA8BC,GAA9B,CACzB,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,EAA/B,CAGKF;QAAL,GAEIA,QAFJ,CAEeN,aAAA,CAAcK,OAAd,CAFf,CAEwCE,QAFxC,CAKA,KAASG,QAAT,CAAa,CAAb,CAAgBA,QAAhB,CAAoBJ,QAApB,CAA8BI,QAAA,EAA9B,CACA,CACI,IAAIC,MAAQT,WAAA,CAAYQ,QAAZ,CAAgBJ,QAAhB,CAA0B,CAA1B,CAA6BH,UAAAS,IAA7B,CAEZJ,IAAAK,KAAA,CAASZ,kBAAA,CAAmBI,OAAnB,CAA4BM,KAA5B,CAAT,CAHJ,CAMA,MAAOH,IAhBX,CA7BkH;",
"sources":["node_modules/Phaser/src/geom/ellipse/GetPoints.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$ellipse$GetPoints\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Circumference = require('./Circumference');\r\nvar CircumferencePoint = require('./CircumferencePoint');\r\nvar FromPercent = require('../../math/FromPercent');\r\nvar MATH_CONST = require('../../math/const');\r\n\r\n/**\r\n * Returns an array of Point objects containing the coordinates of the points around the circumference of the Ellipse,\r\n * based on the given quantity or stepRate values.\r\n *\r\n * @function Phaser.Geom.Ellipse.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point[]} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Ellipse} ellipse - The Ellipse to get the points from.\r\n * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n * @param {number} [stepRate] - Sets the quantity by getting the circumference of the ellipse and dividing it by the stepRate.\r\n * @param {(array|Phaser.Geom.Point[])} [out] - An array to insert the points in to. If not provided a new array will be created.\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} An array of Point objects pertaining to the points around the circumference of the ellipse.\r\n */\r\nvar GetPoints = function (ellipse, quantity, stepRate, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity)\r\n    {\r\n        quantity = Circumference(ellipse) / stepRate;\r\n    }\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        var angle = FromPercent(i / quantity, 0, MATH_CONST.PI2);\r\n\r\n        out.push(CircumferencePoint(ellipse, angle));\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoints;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Circumference","CircumferencePoint","FromPercent","MATH_CONST","GetPoints","ellipse","quantity","stepRate","out","undefined","i","angle","PI2","push"]
}
