{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$components$TextureCrop.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,kEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0M9HD,MAAAC,QAAA,CAzLkBC,CASdC,QAAS,IATKD,CAkBdE,MAAO,IAlBOF,CA6BdG,UAAW,CAAA,CA7BGH,CAgEdI,QAASA,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,KAAP,CAAcC,MAAd,CAClB,CACcC,IAAAA,EAAV,GAAIJ,CAAJ,CAEI,IAAAF,UAFJ,CAEqB,CAAA,CAFrB,CAIS,IAAAD,MAJT,GAMqB,QAAjB,GAAI,MAAOG,EAAX,CAEI,IAAAH,MAAAQ,WAAA,CAAsB,IAAAC,MAAtB,CAAkCN,CAAlC,CAAqCC,CAArC,CAAwCC,KAAxC,CAA+CC,MAA/C,CAAuD,IAAAI,MAAvD,CAAmE,IAAAC,MAAnE,CAFJ,CAQI,IAAAX,MAAAQ,WAAA,CAAsB,IAAAC,MAAtB,CAFWN,CAEuBA,EAAlC,CAFWA,CAE+BC,EAA1C,CAFWD,CAEuCE,MAAlD,CAFWF,CAEmDG,OAA9D,CAA2E,IAAAI,MAA3E,CAAuF,IAAAC,MAAvF,CAGJ,CAAA,IAAAV,UAAA,CAAiB,CAAA,CAjBrB,CAoBA,OAAO,KArBX,CAjEcH,CAsGdc,WAAYA,QAAS,CAACC,GAAD,CAAMb,KAAN,CACrB,CACI,IAAAD,QAAA;AAAe,IAAAe,MAAAC,IAAAC,SAAAC,IAAA,CAA4BJ,GAA5B,CAEf,OAAO,KAAAK,SAAA,CAAclB,KAAd,CAHX,CAvGcF,CAgIdoB,SAAUA,QAAS,CAAClB,KAAD,CAAQmB,UAAR,CAAoBC,YAApB,CACnB,CACuBb,IAAAA,EAAnB,GAAIY,UAAJ,GAAgCA,UAAhC,CAA6C,CAAA,CAA7C,CACqBZ,KAAAA,EAArB,GAAIa,YAAJ,GAAkCA,YAAlC,CAAiD,CAAA,CAAjD,CAEA,KAAApB,MAAA,CAAa,IAAAD,QAAAkB,IAAA,CAAiBjB,KAAjB,CAQT,KAAAqB,YAAA,CANC,IAAArB,MAAAsB,SAAL,EAA6B,IAAAtB,MAAAuB,UAA7B,CAMI,IAAAF,YANJ,CAhJIG,CAgJJ,CAEI,IAAAH,YAFJ,CAEwB,EAOpB,KAAAI,eAAJ,EAA2BN,UAA3B,EAEI,IAAAO,eAAA,EAGA,KAAAC,iBAAJ,EAA6BP,YAA7B,GAEQ,IAAApB,MAAA4B,YAAJ,CAEI,IAAAC,UAAA,CAAe,IAAA7B,MAAA8B,OAAf,CAAkC,IAAA9B,MAAA+B,OAAlC,CAFJ,CAMI,IAAAC,oBAAA,EARR,CAYI;IAAA/B,UAAJ,EAEI,IAAAD,MAAAiC,cAAA,CAAyB,IAAAxB,MAAzB,CAAqC,IAAAC,MAArC,CAAiD,IAAAC,MAAjD,CAGJ,OAAO,KArCX,CAjIcb,CAkLdoC,gBAAiBA,QAAS,EAC1B,CACI,MAAO,CAAEC,GAAI,CAAN,CAASC,GAAI,CAAb,CAAgBC,GAAI,CAApB,CAAuBC,GAAI,CAA3B,CAA8BjC,MAAO,CAArC,CAAwCC,OAAQ,CAAhD,CAAmDH,EAAG,CAAtD,CAAyDC,EAAG,CAA5D,CAA+DM,MAAO,CAAA,CAAtE,CAA6EC,MAAO,CAAA,CAApF,CAA2F4B,GAAI,CAA/F,CAAkGC,GAAI,CAAtG,CAAyGC,GAAI,CAA7G,CAAgHC,GAAI,CAApH,CADX,CAnLc5C,CAjB4G;",
"sources":["node_modules/Phaser/src/gameobjects/components/TextureCrop.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$components$TextureCrop\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n//  bitmask flag for GameObject.renderMask\r\nvar _FLAG = 8; // 1000\r\n\r\n/**\r\n * Provides methods used for getting and setting the texture of a Game Object.\r\n *\r\n * @name Phaser.GameObjects.Components.TextureCrop\r\n * @since 3.0.0\r\n */\r\n\r\nvar TextureCrop = {\r\n\r\n    /**\r\n     * The Texture this Game Object is using to render with.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TextureCrop#texture\r\n     * @type {Phaser.Textures.Texture|Phaser.Textures.CanvasTexture}\r\n     * @since 3.0.0\r\n     */\r\n    texture: null,\r\n\r\n    /**\r\n     * The Texture Frame this Game Object is using to render with.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TextureCrop#frame\r\n     * @type {Phaser.Textures.Frame}\r\n     * @since 3.0.0\r\n     */\r\n    frame: null,\r\n\r\n    /**\r\n     * A boolean flag indicating if this Game Object is being cropped or not.\r\n     * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\r\n     * Equally, calling `setCrop` with no arguments will reset the crop and disable it.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TextureCrop#isCropped\r\n     * @type {boolean}\r\n     * @since 3.11.0\r\n     */\r\n    isCropped: false,\r\n\r\n    /**\r\n     * Applies a crop to a texture based Game Object, such as a Sprite or Image.\r\n     * \r\n     * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\r\n     * \r\n     * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\r\n     * changes what is shown when rendered.\r\n     * \r\n     * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\r\n     * \r\n     * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\r\n     * half of it, you could call `setCrop(0, 0, 400, 600)`.\r\n     * \r\n     * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\r\n     * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\r\n     * \r\n     * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\r\n     * \r\n     * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\r\n     * \r\n     * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\r\n     * the renderer to skip several internal calculations.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TextureCrop#setCrop\r\n     * @since 3.11.0\r\n     *\r\n     * @param {(number|Phaser.Geom.Rectangle)} [x] - The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\r\n     * @param {number} [y] - The y coordinate to start the crop from.\r\n     * @param {number} [width] - The width of the crop rectangle in pixels.\r\n     * @param {number} [height] - The height of the crop rectangle in pixels.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setCrop: function (x, y, width, height)\r\n    {\r\n        if (x === undefined)\r\n        {\r\n            this.isCropped = false;\r\n        }\r\n        else if (this.frame)\r\n        {\r\n            if (typeof x === 'number')\r\n            {\r\n                this.frame.setCropUVs(this._crop, x, y, width, height, this.flipX, this.flipY);\r\n            }\r\n            else\r\n            {\r\n                var rect = x;\r\n\r\n                this.frame.setCropUVs(this._crop, rect.x, rect.y, rect.width, rect.height, this.flipX, this.flipY);\r\n            }\r\n\r\n            this.isCropped = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the texture and frame this Game Object will use to render with.\r\n     *\r\n     * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TextureCrop#setTexture\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the texture to be used, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setTexture: function (key, frame)\r\n    {\r\n        this.texture = this.scene.sys.textures.get(key);\r\n\r\n        return this.setFrame(frame);\r\n    },\r\n\r\n    /**\r\n     * Sets the frame this Game Object will use to render with.\r\n     *\r\n     * The Frame has to belong to the current Texture being used.\r\n     *\r\n     * It can be either a string or an index.\r\n     *\r\n     * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\r\n     * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TextureCrop#setFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer)} frame - The name or index of the frame within the Texture.\r\n     * @param {boolean} [updateSize=true] - Should this call adjust the size of the Game Object?\r\n     * @param {boolean} [updateOrigin=true] - Should this call adjust the origin of the Game Object?\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setFrame: function (frame, updateSize, updateOrigin)\r\n    {\r\n        if (updateSize === undefined) { updateSize = true; }\r\n        if (updateOrigin === undefined) { updateOrigin = true; }\r\n\r\n        this.frame = this.texture.get(frame);\r\n\r\n        if (!this.frame.cutWidth || !this.frame.cutHeight)\r\n        {\r\n            this.renderFlags &= ~_FLAG;\r\n        }\r\n        else\r\n        {\r\n            this.renderFlags |= _FLAG;\r\n        }\r\n\r\n        if (this._sizeComponent && updateSize)\r\n        {\r\n            this.setSizeToFrame();\r\n        }\r\n\r\n        if (this._originComponent && updateOrigin)\r\n        {\r\n            if (this.frame.customPivot)\r\n            {\r\n                this.setOrigin(this.frame.pivotX, this.frame.pivotY);\r\n            }\r\n            else\r\n            {\r\n                this.updateDisplayOrigin();\r\n            }\r\n        }\r\n\r\n        if (this.isCropped)\r\n        {\r\n            this.frame.updateCropUVs(this._crop, this.flipX, this.flipY);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal method that returns a blank, well-formed crop object for use by a Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TextureCrop#resetCropObject\r\n     * @private\r\n     * @since 3.12.0\r\n     * \r\n     * @return {object} The crop object.\r\n     */\r\n    resetCropObject: function ()\r\n    {\r\n        return { u0: 0, v0: 0, u1: 0, v1: 0, width: 0, height: 0, x: 0, y: 0, flipX: false, flipY: false, cx: 0, cy: 0, cw: 0, ch: 0 };\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = TextureCrop;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","TextureCrop","texture","frame","isCropped","setCrop","x","y","width","height","undefined","setCropUVs","_crop","flipX","flipY","setTexture","key","scene","sys","textures","get","setFrame","updateSize","updateOrigin","renderFlags","cutWidth","cutHeight","_FLAG","_sizeComponent","setSizeToFrame","_originComponent","customPivot","setOrigin","pivotX","pivotY","updateDisplayOrigin","updateCropUVs","resetCropObject","u0","v0","u1","v1","cx","cy","cw","ch"]
}
