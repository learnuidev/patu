{
"version":3,
"file":"module$node_modules$Phaser$src$loader$filetypes$AudioSpriteFile.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/Phaser/src/loader/filetypes/AudioSpriteFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$filetypes$AudioSpriteFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar AudioFile = require('./AudioFile.js');\r\nvar Class = require('../../utils/Class');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\nvar JSONFile = require('./JSONFile.js');\r\nvar MultiFile = require('../MultiFile.js');\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.AudioSpriteFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within both the Loader and the Audio Cache.\r\n * @property {string} jsonURL - The absolute or relative URL to load the json file from. Or a well formed JSON object to use instead.\r\n * @property {XHRSettingsObject} [jsonXhrSettings] - Extra XHR Settings specifically for the json file.\r\n * @property {{(string|string[])}} [audioURL] - The absolute or relative URL to load the audio file from.\r\n * @property {any} [audioConfig] - The audio configuration options.\r\n * @property {XHRSettingsObject} [audioXhrSettings] - Extra XHR Settings specifically for the audio file.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * An Audio Sprite File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#audioSprite method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audioSprite.\r\n *\r\n * @class AudioSpriteFile\r\n * @extends Phaser.Loader.MultiFile\r\n * @memberOf Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.AudioSpriteFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} jsonURL - The absolute or relative URL to load the json file from. Or a well formed JSON object to use instead.\r\n * @param {{(string|string[])}} [audioURL] - The absolute or relative URL to load the audio file from. If empty it will be obtained by parsing the JSON file.\r\n * @param {any} [audioConfig] - The audio configuration options.\r\n * @param {XHRSettingsObject} [audioXhrSettings] - An XHR Settings configuration object for the audio file. Used in replacement of the Loaders default XHR Settings.\r\n * @param {XHRSettingsObject} [jsonXhrSettings] - An XHR Settings configuration object for the json file. Used in replacement of the Loaders default XHR Settings.\r\n */\r\nvar AudioSpriteFile = new Class({\r\n\r\n    Extends: MultiFile,\r\n\r\n    initialize:\r\n\r\n    function AudioSpriteFile (loader, key, jsonURL, audioURL, audioConfig, audioXhrSettings, jsonXhrSettings)\r\n    {\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            jsonURL = GetFastValue(config, 'jsonURL');\r\n            audioURL = GetFastValue(config, 'audioURL');\r\n            audioConfig = GetFastValue(config, 'audioConfig');\r\n            audioXhrSettings = GetFastValue(config, 'audioXhrSettings');\r\n            jsonXhrSettings = GetFastValue(config, 'jsonXhrSettings');\r\n        }\r\n\r\n        var data;\r\n\r\n        //  No url? then we're going to do a json load and parse it from that\r\n        if (!audioURL)\r\n        {\r\n            data = new JSONFile(loader, key, jsonURL, jsonXhrSettings);\r\n            \r\n            MultiFile.call(this, loader, 'audiosprite', key, [ data ]);\r\n\r\n            this.config.resourceLoad = true;\r\n            this.config.audioConfig = audioConfig;\r\n            this.config.audioXhrSettings = audioXhrSettings;\r\n        }\r\n        else\r\n        {\r\n            var audio = AudioFile.create(loader, key, audioURL, audioConfig, audioXhrSettings);\r\n\r\n            if (audio)\r\n            {\r\n                data = new JSONFile(loader, key, jsonURL, jsonXhrSettings);\r\n\r\n                MultiFile.call(this, loader, 'audiosprite', key, [ audio, data ]);\r\n\r\n                this.config.resourceLoad = false;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by each File when it finishes loading.\r\n     *\r\n     * @method Phaser.Loader.AudioSpriteFile#onFileComplete\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The File that has completed processing.\r\n     */\r\n    onFileComplete: function (file)\r\n    {\r\n        var index = this.files.indexOf(file);\r\n\r\n        if (index !== -1)\r\n        {\r\n            this.pending--;\r\n\r\n            if (this.config.resourceLoad && file.type === 'json' && file.data.hasOwnProperty('resources'))\r\n            {\r\n                //  Inspect the data for the files to now load\r\n                var urls = file.data.resources;\r\n\r\n                var audioConfig = GetFastValue(this.config, 'audioConfig');\r\n                var audioXhrSettings = GetFastValue(this.config, 'audioXhrSettings');\r\n\r\n                var audio = AudioFile.create(this.loader, file.key, urls, audioConfig, audioXhrSettings);\r\n\r\n                if (audio)\r\n                {\r\n                    this.addToMultiFile(audio);\r\n\r\n                    this.loader.addFile(audio);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.AudioSpriteFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        if (this.isReadyToProcess())\r\n        {\r\n            var fileA = this.files[0];\r\n            var fileB = this.files[1];\r\n\r\n            fileA.addToCache();\r\n            fileB.addToCache();\r\n\r\n            this.complete = true;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds a JSON based Audio Sprite, or array of audio sprites, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.audioSprite('kyobi', 'kyobi.json', [\r\n *         'kyobi.ogg',\r\n *         'kyobi.mp3',\r\n *         'kyobi.m4a'\r\n *     ]);\r\n * }\r\n * ```\r\n * \r\n * Audio Sprites are a combination of audio files and a JSON configuration.\r\n * The JSON follows the format of that created by https://github.com/tonistiigi/audiosprite\r\n *\r\n * If the JSON file includes a 'resource' object then you can let Phaser parse it and load the audio\r\n * files automatically based on its content. To do this exclude the audio URLs from the load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.audioSprite('kyobi', 'kyobi.json');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\r\n * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Audio Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Audio Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Audio Cache first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.audioSprite({\r\n *     key: 'kyobi',\r\n *     jsonURL: 'audio/Kyobi.json',\r\n *     audioURL: [\r\n *         'audio/Kyobi.ogg',\r\n *         'audio/Kyobi.mp3',\r\n *         'audio/Kyobi.m4a'\r\n *     ]\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.AudioSpriteFileConfig` for more details.\r\n *\r\n * Instead of passing a URL for the audio JSON data you can also pass in a well formed JSON object instead.\r\n *\r\n * Once the audio has finished loading you can use it create an Audio Sprite by referencing its key:\r\n * \r\n * ```javascript\r\n * this.load.audioSprite('kyobi', 'kyobi.json');\r\n * // and later in your game ...\r\n * var music = this.sound.addAudioSprite('kyobi');\r\n * music.play('title');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * Due to different browsers supporting different audio file types you should usually provide your audio files in a variety of formats.\r\n * ogg, mp3 and m4a are the most common. If you provide an array of URLs then the Loader will determine which _one_ file to load based on\r\n * browser support.\r\n *\r\n * If audio has been disabled in your game, either via the game config, or lack of support from the device, then no audio will be loaded.\r\n * \r\n * Note: The ability to load this type of file will only be available if the Audio Sprite File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#audioSprite\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.AudioSpriteFileConfig|Phaser.Loader.FileTypes.AudioSpriteFileConfig[])} key - The key to use for this file, or a file configuration object, or an array of objects.\r\n * @param {string} jsonURL - The absolute or relative URL to load the json file from. Or a well formed JSON object to use instead.\r\n * @param {(string|string[])} [audioURL] - The absolute or relative URL to load the audio file from. If empty it will be obtained by parsing the JSON file.\r\n * @param {any} [audioConfig] - The audio configuration options.\r\n * @param {XHRSettingsObject} [audioXhrSettings] - An XHR Settings configuration object for the audio file. Used in replacement of the Loaders default XHR Settings.\r\n * @param {XHRSettingsObject} [jsonXhrSettings] - An XHR Settings configuration object for the json file. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader.\r\n */\r\nFileTypesManager.register('audioSprite', function (key, jsonURL, audioURL, audioConfig, audioXhrSettings, jsonXhrSettings)\r\n{\r\n    var game = this.systems.game;\r\n    var gameAudioConfig = game.config.audio;\r\n    var deviceAudio = game.device.audio;\r\n\r\n    if ((gameAudioConfig && gameAudioConfig.noAudio) || (!deviceAudio.webAudio && !deviceAudio.audioData))\r\n    {\r\n        //  Sounds are disabled, so skip loading audio\r\n        return this;\r\n    }\r\n\r\n    var multifile;\r\n\r\n    //  Supports an Object file definition in the key argument\r\n    //  Or an array of objects in the key argument\r\n    //  Or a single entry where all arguments have been defined\r\n\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            multifile = new AudioSpriteFile(this, key[i]);\r\n\r\n            if (multifile.files)\r\n            {\r\n                this.addFile(multifile.files);\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        multifile = new AudioSpriteFile(this, key, jsonURL, audioURL, audioConfig, audioXhrSettings, jsonXhrSettings);\r\n\r\n        if (multifile.files)\r\n        {\r\n            this.addFile(multifile.files);\r\n        }\r\n    }\r\n\r\n    return this;\r\n});\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","AudioFile","Class","FileTypesManager","GetFastValue","IsPlainObject","JSONFile","MultiFile","AudioSpriteFile","Extends","initialize","loader","key","jsonURL","audioURL","audioConfig","audioXhrSettings","jsonXhrSettings","config","audio","create","data","call","resourceLoad","onFileComplete","file","files","indexOf","index","pending","type","hasOwnProperty","urls","resources","addToMultiFile","addFile","addToCache","isReadyToProcess","fileB","fileA","complete","register","game","systems","gameAudioConfig","deviceAudio","device","noAudio","webAudio","audioData","Array","isArray","i","length","multifile"]
}
