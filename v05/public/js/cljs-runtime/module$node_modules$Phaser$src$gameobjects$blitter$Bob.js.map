{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$blitter$Bob.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAoC/GC,MAAAA,CAAM,KA7BEH,OAAAI,CAAQ,4CAARA,CA6BF,EAAU,CAEhBC,WAEAF,QAAa,CAACG,OAAD,CAAUC,CAAV,CAAaC,CAAb,CAAgBC,KAAhB,CAAuBC,OAAvB,CACb,CAQI,IAAAC,OAAA,CAAcL,OASd,KAAAC,EAAA,CAASA,CAST,KAAAC,EAAA,CAASA,CAWT,KAAAC,MAAA,CAAaA,KAUb,KAAAG,KAAA,CAAY,EAUZ,KAAAC,SAAA,CAAgBH,OAWhB,KAAAI,OAAA,CAAc,CAsBd,KAAAC,MAAA,CAXA,IAAAC,MAWA,CAXa,CAAA,CA/EjB,CALgB,CA8GhBC,SAAUA,QAAS,CAACR,KAAD,CACnB,CAGQ,IAAAA,MAAA,CAFUS,IAAAA,EAAd,GAAIT,KAAJ,CAEiB,IAAAE,OAAAF,MAFjB,CAMiB,IAAAE,OAAAQ,QAAAC,IAAA,CAAwBX,KAAxB,CAGjB,OAAO,KAVX,CA/GgB,CAoIhBY,UAAWA,QAAS,EACpB,CAEI,IAAAN,MAAA,CADA,IAAAC,MACA;AADa,CAAA,CAGb,OAAO,KAJX,CArIgB,CA4JhBM,MAAOA,QAAS,CAACf,CAAD,CAAIC,CAAJ,CAAOC,KAAP,CAChB,CACI,IAAAF,EAAA,CAASA,CACT,KAAAC,EAAA,CAASA,CAGT,KAAAO,MAAA,CADA,IAAAC,MACA,CADa,CAAA,CAGb,KAAAF,OAAA,CAAc,CACd,KAAAD,SAAA,CAAgB,CAAA,CAEhB,KAAAF,OAAAY,MAAA,CAAoB,CAAA,CAEhBd,MAAJ,EAEI,IAAAQ,SAAA,CAAcR,KAAd,CAGJ,OAAO,KAjBX,CA7JgB,CA2LhBe,SAAUA,QAAS,CAACC,KAAD,CACnB,CACI,IAAAT,MAAA,CAAaS,KAEb,OAAO,KAHX,CA5LgB,CA4MhBC,SAAUA,QAAS,CAACD,KAAD,CACnB,CACI,IAAAV,MAAA,CAAaU,KAEb,OAAO,KAHX,CA7MgB,CA8NhBE,QAASA,QAAS,CAACpB,CAAD,CAAIC,CAAJ,CAClB,CACI,IAAAQ,MAAA,CAAaT,CACb,KAAAQ,MAAA,CAAaP,CAEb,OAAO,KAJX,CA/NgB,CAkPhBoB,WAAYA,QAAS,CAACH,KAAD,CACrB,CACI,IAAAf,QAAA,CAAee,KAEf,OAAO,KAHX,CAnPgB,CAsQhBI,SAAUA,QAAS,CAACJ,KAAD,CACnB,CACI,IAAAK,MAAA,CAAaL,KAEb,OAAO,KAHX,CAvQgB,CAoRhBM,QAASA,QAAS,EAClB,CACI,IAAApB,OAAAY,MAAA,CAAoB,CAAA,CAEpB;IAAAZ,OAAAqB,SAAAC,OAAA,CAA4B,IAA5B,CAIA,KAAArB,KAAA,CADA,IAAAH,MACA,CAFA,IAAAE,OAEA,CAFcO,IAAAA,EALlB,CArRgB,CAwShBR,QAAS,CAELU,IAAKA,QAAS,EACd,CACI,MAAO,KAAAP,SADX,CAHK,CAOLqB,IAAKA,QAAS,CAACT,KAAD,CACd,CACI,IAAAZ,SAAA,CAAgBY,KAChB,KAAAd,OAAAY,MAAA,CAAoB,CAAA,CAFxB,CARK,CAxSO,CAgUhBO,MAAO,CAEHV,IAAKA,QAAS,EACd,CACI,MAAO,KAAAN,OADX,CAHG,CAOHoB,IAAKA,QAAS,CAACT,KAAD,CACd,CACI,IAAAX,OAAA,CAAcW,KACd,KAAAd,OAAAY,MAAA,CAAoB,CAAA,CAFxB,CARG,CAhUS,CAAV,CAiVVtB,OAAAC,QAAA,CAAiBC,MArXkG;",
"sources":["node_modules/Phaser/src/gameobjects/blitter/Bob.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$blitter$Bob\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A Bob Game Object.\r\n *\r\n * A Bob belongs to a Blitter Game Object. The Blitter is responsible for managing and rendering this object.\r\n *\r\n * A Bob has a position, alpha value and a frame from a texture that it uses to render with. You can also toggle\r\n * the flipped and visible state of the Bob. The Frame the Bob uses to render can be changed dynamically, but it\r\n * must be a Frame within the Texture used by the parent Blitter.\r\n *\r\n * Bob positions are relative to the Blitter parent. So if you move the Blitter parent, all Bob children will\r\n * have their positions impacted by this change as well.\r\n *\r\n * You can manipulate Bob objects directly from your game code, but the creation and destruction of them should be\r\n * handled via the Blitter parent.\r\n *\r\n * @class Bob\r\n * @memberOf Phaser.GameObjects.Blitter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Blitter} blitter - The parent Blitter object is responsible for updating this Bob.\r\n * @param {number} x - The horizontal position of this Game Object in the world, relative to the parent Blitter position.\r\n * @param {number} y - The vertical position of this Game Object in the world, relative to the parent Blitter position.\r\n * @param {(string|integer)} frame - The Frame this Bob will render with, as defined in the Texture the parent Blitter is using.\r\n * @param {boolean} visible - Should the Bob render visible or not to start with?\r\n */\r\nvar Bob = new Class({\r\n\r\n    initialize:\r\n\r\n    function Bob (blitter, x, y, frame, visible)\r\n    {\r\n        /**\r\n         * The Blitter object that this Bob belongs to.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter.Bob#parent\r\n         * @type {Phaser.GameObjects.Blitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent = blitter;\r\n\r\n        /**\r\n         * The x position of this Bob, relative to the x position of the Blitter.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter.Bob#x\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.x = x;\r\n\r\n        /**\r\n         * The y position of this Bob, relative to the y position of the Blitter.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter.Bob#y\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.y = y;\r\n\r\n        /**\r\n         * The frame that the Bob uses to render with.\r\n         * To change the frame use the `Bob.setFrame` method.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter.Bob#frame\r\n         * @type {Phaser.Textures.Frame}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.frame = frame;\r\n\r\n        /**\r\n         * A blank object which can be used to store data related to this Bob in.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter.Bob#data\r\n         * @type {object}\r\n         * @default {}\r\n         * @since 3.0.0\r\n         */\r\n        this.data = {};\r\n\r\n        /**\r\n         * The visible state of this Bob.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter.Bob#_visible\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._visible = visible;\r\n\r\n        /**\r\n         * The alpha value of this Bob.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter.Bob#_alpha\r\n         * @type {number}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this._alpha = 1;\r\n\r\n        /**\r\n         * The horizontally flipped state of the Bob.\r\n         * A Bob that is flipped horizontally will render inversed on the horizontal axis.\r\n         * Flipping always takes place from the middle of the texture.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter.Bob#flipX\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.flipX = false;\r\n\r\n        /**\r\n         * The vertically flipped state of the Bob.\r\n         * A Bob that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\r\n         * Flipping always takes place from the middle of the texture.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter.Bob#flipY\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.flipY = false;\r\n    },\r\n\r\n    /**\r\n     * Changes the Texture Frame being used by this Bob.\r\n     * The frame must be part of the Texture the parent Blitter is using.\r\n     * If no value is given it will use the default frame of the Blitter parent.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter.Bob#setFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Textures.Frame)} [frame] - The frame to be used during rendering.\r\n     *\r\n     * @return {Phaser.GameObjects.Blitter.Bob} This Bob Game Object.\r\n     */\r\n    setFrame: function (frame)\r\n    {\r\n        if (frame === undefined)\r\n        {\r\n            this.frame = this.parent.frame;\r\n        }\r\n        else\r\n        {\r\n            this.frame = this.parent.texture.get(frame);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resets the horizontal and vertical flipped state of this Bob back to their default un-flipped state.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter.Bob#resetFlip\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Blitter.Bob} This Bob Game Object.\r\n     */\r\n    resetFlip: function ()\r\n    {\r\n        this.flipX = false;\r\n        this.flipY = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resets this Bob.\r\n     *\r\n     * Changes the position to the values given, and optionally changes the frame.\r\n     *\r\n     * Also resets the flipX and flipY values, sets alpha back to 1 and visible to true.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter.Bob#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n     * @param {number} y - The y position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n     * @param {(string|integer|Phaser.Textures.Frame)} [frame] - The Frame the Bob will use. It _must_ be part of the Texture the parent Blitter object is using.\r\n     *\r\n     * @return {Phaser.GameObjects.Blitter.Bob} This Bob Game Object.\r\n     */\r\n    reset: function (x, y, frame)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        this.flipX = false;\r\n        this.flipY = false;\r\n\r\n        this._alpha = 1;\r\n        this._visible = true;\r\n\r\n        this.parent.dirty = true;\r\n\r\n        if (frame)\r\n        {\r\n            this.setFrame(frame);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal flipped state of this Bob.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter.Bob#setFlipX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - The flipped state. `false` for no flip, or `true` to be flipped.\r\n     *\r\n     * @return {Phaser.GameObjects.Blitter.Bob} This Bob Game Object.\r\n     */\r\n    setFlipX: function (value)\r\n    {\r\n        this.flipX = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the vertical flipped state of this Bob.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter.Bob#setFlipY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - The flipped state. `false` for no flip, or `true` to be flipped.\r\n     *\r\n     * @return {Phaser.GameObjects.Blitter.Bob} This Bob Game Object.\r\n     */\r\n    setFlipY: function (value)\r\n    {\r\n        this.flipY = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal and vertical flipped state of this Bob.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter.Bob#setFlip\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} x - The horizontal flipped state. `false` for no flip, or `true` to be flipped.\r\n     * @param {boolean} y - The horizontal flipped state. `false` for no flip, or `true` to be flipped.\r\n     *\r\n     * @return {Phaser.GameObjects.Blitter.Bob} This Bob Game Object.\r\n     */\r\n    setFlip: function (x, y)\r\n    {\r\n        this.flipX = x;\r\n        this.flipY = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the visibility of this Bob.\r\n     * \r\n     * An invisible Bob will skip rendering.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter.Bob#setVisible\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - The visible state of the Game Object.\r\n     *\r\n     * @return {Phaser.GameObjects.Blitter.Bob} This Bob Game Object.\r\n     */\r\n    setVisible: function (value)\r\n    {\r\n        this.visible = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the Alpha level of this Bob. The alpha controls the opacity of the Game Object as it renders.\r\n     * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\r\n     * \r\n     * A Bob with alpha 0 will skip rendering.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter.Bob#setAlpha\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The alpha value used for this Bob. Between 0 and 1.\r\n     *\r\n     * @return {Phaser.GameObjects.Blitter.Bob} This Bob Game Object.\r\n     */\r\n    setAlpha: function (value)\r\n    {\r\n        this.alpha = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Bob instance.\r\n     * Removes itself from the Blitter and clears the parent, frame and data properties.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter.Bob#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.parent.dirty = true;\r\n\r\n        this.parent.children.remove(this);\r\n\r\n        this.parent = undefined;\r\n        this.frame = undefined;\r\n        this.data = undefined;\r\n    },\r\n\r\n    /**\r\n     * The visible state of the Bob.\r\n     * \r\n     * An invisible Bob will skip rendering.\r\n     *\r\n     * @name Phaser.GameObjects.Blitter.Bob#visible\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\r\n    visible: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._visible;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._visible = value;\r\n            this.parent.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The alpha value of the Bob, between 0 and 1.\r\n     * \r\n     * A Bob with alpha 0 will skip rendering.\r\n     *\r\n     * @name Phaser.GameObjects.Blitter.Bob#alpha\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    alpha: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._alpha;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._alpha = value;\r\n            this.parent.dirty = true;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Bob;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Bob","Class","initialize","blitter","x","y","frame","visible","parent","data","_visible","_alpha","flipY","flipX","setFrame","undefined","texture","get","resetFlip","reset","dirty","setFlipX","value","setFlipY","setFlip","setVisible","setAlpha","alpha","destroy","children","remove","set"]
}
