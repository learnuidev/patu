{
"version":3,
"file":"module$node_modules$Phaser$src$renderer$webgl$shaders$ForwardDiffuse_frag.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,0EAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACtID,MAAAC,QAAA,CAkDI,irDAnDkI;",
"sources":["node_modules/Phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$renderer$webgl$shaders$ForwardDiffuse_frag\"] = function(global,require,module,exports) {\nmodule.exports = [\n    '#define SHADER_NAME PHASER_FORWARD_DIFFUSE_FS',\n    '',\n    'precision mediump float;',\n    '',\n    'struct Light',\n    '{',\n    '    vec2 position;',\n    '    vec3 color;',\n    '    float intensity;',\n    '    float radius;',\n    '};',\n    '',\n    'const int kMaxLights = %LIGHT_COUNT%;',\n    '',\n    'uniform vec4 uCamera; /* x, y, rotation, zoom */',\n    'uniform vec2 uResolution;',\n    'uniform sampler2D uMainSampler;',\n    'uniform sampler2D uNormSampler;',\n    'uniform vec3 uAmbientLightColor;',\n    'uniform Light uLights[kMaxLights];',\n    '',\n    'varying vec2 outTexCoord;',\n    'varying vec4 outTint;',\n    '',\n    'void main()',\n    '{',\n    '    vec3 finalColor = vec3(0.0, 0.0, 0.0);',\n    '    vec4 color = texture2D(uMainSampler, outTexCoord) * vec4(outTint.rgb * outTint.a, outTint.a);',\n    '    vec3 normalMap = texture2D(uNormSampler, outTexCoord).rgb;',\n    '    vec3 normal = normalize(vec3(normalMap * 2.0 - 1.0));',\n    '    vec2 res = vec2(min(uResolution.x, uResolution.y)) * uCamera.w;',\n    '',\n    '    for (int index = 0; index < kMaxLights; ++index)',\n    '    {',\n    '        Light light = uLights[index];',\n    '        vec3 lightDir = vec3((light.position.xy / res) - (gl_FragCoord.xy / res), 0.1);',\n    '        vec3 lightNormal = normalize(lightDir);',\n    '        float distToSurf = length(lightDir) * uCamera.w;',\n    '        float diffuseFactor = max(dot(normal, lightNormal), 0.0);',\n    '        float radius = (light.radius / res.x * uCamera.w) * uCamera.w;',\n    '        float attenuation = clamp(1.0 - distToSurf * distToSurf / (radius * radius), 0.0, 1.0);',\n    '        vec3 diffuse = light.color * diffuseFactor;',\n    '        finalColor += (attenuation * diffuse) * light.intensity;',\n    '    }',\n    '',\n    '    vec4 colorOutput = vec4(uAmbientLightColor + finalColor, 1.0);',\n    '    gl_FragColor = color * vec4(colorOutput.rgb * colorOutput.a, colorOutput.a);',\n    '',\n    '}',\n    ''\n].join('\\n');\n\n};"],
"names":["shadow$provide","global","require","module","exports"]
}
