{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$Tileset.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/Phaser/src/tilemaps/Tileset.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$Tileset\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A Tileset is a combination of an image containing the tiles and a container for data about\r\n * each tile.\r\n *\r\n * @class Tileset\r\n * @memberOf Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tileset in the map data.\r\n * @param {integer} firstgid - The first tile index this tileset contains.\r\n * @param {integer} [tileWidth=32] - Width of each tile (in pixels).\r\n * @param {integer} [tileHeight=32] - Height of each tile (in pixels).\r\n * @param {integer} [tileMargin=0] - The margin around all tiles in the sheet (in pixels).\r\n * @param {integer} [tileSpacing=0] - The spacing between each tile in the sheet (in pixels).\r\n * @param {object} [tileProperties={}] - Custom properties defined per tile in the Tileset.\r\n * These typically are custom properties created in Tiled when editing a tileset.\r\n * @param {object} [tileData={}] - Data stored per tile. These typically are created in Tiled\r\n * when editing a tileset, e.g. from Tiled's tile collision editor or terrain editor.\r\n */\r\nvar Tileset = new Class({\r\n\r\n    initialize:\r\n\r\n    function Tileset (name, firstgid, tileWidth, tileHeight, tileMargin, tileSpacing, tileProperties, tileData)\r\n    {\r\n        if (tileWidth === undefined || tileWidth <= 0) { tileWidth = 32; }\r\n        if (tileHeight === undefined || tileHeight <= 0) { tileHeight = 32; }\r\n        if (tileMargin === undefined) { tileMargin = 0; }\r\n        if (tileSpacing === undefined) { tileSpacing = 0; }\r\n        if (tileProperties === undefined) { tileProperties = {}; }\r\n        if (tileData === undefined) { tileData = {}; }\r\n\r\n        /**\r\n         * The name of the Tileset.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#name\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.name = name;\r\n\r\n        /**\r\n         * The starting index of the first tile index this Tileset contains.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#firstgid\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.firstgid = firstgid;\r\n\r\n        /**\r\n         * The width of each tile (in pixels). Use setTileSize to change.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#tileWidth\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.tileWidth = tileWidth;\r\n\r\n        /**\r\n         * The height of each tile (in pixels). Use setTileSize to change.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#tileHeight\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.tileHeight = tileHeight;\r\n\r\n        /**\r\n         * The margin around the tiles in the sheet (in pixels). Use `setSpacing` to change.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#tileMargin\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.tileMargin = tileMargin;\r\n\r\n        /**\r\n         * The spacing between each the tile in the sheet (in pixels). Use `setSpacing` to change.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#tileSpacing\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.tileSpacing = tileSpacing;\r\n\r\n        /**\r\n         * Tileset-specific properties per tile that are typically defined in the Tiled editor in the\r\n         * Tileset editor.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#tileProperties\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileProperties = tileProperties;\r\n\r\n        /**\r\n         * Tileset-specific data per tile that are typically defined in the Tiled editor, e.g. within\r\n         * the Tileset collision editor. This is where collision objects and terrain are stored.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#tileData\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileData = tileData;\r\n\r\n        /**\r\n         * The cached image that contains the individual tiles. Use setImage to set.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#image\r\n         * @type {?Phaser.Textures.Texture}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.image = null;\r\n\r\n        /**\r\n         * The gl texture used by the WebGL renderer.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#glTexture\r\n         * @type {?WebGLTexture}\r\n         * @readOnly\r\n         * @since 3.11.0\r\n         */\r\n        this.glTexture = null;\r\n\r\n        /**\r\n         * The number of tile rows in the the tileset.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#rows\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.rows = 0;\r\n\r\n        /**\r\n         * The number of tile columns in the tileset.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#columns\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.columns = 0;\r\n\r\n        /**\r\n         * The total number of tiles in the tileset.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#total\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.total = 0;\r\n\r\n        /**\r\n         * The look-up table to specific tile image texture coordinates (UV in pixels). Each element\r\n         * contains the coordinates for a tile in an object of the form {x, y}.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#texCoordinates\r\n         * @type {object[]}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n        */\r\n        this.texCoordinates = [];\r\n    },\r\n\r\n    /**\r\n     * Get a tiles properties that are stored in the Tileset. Returns null if tile index is not\r\n     * contained in this Tileset. This is typically defined in Tiled under the Tileset editor.\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#getTileProperties\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n     *\r\n     * @return {?(object|undefined)}\r\n     */\r\n    getTileProperties: function (tileIndex)\r\n    {\r\n        if (!this.containsTileIndex(tileIndex)) { return null; }\r\n\r\n        return this.tileProperties[tileIndex - this.firstgid];\r\n    },\r\n\r\n    /**\r\n     * Get a tile's data that is stored in the Tileset. Returns null if tile index is not contained\r\n     * in this Tileset. This is typically defined in Tiled and will contain both Tileset collision\r\n     * info and terrain mapping.\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#getTileData\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n     *\r\n     * @return {?object|undefined}\r\n     */\r\n    getTileData: function (tileIndex)\r\n    {\r\n        if (!this.containsTileIndex(tileIndex)) { return null; }\r\n\r\n        return this.tileData[tileIndex - this.firstgid];\r\n    },\r\n\r\n    /**\r\n     * Get a tile's collision group that is stored in the Tileset. Returns null if tile index is not\r\n     * contained in this Tileset. This is typically defined within Tiled's tileset collision editor.\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#getTileCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n     *\r\n     * @return {?object}\r\n     */\r\n    getTileCollisionGroup: function (tileIndex)\r\n    {\r\n        var data = this.getTileData(tileIndex);\r\n\r\n        return (data && data.objectgroup) ? data.objectgroup : null;\r\n    },\r\n\r\n    /**\r\n     * Returns true if and only if this Tileset contains the given tile index.\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#containsTileIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    containsTileIndex: function (tileIndex)\r\n    {\r\n        return (\r\n            tileIndex >= this.firstgid &&\r\n            tileIndex < (this.firstgid + this.total)\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Returns the texture coordinates (UV in pixels) in the Tileset image for the given tile index.\r\n     * Returns null if tile index is not contained in this Tileset.\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#getTileTextureCoordinates\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n     *\r\n     * @return {?object} Object in the form { x, y } representing the top-left UV coordinate\r\n     * within the Tileset image.\r\n     */\r\n    getTileTextureCoordinates: function (tileIndex)\r\n    {\r\n        if (!this.containsTileIndex(tileIndex)) { return null; }\r\n\r\n        return this.texCoordinates[tileIndex - this.firstgid];\r\n    },\r\n\r\n    /**\r\n     * Sets the image associated with this Tileset and updates the tile data (rows, columns, etc.).\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#setImage\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Textures.Texture} texture - The image that contains the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n     */\r\n    setImage: function (texture)\r\n    {\r\n        this.image = texture;\r\n\r\n        this.glTexture = texture.get().source.glTexture;\r\n\r\n        this.updateTileData(this.image.source[0].width, this.image.source[0].height);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the tile width & height and updates the tile data (rows, columns, etc.).\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#setTileSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileWidth] - The width of a tile in pixels.\r\n     * @param {integer} [tileHeight] - The height of a tile in pixels.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n     */\r\n    setTileSize: function (tileWidth, tileHeight)\r\n    {\r\n        if (tileWidth !== undefined) { this.tileWidth = tileWidth; }\r\n        if (tileHeight !== undefined) { this.tileHeight = tileHeight; }\r\n\r\n        if (this.image)\r\n        {\r\n            this.updateTileData(this.image.source[0].width, this.image.source[0].height);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the tile margin & spacing and updates the tile data (rows, columns, etc.).\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#setSpacing\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [margin] - The margin around the tiles in the sheet (in pixels).\r\n     * @param {integer} [spacing] - The spacing between the tiles in the sheet (in pixels).\r\n     *\r\n     * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n     */\r\n    setSpacing: function (margin, spacing)\r\n    {\r\n        if (margin !== undefined) { this.tileMargin = margin; }\r\n        if (spacing !== undefined) { this.tileSpacing = spacing; }\r\n\r\n        if (this.image)\r\n        {\r\n            this.updateTileData(this.image.source[0].width, this.image.source[0].height);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Updates tile texture coordinates and tileset data.\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#updateTileData\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} imageWidth - The (expected) width of the image to slice.\r\n     * @param {integer} imageHeight - The (expected) height of the image to slice.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n     */\r\n    updateTileData: function (imageWidth, imageHeight)\r\n    {\r\n        var rowCount = (imageHeight - this.tileMargin * 2 + this.tileSpacing) / (this.tileHeight + this.tileSpacing);\r\n        var colCount = (imageWidth - this.tileMargin * 2 + this.tileSpacing) / (this.tileWidth + this.tileSpacing);\r\n\r\n        if (rowCount % 1 !== 0 || colCount % 1 !== 0)\r\n        {\r\n            console.warn('Image tile area not tile size multiple in: ' + this.name);\r\n        }\r\n\r\n        // In Tiled a tileset image that is not an even multiple of the tile dimensions is truncated\r\n        // - hence the floor when calculating the rows/columns.\r\n        rowCount = Math.floor(rowCount);\r\n        colCount = Math.floor(colCount);\r\n\r\n        this.rows = rowCount;\r\n        this.columns = colCount;\r\n\r\n        // In Tiled, \"empty\" spaces in a tileset count as tiles and hence count towards the gid\r\n        this.total = rowCount * colCount;\r\n\r\n        this.texCoordinates.length = 0;\r\n\r\n        var tx = this.tileMargin;\r\n        var ty = this.tileMargin;\r\n\r\n        for (var y = 0; y < this.rows; y++)\r\n        {\r\n            for (var x = 0; x < this.columns; x++)\r\n            {\r\n                this.texCoordinates.push({ x: tx, y: ty });\r\n                tx += this.tileWidth + this.tileSpacing;\r\n            }\r\n\r\n            tx = this.tileMargin;\r\n            ty += this.tileHeight + this.tileSpacing;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Tileset;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Tileset","Class","initialize","name","firstgid","tileWidth","tileHeight","tileMargin","tileSpacing","tileProperties","tileData","undefined","glTexture","image","total","columns","rows","texCoordinates","getTileProperties","tileIndex","containsTileIndex","getTileData","getTileCollisionGroup","data","objectgroup","getTileTextureCoordinates","setImage","texture","get","source","updateTileData","width","height","setTileSize","setSpacing","margin","spacing","imageWidth","imageHeight","rowCount","colCount","console","warn","Math","floor","length","ty","tx","y","x","push"]
}
