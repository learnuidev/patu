{"version":3,"sources":["posh/plugin_base.cljc"],"mappings":"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","names":["posh.plugin-base/missing-pull-result","dcfg","pull-expr","cljs.core/some","posh.plugin-base/safe-pull","db","query","id","cljs.core/integer?","fexpr__47569","cljs.core/vector?","temp__5733__auto__","eid","fexpr__47573","fexpr__47574","posh.plugin-base/set-conn-listener!","posh-atom","conn","db-id","posh-vars","G__47578","G__47579","G__47580","fexpr__47577","var","cljs.core/Keyword","cljs.core.get","cljs.core/add-watch","_","old-state","new-state","cljs.core.not_EQ_","cljs.core.swap_BANG_","cljs.core/assoc-in","G__47583","G__47584","G__47585","fexpr__47582","tx-report","map__47586","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","ratoms","changed","posh.core/after-transact","seq__47588","cljs.core/seq","chunk__47589","count__47590","i__47591","vec__47602","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__47606","cljs.core/first","cljs.core/next","k","v","cljs.core/reset!","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","posh.plugin-base/posh!","seq47609","G__47610","self__4723__auto__","conns","cljs.core.atom","n","posh-tree","posh.core/empty-tree","cljs.core.assoc","cljs.core/empty?","cljs.core/rest","cljs.core.keyword","posh.core.add_db","cljs.core/deref","posh.plugin-base/get-conn-var","fexpr__47611","cljs.core/meta","posh.plugin-base/get-posh-atom","poshdb-or-conn","fexpr__47612","posh.stateful/get-posh-atom","posh.plugin-base/get-db","fexpr__47613","cljs.core/with-meta","posh.plugin-base/rm-posh-item","storage-key","posh-atom-val","posh.core/remove-item","cljs.core.dissoc","G__47615","posh.plugin-base/make-query-reaction","js/Error","add-query-fn","options","r","cljs.core.get_in","posh-atom-with-query","query-result","query-ratom","or__4126__auto__","fexpr__47616","query-reaction","G__47618","G__47619","G__47620","fexpr__47617","cljs.core._EQ_","posh.plugin_base.make_query_reaction","G__47623","posh.plugin-base/pull","poshdb","pull-pattern","true-poshdb","p1__47621#","posh.core/add-pull","posh.plugin_base.pull","posh.plugin-base/pull-info","posh.lib.update/update-pull","G__47626","posh.plugin-base/pull-many","eids","p1__47624#","posh.core/add-pull-many","posh.plugin_base.pull_many","posh.plugin-base/pull-tx","tx-patterns","cljs.core.println","posh.plugin-base/parse-q-query","cljs.core.reduce","p__47627","vec__47628","parsed-query","last-key","query-item","cljs.core.update","cljs.core/conj","posh.plugin-base/q-args-count","in-clause","posh.plugin-base/q","seq47634","G__47635","G__47636","args","vec__47637","n-query-args","cljs.core/butlast","cljs.core/last","true-poshdb-args","p1__47631#","cljs.core.map","fexpr__47640","cljs.core.remove","cljs.core/nil?","p1__47632#","p1__47633#","cljs.core.partial","posh.core/add-q","posh.plugin-base/q-info","seq47643","G__47644","G__47645","p1__47641#","fexpr__47646","p1__47642#","posh.lib.update/update-q","posh.plugin-base/q-tx","seq47647","G__47648","G__47649","G__47650","posh.plugin-base/filter-tx","posh.stateful/add-filter-tx","posh.plugin-base/filter-pull","posh.stateful/add-filter-pull","posh.plugin-base/filter-q","seq47652","G__47653","G__47654","p1__47651#","fexpr__47655","posh.stateful/add-filter-q","posh.plugin-base/transact!","txs","G__47657","G__47658","fexpr__47656","fexpr__47659","posh.stateful/poshdb->conn"],"sourcesContent":["(ns posh.plugin-base\n  (:require [posh.core :as p]\n            [posh.stateful :as ps]\n            [posh.lib.db :as db]\n            [posh.lib.update :as u]))\n\n(defn missing-pull-result\n  [dcfg pull-expr]\n  (when (some #{:db/id} pull-expr)\n    {:db/id nil}))\n\n(defn safe-pull\n  [dcfg db query id]\n  (cond\n    (integer? id)\n    ((:pull* dcfg) db query id)\n    (vector? id)\n    (if-let [eid ((:entid dcfg) db id)]\n      ((:pull* dcfg) db query eid)\n      (missing-pull-result dcfg query))\n    (nil? id)\n    (missing-pull-result dcfg query)))\n\n;; need to set last-tx-t in conn so that it doesn't try the same tx twice\n(defn set-conn-listener! [dcfg posh-atom conn db-id]\n  (let [posh-vars {:posh-atom posh-atom\n                   :db-id db-id}]\n    (do\n      ((:listen! dcfg) conn :posh-dispenser\n        (fn [var]\n          (when (keyword? var)\n            (get posh-vars var))))\n      (add-watch conn :posh-schema-listener\n        (fn [_ _ old-state new-state]\n          (when (not= (:schema old-state) (:schema new-state))\n            (swap! posh-atom assoc-in [:schema db-id] (:schema new-state)))))\n            ;; Update posh conn\n      ((:listen! dcfg) conn :posh-listener\n        (fn [tx-report]\n          ;;(println \"CHANGED: \" (keys (:changed (p/after-transact @posh-atom {conn tx-report}))))\n          (let [{:keys [ratoms changed]}\n                (swap! posh-atom p/after-transact {conn tx-report})]\n            (doseq [[k v] changed]\n              (reset! (get ratoms k) (:results v))))))\n      conn)))\n\n(defn posh! [dcfg & conns]\n  (let [posh-atom (atom {})]\n    (reset! posh-atom\n            (loop [n 0\n                   conns conns\n                   posh-tree (-> (p/empty-tree dcfg [:results])\n                                 (assoc :ratoms {}\n                                        :reactions {}))]\n              (if (empty? conns)\n                posh-tree\n                (recur (inc n)\n                       (rest conns)\n                       (let [db-id (keyword (str \"conn\" n))]\n                         (p/add-db posh-tree\n                                   db-id\n                                   (set-conn-listener! dcfg posh-atom (first conns) db-id)\n                                   (:schema @(first conns))))))))))\n\n\n;; Posh's state atoms are stored inside a listener in the meta data of\n;; the datascript conn\n(defn get-conn-var [dcfg conn var]\n  ((:posh-dispenser @(:listeners (meta conn))) var))\n\n(defn get-posh-atom [dcfg poshdb-or-conn]\n  (if ((:conn? dcfg) poshdb-or-conn)\n    (get-conn-var dcfg poshdb-or-conn :posh-atom)\n    (ps/get-posh-atom poshdb-or-conn)))\n\n(defn get-db [dcfg poshdb-or-conn]\n  (if ((:conn? dcfg) poshdb-or-conn)\n    (with-meta\n      [:db (get-conn-var dcfg poshdb-or-conn :db-id)]\n      {:posh (get-conn-var dcfg poshdb-or-conn :posh-atom)})\n    poshdb-or-conn))\n\n(defn rm-posh-item [dcfg posh-atom storage-key]\n  (swap! posh-atom\n         (fn [posh-atom-val]\n           (assoc (p/remove-item posh-atom-val storage-key)\n             :ratoms (dissoc (:ratoms posh-atom-val) storage-key)\n             :reactions (dissoc (:reactions posh-atom-val) storage-key)))))\n\n(defn make-query-reaction\n  ([dcfg posh-atom storage-key add-query-fn options]\n   (if-let [r (get-in @posh-atom [:reactions storage-key])]\n     r\n     (->\n      (swap!\n       posh-atom\n       (fn [posh-atom-val]\n         (let [posh-atom-with-query (add-query-fn posh-atom-val)\n               query-result         (:results (get (:cache posh-atom-with-query) storage-key))\n               query-ratom          (or (get (:ratoms posh-atom-with-query) storage-key)\n                                        ((:ratom dcfg) query-result))\n               query-reaction       ((:make-reaction dcfg)\n                                     (fn []\n                                       ;;(println \"RENDERING: \" storage-key)\n                                       @query-ratom)\n                                     :on-dispose\n                                     (fn [_ _]\n                                       ;;(println \"no DISPOSING: \" storage-key)\n                                       (when-not (= (:cache options) :forever)\n                                         (swap! posh-atom\n                                                (fn [posh-atom-val]\n                                                  (assoc (p/remove-item posh-atom-val storage-key)\n                                                         :ratoms (dissoc (:ratoms posh-atom-val) storage-key)\n                                                         :reactions (dissoc (:reactions posh-atom-val) storage-key)))))))]\n           (assoc posh-atom-with-query\n                  :ratoms (assoc (:ratoms posh-atom-with-query) storage-key query-ratom)\n                  :reactions (assoc (:reactions posh-atom-with-query) storage-key query-reaction)))))\n      :reactions\n      (get storage-key))))\n  ([dcfg posh-atom storage-key add-query-fn]\n   (make-query-reaction dcfg posh-atom storage-key add-query-fn {})))\n\n(defn pull\n  \"Returns a reaction of a pull expression. The options argument may specify `:cache :forever`, which keeps query results\n  cached indefinitely, even if the reaction is disposed.\"\n  ([dcfg poshdb pull-pattern eid options]\n   (let [true-poshdb (get-db dcfg poshdb)\n         storage-key [:pull true-poshdb pull-pattern eid]\n         posh-atom   (get-posh-atom dcfg poshdb)]\n     (make-query-reaction dcfg\n                          posh-atom\n                          storage-key\n                          #(p/add-pull % true-poshdb pull-pattern eid)\n                          options)))\n  ([dcfg poshdb pull-pattern eid]\n   (pull dcfg poshdb pull-pattern eid {})))\n\n(defn pull-info [dcfg poshdb pull-pattern eid]\n  (let [true-poshdb (get-db dcfg poshdb)\n        storage-key [:pull true-poshdb pull-pattern eid]\n        posh-atom   (get-posh-atom dcfg poshdb)]\n    (dissoc\n     (u/update-pull @posh-atom storage-key)\n     :reload-fn)))\n\n(defn pull-many\n  ([dcfg poshdb pull-pattern eids options]\n   (let [true-poshdb (get-db dcfg poshdb)\n         storage-key [:pull-many true-poshdb pull-pattern eids]\n         posh-atom   (get-posh-atom dcfg poshdb)]\n     (make-query-reaction dcfg\n                          posh-atom\n                          storage-key\n                          #(p/add-pull-many % true-poshdb pull-pattern eids)\n                          options)))\n  ([dcfg poshdb pull-pattern eids]\n   (pull-many dcfg poshdb pull-pattern eids {})))\n\n(defn pull-tx [dcfg tx-patterns poshdb pull-pattern eid]\n  (println \"pull-tx is deprecated. Calling pull without your tx-patterns.\")\n  (pull dcfg poshdb pull-pattern eid))\n\n;;; q needs to find the posh-atom, go through args and convert any\n;;; conn's to true-poshdb's, generate the storage-key with true dbs\n\n(defn parse-q-query\n  [dcfg query]\n  (first\n    (reduce\n      (fn [[parsed-query last-key] query-item]\n        (if (keyword? query-item)\n          [(assoc parsed-query query-item [])\n           query-item]\n          (do\n            (assert last-key)\n            [(update parsed-query last-key conj query-item)\n             last-key])))\n      [{} nil]\n      query)))\n\n(defn q-args-count\n  ;; Really should be conforming to a spec for this... :-/\n  [dcfg query]\n  (let [parsed-query (parse-q-query dcfg query)]\n    (if-let [in-clause (:in parsed-query)]\n      (count in-clause)\n      1)))\n\n(defn q\n  \"Returns a datalog query reaction. If args count doens't match the query's input count, a final options map argument\n  is accepted. This options map may specify `:cache :forever`, which keeps query results cached even if the reaction is\n  disposed.\"\n  [dcfg query & args]\n  (let [n-query-args     (q-args-count dcfg query)\n        [args options]   (cond\n                           (= n-query-args (count args))\n                           [args {}]\n                           (= (inc n-query-args) (count args))\n                           [(butlast args) (last args)]\n                           :else\n                           (throw \"Incorrect number of args passed to posh query\"))\n        true-poshdb-args (map #(if ((:conn? dcfg) %) (get-db dcfg %) %) args)\n        posh-atom        (first (remove nil? (map #(get-posh-atom dcfg %) args)))\n        storage-key      [:q query true-poshdb-args]]\n    (make-query-reaction dcfg\n                         posh-atom\n                         storage-key\n                         #(apply (partial p/add-q % query) true-poshdb-args)\n                         options)))\n\n(defn q-info [dcfg query & args]\n  (let [true-poshdb-args (map #(if ((:conn? dcfg) %) (get-db dcfg %) %) args)\n        posh-atom        (first (remove nil? (map #(get-posh-atom dcfg %) args)))\n        storage-key      [:q query true-poshdb-args]]\n    (dissoc\n     (u/update-q @posh-atom storage-key)\n     :reload-fn)))\n\n(defn q-tx [dcfg tx-patterns query & args]\n  (println \"q-tx is deprecated. Calling q without your tx-patterns.\")\n  (apply q dcfg query args))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn filter-tx [dcfg poshdb tx-patterns]\n  (ps/add-filter-tx (get-db dcfg poshdb) tx-patterns))\n\n(defn filter-pull [dcfg poshdb pull-pattern eid]\n  (ps/add-filter-pull (get-db dcfg poshdb) pull-pattern eid))\n\n(defn filter-q [dcfg query & args]\n  (let [true-poshdb-args (map #(if ((:conn? dcfg) %) (get-db dcfg %) %) args)]\n    (apply ps/add-filter-q query true-poshdb-args)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn transact! [dcfg poshdb-or-conn txs]\n  ((:transact! dcfg)\n   (if ((:conn? dcfg) poshdb-or-conn)\n     poshdb-or-conn\n     (ps/poshdb->conn poshdb-or-conn))\n   txs))\n\n#?(:clj\n(defmacro add-plugin [dcfg]\n  `(do (def ~'missing-pull-result (partial posh.plugin-base/missing-pull-result ~dcfg))\n       (def ~'safe-pull           (partial posh.plugin-base/safe-pull           ~dcfg))\n       (def ~'set-conn-listener!  (partial posh.plugin-base/set-conn-listener!  ~dcfg))\n       (def ~'posh!               (partial posh.plugin-base/posh!               ~dcfg))\n       (def ~'get-conn-var        (partial posh.plugin-base/get-conn-var        ~dcfg))\n       (def ~'get-posh-atom       (partial posh.plugin-base/get-posh-atom       ~dcfg))\n       (def ~'get-db              (partial posh.plugin-base/get-db              ~dcfg))\n       (def ~'rm-posh-item        (partial posh.plugin-base/rm-posh-item        ~dcfg))\n       (def ~'make-query-reaction (partial posh.plugin-base/make-query-reaction ~dcfg))\n       (def ~'pull                (partial posh.plugin-base/pull                ~dcfg))\n       (def ~'pull-info           (partial posh.plugin-base/pull-info           ~dcfg))\n       (def ~'pull-tx             (partial posh.plugin-base/pull-tx             ~dcfg))\n       (def ~'pull-many           (partial posh.plugin-base/pull-many           ~dcfg))\n       (def ~'parse-q-query       (partial posh.plugin-base/parse-q-query       ~dcfg))\n       (def ~'q-args-count        (partial posh.plugin-base/q-args-count        ~dcfg))\n       (def ~'q                   (partial posh.plugin-base/q                   ~dcfg))\n       (def ~'q-info              (partial posh.plugin-base/q-info              ~dcfg))\n       (def ~'q-tx                (partial posh.plugin-base/q-tx                ~dcfg))\n\n       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n       (def ~'filter-tx           (partial posh.plugin-base/filter-tx           ~dcfg))\n       (def ~'filter-pull         (partial posh.plugin-base/filter-pull         ~dcfg))\n       (def ~'filter-q            (partial posh.plugin-base/filter-q            ~dcfg))\n\n       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n       (def ~'transact!           (partial posh.plugin-base/transact!           ~dcfg)))))\n"]}