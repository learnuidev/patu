{"version":3,"sources":["app/patu/core.cljs"],"mappings":"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","names":["p__32170","vec__32171","cljs.core.nth","app.patu.core/vec2","val","val2","app.patu.lib.vec2","cljs.core/deref","app.patu.state/game-state","or__4126__auto__","var_args","G__32175","app.patu.core/rgb","js/Error","r","g","b","app.patu.core.rgb","a","app.patu.core/rgba","app.patu.core/rand-seed","app.patu.core/make-rng","app.patu.core/choose","coll","app.patu.core/chance","num","app.patu.core/lerp","frm","to","t","app.patu.core/kmap","v","l1","h1","l2","h2","app.patu.core/kaboom","config","js/module$kaboom$v05.default","cljs.core/clj->js","G__32177","app.patu.core/init","app.patu.core.init","props","cljs.core.swap_BANG_","cljs.core/assoc","app.patu.core/dt","app.patu.core/height","app.patu.core/width","G__32179","app.patu.core/mouse-pos","layer","cljs.core/name","app.patu.core/screenshot","G__32181","app.patu.core/sprite","game","title","opts","app.patu.core/sprite!","app.patu.core.sprite","app.patu.core/solid","app.patu.core/solid!","app.patu.core/scale","value","app.patu.core/layers","layers","main-layer","app.patu.core/add-level","map","app.patu.core/add-level-obj","id","obj","cljs.core/assoc-in","app.patu.core/add-level!","m","level-id","map__32182","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","levels","handler","G__32185","app.patu.core/go","app.patu.lib.go","app.patu.core/scene","p__32186","map__32187","app.patu.core/reg-scene","init","evt","state","G__32189","app.patu.core/dispatch-n","G__32190","app.patu.core/start!","scene-id","app.patu.core/start","app.patu.core/respawn","comp","app.patu.core/gravity","app.patu.core/gravity!","app.patu.core/randd","v1","v2","app.patu.lib/randd","app.patu.core/cam-ignore","app.patu.core/cam-ignore!","app.patu.core/add","comps","app.patu.core/get-component!","cljs.core.get_in","app.patu.core/get-tag","temp__5735__auto__","tag","app.patu.core/get-component","app.patu.core/get-level","js/app","js/app.patu","js/app.patu.core","js/app.patu.core.create-component","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__32191","cljs.core/MultiFn","cljs.core.symbol","app.patu.core/create-component","_","type","p__32192","vec__32193","p__32196","vec__32197","x","y","cljs.core/vector?","p__32200","vec__32201","p__32204","vec__32205","p__32208","vec__32209","p__32212","vec__32213","p__32216","vec__32217","value-b","p__32220","vec__32221","value2","p__32224","vec__32225","cljs.core/Keyword","p__32228","vec__32229","p__32232","vec__32233","x1","y1","x2","y2","app.patu.core/create-components","iter__4529__auto__","s__32237","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__32239","cljs.core/chunk-buffer","i__32238","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32236","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","prop","app.patu.core/create-components!","app.patu.core/add-component","app.patu.core/add-component!","app.patu.core/reg-component","app.patu.core/destroy!","app.patu.core/destroy","app.patu.core/center","app.patu.core/set-layers","p__32240","map__32241","app.patu.core/format-for-level","width","height","any","pos","components","input","cljs.core.merge","cljs.core.reduce","p__32243","vec__32244","seq__32245","first__32246","cljs.core/next","primes","cljs.core.assoc","app.patu.core/reg-level!","app.patu.core/reg-level","data-handler","js/app.patu.core.dispatch","fexpr__32247","app.patu.core/dispatch","args","p__32248","vec__32249","p__32252","vec__32253","p__32256","vec__32257","main-map","mid","p__32260","vec__32261","main-bg","p__32264","vec__32265","backgrounds","p__32268","vec__32269","p__32272","vec__32273","seq__32274","first__32275","seq__32276","chunk__32277","count__32278","i__32279","vec__32286","c__4556__auto__","cljs.core/chunk-first","vec__32289","app.patu.core/action-handler","G__32292","app.patu.cam/follow","p__32293","vec__32294","seq__32295","first__32296","app.patu.core/on-handler","key","G__32297","seq__32298","chunk__32299","count__32300","i__32301","app.patu.components/cis","fexpr__32304","fexpr__32305","cljs.core/second","app.patu.components/on","p__32306","vec__32307","vec__32310","seq__32311","first__32312","seq__32313","chunk__32314","count__32315","i__32316","vec__32325","vec__32329","method","res","G__32328","G__32332","p__32333","vec__32334","app.patu.events/key-down","p__32337","vec__32338","app.patu.events/key-press","p__32341","vec__32342","app.patu.events/key-press-rep","p__32345","vec__32346","app.patu.events/key-release","p__32349","vec__32350","p__32353","vec__32354","p__32357","vec__32358","p__32361","vec__32362","app.patu.core/key-down?","app.patu.events/key-down?","app.patu.core/key-pressed?","k","app.patu.core/key-pressed-rep?","app.patu.core/key-released?","app.patu.core/mouse-clicked?","app.patu.core/mouse-down?","app.patu.core/mouse-released?","p__32365","vec__32366","p__32369","vec__32370","p__32373","vec__32374","vec__32377","target","p__32380","vec__32381","vec__32384","p__32388","vec__32389","vec__32392","p1__32387#","p__32395","vec__32396","func","p__32399","vec__32400","p__32403","vec__32404","tune","p__32407","vec__32408","nodes","p__32411","vec__32412","seq__32413","first__32414","nodes-coll","seq__32415","chunk__32416","count__32417","i__32418","vals","seq__32419","chunk__32420","count__32421","i__32422","p__32423","vec__32424","app.patu.core/quad!","c","d","app.patu.core/quad","app.patu.core/neg","app.patu.core/call","fexpr__32427","goog.object/get","app.patu.core/play","anim-id","cljs.core/object?","e32428","err","js/console.warn","app.patu.core/sleep","f","ms","js/setTimeout","p__32429","vec__32430","app.patu.core/change-sprite","sid","aid","anim-speed","G__32434","app.patu.core/change-sprite-and-destroy","app.patu.core.change_sprite_and_destroy","G__32436","app.patu.core/play-anims-and-destroy","anims","app.patu.core.play_anims_and_destroy","timer","vec__32437","anim","cljs.core/not"],"sourcesContent":["(ns app.patu.core\n  (:require [app.patu.components :as c :refer [cis action]]\n            [app.patu.utils :refer [js-get]]\n            [app.patu.lib :as lib]\n            [app.patu.events :as evt]\n            [goog.object :as obj]\n            [app.patu.cam :as cam]\n            [app.patu.state :refer [game-state]]\n            [\"/kaboom/v05.js\" :default kaboom05]\n            [\"/kaboom/v06.js\" :default kaboom06]))\n\n;; === ***math** ===\n(defn vec2\n  [[val val2]]\n  (lib/vec2 (:game @game-state) val (or val2 val)))\n\n(defn rgb\n  ([r g b] (rgb r g b 1))\n  ([r g b a]\n   (.rgb (:game @game-state) r g b a)))\n\n(defn rgba [r g b a]\n  (.rgba (:game @game-state) r g b a))\n\n(defn rand-seed [val]\n  (.randSeed (:game @game-state) val))\n\n(defn make-rng\n  \"create a seedable random number generator\n  usage: (make-rng (js/Date.now))\n  \"\n  [val]\n  (.makeRng (:game @game-state) val))\n\n(defn choose\n  \"Get random element from array\"\n  [coll]\n  (.choose (:game @game-state) coll))\n\n(defn chance\n  [num]\n  (.chance (:game @game-state) num))\n\n(defn lerp\n  \"Linear interpolation\"\n  [frm to t]\n  (.lerp (:game @game-state) frm to t))\n\n; (defn- pmap\n;   \"map number to another range\"\n;   [v l1 h1 l2 h2]\n;   (.map (:game @game-state) v l1 h1 l2 h2))\n;\n; (defn- pmap\n;   \"map number to another range\"\n;   [v l1 h1 l2 h2]\n;   (+ l2\n;      (* (/ (- v l1) (- h1 l1))\n;         (- h2 l2))))\n\n(defn kmap\n  \"map number to another range. Same as kaboom.map\"\n  [v l1 h1 l2 h2]\n  (-> (- v l1)\n      (/ (- h1 l1))\n      (* (- h2 l2))\n      (+ l2)))\n\n(comment\n  (js/console.log kabooom))\n(comment\n  (js-get #js {:foo \"bar\"} :foo \"Not found\")\n  (js-get #js {:foo \"bar\"} :dne \"Not found\"))\n\n(declare dispatch-n)\n;;\n\n(defn kaboom [config]\n  (kaboom05 (clj->js config)))\n\n(comment\n  (js/console.log kaboom))\n\n(defn init\n  \"Initializes a new game:\n   Example Usage:\n   (init {:canvas })\"\n  ([] (init {:global true\n             :fullscreen false\n             :scale 4\n             :debug true\n             :clearColor [0,0,0, 0.9]}))\n  ([props]\n   (swap! game-state assoc :game (kaboom props))))\n\n;; Query =\n(defn dt []\n  (.dt (:game @game-state)))\n\n(defn height []\n  (.height (:game @game-state)))\n\n(defn width []\n  (.width (:game @game-state)))\n\n(defn mouse-pos\n  ([] (.mousePos (:game @game-state)))\n  ([layer] (.mousePos (:game @game-state) (name layer))))\n\n(defn screenshot\n  [] (.screenShot (:game @game-state)))\n\n(defn sprite\n  ([game title] (.sprite game (name title)))\n  ([game title opts] (.sprite game (name title) (clj->js opts))))\n\n(defn sprite! [title]\n  (sprite (:game @game-state) title))\n\n(defn solid [game]\n  (.solid game))\n\n(defn solid! []\n  (solid (:game @game-state)))\n\n(defn scale [game value]\n  (.scale game value))\n\n(defn layers [game layers main-layer]\n  (.layers game (clj->js layers) (name main-layer)))\n\n(defn add-level [game map config]\n  (.addLevel game (clj->js map) (clj->js config)))\n;;\n(defn add-level-obj [id obj]\n  (swap! game-state assoc-in [:game/levels id] obj))\n;;\n(defn add-level! [m level-id]\n  (let [{:keys [game levels]} @game-state]\n    (let [handler (get levels level-id)]\n      #_(js/console.log \"HANDLER: \" (handler game))\n      (add-level-obj level-id (add-level game m (handler game))))))\n\n(comment\n  (:game/levels @game-state))\n\n;;; Scene\n(defn go\n  \"switch to a scene\"\n  ([id] (lib/go (:game @game-state) id))\n  ([id props] (lib/go (:game @game-state) id props)))\n\n(defn scene\n  \"Use scenes to define different parts of a game, e.g. Game Scene, Start Scene,\"\n  [game id handler]\n  (.scene game (name id) handler))\n\n(defn reg-scene\n  \"Registers a scene\"\n  [id {:keys [init evt]}]\n  (let [handler (fn [state]\n                  (dispatch-n (init state))\n                  (dispatch-n (evt state)))]\n\n    (scene (:game @game-state) id handler)))\n(defn start! [game scene-id]\n  (.start game (name scene-id)))\n\n(defn start\n  \"Starts a scene:\n    - example usage: (start :scene/main)\"\n  [id]\n  (start! (:game @game-state) id))\n\n(defn respawn [comp val]\n  (if (number? val)\n    (set! comp -pos (vec2 [val val]))\n    (set! comp -pos (vec2 val))))\n\n(defn gravity [game value]\n  (.gravity game value))\n\n(defn gravity! [value]\n  (gravity (:game @game-state) value))\n;;\n\n(defn randd [v1 v2]\n  (lib/randd (:game @game-state) v1 v2))\n(defn cam-ignore [game val]\n  (.camIgnore game (clj->js val)))\n\n(defn cam-ignore! [value]\n  (cam-ignore (:game @game-state) value))\n\n;; Components\n(defn add [game comps]\n  (.add game (clj->js comps)))\n\n(defn get-component! [state id]\n  (get-in state [:components id :comp]))\n\n(comment\n  (get-component! @game-state :player))\n\n(defn get-tag [id]\n  (when-let [tag (.get (:game @game-state) (name id))]\n    tag))\n\n(defn get-component\n  \"Accetps component id.\n   Returns a component object (js), nil otherwise.\n   Component needs to be registered first\n   inside init handler function.\n   ==\n   Usage example: (RPG Game Example)\n   ==== Step 1: Define init handler ===\n      (defn main-init []\n        [[:comp/reg-n\n          [:player [[:sprite :sprite/guy]\n                    [:pos 30 90]\n                    [:prop :player]\n                    [:prop {:speed 55}]]]]\n         [:game/add-level main-map :level/main]])\n    - :comp/reg-n is a registration event type\n       - it can register multiple components\n       - in our example we are registering a single\n         component with id of :player. this is the id of\n         the main player in the game. It is composed\n         of 4 sub components\n           - sprite (needs to be registed first using load-sprite)\n           - pos: position of the player\n           - prop: :player,\n           - prop: {:speed 55} - players speed\n\n   === Step 2:\n   Access it inside event handler:\n\n   (defn main-action []\n     (let [player  (p/get-component :player)\n        ....event handler code]\n   \"\n  [id]\n  (let [comp (get-component! @game-state id)]\n    (if comp\n      comp\n      (get-tag id))))\n\n;; Colors\n\n\n(defn get-level [id]\n  (get-in @game-state [:game/levels id]))\n(defmulti create-component (fn [_ type props] type))\n\n(defmethod create-component :sprite [game _ [_ id opts]]\n  (if opts\n    (sprite game id opts)\n    (sprite game id)))\n\n(defmethod create-component :solid [game _ _]\n  (solid game))\n\n(defmethod create-component :pos [game _ [_ x y]]\n  (if (vector? x)\n    (.pos game (nth x 0) (nth x 1))\n    (.pos game x y)))\n\n(defmethod create-component :body [game _ [_ value]]\n  (if value\n    (.body game (clj->js value))\n    (.body game)))\n\n(defmethod create-component :origin [game _ [_ id]]\n  (.origin game (name id)))\n\n(defmethod create-component :text [game _ [_ value opts]]\n  (.text game value (or opts 16)))\n\n(defmethod create-component :layer [game _ [_ value]]\n  (.layer game (name value)))\n\n(defmethod create-component :rect [game _ [_ value value-b]]\n  (if (vector? value)\n    (.rect game (nth value 0) (nth value 1))\n    (.rect game value (or value-b value))))\n\n(defmethod create-component :scale [game _ [_ value value2]]\n  (if value2\n    (.scale game value value2)\n    (.scale game value)))\n\n(defmethod create-component :prop [_ _ [_ props]]\n  (if (keyword? props)\n    props\n    (clj->js props)))\n(defmethod create-component :color [game _ [_ r g b a]]\n  (.color game r g b (or a 1)))\n  ;; 0 6 11 11]\n(defmethod create-component :area [game _ [_ x1 y1 x2 y2]]\n  (.area game (.vec2 game x1 y1) (.vec2 game x2 y2)))\n\n(comment\n  (create-component game :sprite [:sprite :mario]))\n(defn create-components [game props]\n  (clj->js (for [prop props]\n             (create-component game (nth prop 0) prop))))\n(defn create-components! [props]\n  (create-components (:game @game-state) props))\n\n(comment\n  (map inc [1,2,3]))\n\n(comment\n  (for [item [1,2,3]]\n    (inc item)))\n\n(defn add-component [game props]\n  (add game (create-components game props)))\n\n(defn add-component! [props]\n  (add-component (:game @game-state) props))\n;;\n\n\n; ;;\n; (def ex [[:= [[:sprite :block]\n;               [:solid]]]\n;          [:$ [[:sprite :coin]]]\n;          [:% [[:sprite :surprise]]]\n;          [:* [[:sprite :surprise]]]\n;          [\"}\" [[:sprite :surprise]]]\n;          [:- [[:sprite :surprise]]]\n;          [\"(\" [[:sprite :surprise]]]\n;          [:+ [[:sprite :surprise]]]\n;          [\")\" [[:sprite :surprise]]]\n;          [\"^\" [[:sprite :surprise]]]\n;          [:# [[:sprite :surprise]]]])\n\n(defn reg-component [id props]\n  (let [comp  (add-component (:game @game-state) props)]\n    (swap! game-state assoc-in [:components id] {:comp comp :props props})\n    comp))\n\n(defn destroy! [game comp]\n  (.destroy game comp))\n\n(defn destroy [comp]\n  (destroy! (:game @game-state) comp))\n(defn center []\n  [(/ (width) 2) (/ (height) 2)])\n;;\n(comment\n  (height)\n  (center))\n(defn set-layers [coll main-layer]\n  (layers (:game @game-state) coll main-layer))\n\n(defn format-for-level [game {:keys [map width height any pos components]}]\n  (let [input {:map map :width width :height height :any any :pos pos}]\n    (clj->js (-> input\n                 (merge (reduce\n                         (fn [primes [id & props]]\n                           (assoc primes id (create-components (:game @game-state) props)))\n                         {}\n                         components))))))\n\n(defn reg-level! [id handler]\n  (swap! game-state assoc-in [:levels id] handler))\n\n;;\n(defn reg-level [id data-handler]\n  (reg-level! id\n              (fn [game]\n                (format-for-level game (data-handler)))))\n\n;;\n(defmulti dispatch (fn [args] (nth args 0)))\n(defmethod dispatch :game/gravity [[_ value]]\n  (gravity! value))\n\n(defmethod dispatch :origin [[_ value]]\n  (.origin (:game @game-state) (name value)))\n\n(defmethod dispatch :game/add-level [[_ main-map mid]]\n  (add-level! main-map mid))\n\n(defmethod dispatch :game/layers [[_ layers main-bg]]\n  (set-layers layers main-bg))\n\n(defmethod dispatch :cam/ignore [[_ backgrounds]]\n  (cam-ignore! backgrounds))\n\n(defmethod dispatch :comp/reg [[_ id props]]\n  (reg-component id props))\n(defmethod dispatch :comp/reg-n [[_ & comps]]\n  (doseq [[id props] comps]\n    (reg-component id props)))\n\n;; ==== Dispatch Events ====\n(defn action-handler [comp props]\n  (if (vector? props)\n    (.action comp (fn []\n                    (case (first props)\n                      :cam/follow (cam/follow comp))))\n    (.action comp #(props comp))))\n\n(defn on-handler [comp [key & props]]\n  (let [handler (fn [obj]\n                  (case key\n                    :headbump (doseq [prop props]\n                                (when (cis obj (first prop))\n                                  ((second prop))))))]\n    (c/on comp key handler)))\n\n;;\n(defmethod dispatch :evt/comp [[_ [id & args]]]\n  (let [comp (get-component id)]\n    (doseq [[method res] args]\n      (case method\n        :action (action-handler comp res)\n        :on     (on-handler comp res)))))\n\n;; Key Events\n(defmethod dispatch :evt/key-down [[_ id handler]]\n  (evt/key-down id handler))\n\n(defmethod dispatch :evt/key-press [[_ id handler]]\n  (evt/key-press id handler))\n\n(defmethod dispatch :evt/key-press-rep [[_ id handler]]\n  (evt/key-press-rep id handler))\n\n(defmethod dispatch :evt/key-release [[_ id handler]]\n  (evt/key-release id handler))\n\n;; Char\n(defmethod dispatch :evt/char-input [[_ handler]]\n  (.charInput (:game @game-state) handler))\n\n;; Mouse\n(defmethod dispatch :evt/mouse-down [[_ handler]]\n  (.mouseDown (:game @game-state) handler))\n\n(defmethod dispatch :evt/mouse-click [[_ handler]]\n  (.mouseClick (:game @game-state) handler))\n\n(defmethod dispatch :evt/mouse-release [[_ handler]]\n  (.mouseRelease (:game @game-state) handler))\n\n;; Key Boolean Events\n(defn key-down? [id]\n  (evt/key-down? id))\n\n(defn key-pressed? [k]\n  (.keyIsPressed (:game @game-state) (name k)))\n(defn key-pressed-rep? [k]\n  (.keyIsPressedRep (:game @game-state) (name k)))\n\n(defn key-released? [k]\n  (.keyReleased (:game @game-state) (name k)))\n\n;; Mouse Boolean Events\n(defn mouse-clicked? []\n  (.mouseIsClicked (:game @game-state)))\n\n(defn mouse-down? []\n  (.mouseIsDown (:game @game-state)))\n\n(defn mouse-released? []\n  (.mouseIsReleased (:game @game-state)))\n\n;; Game Events ===\n\n;; 1. Action\n(defmethod dispatch :evt/action [[_ id handler]]\n  (when-let [comp (get-component id)]\n    (if (.-action comp)\n      (.action comp handler)\n      (.action (:game @game-state) (name id) handler))))\n\n;; 2. Render\n(defmethod dispatch :evt/render [[_ id handler]]\n  (.render (:game @game-state) (name id) handler))\n;; 3. Collides\n(defmethod dispatch :evt/collides [[_ [id target] handler]]\n  (let [comp (get-component id)]\n    (if (.-collides comp)\n      (.collides comp (name target) handler)\n      (.collides (:game @game-state) (name id) (name target) handler))))\n;; 4. Overlaps\n(defmethod dispatch :evt/overlaps [[_ [id target] handler]]\n  (let [comp (get-component id)]\n    (.overlaps comp (name target) handler)))\n;; 5 on\n(defmethod dispatch :evt/on [[_ [id target] handler]]\n  (let [comp (or (get-component id) id)]\n    (.on comp (name target) #(handler %))))\n\n;; Waiting Functions\n(defmethod dispatch :game/loop [[_ id func]]\n  (.loop (:game @game-state) id func))\n\n(defmethod dispatch :game/wait [[_ id func]]\n  (.wait (:game @game-state) id func))\n\n;; Component Specific ===\n\n(defmethod dispatch :comp/play [[_ id tune]]\n  (let [comp (get-component id)]\n    (.play comp (name tune))))\n\n(defmethod dispatch :component/add [[_ nodes]]\n  (add-component! nodes))\n(defmethod dispatch :component/add-n [[_ & nodes-coll]]\n  (doseq [nodes nodes-coll]\n    (add-component! nodes)))\n\n(defn dispatch-n [vals]\n  (doseq [val vals]\n    (dispatch val)))\n\n;; Math\n(defn quad! [game [a b c d]]\n  (.quad game a b c d))\n\n(defn quad [args]\n  (quad! (:game @game-state) args))\n(defn neg [num]\n  (* -1 num))\n\n(defn call [id prop]\n  ((obj/get (get-component id) (name prop))))\n\n;; Animation\n(defn play [id anim-id]\n  (if (object? id)\n    (.play id (name anim-id))\n    (when-let [comp (get-component id)]\n      (try\n        (.play comp (name anim-id))\n        (catch js/Error err\n          (js/console.warn err))))))\n\n;;\n(defn sleep [f ms]\n  (js/setTimeout f ms))\n\n(defn change-sprite\n  [[id sid aid anim-speed]]\n  (when (object? id)\n    (do (.changeSprite id (name sid))\n        (when aid\n          (play id aid))\n        (if anim-speed\n          (set! id -animSpeed anim-speed)\n          (set! id -animSpeed 0.1))))\n  (when-not (object? id)\n    (when-let [comp (get-component id)]\n      (.changeSprite comp (name sid))\n      (when aid\n        (play id aid)))))\n\n(defn change-sprite-and-destroy\n  ([comp sid aid] (change-sprite-and-destroy comp sid aid 0))\n  ([comp sid aid t]\n   (.changeSprite comp (name sid))\n   (when aid\n     (play comp aid))\n   (sleep #(destroy comp) t)))\n\n;;\n(defn play-anims-and-destroy\n  ([obj anims] (play-anims-and-destroy obj anims 0))\n  ([obj anims timer]\n   (let [anim (first anims)\n         [sid aid t anim-speed] anim]\n     (if (not (seq (rest anims)))\n       (change-sprite-and-destroy obj sid aid t)\n       (do\n         (change-sprite [obj sid aid anim-speed])\n         (sleep #(play-anims-and-destroy obj (rest anims) (+ timer t))\n                (+ timer t)))))))\n"]}