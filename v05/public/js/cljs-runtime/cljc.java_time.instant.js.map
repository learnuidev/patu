{"version":3,"sources":["cljc/java_time/instant.cljc"],"mappings":"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","names":["cljc.java-time.instant/min","java.time/Instant","cljc.java-time.instant/epoch","cljc.java-time.instant/max","cljc.java-time.instant/truncated-to","this3981","java-time-temporal-TemporalUnit3982","cljc.java-time.instant/range","this3983","java-time-temporal-TemporalField3984","var_args","G__27334","cljc.java-time.instant/of-epoch-second","js/Error","long3985","long3986","long3987","cljc.java-time.instant/at-offset","this3988","java-time-ZoneOffset3989","cljc.java-time.instant/minus-millis","this3990","long3991","cljc.java-time.instant/get-nano","this3992","cljc.java-time.instant/plus-millis","this3993","long3994","cljc.java-time.instant/minus-seconds","this3995","long3996","cljc.java-time.instant/plus-nanos","this3997","long3998","G__27343","cljc.java-time.instant/plus","this3999","G__4000","this4001","G__4002","G__4003","cljc.java-time.instant/query","this4004","java-time-temporal-TemporalQuery4005","cljc.java-time.instant/to-string","this4006","cljc.java-time.instant/is-before","this4007","java-time-Instant4008","G__27352","cljc.java-time.instant/minus","this4009","G__4010","G__4011","this4012","G__4013","cljc.java-time.instant/at-zone","this4014","java-time-ZoneId4015","cljc.java-time.instant/of-epoch-milli","long4016","cljc.java-time.instant/get-long","this4017","java-time-temporal-TemporalField4018","cljc.java-time.instant/until","this4019","java-time-temporal-Temporal4020","java-time-temporal-TemporalUnit4021","cljc.java-time.instant/from","java-time-temporal-TemporalAccessor4022","cljc.java-time.instant/is-after","this4023","java-time-Instant4024","cljc.java-time.instant/minus-nanos","this4025","long4026","cljc.java-time.instant/is-supported","this4027","G__4028","cljc.java-time.instant/parse","java-lang-CharSequence4029","cljc.java-time.instant/hash-code","this4030","cljc.java-time.instant/adjust-into","this4031","java-time-temporal-Temporal4032","G__27370","cljc.java-time.instant/with","this4033","G__4034","this4035","G__4036","G__4037","G__27372","cljc.java-time.instant/now","java-time-Clock4038","cljc.java-time.instant/to-epoch-milli","this4039","cljc.java-time.instant/get-epoch-second","this4040","cljc.java-time.instant/compare-to","this4041","G__4042","cljc.java-time.instant/plus-seconds","this4043","long4044","cljc.java-time.instant/get","this4045","java-time-temporal-TemporalField4046","cljc.java-time.instant/equals","this4047","java-lang-Object4048"],"sourcesContent":["(ns cljc.java-time.instant (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Instant]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Instant])))\r\n(def min (. java.time.Instant -MIN))\r\n(def epoch (. java.time.Instant -EPOCH))\r\n(def max (. java.time.Instant -MAX))\r\n(clojure.core/defn truncated-to {:arglists (quote ([\"java.time.Instant\" \"java.time.temporal.TemporalUnit\"]))} (^java.time.Instant [^java.time.Instant this3981 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3982] (.truncatedTo this3981 java-time-temporal-TemporalUnit3982)))\r\n(clojure.core/defn range {:arglists (quote ([\"java.time.Instant\" \"java.time.temporal.TemporalField\"]))} (^java.time.temporal.ValueRange [^java.time.Instant this3983 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3984] (.range this3983 java-time-temporal-TemporalField3984)))\r\n(clojure.core/defn of-epoch-second {:arglists (quote ([\"long\"] [\"long\" \"long\"]))} (^java.time.Instant [^long long3985] (. java.time.Instant ofEpochSecond long3985)) (^java.time.Instant [^long long3986 ^long long3987] (. java.time.Instant ofEpochSecond long3986 long3987)))\r\n(clojure.core/defn at-offset {:arglists (quote ([\"java.time.Instant\" \"java.time.ZoneOffset\"]))} (^java.time.OffsetDateTime [^java.time.Instant this3988 ^java.time.ZoneOffset java-time-ZoneOffset3989] (.atOffset this3988 java-time-ZoneOffset3989)))\r\n(clojure.core/defn minus-millis {:arglists (quote ([\"java.time.Instant\" \"long\"]))} (^java.time.Instant [^java.time.Instant this3990 ^long long3991] (.minusMillis this3990 long3991)))\r\n(clojure.core/defn get-nano {:arglists (quote ([\"java.time.Instant\"]))} (^java.lang.Integer [^java.time.Instant this3992] (jti/getter nano this3992)))\r\n(clojure.core/defn plus-millis {:arglists (quote ([\"java.time.Instant\" \"long\"]))} (^java.time.Instant [^java.time.Instant this3993 ^long long3994] (.plusMillis this3993 long3994)))\r\n(clojure.core/defn minus-seconds {:arglists (quote ([\"java.time.Instant\" \"long\"]))} (^java.time.Instant [^java.time.Instant this3995 ^long long3996] (.minusSeconds this3995 long3996)))\r\n(clojure.core/defn plus-nanos {:arglists (quote ([\"java.time.Instant\" \"long\"]))} (^java.time.Instant [^java.time.Instant this3997 ^long long3998] (.plusNanos this3997 long3998)))\r\n(clojure.core/defn plus {:arglists (quote ([\"java.time.Instant\" \"java.time.temporal.TemporalAmount\"] [\"java.time.Instant\" \"java.time.temporal.TemporalAmount\"] [\"java.time.Instant\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.Instant\" \"long\" \"java.time.temporal.TemporalUnit\"]))} (^java.lang.Object [this3999 G__4000] #? (:cljs (.plus ^java.time.Instant this3999 G__4000) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4000)) (clojure.core/let [G__4000 ^\"java.time.temporal.TemporalAmount\" G__4000] (.plus ^java.time.Instant this3999 G__4000)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4000)) (clojure.core/let [G__4000 ^\"java.time.temporal.TemporalAmount\" G__4000] (.plus ^java.time.Instant this3999 G__4000)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.lang.Object [this4001 G__4002 G__4003] #? (:cljs (.plus ^java.time.Instant this4001 G__4002 G__4003) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4002) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4003)) (clojure.core/let [G__4002 (clojure.core/long G__4002) G__4003 ^\"java.time.temporal.TemporalUnit\" G__4003] (.plus ^java.time.Instant this4001 G__4002 G__4003)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4002) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4003)) (clojure.core/let [G__4002 (clojure.core/long G__4002) G__4003 ^\"java.time.temporal.TemporalUnit\" G__4003] (.plus ^java.time.Instant this4001 G__4002 G__4003)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn query {:arglists (quote ([\"java.time.Instant\" \"java.time.temporal.TemporalQuery\"]))} (^java.lang.Object [^java.time.Instant this4004 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4005] (.query this4004 java-time-temporal-TemporalQuery4005)))\r\n(clojure.core/defn to-string {:arglists (quote ([\"java.time.Instant\"]))} (^java.lang.String [^java.time.Instant this4006] (.toString this4006)))\r\n(clojure.core/defn is-before {:arglists (quote ([\"java.time.Instant\" \"java.time.Instant\"]))} (^java.lang.Boolean [^java.time.Instant this4007 ^java.time.Instant java-time-Instant4008] (.isBefore this4007 java-time-Instant4008)))\r\n(clojure.core/defn minus {:arglists (quote ([\"java.time.Instant\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.Instant\" \"java.time.temporal.TemporalAmount\"] [\"java.time.Instant\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.Instant\" \"java.time.temporal.TemporalAmount\"]))} (^java.lang.Object [this4009 G__4010 G__4011] #? (:cljs (.minus ^java.time.Instant this4009 G__4010 G__4011) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4010) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4011)) (clojure.core/let [G__4010 (clojure.core/long G__4010) G__4011 ^\"java.time.temporal.TemporalUnit\" G__4011] (.minus ^java.time.Instant this4009 G__4010 G__4011)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4010) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4011)) (clojure.core/let [G__4010 (clojure.core/long G__4010) G__4011 ^\"java.time.temporal.TemporalUnit\" G__4011] (.minus ^java.time.Instant this4009 G__4010 G__4011)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.lang.Object [this4012 G__4013] #? (:cljs (.minus ^java.time.Instant this4012 G__4013) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4013)) (clojure.core/let [G__4013 ^\"java.time.temporal.TemporalAmount\" G__4013] (.minus ^java.time.Instant this4012 G__4013)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4013)) (clojure.core/let [G__4013 ^\"java.time.temporal.TemporalAmount\" G__4013] (.minus ^java.time.Instant this4012 G__4013)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn at-zone {:arglists (quote ([\"java.time.Instant\" \"java.time.ZoneId\"]))} (^java.time.ZonedDateTime [^java.time.Instant this4014 ^java.time.ZoneId java-time-ZoneId4015] (.atZone this4014 java-time-ZoneId4015)))\r\n(clojure.core/defn of-epoch-milli {:arglists (quote ([\"long\"]))} (^java.time.Instant [^long long4016] (. java.time.Instant ofEpochMilli long4016)))\r\n(clojure.core/defn get-long {:arglists (quote ([\"java.time.Instant\" \"java.time.temporal.TemporalField\"]))} (^long [^java.time.Instant this4017 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4018] (.getLong this4017 java-time-temporal-TemporalField4018)))\r\n(clojure.core/defn until {:arglists (quote ([\"java.time.Instant\" \"java.time.temporal.Temporal\" \"java.time.temporal.TemporalUnit\"]))} (^long [^java.time.Instant this4019 ^java.time.temporal.Temporal java-time-temporal-Temporal4020 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4021] (.until this4019 java-time-temporal-Temporal4020 java-time-temporal-TemporalUnit4021)))\r\n(clojure.core/defn from {:arglists (quote ([\"java.time.temporal.TemporalAccessor\"]))} (^java.time.Instant [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4022] (. java.time.Instant from java-time-temporal-TemporalAccessor4022)))\r\n(clojure.core/defn is-after {:arglists (quote ([\"java.time.Instant\" \"java.time.Instant\"]))} (^java.lang.Boolean [^java.time.Instant this4023 ^java.time.Instant java-time-Instant4024] (.isAfter this4023 java-time-Instant4024)))\r\n(clojure.core/defn minus-nanos {:arglists (quote ([\"java.time.Instant\" \"long\"]))} (^java.time.Instant [^java.time.Instant this4025 ^long long4026] (.minusNanos this4025 long4026)))\r\n(clojure.core/defn is-supported {:arglists (quote ([\"java.time.Instant\" \"java.time.temporal.TemporalUnit\"] [\"java.time.Instant\" \"java.time.temporal.TemporalField\"]))} (^java.lang.Boolean [this4027 G__4028] #? (:cljs (.isSupported ^java.time.Instant this4027 G__4028) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4028)) (clojure.core/let [G__4028 ^\"java.time.temporal.TemporalUnit\" G__4028] (.isSupported ^java.time.Instant this4027 G__4028)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalField\") G__4028)) (clojure.core/let [G__4028 ^\"java.time.temporal.TemporalField\" G__4028] (.isSupported ^java.time.Instant this4027 G__4028)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn parse {:arglists (quote ([\"java.lang.CharSequence\"]))} (^java.time.Instant [^java.lang.CharSequence java-lang-CharSequence4029] (. java.time.Instant parse java-lang-CharSequence4029)))\r\n(clojure.core/defn hash-code {:arglists (quote ([\"java.time.Instant\"]))} (^java.lang.Integer [^java.time.Instant this4030] (.hashCode this4030)))\r\n(clojure.core/defn adjust-into {:arglists (quote ([\"java.time.Instant\" \"java.time.temporal.Temporal\"]))} (^java.time.temporal.Temporal [^java.time.Instant this4031 ^java.time.temporal.Temporal java-time-temporal-Temporal4032] (.adjustInto this4031 java-time-temporal-Temporal4032)))\r\n(clojure.core/defn with {:arglists (quote ([\"java.time.Instant\" \"java.time.temporal.TemporalAdjuster\"] [\"java.time.Instant\" \"java.time.temporal.TemporalField\" \"long\"] [\"java.time.Instant\" \"java.time.temporal.TemporalAdjuster\"] [\"java.time.Instant\" \"java.time.temporal.TemporalField\" \"long\"]))} (^java.lang.Object [this4033 G__4034] #? (:cljs (.with ^java.time.Instant this4033 G__4034) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAdjuster\") G__4034)) (clojure.core/let [G__4034 ^\"java.time.temporal.TemporalAdjuster\" G__4034] (.with ^java.time.Instant this4033 G__4034)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAdjuster\") G__4034)) (clojure.core/let [G__4034 ^\"java.time.temporal.TemporalAdjuster\" G__4034] (.with ^java.time.Instant this4033 G__4034)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.lang.Object [this4035 G__4036 G__4037] #? (:cljs (.with ^java.time.Instant this4035 G__4036 G__4037) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalField\") G__4036) (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4037)) (clojure.core/let [G__4036 ^\"java.time.temporal.TemporalField\" G__4036 G__4037 (clojure.core/long G__4037)] (.with ^java.time.Instant this4035 G__4036 G__4037)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalField\") G__4036) (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4037)) (clojure.core/let [G__4036 ^\"java.time.temporal.TemporalField\" G__4036 G__4037 (clojure.core/long G__4037)] (.with ^java.time.Instant this4035 G__4036 G__4037)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn now {:arglists (quote ([] [\"java.time.Clock\"]))} (^java.time.Instant [] (. java.time.Instant now)) (^java.time.Instant [^java.time.Clock java-time-Clock4038] (. java.time.Instant now java-time-Clock4038)))\r\n(clojure.core/defn to-epoch-milli {:arglists (quote ([\"java.time.Instant\"]))} (^long [^java.time.Instant this4039] (.toEpochMilli this4039)))\r\n(clojure.core/defn get-epoch-second {:arglists (quote ([\"java.time.Instant\"]))} (^long [^java.time.Instant this4040] (jti/getter epochSecond this4040)))\r\n(clojure.core/defn compare-to {:arglists (quote ([\"java.time.Instant\" \"java.time.Instant\"] [\"java.time.Instant\" \"java.lang.Object\"]))} (^java.lang.Integer [this4041 G__4042] #? (:cljs (.compareTo ^java.time.Instant this4041 G__4042) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.Instant\") G__4042)) (clojure.core/let [G__4042 ^\"java.time.Instant\" G__4042] (.compareTo ^java.time.Instant this4041 G__4042)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Object\") G__4042)) (clojure.core/let [G__4042 ^\"java.lang.Object\" G__4042] (.compareTo ^java.time.Instant this4041 G__4042)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn plus-seconds {:arglists (quote ([\"java.time.Instant\" \"long\"]))} (^java.time.Instant [^java.time.Instant this4043 ^long long4044] (.plusSeconds this4043 long4044)))\r\n(clojure.core/defn get {:arglists (quote ([\"java.time.Instant\" \"java.time.temporal.TemporalField\"]))} (^java.lang.Integer [^java.time.Instant this4045 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4046] (.get this4045 java-time-temporal-TemporalField4046)))\r\n(clojure.core/defn equals {:arglists (quote ([\"java.time.Instant\" \"java.lang.Object\"]))} (^java.lang.Boolean [^java.time.Instant this4047 ^java.lang.Object java-lang-Object4048] (.equals this4047 java-lang-Object4048)))\r\n"]}