{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$MatterGameObject.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,kEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9H,IAAIC,WAAaH,OAAA,CAAQ,mEAAR,CAAjB,CACII,aAAeJ,OAAA,CAAQ,0DAAR,CADnB,CAEIK,QAAUL,OAAA,CAAQ,6CAAR,CAgGdC,OAAAC,QAAA,CAnEuBI,QAAS,CAACC,KAAD,CAAQC,UAAR,CAAoBC,OAApB,CAChC,CACoBC,IAAAA,EAAhB,GAAID,OAAJ,GAA6BA,OAA7B,CAAuC,EAAvC,CAEA,KAAIE,EAAIH,UAAAG,EAAR,CACIC,EAAIJ,UAAAI,EAGRJ,WAAAK,KAAA,CAAkB,CACdC,KAAM,CAAA,CADQ,CAEdC,SAAU,CACNJ,EAAGA,CADG;AAENC,EAAGA,CAFG,CAFI,CAQLI,EACTb,UAAAc,OADSD,CAETb,UAAAe,UAFSF,CAGTb,UAAAgB,MAHSH,CAITb,UAAAiB,SAJSJ,CAKTb,UAAAkB,QALSL,CAMTb,UAAAmB,KANSN,CAOTb,UAAAoB,OAPSP,CAQTb,UAAAqB,QARSR,CASTb,UAAAsB,MATST,CAUTb,UAAAuB,OAVSV,CAWTb,UAAAwB,UAXSX,CAYTb,UAAAyB,SAZSZ,CAgBba,QAAA,CAAe,QAAS,CAACC,KAAD,CACxB,CACI,IAAKC,IAAIA,GAAT,GAAgBD,MAAhB,CACA,CAC0B,IAAA,IAAAA,KAAA,CAAMC,GAAN,CAnDpBC,IAAAC,IAmDF,EAnDgC,UAmDhC,GAnDa,MAAOD,IAAAC,IAmDpB,EAnDkDD,GAAAE,IAmDlD,EAnDgF,UAmDhF,GAnD6D,MAAOF,IAAAE,IAmDpE,CAEIC,MAAAC,eAAA,CAAsB5B,UAAtB,CAAkCuB,GAAlC,CAAuC,CACnCE,IAAKH,KAAA,CAAMC,GAAN,CAAAE,IAD8B,CAEnCC,IAAKJ,KAAA,CAAMC,GAAN,CAAAG,IAF8B,CAAvC,CAFJ,CASIC,MAAAC,eAAA,CAAsB5B,UAAtB,CAAkCuB,GAAlC,CAAuC,CAACM,MAAOP,KAAA,CAAMC,GAAN,CAAR,CAAvC,CAVR,CAFJ,CADA,CAmBAvB;UAAAD,MAAA,CAAmBA,KAEnBC,WAAA8B,UAAA,CAAuB,IAAIjC,OAAJ,CAAYM,CAAZ,CAAeC,CAAf,CAIvB,EAFI2B,KAEJ,CAFYnC,YAAA,CAAaK,OAAb,CAAsB,OAAtB,CAA+B,IAA/B,CAEZ,IAEI8B,KAFJ,CAEY,WAFZ,CAKA/B,WAAAgC,QAAA,CAAmBD,KAAnB,CAA0B9B,OAA1B,CAEA,OAAOD,WA/DX,CAvC8H;",
"sources":["node_modules/Phaser/src/physics/matter-js/MatterGameObject.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$MatterGameObject\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Components = require('./components');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * Internal function to check if the object has a getter or setter.\r\n *\r\n * @function hasGetterOrSetter\r\n * @private\r\n *\r\n * @param {object} def - The object to check.\r\n *\r\n * @return {boolean} True if it has a getter or setter, otherwise false.\r\n */\r\nfunction hasGetterOrSetter (def)\r\n{\r\n    return (!!def.get && typeof def.get === 'function') || (!!def.set && typeof def.set === 'function');\r\n}\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Physics.Matter.MatterGameObject\r\n * @since 3.3.0\r\n *\r\n * @param {Phaser.Physics.Matter.World} world - The Matter world to add the body to.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will have the Matter body applied to it.\r\n * @param {object} options - Matter options config object.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was created with the Matter body.\r\n */\r\nvar MatterGameObject = function (world, gameObject, options)\r\n{\r\n    if (options === undefined) { options = {}; }\r\n\r\n    var x = gameObject.x;\r\n    var y = gameObject.y;\r\n\r\n    //  Temp body pos to avoid body null checks\r\n    gameObject.body = {\r\n        temp: true,\r\n        position: {\r\n            x: x,\r\n            y: y\r\n        }\r\n    };\r\n\r\n    var mixins = [\r\n        Components.Bounce,\r\n        Components.Collision,\r\n        Components.Force,\r\n        Components.Friction,\r\n        Components.Gravity,\r\n        Components.Mass,\r\n        Components.Sensor,\r\n        Components.SetBody,\r\n        Components.Sleep,\r\n        Components.Static,\r\n        Components.Transform,\r\n        Components.Velocity\r\n    ];\r\n\r\n    //  First let's inject all of the components into the Game Object\r\n    mixins.forEach(function (mixin)\r\n    {\r\n        for (var key in mixin)\r\n        {\r\n            if (hasGetterOrSetter(mixin[key]))\r\n            {\r\n                Object.defineProperty(gameObject, key, {\r\n                    get: mixin[key].get,\r\n                    set: mixin[key].set\r\n                });\r\n            }\r\n            else\r\n            {\r\n                Object.defineProperty(gameObject, key, {value: mixin[key]});\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    gameObject.world = world;\r\n\r\n    gameObject._tempVec2 = new Vector2(x, y);\r\n\r\n    var shape = GetFastValue(options, 'shape', null);\r\n\r\n    if (!shape)\r\n    {\r\n        shape = 'rectangle';\r\n    }\r\n\r\n    gameObject.setBody(shape, options);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = MatterGameObject;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Components","GetFastValue","Vector2","MatterGameObject","world","gameObject","options","undefined","x","y","body","temp","position","mixins","Bounce","Collision","Force","Friction","Gravity","Mass","Sensor","SetBody","Sleep","Static","Transform","Velocity","forEach","mixin","key","def","get","set","Object","defineProperty","value","_tempVec2","shape","setBody"]
}
