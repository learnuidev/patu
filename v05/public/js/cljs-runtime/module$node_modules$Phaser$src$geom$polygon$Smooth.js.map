{
"version":3,
"file":"module$node_modules$Phaser$src$geom$polygon$Smooth.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,mDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQ/G,IAAIC,KAAOA,QAAS,CAACC,GAAD,CAAMC,CAAN,CACpB,CACID,GAAA,CAAI,CAAJ,CAAA,CAASC,CAAA,CAAE,CAAF,CACTD,IAAA,CAAI,CAAJ,CAAA,CAASC,CAAA,CAAE,CAAF,CAET,OAAOD,IAJX,CA0DAH,OAAAC,QAAA,CAvCaI,QAAS,CAACC,OAAD,CACtB,CACI,IAAIC,CAAJ,CACIC,OAAS,EADb,CAEIC,KAAOH,OAAAE,OAEX,KAAKD,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBE,IAAAC,OAAhB,CAA6BH,CAAA,EAA7B,CAEIC,MAAAG,KAAA,CAAY,CAAEF,IAAA,CAAKF,CAAL,CAAAK,EAAF,CAAaH,IAAA,CAAKF,CAAL,CAAAM,EAAb,CAAZ,CAGAC,KAAAA,CAAS,EAEO,EAApB,CAAIN,MAAAE,OAAJ,EAEII,IAAAH,KAAA,CAAYT,IAAA,CAAK,CAAE,CAAF,CAAK,CAAL,CAAL,CAAeM,MAAA,CAAO,CAAP,CAAf,CAAZ,CAGJ,KAAKD,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBC,MAAAE,OAAhB,CAAgC,CAAhC,CAAmCH,CAAA,EAAnC,CACA,CACI,IAAIQ,GAAKP,MAAA,CAAOD,CAAP,CAAT,CACIS,GAAKR,MAAA,CAAOD,CAAP,CAAW,CAAX,CADT,CAEIU,IAAMF,EAAA,CAAG,CAAH,CACNG,GAAAA,CAAMH,EAAA,CAAG,CAAH,CACV,KAAII,IAAMH,EAAA,CAAG,CAAH,CACNI,GAAAA,CAAMJ,EAAA,CAAG,CAAH,CAEVF,KAAAH,KAAA,CAAY,CAAE,GAAF,CAASM,GAAT,CAAe,GAAf,CAAsBE,GAAtB,CAA2B,GAA3B,CAAkCD,EAAlC,CAAwC,GAAxC,CAA+CE,EAA/C,CAAZ,CACAN;IAAAH,KAAA,CAAY,CAAE,GAAF,CAASM,GAAT,CAAe,GAAf,CAAsBE,GAAtB,CAA2B,GAA3B,CAAkCD,EAAlC,CAAwC,GAAxC,CAA+CE,EAA/C,CAAZ,CATJ,CAYoB,CAApB,CAAIZ,MAAAE,OAAJ,EAEII,IAAAH,KAAA,CAAYT,IAAA,CAAK,CAAE,CAAF,CAAK,CAAL,CAAL,CAAeM,MAAA,CAAOA,MAAAE,OAAP,CAAuB,CAAvB,CAAf,CAAZ,CAGJ,OAAOJ,QAAAe,MAAA,CAAcP,IAAd,CAnCX,CA7B+G;",
"sources":["node_modules/Phaser/src/geom/polygon/Smooth.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$polygon$Smooth\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Igor Ognichenko <ognichenko.igor@gmail.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar copy = function (out, a)\r\n{\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n  \r\n    return out;\r\n};\r\n\r\n/**\r\n * Takes a Polygon object and applies Chaikin's smoothing algorithm on its points.\r\n *\r\n * @function Phaser.Geom.Polygon.Smooth\r\n * @since 3.13.0\r\n *\r\n * @generic {Phaser.Geom.Polygon} O - [polygon,$return]\r\n *\r\n * @param {Phaser.Geom.Polygon} polygon - The polygon to be smoothed. The polygon will be modified in-place and returned.\r\n *\r\n * @return {Phaser.Geom.Polygon} The input polygon.\r\n */\r\nvar Smooth = function (polygon)\r\n{\r\n    var i;\r\n    var points = [];\r\n    var data = polygon.points;\r\n\r\n    for (i = 0; i < data.length; i++)\r\n    {\r\n        points.push([ data[i].x, data[i].y ]);\r\n    }\r\n\r\n    var output = [];\r\n  \r\n    if (points.length > 0)\r\n    {\r\n        output.push(copy([ 0, 0 ], points[0]));\r\n    }\r\n  \r\n    for (i = 0; i < points.length - 1; i++)\r\n    {\r\n        var p0 = points[i];\r\n        var p1 = points[i + 1];\r\n        var p0x = p0[0];\r\n        var p0y = p0[1];\r\n        var p1x = p1[0];\r\n        var p1y = p1[1];\r\n\r\n        output.push([ 0.85 * p0x + 0.15 * p1x, 0.85 * p0y + 0.15 * p1y ]);\r\n        output.push([ 0.15 * p0x + 0.85 * p1x, 0.15 * p0y + 0.85 * p1y ]);\r\n    }\r\n  \r\n    if (points.length > 1)\r\n    {\r\n        output.push(copy([ 0, 0 ], points[points.length - 1]));\r\n    }\r\n  \r\n    return polygon.setTo(output);\r\n};\r\n\r\nmodule.exports = Smooth;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","copy","out","a","Smooth","polygon","i","points","data","length","push","x","y","output","p0","p1","p0x","p0y","p1x","p1y","setTo"]
}
