{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$particles$ParticleManagerCanvasRenderer.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/particles/ParticleManagerCanvasRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$particles$ParticleManagerCanvasRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Particles.EmitterManager#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitterManager} emitterManager - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar ParticleManagerCanvasRenderer = function (renderer, emitterManager, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var emitters = emitterManager.emitters.list;\r\n    var emittersLength = emitters.length;\r\n\r\n    if (emittersLength === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var camMatrix = renderer._tempMatrix1.copyFrom(camera.matrix);\r\n    var calcMatrix = renderer._tempMatrix2;\r\n    var particleMatrix = renderer._tempMatrix3;\r\n    var managerMatrix = renderer._tempMatrix4.applyITRS(emitterManager.x, emitterManager.y, emitterManager.rotation, emitterManager.scaleX, emitterManager.scaleY);\r\n\r\n    camMatrix.multiply(managerMatrix);\r\n\r\n    var roundPixels = camera.roundPixels;\r\n\r\n    var ctx = renderer.currentContext;\r\n\r\n    ctx.save();\r\n\r\n    for (var e = 0; e < emittersLength; e++)\r\n    {\r\n        var emitter = emitters[e];\r\n        var particles = emitter.alive;\r\n        var particleCount = particles.length;\r\n\r\n        if (!emitter.visible || particleCount === 0)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var scrollX = camera.scrollX * emitter.scrollFactorX;\r\n        var scrollY = camera.scrollY * emitter.scrollFactorY;\r\n\r\n        if (parentMatrix)\r\n        {\r\n            //  Multiply the camera by the parent matrix\r\n            camMatrix.multiplyWithOffset(parentMatrix, -scrollX, -scrollY);\r\n\r\n            scrollX = 0;\r\n            scrollY = 0;\r\n        }\r\n\r\n        ctx.globalCompositeOperation = renderer.blendModes[emitter.blendMode];\r\n\r\n        for (var i = 0; i < particleCount; i++)\r\n        {\r\n            var particle = particles[i];\r\n\r\n            var alpha = particle.alpha * camera.alpha;\r\n\r\n            if (alpha <= 0)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var frame = particle.frame;\r\n            var cd = frame.canvasData;\r\n\r\n            var x = -(frame.halfWidth);\r\n            var y = -(frame.halfHeight);\r\n\r\n            particleMatrix.applyITRS(0, 0, particle.rotation, particle.scaleX, particle.scaleY);\r\n\r\n            particleMatrix.e = particle.x - scrollX;\r\n            particleMatrix.f = particle.y - scrollY;\r\n\r\n            camMatrix.multiply(particleMatrix, calcMatrix);\r\n\r\n            ctx.globalAlpha = alpha;\r\n        \r\n            ctx.save();\r\n\r\n            calcMatrix.copyToContext(ctx);\r\n\r\n            if (roundPixels)\r\n            {\r\n                x |= 0;\r\n                y |= 0;\r\n            }\r\n\r\n            ctx.drawImage(frame.source.image, cd.x, cd.y, cd.width, cd.height, x, y, cd.width, cd.height);\r\n\r\n            ctx.restore();\r\n        }\r\n    }\r\n\r\n    ctx.restore();\r\n};\r\n\r\nmodule.exports = ParticleManagerCanvasRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","ParticleManagerCanvasRenderer","renderer","emitterManager","interpolationPercentage","camera","parentMatrix","emitters","list","emittersLength","length","camMatrix","_tempMatrix1","copyFrom","matrix","calcMatrix","_tempMatrix2","particleMatrix","_tempMatrix3","managerMatrix","_tempMatrix4","applyITRS","x","y","rotation","scaleX","scaleY","multiply","roundPixels","ctx","currentContext","save","e","emitter","particles","alive","particleCount","visible","scrollX","scrollFactorX","scrollY","scrollFactorY","multiplyWithOffset","globalCompositeOperation","blendModes","blendMode","i","particle","alpha","frame","cd","canvasData","halfWidth","halfHeight","f","globalAlpha","copyToContext","drawImage","source","image","width","height","restore"]
}
