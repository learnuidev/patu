{
"version":3,
"file":"module$node_modules$Phaser$src$geom$rectangle$RandomOutside.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,4DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOxH,IAAIC,QAAUH,OAAA,CAAQ,6CAAR,CAAd,CACII,aAAeJ,OAAA,CAAQ,4DAAR,CADnB,CAEIK,MAAQL,OAAA,CAAQ,iDAAR,CAwDZC,OAAAC,QAAA,CAvCoBI,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAeC,GAAf,CAC7B,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,IAAIJ,KAAnC,CAEA,IAAID,YAAA,CAAaG,KAAb,CAAoBC,KAApB,CAAJ,CAQI,OAAQL,OAAA,CAAQ,CAAR,CAAW,CAAX,CAAR,EAEI,KAAK,CAAL,CACIM,GAAAE,EAAA,CAAQJ,KAAAI,EAAR,CAAmBC,IAAAC,OAAA,EAAnB,EAAoCL,KAAAM,MAApC,CAAkDP,KAAAI,EAAlD,CACAF;GAAAM,EAAA,CAAQR,KAAAQ,EAAR,CAAmBH,IAAAC,OAAA,EAAnB,EAAoCL,KAAAQ,IAApC,CAAgDT,KAAAQ,EAAhD,CACA,MAEJ,MAAK,CAAL,CACIN,GAAAE,EAAA,CAAQH,KAAAG,EAAR,CAAmBC,IAAAC,OAAA,EAAnB,EAAoCN,KAAAO,MAApC,CAAkDN,KAAAG,EAAlD,CACAF,IAAAM,EAAA,CAAQP,KAAAS,OAAR,CAAwBL,IAAAC,OAAA,EAAxB,EAAyCN,KAAAU,OAAzC,CAAwDT,KAAAS,OAAxD,CACA,MAEJ,MAAK,CAAL,CACIR,GAAAE,EAAA,CAAQJ,KAAAI,EAAR,CAAmBC,IAAAC,OAAA,EAAnB,EAAoCL,KAAAG,EAApC,CAA8CJ,KAAAI,EAA9C,CACAF,IAAAM,EAAA,CAAQP,KAAAO,EAAR,CAAmBH,IAAAC,OAAA,EAAnB,EAAoCN,KAAAU,OAApC,CAAmDT,KAAAO,EAAnD,CACA,MAEJ,MAAK,CAAL,CACIN,GAAAE,EACA,CADQH,KAAAM,MACR,CADuBF,IAAAC,OAAA,EACvB,EADwCN,KAAAO,MACxC,CADsDN,KAAAM,MACtD,EAAAL,GAAAM,EAAA,CAAQR,KAAAQ,EAAR,CAAmBH,IAAAC,OAAA,EAAnB,EAAoCL,KAAAS,OAApC,CAAmDV,KAAAQ,EAAnD,CAnBR,CAwBJ,MAAON,IAnCX,CA3BwH;",
"sources":["node_modules/Phaser/src/geom/rectangle/RandomOutside.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$rectangle$RandomOutside\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Between = require('../../math/Between');\r\nvar ContainsRect = require('./ContainsRect');\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Calculates a random point that lies within the `outer` Rectangle, but outside of the `inner` Rectangle.\r\n * The inner Rectangle must be fully contained within the outer rectangle.\r\n *\r\n * @function Phaser.Geom.Rectangle.RandomOutside\r\n * @since 3.10.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} outer - The outer Rectangle to get the random point within.\r\n * @param {Phaser.Geom.Rectangle} inner - The inner Rectangle to exclude from the returned point.\r\n * @param {Phaser.Geom.Point} [out] - A Point, or Point-like object to store the result in. If not specified, a new Point will be created.\r\n *\r\n * @return {Phaser.Geom.Point} A Point object containing the random values in its `x` and `y` properties.\r\n */\r\nvar RandomOutside = function (outer, inner, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    if (ContainsRect(outer, inner))\r\n    {\r\n        //  Pick a random quadrant\r\n        //\r\n        //  The quadrants don't extend the full widths / heights of the outer rect to give\r\n        //  us a better uniformed distribution, otherwise you get clumping in the corners where\r\n        //  the 4 quads would overlap\r\n\r\n        switch (Between(0, 3))\r\n        {\r\n            case 0: // Top\r\n                out.x = outer.x + (Math.random() * (inner.right - outer.x));\r\n                out.y = outer.y + (Math.random() * (inner.top - outer.y));\r\n                break;\r\n\r\n            case 1: // Bottom\r\n                out.x = inner.x + (Math.random() * (outer.right - inner.x));\r\n                out.y = inner.bottom + (Math.random() * (outer.bottom - inner.bottom));\r\n                break;\r\n\r\n            case 2: // Left\r\n                out.x = outer.x + (Math.random() * (inner.x - outer.x));\r\n                out.y = inner.y + (Math.random() * (outer.bottom - inner.y));\r\n                break;\r\n\r\n            case 3: // Right\r\n                out.x = inner.right + (Math.random() * (outer.right - inner.right));\r\n                out.y = outer.y + (Math.random() * (inner.bottom - outer.y));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = RandomOutside;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Between","ContainsRect","Point","RandomOutside","outer","inner","out","undefined","x","Math","random","right","y","top","bottom"]
}
