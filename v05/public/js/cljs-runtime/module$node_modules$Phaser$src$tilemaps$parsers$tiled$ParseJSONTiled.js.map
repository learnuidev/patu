{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$parsers$tiled$ParseJSONTiled.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,qEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOjI,IAAIC,QAAUH,OAAA,CAAQ,iDAAR,CAAd,CACII,QAAUJ,OAAA,CAAQ,yDAAR,CADd,CAEIK,gBAAkBL,OAAA,CAAQ,uEAAR,CAFtB,CAGIM,iBAAmBN,OAAA,CAAQ,wEAAR,CAHvB,CAIIO,cAAgBP,OAAA,CAAQ,qEAAR,CAJpB;AAKIQ,kBAAoBR,OAAA,CAAQ,yEAAR,CALxB,CAMIS,kBAAoBT,OAAA,CAAQ,yEAAR,CANxB,CAOIU,qBAAuBV,OAAA,CAAQ,4EAAR,CA6D3BC,OAAAC,QAAA,CAtCqBS,QAAS,CAACC,IAAD,CAAOC,IAAP,CAAaC,UAAb,CAC9B,CACI,GAAyB,YAAzB,GAAID,IAAAE,YAAJ,CAGI,MADAC,QAAAC,KAAA,CAAa,mEAAb,CACO,CAAA,IAIPC,KAAAA,CAAU,IAAId,OAAJ,CAAY,CACtBe,MAAON,IAAAM,MADe;AAEtBC,OAAQP,IAAAO,OAFc,CAGtBR,KAAMA,IAHgB,CAItBS,UAAWR,IAAAS,UAJW,CAKtBC,WAAYV,IAAAW,WALU,CAMtBT,YAAaF,IAAAE,YANS,CAOtBU,OAAQtB,OAAAuB,WAPc,CAQtBC,QAASd,IAAAc,QARa,CAStBC,WAAYf,IAAAe,WATU,CAUtBC,YAAahB,IAAAiB,YAVS,CAAZ,CAadZ,KAAAa,OAAA,CAAiB1B,eAAA,CAAgBQ,IAAhB,CAAsBC,UAAtB,CACjBI,KAAAc,OAAA,CAAiB1B,gBAAA,CAAiBO,IAAjB,CAEboB,WAAAA,CAAO1B,aAAA,CAAcM,IAAd,CACXK,KAAAgB,SAAA,CAAmBD,UAAAC,SACnBhB,KAAAiB,iBAAA,CAA2BF,UAAAE,iBAE3BjB,KAAAkB,QAAA,CAAkB5B,iBAAA,CAAkBK,IAAlB,CAElBK,KAAAmB,MAAA,CAAgB5B,iBAAA,CAAkBS,IAAlB,CAEhBR,qBAAA,CAAqBQ,IAArB,CAEA;MAAOA,KAlCX,CAtCiI;",
"sources":["node_modules/Phaser/src/tilemaps/parsers/tiled/ParseJSONTiled.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$parsers$tiled$ParseJSONTiled\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Formats = require('../../Formats');\r\nvar MapData = require('../../mapdata/MapData');\r\nvar ParseTileLayers = require('./ParseTileLayers');\r\nvar ParseImageLayers = require('./ParseImageLayers');\r\nvar ParseTilesets = require('./ParseTilesets');\r\nvar ParseObjectLayers = require('./ParseObjectLayers');\r\nvar BuildTilesetIndex = require('./BuildTilesetIndex');\r\nvar AssignTileProperties = require('./AssignTileProperties');\r\n\r\n/**\r\n * @namespace Phaser.Tilemaps.Parsers.Tiled\r\n */\r\n\r\n/**\r\n * Parses a Tiled JSON object into a new MapData object.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseJSONTiled\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {object} json - The Tiled JSON object.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {?Phaser.Tilemaps.MapData} The created MapData object, or `null` if the data can't be parsed.\r\n */\r\nvar ParseJSONTiled = function (name, json, insertNull)\r\n{\r\n    if (json.orientation !== 'orthogonal')\r\n    {\r\n        console.warn('Only orthogonal map types are supported in this version of Phaser');\r\n        return null;\r\n    }\r\n\r\n    //  Map data will consist of: layers, objects, images, tilesets, sizes\r\n    var mapData = new MapData({\r\n        width: json.width,\r\n        height: json.height,\r\n        name: name,\r\n        tileWidth: json.tilewidth,\r\n        tileHeight: json.tileheight,\r\n        orientation: json.orientation,\r\n        format: Formats.TILED_JSON,\r\n        version: json.version,\r\n        properties: json.properties,\r\n        renderOrder: json.renderorder\r\n    });\r\n\r\n    mapData.layers = ParseTileLayers(json, insertNull);\r\n    mapData.images = ParseImageLayers(json);\r\n\r\n    var sets = ParseTilesets(json);\r\n    mapData.tilesets = sets.tilesets;\r\n    mapData.imageCollections = sets.imageCollections;\r\n\r\n    mapData.objects = ParseObjectLayers(json);\r\n\r\n    mapData.tiles = BuildTilesetIndex(mapData);\r\n\r\n    AssignTileProperties(mapData);\r\n\r\n    return mapData;\r\n};\r\n\r\nmodule.exports = ParseJSONTiled;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Formats","MapData","ParseTileLayers","ParseImageLayers","ParseTilesets","ParseObjectLayers","BuildTilesetIndex","AssignTileProperties","ParseJSONTiled","name","json","insertNull","orientation","console","warn","mapData","width","height","tileWidth","tilewidth","tileHeight","tileheight","format","TILED_JSON","version","properties","renderOrder","renderorder","layers","images","sets","tilesets","imageCollections","objects","tiles"]
}
