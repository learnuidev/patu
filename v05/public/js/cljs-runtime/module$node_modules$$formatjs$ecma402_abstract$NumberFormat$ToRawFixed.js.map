{
"version":3,
"file":"module$node_modules$$formatjs$ecma402_abstract$NumberFormat$ToRawFixed.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uEAAA,CAA2F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEnIC,MAAAC,eAAA,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAAI,WAAA,CAAqB,IAAK,EAC1B,KAAIC,QAAUP,OAAA,CAAQ,sDAAR,CAmDdE,QAAAI,WAAA,CA3CAA,QAAmB,CAACE,CAAD,CAAIC,WAAJ,CAAiBC,WAAjB,CAA8B,CAE7C,IAAIC,EAAIC,IAAAC,MAAA,CAAWL,CAAX,CAAeI,IAAAE,IAAA,CAAS,EAAT,CADfJ,WACe,CAAf,CACJK,EAAAA,CAASJ,CAATI,CAAaH,IAAAE,IAAA,CAAS,EAAT,CAFTJ,WAES,CAKjB,IAAQ,IAAR,CAAIC,CAAJ,CACIK,CAAA,CAAIL,CAAAM,SAAA,EADR,KAGK,CACDD,CAAA,CAAIL,CAAAM,SAAA,EACAC,EAAAA,CAAKF,CAAAG,MAAA,CAAQ,GAAR,CAAT,KAAyCC,SAAWF,CAAA,CAAG,CAAH,CACpDF,EAAA,CADkCE,CAAAG,CAAG,CAAHA,CAC9BC,QAAA,CAAiB,GAAjB;AAAsB,EAAtB,CACAN,EAAJ,EAAQT,OAAAgB,OAAA,CAAe,GAAf,CAAoBX,IAAAY,IAAA,CAAS,CAACJ,QAAV,CAAqBJ,CAAAS,OAArB,CAAgC,CAAhC,CAAmC,CAAnC,CAApB,CAJP,CAOL,GAAU,CAAV,GAjBQf,WAiBR,CAAa,CACT,IAAIgB,EAAIV,CAAAS,OACJC,EAAJ,EAnBIhB,WAmBJ,GAEIM,CACA,CAFQT,OAAAgB,OAAAI,CAAe,GAAfA,CApBRjB,WAoBQiB,CAAwB,CAAxBA,CAA4BD,CAA5BC,CAER,CADQX,CACR,CAAAU,CAAA,CAtBAhB,WAsBA,CAAQ,CAHZ,CAKIkB,SAAAA,CAAIZ,CAAAa,MAAA,CAAQ,CAAR,CAAWH,CAAX,CAxBJhB,WAwBI,CACJoB,EAAAA,CAAId,CAAAa,MAAA,CAAQH,CAAR,CAzBJhB,WAyBI,CACRM,EAAA,CAAIY,QAAJ,CAAQ,GAAR,CAAcE,CACdC,SAAA,CAAMH,QAAAH,OAVG,CAAb,IAaIM,SAAA,CAAMf,CAAAS,OAGV,KADIO,WACJ,CADUtB,WACV,CADwBD,WACxB,CAAa,CAAb,CAAOuB,WAAP,EAAsC,GAAtC,GAAkBhB,CAAA,CAAEA,CAAAS,OAAF,CAAa,CAAb,CAAlB,CAAA,CACIT,CACA,CADIA,CAAAa,MAAA,CAAQ,CAAR,CAAW,EAAX,CACJ,CAAAG,WAAA,EAEoB,IAAxB,GAAIhB,CAAA,CAAEA,CAAAS,OAAF,CAAa,CAAb,CAAJ,GACIT,CADJ,CACQA,CAAAa,MAAA,CAAQ,CAAR,CAAW,EAAX,CADR,CAGA,OAAO,CAAEI,gBAAiBjB,CAAnB,CAAsBkB,cAAenB,CAArC,CAA6CoB,mBAAoBJ,QAAjE,CAzCsC,CAZkF;",
"sources":["node_modules/@formatjs/ecma402-abstract/NumberFormat/ToRawFixed.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$formatjs$ecma402_abstract$NumberFormat$ToRawFixed\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ToRawFixed = void 0;\nvar utils_1 = require(\"../utils\");\n/**\n * TODO: dedup with intl-pluralrules and support BigInt\n * https://tc39.es/ecma402/#sec-torawfixed\n * @param x a finite non-negative Number or BigInt\n * @param minFraction and integer between 0 and 20\n * @param maxFraction and integer between 0 and 20\n */\nfunction ToRawFixed(x, minFraction, maxFraction) {\n    var f = maxFraction;\n    var n = Math.round(x * Math.pow(10, f));\n    var xFinal = n / Math.pow(10, f);\n    // n is a positive integer, but it is possible to be greater than 1e21.\n    // In such case we will go the slow path.\n    // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring\n    var m;\n    if (n < 1e21) {\n        m = n.toString();\n    }\n    else {\n        m = n.toString();\n        var _a = m.split('e'), mantissa = _a[0], exponent = _a[1];\n        m = mantissa.replace('.', '');\n        m = m + utils_1.repeat('0', Math.max(+exponent - m.length + 1, 0));\n    }\n    var int;\n    if (f !== 0) {\n        var k = m.length;\n        if (k <= f) {\n            var z = utils_1.repeat('0', f + 1 - k);\n            m = z + m;\n            k = f + 1;\n        }\n        var a = m.slice(0, k - f);\n        var b = m.slice(k - f);\n        m = a + \".\" + b;\n        int = a.length;\n    }\n    else {\n        int = m.length;\n    }\n    var cut = maxFraction - minFraction;\n    while (cut > 0 && m[m.length - 1] === '0') {\n        m = m.slice(0, -1);\n        cut--;\n    }\n    if (m[m.length - 1] === '.') {\n        m = m.slice(0, -1);\n    }\n    return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };\n}\nexports.ToRawFixed = ToRawFixed;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ToRawFixed","utils_1","x","minFraction","maxFraction","n","Math","round","pow","xFinal","m","toString","_a","split","exponent","mantissa","replace","repeat","max","length","k","z","a","slice","b","int","cut","formattedString","roundedNumber","integerDigitsCount"]
}
