{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$triangle$TriangleWebGLRenderer.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,gFAAA,CAAoG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO5I,IAAIC,gBAAkBH,OAAA,CAAQ,kEAAR,CAAtB,CACII,MAAQJ,OAAA,CAAQ,qDAAR,CAuFZC,OAAAC,QAAA,CAtE4BG,QAAS,CAACC,QAAD,CAAWC,GAAX,CAAgBC,uBAAhB,CAAyCC,MAAzC,CAAiDC,YAAjD,CACrC,CACQC,uBAAAA,CAAW,IAAAA,SAEf,KAAIC,UAAYD,uBAAAE,aAAhB,CACIC,YAAcH,uBAAAI,aADlB;AAEIC,WAAaL,uBAAAM,aAEjBX,SAAAY,YAAA,CAAqBP,uBAArB,CAEAG,YAAAK,UAAA,CAAsBZ,GAAAa,EAAtB,CAA6Bb,GAAAc,EAA7B,CAAoCd,GAAAe,SAApC,CAAkDf,GAAAgB,OAAlD,CAA8DhB,GAAAiB,OAA9D,CAEAZ,UAAAa,SAAA,CAAmBhB,MAAAiB,OAAnB,CAEIhB,aAAJ,EAGIE,SAAAe,mBAAA,CAA6BjB,YAA7B,CAA2C,CAACD,MAAAmB,QAA5C,CAA6DrB,GAAAsB,cAA7D,CAAgF,CAACpB,MAAAqB,QAAjF,CAAkGvB,GAAAwB,cAAlG,CAIA,CADAjB,WAAAkB,EACA,CADgBzB,GAAAa,EAChB,CAAAN,WAAAmB,EAAA,CAAgB1B,GAAAc,EAPpB,GAWIP,WAAAkB,EACA,EADiBvB,MAAAmB,QACjB,CADkCrB,GAAAsB,cAClC,CAAAf,WAAAmB,EAAA,EAAiBxB,MAAAqB,QAAjB,CAAkCvB,GAAAwB,cAZtC,CAeAnB,UAAAsB,SAAA,CAAmBpB,WAAnB,CAAgCE,UAAhC,CAEImB;QAAAA,CAAK5B,GAAA6B,gBACLC,aAAAA,CAAK9B,GAAA+B,gBACLC,OAAAA,CAAQ9B,MAAA8B,MAARA,CAAuBhC,GAAAgC,MAE3B,IAAIhC,GAAAiC,SAAJ,CACA,CACQC,UAAAA,CAAW9B,uBAAA8B,SACf,KAAIC,cAAgBtC,KAAAuC,+BAAA,CAAqCpC,GAAAqC,UAArC,CAAoDrC,GAAAsC,UAApD,CAAoEN,MAApE,CAEpBE,WAAAK,GAAA,CAAcJ,aACdD,WAAAM,GAAA,CAAcL,aACdD,WAAAO,GAAA,CAAcN,aACdD,WAAAQ,GAAA,CAAcP,aASd/B,wBAAAuC,kBAAA,CAPS3C,GAAA4C,KAAAC,GAOT,CAPuBjB,QAOvB,CANS5B,GAAA4C,KAAAE,GAMT,CANuBhB,YAMvB,CALS9B,GAAA4C,KAAAG,GAKT,CALuBnB,QAKvB,CAJS5B,GAAA4C,KAAAI,GAIT,CAJuBlB,YAIvB,CAHS9B,GAAA4C,KAAAK,GAGT;AAHuBrB,QAGvB,CAFS5B,GAAA4C,KAAAM,GAET,CAFuBpB,YAEvB,CAOIvB,WAPJ,CAQIF,SARJ,CAhBJ,CA4BIL,GAAAmD,UAAJ,EAEIvD,eAAA,CAAgBQ,uBAAhB,CAA0BJ,GAA1B,CAA+BgC,MAA/B,CAAsCJ,QAAtC,CAA0CE,YAA1C,CAjER,CA1B4I;",
"sources":["node_modules/Phaser/src/gameobjects/shape/triangle/TriangleWebGLRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$triangle$TriangleWebGLRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar StrokePathWebGL = require('../StrokePathWebGL');\r\nvar Utils = require('../../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Triangle#renderWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Triangle} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar TriangleWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var pipeline = this.pipeline;\r\n\r\n    var camMatrix = pipeline._tempMatrix1;\r\n    var shapeMatrix = pipeline._tempMatrix2;\r\n    var calcMatrix = pipeline._tempMatrix3;\r\n\r\n    renderer.setPipeline(pipeline);\r\n\r\n    shapeMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\r\n\r\n    camMatrix.copyFrom(camera.matrix);\r\n\r\n    if (parentMatrix)\r\n    {\r\n        //  Multiply the camera by the parent matrix\r\n        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);\r\n\r\n        //  Undo the camera scroll\r\n        shapeMatrix.e = src.x;\r\n        shapeMatrix.f = src.y;\r\n    }\r\n    else\r\n    {\r\n        shapeMatrix.e -= camera.scrollX * src.scrollFactorX;\r\n        shapeMatrix.f -= camera.scrollY * src.scrollFactorY;\r\n    }\r\n\r\n    camMatrix.multiply(shapeMatrix, calcMatrix);\r\n\r\n    var dx = src._displayOriginX;\r\n    var dy = src._displayOriginY;\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    if (src.isFilled)\r\n    {\r\n        var fillTint = pipeline.fillTint;\r\n        var fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.fillColor, src.fillAlpha * alpha);\r\n\r\n        fillTint.TL = fillTintColor;\r\n        fillTint.TR = fillTintColor;\r\n        fillTint.BL = fillTintColor;\r\n        fillTint.BR = fillTintColor;\r\n\r\n        var x1 = src.geom.x1 - dx;\r\n        var y1 = src.geom.y1 - dy;\r\n        var x2 = src.geom.x2 - dx;\r\n        var y2 = src.geom.y2 - dy;\r\n        var x3 = src.geom.x3 - dx;\r\n        var y3 = src.geom.y3 - dy;\r\n\r\n        pipeline.batchFillTriangle(\r\n            x1,\r\n            y1,\r\n            x2,\r\n            y2,\r\n            x3,\r\n            y3,\r\n            shapeMatrix,\r\n            camMatrix\r\n        );\r\n    }\r\n\r\n    if (src.isStroked)\r\n    {\r\n        StrokePathWebGL(pipeline, src, alpha, dx, dy);\r\n    }\r\n};\r\n\r\nmodule.exports = TriangleWebGLRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","StrokePathWebGL","Utils","TriangleWebGLRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","pipeline","camMatrix","_tempMatrix1","shapeMatrix","_tempMatrix2","calcMatrix","_tempMatrix3","setPipeline","applyITRS","x","y","rotation","scaleX","scaleY","copyFrom","matrix","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","multiply","dx","_displayOriginX","dy","_displayOriginY","alpha","isFilled","fillTint","fillTintColor","getTintAppendFloatAlphaAndSwap","fillColor","fillAlpha","TL","TR","BL","BR","batchFillTriangle","geom","x1","y1","x2","y2","x3","y3","isStroked"]
}
