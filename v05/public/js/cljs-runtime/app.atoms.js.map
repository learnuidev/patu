{"version":3,"sources":["app/atoms.cljs"],"mappings":";;AAeA,AAAA,AAACA;AACD,AAAA,AAAA,AAAA,AAAA,AAACA;AAIA,AAAA,AAACA;AAIF,AAACC,AAAM,AAAA,AAAA,AAAA,AAACD;AAMR,AAAA,AAAME,AAAYC;AAAlB,AACE,AAAA,AAAKA;;AAEP,AAAKC,AAAc,AAAA,AAACJ;AAEpB,AAACK,AAAMD,AAAcF;AAErB,AAACD,AAAMG;AAKP,AAAA,AAACE,AAAOF;AAER,AAACH,AAAMG","names":["cljs.core.atom","cljs.core/deref","app.atoms/updater-fn","previous-value","app.atoms/counter-state","cljs.core.swap_BANG_","cljs.core/reset!"],"sourcesContent":["(ns app.atoms)\n\n;; Objectives\n;; 1 What is an atom\n;; 2 Atom creation\n;; 3 Read values out of an atom\n;; 4 Updating atoms\n\n;; 1 What is an atom?\n;; - A container for mutable values\n;; - Atoms enables you to model things that change over time\n\n;; 2 Atom Creation\n;; Atom function => atom object\n\n(atom 0)\n(atom #{:apples :oranges :bananas})\n\n;; 3 Reading Values out of Atom\n;; 3.1 @ prefix\n@(atom 0)\n\n\n;; 3.2 deref function\n(deref (atom {:name \"Jon Snow\"}))\n\n;; 4 Updating atom\n;; 4.1 swap!\n;; (swap! atom updater-fn)\n\n(defn updater-fn [previous-value]\n  (inc previous-value))\n\n(def counter-state (atom 0))\n\n(swap! counter-state updater-fn)\n\n(deref counter-state)\n\n;; reset!\n;; (reset! atom new-value)\n\n(reset! counter-state 0)\n\n(deref counter-state)"]}