{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$particles$ParticleManagerWebGLRenderer.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/particles/ParticleManagerWebGLRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$particles$ParticleManagerWebGLRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Particles.EmitterManager#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitterManager} emitterManager - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar ParticleManagerWebGLRenderer = function (renderer, emitterManager, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var emitters = emitterManager.emitters.list;\r\n    var emittersLength = emitters.length;\r\n\r\n    if (emittersLength === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var pipeline = this.pipeline;\r\n\r\n    var camMatrix = pipeline._tempMatrix1.copyFrom(camera.matrix);\r\n    var calcMatrix = pipeline._tempMatrix2;\r\n    var particleMatrix = pipeline._tempMatrix3;\r\n    var managerMatrix = pipeline._tempMatrix4.applyITRS(emitterManager.x, emitterManager.y, emitterManager.rotation, emitterManager.scaleX, emitterManager.scaleY);\r\n\r\n    camMatrix.multiply(managerMatrix);\r\n\r\n    renderer.setPipeline(pipeline);\r\n\r\n    var roundPixels = camera.roundPixels;\r\n    var texture = emitterManager.defaultFrame.glTexture;\r\n    var getTint = Utils.getTintAppendFloatAlphaAndSwap;\r\n\r\n    pipeline.setTexture2D(texture, 0);\r\n\r\n    for (var e = 0; e < emittersLength; e++)\r\n    {\r\n        var emitter = emitters[e];\r\n        var particles = emitter.alive;\r\n        var particleCount = particles.length;\r\n\r\n        if (!emitter.visible || particleCount === 0)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var scrollX = camera.scrollX * emitter.scrollFactorX;\r\n        var scrollY = camera.scrollY * emitter.scrollFactorY;\r\n\r\n        if (parentMatrix)\r\n        {\r\n            //  Multiply the camera by the parent matrix\r\n            camMatrix.multiplyWithOffset(parentMatrix, -scrollX, -scrollY);\r\n\r\n            scrollX = 0;\r\n            scrollY = 0;\r\n        }\r\n\r\n        if (renderer.setBlendMode(emitter.blendMode))\r\n        {\r\n            //  Rebind the texture if we've flushed\r\n            pipeline.setTexture2D(texture, 0);\r\n        }\r\n\r\n        var tintEffect = 0;\r\n\r\n        for (var i = 0; i < particleCount; i++)\r\n        {\r\n            var particle = particles[i];\r\n\r\n            var alpha = particle.alpha * camera.alpha;\r\n\r\n            if (alpha <= 0)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var frame = particle.frame;\r\n\r\n            var x = -(frame.halfWidth);\r\n            var y = -(frame.halfHeight);\r\n            var xw = x + frame.width;\r\n            var yh = y + frame.height;\r\n\r\n            particleMatrix.applyITRS(0, 0, particle.rotation, particle.scaleX, particle.scaleY);\r\n\r\n            particleMatrix.e = particle.x - scrollX;\r\n            particleMatrix.f = particle.y - scrollY;\r\n\r\n            camMatrix.multiply(particleMatrix, calcMatrix);\r\n\r\n            var tx0 = calcMatrix.getX(x, y);\r\n            var ty0 = calcMatrix.getY(x, y);\r\n    \r\n            var tx1 = calcMatrix.getX(x, yh);\r\n            var ty1 = calcMatrix.getY(x, yh);\r\n    \r\n            var tx2 = calcMatrix.getX(xw, yh);\r\n            var ty2 = calcMatrix.getY(xw, yh);\r\n    \r\n            var tx3 = calcMatrix.getX(xw, y);\r\n            var ty3 = calcMatrix.getY(xw, y);\r\n\r\n            if (roundPixels)\r\n            {\r\n                tx0 |= 0;\r\n                ty0 |= 0;\r\n\r\n                tx1 |= 0;\r\n                ty1 |= 0;\r\n\r\n                tx2 |= 0;\r\n                ty2 |= 0;\r\n\r\n                tx3 |= 0;\r\n                ty3 |= 0;\r\n            }\r\n\r\n            var tint = getTint(particle.tint, alpha);\r\n\r\n            if (pipeline.batchQuad(tx0, ty0, tx1, ty1, tx2, ty2, tx3, ty3, frame.u0, frame.v0, frame.u1, frame.v1, tint, tint, tint, tint, tintEffect))\r\n            {\r\n                pipeline.setTexture2D(texture, 0);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = ParticleManagerWebGLRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Utils","ParticleManagerWebGLRenderer","renderer","emitterManager","interpolationPercentage","camera","parentMatrix","emitters","list","emittersLength","length","pipeline","camMatrix","_tempMatrix1","copyFrom","matrix","calcMatrix","_tempMatrix2","particleMatrix","_tempMatrix3","managerMatrix","_tempMatrix4","applyITRS","x","y","rotation","scaleX","scaleY","multiply","setPipeline","roundPixels","texture","defaultFrame","glTexture","getTint","getTintAppendFloatAlphaAndSwap","setTexture2D","e","emitter","particles","alive","particleCount","visible","scrollX","scrollFactorX","scrollY","scrollFactorY","multiplyWithOffset","setBlendMode","blendMode","i","particle","alpha","frame","halfWidth","halfHeight","xw","width","yh","height","f","tx0","getX","ty0","getY","tx1","ty1","tx2","ty2","tx3","ty3","tint","batchQuad","u0","v0","u1","v1","tintEffect"]
}
