{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$lights$LightsManager.js",
"lineCount":6,
"mappings":"AAAAA,cAAA,gEAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOxHC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,MAAQJ,OAAA,CAAQ,yDAAR,CAAZ,CACIK,cAAgBL,OAAA,CAAQ,qFAAR,CADpB,CAEIM,MAAQN,OAAA,CAAQ,qDAAR,CAmBRO,QAAAA,CAAgB,IAAIJ,MAAJ,CAAU,CAE1BK,WAEAD,QAAuB,EACvB,CAWI,IAAAE,UAAA,CAAiB,EAUjB,KAAAC,OAAA;AAAc,EAYd,KAAAC,aAAA,CAAoB,EASpB,KAAAC,aAAA,CAAoB,CAAEC,EAAG,EAAL,CAAUC,EAAG,EAAb,CAAkBC,EAAG,EAArB,CAUpB,KAAAC,OAAA,CAAc,CAAA,CApDlB,CAL0B,CAoE1BC,OAAQA,QAAS,EACjB,CACI,IAAAD,OAAA,CAAc,CAAA,CAEd,OAAO,KAHX,CArE0B,CAmF1BE,QAASA,QAAS,EAClB,CACI,IAAAF,OAAA,CAAc,CAAA,CAEd,OAAO,KAHX,CApF0B,CAsG1BG,KAAMA,QAAS,CAACC,MAAD,CACf,CAaI,IAZA,IAAIV,OAAS,IAAAA,OAAb,CACIC,aAAe,IAAAA,aADnB,CAEIU,OAASX,MAAAW,OAFb,CAGIC,cAAgBF,MAAAG,EAAhBD,CAA2BF,MAAAI,MAA3BF,CAA0C,CAH9C,CAIIG,cAAgBL,MAAAM,EAAhBD,CAA2BL,MAAAO,OAA3BF,CAA2C,CAJ/C,CAKIG,cAAgBR,MAAAI,MAAhBI,CAA+BR,MAAAO,OAA/BC,EAAgD,CALpD,CAMIC,MAAQ,CAAEN,EAAG,CAAL,CAAQG,EAAG,CAAX,CANZ,CAOII,aAAeV,MAAAW,OAPnB,CAQIC,eAAiB,IAAAC,QAAAC,KAAAC,OAAAR,OARrB,CAYSS,MAFTzB,YAAAU,OAESe;AAFa,CAEtB,CAAoBA,KAApB,CAA4Bf,MAA5B,EAAsCV,YAAAU,OAAtC,CAA4DhB,aAAAgC,YAA5D,CAAuF,EAAED,KAAzF,CACA,CACI,IAAIE,MAAQ5B,MAAA,CAAO0B,KAAP,CAEZN,aAAAS,eAAA,CAA4BD,KAAAf,EAA5B,CAAqCe,KAAAZ,EAArC,CAA8CG,KAA9C,CAIA,KAAIW,GAAKlB,aAALkB,EAAsBX,KAAAN,EAAtBiB,CAAiCpB,MAAAqB,QAAjCD,CAAkDF,KAAAI,cAAlDF,CAAwEpB,MAAAuB,KAAxEH,CAAJ,CACII,GAAKnB,aAALmB,EAAsBZ,cAAtBY,EAAwCf,KAAAH,EAAxCkB,CAAmDxB,MAAAyB,QAAnDD,CAAoEN,KAAAQ,cAApEF,CAA2FxB,MAAAuB,KAA3FC,EACWG,KAAAC,KAAAC,CAAUT,EAAVS,CAAeT,EAAfS,CAAoBL,EAApBK,CAAyBL,EAAzBK,CAEf,CAAeX,KAAAY,OAAf,CAA8BtB,YAA9B,EAEIjB,YAAAwC,KAAA,CAAkBzC,MAAA,CAAO0B,KAAP,CAAlB,CAbR,CAiBA,MAAOzB,aA/BX,CAvG0B,CAmJ1ByC,aAAcA,QAAS,CAACC,QAAD,CACvB,CACI,GAAKA,QAAL,CAAA,CAQA,IAHA,IAAI3C,OAAS,IAAAA,OAAb,CACIW,OAASX,MAAAW,OADb;AAGSe,MAAQ,CAAjB,CAAoBA,KAApB,CAA4Bf,MAA5B,CAAoC,EAAEe,KAAtC,CAEIiB,QAAA,CAAS3C,MAAA,CAAO0B,KAAP,CAAT,CAGJ,OAAO,KAbP,CADJ,CApJ0B,CA+K1BkB,gBAAiBA,QAAS,CAACC,GAAD,CAC1B,CACQC,GAAAA,CAAQlD,KAAAmD,qBAAA,CAA2BF,GAA3B,CAEZ,KAAA3C,aAAAC,EAAA,CAAsB2C,GAAA,CAAM,CAAN,CACtB,KAAA5C,aAAAE,EAAA,CAAsB0C,GAAA,CAAM,CAAN,CACtB,KAAA5C,aAAAG,EAAA,CAAsByC,GAAA,CAAM,CAAN,CAEtB,OAAO,KAPX,CAhL0B,CAkM1BE,oBAAqBA,QAAS,EAC9B,CACI,MAAO,GADX,CAnM0B,CA+M1BC,cAAeA,QAAS,EACxB,CACI,MAAO,KAAAjD,OAAAW,OADX,CAhN0B,CAkO1BuC,SAAUA,QAAS,CAACrC,CAAD,CAAIG,CAAJ,CAAOwB,MAAP,CAAeK,GAAf,CAAoBM,SAApB,CACnB,CAIItC,CAAA,CAAWuC,IAAAA,EAAP,GAACvC,CAAD,CAAoB,CAApB,CAA0BA,CAC9BG,EAAA,CAAWoC,IAAAA,EAAP,GAACpC,CAAD,CAAoB,CAApB,CAA0BA,CAE9BwB,OAAA,CAAqBY,IAAAA,EAAZ,GAACZ,MAAD,CAAyB,GAAzB,CAAiCA,MAC1CW,UAAA,CAA2BC,IAAAA,EAAf,GAACD,SAAD,CAA4B,CAA5B,CAAkCA,SAE9CL,IAAA,CAAQlD,KAAAmD,qBAAA,CAJOK,IAAAA,EAATP;AAACA,GAADA,CAAsB,QAAtBA,CAAiCA,GAI/B,CAGR,IAA4B,CAA5B,CAAI,IAAA9C,UAAAY,OAAJ,CACA,CACI,IAAAiB,MAAQ,IAAA7B,UAAAsD,IAAA,EACRzB,MAAA0B,IAAA,CAAUzC,CAAV,CAAaG,CAAb,CAAgBwB,MAAhB,CAAwBM,GAAA,CAAM,CAAN,CAAxB,CAAkCA,GAAA,CAAM,CAAN,CAAlC,CAA4CA,GAAA,CAAM,CAAN,CAA5C,CAAsDK,SAAtD,CAFJ,CADA,IAOIvB,MAAA,CAAQ,IAAIlC,KAAJ,CAAUmB,CAAV,CAAaG,CAAb,CAAgBwB,MAAhB,CAAwBM,GAAA,CAAM,CAAN,CAAxB,CAAkCA,GAAA,CAAM,CAAN,CAAlC,CAA4CA,GAAA,CAAM,CAAN,CAA5C,CAAsDK,SAAtD,CAGZ,KAAAnD,OAAAyC,KAAA,CAAiBb,KAAjB,CAEA,OAAOA,MAzBX,CAnO0B,CAyQ1B2B,YAAaA,QAAS,CAAC3B,KAAD,CACtB,CACI,IAAIF,MAAQ,IAAA1B,OAAAwD,QAAA,CAAoB5B,KAApB,CAEC,EAAb,EAAIF,KAAJ,GAEI,IAAA3B,UAAA0C,KAAA,CAAoBb,KAApB,CACA,CAAA,IAAA5B,OAAAyD,OAAA,CAAmB/B,KAAnB,CAA0B,CAA1B,CAHJ,CAMA,OAAO,KATX,CA1Q0B,CA+R1BgC,SAAUA,QAAS,EACnB,CACI,IAAA,CAA4B,CAA5B,CAAO,IAAA1D,OAAAW,OAAP,CAAA,CAEI,IAAAZ,UAAA0C,KAAA,CAAoB,IAAAzC,OAAAqD,IAAA,EAApB,CAGJ,KAAAnD,aAAA,CAAoB,CAAEC,EAAG,EAAL,CAAUC,EAAG,EAAb,CAAkBC,EAAG,EAArB,CACpB,KAAAJ,aAAAU,OAAA;AAA2B,CAC3B,KAAAX,OAAAW,OAAA,CAAqB,CARzB,CAhS0B,CAmT1BgD,QAASA,QAAS,EAClB,CACI,IAAAD,SAAA,EADJ,CApT0B,CAAV,CA0TpBnE,OAAAC,QAAA,CAAiBK,OAvV2G;",
"sources":["node_modules/Phaser/src/gameobjects/lights/LightsManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$lights$LightsManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Light = require('./Light');\r\nvar LightPipeline = require('../../renderer/webgl/pipelines/ForwardDiffuseLightPipeline');\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * @callback LightForEach\r\n *\r\n * @param {Phaser.GameObjects.Light} light - The Light.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Manages Lights for a Scene.\r\n *\r\n * Affects the rendering of Game Objects using the `Light2D` pipeline.\r\n *\r\n * @class LightsManager\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n */\r\nvar LightsManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function LightsManager ()\r\n    {\r\n        /**\r\n         * The pool of Lights.\r\n         *\r\n         * Used to recycle removed Lights for a more efficient use of memory.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#lightPool\r\n         * @type {Phaser.GameObjects.Light[]}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.lightPool = [];\r\n\r\n        /**\r\n         * The Lights in the Scene.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#lights\r\n         * @type {Phaser.GameObjects.Light[]}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.lights = [];\r\n\r\n        /**\r\n         * Lights that have been culled from a Camera's viewport.\r\n         *\r\n         * Lights in this list will not be rendered.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#culledLights\r\n         * @type {Phaser.GameObjects.Light[]}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.culledLights = [];\r\n\r\n        /**\r\n         * The ambient color.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#ambientColor\r\n         * @type {{ r: number, g: number, b: number }}\r\n         * @since 3.0.0\r\n         */\r\n        this.ambientColor = { r: 0.1, g: 0.1, b: 0.1 };\r\n\r\n        /**\r\n         * Whether the Lights Manager is enabled.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#active\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.active = false;\r\n    },\r\n\r\n    /**\r\n     * Enable the Lights Manager.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#enable\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    enable: function ()\r\n    {\r\n        this.active = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Disable the Lights Manager.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#disable\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    disable: function ()\r\n    {\r\n        this.active = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Cull any Lights that aren't visible to the given Camera.\r\n     *\r\n     * Culling Lights improves performance by ensuring that only Lights within a Camera's viewport are rendered.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to cull Lights for.\r\n     *\r\n     * @return {Phaser.GameObjects.Light[]} The culled Lights.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        var lights = this.lights;\r\n        var culledLights = this.culledLights;\r\n        var length = lights.length;\r\n        var cameraCenterX = camera.x + camera.width / 2.0;\r\n        var cameraCenterY = camera.y + camera.height / 2.0;\r\n        var cameraRadius = (camera.width + camera.height) / 2.0;\r\n        var point = { x: 0, y: 0 };\r\n        var cameraMatrix = camera.matrix;\r\n        var viewportHeight = this.systems.game.config.height;\r\n\r\n        culledLights.length = 0;\r\n\r\n        for (var index = 0; index < length && culledLights.length < LightPipeline.LIGHT_COUNT; ++index)\r\n        {\r\n            var light = lights[index];\r\n\r\n            cameraMatrix.transformPoint(light.x, light.y, point);\r\n\r\n            // We'll just use bounding spheres to test\r\n            // if lights should be rendered\r\n            var dx = cameraCenterX - (point.x - (camera.scrollX * light.scrollFactorX * camera.zoom));\r\n            var dy = cameraCenterY - (viewportHeight - (point.y - (camera.scrollY * light.scrollFactorY) * camera.zoom));\r\n            var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            if (distance < light.radius + cameraRadius)\r\n            {\r\n                culledLights.push(lights[index]);\r\n            }\r\n        }\r\n\r\n        return culledLights;\r\n    },\r\n\r\n    /**\r\n     * Iterate over each Light with a callback.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#forEachLight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {LightForEach} callback - The callback that is called with each Light.\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    forEachLight: function (callback)\r\n    {\r\n        if (!callback)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var lights = this.lights;\r\n        var length = lights.length;\r\n\r\n        for (var index = 0; index < length; ++index)\r\n        {\r\n            callback(lights[index]);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the ambient light color.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#setAmbientColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rgb - The integer RGB color of the ambient light.\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    setAmbientColor: function (rgb)\r\n    {\r\n        var color = Utils.getFloatsFromUintRGB(rgb);\r\n\r\n        this.ambientColor.r = color[0];\r\n        this.ambientColor.g = color[1];\r\n        this.ambientColor.b = color[2];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the maximum number of Lights allowed to appear at once.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#getMaxVisibleLights\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The maximum number of Lights allowed to appear at once.\r\n     */\r\n    getMaxVisibleLights: function ()\r\n    {\r\n        return 10;\r\n    },\r\n\r\n    /**\r\n     * Get the number of Lights managed by this Lights Manager.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#getLightCount\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The number of Lights managed by this Lights Manager.\r\n     */\r\n    getLightCount: function ()\r\n    {\r\n        return this.lights.length;\r\n    },\r\n\r\n    /**\r\n     * Add a Light.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#addLight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal position of the Light.\r\n     * @param {number} [y=0] - The vertical position of the Light.\r\n     * @param {number} [radius=100] - The radius of the Light.\r\n     * @param {number} [rgb=0xffffff] - The integer RGB color of the light.\r\n     * @param {number} [intensity=1] - The intensity of the Light.\r\n     *\r\n     * @return {Phaser.GameObjects.Light} The Light that was added.\r\n     */\r\n    addLight: function (x, y, radius, rgb, intensity)\r\n    {\r\n        var color = null;\r\n        var light = null;\r\n\r\n        x = (x === undefined) ? 0.0 : x;\r\n        y = (y === undefined) ? 0.0 : y;\r\n        rgb = (rgb === undefined) ? 0xffffff : rgb;\r\n        radius = (radius === undefined) ? 100.0 : radius;\r\n        intensity = (intensity === undefined) ? 1.0 : intensity;\r\n\r\n        color = Utils.getFloatsFromUintRGB(rgb);\r\n        light = null;\r\n\r\n        if (this.lightPool.length > 0)\r\n        {\r\n            light = this.lightPool.pop();\r\n            light.set(x, y, radius, color[0], color[1], color[2], intensity);\r\n        }\r\n        else\r\n        {\r\n            light = new Light(x, y, radius, color[0], color[1], color[2], intensity);\r\n        }\r\n\r\n        this.lights.push(light);\r\n\r\n        return light;\r\n    },\r\n\r\n    /**\r\n     * Remove a Light.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#removeLight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Light} light - The Light to remove.\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    removeLight: function (light)\r\n    {\r\n        var index = this.lights.indexOf(light);\r\n\r\n        if (index >= 0)\r\n        {\r\n            this.lightPool.push(light);\r\n            this.lights.splice(index, 1);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shut down the Lights Manager.\r\n     *\r\n     * Recycles all active Lights into the Light pool, resets ambient light color and clears the lists of Lights and\r\n     * culled Lights.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        while (this.lights.length > 0)\r\n        {\r\n            this.lightPool.push(this.lights.pop());\r\n        }\r\n\r\n        this.ambientColor = { r: 0.1, g: 0.1, b: 0.1 };\r\n        this.culledLights.length = 0;\r\n        this.lights.length = 0;\r\n    },\r\n\r\n    /**\r\n     * Destroy the Lights Manager.\r\n     *\r\n     * Cleans up all references by calling {@link Phaser.GameObjects.LightsManager#shutdown}.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = LightsManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Light","LightPipeline","Utils","LightsManager","initialize","lightPool","lights","culledLights","ambientColor","r","g","b","active","enable","disable","cull","camera","length","cameraCenterX","x","width","cameraCenterY","y","height","cameraRadius","point","cameraMatrix","matrix","viewportHeight","systems","game","config","index","LIGHT_COUNT","light","transformPoint","dx","scrollX","scrollFactorX","zoom","dy","scrollY","scrollFactorY","Math","sqrt","distance","radius","push","forEachLight","callback","setAmbientColor","rgb","color","getFloatsFromUintRGB","getMaxVisibleLights","getLightCount","addLight","intensity","undefined","pop","set","removeLight","indexOf","splice","shutdown","destroy"]
}
