{
"version":3,
"file":"module$node_modules$$formatjs$ecma402_abstract$DateTimeFormat$PartitionDateTimeRangePattern.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@formatjs/ecma402-abstract/DateTimeFormat/PartitionDateTimeRangePattern.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$formatjs$ecma402_abstract$DateTimeFormat$PartitionDateTimeRangePattern\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartitionDateTimeRangePattern = void 0;\nvar _262_1 = require(\"../262\");\nvar ToLocalTime_1 = require(\"./ToLocalTime\");\nvar FormatDateTimePattern_1 = require(\"./FormatDateTimePattern\");\nvar PartitionPattern_1 = require(\"../PartitionPattern\");\nvar TABLE_2_FIELDS = [\n    'era',\n    'year',\n    'month',\n    'day',\n    'ampm',\n    'hour',\n    'minute',\n    'second',\n];\nfunction PartitionDateTimeRangePattern(dtf, x, y, implDetails) {\n    x = _262_1.TimeClip(x);\n    if (isNaN(x)) {\n        throw new RangeError('Invalid start time');\n    }\n    y = _262_1.TimeClip(y);\n    if (isNaN(y)) {\n        throw new RangeError('Invalid end time');\n    }\n    /** IMPL START */\n    var getInternalSlots = implDetails.getInternalSlots, tzData = implDetails.tzData;\n    var internalSlots = getInternalSlots(dtf);\n    /** IMPL END */\n    var tm1 = ToLocalTime_1.ToLocalTime(x, \n    // @ts-ignore\n    internalSlots.calendar, internalSlots.timeZone, { tzData: tzData });\n    var tm2 = ToLocalTime_1.ToLocalTime(y, \n    // @ts-ignore\n    internalSlots.calendar, internalSlots.timeZone, { tzData: tzData });\n    var pattern = internalSlots.pattern, rangePatterns = internalSlots.rangePatterns;\n    var rangePattern;\n    var dateFieldsPracticallyEqual = true;\n    var patternContainsLargerDateField = false;\n    for (var _i = 0, TABLE_2_FIELDS_1 = TABLE_2_FIELDS; _i < TABLE_2_FIELDS_1.length; _i++) {\n        var fieldName = TABLE_2_FIELDS_1[_i];\n        if (dateFieldsPracticallyEqual && !patternContainsLargerDateField) {\n            if (fieldName === 'ampm') {\n                var rp = rangePatterns.ampm;\n                if (rangePattern !== undefined && rp === undefined) {\n                    patternContainsLargerDateField = true;\n                }\n                else {\n                    var v1 = tm1.hour;\n                    var v2 = tm2.hour;\n                    if ((v1 > 11 && v2 < 11) || (v1 < 11 && v2 > 11)) {\n                        dateFieldsPracticallyEqual = false;\n                    }\n                    rangePattern = rp;\n                }\n            }\n            else {\n                var rp = rangePatterns[fieldName];\n                if (rangePattern !== undefined && rp === undefined) {\n                    patternContainsLargerDateField = true;\n                }\n                else {\n                    var v1 = tm1[fieldName];\n                    var v2 = tm2[fieldName];\n                    if (!_262_1.SameValue(v1, v2)) {\n                        dateFieldsPracticallyEqual = false;\n                    }\n                    rangePattern = rp;\n                }\n            }\n        }\n    }\n    if (dateFieldsPracticallyEqual) {\n        var result_2 = FormatDateTimePattern_1.FormatDateTimePattern(dtf, PartitionPattern_1.PartitionPattern(pattern), x, implDetails);\n        for (var _a = 0, result_1 = result_2; _a < result_1.length; _a++) {\n            var r = result_1[_a];\n            r.source = \"shared\" /* shared */;\n        }\n        return result_2;\n    }\n    var result = [];\n    if (rangePattern === undefined) {\n        rangePattern = rangePatterns.default;\n        /** IMPL DETAILS */\n        // Now we have to replace {0} & {1} with actual pattern\n        for (var _b = 0, _c = rangePattern.patternParts; _b < _c.length; _b++) {\n            var patternPart = _c[_b];\n            if (patternPart.pattern === '{0}' || patternPart.pattern === '{1}') {\n                patternPart.pattern = pattern;\n            }\n        }\n    }\n    for (var _d = 0, _e = rangePattern.patternParts; _d < _e.length; _d++) {\n        var rangePatternPart = _e[_d];\n        var source = rangePatternPart.source, pattern_1 = rangePatternPart.pattern;\n        var z = void 0;\n        if (source === \"startRange\" /* startRange */ ||\n            source === \"shared\" /* shared */) {\n            z = x;\n        }\n        else {\n            z = y;\n        }\n        var patternParts = PartitionPattern_1.PartitionPattern(pattern_1);\n        var partResult = FormatDateTimePattern_1.FormatDateTimePattern(dtf, patternParts, z, implDetails);\n        for (var _f = 0, partResult_1 = partResult; _f < partResult_1.length; _f++) {\n            var r = partResult_1[_f];\n            r.source = source;\n        }\n        result = result.concat(partResult);\n    }\n    return result;\n}\nexports.PartitionDateTimeRangePattern = PartitionDateTimeRangePattern;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","PartitionDateTimeRangePattern","_262_1","ToLocalTime_1","FormatDateTimePattern_1","PartitionPattern_1","TABLE_2_FIELDS","dtf","x","y","implDetails","TimeClip","isNaN","RangeError","getInternalSlots","tzData","internalSlots","tm1","ToLocalTime","calendar","timeZone","tm2","pattern","rangePatterns","rangePattern","dateFieldsPracticallyEqual","patternContainsLargerDateField","_i","length","fieldName","rp","ampm","undefined","v1","hour","v2","SameValue","result_2","FormatDateTimePattern","PartitionPattern","_a","r","source","result","_c","default","_b","patternParts","patternPart","_d","_e","rangePatternPart","pattern_1","z","partResult","_f","partResult_1","concat"]
}
