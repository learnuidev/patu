{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$curve$CurveFactory.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,oEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO5HC,MAAAA,CAAoBH,OAAA,CAAQ,8DAAR,CACxB,KAAII,MAAQJ,OAAA,CAAQ,8DAAR,CAiCZG,OAAAE,SAAA,CAA2B,OAA3B,CAAoC,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,KAAP,CAAcC,SAAd,CAAyBC,SAAzB,CAC7C,CACI,MAAO,KAAAC,YAAAC,IAAA,CAAqB,IAAIR,KAAJ,CAAU,IAAAS,MAAV,CAAsBP,CAAtB,CAAyBC,CAAzB,CAA4BC,KAA5B,CAAmCC,SAAnC,CAA8CC,SAA9C,CAArB,CADX,CADA,CAzCgI;",
"sources":["node_modules/Phaser/src/gameobjects/shape/curve/CurveFactory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$curve$CurveFactory\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GameObjectFactory = require('../../GameObjectFactory');\r\nvar Curve = require('./Curve');\r\n\r\n/**\r\n * Creates a new Curve Shape Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the Curve Game Object has been built into Phaser.\r\n * \r\n * The Curve Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * To render a Curve Shape you must first create a `Phaser.Curves.Curve` object, then pass it to\r\n * the Curve Shape in the constructor.\r\n * \r\n * The Curve shape also has a `smoothness` property and corresponding `setSmoothness` method.\r\n * This allows you to control how smooth the shape renders in WebGL, by controlling the number of iterations\r\n * that take place during construction. Increase and decrease the default value for smoother, or more\r\n * jagged, shapes.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#curve\r\n * @since 3.13.0\r\n *\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {Phaser.Curves.Curve} [curve] - The Curve object to use to create the Shape.\r\n * @param {number} [fillColor] - The color the curve will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the curve will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n *\r\n * @return {Phaser.GameObjects.Curve} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('curve', function (x, y, curve, fillColor, fillAlpha)\r\n{\r\n    return this.displayList.add(new Curve(this.scene, x, y, curve, fillColor, fillAlpha));\r\n});\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GameObjectFactory","Curve","register","x","y","curve","fillColor","fillAlpha","displayList","add","scene"]
}
