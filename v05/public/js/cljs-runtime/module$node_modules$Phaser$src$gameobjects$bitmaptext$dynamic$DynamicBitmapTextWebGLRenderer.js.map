{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$bitmaptext$dynamic$DynamicBitmapTextWebGLRenderer.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextWebGLRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$bitmaptext$dynamic$DynamicBitmapTextWebGLRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Utils = require('../../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.DynamicBitmapText#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.DynamicBitmapText} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar DynamicBitmapTextWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var text = src.text;\r\n    var textLength = text.length;\r\n\r\n    if (textLength === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var pipeline = this.pipeline;\r\n\r\n    renderer.setPipeline(pipeline, src);\r\n\r\n    var crop = (src.cropWidth > 0 || src.cropHeight > 0);\r\n\r\n    if (crop)\r\n    {\r\n        pipeline.flush();\r\n\r\n        renderer.pushScissor(\r\n            src.x,\r\n            src.y,\r\n            src.cropWidth * src.scaleX,\r\n            src.cropHeight * src.scaleY\r\n        );\r\n    }\r\n\r\n    var camMatrix = pipeline._tempMatrix1;\r\n    var spriteMatrix = pipeline._tempMatrix2;\r\n    var calcMatrix = pipeline._tempMatrix3;\r\n    var fontMatrix = pipeline._tempMatrix4;\r\n\r\n    spriteMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\r\n\r\n    camMatrix.copyFrom(camera.matrix);\r\n\r\n    if (parentMatrix)\r\n    {\r\n        //  Multiply the camera by the parent matrix\r\n        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);\r\n\r\n        //  Undo the camera scroll\r\n        spriteMatrix.e = src.x;\r\n        spriteMatrix.f = src.y;\r\n\r\n        //  Multiply by the Sprite matrix, store result in calcMatrix\r\n        camMatrix.multiply(spriteMatrix, calcMatrix);\r\n    }\r\n    else\r\n    {\r\n        spriteMatrix.e -= camera.scrollX * src.scrollFactorX;\r\n        spriteMatrix.f -= camera.scrollY * src.scrollFactorY;\r\n\r\n        //  Multiply by the Sprite matrix, store result in calcMatrix\r\n        camMatrix.multiply(spriteMatrix, calcMatrix);\r\n    }\r\n\r\n    var frame = src.frame;\r\n    var texture = frame.glTexture;\r\n    var textureX = frame.cutX;\r\n    var textureY = frame.cutY;\r\n    var textureWidth = texture.width;\r\n    var textureHeight = texture.height;\r\n\r\n    var tintEffect = (src._isTinted && src.tintFill);\r\n    var tintTL = Utils.getTintAppendFloatAlpha(src._tintTL, camera.alpha * src._alphaTL);\r\n    var tintTR = Utils.getTintAppendFloatAlpha(src._tintTR, camera.alpha * src._alphaTR);\r\n    var tintBL = Utils.getTintAppendFloatAlpha(src._tintBL, camera.alpha * src._alphaBL);\r\n    var tintBR = Utils.getTintAppendFloatAlpha(src._tintBR, camera.alpha * src._alphaBR);\r\n\r\n    pipeline.setTexture2D(texture, 0);\r\n\r\n    var xAdvance = 0;\r\n    var yAdvance = 0;\r\n    var charCode = 0;\r\n    var lastCharCode = 0;\r\n    var letterSpacing = src.letterSpacing;\r\n    var glyph;\r\n    var glyphX = 0;\r\n    var glyphY = 0;\r\n    var glyphW = 0;\r\n    var glyphH = 0;\r\n    var lastGlyph;\r\n    var scrollX = src.scrollX;\r\n    var scrollY = src.scrollY;\r\n\r\n    var fontData = src.fontData;\r\n    var chars = fontData.chars;\r\n    var lineHeight = fontData.lineHeight;\r\n    var scale = (src.fontSize / fontData.size);\r\n    var rotation = 0;\r\n\r\n    var align = src._align;\r\n    var currentLine = 0;\r\n    var lineOffsetX = 0;\r\n\r\n    //  Update the bounds - skipped internally if not dirty\r\n    src.getTextBounds(false);\r\n\r\n    var lineData = src._bounds.lines;\r\n\r\n    if (align === 1)\r\n    {\r\n        lineOffsetX = (lineData.longest - lineData.lengths[0]) / 2;\r\n    }\r\n    else if (align === 2)\r\n    {\r\n        lineOffsetX = (lineData.longest - lineData.lengths[0]);\r\n    }\r\n\r\n    var roundPixels = camera.roundPixels;\r\n    var displayCallback = src.displayCallback;\r\n    var callbackData = src.callbackData;\r\n\r\n    for (var i = 0; i < textLength; i++)\r\n    {\r\n        charCode = text.charCodeAt(i);\r\n\r\n        //  Carriage-return\r\n        if (charCode === 10)\r\n        {\r\n            currentLine++;\r\n\r\n            if (align === 1)\r\n            {\r\n                lineOffsetX = (lineData.longest - lineData.lengths[currentLine]) / 2;\r\n            }\r\n            else if (align === 2)\r\n            {\r\n                lineOffsetX = (lineData.longest - lineData.lengths[currentLine]);\r\n            }\r\n\r\n            xAdvance = 0;\r\n            yAdvance += lineHeight;\r\n            lastGlyph = null;\r\n\r\n            continue;\r\n        }\r\n\r\n        glyph = chars[charCode];\r\n\r\n        if (!glyph)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        glyphX = textureX + glyph.x;\r\n        glyphY = textureY + glyph.y;\r\n\r\n        glyphW = glyph.width;\r\n        glyphH = glyph.height;\r\n\r\n        var x = (glyph.xOffset + xAdvance) - scrollX;\r\n        var y = (glyph.yOffset + yAdvance) - scrollY;\r\n\r\n        if (lastGlyph !== null)\r\n        {\r\n            var kerningOffset = glyph.kerning[lastCharCode];\r\n            x += (kerningOffset !== undefined) ? kerningOffset : 0;\r\n        }\r\n\r\n        xAdvance += glyph.xAdvance + letterSpacing;\r\n        lastGlyph = glyph;\r\n        lastCharCode = charCode;\r\n\r\n        //  Nothing to render or a space? Then skip to the next glyph\r\n        if (glyphW === 0 || glyphH === 0 || charCode === 32)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        scale = (src.fontSize / src.fontData.size);\r\n        rotation = 0;\r\n\r\n        if (displayCallback)\r\n        {\r\n            callbackData.color = 0;\r\n            callbackData.tint.topLeft = tintTL;\r\n            callbackData.tint.topRight = tintTR;\r\n            callbackData.tint.bottomLeft = tintBL;\r\n            callbackData.tint.bottomRight = tintBR;\r\n            callbackData.index = i;\r\n            callbackData.charCode = charCode;\r\n            callbackData.x = x;\r\n            callbackData.y = y;\r\n            callbackData.scale = scale;\r\n            callbackData.rotation = rotation;\r\n            callbackData.data = glyph.data;\r\n\r\n            var output = displayCallback(callbackData);\r\n\r\n            x = output.x;\r\n            y = output.y;\r\n            scale = output.scale;\r\n            rotation = output.rotation;\r\n\r\n            if (output.color)\r\n            {\r\n                tintTL = output.color;\r\n                tintTR = output.color;\r\n                tintBL = output.color;\r\n                tintBR = output.color;\r\n            }\r\n            else\r\n            {\r\n                tintTL = output.tint.topLeft;\r\n                tintTR = output.tint.topRight;\r\n                tintBL = output.tint.bottomLeft;\r\n                tintBR = output.tint.bottomRight;\r\n            }\r\n\r\n            tintTL = Utils.getTintAppendFloatAlpha(tintTL, camera.alpha * src._alphaTL);\r\n            tintTR = Utils.getTintAppendFloatAlpha(tintTR, camera.alpha * src._alphaTR);\r\n            tintBL = Utils.getTintAppendFloatAlpha(tintBL, camera.alpha * src._alphaBL);\r\n            tintBR = Utils.getTintAppendFloatAlpha(tintBR, camera.alpha * src._alphaBR);\r\n        }\r\n\r\n        x *= scale;\r\n        y *= scale;\r\n\r\n        x -= src.displayOriginX;\r\n        y -= src.displayOriginY;\r\n\r\n        x += lineOffsetX;\r\n\r\n        fontMatrix.applyITRS(x, y, rotation, scale, scale);\r\n\r\n        calcMatrix.multiply(fontMatrix, spriteMatrix);\r\n\r\n        var u0 = glyphX / textureWidth;\r\n        var v0 = glyphY / textureHeight;\r\n        var u1 = (glyphX + glyphW) / textureWidth;\r\n        var v1 = (glyphY + glyphH) / textureHeight;\r\n\r\n        var xw = glyphW;\r\n        var yh = glyphH;\r\n\r\n        var tx0 = spriteMatrix.e;\r\n        var ty0 = spriteMatrix.f;\r\n\r\n        var tx1 = yh * spriteMatrix.c + spriteMatrix.e;\r\n        var ty1 = yh * spriteMatrix.d + spriteMatrix.f;\r\n\r\n        var tx2 = xw * spriteMatrix.a + yh * spriteMatrix.c + spriteMatrix.e;\r\n        var ty2 = xw * spriteMatrix.b + yh * spriteMatrix.d + spriteMatrix.f;\r\n\r\n        var tx3 = xw * spriteMatrix.a + spriteMatrix.e;\r\n        var ty3 = xw * spriteMatrix.b + spriteMatrix.f;\r\n\r\n        if (roundPixels)\r\n        {\r\n            tx0 |= 0;\r\n            ty0 |= 0;\r\n\r\n            tx1 |= 0;\r\n            ty1 |= 0;\r\n\r\n            tx2 |= 0;\r\n            ty2 |= 0;\r\n\r\n            tx3 |= 0;\r\n            ty3 |= 0;\r\n        }\r\n\r\n        pipeline.batchQuad(tx0, ty0, tx1, ty1, tx2, ty2, tx3, ty3, u0, v0, u1, v1, tintTL, tintTR, tintBL, tintBR, tintEffect);\r\n    }\r\n\r\n    if (crop)\r\n    {\r\n        pipeline.flush();\r\n\r\n        renderer.popScissor();\r\n    }\r\n};\r\n\r\nmodule.exports = DynamicBitmapTextWebGLRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Utils","DynamicBitmapTextWebGLRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","text","textLength","length","pipeline","setPipeline","crop","cropWidth","cropHeight","flush","pushScissor","x","y","scaleX","scaleY","camMatrix","_tempMatrix1","spriteMatrix","_tempMatrix2","calcMatrix","_tempMatrix3","fontMatrix","_tempMatrix4","applyITRS","rotation","copyFrom","matrix","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","multiply","frame","texture","glTexture","textureX","cutX","textureY","cutY","textureWidth","width","textureHeight","height","tintEffect","_isTinted","tintFill","tintTL","getTintAppendFloatAlpha","_tintTL","alpha","_alphaTL","tintTR","_tintTR","_alphaTR","tintBL","_tintBL","_alphaBL","tintBR","_tintBR","_alphaBR","setTexture2D","yAdvance","xAdvance","lastCharCode","letterSpacing","glyph","fontData","chars","lineHeight","align","_align","currentLine","lineOffsetX","getTextBounds","lineData","_bounds","lines","longest","lengths","roundPixels","displayCallback","callbackData","i","charCode","charCodeAt","lastGlyph","glyphX","glyphY","glyphW","glyphH","xOffset","yOffset","kerningOffset","kerning","undefined","scale","fontSize","size","color","tint","topLeft","topRight","bottomLeft","bottomRight","index","data","output","displayOriginX","displayOriginY","u0","v0","u1","v1","yh","tx0","ty0","tx1","c","ty1","d","tx2","xw","a","ty2","b","tx3","ty3","batchQuad","popScissor"]
}
