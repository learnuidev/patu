{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$Factory.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/Factory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$Factory\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Bodies = require('./lib/factory/Bodies');\r\nvar Class = require('../../utils/Class');\r\nvar Composites = require('./lib/factory/Composites');\r\nvar Constraint = require('./lib/constraint/Constraint');\r\nvar MatterGameObject = require('./MatterGameObject');\r\nvar MatterImage = require('./MatterImage');\r\nvar MatterSprite = require('./MatterSprite');\r\nvar MatterTileBody = require('./MatterTileBody');\r\nvar PointerConstraint = require('./PointerConstraint');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class Factory\r\n * @memberOf Phaser.Physics.Matter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Matter.World} world - [description]\r\n */\r\nvar Factory = new Class({\r\n\r\n    initialize:\r\n\r\n    function Factory (world)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.Factory#world\r\n         * @type {Phaser.Physics.Matter.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.Factory#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = world.scene;\r\n\r\n        /**\r\n         * A reference to the Scene.Systems this Matter Physics instance belongs to.\r\n         *\r\n         * @name Phaser.Physics.Matter.Factory#sys\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.sys = world.scene.sys;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#rectangle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {MatterJS.Body} A Matter JS Body.\r\n     */\r\n    rectangle: function (x, y, width, height, options)\r\n    {\r\n        var body = Bodies.rectangle(x, y, width, height, options);\r\n\r\n        this.world.add(body);\r\n\r\n        return body;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#trapezoid\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {number} slope - [description]\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {MatterJS.Body} A Matter JS Body.\r\n     */\r\n    trapezoid: function (x, y, width, height, slope, options)\r\n    {\r\n        var body = Bodies.trapezoid(x, y, width, height, slope, options);\r\n\r\n        this.world.add(body);\r\n\r\n        return body;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#circle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} radius - [description]\r\n     * @param {object} options - [description]\r\n     * @param {number} maxSides - [description]\r\n     *\r\n     * @return {MatterJS.Body} A Matter JS Body.\r\n     */\r\n    circle: function (x, y, radius, options, maxSides)\r\n    {\r\n        var body = Bodies.circle(x, y, radius, options, maxSides);\r\n\r\n        this.world.add(body);\r\n\r\n        return body;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#polygon\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} sides - [description]\r\n     * @param {number} radius - [description]\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {MatterJS.Body} A Matter JS Body.\r\n     */\r\n    polygon: function (x, y, sides, radius, options)\r\n    {\r\n        var body = Bodies.polygon(x, y, sides, radius, options);\r\n\r\n        this.world.add(body);\r\n\r\n        return body;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#fromVertices\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {array} vertexSets - [description]\r\n     * @param {object} options - [description]\r\n     * @param {boolean} flagInternal - [description]\r\n     * @param {boolean} removeCollinear - [description]\r\n     * @param {number} minimumArea - [description]\r\n     *\r\n     * @return {MatterJS.Body} A Matter JS Body.\r\n     */\r\n    fromVertices: function (x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea)\r\n    {\r\n        var body = Bodies.fromVertices(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea);\r\n\r\n        this.world.add(body);\r\n\r\n        return body;\r\n    },\r\n\r\n    /**\r\n     * Create a new composite containing Matter Image objects created in a grid arrangement.\r\n     * This function uses the body bounds to prevent overlaps.\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#imageStack\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} frame - An optional frame from the Texture this Game Object is rendering with. Set to `null` to skip this value.\r\n     * @param {number} x - The horizontal position of this composite in the world.\r\n     * @param {number} y - The vertical position of this composite in the world.\r\n     * @param {number} columns - The number of columns in the grid.\r\n     * @param {number} rows - The number of rows in the grid.\r\n     * @param {number} [columnGap=0] - The distance between each column.\r\n     * @param {number} [rowGap=0] - The distance between each row.\r\n     * @param {object} [options] - [description]\r\n     *\r\n     * @return {MatterJS.Composite} A Matter JS Composite Stack.\r\n     */\r\n    imageStack: function (key, frame, x, y, columns, rows, columnGap, rowGap, options)\r\n    {\r\n        if (columnGap === undefined) { columnGap = 0; }\r\n        if (rowGap === undefined) { rowGap = 0; }\r\n        if (options === undefined) { options = {}; }\r\n\r\n        var world = this.world;\r\n        var displayList = this.sys.displayList;\r\n\r\n        options.addToWorld = false;\r\n\r\n        var stack = Composites.stack(x, y, columns, rows, columnGap, rowGap, function (x, y)\r\n        {\r\n            var image = new MatterImage(world, x, y, key, frame, options);\r\n\r\n            displayList.add(image);\r\n\r\n            return image.body;\r\n        });\r\n\r\n        world.add(stack);\r\n\r\n        return stack;\r\n    },\r\n\r\n    /**\r\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\r\n     * This function uses the body bounds to prevent overlaps.\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#stack\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this composite in the world.\r\n     * @param {number} y - The vertical position of this composite in the world.\r\n     * @param {number} columns - The number of columns in the grid.\r\n     * @param {number} rows - The number of rows in the grid.\r\n     * @param {number} columnGap - The distance between each column.\r\n     * @param {number} rowGap - The distance between each row.\r\n     * @param {function} callback - The callback that creates the stack.\r\n     *\r\n     * @return {MatterJS.Composite} A new composite containing objects created in the callback.\r\n     */\r\n    stack: function (x, y, columns, rows, columnGap, rowGap, callback)\r\n    {\r\n        var stack = Composites.stack(x, y, columns, rows, columnGap, rowGap, callback);\r\n\r\n        this.world.add(stack);\r\n\r\n        return stack;\r\n    },\r\n\r\n    /**\r\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\r\n     * This function uses the body bounds to prevent overlaps.\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#pyramid\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this composite in the world.\r\n     * @param {number} y - The vertical position of this composite in the world.\r\n     * @param {number} columns - The number of columns in the pyramid.\r\n     * @param {number} rows - The number of rows in the pyramid.\r\n     * @param {number} columnGap - The distance between each column.\r\n     * @param {number} rowGap - The distance between each row.\r\n     * @param {function} callback - [description]\r\n     *\r\n     * @return {MatterJS.Composite} A Matter JS Composite pyramid.\r\n     */\r\n    pyramid: function (x, y, columns, rows, columnGap, rowGap, callback)\r\n    {\r\n        var stack = Composites.pyramid(x, y, columns, rows, columnGap, rowGap, callback);\r\n\r\n        this.world.add(stack);\r\n\r\n        return stack;\r\n    },\r\n\r\n    /**\r\n     * Chains all bodies in the given composite together using constraints.\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#chain\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MatterJS.Composite} composite - [description]\r\n     * @param {number} xOffsetA - [description]\r\n     * @param {number} yOffsetA - [description]\r\n     * @param {number} xOffsetB - [description]\r\n     * @param {number} yOffsetB - [description]\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {MatterJS.Composite} A new composite containing objects chained together with constraints.\r\n     */\r\n    chain: function (composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options)\r\n    {\r\n        return Composites.chain(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options);\r\n    },\r\n\r\n    /**\r\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#mesh\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MatterJS.Composite} composite - [description]\r\n     * @param {number} columns - [description]\r\n     * @param {number} rows - [description]\r\n     * @param {boolean} crossBrace - [description]\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {MatterJS.Composite} The composite containing objects meshed together with constraints.\r\n     */\r\n    mesh: function (composite, columns, rows, crossBrace, options)\r\n    {\r\n        return Composites.mesh(composite, columns, rows, crossBrace, options);\r\n    },\r\n\r\n    /**\r\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#newtonsCradle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} number - [description]\r\n     * @param {number} size - [description]\r\n     * @param {number} length - [description]\r\n     *\r\n     * @return {MatterJS.Composite} A new composite newtonsCradle body.\r\n     */\r\n    newtonsCradle: function (x, y, number, size, length)\r\n    {\r\n        var composite = Composites.newtonsCradle(x, y, number, size, length);\r\n\r\n        this.world.add(composite);\r\n\r\n        return composite;\r\n    },\r\n\r\n    /**\r\n     * Creates a composite with simple car setup of bodies and constraints.\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#car\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {number} wheelSize - [description]\r\n     *\r\n     * @return {MatterJS.Composite} A new composite car body.\r\n     */\r\n    car: function (x, y, width, height, wheelSize)\r\n    {\r\n        var composite = Composites.car(x, y, width, height, wheelSize);\r\n\r\n        this.world.add(composite);\r\n\r\n        return composite;\r\n    },\r\n\r\n    /**\r\n     * Creates a simple soft body like object.\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#softBody\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this composite in the world.\r\n     * @param {number} y - The vertical position of this composite in the world.\r\n     * @param {number} columns - The number of columns in the Composite.\r\n     * @param {number} rows - The number of rows in the Composite.\r\n     * @param {number} columnGap - The distance between each column.\r\n     * @param {number} rowGap - The distance between each row.\r\n     * @param {boolean} crossBrace - [description]\r\n     * @param {number} particleRadius - [description]\r\n     * @param {object} particleOptions - [description]\r\n     * @param {object} constraintOptions - [description]\r\n     *\r\n     * @return {MatterJS.Composite} A new composite simple soft body.\r\n     */\r\n    softBody: function (x, y, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions)\r\n    {\r\n        var composite = Composites.softBody(x, y, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions);\r\n\r\n        this.world.add(composite);\r\n\r\n        return composite;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#joint\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MatterJS.Body} bodyA - [description]\r\n     * @param {MatterJS.Body} bodyB - [description]\r\n     * @param {number} length - [description]\r\n     * @param {number} [stiffness=1] - [description]\r\n     * @param {object} [options={}] - [description]\r\n     *\r\n     * @return {MatterJS.Constraint} A Matter JS Constraint.\r\n     */\r\n    joint: function (bodyA, bodyB, length, stiffness, options)\r\n    {\r\n        return this.constraint(bodyA, bodyB, length, stiffness, options);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#spring\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MatterJS.Body} bodyA - [description]\r\n     * @param {MatterJS.Body} bodyB - [description]\r\n     * @param {number} length - [description]\r\n     * @param {number} [stiffness=1] - [description]\r\n     * @param {object} [options={}] - [description]\r\n     *\r\n     * @return {MatterJS.Constraint} A Matter JS Constraint.\r\n     */\r\n    spring: function (bodyA, bodyB, length, stiffness, options)\r\n    {\r\n        return this.constraint(bodyA, bodyB, length, stiffness, options);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#constraint\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MatterJS.Body} bodyA - [description]\r\n     * @param {MatterJS.Body} bodyB - [description]\r\n     * @param {number} length - [description]\r\n     * @param {number} [stiffness=1] - [description]\r\n     * @param {object} [options={}] - [description]\r\n     *\r\n     * @return {MatterJS.Constraint} A Matter JS Constraint.\r\n     */\r\n    constraint: function (bodyA, bodyB, length, stiffness, options)\r\n    {\r\n        if (stiffness === undefined) { stiffness = 1; }\r\n        if (options === undefined) { options = {}; }\r\n\r\n        options.bodyA = (bodyA.type === 'body') ? bodyA : bodyA.body;\r\n        options.bodyB = (bodyB.type === 'body') ? bodyB : bodyB.body;\r\n        options.length = length;\r\n        options.stiffness = stiffness;\r\n\r\n        var constraint = Constraint.create(options);\r\n\r\n        this.world.add(constraint);\r\n\r\n        return constraint;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#worldConstraint\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MatterJS.Body} bodyB - [description]\r\n     * @param {number} length - [description]\r\n     * @param {number} [stiffness=1] - [description]\r\n     * @param {object} [options={}] - [description]\r\n     *\r\n     * @return {MatterJS.Constraint} A Matter JS Constraint.\r\n     */\r\n    worldConstraint: function (bodyB, length, stiffness, options)\r\n    {\r\n        if (stiffness === undefined) { stiffness = 1; }\r\n        if (options === undefined) { options = {}; }\r\n\r\n        options.bodyB = (bodyB.type === 'body') ? bodyB : bodyB.body;\r\n        options.length = length;\r\n        options.stiffness = stiffness;\r\n\r\n        var constraint = Constraint.create(options);\r\n\r\n        this.world.add(constraint);\r\n\r\n        return constraint;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#mouseSpring\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {MatterJS.Constraint} A Matter JS Constraint.\r\n     */\r\n    mouseSpring: function (options)\r\n    {\r\n        return this.pointerConstraint(options);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#pointerConstraint\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {MatterJS.Constraint} A Matter JS Constraint.\r\n     */\r\n    pointerConstraint: function (options)\r\n    {\r\n        if (options === undefined) { options = {}; }\r\n\r\n        if (!options.hasOwnProperty('render'))\r\n        {\r\n            options.render = { visible: false };\r\n        }\r\n\r\n        var pointerConstraint = new PointerConstraint(this.scene, this.world, options);\r\n\r\n        this.world.add(pointerConstraint.constraint);\r\n\r\n        return pointerConstraint;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#image\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with. Set to `null` to skip this value.\r\n     * @param {object} [options={}] - [description]\r\n     *\r\n     * @return {Phaser.Physics.Matter.Image} [description]\r\n     */\r\n    image: function (x, y, key, frame, options)\r\n    {\r\n        var image = new MatterImage(this.world, x, y, key, frame, options);\r\n\r\n        this.sys.displayList.add(image);\r\n\r\n        return image;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#tileBody\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Tilemaps.Tile} tile - [description]\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {Phaser.Physics.Matter.TileBody} [description]\r\n     */\r\n    tileBody: function (tile, options)\r\n    {\r\n        var tileBody = new MatterTileBody(this.world, tile, options);\r\n\r\n        return tileBody;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#sprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with. Set to `null` to skip this value.\r\n     * @param {object} [options={}] - [description]\r\n     *\r\n     * @return {Phaser.Physics.Matter.Sprite} [description]\r\n     */\r\n    sprite: function (x, y, key, frame, options)\r\n    {\r\n        var sprite = new MatterSprite(this.world, x, y, key, frame, options);\r\n\r\n        this.sys.displayList.add(sprite);\r\n        this.sys.updateList.add(sprite);\r\n\r\n        return sprite;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#gameObject\r\n     * @since 3.3.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to inject the Matter Body in to.\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that had the Matter Body injected into it.\r\n     */\r\n    gameObject: function (gameObject, options)\r\n    {\r\n        return MatterGameObject(this.world, gameObject, options);\r\n    },\r\n\r\n    /**\r\n     * Destroys this Factory.\r\n     *\r\n     * @method Phaser.Physics.Matter.Factory#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.world = null;\r\n        this.scene = null;\r\n        this.sys = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Factory;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Bodies","Class","Composites","Constraint","MatterGameObject","MatterImage","MatterSprite","MatterTileBody","PointerConstraint","Factory","initialize","world","scene","sys","rectangle","x","y","width","height","options","body","add","trapezoid","slope","circle","radius","maxSides","polygon","sides","fromVertices","vertexSets","flagInternal","removeCollinear","minimumArea","imageStack","key","frame","columns","rows","columnGap","rowGap","undefined","displayList","addToWorld","stack","image","callback","pyramid","chain","composite","xOffsetA","yOffsetA","xOffsetB","yOffsetB","mesh","crossBrace","newtonsCradle","number","size","length","car","wheelSize","softBody","particleRadius","particleOptions","constraintOptions","joint","bodyA","bodyB","stiffness","constraint","spring","type","create","worldConstraint","mouseSpring","pointerConstraint","hasOwnProperty","render","visible","tileBody","tile","sprite","updateList","gameObject","destroy"]
}
