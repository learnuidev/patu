{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$bitmaptext$static$BitmapTextCanvasRenderer.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/bitmaptext/static/BitmapTextCanvasRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$bitmaptext$static$BitmapTextCanvasRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.BitmapText#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.BitmapText} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar BitmapTextCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var text = src._text;\r\n    var textLength = text.length;\r\n\r\n    var ctx = renderer.currentContext;\r\n\r\n    if (textLength === 0 || !SetTransform(renderer, ctx, src, camera, parentMatrix))\r\n    {\r\n        return;\r\n    }\r\n    \r\n    var textureFrame = src.frame;\r\n\r\n    var chars = src.fontData.chars;\r\n    var lineHeight = src.fontData.lineHeight;\r\n    var letterSpacing = src._letterSpacing;\r\n\r\n    var xAdvance = 0;\r\n    var yAdvance = 0;\r\n\r\n    var charCode = 0;\r\n\r\n    var glyph = null;\r\n    var glyphX = 0;\r\n    var glyphY = 0;\r\n    var glyphW = 0;\r\n    var glyphH = 0;\r\n\r\n    var x = 0;\r\n    var y = 0;\r\n\r\n    var lastGlyph = null;\r\n    var lastCharCode = 0;\r\n\r\n    var image = src.frame.source.image;\r\n\r\n    var textureX = textureFrame.cutX;\r\n    var textureY = textureFrame.cutY;\r\n\r\n    var scale = (src._fontSize / src.fontData.size);\r\n\r\n    var align = src._align;\r\n    var currentLine = 0;\r\n    var lineOffsetX = 0;\r\n\r\n    //  Update the bounds - skipped internally if not dirty\r\n    src.getTextBounds(false);\r\n\r\n    var lineData = src._bounds.lines;\r\n\r\n    if (align === 1)\r\n    {\r\n        lineOffsetX = (lineData.longest - lineData.lengths[0]) / 2;\r\n    }\r\n    else if (align === 2)\r\n    {\r\n        lineOffsetX = (lineData.longest - lineData.lengths[0]);\r\n    }\r\n\r\n    ctx.translate(-src.displayOriginX, -src.displayOriginY);\r\n\r\n    var roundPixels = camera.roundPixels;\r\n\r\n    for (var i = 0; i < textLength; i++)\r\n    {\r\n        charCode = text.charCodeAt(i);\r\n\r\n        if (charCode === 10)\r\n        {\r\n            currentLine++;\r\n\r\n            if (align === 1)\r\n            {\r\n                lineOffsetX = (lineData.longest - lineData.lengths[currentLine]) / 2;\r\n            }\r\n            else if (align === 2)\r\n            {\r\n                lineOffsetX = (lineData.longest - lineData.lengths[currentLine]);\r\n            }\r\n\r\n            xAdvance = 0;\r\n            yAdvance += lineHeight;\r\n            lastGlyph = null;\r\n\r\n            continue;\r\n        }\r\n\r\n        glyph = chars[charCode];\r\n\r\n        if (!glyph)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        glyphX = textureX + glyph.x;\r\n        glyphY = textureY + glyph.y;\r\n\r\n        glyphW = glyph.width;\r\n        glyphH = glyph.height;\r\n\r\n        x = glyph.xOffset + xAdvance;\r\n        y = glyph.yOffset + yAdvance;\r\n\r\n        if (lastGlyph !== null)\r\n        {\r\n            var kerningOffset = glyph.kerning[lastCharCode];\r\n            x += (kerningOffset !== undefined) ? kerningOffset : 0;\r\n        }\r\n\r\n        x *= scale;\r\n        y *= scale;\r\n\r\n        x += lineOffsetX;\r\n\r\n        xAdvance += glyph.xAdvance + letterSpacing;\r\n        lastGlyph = glyph;\r\n        lastCharCode = charCode;\r\n\r\n        //  Nothing to render or a space? Then skip to the next glyph\r\n        if (glyphW === 0 || glyphH === 0 || charCode === 32)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        if (roundPixels)\r\n        {\r\n            x |= 0;\r\n            y |= 0;\r\n        }\r\n\r\n        ctx.save();\r\n\r\n        ctx.translate(x, y);\r\n\r\n        ctx.scale(scale, scale);\r\n\r\n        ctx.drawImage(image, glyphX, glyphY, glyphW, glyphH, 0, 0, glyphW, glyphH);\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    ctx.restore();\r\n};\r\n\r\nmodule.exports = BitmapTextCanvasRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","SetTransform","BitmapTextCanvasRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","text","_text","textLength","length","ctx","currentContext","textureFrame","frame","chars","fontData","lineHeight","letterSpacing","_letterSpacing","xAdvance","yAdvance","lastGlyph","lastCharCode","image","source","textureX","cutX","textureY","cutY","scale","_fontSize","size","align","_align","currentLine","lineOffsetX","getTextBounds","lineData","_bounds","lines","longest","lengths","translate","displayOriginX","displayOriginY","roundPixels","i","charCode","charCodeAt","glyph","glyphX","x","glyphY","y","glyphW","width","glyphH","height","xOffset","yOffset","kerningOffset","kerning","undefined","save","drawImage","restore"]
}
