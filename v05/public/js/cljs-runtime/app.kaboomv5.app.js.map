{"version":3,"sources":["app/kaboomv5/app.cljs"],"mappings":"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","names":["app.kaboomv5.app/html-canvas?","item","cljs.core._EQ_","js/Object.getPrototypeOf","js/HTMLCanvasElement","app.kaboomv5.app/html-body?","js/HTMLBodyElement","p__36698","map__36699","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.kaboomv5.app/new-canvas","id","canvas","js/document.createElement","or__4126__auto__","js/document","app.kaboomv5.app/new-gl","app.kaboomv5.app/set-dimension!","width","height","app.kaboomv5.app/set-fullscreen!","js/window","app.kaboomv5.app/set-nfullscreen!","app.kaboomv5.app/set-fullscreen","opts","map__36701","full-screen?","scale","cljs.spec.alpha/def-impl","cljs.core/number?","cljs.core/boolean?","cljs.spec.alpha/nilable-impl","cljs.spec.alpha/map-spec-impl","G__36703","cljs.core/map?","app.kaboomv5.app/ex-config","js/app","js/app.kaboomv5","js/app.kaboomv5.app","js/app.kaboomv5.app.key-map","app.kaboomv5.app/key-map","cljs.core/vector?","G__36704","js/app.kaboomv5.app.app-state","app.kaboomv5.app/app-state","cljs.core.atom","app.kaboomv5.math.vec2","app.kaboomv5.app/mousemove-handler","evt","off-x","off-y","mouse-pos","app.kaboomv5.math.scale","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","js/console.log","cljs.core.println","app.kaboomv5.app/mousedown-handler","app.kaboomv5.app/mouseup-handler","app.kaboomv5.app/touch-start-handler","t","state","cljs.core.assoc","app.kaboomv5.app/touch-move-handler","app.kaboomv5.app/keydown-handler","event","key","cljs.core.keyword","k","cljs.core/assoc-in","app.kaboomv5.app/keyup-handler","app.kaboomv5.app/visibility-handler","app.kaboomv5.app/reg-events","goog.events/listen","app.kaboomv5.app/mouse-pos","app.kaboomv5.app/mouse-clicked?","app.kaboomv5.app/mouse-down?","app.kaboomv5.app/mouse-released?","app.kaboomv5.app/key-pressed?","cljs.core.get_in","app.kaboomv5.app/key-pressed-rep?","app.kaboomv5.app/key-down?","app.kaboomv5.app/key-released?","app.kaboomv5.app/char-inputted","app.kaboomv5.app/dt","app.kaboomv5.app/time!","app.kaboomv5.app/fps","app.kaboomv5.app/screenshot","var_args","G__36706","app.kaboomv5.app/cursor","js/Error","c","app.kaboomv5.app/update-app-state","delta","app.kaboomv5.app/run","f","cljs.core/not","js/console.warn","app.kaboomv5.gfx/init-gl","app.kaboomv5.gfx/init","frame","app.kaboomv5.gfx/frame-start","app.kaboomv5.gfx/frame-end","js/requestAnimationFrame","app.kaboomv5.app/quit","js/cancelAnimationFrame","app.kaboomv5.app/focused?","js/document.activeElement","app.kaboomv5.app/focus","G__36708","app.kaboomv5.app/init-canvas","app.kaboomv5.app.init_canvas","app.kaboomv5.app/init-gl-state","p__36709","map__36710","app.kaboomv5.app/init!","config"],"sourcesContent":["(ns app.kaboomv5.app\n  (:require [app.kaboomv5.gfx :as gfx]\n            [app.kaboomv5.math :as math]\n            [app.kaboom.patu.utils :refer [js-get js-set!]]\n            [app.kaboom-next.math :as nmath]\n            [app.kaboomv5.assets :as assets]\n            [cljs.spec.alpha :as s]\n            [goog.events :as gevents]))\n\n;; Helper functions\n(defn html-canvas? [item]\n  (if item\n    (= (js/Object.getPrototypeOf item) (.-prototype js/HTMLCanvasElement))\n    false))\n(defn html-body? [item]\n  (if item\n    (= (js/Object.getPrototypeOf item) (.-prototype js/HTMLBodyElement))\n    false))\n;;\n\n\n(defn new-canvas [{id :id}]\n  (let [canvas (js/document.createElement \"canvas\")]\n    (when id\n      (set! canvas -id (or id \"mooo\")))\n    (.appendChild (.-body js/document) canvas)\n    canvas))\n\n(defn new-gl [canvas]\n  (.getContext canvas \"webgl\"))\n\n(comment\n  (keyword \"foo\"))\n\n(comment\n  (keyword \"foo\")\n  (:c (:key-states @app-state)))\n\n(defn set-dimension! [canvas width height]\n  (set! canvas -width width)\n  (set! canvas -height height))\n\n(defn set-fullscreen! [canvas]\n  (set-dimension! canvas (.-innerWidth js/window) (.-innerHeight js/window)))\n\n(defn set-nfullscreen! [canvas width height]\n  (set-dimension! canvas width height))\n\n(defn set-fullscreen [opts]\n  (let [{:keys [canvas full-screen? scale width height] :or {full-screen? false\n                                                             width 640\n                                                             height 480\n                                                             scale 1}} opts]\n    (if full-screen?\n      (set-fullscreen! canvas)\n      (set-nfullscreen! canvas width height))))\n;;  config - spec\n(s/def ::button-state #{:up :pressed :rpressed :down :released})\n(s/def ::width number?)\n(s/def ::height number?)\n(s/def ::scale number?)\n(s/def ::fullscreen? boolean?)\n(s/def ::debug? boolean?)\n(s/def ::crisp? boolean?)\n(s/def ::canvas (s/nilable html-canvas?))\n(s/def ::root html-body?)\n(s/def ::config (s/keys :opt-un [::width\n                                 ::height\n                                 ::scale\n                                 ::fullscreen?\n                                 ::debug?\n                                 ::crisp?\n                                 ::canvas\n                                 ::root]))\n;;\n(def ex-config\n  {:width 640\n   :height 480\n   :scale 2\n   :fullscreen? false\n   :debug? false\n   :crisp? false\n   :canvas nil\n   :root (.-body js/document)})\n(comment\n  (s/valid? ::config ex-config)\n  (s/valid? ::button-state :up)\n  (s/valid? ::button-state :up))\n(defonce key-map {:ArrowLeft  :left\n                  :ArrowRight :right\n                  :ArrowUp    :up\n                  :ArrowDown  :down})\n;; App Spec\n(s/def ::loop-id (s/nilable number?))\n(s/def ::stopped? boolean?)\n(s/def ::key-states map?)\n(s/def ::char-inputted vector?)\n(s/def ::mouse-pos map?)\n(s/def ::skip-time? boolean?)\n(s/def ::real-time number?)\n(s/def ::dt number?)\n(s/def ::touch? boolean?)\n(s/def ::mouse-state ::button-state)\n;;\n(s/def ::fps number?)\n(s/def ::time number?)\n(s/def ::fps-buf vector?)\n(s/def ::fps-timer number?)\n(s/def ::state (s/keys :opt-un [::loop-id\n                                ::canvas\n                                ::stopped?\n                                ::key-states\n                                ::char-inputted\n                                ::mouse-state\n                                ::mouse-pos\n                                ::skip-time?\n                                ::scale\n                                ::real-time\n                                ::dt\n                                ::touch?\n                                ::fps\n                                ::time\n                                ::fps-buf\n                                ::fps-timer]))\n\n;; App State\n(defonce app-state (atom {:loop-id nil\n                          :canvas nil\n                          :stopped? false\n                          :key-states {}\n                          :char-inputted []\n                          :mouse-state :up\n                          :mouse-pos (math/vec2 0 0)\n                          :skip-time? false\n                          :scale 2\n                          :real-time 0\n                          :dt 0.0\n                          :touch? false\n                          :fps 0\n                          :time 0\n                          :fps-buf []\n                          :fps-timer 0.0}))\n\n;; Handler functions\n(defn mousemove-handler [evt]\n  (let [off-x (.-offsetX evt)\n        off-y (.-offsetY evt)\n        mouse-pos (math/scale (math/vec2 off-x off-y) (/ 1 (:scale @app-state)))]\n    (swap! app-state assoc :mouse-pos mouse-pos)\n    (js/console.log \"offsetX: \" #js {:offsetX off-x\n                                     :offsetY off-y})\n    (println (:mouse-pos @app-state))))\n\n(defn mousedown-handler [evt]\n  (swap! app-state assoc :mouse-state :pressed)\n  #_(js/console.log :pressed))\n(comment\n  (aget #js [12 3 4] 0))\n;;\n(defn mouseup-handler [evt]\n  (swap! app-state assoc :mouse-state :released)\n  (js/console.log :released))\n\n(defn touch-start-handler [evt]\n  (let [t (aget (.-touches evt) 0)\n        off-x (.clientX t)\n        off-y (.clientY t)\n        mouse-pos (math/scale (math/vec2 off-x off-y) (/ 1 (:scale @app-state)))]\n    (swap! app-state (fn [state]\n                       (-> state\n                           (assoc :mouse-pos mouse-pos)\n                           (assoc :mouse-state :pressed))))))\n(defn touch-move-handler [evt]\n  (let [t (aget (.-touches evt) 0)\n        off-x (.clientX t)\n        off-y (.clientY t)\n        mouse-pos (math/scale (math/vec2 off-x off-y) (/ 1 (:scale @app-state)))]\n    (swap! app-state assoc :mouse-pos mouse-pos)))\n\n;; Key Events\n(defn keydown-handler [event]\n  (let [key (keyword (.-key event))\n        k (or (get key-map key key))]\n    ; (js/console.log event)\n    (js/console.log \"key down\")\n    (swap! app-state assoc-in [:key-states k] :pressed)))\n\n(defn keyup-handler [event]\n  (let [key (keyword (.-key event))\n        k (or (get key-map key key))]\n    (js/console.log \"key Up\")\n    (swap! app-state assoc-in [:key-states k] :released)))\n\n(defn visibility-handler [event]\n  (let [state (.-visibilityState js/document)]\n    (when (= \"visible\" state)\n      (swap! app-state assoc :skip-time? true))))\n\n;; https://stackoverflow.com/questions/12886286/addeventlistener-for-keydown-on-canvas\n(defn reg-events [canvas]\n  (js/console.log \"CANVAS\" canvas)\n  (.setAttribute  canvas \"tabindex\" \"0\")\n  ;; Mouse Events (3)\n  (.addEventListener canvas \"mousemove\" mousemove-handler)\n  (.addEventListener canvas \"mousedown\" mousedown-handler)\n  (.addEventListener canvas \"mouseup\" mouseup-handler)\n  ;; Touch Events (2)\n  (.addEventListener canvas \"touchshart\" touch-start-handler)\n  (.addEventListener canvas \"touchmove\" touch-move-handler)\n  ;; Key Events\n  (gevents/listen canvas \"keydown\" keydown-handler)\n  (gevents/listen canvas \"keyup\" keyup-handler)\n  (gevents/listen js/document \"visibilitychange\" visibility-handler))\n\n;; === Helper functions\n(defn mouse-pos []\n  (:mouse-pos @app-state))\n\n(defn mouse-clicked? []\n  (= :pressed (:mouse-state @app-state)))\n\n(defn mouse-down? []\n  (or (mouse-clicked?)\n      (= :down (:mouse-state @app-state))))\n\n(defn mouse-released? []\n  (= :released (:mouse-state @app-state)))\n\n(defn key-pressed? [id]\n  (let [state (get-in @app-state [:key-states id])]\n    (= state :pressed)))\n\n(defn key-pressed-rep? [id]\n  (let [state (get-in @app-state [:key-states id])]\n    (or (= state :pressed)\n        (= state :rpressed))))\n\n(defn key-down? [id]\n  (let [state (get-in @app-state [:key-states id])]\n    (or (key-pressed-rep? id)\n        (= state :down))))\n(comment\n  (key-pressed? :left)\n  (key-down? :c))\n\n(defn key-released? [id]\n  (= :released (get-in @app-state [:key-states id])))\n\n(defn char-inputted []\n  (:char-inputted @app-state))\n\n(defn dt []\n  (:dt @app-state))\n\n(defn time! []\n  (:time @app-state))\n\n(defn fps []\n  (:fps @app-state))\n\n(defn screenshot []\n  (.toDataURL (:canvas @app-state)))\n\n(comment\n  (screenshot))\n(defn cursor\n  ([] (.. (:canvas @app-state) -style -cursor))\n  ([c] (set! (.. (:canvas @app-state) -style -cursor) c)))\n\n;; ===\n(defn update-app-state [t]\n  (let [delta (- (/ t 1000) (:time @app-state))]\n    (swap! app-state assoc\n           :dt delta\n           :time (+ (:time @app-state) delta))\n    #_(println \"STATE: \" @app-state)))\n\n(defn run [f]\n  ;; Debugging Purpose\n  (if-not (:gl @app-state)\n    (js/console.warn \"Please run the kaboom/init! function first. You need to create a new webgl context first\")\n    (do\n      (gfx/init-gl (:gl @app-state))\n      (let [id (gfx/init (:gl @app-state))\n            frame (fn frame [t]\n                    (update-app-state t)\n                    (gfx/frame-start (:gl @app-state))\n                    (f)\n                    (gfx/frame-end (:gl @app-state) id)\n                    (js/requestAnimationFrame frame))]\n        (js/requestAnimationFrame frame)))))\n(comment\n  (:key-states @app-state))\n\n(defn quit []\n  (js/cancelAnimationFrame (:loop-id @app-state))\n  (swap! app-state assoc :stopped? true))\n\n(defn focused? []\n  (= js/document.activeElement (:canvas @app-state)))\n\n(defn focus []\n  (.focus (:canvas @app-state)))\n\n;; Init Functions ===\n(defn init-canvas\n  ([] (init-canvas (new-canvas {:id \"app\"})))\n  ([canvas]\n   (swap! app-state assoc :canvas canvas)))\n;;\n(defn init-gl-state [canvas]\n  (if canvas\n    (swap! app-state  assoc :gl (new-gl canvas))\n    (swap! app-state  assoc :gl (new-gl (new-canvas {:id \"app\"})))))\n\n(defn init!\n  [{:keys [canvas] :as config}]\n  (init-canvas canvas)\n  (init-gl-state canvas)\n  (set-fullscreen config)\n  (reg-events (:canvas @app-state)))\n"]}