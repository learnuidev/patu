{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$grid$GridWebGLRenderer.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/shape/grid/GridWebGLRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$grid$GridWebGLRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Utils = require('../../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Grid#renderWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Grid} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar GridWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var pipeline = this.pipeline;\r\n\r\n    var camMatrix = pipeline._tempMatrix1;\r\n    var shapeMatrix = pipeline._tempMatrix2;\r\n    var calcMatrix = pipeline._tempMatrix3;\r\n\r\n    renderer.setPipeline(pipeline);\r\n\r\n    shapeMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\r\n\r\n    camMatrix.copyFrom(camera.matrix);\r\n\r\n    if (parentMatrix)\r\n    {\r\n        //  Multiply the camera by the parent matrix\r\n        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);\r\n\r\n        //  Undo the camera scroll\r\n        shapeMatrix.e = src.x;\r\n        shapeMatrix.f = src.y;\r\n    }\r\n    else\r\n    {\r\n        shapeMatrix.e -= camera.scrollX * src.scrollFactorX;\r\n        shapeMatrix.f -= camera.scrollY * src.scrollFactorY;\r\n    }\r\n\r\n    camMatrix.multiply(shapeMatrix, calcMatrix);\r\n\r\n    calcMatrix.translate(-src._displayOriginX, -src._displayOriginY);\r\n\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    //  Work out the grid size\r\n\r\n    var width = src.width;\r\n    var height = src.height;\r\n\r\n    var cellWidth = src.cellWidth;\r\n    var cellHeight = src.cellHeight;\r\n\r\n    var gridWidth = Math.ceil(width / cellWidth);\r\n    var gridHeight = Math.ceil(height / cellHeight);\r\n\r\n    var cellWidthA = cellWidth;\r\n    var cellHeightA = cellHeight;\r\n\r\n    var cellWidthB = cellWidth - ((gridWidth * cellWidth) - width);\r\n    var cellHeightB = cellHeight - ((gridHeight * cellHeight) - height);\r\n\r\n    var fillTint;\r\n    var fillTintColor;\r\n\r\n    var showCells = src.showCells;\r\n    var showAltCells = src.showAltCells;\r\n    var showOutline = src.showOutline;\r\n\r\n    var x = 0;\r\n    var y = 0;\r\n    var r = 0;\r\n    var cw = 0;\r\n    var ch = 0;\r\n\r\n    if (showOutline)\r\n    {\r\n        //  To make room for the grid lines (in case alpha < 1)\r\n        cellWidthA--;\r\n        cellHeightA--;\r\n\r\n        if (cellWidthB === cellWidth)\r\n        {\r\n            cellWidthB--;\r\n        }\r\n\r\n        if (cellHeightB === cellHeight)\r\n        {\r\n            cellHeightB--;\r\n        }\r\n    }\r\n\r\n    if (showCells && src.fillAlpha > 0)\r\n    {\r\n        fillTint = pipeline.fillTint;\r\n        fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.fillColor, src.fillAlpha * alpha);\r\n    \r\n        fillTint.TL = fillTintColor;\r\n        fillTint.TR = fillTintColor;\r\n        fillTint.BL = fillTintColor;\r\n        fillTint.BR = fillTintColor;\r\n\r\n        for (y = 0; y < gridHeight; y++)\r\n        {\r\n            if (showAltCells)\r\n            {\r\n                r = y % 2;\r\n            }\r\n\r\n            for (x = 0; x < gridWidth; x++)\r\n            {\r\n                if (showAltCells && r)\r\n                {\r\n                    r = 0;\r\n                    continue;\r\n                }\r\n\r\n                r++;\r\n\r\n                cw = (x < gridWidth - 1) ? cellWidthA : cellWidthB;\r\n                ch = (y < gridHeight - 1) ? cellHeightA : cellHeightB;\r\n\r\n                pipeline.batchFillRect(\r\n                    x * cellWidth,\r\n                    y * cellHeight,\r\n                    cw,\r\n                    ch\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showAltCells && src.altFillAlpha > 0)\r\n    {\r\n        fillTint = pipeline.fillTint;\r\n        fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.altFillColor, src.altFillAlpha * alpha);\r\n    \r\n        fillTint.TL = fillTintColor;\r\n        fillTint.TR = fillTintColor;\r\n        fillTint.BL = fillTintColor;\r\n        fillTint.BR = fillTintColor;\r\n\r\n        for (y = 0; y < gridHeight; y++)\r\n        {\r\n            if (showAltCells)\r\n            {\r\n                r = y % 2;\r\n            }\r\n\r\n            for (x = 0; x < gridWidth; x++)\r\n            {\r\n                if (showAltCells && !r)\r\n                {\r\n                    r = 1;\r\n                    continue;\r\n                }\r\n\r\n                r = 0;\r\n\r\n                cw = (x < gridWidth - 1) ? cellWidthA : cellWidthB;\r\n                ch = (y < gridHeight - 1) ? cellHeightA : cellHeightB;\r\n\r\n                pipeline.batchFillRect(\r\n                    x * cellWidth,\r\n                    y * cellHeight,\r\n                    cw,\r\n                    ch\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showOutline && src.outlineFillAlpha > 0)\r\n    {\r\n        var strokeTint = pipeline.strokeTint;\r\n        var color = Utils.getTintAppendFloatAlphaAndSwap(src.outlineFillColor, src.outlineFillAlpha * alpha);\r\n\r\n        strokeTint.TL = color;\r\n        strokeTint.TR = color;\r\n        strokeTint.BL = color;\r\n        strokeTint.BR = color;\r\n\r\n        for (x = 1; x < gridWidth; x++)\r\n        {\r\n            var x1 = x * cellWidth;\r\n\r\n            pipeline.batchLine(x1, 0, x1, height, 1, 1, 1, 0, false);\r\n        }\r\n\r\n        for (y = 1; y < gridHeight; y++)\r\n        {\r\n            var y1 = y * cellHeight;\r\n\r\n            pipeline.batchLine(0, y1, width, y1, 1, 1, 1, 0, false);\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = GridWebGLRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Utils","GridWebGLRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","pipeline","camMatrix","_tempMatrix1","shapeMatrix","_tempMatrix2","calcMatrix","_tempMatrix3","setPipeline","applyITRS","x","y","rotation","scaleX","scaleY","copyFrom","matrix","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","multiply","translate","_displayOriginX","_displayOriginY","alpha","width","height","cellWidth","cellHeight","gridWidth","Math","ceil","gridHeight","cellWidthA","cellHeightA","cellWidthB","cellHeightB","showCells","showAltCells","showOutline","r","fillAlpha","fillTint","fillTintColor","getTintAppendFloatAlphaAndSwap","fillColor","TL","TR","BL","BR","cw","ch","batchFillRect","altFillAlpha","altFillColor","outlineFillAlpha","strokeTint","color","outlineFillColor","x1","batchLine","y1"]
}
