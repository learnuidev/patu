{
"version":3,
"file":"module$node_modules$Phaser$src$curves$CubicBezierCurve.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAS/GC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,YAAcJ,OAAA,CAAQ,4EAAR,CAAlB,CACIK,MAAQL,OAAA,CAAQ,6CAAR,CADZ,CAEIM,QAAUN,OAAA,CAAQ,6CAAR,CAFd,CAmBIO,iBAAmB,IAAIJ,MAAJ,CAAU,CAE7BK,QAASH,KAFoB,CAI7BI,WAEAF,QAA0B,CAACG,EAAD,CAAKC,EAAL,CAASC,EAAT,CAAaC,EAAb,CAC1B,CACIR,KAAAS,KAAA,CAAW,IAAX,CAAiB,kBAAjB,CAEIC;KAAAC,QAAA,CAAcN,EAAd,CAAJ,GAEIG,EAGA,CAHK,IAAIP,OAAJ,CAAYI,EAAA,CAAG,CAAH,CAAZ,CAAmBA,EAAA,CAAG,CAAH,CAAnB,CAGL,CAFAE,EAEA,CAFK,IAAIN,OAAJ,CAAYI,EAAA,CAAG,CAAH,CAAZ,CAAmBA,EAAA,CAAG,CAAH,CAAnB,CAEL,CADAC,EACA,CADK,IAAIL,OAAJ,CAAYI,EAAA,CAAG,CAAH,CAAZ,CAAmBA,EAAA,CAAG,CAAH,CAAnB,CACL,CAAAA,EAAA,CAAK,IAAIJ,OAAJ,CAAYI,EAAA,CAAG,CAAH,CAAZ,CAAmBA,EAAA,CAAG,CAAH,CAAnB,CALT,CAeA,KAAAA,GAAA,CAAUA,EASV,KAAAC,GAAA,CAAUA,EASV,KAAAC,GAAA,CAAUA,EASV,KAAAC,GAAA,CAAUA,EA7Cd,CAP6B,CAmE7BI,cAAeA,QAAS,CAACC,GAAD,CACxB,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,IAAIZ,OAAnC,CAEA,OAAOY,IAAAE,KAAA,CAAS,IAAAV,GAAT,CAHX,CApE6B,CAoF7BW,cAAeA,QAAS,CAACC,SAAD,CACxB,CACI,MAAOA,UADX,CArF6B,CAsG7BC,SAAUA,QAAS,CAACC,CAAD,CAAIN,GAAJ,CACnB,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,IAAIZ,OAAnC,CAEA,KAAII,GAAK,IAAAA,GAAT,CACIC,GAAK,IAAAA,GADT,CAEIC,GAAK,IAAAA,GAFT,CAGIC,GAAK,IAAAA,GAET,OAAOK,IAAAO,IAAA,CAAQrB,WAAA,CAAYoB,CAAZ,CAAed,EAAAgB,EAAf,CAAqBf,EAAAe,EAArB,CAA2Bd,EAAAc,EAA3B,CAAiCb,EAAAa,EAAjC,CAAR,CAAgDtB,WAAA,CAAYoB,CAAZ,CAAed,EAAAiB,EAAf,CAAqBhB,EAAAgB,EAArB,CAA2Bf,EAAAe,EAA3B,CAAiCd,EAAAc,EAAjC,CAAhD,CARX,CAvG6B;AA+H7BC,KAAMA,QAAS,CAACC,QAAD,CAAWC,WAAX,CACf,CACwBX,IAAAA,EAApB,GAAIW,WAAJ,GAAiCA,WAAjC,CAA+C,EAA/C,CAEIC,YAAAA,CAAS,IAAAC,UAAA,CAAeF,WAAf,CAEbD,SAAAI,UAAA,EACAJ,SAAAK,OAAA,CAAgB,IAAAxB,GAAAgB,EAAhB,CAA2B,IAAAhB,GAAAiB,EAA3B,CAEA,KAAK,IAAIQ,EAAI,CAAb,CAAgBA,CAAhB,CAAoBJ,WAAAK,OAApB,CAAmCD,CAAA,EAAnC,CAEIN,QAAAQ,OAAA,CAAgBN,WAAA,CAAOI,CAAP,CAAAT,EAAhB,CAA6BK,WAAA,CAAOI,CAAP,CAAAR,EAA7B,CAGJE,SAAAS,WAAA,EAGA,OAAOT,SAhBX,CAhI6B,CA2J7BU,OAAQA,QAAS,EACjB,CACI,MAAO,CACHC,KAAM,IAAAA,KADH,CAEHT,OAAQ,CACJ,IAAArB,GAAAgB,EADI,CACO,IAAAhB,GAAAiB,EADP,CAEJ,IAAAhB,GAAAe,EAFI,CAEO,IAAAf,GAAAgB,EAFP,CAGJ,IAAAf,GAAAc,EAHI,CAGO,IAAAd,GAAAe,EAHP,CAIJ,IAAAd,GAAAa,EAJI,CAIO,IAAAb,GAAAc,EAJP,CAFL,CADX,CA5J6B,CAAV,CAoLvBpB,iBAAAkC,SAAA,CAA4BC,QAAS,CAACC,IAAD,CACrC,CACI,IAAIZ,OAASY,IAAAZ,OAETrB,KAAAA;AAAK,IAAIJ,OAAJ,CAAYyB,MAAA,CAAO,CAAP,CAAZ,CAAuBA,MAAA,CAAO,CAAP,CAAvB,CACT,KAAIpB,GAAK,IAAIL,OAAJ,CAAYyB,MAAA,CAAO,CAAP,CAAZ,CAAuBA,MAAA,CAAO,CAAP,CAAvB,CAAT,CACInB,GAAK,IAAIN,OAAJ,CAAYyB,MAAA,CAAO,CAAP,CAAZ,CAAuBA,MAAA,CAAO,CAAP,CAAvB,CACLlB,OAAAA,CAAK,IAAIP,OAAJ,CAAYyB,MAAA,CAAO,CAAP,CAAZ,CAAuBA,MAAA,CAAO,CAAP,CAAvB,CAET,OAAO,KAAIxB,gBAAJ,CAAqBG,IAArB,CAAyBC,EAAzB,CAA6BC,EAA7B,CAAiCC,MAAjC,CARX,CAWAZ,OAAAC,QAAA,CAAiBK,gBA7NkG;",
"sources":["node_modules/Phaser/src/curves/CubicBezierCurve.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$curves$CubicBezierCurve\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n//  Based on the three.js Curve classes created by [zz85](http://www.lab4games.net/zz85/blog)\r\n\r\nvar Class = require('../utils/Class');\r\nvar CubicBezier = require('../math/interpolation/CubicBezierInterpolation');\r\nvar Curve = require('./Curve');\r\nvar Vector2 = require('../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A higher-order B\u00e9zier curve constructed of four points.\r\n *\r\n * @class CubicBezier\r\n * @extends Phaser.Curves.Curve\r\n * @memberOf Phaser.Curves\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Math.Vector2|Phaser.Math.Vector2[])} p0 - Start point, or an array of point pairs.\r\n * @param {Phaser.Math.Vector2} p1 - Control Point 1.\r\n * @param {Phaser.Math.Vector2} p2 - Control Point 2.\r\n * @param {Phaser.Math.Vector2} p3 - End Point.\r\n */\r\nvar CubicBezierCurve = new Class({\r\n\r\n    Extends: Curve,\r\n\r\n    initialize:\r\n\r\n    function CubicBezierCurve (p0, p1, p2, p3)\r\n    {\r\n        Curve.call(this, 'CubicBezierCurve');\r\n\r\n        if (Array.isArray(p0))\r\n        {\r\n            p3 = new Vector2(p0[6], p0[7]);\r\n            p2 = new Vector2(p0[4], p0[5]);\r\n            p1 = new Vector2(p0[2], p0[3]);\r\n            p0 = new Vector2(p0[0], p0[1]);\r\n        }\r\n\r\n        /**\r\n         * The start point of this curve.\r\n         *\r\n         * @name Phaser.Curves.CubicBezier#p0\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.p0 = p0;\r\n\r\n        /**\r\n         * The first control point of this curve.\r\n         *\r\n         * @name Phaser.Curves.CubicBezier#p1\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.p1 = p1;\r\n\r\n        /**\r\n         * The second control point of this curve.\r\n         *\r\n         * @name Phaser.Curves.CubicBezier#p2\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.p2 = p2;\r\n\r\n        /**\r\n         * The end point of this curve.\r\n         *\r\n         * @name Phaser.Curves.CubicBezier#p3\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.p3 = p3;\r\n    },\r\n\r\n    /**\r\n     * Gets the starting point on the curve.\r\n     *\r\n     * @method Phaser.Curves.CubicBezier#getStartPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getStartPoint: function (out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        return out.copy(this.p0);\r\n    },\r\n\r\n    /**\r\n     * Returns the resolution of this curve.\r\n     *\r\n     * @method Phaser.Curves.CubicBezier#getResolution\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} divisions - The amount of divisions used by this curve.\r\n     *\r\n     * @return {number} The resolution of the curve.\r\n     */\r\n    getResolution: function (divisions)\r\n    {\r\n        return divisions;\r\n    },\r\n\r\n    /**\r\n     * Get point at relative position in curve according to length.\r\n     *\r\n     * @method Phaser.Curves.CubicBezier#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getPoint: function (t, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        var p0 = this.p0;\r\n        var p1 = this.p1;\r\n        var p2 = this.p2;\r\n        var p3 = this.p3;\r\n\r\n        return out.set(CubicBezier(t, p0.x, p1.x, p2.x, p3.x), CubicBezier(t, p0.y, p1.y, p2.y, p3.y));\r\n    },\r\n\r\n    /**\r\n     * Draws this curve to the specified graphics object.\r\n     *\r\n     * @method Phaser.Curves.CubicBezier#draw\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.GameObjects.Graphics} G - [graphics,$return]\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The graphics object this curve should be drawn to.\r\n     * @param {integer} [pointsTotal=32] - The number of intermediary points that make up this curve. A higher number of points will result in a smoother curve.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} The graphics object this curve was drawn to. Useful for method chaining.\r\n     */\r\n    draw: function (graphics, pointsTotal)\r\n    {\r\n        if (pointsTotal === undefined) { pointsTotal = 32; }\r\n\r\n        var points = this.getPoints(pointsTotal);\r\n\r\n        graphics.beginPath();\r\n        graphics.moveTo(this.p0.x, this.p0.y);\r\n\r\n        for (var i = 1; i < points.length; i++)\r\n        {\r\n            graphics.lineTo(points[i].x, points[i].y);\r\n        }\r\n\r\n        graphics.strokePath();\r\n\r\n        //  So you can chain graphics calls\r\n        return graphics;\r\n    },\r\n\r\n    /**\r\n     * Returns a JSON object that describes this curve.\r\n     *\r\n     * @method Phaser.Curves.CubicBezier#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {JSONCurve} The JSON object containing this curve data.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        return {\r\n            type: this.type,\r\n            points: [\r\n                this.p0.x, this.p0.y,\r\n                this.p1.x, this.p1.y,\r\n                this.p2.x, this.p2.y,\r\n                this.p3.x, this.p3.y\r\n            ]\r\n        };\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Generates a curve from a JSON object.\r\n *\r\n * @function Phaser.Curves.CubicBezier.fromJSON\r\n * @since 3.0.0\r\n *\r\n * @param {JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.CubicBezier} The curve generated from the JSON object.\r\n */\r\nCubicBezierCurve.fromJSON = function (data)\r\n{\r\n    var points = data.points;\r\n\r\n    var p0 = new Vector2(points[0], points[1]);\r\n    var p1 = new Vector2(points[2], points[3]);\r\n    var p2 = new Vector2(points[4], points[5]);\r\n    var p3 = new Vector2(points[6], points[7]);\r\n\r\n    return new CubicBezierCurve(p0, p1, p2, p3);\r\n};\r\n\r\nmodule.exports = CubicBezierCurve;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","CubicBezier","Curve","Vector2","CubicBezierCurve","Extends","initialize","p0","p1","p2","p3","call","Array","isArray","getStartPoint","out","undefined","copy","getResolution","divisions","getPoint","t","set","x","y","draw","graphics","pointsTotal","points","getPoints","beginPath","moveTo","i","length","lineTo","strokePath","toJSON","type","fromJSON","CubicBezierCurve.fromJSON","data"]
}
