{
"version":3,
"file":"module$node_modules$Phaser$src$device$OS.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/device/OS.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$device$OS\"] = function(global,require,module,exports) {\nvar process = require('process');\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Determines the operating system of the device running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.os` from within any Scene.\r\n *\r\n * @typedef {object} Phaser.Device.OS\r\n * @since 3.0.0\r\n *\r\n * @property {boolean} android - Is running on android?\r\n * @property {boolean} chromeOS - Is running on chromeOS?\r\n * @property {boolean} cocoonJS - Is the game running under CocoonJS?\r\n * @property {boolean} cocoonJSApp - Is this game running with CocoonJS.App?\r\n * @property {boolean} cordova - Is the game running under Apache Cordova?\r\n * @property {boolean} crosswalk - Is the game running under the Intel Crosswalk XDK?\r\n * @property {boolean} desktop - Is running on a desktop?\r\n * @property {boolean} ejecta - Is the game running under Ejecta?\r\n * @property {boolean} electron - Is the game running under GitHub Electron?\r\n * @property {boolean} iOS - Is running on iOS?\r\n * @property {boolean} iPad - Is running on iPad?\r\n * @property {boolean} iPhone - Is running on iPhone?\r\n * @property {boolean} kindle - Is running on an Amazon Kindle?\r\n * @property {boolean} linux - Is running on linux?\r\n * @property {boolean} macOS - Is running on macOS?\r\n * @property {boolean} node - Is the game running under Node.js?\r\n * @property {boolean} nodeWebkit - Is the game running under Node-Webkit?\r\n * @property {boolean} webApp - Set to true if running as a WebApp, i.e. within a WebView\r\n * @property {boolean} windows - Is running on windows?\r\n * @property {boolean} windowsPhone - Is running on a Windows Phone?\r\n * @property {number} iOSVersion - If running in iOS this will contain the major version number.\r\n * @property {number} pixelRatio - PixelRatio of the host device?\r\n */\r\nvar OS = {\r\n\r\n    android: false,\r\n    chromeOS: false,\r\n    cocoonJS: false,\r\n    cocoonJSApp: false,\r\n    cordova: false,\r\n    crosswalk: false,\r\n    desktop: false,\r\n    ejecta: false,\r\n    electron: false,\r\n    iOS: false,\r\n    iOSVersion: 0,\r\n    iPad: false,\r\n    iPhone: false,\r\n    kindle: false,\r\n    linux: false,\r\n    macOS: false,\r\n    node: false,\r\n    nodeWebkit: false,\r\n    pixelRatio: 1,\r\n    webApp: false,\r\n    windows: false,\r\n    windowsPhone: false\r\n\r\n};\r\n\r\nfunction init ()\r\n{\r\n    var ua = navigator.userAgent;\r\n\r\n    if (/Windows/.test(ua))\r\n    {\r\n        OS.windows = true;\r\n    }\r\n    else if (/Mac OS/.test(ua))\r\n    {\r\n        OS.macOS = true;\r\n    }\r\n    else if (/Android/.test(ua))\r\n    {\r\n        OS.android = true;\r\n    }\r\n    else if (/Linux/.test(ua))\r\n    {\r\n        OS.linux = true;\r\n    }\r\n    else if (/iP[ao]d|iPhone/i.test(ua))\r\n    {\r\n        OS.iOS = true;\r\n        (navigator.appVersion).match(/OS (\\d+)/);\r\n        OS.iOSVersion = parseInt(RegExp.$1, 10);\r\n    }\r\n    else if (/Kindle/.test(ua) || (/\\bKF[A-Z][A-Z]+/).test(ua) || (/Silk.*Mobile Safari/).test(ua))\r\n    {\r\n        OS.kindle = true;\r\n\r\n        // This will NOT detect early generations of Kindle Fire, I think there is no reliable way...\r\n        // E.g. \"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_3; en-us; Silk/1.1.0-80) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16 Silk-Accelerated=true\"\r\n    }\r\n    else if (/CrOS/.test(ua))\r\n    {\r\n        OS.chromeOS = true;\r\n    }\r\n\r\n    if (/Windows Phone/i.test(ua) || (/IEMobile/i).test(ua))\r\n    {\r\n        OS.android = false;\r\n        OS.iOS = false;\r\n        OS.macOS = false;\r\n        OS.windows = true;\r\n        OS.windowsPhone = true;\r\n    }\r\n\r\n    var silk = (/Silk/).test(ua);\r\n\r\n    if (OS.windows || OS.macOS || (OS.linux && !silk) || OS.chromeOS)\r\n    {\r\n        OS.desktop = true;\r\n    }\r\n\r\n    //  Windows Phone / Table reset\r\n    if (OS.windowsPhone || ((/Windows NT/i.test(ua)) && (/Touch/i.test(ua))))\r\n    {\r\n        OS.desktop = false;\r\n    }\r\n\r\n    //  WebApp mode in iOS\r\n    if (navigator.standalone)\r\n    {\r\n        OS.webApp = true;\r\n    }\r\n\r\n    if (window.cordova !== undefined)\r\n    {\r\n        OS.cordova = true;\r\n    }\r\n\r\n    if (typeof process !== 'undefined' && process.versions && process.versions.node)\r\n    {\r\n        OS.node = true;\r\n    }\r\n\r\n    if (OS.node && typeof process.versions === 'object')\r\n    {\r\n        OS.nodeWebkit = !!process.versions['node-webkit'];\r\n\r\n        OS.electron = !!process.versions.electron;\r\n    }\r\n\r\n    if (navigator.isCocoonJS)\r\n    {\r\n        OS.cocoonJS = true;\r\n\r\n        try\r\n        {\r\n            OS.cocoonJSApp = (typeof CocoonJS !== 'undefined');\r\n        }\r\n        catch (error)\r\n        {\r\n            OS.cocoonJSApp = false;\r\n        }\r\n    }\r\n\r\n    if (window.ejecta !== undefined)\r\n    {\r\n        OS.ejecta = true;\r\n    }\r\n\r\n    if ((/Crosswalk/).test(ua))\r\n    {\r\n        OS.crosswalk = true;\r\n    }\r\n\r\n    OS.iPhone = ua.toLowerCase().indexOf('iphone') !== -1;\r\n    OS.iPad = ua.toLowerCase().indexOf('ipad') !== -1;\r\n\r\n    OS.pixelRatio = window['devicePixelRatio'] || 1;\r\n\r\n    return OS;\r\n}\r\n\r\nmodule.exports = init();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","process","OS","android","chromeOS","cocoonJS","cocoonJSApp","cordova","crosswalk","desktop","ejecta","electron","iOS","iOSVersion","iPad","iPhone","kindle","linux","macOS","node","nodeWebkit","pixelRatio","webApp","windows","windowsPhone","ua","navigator","userAgent","test","appVersion","match","parseInt","RegExp","$1","silk","standalone","undefined","window","versions","isCocoonJS","CocoonJS","error","toLowerCase","indexOf"]
}
