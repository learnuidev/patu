{"version":3,"sources":["app/kaboomv5/assets.cljs"],"mappings":"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","names":["app.kaboomv5.assets/ascii-chars","app.kaboomv5.assets/def-font","app.kaboomv5.assets/unscii-src","app.kaboomv5.assets/assets","cljs.core.atom","var_args","G__26724","app.kaboomv5.assets/load-root","js/Error","cljs.core/deref","root","cljs.core/seq","cljs.core.swap_BANG_","cljs.core/assoc","app.kaboomv5.assets/add-loader","loader","id","state","cljs.core/assoc-in","cljs.core.update","cljs.core/inc","js/console.error","app.kaboomv5.assets/data-url?","src","clojure.string/starts-with?","app.kaboomv5.assets/load-img","img","js/Image","js/Promise","resolve","reject","G__26728","G__26730","app.kaboomv5.assets/load-raw-sprite","p__26733","map__26734","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.kaboomv5.assets.load_raw_sprite","slice-x","slice-y","anims","grid-width","grid-height","tex","app.kaboomv5.gfx/make-tex","val-j","or__4126__auto__","val-i","js/console.log","qw","qh","frames","iter__4529__auto__","s__26738","cljs.core/LazySeq","temp__5735__auto__","xs__6292__auto__","cljs.core/first","iterys__4525__auto__","s__26740","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__26742","cljs.core/chunk-buffer","i__26741","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26739","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__26737","j","cljs.core.range","i","app.kaboomv5.math.core/quad","sprite","G__26747","app.kaboomv5.assets/load-sprite","p__26748","map__26749","app.kaboomv5.assets.load_sprite","config","cljs.core/not","path","p1__26745#","G__26752","G__26753","app.kaboomv5.assets/sound-loader","url","js/fetch","res","data","res2","rej2","app.kaboomv5.audio/ctx","buf","G__26754","app.kaboomv5.assets/load-sound","app.kaboomv5.assets/font-loader","gw","gh","chars","font","app.kaboomv5.gfx/make-font","G__26757","app.kaboomv5.assets/load-font!","app.kaboomv5.assets.load_font_BANG_","app.kaboomv5.assets/load-font","app.kaboomv5.assets/load-shader","cljs.core.filter","cljs.core/identity","cljs.core/vals","app.kaboomv5.assets/load-progress","cljs.core/chunk-first"],"sourcesContent":["(ns app.kaboomv5.assets\n  (:require [app.kaboomv5.gfx :as gfx]\n            [app.kaboomv5.math.core :refer [quad]]\n            [app.kaboomv5.audio :as audio]\n            [app.kaboomv5.gfx :as gfx]\n            [clojure.string :as s]))\n;; constants\n(def ascii-chars \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\")\n(def def-font :font/unscii)\n(def unscii-src \"https://raw.githubusercontent.com/replit/kaboom/master/src/assets/unscii_8x8.png\");\n\n;; assets\n(def assets (atom {:last-loader-id 0\n                   :root-url \"\"\n                   :loaders {}\n                   :sprites {}\n                   :sounds {}\n                   :fonts {}\n                   :shaders {}}))\n\n(comment\n  (load-root)\n  @assets)\n\n;; 1 **load-root\n(defn load-root\n  ([] (:root-url @assets))\n  ([root]\n   (when (seq root)\n     (swap! assets assoc :root-url root))))\n\n;; 2 **add-loader\n(defn add-loader [loader]\n  (let [id (:last-loader-id @assets)]\n    (swap! assets (fn [state]\n                    (-> state\n                        (assoc-in [:loaders id] false)\n                        (update :last-loader-id inc))))\n    (-> loader\n        (.catch js/console.error)\n        (.finally #(swap! assets assoc-in [:loaders id] true)))))\n;; ===\n;; 3 **data-url?\n(defn data-url? [src]\n  (s/starts-with? src \"data:\"))\n(comment\n  (data-url? \"data:foo\")\n  (data-url? \":foo\"))\n\n;; ==\n;; 4 **load-img\n(defn load-img [src]\n  (let [img (js/Image.)]\n    (set! img -src src)\n    (set! img -crossOrigin \"anonymous\")\n    (js/Promise. (fn [resolve reject]\n                   (set! img -onload (fn [] (resolve img)))\n                   (set! img -onerror (fn [] (reject (str \"failed to load \" src))))))))\n\n;; ==\n;; 5 **load-sprite\n(defn load-raw-sprite\n  \"Load Raw Sprite\n  - id:     keyword\n  - src:    GfxTextureData\n  - config: map\n  \"\n  ([id src] (load-raw-sprite id src {:slice-x 1\n                                     :slice-y 1\n                                     :grid-width 0\n                                     :grid-height 0\n                                     :anims {}}))\n  ([id src {:keys [slice-x slice-y anims grid-width grid-height]}]\n   (let [tex (gfx/make-tex src)\n         val-j (/ (or slice-y (.-height tex)) (or grid-height (.-height tex)))\n         val-i  (/ (or slice-x (.-width tex)) (or grid-width (.-width tex)))]\n     (js/console.log \"VAL-i\" val-j val-i)\n     (js/console.log \"VAL-tex\" tex)\n     (let [qw (/ 1 slice-x)\n           qh (/ 1 slice-y)\n           frames (for [j (range val-j)\n                        i (range val-i)]\n                    (quad (* i qw) (* j qh) qw qh))\n           sprite {:tex tex\n                   :frames frames\n                   :anims (or anims {})}]\n       (swap! assets assoc-in [:sprites id] sprite)\n       sprite))))\n\n(defn load-sprite\n  ([id src] (load-sprite id src {:slice-x 1\n                                 :slice-y 1\n                                 :anims {}}))\n  ([id src {:keys [slice-x slice-y anims] :as config}]\n   (let [loader (js/Promise. (fn [resolve reject]\n                               (if-not (seq src)\n                                 (throw (js/Error. (str \"expected sprite src for\"  id)))\n                                 (if (string? src)\n                                   (let [path (if (data-url? src) src (str (:root-url @assets) src))]\n                                     (-> (load-img path)\n                                         (.then #(resolve (load-raw-sprite id % config)))\n                                         (.catch reject)))\n                                   (resolve (load-raw-sprite id src config))))))]\n     (add-loader loader)\n     loader)))\n;; ===\n;; 6 **load-sound\n(defn sound-loader [id src url]\n  (js/Promise.\n   (fn [resolve reject]\n     (if-not (seq src)\n       (throw (js/Error. (str \"expected sprite src for\"  id)))\n       (if (string? src)\n         (-> (js/fetch url)\n             (.then (fn [res]\n                      (if (.-ok res)\n                        (.arrayBuffer res)\n                        (throw (js/Error. (str \"failed to load: \" id))))))\n             (.then (fn [data]\n                      (js/Promise. (fn [res2 rej2]\n                                     (.decodeAudioData (audio/ctx) data res2 rej2)))))\n             (.then (fn [buf]\n                      (swap! assets assoc-in [:sounds id] buf)\n                      (resolve buf)))\n             (.catch reject))\n         (resolve (load-raw-sprite id src)))))))\n(defn load-sound [id src]\n  (let [url (str (:root-url @assets) src)\n        loader (sound-loader id src url)]\n    (add-loader loader)\n    loader))\n(comment\n  (identity @assets)\n  ; (js/console.clear)\n  (load-sound :sound/score \"sounds/score.mp3\"))\n\n;; ==\n;; 7 **load-font\n(defn font-loader [id src gw gh chars]\n  (js/Promise.\n   (fn [resolve reject]\n     ; (let [path (if (data-url? src) src (str (:root-url @assets) src))]\n     (-> (load-img src)\n         (.then (fn [img]\n                  (let [font (gfx/make-font (gfx/make-tex img) gw gh chars)]\n                    (swap! assets assoc-in [:fonts id] font)\n                    (resolve font))))\n         (.catch reject)))))\n\n(comment\n  (:fonts @assets))\n(defn load-font!\n  ([id src gw gh] (load-font! id src gw gh ascii-chars))\n  ([id src gw gh chars]\n   (let [loader (font-loader id src gw gh chars)]\n     (add-loader loader)\n     loader)))\n\n(defn load-font\n  [id src gw gh chars]\n  (let [path (if (data-url? src) src (str (:root-url @assets) src))]\n    (load-font! id path gw gh chars)))\n\n(load-font! def-font unscii-src 8 8 ascii-chars)\n\n;; ==\n;; 8 **loader-shader\n(defn load-shader []\n  (/ (count (filter identity (vals (:loaders @assets))))\n     (count (vals (:loaders @assets)))))\n;; ==\n;; 9  **loader-progress\n(defn load-progress []\n  (/ (count (filter identity (vals (:loaders @assets))))\n     (count (vals (:loaders @assets)))))\n\n(comment\n  (load-progress))\n"]}