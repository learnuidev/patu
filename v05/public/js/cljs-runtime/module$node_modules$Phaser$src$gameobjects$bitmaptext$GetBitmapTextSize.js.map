{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$bitmaptext$GetBitmapTextSize.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,wEAAA,CAA4F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA4OpID,MAAAC,QAAA,CApLwBC,QAAS,CAACC,GAAD,CAAMC,KAAN,CAAaC,GAAb,CACjC,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAEIA,GAFJ,CAEU,CACFE,MAAO,CACHC,EAAG,CADA,CAEHC,EAAG,CAFA,CAGHC,MAAO,CAHJ,CAIHC,OAAQ,CAJL,CADL,CAOFb,OAAQ,CACJU,EAAG,CADC,CAEJC,EAAG,CAFC,CAGJC,MAAO,CAHH,CAIJC,OAAQ,CAJJ,CAPN,CAaFC,MAAO,CACHC,SAAU,CADP,CAEHC,QAAS,CAFN,CAGHC,QAAS,IAHN,CAbL,CAFV,CAyDA,KAlCA,IAAIC,KAAOb,GAAAa,KAAX,CACIC,WAAaD,IAAAE,OADjB,CAGIC,GAAKC,MAAAC,UAHT,CAIIC,GAAKF,MAAAC,UAJT,CAKIE,GAAK,CALT,CAMIC,GAAK,CANT,CAQIC,MAAQtB,GAAAuB,SAAAD,MARZ,CASIE,WAAaxB,GAAAuB,SAAAC,WATjB,CAUIC,cAAgBzB,GAAAyB,cAVpB,CAYIC,SAAW,CAZf,CAaIC;AAAW,CAbf,CAeIC,QAfJ,CAiBIC,KAjBJ,CAmBIxB,CAnBJ,CAoBIC,CApBJ,CAsBIwB,MAAS9B,GAAA+B,SAATD,CAAwB9B,GAAAuB,SAAAS,KAtB5B,CAuBIC,GAAKH,KAALG,CAAajC,GAAAkC,OAvBjB,CAwBIC,GAAKL,KAALK,CAAanC,GAAAoC,OAxBjB,CA0BIC,UAAY,IA1BhB,CA2BIC,aAAe,CA3BnB,CA4BIC,WAAa,EA5BjB,CA6BIC,aAAevB,MAAAC,UA7BnB,CA8BIuB,YAAc,CA9BlB,CA+BIC,YAAc,CA/BlB,CAkCSC,EAFLC,CAEKD,CAFc,CAEvB,CAAgBA,CAAhB,CAAoB7B,UAApB,CAAgC6B,CAAA,EAAhC,CAII,GAFAf,QAEI,CAFOf,IAAAgC,WAAA,CAAgBF,CAAhB,CAEP,CAAa,EAAb,GAAAf,QAAJ,CAEIF,QAiBA,CAjBW,CAiBX,CAhBAC,QAgBA,EAhBYH,UAgBZ,CAfAa,SAeA,CAfY,IAeZ,CAbAE,UAAA,CAAWG,WAAX,CAaA,CAb0BE,CAa1B,CAXIA,CAWJ,CAXuBH,WAWvB,GATIA,WASJ,CATkBG,CASlB,EANIA,CAMJ,CANuBJ,YAMvB,GAJIA,YAIJ,CAJmBI,CAInB,EADAF,WAAA,EACA,CAAAE,CAAA,CAAmB,CAnBvB,KAyBA,IAFAf,KAEA,CAFQP,KAAA,CAAMM,QAAN,CAER,CAKAvB,CAmCA,CAnCIqB,QAmCJ,CAlCApB,CAkCA,CAlCIqB,QAkCJ,CAhCkB,IAgClB,GAhCIU,SAgCJ,GA9BQS,SACJ;AADoBjB,KAAAkB,QAAA,CAAcT,YAAd,CACpB,CAAAjC,CAAA,EAAwBF,IAAAA,EAAnB,GAAC2C,SAAD,CAAgCA,SAAhC,CAAgD,CA6BzD,EA1BI9B,EA0BJ,CA1BSX,CA0BT,GAxBIW,EAwBJ,CAxBSX,CAwBT,EArBIc,EAqBJ,CArBSb,CAqBT,GAnBIa,EAmBJ,CAnBSb,CAmBT,EAhBSD,CAgBT,EAhBawB,KAAAH,SAgBb,CAfSpB,CAeT,EAfakB,UAeb,CAbIJ,EAaJ,CAbS4B,CAaT,GAXI5B,EAWJ,CAXS4B,CAWT,EARI3B,EAQJ,CARS4B,CAQT,GANI5B,EAMJ,CANS4B,CAMT,EAHAvB,QAGA,EAHYG,KAAAH,SAGZ,CAH6BD,aAG7B,CAFAY,SAEA,CAFYR,KAEZ,CADAS,YACA,CADeV,QACf,CAAAgB,CAAA,CAAmBI,CAAnB,CAAwBlB,KAG5BS,WAAA,CAAWG,WAAX,CAAA,CAA0BE,CAEtBA,EAAJ,CAAuBH,WAAvB,GAEIA,WAFJ,CAEkBG,CAFlB,CAKIA,EAAJ,CAAuBJ,YAAvB,GAEIA,YAFJ,CAEmBI,CAFnB,CAKIxC,KAAAA,CAAQF,GAAAE,MACRT,WAAAA,CAASO,GAAAP,OACTc,MAAAA,CAAQP,GAAAO,MAEZL,KAAAC,EAAA,CAAUW,EAAV,CAAec,KACf1B,KAAAE,EAAA,CAAUa,EAAV,CAAeW,KACf1B,KAAAG,MAAA,CAAca,EAAd,CAAmBU,KACnB1B,KAAAI,OAAA,CAAea,EAAf,CAAoBS,KAEpBnC,WAAAU,EAAA,CAAYL,GAAAK,EAAZ,CAAoBL,GAAAkD,eAApB,CAA2ClC,EAA3C,CAAgDiB,EAChDtC,WAAAW,EAAA;AAAYN,GAAAM,EAAZ,CAAoBN,GAAAmD,eAApB,CAA2ChC,EAA3C,CAAgDgB,EAChDxC,WAAAY,MAAA,CAAea,EAAf,CAAoBa,EACpBtC,WAAAa,OAAA,CAAgBa,EAAhB,CAAqBc,EAErB1B,MAAAC,SAAA,CAAiB8B,YACjB/B,MAAAE,QAAA,CAAgB8B,WAChBhC,MAAAG,QAAA,CAAgB2B,UAEZtC,MAAJ,GAEIG,IAAAC,EAWA,CAXU+C,IAAAnD,MAAA,CAAWG,IAAAC,EAAX,CAWV,CAVAD,IAAAE,EAUA,CAVU8C,IAAAnD,MAAA,CAAWG,IAAAE,EAAX,CAUV,CATAF,IAAAG,MASA,CATc6C,IAAAnD,MAAA,CAAWG,IAAAG,MAAX,CASd,CARAH,IAAAI,OAQA,CARe4C,IAAAnD,MAAA,CAAWG,IAAAI,OAAX,CAQf,CANAb,UAAAU,EAMA,CANW+C,IAAAnD,MAAA,CAAWN,UAAAU,EAAX,CAMX,CALAV,UAAAW,EAKA,CALW8C,IAAAnD,MAAA,CAAWN,UAAAW,EAAX,CAKX,CAJAX,UAAAY,MAIA,CAJe6C,IAAAnD,MAAA,CAAWN,UAAAY,MAAX,CAIf,CAHAZ,UAAAa,OAGA,CAHgB4C,IAAAnD,MAAA,CAAWN,UAAAa,OAAX,CAGhB,CADAC,KAAAC,SACA,CADiB0C,IAAAnD,MAAA,CAAWuC,YAAX,CACjB,CAAA/B,KAAAE,QAAA;AAAgByC,IAAAnD,MAAA,CAAWwC,WAAX,CAbpB,CAgBA,OAAOvC,IAhLX,CAzDoI;",
"sources":["node_modules/Phaser/src/gameobjects/bitmaptext/GetBitmapTextSize.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$bitmaptext$GetBitmapTextSize\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * @typedef {object} BitmapTextSize\r\n *\r\n * @property {GlobalBitmapTextSize} global - The position and size of the BitmapText, taking into account the position and scale of the Game Object.\r\n * @property {LocalBitmapTextSize} local - The position and size of the BitmapText, taking just the font size into account.\r\n */\r\n\r\n/**\r\n * The position and size of the Bitmap Text in global space, taking into account the Game Object's scale and world position.\r\n *\r\n * @typedef {object} GlobalBitmapTextSize\r\n *\r\n * @property {number} x - The x position of the BitmapText, taking into account the x position and scale of the Game Object.\r\n * @property {number} y - The y position of the BitmapText, taking into account the y position and scale of the Game Object.\r\n * @property {number} width - The width of the BitmapText, taking into account the x scale of the Game Object.\r\n * @property {number} height - The height of the BitmapText, taking into account the y scale of the Game Object.\r\n */\r\n\r\n/**\r\n * The position and size of the Bitmap Text in local space, taking just the font size into account.\r\n *\r\n * @typedef {object} LocalBitmapTextSize\r\n *\r\n * @property {number} x - The x position of the BitmapText.\r\n * @property {number} y - The y position of the BitmapText.\r\n * @property {number} width - The width of the BitmapText.\r\n * @property {number} height - The height of the BitmapText.\r\n */\r\n\r\n/**\r\n * Calculate the position, width and height of a BitmapText Game Object.\r\n *\r\n * Returns a BitmapTextSize object that contains global and local variants of the Game Objects x and y coordinates and\r\n * its width and height.\r\n *\r\n * The global position and size take into account the Game Object's position and scale.\r\n *\r\n * The local position and size just takes into account the font data.\r\n *\r\n * @function GetBitmapTextSize\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {(Phaser.GameObjects.DynamicBitmapText|Phaser.GameObjects.BitmapText)} src - The BitmapText to calculate the position, width and height of.\r\n * @param {boolean} [round] - Whether to round the results to the nearest integer.\r\n * @param {object} [out] - Optional object to store the results in, to save constant object creation.\r\n *\r\n * @return {BitmapTextSize} The calculated position, width and height of the BitmapText.\r\n */\r\nvar GetBitmapTextSize = function (src, round, out)\r\n{\r\n    if (out === undefined)\r\n    {\r\n        out = {\r\n            local: {\r\n                x: 0,\r\n                y: 0,\r\n                width: 0,\r\n                height: 0\r\n            },\r\n            global: {\r\n                x: 0,\r\n                y: 0,\r\n                width: 0,\r\n                height: 0\r\n            },\r\n            lines: {\r\n                shortest: 0,\r\n                longest: 0,\r\n                lengths: null\r\n            }\r\n        };\r\n    }\r\n\r\n    var text = src.text;\r\n    var textLength = text.length;\r\n\r\n    var bx = Number.MAX_VALUE;\r\n    var by = Number.MAX_VALUE;\r\n    var bw = 0;\r\n    var bh = 0;\r\n\r\n    var chars = src.fontData.chars;\r\n    var lineHeight = src.fontData.lineHeight;\r\n    var letterSpacing = src.letterSpacing;\r\n\r\n    var xAdvance = 0;\r\n    var yAdvance = 0;\r\n\r\n    var charCode = 0;\r\n\r\n    var glyph = null;\r\n\r\n    var x = 0;\r\n    var y = 0;\r\n\r\n    var scale = (src.fontSize / src.fontData.size);\r\n    var sx = scale * src.scaleX;\r\n    var sy = scale * src.scaleY;\r\n\r\n    var lastGlyph = null;\r\n    var lastCharCode = 0;\r\n    var lineWidths = [];\r\n    var shortestLine = Number.MAX_VALUE;\r\n    var longestLine = 0;\r\n    var currentLine = 0;\r\n    var currentLineWidth = 0;\r\n\r\n    for (var i = 0; i < textLength; i++)\r\n    {\r\n        charCode = text.charCodeAt(i);\r\n\r\n        if (charCode === 10)\r\n        {\r\n            xAdvance = 0;\r\n            yAdvance += lineHeight;\r\n            lastGlyph = null;\r\n\r\n            lineWidths[currentLine] = currentLineWidth;\r\n\r\n            if (currentLineWidth > longestLine)\r\n            {\r\n                longestLine = currentLineWidth;\r\n            }\r\n\r\n            if (currentLineWidth < shortestLine)\r\n            {\r\n                shortestLine = currentLineWidth;\r\n            }\r\n\r\n            currentLine++;\r\n            currentLineWidth = 0;\r\n            continue;\r\n        }\r\n\r\n        glyph = chars[charCode];\r\n\r\n        if (!glyph)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        x = xAdvance;\r\n        y = yAdvance;\r\n\r\n        if (lastGlyph !== null)\r\n        {\r\n            var kerningOffset = glyph.kerning[lastCharCode];\r\n            x += (kerningOffset !== undefined) ? kerningOffset : 0;\r\n        }\r\n\r\n        if (bx > x)\r\n        {\r\n            bx = x;\r\n        }\r\n\r\n        if (by > y)\r\n        {\r\n            by = y;\r\n        }\r\n\r\n        var gw = x + glyph.xAdvance;\r\n        var gh = y + lineHeight;\r\n\r\n        if (bw < gw)\r\n        {\r\n            bw = gw;\r\n        }\r\n\r\n        if (bh < gh)\r\n        {\r\n            bh = gh;\r\n        }\r\n\r\n        xAdvance += glyph.xAdvance + letterSpacing;\r\n        lastGlyph = glyph;\r\n        lastCharCode = charCode;\r\n        currentLineWidth = gw * scale;\r\n    }\r\n\r\n    lineWidths[currentLine] = currentLineWidth;\r\n\r\n    if (currentLineWidth > longestLine)\r\n    {\r\n        longestLine = currentLineWidth;\r\n    }\r\n\r\n    if (currentLineWidth < shortestLine)\r\n    {\r\n        shortestLine = currentLineWidth;\r\n    }\r\n\r\n    var local = out.local;\r\n    var global = out.global;\r\n    var lines = out.lines;\r\n\r\n    local.x = bx * scale;\r\n    local.y = by * scale;\r\n    local.width = bw * scale;\r\n    local.height = bh * scale;\r\n\r\n    global.x = (src.x - src.displayOriginX) + (bx * sx);\r\n    global.y = (src.y - src.displayOriginY) + (by * sy);\r\n    global.width = bw * sx;\r\n    global.height = bh * sy;\r\n\r\n    lines.shortest = shortestLine;\r\n    lines.longest = longestLine;\r\n    lines.lengths = lineWidths;\r\n\r\n    if (round)\r\n    {\r\n        local.x = Math.round(local.x);\r\n        local.y = Math.round(local.y);\r\n        local.width = Math.round(local.width);\r\n        local.height = Math.round(local.height);\r\n\r\n        global.x = Math.round(global.x);\r\n        global.y = Math.round(global.y);\r\n        global.width = Math.round(global.width);\r\n        global.height = Math.round(global.height);\r\n\r\n        lines.shortest = Math.round(shortestLine);\r\n        lines.longest = Math.round(longestLine);\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetBitmapTextSize;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetBitmapTextSize","src","round","out","undefined","local","x","y","width","height","lines","shortest","longest","lengths","text","textLength","length","bx","Number","MAX_VALUE","by","bw","bh","chars","fontData","lineHeight","letterSpacing","xAdvance","yAdvance","charCode","glyph","scale","fontSize","size","sx","scaleX","sy","scaleY","lastGlyph","lastCharCode","lineWidths","shortestLine","longestLine","currentLine","i","currentLineWidth","charCodeAt","kerningOffset","kerning","gw","gh","displayOriginX","displayOriginY","Math"]
}
