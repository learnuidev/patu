{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$Shape.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO/GC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACRI,QAAAA,CAAaJ,OAAA,CAAQ,6DAAR,CACjB,KAAIK,WAAaL,OAAA,CAAQ,uDAAR,CAAjB,CACIM,KAAON,OAAA,CAAQ,+CAAR,CA8BPO,QAAAA,CAAQ,IAAIJ,MAAJ,CAAU,CAElBK,QAASH,UAFS,CAIlBI,OAAQ,CACJL,OAAAM,MADI,CAEJN,OAAAO,UAFI,CAGJP,OAAAQ,aAHI,CAIJR,OAAAS,MAJI;AAKJT,OAAAU,UALI,CAMJV,OAAAW,KANI,CAOJX,OAAAY,OAPI,CAQJZ,OAAAa,SARI,CASJb,OAAAc,UATI,CAUJd,OAAAe,aAVI,CAWJf,OAAAgB,UAXI,CAYJhB,OAAAiB,QAZI,CAJU,CAmBlBC,WAEAf,QAAe,CAACgB,KAAD,CAAQC,IAAR,CAAcC,IAAd,CACf,CACiBC,IAAAA,EAAb,GAAIF,IAAJ,GAA0BA,IAA1B,CAAiC,OAAjC,CAEAnB,WAAAsB,KAAA,CAAgB,IAAhB,CAAsBJ,KAAtB,CAA6BC,IAA7B,CAWA,KAAAI,KAAA,CAAYH,IAUZ,KAAAI,SAAA,CAAgB,EAUhB,KAAAC,YAAA,CAAmB,EASnB,KAAAC,UAAA,CAAiB,QASjB,KAAAC,UAAA,CAAiB,CASjB,KAAAC,YAAA,CAAmB,QAkBnB,KAAAC,UAAA,CATA,IAAAC,YASA,CATmB,CA6BnB,KAAAC,UAAA,CAVA,IAAAC,SAUA,CAVgB,CAAA,CAoBhB,KAAAC,UAAA,CAAiB,CAAA,CAWjB,KAAAC,UAAA,CAAiB,IAAIjC,IAErB,KAAAkC,aAAA,EA1HJ,CAtBkB,CAoKlBC,aAAcA,QAAS,CAACC,KAAD;AAAQC,KAAR,CACvB,CACkBjB,IAAAA,EAAd,GAAIiB,KAAJ,GAA2BA,KAA3B,CAAmC,CAAnC,CAEcjB,KAAAA,EAAd,GAAIgB,KAAJ,CAEI,IAAAL,SAFJ,CAEoB,CAAA,CAFpB,EAMI,IAAAN,UAEA,CAFiBW,KAEjB,CADA,IAAAV,UACA,CADiBW,KACjB,CAAA,IAAAN,SAAA,CAAgB,CAAA,CARpB,CAWA,OAAO,KAdX,CArKkB,CAuMlBO,eAAgBA,QAAS,CAACV,SAAD,CAAYQ,KAAZ,CAAmBC,KAAnB,CACzB,CACkBjB,IAAAA,EAAd,GAAIiB,KAAJ,GAA2BA,KAA3B,CAAmC,CAAnC,CAEkBjB,KAAAA,EAAlB,GAAIQ,SAAJ,CAEI,IAAAE,UAFJ,CAEqB,CAAA,CAFrB,EAMI,IAAAF,UAGA,CAHiBA,SAGjB,CAFA,IAAAD,YAEA,CAFmBS,KAEnB,CADA,IAAAP,YACA,CADmBQ,KACnB,CAAA,IAAAP,UAAA,CAAiB,CAAA,CATrB,CAYA,OAAO,KAfX,CAxMkB,CAuOlBS,aAAcA,QAAS,CAACC,KAAD,CACvB,CACI,IAAAR,UAAA,CAAiBQ,KAEjB,OAAO,KAHX,CAxOkB,CAqPlBC,WAAYA,QAAS,EACrB,CAEI,IAAAR,UAAA,CADA,IAAAX,KACA,CADY,IAEZ,KAAAC,SAAA,CAAgB,EAChB,KAAAC,YAAA;AAAmB,EAJvB,CAtPkB,CAAV,CA+PZ7B,OAAAC,QAAA,CAAiBK,OAvSkG;",
"sources":["node_modules/Phaser/src/gameobjects/shape/Shape.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$Shape\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar GameObject = require('../GameObject');\r\nvar Line = require('../../geom/line/Line');\r\n\r\n/**\r\n * @classdesc\r\n * The Shape Game Object is a base class for the various different shapes, such as the Arc, Star or Polygon.\r\n * You cannot add a Shape directly to your Scene, it is meant as a base for your own custom Shape classes.\r\n *\r\n * @class Shape\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {string} [type] - The internal type of the Shape.\r\n * @param {any} [data] - The data of the source shape geometry, if any.\r\n */\r\nvar Shape = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Depth,\r\n        Components.GetBounds,\r\n        Components.Mask,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.ScrollFactor,\r\n        Components.Transform,\r\n        Components.Visible\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Shape (scene, type, data)\r\n    {\r\n        if (type === undefined) { type = 'Shape'; }\r\n\r\n        GameObject.call(this, scene, type);\r\n\r\n        /**\r\n         * The source Shape data. Typically a geometry object.\r\n         * You should not manipulate this directly.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#data\r\n         * @type {any}\r\n         * @readonly\r\n         * @since 3.13.0\r\n         */\r\n        this.geom = data;\r\n\r\n        /**\r\n         * Holds the polygon path data for filled rendering.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#pathData\r\n         * @type {number[]}\r\n         * @readonly\r\n         * @since 3.13.0\r\n         */\r\n        this.pathData = [];\r\n\r\n        /**\r\n         * Holds the earcut polygon path index data for filled rendering.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#pathIndexes\r\n         * @type {integer[]}\r\n         * @readonly\r\n         * @since 3.13.0\r\n         */\r\n        this.pathIndexes = [];\r\n\r\n        /**\r\n         * The fill color used by this Shape.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#fillColor\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.fillColor = 0xffffff;\r\n\r\n        /**\r\n         * The fill alpha value used by this Shape.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#fillAlpha\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.fillAlpha = 1;\r\n\r\n        /**\r\n         * The stroke color used by this Shape.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#strokeColor\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.strokeColor = 0xffffff;\r\n\r\n        /**\r\n         * The stroke alpha value used by this Shape.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#strokeAlpha\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.strokeAlpha = 1;\r\n\r\n        /**\r\n         * The stroke line width used by this Shape.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#lineWidth\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.lineWidth = 1;\r\n\r\n        /**\r\n         * Controls if this Shape is filled or not.\r\n         * Note that some Shapes do not support being filled (such as Line shapes)\r\n         *\r\n         * @name Phaser.GameObjects.Shape#isFilled\r\n         * @type {boolean}\r\n         * @since 3.13.0\r\n         */\r\n        this.isFilled = false;\r\n\r\n        /**\r\n         * Controls if this Shape is stroked or not.\r\n         * Note that some Shapes do not support being stroked (such as Iso Box shapes)\r\n         *\r\n         * @name Phaser.GameObjects.Shape#isStroked\r\n         * @type {boolean}\r\n         * @since 3.13.0\r\n         */\r\n        this.isStroked = false;\r\n\r\n        /**\r\n         * Controls if this Shape path is closed during rendering when stroked.\r\n         * Note that some Shapes are always closed when stroked (such as Ellipse shapes)\r\n         *\r\n         * @name Phaser.GameObjects.Shape#closePath\r\n         * @type {boolean}\r\n         * @since 3.13.0\r\n         */\r\n        this.closePath = true;\r\n\r\n        /**\r\n         * Private internal value.\r\n         * A Line used when parsing internal path data to avoid constant object re-creation.\r\n         *\r\n         * @name Phaser.GameObjects.Curve#_tempLine\r\n         * @type {Phaser.Geom.Line}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._tempLine = new Line();\r\n\r\n        this.initPipeline();\r\n    },\r\n\r\n    /**\r\n     * Sets the fill color and alpha for this Shape.\r\n     * \r\n     * If you wish for the Shape to not be filled then call this method with no arguments, or just set `isFilled` to `false`.\r\n     * \r\n     * Note that some Shapes do not support fill colors, such as the Line shape.\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Shape#setFillStyle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} [color] - The color used to fill this shape. If not provided the Shape will not be filled.\r\n     * @param {number} [alpha=1] - The alpha value used when filling this shape, if a fill color is given.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setFillStyle: function (color, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        if (color === undefined)\r\n        {\r\n            this.isFilled = false;\r\n        }\r\n        else\r\n        {\r\n            this.fillColor = color;\r\n            this.fillAlpha = alpha;\r\n            this.isFilled = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the stroke color and alpha for this Shape.\r\n     * \r\n     * If you wish for the Shape to not be stroked then call this method with no arguments, or just set `isStroked` to `false`.\r\n     * \r\n     * Note that some Shapes do not support being stroked, such as the Iso Box shape.\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Shape#setStrokeStyle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} [color] - The color used to stroke this shape. If not provided the Shape will not be stroked.\r\n     * @param {number} [alpha=1] - The alpha value used when stroking this shape, if a stroke color is given.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setStrokeStyle: function (lineWidth, color, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        if (lineWidth === undefined)\r\n        {\r\n            this.isStroked = false;\r\n        }\r\n        else\r\n        {\r\n            this.lineWidth = lineWidth;\r\n            this.strokeColor = color;\r\n            this.strokeAlpha = alpha;\r\n            this.isStroked = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets if this Shape path is closed during rendering when stroked.\r\n     * Note that some Shapes are always closed when stroked (such as Ellipse shapes)\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Shape#setClosePath\r\n     * @since 3.13.0\r\n     * \r\n     * @param {boolean} value - Set to `true` if the Shape should be closed when stroked, otherwise `false`.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setClosePath: function (value)\r\n    {\r\n        this.closePath = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal destroy handler, called as part of the destroy process.\r\n     *\r\n     * @method Phaser.GameObjects.Shape#preDestroy\r\n     * @protected\r\n     * @since 3.13.0\r\n     */\r\n    preDestroy: function ()\r\n    {\r\n        this.geom = null;\r\n        this._tempLine = null;\r\n        this.pathData = [];\r\n        this.pathIndexes = [];\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Shape;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Components","GameObject","Line","Shape","Extends","Mixins","Alpha","BlendMode","ComputedSize","Depth","GetBounds","Mask","Origin","Pipeline","ScaleMode","ScrollFactor","Transform","Visible","initialize","scene","type","data","undefined","call","geom","pathData","pathIndexes","fillColor","fillAlpha","strokeColor","lineWidth","strokeAlpha","isStroked","isFilled","closePath","_tempLine","initPipeline","setFillStyle","color","alpha","setStrokeStyle","setClosePath","value","preDestroy"]
}
