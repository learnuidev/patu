{"version":3,"sources":["cljc/java_time/year.cljc"],"mappings":"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","names":["cljc.java-time.year/min-value","java.time/Year","cljc.java-time.year/max-value","cljc.java-time.year/range","this4502","java-time-temporal-TemporalField4503","cljc.java-time.year/of","int4504","cljc.java-time.year/at-day","this4505","int4506","var_args","G__27495","cljc.java-time.year/plus","js/Error","this4507","G__4508","G__4509","this4510","G__4511","cljc.java-time.year/is-valid-month-day","this4512","java-time-MonthDay4513","cljc.java-time.year/query","this4514","java-time-temporal-TemporalQuery4515","cljc.java-time.year/is-leap","long57050","cljc.java-time.year/to-string","this4516","cljc.java-time.year/is-before","this4517","java-time-Year4518","G__27510","cljc.java-time.year/minus","this4519","G__4520","this4521","G__4522","G__4523","cljc.java-time.year/at-month-day","this4524","java-time-MonthDay4525","cljc.java-time.year/get-value","this4526","cljc.java-time.year/get-long","this4527","java-time-temporal-TemporalField4528","cljc.java-time.year/at-month","this4529","G__4530","cljc.java-time.year/until","this4531","java-time-temporal-Temporal4532","java-time-temporal-TemporalUnit4533","cljc.java-time.year/length","this4534","cljc.java-time.year/from","java-time-temporal-TemporalAccessor4535","cljc.java-time.year/is-after","this4536","java-time-Year4537","cljc.java-time.year/is-supported","this4538","G__4539","cljc.java-time.year/minus-years","this4540","long4541","G__27523","cljc.java-time.year/parse","java-lang-CharSequence4542","java-lang-CharSequence4543","java-time-format-DateTimeFormatter4544","cljc.java-time.year/hash-code","this4545","cljc.java-time.year/adjust-into","this4546","java-time-temporal-Temporal4547","G__27529","cljc.java-time.year/with","this4548","G__4549","this4550","G__4551","G__4552","G__27531","cljc.java-time.year/now","G__4554","cljc.java-time.year/compare-to","this4555","G__4556","cljc.java-time.year/get","this4557","java-time-temporal-TemporalField4558","cljc.java-time.year/equals","this4559","java-lang-Object4560","cljc.java-time.year/format","this4561","java-time-format-DateTimeFormatter4562","cljc.java-time.year/plus-years","this4563","long4564"],"sourcesContent":["(ns cljc.java-time.year (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Year]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Year])))\r\n(def min-value (. java.time.Year -MIN_VALUE))\r\n(def max-value (. java.time.Year -MAX_VALUE))\r\n(clojure.core/defn range {:arglists (quote ([\"java.time.Year\" \"java.time.temporal.TemporalField\"]))} (^java.time.temporal.ValueRange [^java.time.Year this4502 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4503] (.range this4502 java-time-temporal-TemporalField4503)))\r\n(clojure.core/defn of {:arglists (quote ([\"int\"]))} (^java.time.Year [^java.lang.Integer int4504] (. java.time.Year of int4504)))\r\n(clojure.core/defn at-day {:arglists (quote ([\"java.time.Year\" \"int\"]))} (^java.time.LocalDate [^java.time.Year this4505 ^java.lang.Integer int4506] (.atDay this4505 int4506)))\r\n(clojure.core/defn plus {:arglists (quote ([\"java.time.Year\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.Year\" \"java.time.temporal.TemporalAmount\"] [\"java.time.Year\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.Year\" \"java.time.temporal.TemporalAmount\"]))} (^java.lang.Object [this4507 G__4508 G__4509] #? (:cljs (.plus ^java.time.Year this4507 G__4508 G__4509) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4508) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4509)) (clojure.core/let [G__4508 (clojure.core/long G__4508) G__4509 ^\"java.time.temporal.TemporalUnit\" G__4509] (.plus ^java.time.Year this4507 G__4508 G__4509)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4508) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4509)) (clojure.core/let [G__4508 (clojure.core/long G__4508) G__4509 ^\"java.time.temporal.TemporalUnit\" G__4509] (.plus ^java.time.Year this4507 G__4508 G__4509)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.lang.Object [this4510 G__4511] #? (:cljs (.plus ^java.time.Year this4510 G__4511) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4511)) (clojure.core/let [G__4511 ^\"java.time.temporal.TemporalAmount\" G__4511] (.plus ^java.time.Year this4510 G__4511)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4511)) (clojure.core/let [G__4511 ^\"java.time.temporal.TemporalAmount\" G__4511] (.plus ^java.time.Year this4510 G__4511)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn is-valid-month-day {:arglists (quote ([\"java.time.Year\" \"java.time.MonthDay\"]))} (^java.lang.Boolean [^java.time.Year this4512 ^java.time.MonthDay java-time-MonthDay4513] (.isValidMonthDay this4512 java-time-MonthDay4513)))\r\n(clojure.core/defn query {:arglists (quote ([\"java.time.Year\" \"java.time.temporal.TemporalQuery\"]))} (^java.lang.Object [^java.time.Year this4514 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4515] (.query this4514 java-time-temporal-TemporalQuery4515)))\r\n^{:line 78, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 78, :column 54} (quote ^{:line 78, :column 61} ([\"long\"]))} ^{:line 79, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 79, :column 56} (. java.time.Year isLeap long57050)))\r\n(clojure.core/defn to-string {:arglists (quote ([\"java.time.Year\"]))} (^java.lang.String [^java.time.Year this4516] (.toString this4516)))\r\n(clojure.core/defn is-before {:arglists (quote ([\"java.time.Year\" \"java.time.Year\"]))} (^java.lang.Boolean [^java.time.Year this4517 ^java.time.Year java-time-Year4518] (.isBefore this4517 java-time-Year4518)))\r\n(clojure.core/defn minus {:arglists (quote ([\"java.time.Year\" \"java.time.temporal.TemporalAmount\"] [\"java.time.Year\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.Year\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.Year\" \"java.time.temporal.TemporalAmount\"]))} (^java.lang.Object [this4519 G__4520] #? (:cljs (.minus ^java.time.Year this4519 G__4520) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4520)) (clojure.core/let [G__4520 ^\"java.time.temporal.TemporalAmount\" G__4520] (.minus ^java.time.Year this4519 G__4520)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4520)) (clojure.core/let [G__4520 ^\"java.time.temporal.TemporalAmount\" G__4520] (.minus ^java.time.Year this4519 G__4520)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.lang.Object [this4521 G__4522 G__4523] #? (:cljs (.minus ^java.time.Year this4521 G__4522 G__4523) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4522) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4523)) (clojure.core/let [G__4522 (clojure.core/long G__4522) G__4523 ^\"java.time.temporal.TemporalUnit\" G__4523] (.minus ^java.time.Year this4521 G__4522 G__4523)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4522) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4523)) (clojure.core/let [G__4522 (clojure.core/long G__4522) G__4523 ^\"java.time.temporal.TemporalUnit\" G__4523] (.minus ^java.time.Year this4521 G__4522 G__4523)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn at-month-day {:arglists (quote ([\"java.time.Year\" \"java.time.MonthDay\"]))} (^java.time.LocalDate [^java.time.Year this4524 ^java.time.MonthDay java-time-MonthDay4525] (.atMonthDay this4524 java-time-MonthDay4525)))\r\n(clojure.core/defn get-value {:arglists (quote ([\"java.time.Year\"]))} (^java.lang.Integer [^java.time.Year this4526] (jti/getter value this4526)))\r\n(clojure.core/defn get-long {:arglists (quote ([\"java.time.Year\" \"java.time.temporal.TemporalField\"]))} (^long [^java.time.Year this4527 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4528] (.getLong this4527 java-time-temporal-TemporalField4528)))\r\n(clojure.core/defn at-month {:arglists (quote ([\"java.time.Year\" \"int\"] [\"java.time.Year\" \"java.time.Month\"]))} (^java.time.YearMonth [this4529 G__4530] #? (:cljs (.atMonth ^java.time.Year this4529 G__4530) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Number\") G__4530)) (clojure.core/let [G__4530 (clojure.core/int G__4530)] (.atMonth ^java.time.Year this4529 G__4530)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.Month\") G__4530)) (clojure.core/let [G__4530 ^\"java.time.Month\" G__4530] (.atMonth ^java.time.Year this4529 G__4530)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn until {:arglists (quote ([\"java.time.Year\" \"java.time.temporal.Temporal\" \"java.time.temporal.TemporalUnit\"]))} (^long [^java.time.Year this4531 ^java.time.temporal.Temporal java-time-temporal-Temporal4532 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4533] (.until this4531 java-time-temporal-Temporal4532 java-time-temporal-TemporalUnit4533)))\r\n(clojure.core/defn length {:arglists (quote ([\"java.time.Year\"]))} (^java.lang.Integer [^java.time.Year this4534] (.length this4534)))\r\n(clojure.core/defn from {:arglists (quote ([\"java.time.temporal.TemporalAccessor\"]))} (^java.time.Year [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4535] (. java.time.Year from java-time-temporal-TemporalAccessor4535)))\r\n(clojure.core/defn is-after {:arglists (quote ([\"java.time.Year\" \"java.time.Year\"]))} (^java.lang.Boolean [^java.time.Year this4536 ^java.time.Year java-time-Year4537] (.isAfter this4536 java-time-Year4537)))\r\n(clojure.core/defn is-supported {:arglists (quote ([\"java.time.Year\" \"java.time.temporal.TemporalField\"] [\"java.time.Year\" \"java.time.temporal.TemporalUnit\"]))} (^java.lang.Boolean [this4538 G__4539] #? (:cljs (.isSupported ^java.time.Year this4538 G__4539) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalField\") G__4539)) (clojure.core/let [G__4539 ^\"java.time.temporal.TemporalField\" G__4539] (.isSupported ^java.time.Year this4538 G__4539)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4539)) (clojure.core/let [G__4539 ^\"java.time.temporal.TemporalUnit\" G__4539] (.isSupported ^java.time.Year this4538 G__4539)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn minus-years {:arglists (quote ([\"java.time.Year\" \"long\"]))} (^java.time.Year [^java.time.Year this4540 ^long long4541] (.minusYears this4540 long4541)))\r\n(clojure.core/defn parse {:arglists (quote ([\"java.lang.CharSequence\"] [\"java.lang.CharSequence\" \"java.time.format.DateTimeFormatter\"]))} (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence4542] (. java.time.Year parse java-lang-CharSequence4542)) (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence4543 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4544] (. java.time.Year parse java-lang-CharSequence4543 java-time-format-DateTimeFormatter4544)))\r\n(clojure.core/defn hash-code {:arglists (quote ([\"java.time.Year\"]))} (^java.lang.Integer [^java.time.Year this4545] (.hashCode this4545)))\r\n(clojure.core/defn adjust-into {:arglists (quote ([\"java.time.Year\" \"java.time.temporal.Temporal\"]))} (^java.time.temporal.Temporal [^java.time.Year this4546 ^java.time.temporal.Temporal java-time-temporal-Temporal4547] (.adjustInto this4546 java-time-temporal-Temporal4547)))\r\n(clojure.core/defn with {:arglists (quote ([\"java.time.Year\" \"java.time.temporal.TemporalAdjuster\"] [\"java.time.Year\" \"java.time.temporal.TemporalField\" \"long\"] [\"java.time.Year\" \"java.time.temporal.TemporalAdjuster\"] [\"java.time.Year\" \"java.time.temporal.TemporalField\" \"long\"]))} (^java.lang.Object [this4548 G__4549] #? (:cljs (.with ^java.time.Year this4548 G__4549) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAdjuster\") G__4549)) (clojure.core/let [G__4549 ^\"java.time.temporal.TemporalAdjuster\" G__4549] (.with ^java.time.Year this4548 G__4549)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAdjuster\") G__4549)) (clojure.core/let [G__4549 ^\"java.time.temporal.TemporalAdjuster\" G__4549] (.with ^java.time.Year this4548 G__4549)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.lang.Object [this4550 G__4551 G__4552] #? (:cljs (.with ^java.time.Year this4550 G__4551 G__4552) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalField\") G__4551) (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4552)) (clojure.core/let [G__4551 ^\"java.time.temporal.TemporalField\" G__4551 G__4552 (clojure.core/long G__4552)] (.with ^java.time.Year this4550 G__4551 G__4552)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalField\") G__4551) (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4552)) (clojure.core/let [G__4551 ^\"java.time.temporal.TemporalField\" G__4551 G__4552 (clojure.core/long G__4552)] (.with ^java.time.Year this4550 G__4551 G__4552)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn now {:arglists (quote ([] [\"java.time.ZoneId\"] [\"java.time.Clock\"]))} (^java.time.Year [] (. java.time.Year now)) (^java.time.Year [G__4554] #? (:cljs (. java.time.Year now G__4554) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.ZoneId\") G__4554)) (clojure.core/let [G__4554 ^\"java.time.ZoneId\" G__4554] (. java.time.Year now G__4554)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.Clock\") G__4554)) (clojure.core/let [G__4554 ^\"java.time.Clock\" G__4554] (. java.time.Year now G__4554)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn compare-to {:arglists (quote ([\"java.time.Year\" \"java.lang.Object\"] [\"java.time.Year\" \"java.time.Year\"]))} (^java.lang.Integer [this4555 G__4556] #? (:cljs (.compareTo ^java.time.Year this4555 G__4556) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Object\") G__4556)) (clojure.core/let [G__4556 ^\"java.lang.Object\" G__4556] (.compareTo ^java.time.Year this4555 G__4556)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.Year\") G__4556)) (clojure.core/let [G__4556 ^\"java.time.Year\" G__4556] (.compareTo ^java.time.Year this4555 G__4556)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn get {:arglists (quote ([\"java.time.Year\" \"java.time.temporal.TemporalField\"]))} (^java.lang.Integer [^java.time.Year this4557 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4558] (.get this4557 java-time-temporal-TemporalField4558)))\r\n(clojure.core/defn equals {:arglists (quote ([\"java.time.Year\" \"java.lang.Object\"]))} (^java.lang.Boolean [^java.time.Year this4559 ^java.lang.Object java-lang-Object4560] (.equals this4559 java-lang-Object4560)))\r\n(clojure.core/defn format {:arglists (quote ([\"java.time.Year\" \"java.time.format.DateTimeFormatter\"]))} (^java.lang.String [^java.time.Year this4561 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4562] (.format this4561 java-time-format-DateTimeFormatter4562)))\r\n(clojure.core/defn plus-years {:arglists (quote ([\"java.time.Year\" \"long\"]))} (^java.time.Year [^java.time.Year this4563 ^long long4564] (.plusYears this4563 long4564)))\r\n"]}