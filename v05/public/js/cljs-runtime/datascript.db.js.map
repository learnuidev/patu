{"version":3,"sources":["datascript/db.cljc"],"mappings":"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","names":["datascript.db/Exception","js/Error","datascript.db/IllegalArgumentException","datascript.db/UnsupportedOperationException","datascript.db/e0","datascript.db/tx0","datascript.db/emax","datascript.db/txmax","datascript.db/implicit-schema","datascript.db/seqable?","x","cljs.core/seqable?","me.tonsky.persistent-sorted-set.arrays/array?","datascript.db/cljs-env?","env","cljs.core/boolean","datascript.db/combine-hashes","y","cljs.core/hash-combine","datascript$db$IDatom$datom_tx$dyn","x__4428__auto__","m__4429__auto__","datascript.db/datom-tx","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","datascript$db$IDatom$datom_added$dyn","datascript.db/datom-added","datascript.db/IDatom","this","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","datascript.db/Datom","datascript.db/->Datom","e","a","v","tx","_hash","d","datascript.db/hash-datom","o","datascript.db/equiv-datom","datascript.db/seq-datom","k","datascript.db/val-at-datom","nf","i","datascript.db/nth-datom","not-found","datascript.db/assoc-datom","writer","opts","cljs.core/pr-sequential-writer","cljs.core/pr-writer","goog/exportSymbol","var_args","G__28250","datascript.db/datom","added","datascript.db/datom?","cljs.core/hash","cljs.core._EQ_","cljs.core/List","G__28251","G__28253","G__28254","G__28255","G__28256","cljs.core/Keyword","datascript.db.datom","datascript.db/datom-from-reader","vec","cljs.core.apply","datascript.db/cmp","o1","o2","cljs.core/compare","datascript.db/cmp-datoms-eavt","d1","d2","c__27671__auto__","datascript.db/cmp-datoms-aevt","datascript.db/cmp-datoms-avet","datascript.db/cmp-attr-quick","a1","a2","cljs.core/-compare","goog.array/defaultCompare","datascript.db/cmp-datoms-eav-quick","datascript.db/cmp-datoms-eavt-quick","datascript.db/cmp-datoms-aevt-quick","datascript.db/cmp-datoms-avet-quick","datascript.db/diff-sorted","b","cmp","only-a","only-b","both","cljs.core/empty?","cljs.core/not-empty","cljs.core.into","first-a","cljs.core/first","first-b","diff","cljs.core.conj","cljs.core/next","datascript$db$ISearch$_search$dyn","datascript.db/-search","datascript.db/ISearch","data","pattern","datascript$db$IIndexAccess$_datoms$dyn","datascript.db/-datoms","datascript$db$IIndexAccess$_seek_datoms$dyn","datascript.db/-seek-datoms","datascript$db$IIndexAccess$_rseek_datoms$dyn","datascript.db/-rseek-datoms","datascript$db$IIndexAccess$_index_range$dyn","datascript.db/-index-range","datascript.db/IIndexAccess","db","index","components","attr","start","end","datascript$db$IDB$_schema$dyn","datascript.db/-schema","datascript$db$IDB$_attrs_by$dyn","datascript.db/-attrs-by","datascript.db/IDB","property","datascript.db/db-transient","cljs.core.update","cljs.core/transient","datascript.db/db-persistent!","cljs.core/persistent!","this__4380__auto__","k__4381__auto__","this__4382__auto__","k28260","else__4383__auto__","G__28264","schema","eavt","aevt","avet","max-eid","max-tx","rschema","hash","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__28265","vec__28266","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core.concat","cljs.core/PersistentVector","G__28259","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this28261","other28262","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","this__4387__auto__","k__4388__auto__","pred__28269","cljs.core/keyword-identical?","expr__28270","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","datascript.db/DB","this__4423__auto__","writer__4424__auto__","G__28263","extmap__4419__auto__","G__28272","cljs.core/record?","datascript.db/->DB","datascript.db/map->DB","datascript.db/hash-db","other","datascript.db/equiv-db","cljs.core/-seq","cljs.core/-rseq","cljs.core/with-meta","G__28273","datascript.db/empty-db","cljs.core/meta","w","datascript.db/pr-db","key","cljs.core.ex_info","fexpr__28276","vec__28277","me.tonsky.persistent_sorted_set.slice","cljs.core.filter","datascript.db/indexing?","cs","datascript.db/components->pattern","me.tonsky.persistent_sorted_set.rslice","cljs.core.pr_str","G__28274","G__28275","datascript.db/validate-attr","datascript.db/resolve-datom","datascript.db/db?","cljs.core/native-satisfies?","k28291","G__28295","unfiltered-db","pred","p__28296","vec__28297","G__28290","this28292","other28293","pred__28300","expr__28301","datascript.db/FilteredDB","G__28294","G__28303","datascript.db/->FilteredDB","datascript.db/map->FilteredDB","datascript.db/hash-fdb","_","datascript.db/attr->properties","G__28304","G__28305","datascript.db/rschema","cljs.core/reduce-kv","m","keys->values","value","prop","datascript.db/validate-schema-key","expected","datascript.db/validate-schema","seq__28306","chunk__28307","count__28308","i__28309","vec__28316","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__28319","kv","comp?","and__4115__auto__","cljs.core.not_EQ_","G__28323","datascript.db.empty_db","cljs.core/map?","cljs.core.merge","me.tonsky.persistent_sorted_set.sorted_set_by","cljs.core.atom","datascript.db/init-max-eid","or__4126__auto__","G__28325","datascript.db/init-db","datoms","datascript.db.init_db","indexed","arr","G__28326","me.tonsky.persistent-sorted-set.arrays/into-array","me.tonsky.persistent-sorted-set.arrays/asort","me.tonsky.persistent-sorted-set/from-sorted-array","avet-datoms","avet-arr","cljs.core/to-array","cljs.core.transduce","cljs.core.map","cljs.core/max","datascript.db/equiv-db-index","xs","ys","cljs.core/deref","h","cljs.core/reset!","p__28327","map__28328","cljs.core/hash-map","datascript.db/db-from-reader","p__28330","vec__28331","t","default-e","default-tx","G__28334","G__28335","datascript.db/entid-some","datascript.db/ref?","datascript.db/entid-strict","p__28336","vec__28337","c0","c1","c2","c3","G__28340","k28342","G__28346","db-before","db-after","tx-data","tempids","tx-meta","p__28347","vec__28348","G__28341","this28343","other28344","pred__28351","expr__28352","datascript.db/TxReport","G__28345","G__28354","datascript.db/->TxReport","datascript.db/map->TxReport","datascript.db/is-attr?","datascript.db/multival?","datascript.db/component?","datascript.db/entid","eid","cljs.core/sequential?","vec__28355","cljs.core/array?","cljs.core.array_seq","datascript.db/validate-datom","datom","temp__5739__auto__","found","datascript.db/validate-eid","at","datascript.db/validate-val","datascript.db/current-tx","report","cljs.core.get_in","datascript.db/next-eid","datascript.db/tx-id?","datascript.db/tempid?","datascript.db/new-eid?","datascript.db/advance-max-eid","G__28358","G__28360","datascript.db/allocate-eid","cljs.core.update_in","G__28361","cljs.core/assoc-in","datascript.db/with-datom","indexing?","G__28362","me.tonsky.persistent-sorted-set/conj","temp__5737__auto__","removing","G__28363","me.tonsky.persistent-sorted-set/disj","datascript.db/transact-report","cljs.core/conj","datascript.db/reverse-ref?","cljs.core/name","cljs.core/re-matches","datascript.db/reverse-ref","cljs.core.keyword","cljs.core/namespace","cljs.core.subs","vec__28364","ns","name","datascript.db/check-upsert-conflict","entity","acc","vec__28367","_e","datascript.db/upsert-reduce-fn","eav","vec__28370","_a","_v","datascript.db/upsert-eid","idents","cljs.core/coll?","p1__28373#","p2__28374#","datascript.db/maybe-wrap-multival","vs","datascript.db/explode","iter__4529__auto__","s__28376","cljs.core/LazySeq","xs__6292__auto__","vec__28381","iterys__4525__auto__","s__28378","c__4527__auto__","size__4528__auto__","b__28380","cljs.core/chunk-buffer","i__28379","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28377","cljs.core/cons","cljs.core/rest","fs__4526__auto__","iter__28375","reverse?","straight-a","p__28384","vec__28385","datascript.db/transact-add","ent","new-datom","old-datom","datascript.db/transact-retract-datom","datascript.db/retract-components","cljs.core.comp","datascript.db/retry-with-tempid","initial-report","es","tempid","upserted-eid","tempids'","report'","datascript.db/transact-tx-data","datascript.db/builtin-fn?","initial-es","vec__28405","seq__28406","first__28407","map__28408","entities","cljs.core/inc","old-eid","id","datascript.db.allocate_eid","new-eid","new-entity","vec__28410","op","vec__28413","seq__28414","first__28415","f","args","cljs.core/not","ident","fun","cljs.core/fn?","vec__28416","ov","nv","cljs.core/vec","cljs.core/some","vid","allocated-eid","e-datoms","v-datoms","cljs.core.mapcat","vec__28419"],"sourcesContent":["(ns ^:no-doc ^:lean-ns datascript.db\n  (:require\n    #?(:cljs [goog.array :as garray])\n    [clojure.walk]\n    [clojure.data]\n    [me.tonsky.persistent-sorted-set :as set]\n    [me.tonsky.persistent-sorted-set.arrays :as arrays])\n  #?(:cljs (:require-macros [datascript.db :refer [case-tree combine-cmp raise defrecord-updatable cond+]]))\n  (:refer-clojure :exclude [seqable?])) \n\n;; ----------------------------------------------------------------------------\n\n#?(:cljs\n   (do\n     (def Exception js/Error)\n     (def IllegalArgumentException js/Error)\n     (def UnsupportedOperationException js/Error)))\n\n(def ^:const e0    0)\n(def ^:const tx0   0x20000000)\n(def ^:const emax  0x7FFFFFFF)\n(def ^:const txmax 0x7FFFFFFF)\n(def ^:const implicit-schema {:db/ident {:db/unique :db.unique/identity}})\n\n;; ----------------------------------------------------------------------------\n\n#?(:clj\n  (defmacro raise [& fragments]\n    (let [msgs (butlast fragments)\n          data (last fragments)]\n      `(throw (ex-info (str ~@(map (fn [m#] (if (string? m#) m# (list 'pr-str m#))) msgs)) ~data)))))\n\n(defn #?@(:clj  [^Boolean seqable?]  \n          :cljs [^boolean seqable?])\n  [x]\n  (and (not (string? x))\n  #?(:cljs (or (cljs.core/seqable? x)\n               (arrays/array? x))\n     :clj  (or (seq? x)\n               (instance? clojure.lang.Seqable x)\n               (nil? x)\n               (instance? Iterable x)\n               (arrays/array? x)\n               (instance? java.util.Map x)))))\n\n#?(:clj\n  (defmacro cond+ [& clauses]\n    (when-some [[test expr & rest] clauses]\n      (case test\n        :let `(let ~expr (cond+ ~@rest))\n        `(if ~test ~expr (cond+ ~@rest))))))\n\n#?(:clj\n(defmacro some-of\n  ([] nil)\n  ([x] x)\n  ([x & more]\n    `(let [x# ~x] (if (nil? x#) (some-of ~@more) x#)))))\n\n;; ----------------------------------------------------------------------------\n;; macros and funcs to support writing defrecords and updating\n;; (replacing) builtins, i.e., Object/hashCode, IHashEq hasheq, etc.\n;; code taken from prismatic:\n;;  https://github.com/Prismatic/schema/commit/e31c419c56555c83ef9ee834801e13ef3c112597\n;;\n\n(defn- cljs-env?\n  \"Take the &env from a macro, and tell whether we are expanding into cljs.\"\n  [env]\n  (boolean (:ns env)))\n\n#?(:clj\n   (defmacro if-cljs\n     \"Return then if we are generating cljs code and else for Clojure code.\n     https://groups.google.com/d/msg/clojurescript/iBY5HaQda4A/w1lAQi9_AwsJ\"\n     [then else]\n     (if (cljs-env? &env) then else)))\n\n(defn combine-hashes [x y]\n  #?(:clj  (clojure.lang.Util/hashCombine x y)\n     :cljs (hash-combine x y)))\n\n#?(:clj\n   (defn- get-sig [method]\n     ;; expects something like '(method-symbol [arg arg arg] ...)\n     ;; if the thing matches, returns [fully-qualified-symbol arity], otherwise nil\n     (and (sequential? method)\n          (symbol? (first method))\n          (vector? (second method))\n          (let [sym (first method)\n                ns  (or (some->> sym resolve meta :ns str) \"clojure.core\")]\n            [(symbol ns (name sym)) (-> method second count)]))))\n\n#?(:clj\n   (defn- dedupe-interfaces [deftype-form]\n     ;; get the interfaces list, remove any duplicates, similar to remove-nil-implements in potemkin\n     ;; verified w/ deftype impl in compiler:\n     ;; (deftype* tagname classname [fields] :implements [interfaces] :tag tagname methods*)\n     (let [[deftype* tagname classname fields implements interfaces & rest] deftype-form]\n       (when (or (not= deftype* 'deftype*) (not= implements :implements))\n         (throw (IllegalArgumentException. \"deftype-form mismatch\")))\n       (list* deftype* tagname classname fields implements (vec (distinct interfaces)) rest))))\n\n#?(:clj\n   (defn- make-record-updatable-clj [name fields & impls]\n     (let [impl-map (->> impls (map (juxt get-sig identity)) (filter first) (into {}))\n           body     (macroexpand-1 (list* 'defrecord name fields impls))]\n       (clojure.walk/postwalk\n        (fn [form]\n          (if (and (sequential? form) (= 'deftype* (first form)))\n            (->> form\n                 dedupe-interfaces\n                 (remove (fn [method]\n                           (when-some [impl (-> method get-sig impl-map)]\n                             (not= method impl)))))\n            form))\n        body))))\n\n#?(:clj\n   (defn- make-record-updatable-cljs [name fields & impls]\n     `(do\n        (defrecord ~name ~fields)\n        (extend-type ~name ~@impls))))\n\n#?(:clj\n   (defmacro defrecord-updatable [name fields & impls]\n     `(if-cljs\n       ~(apply make-record-updatable-cljs name fields impls)\n       ~(apply make-record-updatable-clj  name fields impls))))\n\n;; ----------------------------------------------------------------------------\n\n(declare hash-datom equiv-datom seq-datom nth-datom assoc-datom val-at-datom)\n\n(defprotocol IDatom\n  (datom-tx [this])\n  (datom-added [this]))\n\n(deftype Datom #?(:clj [^int e a v ^int tx ^:unsynchronized-mutable ^int _hash]\n                  :cljs [^number e a v ^number tx ^:mutable ^number _hash])\n  IDatom\n  (datom-tx [d] (if (pos? tx) tx (- tx)))\n  (datom-added [d] (pos? tx))\n\n  #?@(:cljs\n       [IHash\n        (-hash [d] (if (zero? _hash)\n                     (set! _hash (hash-datom d))\n                     _hash))\n        IEquiv\n        (-equiv [d o] (and (instance? Datom o) (equiv-datom d o)))\n\n        ISeqable\n        (-seq [d] (seq-datom d))\n\n        ILookup\n        (-lookup [d k] (val-at-datom d k nil))\n        (-lookup [d k nf] (val-at-datom d k nf))\n\n        IIndexed\n        (-nth [this i] (nth-datom this i))\n        (-nth [this i not-found] (nth-datom this i not-found))\n        \n        IAssociative\n        (-assoc [d k v] (assoc-datom d k v))\n\n        IPrintWithWriter\n        (-pr-writer [d writer opts]\n                    (pr-sequential-writer writer pr-writer\n                                          \"#datascript/Datom [\" \" \" \"]\"\n                                          opts [(.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)]))]\n      :clj\n       [Object\n        (hashCode [d]\n          (if (zero? _hash)\n            (let [h (int (hash-datom d))]\n              (set! _hash h)\n              h)\n            _hash))\n        (toString [d] (pr-str d))\n\n        clojure.lang.IHashEq\n        (hasheq [d] (.hashCode d))\n\n        clojure.lang.Seqable\n        (seq [d] (seq-datom d))\n\n        clojure.lang.IPersistentCollection\n        (equiv [d o] (and (instance? Datom o) (equiv-datom d o)))\n        (empty [d] (throw (UnsupportedOperationException. \"empty is not supported on Datom\")))\n        (count [d] 5)\n        (cons [d [k v]] (assoc-datom d k v))\n        \n        clojure.lang.Indexed\n        (nth [this i]           (nth-datom this i))\n        (nth [this i not-found] (nth-datom this i not-found))\n\n        clojure.lang.ILookup\n        (valAt [d k] (val-at-datom d k nil))\n        (valAt [d k nf] (val-at-datom d k nf))\n\n        clojure.lang.Associative\n        (entryAt [d k] (some->> (val-at-datom d k nil) (clojure.lang.MapEntry k)))\n        (containsKey [e k] (#{:e :a :v :tx :added} k))\n        (assoc [d k v] (assoc-datom d k v))]\n))\n\n#?(:cljs (goog/exportSymbol \"datascript.db.Datom\" Datom))\n\n(defn ^Datom datom\n  ([e a v] (Datom. e a v tx0 0))\n  ([e a v tx] (Datom. e a v tx 0))\n  ([e a v tx added] (Datom. e a v (if added tx (- tx)) 0)))\n\n(defn datom? [x] (instance? Datom x))\n\n(defn- hash-datom [^Datom d]\n  (-> (hash (.-e d))\n      (combine-hashes (hash (.-a d)))\n      (combine-hashes (hash (.-v d)))))\n\n(defn- equiv-datom [^Datom d ^Datom o]\n  (and (== (.-e d) (.-e o))\n       (= (.-a d) (.-a o))\n       (= (.-v d) (.-v o))))\n\n(defn- seq-datom [^Datom d]\n  (list (.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)))\n\n;; keep it fast by duplicating for both keyword and string cases\n;; instead of using sets or some other matching func\n(defn- val-at-datom [^Datom d k not-found]\n  (case k\n    :e      (.-e d) \"e\"     (.-e d)\n    :a      (.-a d) \"a\"     (.-a d)\n    :v      (.-v d) \"v\"     (.-v d)\n    :tx     (datom-tx d)\n    \"tx\"    (datom-tx d)\n    :added  (datom-added d)\n    \"added\" (datom-added d)\n    not-found))\n\n(defn- nth-datom\n  ([^Datom d ^long i]\n    (case i\n      0 (.-e d)\n      1 (.-a d)\n      2 (.-v d)\n      3 (datom-tx d)\n      4 (datom-added d)\n        #?(:clj  (throw (IndexOutOfBoundsException.))\n           :cljs (throw (js/Error. (str \"Datom/-nth: Index out of bounds: \" i))))))\n  ([^Datom d ^long i not-found]\n    (case i\n      0 (.-e d)\n      1 (.-a d)\n      2 (.-v d)\n      3 (datom-tx d)\n      4 (datom-added d)\n        not-found)))\n\n(defn- ^Datom assoc-datom [^Datom d k v]\n  (case k\n    :e     (datom v       (.-a d) (.-v d) (datom-tx d) (datom-added d))\n    :a     (datom (.-e d) v       (.-v d) (datom-tx d) (datom-added d))\n    :v     (datom (.-e d) (.-a d) v       (datom-tx d) (datom-added d))\n    :tx    (datom (.-e d) (.-a d) (.-v d) v            (datom-added d))\n    :added (datom (.-e d) (.-a d) (.-v d) (datom-tx d) v)\n    (throw (IllegalArgumentException. (str \"invalid key for #datascript/Datom: \" k)))))\n\n;; printing and reading\n;; #datomic/DB {:schema <map>, :datoms <vector of [e a v tx]>}\n\n(defn ^Datom datom-from-reader [vec]\n  (apply datom vec))\n\n#?(:clj\n   (defmethod print-method Datom [^Datom d, ^java.io.Writer w]\n     (.write w (str \"#datascript/Datom \"))\n     (binding [*out* w]\n       (pr [(.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)]))))\n\n;; ----------------------------------------------------------------------------\n;; datom cmp macros/funcs\n;;\n\n#?(:clj\n  (defmacro combine-cmp [& comps]\n    (loop [comps (reverse comps)\n           res   (num 0)]\n      (if (not-empty comps)\n        (recur\n          (next comps)\n          `(let [c# ~(first comps)]\n             (if (== 0 c#)\n               ~res\n               c#)))\n        res))))\n\n#?(:clj\n   (defn- -case-tree [queries variants]\n     (if queries\n       (let [v1 (take (/ (count variants) 2) variants)\n             v2 (drop (/ (count variants) 2) variants)]\n         (list 'if (first queries)\n               (-case-tree (next queries) v1)\n               (-case-tree (next queries) v2)))\n       (first variants))))\n\n#?(:clj\n   (defmacro case-tree [qs vs]\n     (-case-tree qs vs)))\n\n(defn cmp [o1 o2]\n  (if (nil? o1) 0\n    (if (nil? o2) 0\n      (compare o1 o2))))\n\n;; Slower cmp-* fns allows for datom fields to be nil.\n;; Such datoms come from slice method where they are used as boundary markers.\n\n(defn cmp-datoms-eavt [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp (.-a d1) (.-a d2))\n    (cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-aevt [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp (.-a d1) (.-a d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-avet [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp (.-a d1) (.-a d2))\n    (cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n;; fast versions without nil checks\n\n(defn- cmp-attr-quick [a1 a2]\n  ;; either both are keywords or both are strings\n  #?(:cljs\n     (if (keyword? a1)\n       (-compare a1 a2)\n       (garray/defaultCompare a1 a2))\n     :clj\n     (.compareTo ^Comparable a1 a2)))\n\n(defn cmp-datoms-eav-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (compare (.-v d1) (.-v d2))))\n\n(defn cmp-datoms-eavt-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-aevt-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-avet-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn- diff-sorted [a b cmp]\n  (loop [only-a []\n         only-b []\n         both   []\n         a      a\n         b      b]\n    (cond\n      (empty? a) [(not-empty only-a) (not-empty (into only-b b)) (not-empty both)]\n      (empty? b) [(not-empty (into only-a a)) (not-empty only-b) (not-empty both)]\n      :else\n      (let [first-a (first a)\n            first-b (first b)\n            diff (cmp first-a first-b)]\n        (cond\n          (== diff 0) (recur only-a                only-b                (conj both first-a) (next a) (next b))\n          (< diff 0)  (recur (conj only-a first-a) only-b                both                (next a) b)\n          (> diff 0)  (recur only-a                (conj only-b first-b) both                a        (next b)))))))\n\n;; ----------------------------------------------------------------------------\n\n;;;;;;;;;; Searching\n\n(defprotocol ISearch\n  (-search [data pattern]))\n\n(defprotocol IIndexAccess\n  (-datoms [db index components])\n  (-seek-datoms [db index components])\n  (-rseek-datoms [db index components])\n  (-index-range [db attr start end]))\n\n(defprotocol IDB\n  (-schema [db])\n  (-attrs-by [db property]))\n\n;; ----------------------------------------------------------------------------\n\n(declare hash-db hash-fdb equiv-db empty-db resolve-datom validate-attr components->pattern indexing?)\n#?(:cljs (declare pr-db))\n\n(defn db-transient [db]\n  (-> db\n    (update :eavt transient)\n    (update :aevt transient)\n    (update :avet transient)))\n\n(defn db-persistent! [db]\n  (-> db\n    (update :eavt persistent!)\n    (update :aevt persistent!)\n    (update :avet persistent!)))\n\n(defrecord-updatable DB [schema eavt aevt avet max-eid max-tx rschema hash]\n  #?@(:cljs\n      [IHash                (-hash  [db]        (hash-db db))\n       IEquiv               (-equiv [db other]  (equiv-db db other))\n       ISeqable             (-seq   [db]        (-seq  (.-eavt db)))\n       IReversible          (-rseq  [db]        (-rseq (.-eavt db)))\n       ICounted             (-count [db]        (count (.-eavt db)))\n       IEmptyableCollection (-empty [db]        (with-meta (empty-db (.-schema db)) (meta db)))\n       IPrintWithWriter     (-pr-writer [db w opts] (pr-db db w opts))\n       IEditableCollection  (-as-transient [db] (db-transient db))\n       ITransientCollection (-conj! [db key] (throw (ex-info \"datascript.DB/conj! is not supported\" {})))\n                            (-persistent! [db] (db-persistent! db))]\n\n      :clj\n      [Object               (hashCode [db]      (hash-db db))\n       clojure.lang.IHashEq (hasheq [db]        (hash-db db))\n       clojure.lang.Seqable (seq [db]           (seq eavt))\n       clojure.lang.IPersistentCollection\n                            (count [db]         (count eavt))\n                            (equiv [db other]   (equiv-db db other))\n       clojure.lang.IEditableCollection \n                            (empty [db]         (with-meta (empty-db schema) (meta db)))\n                            (asTransient [db] (db-transient db))\n       clojure.lang.ITransientCollection\n                            (conj [db key] (throw (ex-info \"datascript.DB/conj! is not supported\" {})))\n                            (persistent [db] (db-persistent! db))])\n\n  IDB\n  (-schema [db] (.-schema db))\n  (-attrs-by [db property] ((.-rschema db) property))\n\n  ISearch\n  (-search [db pattern]\n    (let [[e a v tx] pattern\n          eavt (.-eavt db)\n          aevt (.-aevt db)\n          avet (.-avet db)]\n      (case-tree [e a (some? v) tx]\n        [(set/slice eavt (datom e a v tx) (datom e a v tx))                   ;; e a v tx\n         (set/slice eavt (datom e a v tx0) (datom e a v txmax))               ;; e a v _\n         (->> (set/slice eavt (datom e a nil tx0) (datom e a nil txmax))      ;; e a _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice eavt (datom e a nil tx0) (datom e a nil txmax))           ;; e a _ _\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ v tx\n              (filter (fn [^Datom d] (and (= v (.-v d))\n                                          (= tx (datom-tx d))))))\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ v _\n              (filter (fn [^Datom d] (= v (.-v d)))))\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))       ;; e _ _ _\n         (if (indexing? db a)                                                   ;; _ a v tx\n           (->> (set/slice avet (datom e0 a v tx0) (datom emax a v txmax))      \n                (filter (fn [^Datom d] (= tx (datom-tx d)))))\n           (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))\n                (filter (fn [^Datom d] (and (= v (.-v d))\n                                            (= tx (datom-tx d)))))))\n         (if (indexing? db a)                                                   ;; _ a v _\n           (set/slice avet (datom e0 a v tx0) (datom emax a v txmax))\n           (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))\n                (filter (fn [^Datom d] (= v (.-v d))))))\n         (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))  ;; _ a _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))       ;; _ a _ _\n         (filter (fn [^Datom d] (and (= v (.-v d))\n                                     (= tx (datom-tx d)))) eavt)                ;; _ _ v tx\n         (filter (fn [^Datom d] (= v (.-v d))) eavt)                            ;; _ _ v _\n         (filter (fn [^Datom d] (= tx (datom-tx d))) eavt)                      ;; _ _ _ tx\n         eavt])))                                                               ;; _ _ _ _\n\n  IIndexAccess\n  (-datoms [db index cs]\n    (set/slice (get db index) (components->pattern db index cs e0 tx0) (components->pattern db index cs emax txmax)))\n\n  (-seek-datoms [db index cs]\n    (set/slice (get db index) (components->pattern db index cs e0 tx0) (datom emax nil nil txmax)))\n\n  (-rseek-datoms [db index cs]\n    (set/rslice (get db index) (components->pattern db index cs emax txmax) (datom e0 nil nil tx0)))\n\n  (-index-range [db attr start end]\n    (when-not (indexing? db attr)\n      (raise \"Attribute \" attr \" should be marked as :db/index true\" {}))\n    (validate-attr attr (list '-index-range 'db attr start end))\n    (set/slice (.-avet db)\n      (resolve-datom db nil attr start nil e0 tx0)\n      (resolve-datom db nil attr end nil emax txmax)))\n                \n  clojure.data/EqualityPartition\n  (equality-partition [x] :datascript/db)\n\n  clojure.data/Diff\n  (diff-similar [a b]\n    (diff-sorted (:eavt a) (:eavt b) cmp-datoms-eav-quick)))\n\n(defn db? [x]\n  (and (satisfies? ISearch x)\n       (satisfies? IIndexAccess x)\n       (satisfies? IDB x)))\n\n;; ----------------------------------------------------------------------------\n(defrecord-updatable FilteredDB [unfiltered-db pred hash]\n  #?@(:cljs\n      [IHash                (-hash  [db]        (hash-fdb db))\n       IEquiv               (-equiv [db other]  (equiv-db db other))\n       ISeqable             (-seq   [db]        (seq (-datoms db :eavt [])))\n       ICounted             (-count [db]        (count (-datoms db :eavt [])))\n       IPrintWithWriter     (-pr-writer [db w opts] (pr-db db w opts))\n\n       IEmptyableCollection (-empty [_]         (throw (js/Error. \"-empty is not supported on FilteredDB\")))\n\n       ILookup              (-lookup ([_ _]     (throw (js/Error. \"-lookup is not supported on FilteredDB\")))\n                                     ([_ _ _]   (throw (js/Error. \"-lookup is not supported on FilteredDB\"))))\n\n\n       IAssociative         (-contains-key? [_ _] (throw (js/Error. \"-contains-key? is not supported on FilteredDB\")))\n                            (-assoc [_ _ _]       (throw (js/Error. \"-assoc is not supported on FilteredDB\")))]\n\n      :clj\n      [Object               (hashCode [db]      (hash-fdb db))\n\n       clojure.lang.IHashEq (hasheq [db]        (hash-fdb db))\n\n       clojure.lang.IPersistentCollection\n                            (count [db]         (count (-datoms db :eavt [])))\n                            (equiv [db o]       (equiv-db db o))\n                            (cons [db [k v]]    (throw (UnsupportedOperationException. \"cons is not supported on FilteredDB\")))\n                            (empty [db]         (throw (UnsupportedOperationException. \"empty is not supported on FilteredDB\")))\n\n       clojure.lang.Seqable (seq [db]           (seq (-datoms db :eavt [])))\n\n       clojure.lang.ILookup (valAt [db k]       (throw (UnsupportedOperationException. \"valAt/2 is not supported on FilteredDB\")))\n                            (valAt [db k nf]    (throw (UnsupportedOperationException. \"valAt/3 is not supported on FilteredDB\")))\n       clojure.lang.IKeywordLookup (getLookupThunk [db k]\n                                                (throw (UnsupportedOperationException. \"getLookupThunk is not supported on FilteredDB\")))\n\n       clojure.lang.Associative\n                            (containsKey [e k]  (throw (UnsupportedOperationException. \"containsKey is not supported on FilteredDB\")))\n                            (entryAt [db k]     (throw (UnsupportedOperationException. \"entryAt is not supported on FilteredDB\")))\n                            (assoc [db k v]     (throw (UnsupportedOperationException. \"assoc is not supported on FilteredDB\")))])\n\n  IDB\n  (-schema [db] (-schema (.-unfiltered-db db)))\n  (-attrs-by [db property] (-attrs-by (.-unfiltered-db db) property))\n\n  ISearch\n  (-search [db pattern]\n           (filter (.-pred db) (-search (.-unfiltered-db db) pattern)))\n\n  IIndexAccess\n  (-datoms [db index cs]\n           (filter (.-pred db) (-datoms (.-unfiltered-db db) index cs)))\n\n  (-seek-datoms [db index cs]\n                (filter (.-pred db) (-seek-datoms (.-unfiltered-db db) index cs)))\n\n  (-rseek-datoms [db index cs]\n                (filter (.-pred db) (-rseek-datoms (.-unfiltered-db db) index cs)))\n\n  (-index-range [db attr start end]\n                (filter (.-pred db) (-index-range (.-unfiltered-db db) attr start end))))\n\n;; ----------------------------------------------------------------------------\n\n(defn attr->properties [k v]\n  (case v\n    :db.unique/identity  [:db/unique :db.unique/identity :db/index]\n    :db.unique/value     [:db/unique :db.unique/value :db/index]\n    :db.cardinality/many [:db.cardinality/many]\n    :db.type/ref         [:db.type/ref :db/index]\n    (when (true? v)\n      (case k\n        :db/isComponent [:db/isComponent]\n        :db/index       [:db/index]\n        []))))\n\n(defn- rschema [schema]\n  (reduce-kv\n    (fn [m attr keys->values]\n      (reduce-kv\n        (fn [m key value]\n          (reduce\n            (fn [m prop]\n              (assoc m prop (conj (get m prop #{}) attr)))\n            m (attr->properties key value)))\n        m keys->values))\n    {} schema))\n\n(defn- validate-schema-key [a k v expected]\n  (when-not (or (nil? v)\n                (contains? expected v))\n    (throw (ex-info (str \"Bad attribute specification for \" (pr-str {a {k v}}) \", expected one of \" expected)\n                    {:error :schema/validation\n                     :attribute a\n                     :key k\n                     :value v}))))\n\n(defn- validate-schema [schema]\n  (doseq [[a kv] schema]\n    (let [comp? (:db/isComponent kv false)]\n      (validate-schema-key a :db/isComponent (:db/isComponent kv) #{true false})\n      (when (and comp? (not= (:db/valueType kv) :db.type/ref))\n        (throw (ex-info (str \"Bad attribute specification for \" a \": {:db/isComponent true} should also have {:db/valueType :db.type/ref}\")\n                        {:error     :schema/validation\n                         :attribute a\n                         :key       :db/isComponent}))))\n    (validate-schema-key a :db/unique (:db/unique kv) #{:db.unique/value :db.unique/identity})\n    (validate-schema-key a :db/valueType (:db/valueType kv) #{:db.type/ref})\n    (validate-schema-key a :db/cardinality (:db/cardinality kv) #{:db.cardinality/one :db.cardinality/many})))\n\n(defn ^DB empty-db\n  ([] (empty-db nil))\n  ([schema]\n    {:pre [(or (nil? schema) (map? schema))]}\n    (validate-schema schema)\n    (map->DB\n      {:schema  schema\n       :rschema (rschema (merge implicit-schema schema))\n       :eavt    (set/sorted-set-by cmp-datoms-eavt)\n       :aevt    (set/sorted-set-by cmp-datoms-aevt)\n       :avet    (set/sorted-set-by cmp-datoms-avet)\n       :max-eid e0\n       :max-tx  tx0\n       :hash    (atom 0)})))\n\n(defn- init-max-eid [eavt]\n  (or (-> (set/rslice eavt (datom (dec tx0) nil nil txmax) (datom e0 nil nil tx0))\n        (first)\n        (:e))\n    e0))\n\n(defn ^DB init-db\n  ([datoms] (init-db datoms nil))\n  ([datoms schema]\n    (validate-schema schema)\n    (let [rschema     (rschema (merge implicit-schema schema))\n          indexed     (:db/index rschema)\n          arr         (cond-> datoms\n                        (not (arrays/array? datoms)) (arrays/into-array))\n          _           (arrays/asort arr cmp-datoms-eavt-quick)\n          eavt        (set/from-sorted-array cmp-datoms-eavt arr)\n          _           (arrays/asort arr cmp-datoms-aevt-quick)\n          aevt        (set/from-sorted-array cmp-datoms-aevt arr)\n          avet-datoms (filter (fn [^Datom d] (contains? indexed (.-a d))) datoms)\n          avet-arr    (to-array avet-datoms)\n          _           (arrays/asort avet-arr cmp-datoms-avet-quick)\n          avet        (set/from-sorted-array cmp-datoms-avet avet-arr)\n          max-eid     (init-max-eid eavt)\n          max-tx      (transduce (map (fn [^Datom d] (datom-tx d))) max tx0 eavt)]\n      (map->DB {\n        :schema  schema\n        :rschema rschema\n        :eavt    eavt\n        :aevt    aevt\n        :avet    avet\n        :max-eid max-eid\n        :max-tx  max-tx\n        :hash    (atom 0)}))))\n\n(defn- equiv-db-index [x y]\n  (loop [xs (seq x)\n         ys (seq y)]\n    (cond\n      (nil? xs) (nil? ys)\n      (= (first xs) (first ys)) (recur (next xs) (next ys))\n      :else false)))\n\n(defn- hash-db [^DB db]\n  (let [h @(.-hash db)]\n    (if (zero? h)\n      (reset! (.-hash db) (combine-hashes (hash (.-schema db))\n                                          (hash (.-eavt db))))\n      h)))\n\n(defn- hash-fdb [^FilteredDB db]\n  (let [h @(.-hash db)\n        datoms (or (-datoms db :eavt []) #{})]\n    (if (zero? h)\n      (let [datoms (or (-datoms db :eavt []) #{})]\n        (reset! (.-hash db) (combine-hashes (hash (-schema db))\n                                            (hash-unordered-coll datoms))))\n      h)))\n\n(defn- equiv-db [db other]\n  (and (or (instance? DB other) (instance? FilteredDB other))\n       (= (-schema db) (-schema other))\n       (equiv-db-index (-datoms db :eavt []) (-datoms other :eavt []))))\n\n#?(:cljs\n   (defn pr-db [db w opts]\n     (-write w \"#datascript/DB {\")\n     (-write w \":schema \")\n     (pr-writer (-schema db) w opts)\n     (-write w \", :datoms \")\n     (pr-sequential-writer w\n                           (fn [d w opts]\n                             (pr-sequential-writer w pr-writer \"[\" \" \" \"]\" opts [(.-e d) (.-a d) (.-v d) (datom-tx d)]))\n                           \"[\" \" \" \"]\" opts (-datoms db :eavt []))\n     (-write w \"}\")))\n\n#?(:clj\n   (do\n     (defn pr-db [db, ^java.io.Writer w]\n       (.write w (str \"#datascript/DB {\"))\n       (.write w \":schema \")\n       (binding [*out* w]\n         (pr (-schema db))\n         (.write w \", :datoms [\")\n         (apply pr (map (fn [^Datom d] [(.-e d) (.-a d) (.-v d) (datom-tx d)]) (-datoms db :eavt []))))\n       (.write w \"]}\"))\n\n     (defmethod print-method DB [db w] (pr-db db w))\n     (defmethod print-method FilteredDB [db w] (pr-db db w))     \n))\n\n(defn db-from-reader [{:keys [schema datoms]}]\n  (init-db (map (fn [[e a v tx]] (datom e a v tx)) datoms) schema))\n\n;; ----------------------------------------------------------------------------\n\n(declare entid-strict entid-some ref?)\n\n(defn- resolve-datom [db e a v t default-e default-tx]\n  (when a (validate-attr a (list 'resolve-datom 'db e a v t)))\n  (datom\n    (or (entid-some db e) default-e)  ;; e\n    a                                 ;; a\n    (if (and (some? v) (ref? db a))   ;; v\n      (entid-strict db v)\n      v)\n    (or (entid-some db t) default-tx))) ;; t\n\n(defn- components->pattern [db index [c0 c1 c2 c3] default-e default-tx]\n  (case index\n    :eavt (resolve-datom db c0 c1 c2 c3 default-e default-tx)\n    :aevt (resolve-datom db c1 c0 c2 c3 default-e default-tx)\n    :avet (resolve-datom db c2 c0 c1 c3 default-e default-tx)))\n\n;; ----------------------------------------------------------------------------\n\n(defrecord TxReport [db-before db-after tx-data tempids tx-meta])\n\n(defn #?@(:clj  [^Boolean is-attr?]\n          :cljs [^boolean is-attr?]) [db attr property]\n  (contains? (-attrs-by db property) attr))\n\n(defn #?@(:clj  [^Boolean multival?]\n          :cljs [^boolean multival?]) [db attr]\n  (is-attr? db attr :db.cardinality/many))\n\n(defn #?@(:clj  [^Boolean ref?]\n          :cljs [^boolean ref?]) [db attr]\n  (is-attr? db attr :db.type/ref))\n\n(defn #?@(:clj  [^Boolean component?]\n          :cljs [^boolean component?]) [db attr]\n  (is-attr? db attr :db/isComponent))\n\n(defn #?@(:clj  [^Boolean indexing?]\n          :cljs [^boolean indexing?]) [db attr]\n  (is-attr? db attr :db/index))\n\n(defn entid [db eid]\n  {:pre [(db? db)]}\n  (cond\n    (and (number? eid) (pos? eid))\n    eid\n    \n    (sequential? eid)\n    (let [[attr value] eid]\n      (cond\n        (not= (count eid) 2)\n          (raise \"Lookup ref should contain 2 elements: \" eid\n            {:error :lookup-ref/syntax, :entity-id eid})\n        (not (is-attr? db attr :db/unique))\n          (raise \"Lookup ref attribute should be marked as :db/unique: \" eid\n            {:error :lookup-ref/unique, :entity-id eid})\n        (nil? value)\n          nil\n        :else\n          (-> (-datoms db :avet eid) first :e)))\n    \n    #?@(:cljs [(array? eid) (recur db (array-seq eid))])\n    \n    (keyword? eid)\n    (-> (-datoms db :avet [:db/ident eid]) first :e)\n\n    :else\n    (raise \"Expected number or lookup ref for entity id, got \" eid\n      {:error :entity-id/syntax, :entity-id eid})))\n\n(defn entid-strict [db eid]\n  (or (entid db eid)\n      (raise \"Nothing found for entity id \" eid\n             {:error :entity-id/missing\n              :entity-id eid})))\n\n(defn entid-some [db eid]\n  (when eid\n    (entid-strict db eid)))\n\n;;;;;;;;;; Transacting\n\n(defn validate-datom [db ^Datom datom]\n  (when (and (datom-added datom)\n             (is-attr? db (.-a datom) :db/unique))\n    (when-some [found (not-empty (-datoms db :avet [(.-a datom) (.-v datom)]))]\n      (raise \"Cannot add \" datom \" because of unique constraint: \" found\n             {:error :transact/unique\n              :attribute (.-a datom)\n              :datom datom}))))\n\n(defn- validate-eid [eid at]\n  (when-not (number? eid)\n    (raise \"Bad entity id \" eid \" at \" at \", expected number\"\n           {:error :transact/syntax, :entity-id eid, :context at})))\n\n(defn- validate-attr [attr at]\n  (when-not (or (keyword? attr) (string? attr))\n    (raise \"Bad entity attribute \" attr \" at \" at \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr, :context at})))\n\n(defn- validate-val [v at]\n  (when (nil? v)\n    (raise \"Cannot store nil as a value at \" at\n           {:error :transact/syntax, :value v, :context at})))\n\n(defn- current-tx [report]\n  (inc (get-in report [:db-before :max-tx])))\n\n(defn- next-eid [db]\n  (inc (:max-eid db)))\n\n(defn- #?@(:clj  [^Boolean tx-id?]\n           :cljs [^boolean tx-id?])\n  [e]\n  (or (= e :db/current-tx)\n      (= e \":db/current-tx\") ;; for datascript.js interop\n      (= e \"datomic.tx\")\n      (= e \"datascript.tx\")))\n\n(defn- #?@(:clj  [^Boolean tempid?]\n           :cljs [^boolean tempid?])\n  [x]\n  (or (and (number? x) (neg? x)) (string? x)))\n\n(defn- new-eid? [db eid]\n  (and (> eid (:max-eid db))\n       (< eid tx0))) ;; tx0 is max eid\n\n(defn- advance-max-eid [db eid]\n  (cond-> db\n    (new-eid? db eid)\n      (assoc :max-eid eid)))\n\n(defn- allocate-eid\n  ([report eid]\n    (update-in report [:db-after] advance-max-eid eid))\n  ([report e eid]\n    (cond-> report\n      (tx-id? e)\n        (assoc-in [:tempids e] eid)\n      (tempid? e)\n        (assoc-in [:tempids e] eid)\n      (and (not (tempid? e)) \n           (new-eid? (:db-after report) eid))\n        (assoc-in [:tempids eid] eid)\n      true\n        (update-in [:db-after] advance-max-eid eid))))\n\n;; In context of `with-datom` we can use faster comparators which\n;; do not check for nil (~10-15% performance gain in `transact`)\n\n(defn- with-datom [db ^Datom datom]\n  (validate-datom db datom)\n  (let [indexing? (indexing? db (.-a datom))]\n    (if (datom-added datom)\n      (cond-> db\n        true      (update-in [:eavt] set/conj datom cmp-datoms-eavt-quick)\n        true      (update-in [:aevt] set/conj datom cmp-datoms-aevt-quick)\n        indexing? (update-in [:avet] set/conj datom cmp-datoms-avet-quick)\n        true      (advance-max-eid (.-e datom))\n        true      (assoc :hash (atom 0)))\n      (if-some [removing (first (-search db [(.-e datom) (.-a datom) (.-v datom)]))]\n        (cond-> db\n          true      (update-in [:eavt] set/disj removing cmp-datoms-eavt-quick)\n          true      (update-in [:aevt] set/disj removing cmp-datoms-aevt-quick)\n          indexing? (update-in [:avet] set/disj removing cmp-datoms-avet-quick)\n          true      (assoc :hash (atom 0)))\n        db))))\n\n(defn- transact-report [report datom]\n  (-> report\n      (update-in [:db-after] with-datom datom)\n      (update-in [:tx-data] conj datom)))\n\n(defn #?@(:clj  [^Boolean reverse-ref?]\n          :cljs [^boolean reverse-ref?]) [attr]\n  (cond\n    (keyword? attr)\n    (= \\_ (nth (name attr) 0))\n    \n    (string? attr)\n    (boolean (re-matches #\"(?:([^/]+)/)?_([^/]+)\" attr))\n   \n    :else\n    (raise \"Bad attribute type: \" attr \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr})))\n\n(defn reverse-ref [attr]\n  (cond\n    (keyword? attr)\n    (if (reverse-ref? attr)\n      (keyword (namespace attr) (subs (name attr) 1))\n      (keyword (namespace attr) (str \"_\" (name attr))))\n\n   (string? attr)\n   (let [[_ ns name] (re-matches #\"(?:([^/]+)/)?([^/]+)\" attr)]\n     (if (= \\_ (nth name 0))\n       (if ns (str ns \"/\" (subs name 1)) (subs name 1))\n       (if ns (str ns \"/_\" name) (str \"_\" name))))\n   \n   :else\n    (raise \"Bad attribute type: \" attr \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr})))\n\n\n(defn- check-upsert-conflict [entity acc]\n  (let [[e a v] acc\n        _e (:db/id entity)]\n    (if (or (nil? _e)\n            (tempid? _e)\n            (nil? acc)\n            (== _e e))\n      acc\n      (raise \"Conflicting upsert: \" [a v] \" resolves to \" e\n             \", but entity already has :db/id \" _e\n             { :error :transact/upsert\n               :entity entity\n               :assertion acc }))))\n\n(defn- upsert-reduce-fn [db eav a v]\n  (let [e (:e (first (-datoms db :avet [a v])))]\n    (cond\n      (nil? e) ;; value not yet in db\n      eav\n\n      (nil? eav) ;; first upsert\n      [e a v]\n\n      (= (get eav 0) e) ;; second+ upsert, but does not conflict\n      eav\n\n      :else\n      (let [[_e _a _v] eav]\n        (raise \"Conflicting upserts: \" [_a _v] \" resolves to \" _e\n               \", but \" [a v] \" resolves to \" e\n               { :error     :transact/upsert\n                 :assertion [e a v]\n                 :conflict  [_e _a _v] })))))\n\n(defn- upsert-eid [db entity]\n  (when-some [idents (not-empty (-attrs-by db :db.unique/identity))]\n    (->>\n      (reduce-kv\n        (fn [eav a v] ;; eav = [e a v]\n          (cond\n            (not (contains? idents a))\n            eav\n\n            (and\n              (multival? db a)\n              (or\n                (arrays/array? v)\n                (and (coll? v) (not (map? v)))))\n            (reduce #(upsert-reduce-fn db %1 a %2) eav v)\n\n            :else\n            (upsert-reduce-fn db eav a v)))\n        nil\n        entity)\n     (check-upsert-conflict entity)\n     first))) ;; getting eid from eav\n\n\n;; multivals/reverse can be specified as coll or as a single value, trying to guess\n(defn- maybe-wrap-multival [db a vs]\n  (cond\n    ;; not a multival context\n    (not (or (reverse-ref? a)\n             (multival? db a)))\n    [vs]\n\n    ;; not a collection at all, so definitely a single value\n    (not (or (arrays/array? vs)\n             (and (coll? vs) (not (map? vs)))))\n    [vs]\n    \n    ;; probably lookup ref\n    (and (= (count vs) 2)\n         (is-attr? db (first vs) :db.unique/identity))\n    [vs]\n    \n    :else vs))\n\n\n(defn- explode [db entity]\n  (let [eid (:db/id entity)]\n    (for [[a vs] entity\n          :when  (not= a :db/id)\n          :let   [_          (validate-attr a {:db/id eid, a vs})\n                  reverse?   (reverse-ref? a)\n                  straight-a (if reverse? (reverse-ref a) a)\n                  _          (when (and reverse? (not (ref? db straight-a)))\n                               (raise \"Bad attribute \" a \": reverse attribute name requires {:db/valueType :db.type/ref} in schema\"\n                                      {:error :transact/syntax, :attribute a, :context {:db/id eid, a vs}}))]\n          v      (maybe-wrap-multival db a vs)]\n      (if (and (ref? db straight-a) (map? v)) ;; another entity specified as nested map\n        (assoc v (reverse-ref a) eid)\n        (if reverse?\n          [:db/add v   straight-a eid]\n          [:db/add eid straight-a v])))))\n\n(defn- transact-add [report [_ e a v tx :as ent]]\n  (validate-attr a ent)\n  (validate-val  v ent)\n  (let [tx        (or tx (current-tx report))\n        db        (:db-after report)\n        e         (entid-strict db e)\n        v         (if (ref? db a) (entid-strict db v) v)\n        new-datom (datom e a v tx)]\n    (if (multival? db a)\n      (if (empty? (-search db [e a v]))\n        (transact-report report new-datom)\n        report)\n      (if-some [^Datom old-datom (first (-search db [e a]))]\n        (if (= (.-v old-datom) v)\n          report\n          (-> report\n            (transact-report (datom e a (.-v old-datom) tx false))\n            (transact-report new-datom)))\n        (transact-report report new-datom)))))\n\n(defn- transact-retract-datom [report ^Datom d]\n  (let [tx (current-tx report)]\n    (transact-report report (datom (.-e d) (.-a d) (.-v d) tx false))))\n\n(defn- retract-components [db datoms]\n  (into #{} (comp\n              (filter (fn [^Datom d] (component? db (.-a d))))\n              (map (fn [^Datom d] [:db.fn/retractEntity (.-v d)]))) datoms))\n\n(declare transact-tx-data)\n\n(defn- retry-with-tempid [initial-report report es tempid upserted-eid]\n  (if (contains? (:tempids initial-report) tempid)\n    (raise \"Conflicting upsert: \" tempid \" resolves\"\n           \" both to \" upserted-eid \" and \" (get-in initial-report [:tempids tempid])\n      { :error :transact/upsert })\n    ;; try to re-run from the beginning\n    ;; but remembering that `tempid` will resolve to `upserted-eid`\n    (let [tempids' (-> (:tempids report)\n                     (assoc tempid upserted-eid))\n          report'  (assoc initial-report :tempids tempids')]\n      (transact-tx-data report' es))))\n\n(def builtin-fn?\n  #{:db.fn/call\n    :db.fn/cas\n    :db/cas\n    :db/add\n    :db/retract\n    :db.fn/retractAttribute\n    :db.fn/retractEntity\n    :db/retractEntity})\n\n(defn transact-tx-data [initial-report initial-es]\n  (when-not (or (nil? initial-es)\n                (sequential? initial-es))\n    (raise \"Bad transaction data \" initial-es \", expected sequential collection\"\n           {:error :transact/syntax, :tx-data initial-es}))\n  (loop [report (-> initial-report\n                  (update :db-after transient))\n         es     initial-es]\n    (let [[entity & entities] es\n          db                  (:db-after report)\n          {:keys [tempids]}   report]\n      (cond\n        (empty? es)\n        (-> report\n            (assoc-in  [:tempids :db/current-tx] (current-tx report))\n            (update-in [:db-after :max-tx] inc)\n            (update :db-after persistent!))\n\n        (nil? entity)\n        (recur report entities)\n\n        (map? entity)\n        (let [old-eid (:db/id entity)]\n          (cond+\n            ;; :db/current-tx / \"datomic.tx\" => tx\n            (tx-id? old-eid)\n            (let [id (current-tx report)]\n              (recur (allocate-eid report old-eid id)\n                     (cons (assoc entity :db/id id) entities)))\n           \n            ;; lookup-ref => resolved | error\n            (sequential? old-eid)\n            (let [id (entid-strict db old-eid)]\n              (recur report\n                     (cons (assoc entity :db/id id) entities)))\n           \n            ;; upserted => explode | error\n            :let [upserted-eid (upsert-eid db entity)]\n\n            (some? upserted-eid)\n            (if (and (tempid? old-eid)\n                     (contains? tempids old-eid)\n                     (not= upserted-eid (get tempids old-eid)))\n              (retry-with-tempid initial-report report initial-es old-eid upserted-eid)\n              (recur (allocate-eid report old-eid upserted-eid)\n                     (concat (explode db (assoc entity :db/id upserted-eid)) entities)))\n           \n            ;; resolved | allocated-tempid | tempid | nil => explode\n            (or (number? old-eid)\n                (nil?    old-eid)\n                (string? old-eid))\n            (let [new-eid (cond\n                            (nil? old-eid)    (next-eid db)\n                            (tempid? old-eid) (or (get tempids old-eid)\n                                                  (next-eid db))\n                            :else             old-eid)\n                  new-entity (assoc entity :db/id new-eid)]                \n              (recur (allocate-eid report old-eid new-eid)\n                     (concat (explode db new-entity) entities)))\n           \n            ;; trash => error\n            :else\n            (raise \"Expected number, string or lookup ref for :db/id, got \" old-eid\n              { :error :entity-id/syntax, :entity entity })))\n\n        (sequential? entity)\n        (let [[op e a v] entity]\n          (cond\n            (= op :db.fn/call)\n            (let [[_ f & args] entity]\n              (recur report (concat (apply f db args) entities)))\n            \n            (and (keyword? op)\n                 (not (builtin-fn? op)))\n            (if-some [ident (entid db op)]\n              (let [fun  (-> (-search db [ident :db/fn]) first :v)\n                    args (next entity)]\n                (if (fn? fun)\n                  (recur report (concat (apply fun db args) entities))\n                  (raise \"Entity \" op \" expected to have :db/fn attribute with fn? value\"\n                         {:error :transact/syntax, :operation :db.fn/call, :tx-data entity})))\n              (raise \"Can\u2019t find entity for transaction fn \" op\n                     {:error :transact/syntax, :operation :db.fn/call, :tx-data entity}))\n            \n            (and (tempid? e) (not= op :db/add))\n            (raise \"Can't use tempid in '\" entity \"'. Tempids are allowed in :db/add only\"\n              { :error :transact/syntax, :op entity })\n\n            (or (= op :db.fn/cas)\n                (= op :db/cas))\n            (let [[_ e a ov nv] entity\n                  e (entid-strict db e)\n                  _ (validate-attr a entity)\n                  ov (if (ref? db a) (entid-strict db ov) ov)\n                  nv (if (ref? db a) (entid-strict db nv) nv)\n                  _ (validate-val nv entity)\n                  datoms (vec (-search db [e a]))]\n              (if (multival? db a)\n                (if (some (fn [^Datom d] (= (.-v d) ov)) datoms)\n                  (recur (transact-add report [:db/add e a nv]) entities)\n                  (raise \":db.fn/cas failed on datom [\" e \" \" a \" \" (map :v datoms) \"], expected \" ov\n                         {:error :transact/cas, :old datoms, :expected ov, :new nv}))\n                (let [v (:v (first datoms))]\n                  (if (= v ov)\n                    (recur (transact-add report [:db/add e a nv]) entities)\n                    (raise \":db.fn/cas failed on datom [\" e \" \" a \" \" v \"], expected \" ov\n                           {:error :transact/cas, :old (first datoms), :expected ov, :new nv })))))\n\n            (tx-id? e)\n            (recur (allocate-eid report e (current-tx report)) (cons [op (current-tx report) a v] entities))\n\n            (and (ref? db a) (tx-id? v))\n            (recur (allocate-eid report v (current-tx report)) (cons [op e a (current-tx report)] entities))\n\n            (and (ref? db a) (tempid? v))\n            (if-some [vid (get tempids v)]\n              (recur report (cons [op e a vid] entities))\n              (recur (allocate-eid report v (next-eid db)) es))\n\n            (tempid? e)\n            (let [upserted-eid  (when (is-attr? db a :db.unique/identity)\n                                  (:e (first (-datoms db :avet [a v]))))\n                  allocated-eid (get tempids e)]\n              (if (and upserted-eid allocated-eid (not= upserted-eid allocated-eid))\n                (retry-with-tempid initial-report report initial-es e upserted-eid)\n                (let [eid (or upserted-eid allocated-eid (next-eid db))]\n                  (recur (allocate-eid report e eid) (cons [op eid a v] entities)))))\n\n            (= op :db/add)\n            (recur (transact-add report entity) entities)\n\n            (and (= op :db/retract) v)\n            (if-some [e (entid db e)]\n              (let [v (if (ref? db a) (entid-strict db v) v)]\n                (validate-attr a entity)\n                (validate-val v entity)\n                (if-some [old-datom (first (-search db [e a v]))]\n                  (recur (transact-retract-datom report old-datom) entities)\n                  (recur report entities)))\n              (recur report entities))\n\n            (or (= op :db.fn/retractAttribute)\n                (= op :db/retract))\n            (if-some [e (entid db e)]\n              (let [_      (validate-attr a entity)\n                    datoms (vec (-search db [e a]))]\n                (recur (reduce transact-retract-datom report datoms)\n                       (concat (retract-components db datoms) entities)))\n              (recur report entities))\n\n            (or (= op :db.fn/retractEntity)\n                (= op :db/retractEntity))\n            (if-some [e (entid db e)]\n              (let [e-datoms (vec (-search db [e]))\n                    v-datoms (vec (mapcat (fn [a] (-search db [nil a e])) (-attrs-by db :db.type/ref)))]\n                (recur (reduce transact-retract-datom report (concat e-datoms v-datoms))\n                       (concat (retract-components db e-datoms) entities)))\n              (recur report entities))\n\n           :else\n           (raise \"Unknown operation at \" entity \", expected :db/add, :db/retract, :db.fn/call, :db.fn/retractAttribute, :db.fn/retractEntity or an ident corresponding to an installed transaction function (e.g. {:db/ident <keyword> :db/fn <Ifn>}, usage of :db/ident requires {:db/unique :db.unique/identity} in schema)\" {:error :transact/syntax, :operation op, :tx-data entity})))\n       \n       (datom? entity)\n       (let [[e a v tx added] entity]\n         (if added\n           (recur (transact-add report [:db/add e a v tx]) entities)\n           (recur report (cons [:db/retract e a v] entities))))\n\n       :else\n       (raise \"Bad entity type at \" entity \", expected map or vector\"\n              {:error :transact/syntax, :tx-data entity})))))\n"]}