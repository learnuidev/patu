{
"version":3,
"file":"module$node_modules$Phaser$src$textures$parsers$SpriteSheetFromAtlas.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/textures/parsers/SpriteSheetFromAtlas.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$textures$parsers$SpriteSheetFromAtlas\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\n\r\n/**\r\n * Parses a Sprite Sheet and adds the Frames to the Texture, where the Sprite Sheet is stored as a frame within an Atlas.\r\n *\r\n * In Phaser terminology a Sprite Sheet is a texture containing different frames, but each frame is the exact\r\n * same size and cannot be trimmed or rotated.\r\n *\r\n * @function Phaser.Textures.Parsers.SpriteSheetFromAtlas\r\n * @memberOf Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {Phaser.Textures.Frame} frame - The Frame that contains the Sprite Sheet.\r\n * @param {object} config - An object describing how to parse the Sprite Sheet.\r\n * @param {number} config.frameWidth - Width in pixels of a single frame in the sprite sheet.\r\n * @param {number} [config.frameHeight] - Height in pixels of a single frame in the sprite sheet. Defaults to frameWidth if not provided.\r\n * @param {number} [config.startFrame=0] - [description]\r\n * @param {number} [config.endFrame=-1] - [description]\r\n * @param {number} [config.margin=0] - If the frames have been drawn with a margin, specify the amount here.\r\n * @param {number} [config.spacing=0] - If the frames have been drawn with spacing between them, specify the amount here.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\r\nvar SpriteSheetFromAtlas = function (texture, frame, config)\r\n{\r\n    var frameWidth = GetFastValue(config, 'frameWidth', null);\r\n    var frameHeight = GetFastValue(config, 'frameHeight', frameWidth);\r\n\r\n    //  If missing we can't proceed\r\n    if (!frameWidth)\r\n    {\r\n        throw new Error('TextureManager.SpriteSheetFromAtlas: Invalid frameWidth given.');\r\n    }\r\n\r\n    //  Add in a __BASE entry (for the entire atlas)\r\n    // var source = texture.source[sourceIndex];\r\n    // texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height);\r\n\r\n    var startFrame = GetFastValue(config, 'startFrame', 0);\r\n    var endFrame = GetFastValue(config, 'endFrame', -1);\r\n    var margin = GetFastValue(config, 'margin', 0);\r\n    var spacing = GetFastValue(config, 'spacing', 0);\r\n\r\n    var x = frame.cutX;\r\n    var y = frame.cutY;\r\n\r\n    var cutWidth = frame.cutWidth;\r\n    var cutHeight = frame.cutHeight;\r\n    var sheetWidth = frame.realWidth;\r\n    var sheetHeight = frame.realHeight;\r\n\r\n    var row = Math.floor((sheetWidth - margin + spacing) / (frameWidth + spacing));\r\n    var column = Math.floor((sheetHeight - margin + spacing) / (frameHeight + spacing));\r\n    var total = row * column;\r\n\r\n    //  trim offsets\r\n\r\n    var leftPad = frame.x;\r\n    var leftWidth = frameWidth - leftPad;\r\n\r\n    var rightWidth = frameWidth - ((sheetWidth - cutWidth) - leftPad);\r\n\r\n    var topPad = frame.y;\r\n    var topHeight = frameHeight - topPad;\r\n\r\n    var bottomHeight = frameHeight - ((sheetHeight - cutHeight) - topPad);\r\n\r\n    // console.log('x / y', x, y);\r\n    // console.log('cutW / H', cutWidth, cutHeight);\r\n    // console.log('sheetW / H', sheetWidth, sheetHeight);\r\n    // console.log('row', row, 'column', column, 'total', total);\r\n    // console.log('LW', leftWidth, 'RW', rightWidth, 'TH', topHeight, 'BH', bottomHeight);\r\n\r\n    if (startFrame > total || startFrame < -total)\r\n    {\r\n        startFrame = 0;\r\n    }\r\n\r\n    if (startFrame < 0)\r\n    {\r\n        //  Allow negative skipframes.\r\n        startFrame = total + startFrame;\r\n    }\r\n\r\n    if (endFrame !== -1)\r\n    {\r\n        total = startFrame + (endFrame + 1);\r\n    }\r\n\r\n    var sheetFrame;\r\n    var frameX = margin;\r\n    var frameY = margin;\r\n    var frameIndex = 0;\r\n    var sourceIndex = frame.sourceIndex;\r\n\r\n    for (var sheetY = 0; sheetY < column; sheetY++)\r\n    {\r\n        var topRow = (sheetY === 0);\r\n        var bottomRow = (sheetY === column - 1);\r\n\r\n        for (var sheetX = 0; sheetX < row; sheetX++)\r\n        {\r\n            var leftRow = (sheetX === 0);\r\n            var rightRow = (sheetX === row - 1);\r\n\r\n            sheetFrame = texture.add(frameIndex, sourceIndex, x + frameX, y + frameY, frameWidth, frameHeight);\r\n\r\n            if (leftRow || topRow || rightRow || bottomRow)\r\n            {\r\n                var destX = (leftRow) ? leftPad : 0;\r\n                var destY = (topRow) ? topPad : 0;\r\n                var destWidth = frameWidth;\r\n                var destHeight = frameHeight;\r\n\r\n                if (leftRow)\r\n                {\r\n                    destWidth = leftWidth;\r\n                }\r\n                else if (rightRow)\r\n                {\r\n                    destWidth = rightWidth;\r\n                }\r\n\r\n                if (topRow)\r\n                {\r\n                    destHeight = topHeight;\r\n                }\r\n                else if (bottomRow)\r\n                {\r\n                    destHeight = bottomHeight;\r\n                }\r\n\r\n                sheetFrame.cutWidth = destWidth;\r\n                sheetFrame.cutHeight = destHeight;\r\n\r\n                sheetFrame.setTrim(frameWidth, frameHeight, destX, destY, destWidth, destHeight);\r\n            }\r\n\r\n            frameX += spacing;\r\n\r\n            if (leftRow)\r\n            {\r\n                frameX += leftWidth;\r\n            }\r\n            else if (rightRow)\r\n            {\r\n                frameX += rightRow;\r\n            }\r\n            else\r\n            {\r\n                frameX += frameWidth;\r\n            }\r\n\r\n            frameIndex++;\r\n        }\r\n\r\n        frameX = margin;\r\n        frameY += spacing;\r\n\r\n        if (topRow)\r\n        {\r\n            frameY += topHeight;\r\n        }\r\n        else if (bottomRow)\r\n        {\r\n            frameY += bottomHeight;\r\n        }\r\n        else\r\n        {\r\n            frameY += frameHeight;\r\n        }\r\n    }\r\n\r\n    return texture;\r\n};\r\n\r\nmodule.exports = SpriteSheetFromAtlas;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetFastValue","SpriteSheetFromAtlas","texture","frame","config","frameWidth","frameHeight","Error","margin","spacing","x","cutX","y","cutY","sheetWidth","realWidth","sheetHeight","realHeight","row","Math","floor","column","leftPad","leftWidth","rightWidth","cutWidth","topPad","topHeight","bottomHeight","cutHeight","frameX","frameY","frameIndex","sourceIndex","sheetY","topRow","bottomRow","sheetX","leftRow","rightRow","sheetFrame","add","destX","destY","destWidth","destHeight","setTrim"]
}
