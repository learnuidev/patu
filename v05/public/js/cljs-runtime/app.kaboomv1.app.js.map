{"version":3,"sources":["app/kaboomv1/app.cljs"],"mappings":";;;;AAIA,AAAA,AAAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAASC;;AAKT,AAAA,AAAAJ,AAAAC,AAAAC,AAAAG;AAAA;AAAA,AAAA,AAASC,AAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;;AAIpB,AAAA,AAAAP,AAAAC,AAAAC,AAAAM;AAAA;AAAA,AAAA,AAASC,AAAG,AAAA,AAACF;;AACb,AAEA,AAAA,AAAAG,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAmBM;AAAnB,AACE,AAAMC,AAAO,AAAA,AAACC;AAAd,AACE,AAAA,AAAMD,AAAW,AAAAE,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAAA;;;;AACjB,AAAc,AAAQC,AAAaH;;AACnCA;;AAEJ,AAAA,AAAMI,AAAQJ;AAAd,AACE,AAAA,AAAaA;;AAEf,AAAA,AAAMK,AAAiBC;AAAvB,AACE,AAAMC,AAAI,AAACC,AAAQ,AAAOF;AACpBG,AAAM,AAACZ,AAAIX,AAAQqB,AAAIA;AAD7B,AAEE,AAAA,AAAA,AAAA,AAACG,AAAMtB,AAAUuB,AAAsBF;;AAC3C,AAAA,AAAMN,AAAuBE;AAC7B,AAGA,AAAA,AAAMO,AAAeN;AAArB,AACE,AAAMC,AAAI,AAACC,AAAQ,AAAOF;AACpBG,AAAM,AAACZ,AAAIX,AAAQqB,AAAIA;AAD7B,AAEE,AAAA,AAAA,AAAA,AAACG,AAAMtB,AAAUuB,AAAsBF;;AAE3C,AAAA,AAAMN,AAAqBS;AAC3B,AAIA,AAAA,AAAMC,AAAcd;AAApB,AACE,AAAMe,AAAM,AAAA,AAAAC,AAAA,AAAA,AAACC,AAAQ5B,AAAuBW;AAA5C,AACE,AAAA,AAACkB,AAAEH;;AAEP,AAAA,AAAMI,AAAWnB;AAAjB,AACE,AAAMe,AAAM,AAAA,AAAAC,AAAA,AAAA,AAACC,AAAQ5B,AAAuBW;AAA5C,AACE,AAAI,AAAA,AAACkB,AAAEH,AACH,AAAA,AAACG,AAAEH;;AACX,AAIA,AAAA,AAAMK,AAAkBC;AAAxB,AACE,AAAMC,AAAM,AAAG,AAAA,AAAGD,AAAQ,AAAA,AAAA,AAAAL,AAAQ3B;AAAlC,AACE,AAAA,AAAA,AAACsB,AAAMtB,AAAUkC,AACND,AACE,AAAG,AAAA,AAAA,AAAAN,AAAQ3B,AAAWiC;;AAGvC,AAAA,AAAME,AAAevB;AAArB,AACE,AAAIA;AACF,AAACwB,AAAOjC,AAAG,AAACa,AAAOJ;;AACnB,AAACwB,AAAOjC,AAAG,AAACa,AAAO,AAAA,AAAA,AAAA,AAACN;;;AAExB,AAAA,AAAM2B,AAAgBzB,AAAO0B,AAAMC;AAAnC,AACE,AAAA,AAAM3B,AAAc0B;;AACpB,AAAA,AAAM1B,AAAe2B;;AAEvB,AAAA,AAAMC,AAAiB5B;AAAvB,AACE,AAACyB,AAAezB,AAAO,AAAc6B,AAAW,AAAeA;;AAEjE,AAAA,AAAMC,AAAkB9B,AAAO0B,AAAMC;AAArC,AACE,AAACF,AAAezB,AAAO0B,AAAMC;;AAE/B,AAAA,AAAMI,AAAQC;AAAd,AACE,AAAAC,AAGqED;AAHrEC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvC,AAAA,AAAAuC,AAAA,AAAA,AAAA,AAAA,AAAAtC,AAAAC,AAAAqC,AAAAA;AAAA,AAAApC,AAAAoC,AAAA,AAAcjC;AAAd,AAAAH,AAAAoC,AAAA,AAAA,AAAqBC;AAArB,AAAArC,AAAAoC,AAAA,AAAA,AAAkCE;AAAlC,AAAAtC,AAAAoC,AAAA,AAAA,AAAwCP;AAAxC,AAAA7B,AAAAoC,AAAA,AAAA,AAA8CN;AAA9C,AAIE,AAAIO;AACF,AAACN,AAAgB5B;;AACjB,AAAC8B,AAAiB9B,AAAO0B,AAAMC;;;AAErC,AAAA,AAAAS,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3C,AAAA,AAAA2C,AAAA,AAAA,AAAA,AAAA,AAAA1C,AAAAC,AAAAyC,AAAAA;AAAAA,AACuBE;AADvB,AAAA1C,AAAAwC,AAAA,AACWrC;AADX,AAEE,AAACuB,AAAcvB;;AACf,AAAC+B,AAAOQ;;AAGV,AAEA,AAAA,AAAMC,AAAKC;AAAX,AAEE,AAAA,AAAAC,AAAA,AAAA3B,AAASxB;AACP,AAAA,AAACoD;;AACD,AACE,AAAA,AAAA5B,AAAC6B,AAAarD;;AACd,AAAMQ,AAAG,AAAA,AAAAgB,AAAC8B,AAAUtD;AACduD,AAAM,AAAW1B;AAAX,AACE,AAACD,AAAiBC;;AAClB,AAAA,AAAAL,AAACgC,AAAiBxD;;AAClB,AAACkD,AAAAA,AAAAA;;AACD,AAAA,AAAA1B,AAACiC,AAAezD,AAAGQ;;AACnB,AAACkD,AAAyBH;;AANxC,AAOE,AAACG,AAAyBH","names":["js/app","js/app.kaboomv1","js/app.kaboomv1.app","js/app.kaboomv1.app.key-map","app.kaboomv1.app/key-map","js/app.kaboomv1.app.app-state","app.kaboomv1.app/app-state","cljs.core.atom","js/app.kaboomv1.app.gl","app.kaboomv1.app/gl","p__28117","map__28118","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.kaboomv1.app/new-canvas","id","canvas","js/document.createElement","or__4126__auto__","js/document","app.kaboomv1.app/new-gl","app.kaboomv1.app/keydown-handler","event","key","cljs.core.keyword","k","cljs.core.swap_BANG_","cljs.core/assoc-in","app.kaboomv1.app/keyup-handler","app.kaboomv1.app/key-pressed?","state","cljs.core/deref","cljs.core.get_in","cljs.core._EQ_","app.kaboomv1.app/key-down?","app.kaboomv1.app/update-app-state","t","delta","cljs.core/assoc","app.kaboomv1.app/init-gl-state","cljs.core/reset!","app.kaboomv1.app/set-dimension!","width","height","app.kaboomv1.app/set-fullscreen!","js/window","app.kaboomv1.app/set-nfullscreen!","app.kaboomv1.app/set-fs","opts","map__28123","full-screen?","scale","p__28125","map__28126","app.kaboomv1.app/init!","conf","app.kaboomv1.app/run","f","cljs.core/not","js/console.warn","app.kaboomv1.gfx/init-gl","app.kaboomv1.gfx/init","frame","app.kaboomv1.gfx/frame-start","app.kaboomv1.gfx/frame-end","js/requestAnimationFrame"],"sourcesContent":["(ns app.kaboomv1.app\n  (:require [app.kaboomv1.gfx :as gfx]\n            [app.kaboomv1.assets :as assets]))\n\n(defonce key-map {:ArrowLeft  :left\n                  :ArrowRight :right\n                  :ArrowUp    :up\n                  :ArrowDown  :down})\n\n(defonce app-state (atom {:key-states {}\n                          :time 0.0\n                          :dt 0.0}))\n\n(defonce gl (atom nil))\n(comment @app-state)\n\n(defn new-canvas [{id :id}]\n  (let [canvas (js/document.createElement \"canvas\")]\n    (set! canvas -id (or id \"app\"))\n    (.appendChild (.-body js/document) canvas)\n    canvas))\n\n(defn new-gl [canvas]\n  (.getContext canvas \"webgl\"))\n\n(defn keydown-handler [event]\n  (let [key (keyword (.-key event))\n        k (or (get key-map key key))]\n    (swap! app-state assoc-in [:key-states k] :pressed)))\n(set! js/document -onkeydown keydown-handler)\n(comment\n  (keyword \"foo\"))\n\n(defn keyup-handler [event]\n  (let [key (keyword (.-key event))\n        k (or (get key-map key key))]\n    (swap! app-state assoc-in [:key-states k] :released)))\n\n(set! js/document -onkeyup keyup-handler)\n(comment\n  (keyword \"foo\")\n  (:c (:key-states @app-state)))\n\n(defn key-pressed? [id]\n  (let [state (get-in @app-state [:key-states id])]\n    (= state :pressed)))\n\n(defn key-down? [id]\n  (let [state (get-in @app-state [:key-states id])]\n    (or (= state :pressed)\n        (= state :down))))\n(comment\n  (key-pressed? :left)\n  (key-down? :c))\n\n(defn update-app-state [t]\n  (let [delta (- (/ t 1000) (:time @app-state))]\n    (swap! app-state assoc\n           :dt delta\n           :time (+ (:time @app-state) delta))\n    #_(println \"STATE: \" @app-state)))\n\n(defn init-gl-state [canvas]\n  (if canvas\n    (reset! gl (new-gl canvas))\n    (reset! gl (new-gl (new-canvas {:id \"app\"})))))\n\n(defn set-dimension! [canvas width height]\n  (set! canvas -width width)\n  (set! canvas -height height))\n\n(defn set-fullscreen! [canvas]\n  (set-dimension! canvas (.-innerWidth js/window) (.-innerHeight js/window)))\n\n(defn set-nfullscreen! [canvas width height]\n  (set-dimension! canvas width height))\n\n(defn set-fs [opts]\n  (let [{:keys [canvas full-screen? scale width height] :or {full-screen? false\n                                                             width 640\n                                                             height 480\n                                                             scale 1}} opts]\n    (if full-screen?\n      (set-fullscreen! canvas)\n      (set-nfullscreen! canvas width height))))\n\n(defn init!\n  [{:keys [canvas] :as conf}]\n  (init-gl-state canvas)\n  (set-fs conf))\n;;\n\n(comment\n  @gl)\n(defn run [f]\n  ;; Debugging Purpose\n  (if-not @gl\n    (js/console.warn \"Please run the kaboom/init! function first. You need to create a new webgl context first\")\n    (do\n      (gfx/init-gl @gl)\n      (let [id (gfx/init @gl)\n            frame (fn frame [t]\n                    (update-app-state t)\n                    (gfx/frame-start @gl)\n                    (f)\n                    (gfx/frame-end @gl id)\n                    (js/requestAnimationFrame frame))]\n        (js/requestAnimationFrame frame)))))\n"]}