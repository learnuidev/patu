{"version":3,"sources":["clojure/test/check/random/longs/bit_count_impl.cljs"],"mappings":";;AAiBA,AAAeA,AACb,AAAMC,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAV,AACE,AAAA,AAAA,AAAMA;;AACN,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAUC;;AAAV,AAAA,AAAA,AAAAD,AAAUC;AAAV,AACE,AAAMF,AAAIE,AAAE,AAAG,AAAMF,AAAI,AAAA,AAAiBE,AAC3B,AAAA,AAASA;;AAF1B,AAAA,AAAA,AAAUA;;;;AAAV;;;;AAGAF;;AAEJ;;;;AAAA,AAAMG,AAGHC;AAHH,AAIE,AAAMC,AAAI,AAAQD;AACZE,AAAK,AAASF;AADpB,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAG,AAAML,AAAWM,AAAK,AAAA,AACtB,AAAMN,AAAWM,AAAK,AAAA,AAAoB,AAAA,AAC1C,AAAMN,AAAWM,AAAK,AAAA,AAAqB,AAAA,AAC3C,AAAMN,AAAWM,AAAK,AAAA,AAAqB,AAAA,AAC3C,AAAMN,AAAWO,AAAK,AAAA,AACtB,AAAMP,AAAWO,AAAK,AAAA,AAAoB,AAAA,AAC1C,AAAMP,AAAWO,AAAK,AAAA,AAAqB,AAAA,AAC3C,AAAMP,AAAWO,AAAK,AAAA,AAAqB,AAAA","names":["clojure.test.check.random.longs.bit-count-impl/lookup","arr","n__4613__auto__","i","clojure.test.check.random.longs.bit-count-impl/bit-count","x","low","high"],"sourcesContent":[";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"}\n clojure.test.check.random.longs.bit-count-impl\n  (:refer-clojure :exclude [bit-count]))\n\n;; Had to put this in a separate namespace because the + doesn't get\n;; inlined if it's called as (core/+ ...). This might change in future\n;; CLJS versions?\n\n(def ^:private lookup\n  (let [arr (make-array 256)]\n    (aset arr 0 0)\n    (dotimes [i 256]\n      (aset arr i (+ (aget arr (bit-shift-right i 1))\n                     (bit-and i 1))))\n    arr))\n\n(defn bit-count\n  \"Returns a JS number (not a Long), the number of set bits in the\n  given Long.\"\n  [x]\n  (let [low (.-low_ x)\n        high (.-high_ x)]\n    (+ (aget lookup (-> low  (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 8) (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 16) (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 24) (bit-and 255)))\n       (aget lookup (-> high (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 8) (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 16) (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 24) (bit-and 255))))))\n"]}