{"version":3,"sources":["posh/lib/graph.cljc"],"mappings":";;AASA,AAAA,AAAMA;AAAN,AAAA;;AAIA,AAAA,AAAMC,AAAUC,AAAMC;AAAtB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAOD,AACDD;;AAGT,AAAA,AAAMG,AAAWH,AAAMC,AAAOG;AAA9B,AACE,AAAA,AAAA,AAACC,AAAUL,AAAOC,AAAgBK,AAAKF;;AAGzC,AAAA,AAAMG,AAAYP,AAAMC,AAAOO;AAA/B,AACE,AAAA,AAAA,AAACH,AAAUL,AAAOC,AAAiBK,AAAKE;;AAE1C,AAAA,AAAMC,AAAeT,AAAMC,AAAOS,AAAOC;AAAzC,AACE,AAACC,AAAO,AAAKC,AAAGT;AAAR,AAAe,AAACD,AAAUU,AAAGZ,AAAOG;AACpC,AAACQ,AAAO,AAAKC,AAAGL;AAAR,AAAgB,AAACD,AAAWM,AAAGZ,AAAOO;AACtC,AAACT,AAASC,AAAMC,AAChBU,AACRD;;AAGV,AAAA,AAAMI,AAAkBd,AAAMC,AAAOS;AAArC,AACE,AAACE,AAAO,AAAKC,AAAGT;AAAR,AACMS,AACA,AAACV,AAAUF,AAAOG,AAClB,AAACG,AAAWH,AAAMH;AACxB,AAACF,AAASC,AAAMC,AAChBS;;AAGV,AAAA,AAAMK,AAAcf,AAAMC,AAAOG;AAAjC,AACE,AAAA,AAAA,AAACC,AAAUL,AAAOC,AAAgBe,AAAKZ;;AAGzC,AAAA,AAAMa,AAAejB,AAAMC,AAAOO;AAAlC,AACE,AAAA,AAAA,AAACH,AAAUL,AAAOC,AAAiBe,AAAKR;;AAG1C,AAAA,AAAMU,AAAYlB,AAAMmB,AAAEC;AAA1B,AACE,AAAA,AAAAC,AAACC,AAAOtB,AAAMmB;AAAd,AAAiB,AAAAE,AAACE,AAAOH;;;AAG3B,AAAA,AAAMI,AAAaxB,AAAMC;AAAzB,AACE,AAAAwB,AAAkC,AAACK,AAAI9B,AAAMC;AAA7C,AAAA,AAAAwB;AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAiBhB;AAAjB,AAAAoB,AAAAJ,AAAA,AAAwBf;AAAxB,AACE,AAACoB,AACA,AAACnB,AAAO,AAAKC,AAAGmB;AAAR,AAAkB,AAACf,AAAcJ,AAAGmB,AAAS/B;AAC7C,AAACW,AAAOY,AAAYxB,AAAMW,AAC1BD,AACRT;;AACDD;;;AAEJ","names":["posh.lib.graph/new-graph","posh.lib.graph/add-item","graph","item-k","cljs.core.merge","posh.lib.graph/add-input","input","cljs.core.update_in","cljs.core/conj","posh.lib.graph/add-output","output","posh.lib.graph/add-item-full","inputs","outputs","cljs.core.reduce","gr","posh.lib.graph/add-item-connect","posh.lib.graph/remove-input","cljs.core/disj","posh.lib.graph/remove-output","posh.lib.graph/remove-dep","k","dep-k","p1__45560#","cljs.core.update","cljs.core.disj","posh.lib.graph/remove-item","temp__5733__auto__","map__45564","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs.core.dissoc","output-k"],"sourcesContent":["(ns posh.lib.graph)\n\n\n;; graph-add-item\n\n\n;; data graph :: {key {:inputs #{keys} :outputs #{keys}}]\n\n;; new-graph :: graph\n(defn new-graph [] {})\n\n;; add-item :: graph -> key -> graph\n;; only adds if item doesn't exist\n(defn add-item [graph item-k]\n  (merge {item-k {:inputs #{} :outputs #{}}}\n         graph))\n\n;; add-item-input :: graph -> key -> key -> graph\n(defn add-input [graph item-k input]\n  (update-in graph [item-k :inputs] conj input))\n\n;; add-item-output :: graph -> key -> key -> graph\n(defn add-output [graph item-k output]\n  (update-in graph [item-k :outputs] conj output))\n\n(defn add-item-full [graph item-k inputs outputs]\n  (reduce (fn [gr input] (add-input gr item-k input))\n          (reduce (fn [gr output] (add-output gr item-k output))\n                  (add-item graph item-k)\n                  outputs)\n          inputs))\n\n;; connects item to output of inputs\n(defn add-item-connect [graph item-k inputs]\n  (reduce (fn [gr input]\n            (-> gr\n                (add-input item-k input)\n                (add-output input item-k)))\n          (add-item graph item-k)\n          inputs))\n\n;; remove-input :: graph -> key -> key -> graph\n(defn remove-input [graph item-k input]\n  (update-in graph [item-k :inputs] disj input))\n\n;; remove-output :: graph -> key -> key -> graph\n(defn remove-output [graph item-k output]\n  (update-in graph [item-k :outputs] disj output))\n\n;; rm-dep :: graph -> key -> key -> graph\n(defn remove-dep [graph k dep-k]\n  (update graph k #(disj % dep-k)))\n\n;; rm-item :: graph -> key -> graph\n(defn remove-item [graph item-k]\n  (if-let [{:keys [inputs outputs]} (get graph item-k)]\n    (dissoc\n     (reduce (fn [gr output-k] (remove-output gr output-k item-k))\n             (reduce remove-item graph outputs)\n             inputs)\n     item-k)\n    graph))\n\n(comment\n\n  (def patgraph\n    (-> (new-graph)\n        (add-item :db1)\n        (add-item :db2)\n        (add-item :query1)\n        (add-output :db2 :query1)\n        (add-item :filter1)\n        (add-item :filter2)\n        (add-input :filter2 :db1)\n        (add-output :db1 :filter1)\n        (add-output :db1 :filter2)\n        (add-output :filter2 :query2)\n        (add-item :query2)\n        (add-output :filter2 :query3)\n        (add-output :db2 :query3)\n        (add-item :query3)))\n\n  (remove-item patgraph :filter2)\n\n  )\n\n"]}