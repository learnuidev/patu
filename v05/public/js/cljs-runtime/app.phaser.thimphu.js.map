{"version":3,"sources":["app/phaser/thimphu.cljs"],"mappings":"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","names":["app.phaser.thimphu/app-config","js/app","js/app.phaser","js/app.phaser.thimphu","js/app.phaser.thimphu.boot-scene","app.phaser.thimphu/boot-scene","js/Phaser.Scene","cljs.core/clj->js","app.phaser.thimphu/bs-preload!","this","cljs.core.doall","iter__4529__auto__","s__26773","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__26775","cljs.core/chunk-buffer","i__26774","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26772","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","level","app.phaser.thimphu/level","js/app.phaser.thimphu.scene","app.phaser.thimphu/scene","js/app.phaser.thimphu.title-scene","app.phaser.thimphu/title-scene","app.phaser.thimphu/preload!","app.phaser.thimphu/create!","background","_","title_text","app.phaser.thimphu/config","js/Phaser","app.phaser.thimphu/create-game","new-game","js/Phaser.Game","cljs.core/chunk-first"],"sourcesContent":["(ns app.phaser.thimphu\n  (:require [cljs.reader :as reader]\n            [reagent.core :as r]\n            [\"Phaser\" :as phaser]))\n\n(def app-config\n  {:assets\n   {:background_image {:type :image :source \"assets/images/battle/background.png\"}}\n   :sprites {\n             :background\n             {:type :sprite\n              :position {:x 320 :y 240}\n              :texture \"background_image\"}\n             :title_message\n             {:type :text\n              :position {:x 20 :y 100}\n              :style {:font \"65px Arial\"\n                      :fill \"#000000\"}}\n             :start_message\n             {:type :text\n              :position {:x 150 :y 200}\n              :style {:font \"65px Arial\"\n                      :fill \"#000000\"}}}})\n\n(declare preload)\n(declare create)\n\n;; Boot Scene\n(defonce boot-scene (new js/Phaser.Scene \"BootScene\"))\n\n(set! boot-scene -levels (clj->js {:title {:key \"TitleScene\" :path \"assets/levels/battle/title_screen.png\"}}))\n\n(defn bs-preload! []\n  (this-as this\n         (doall\n          (for [level (.-levels level)]\n             (.json (.-load this) (.-path level))))))\n\n\n(set! boot-scene -preload bs-preload!)\n\n\n;; step 1 - create a new game scene\n(defonce scene (new js/Phaser.Scene \"Title\"))\n\n;; ===== Title Scene ===\n(defonce title-scene (new js/Phaser.Scene \"TitleScene\"))\n(defn preload! []\n  (this-as this\n           (.image (.-load this) \"background_image\" \"assets/images/battle/background.png\")))\n\n(set! title-scene -preload preload!)\n\n\n(defn create! []\n  (this-as this\n         (let [background (.sprite (.-add this) 0 0 \"background_image\")\n               _ (.setOrigin background 0 0)\n               title_text (.text (.-add this) 100 100 \"Thimphu Town\")]\n           title_text)))\n\n\n(set! title-scene -create create!)\n\n;; ===== Title Scene END =====\n;; step 3 - set the configuration of the game\n(def config\n  {:type (.-AUTO js/Phaser)\n   :width 640\n   :height 360\n   :scene #'scene})\n\n;; Step 4 - create a game\n(defn create-game []\n  (let [new-game (new js/Phaser.Game (clj->js config))]\n   (.add (.-scene new-game) \"TitleScene\" title-scene)\n   (.start (.-scene new-game) \"TitleScene\")))\n"]}