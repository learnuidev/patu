{"version":3,"sources":["app/kaboom_examples/metro/scenes/one.cljs"],"mappings":"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","names":["app.kaboom-examples.metro.scenes.one/sleep","f","ms","js/setTimeout","app.kaboom-examples.metro.scenes.one/attack","id","temp__5735__auto__","comp","app.kaboom.patu.core/get-component","app.kaboom.patu.components/cur-anim?","cljs.core/name","app.kaboom.patu.core/play","app.kaboom.patu.core/change-sprite","js/Math.abs","app.kaboom-examples.metro.scenes.one/follow-target","obj","target","app.kaboom.patu.components/close?","app.kaboom.patu.components/ahead?","app.kaboom.patu.core/vec2","app.kaboom.patu.core/reg-level","app.kaboom-examples.metro.assets/level-handler","app.kaboom-examples.metro.assets/level-two-handler","app.kaboom.patu.events/reg-event","p__72425","vec__72426","cljs.core.nth","_","player","app.kaboom.patu.core.go","and__4115__auto__","app.kaboom.patu.components/grounded?","p__72429","vec__72430","p__72433","vec__72434","app.kaboom.patu.components/jump!","p__72437","vec__72438","diff","app.kaboom.patu.events/key-is-down","cljs.core/not","cljs.core._EQ_","p__72441","vec__72442","app.kaboom.patu.core/add-component!","app.kaboom-examples.metro.scenes.one/init","app.kaboom-examples.metro.assets/main-map","app.kaboom-examples.metro.scenes.one/spawn-coin","x","y","app.kaboom-examples.metro.scenes.one/spawn-worm","app.kaboom-examples.metro.scenes.one/spawn-slime","app.kaboom-examples.metro.scenes.one/spawn-wooden-plate","app.kaboom-examples.metro.scenes.one/spawn-flower-props","app.kaboom-examples.metro.scenes.one/spawn-grass-props","app.kaboom-examples.metro.scenes.one/spawn-lever","app.kaboom-examples.metro.scenes.one/spawn-orb","app.kaboom-examples.metro.scenes.one/coin-positions","app.kaboom-examples.metro.scenes.one/anims","app.kaboom-examples.metro.scenes.one/event","p1__72445#","score","door","seq__72446","cljs.core/seq","chunk__72447","count__72448","i__72449","vec__72456","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__72459","cljs.core/first","cljs.core/next","seq__72462","chunk__72463","count__72464","i__72465","c","seq__72466","chunk__72467","count__72468","i__72469","seq__72470","chunk__72471","count__72472","i__72473","seq__72474","chunk__72475","count__72476","i__72477","app.kaboom.patu.events/dispatch","lever","app.kaboom.patu.core.play_anims_and_destroy","worm","app.kaboom.patu.utils.js_get","slime","coin","app.kaboom.patu.core.change_sprite_and_destroy","orb","bird","app.kaboom.patu.core/destroy","worms","seq__72478","chunk__72479","count__72480","i__72481"],"sourcesContent":["(ns app.kaboom-examples.metro.scenes.one\n  (:require\n   [clojure.repl :refer [doc]]\n   ;; Main Libs ===\n   [app.kaboom.patu.core :as p]\n   [app.kaboom.patu.loaders :as l]\n   [app.kaboom.patu.cam :as cam]\n   [app.kaboom.patu.audio :as a]\n   [app.kaboom.patu.components :as c]\n   [app.kaboom.patu.utils :refer [js-get]]\n   ;; Event System\n   [app.kaboom.patu.events :refer [dispatch reg-event key-is-down]]\n   ;; Assets\n   [app.kaboom-examples.metro.assets :refer [main-map level-handler level-two-handler]]))\n\n(defn sleep [f ms]\n  (js/setTimeout f ms))\n\n(defn attack\n  \"Triggers attack animation\"\n  [id]\n  (when-let [comp (p/get-component id)]\n    (when (not (c/cur-anim? comp :attack))\n      (.changeSprite comp (name :character/attack))\n      (p/play id :attack)\n      (sleep #(p/change-sprite [:player :character/tileset :player/nod])\n             800))))\n\n(comment\n  (close? (p/get-component :player)\n          (aget (p/get-component ::worm) 0))\n  ;; Is the player ahead of the worm?\n  (ahead? (p/get-component :player)\n          (aget (p/get-component ::worm) 0))\n  ;; Is worm ahead of the player? => true\n  (ahead?\n   (aget (p/get-component ::worm) 0)\n   (p/get-component :player)))\n\n(js/Math.abs -1)\n;;\n; (reg-event\n;  :player/move-left\n;  (fn [_ [_ player]]\n;    (if (< 20 (.-x (.-pos player)))\n;      (.move player (.scale (p/vec2 [-1 0]) (.-speed player)))\n;      (p/go :scene/two))\n;    (.move player (.scale (p/vec2 [-1 0]) (.-speed player)))\n;    (.flipX (p/get-component :player) -1)\n;    (when (and (c/grounded? player)\n;               (not (c/cur-anim? player :run))\n;               (not (c/cur-anim? player :attack)))\n;      (p/play :player :player/run))))\n; (reg-event\n;  :player/move-right\n;  (fn [_ [_ player]]\n;    (when (> 650 (.-x (.-pos player)))\n;      (.move player (.scale (p/vec2 [1 0]) (.-speed player))))\n;    (.flipX (p/get-component :player) 1)\n;    (when (and (c/grounded? player)\n;               (not (c/cur-anim? player :run))\n;               (not (c/cur-anim? player :attack)))\n;      (p/play :player :player/run))))\n\n(defn follow-target [obj target]\n  (when (c/close? target obj)\n    (if (c/ahead? obj target)\n      (.move obj (.scale (p/vec2 [-1 0]) 100))\n      (.move obj (.scale (p/vec2 [1 0]) 100)))))\n             ; target-comp (p/get-component target-id)]))\n\n(comment\n  \"=== List of Game Animations === \"\n  (p/play :player :player/lose)\n  (p/play :player :player/run)\n  (p/play :player :player/boom)\n  (p/play :player :player/nod)\n  (p/play :player :player/attack)\n  (attack :player))\n\n(comment\n  \"Flipping Player Tutorial:\"\n  (.flipX (p/get-component :player) -1)\n  (.flipX (p/get-component :player) 1))\n;;\n(p/reg-level :level/main level-handler)\n(p/reg-level :level/two level-two-handler)\n\n;;\n(comment\n  (c/cur-anim? (p/get-component :player) :player/run)\n  (c/cur-anim (p/get-component :player))\n  (js/console.log (p/get-component :player))\n  (set! (p/get-component :player) -animSpeed 0.2))\n(reg-event\n :player/move-left\n (fn [_ [_ player]]\n   (set! player -dir \"left\")\n   (if (< 20 (.-x (.-pos player)))\n     (.move player (.scale (p/vec2 [-1 0]) (.-speed player)))\n     (p/go :scene/two))\n   (.move player (.scale (p/vec2 [-1 0]) (.-speed player)))\n   (.flipX (p/get-component :player) -1)\n   (when (and (c/grounded? player)\n              (not (c/cur-anim? player :run))\n              (not (c/cur-anim? player :attack)))\n     (p/play :player :player/run))))\n(reg-event\n :player/move-right\n (fn [_ [_ player]]\n   (set! player -dir \"right\")\n   (when (> 650 (.-x (.-pos player)))\n     (.move player (.scale (p/vec2 [1 0]) (.-speed player))))\n   (.flipX (p/get-component :player) 1)\n   (when (and (c/grounded? player)\n              (not (c/cur-anim? player :run))\n              (not (c/cur-anim? player :attack)))\n     (p/play :player :player/run))))\n\n(reg-event\n :player/jump\n (fn [_ [_ player]]\n   (if (c/grounded? player)\n     (c/jump! player 540))))\n     ; (dispatch [:player/zoom player]))))\n\n(reg-event\n :player/zoom\n (fn [_ [_ player]]\n   (let [diff (if (key-is-down :left) -800 400)]\n     (when (not (c/grounded? player))\n       (when (= (.-dir player) \"left\")\n         (.move player (.scale (p/vec2 [-1 0]) (+ diff (.-speed player)))))\n       (when (= (.-dir player) \"right\")\n         (.move player (.scale (p/vec2 [1 0]) (+ diff (.-speed player)))))\n       (p/play :player :player/boom)))))\n\n(reg-event\n :player/idle\n (fn [_ [_ player]]\n   (when (or  (not (key-is-down [:left :right :x]))\n              (not (c/cur-anim? player :player/attack))\n              (not (c/cur-anim? player :run))\n              (not (c/cur-anim? player :nod)))\n     (p/play :player :player/nod))))\n\n(reg-event\n :game/spawn-birds\n (fn [_ _]\n   ; (let [h1 (p/randd pipe-min-height (- (p/height) (+ pipe-min-height pipe-open 10)))]\n   (p/add-component! [[:sprite :bird {:frame 1}]\n                      [:scale 1]\n                      [:pos -100 30]\n                      [:layer :props]\n                      [:prop ::bird]])))\n(defn init []\n  [[:game/layers [:bg :props :game, :ui] :game]\n   [:game/add-level main-map :level/main]\n   [:comp/reg-n\n    [:score [[:text 0]\n             [:pos 16 16]\n             [:layer :ui]\n             [:prop {:value 0}]]]\n    [:bg0 [[:sprite :bg0]\n           [:layer :bg]\n           [:pos 0 0]\n           [:scale 2.6]]]\n    [:bg1 [[:sprite :bg1]\n           [:layer :bg]\n           [:pos 0 0]\n           [:scale 2.8]]]\n    [:bg2 [[:sprite :bg2]\n           [:layer :bg]\n           [:pos 0 0]\n           [:scale 2.8]]]\n    [:fg [[:sprite :fg0]\n          [:layer :bg]\n          [:pos 0 0]\n          [:scale 2.8]]]\n    [:player [[:sprite :character/tileset]\n              [:pos 190 90]\n              [:prop :player]\n              [:origin :botleft]\n              [:scale 1.5]\n              [:prop {:speed 125\n                      :animSpeed 0.25}]\n              [:body]]]\n    ; [:bird [[:sprite :bird]\n    ;         [:pos 160 30]\n    ;         [:scale 2]\n    ;         [:prop {:speed 155}]]]\n    [:door [[:sprite :door/closed]\n            [:pos 575 320]\n            [:scale 2]\n            [:solid]\n            [:prop {:speed 155}]]]\n    [:trap/suspended [[:sprite :trap/suspended]\n                      [:pos -30 75]\n                      [:scale 1]\n                      [:solid]\n                      [:layer :props]\n                      [:prop {:animSpeed 0.15}]\n                      [:prop :trap/suspended]]]]])\n\n(defn spawn-coin [x y]\n  (p/add-component! [[:sprite :coin {:frame 4}]\n                     [:pos x y]\n                     [:scale 1.5]\n                     [:prop ::coin]]))\n\n(defn spawn-worm [x y]\n  (p/add-component! [[:sprite :worm-walk {:frame 4}]\n                     [:pos x y]\n                     [:scale 1.2]\n                     [:body]\n                     [:prop ::worm]\n                     [:prop {:dir 1}]]))\n(defn spawn-slime [x y]\n  (p/add-component! [[:sprite :slime-walk {:frame 4}]\n                     [:pos x y]\n                     [:scale 1.4]\n                     [:prop ::slime]\n                     [:body]]))\n;;\n(defn spawn-wooden-plate [x y]\n  (p/add-component! [[:sprite :wooden-plate]\n                     [:pos x y]\n                     [:scale 1.4]\n                     [:prop ::wooden-plate]]))\n(defn spawn-flower-props [x y]\n  (p/add-component! [[:sprite :flower-props]\n                     [:pos x y]\n                     [:scale 2]\n                     [:layer :props]\n                     [:prop ::flower-props]]))\n(defn spawn-grass-props [x y]\n  (p/add-component! [[:sprite :grass-props]\n                     [:pos x y]\n                     [:scale 2]\n                     [:layer :props]\n                     [:prop ::grass-props]]))\n\n(defn spawn-lever [x y]\n  (p/add-component! [[:sprite :lever-left]\n                     [:pos x y]\n                     [:scale 2]\n                     [:solid]\n                     [:prop ::lever]\n                     [:prop {:open false}]]))\n\n(defn spawn-orb [x y]\n  (p/add-component! [[:sprite :orb-anim]\n                     [:pos x y]\n                     [:scale 2.4]\n                     [:solid]\n                     [:prop ::orb]\n                     [:prop {:open false}]]))\n(def coin-positions\n  [[520 150]\n   [540 150]\n   [560 150]\n   [580 150]\n   [600 150]\n   [520 120]\n   [540 120]\n   [560 120]\n   [580 120]\n   [600 120]\n   [520  90]\n   [540  90]\n   [560  90]\n   [580  90]\n   [600  90]])\n(comment\n  (p/get-component ::coin))\n\n;;\n; (change-sprite [worm :worm-hit :worm-hit])\n\n;;\n(def anims [[:worm-hit :worm-hit 2350]\n            [:worm-death :worm-death 350]])\n\n(comment\n  (p/play-anims-and-destroy (aget (p/get-component ::worm) 0)\n                            anims))\n(defn event []\n  (let [player  (p/get-component :player)\n        score (p/get-component :score)\n        door (p/get-component :door)]\n    (doseq [[x y] coin-positions]\n      (spawn-coin x y))\n    (spawn-slime 550 180)\n    (spawn-lever 600 160)\n    (spawn-worm 320 405)\n    (spawn-slime 490 370)\n    (spawn-slime 450 370)\n    (spawn-slime 410 370)\n    (spawn-flower-props 380 48)\n    (spawn-grass-props 150 272)\n    (spawn-wooden-plate 530 390)\n    (spawn-orb 630 360)\n    (doseq [c (p/get-component ::slime)]\n      (p/play c :slime-walk))\n    (doseq [c (p/get-component ::orb)]\n      (p/play c :orb-anim))\n    (doseq [c (p/get-component ::worm)]\n      (p/play c :worm-walk))\n    (doseq [c (p/get-component ::coin)]\n      (p/play c :coin))\n    (p/play :player :player/nod)\n    (p/play :door :door/closed)\n    ; (when-let [birds (p/get-component ::bird)]\n    ;   (doseq [bird birds]\n    ;     (p/play bird :flying)))\n    ; (p/play ::bird :flying)\n    (p/play :trap/suspended :pendulum)\n    [[:evt/key-down  :left  #(dispatch [:player/move-left player])]\n     [:evt/key-down  :right #(dispatch [:player/move-right player])]\n     [:evt/collides [:player ::lever] #(dispatch [:player/process-lever player %])]\n     [:evt/action  ::lever (fn [lever]\n                             (when (.-open lever)\n                               (when-not (c/cur-anim? door :door-open)\n                                 (p/play-anims-and-destroy door [[:door-open :door-open 1300 0.3]]))))]\n\n                               ; (.move worm (* (.-dir worm) 50) 0)))]\n     [:evt/key-down  :up    #(dispatch [:player/move-up player])]\n     [:evt/key-down  :down  #(dispatch [:player/move-down player])]\n     [:evt/key-down  :z     #(attack :player)]\n     [:evt/key-down  :x     #(dispatch [:player/zoom player])]\n     [:evt/key-press :space #(dispatch [:player/jump player])]\n     [:evt/key-release [:left :right]  #(dispatch [:player/idle player])]\n     [:evt/action  :player #(when (> (.. player -pos -y) 520)\n                              (p/go :scene/lose 0))]\n     [:evt/action  ::worm (fn [worm]\n                            (when-not (or (c/cur-anim? worm :worm-hit)\n                                          (c/cur-anim? worm :worm-death))\n                              (when-not (c/close? worm (p/get-component :player))\n                                (.move worm (* (.-dir worm) 5) 0))))]\n     [:evt/action  ::worm (fn [worm]\n                            (let [player (p/get-component :player)]\n                              (when-not (or (c/cur-anim? worm :worm-hit)\n                                            (c/cur-anim? worm :worm-death))\n                                (follow-target worm player)))\n                            ; (js/console.log \"WORM\" worm)\n\n                            (.move worm (* (.-dir worm) 50) 0))]\n     [:evt/action  ::slime (fn [worm]\n                             (let [player (p/get-component :player)]\n                               (follow-target worm player)))]\n                             ; (js/console.log \"WORM\" worm)\n\n                             ; (.move worm (* (.-dir worm) 50) 0))]\n     ;; Collisions Events\n     #_[:evt/collides  [:player :trap/suspended] (fn [trap]\n                                                   (if (c/cur-anim? player :attack)\n                                                     (do\n                                                       (p/destroy trap)\n                                                       (set! score -value (+ 15 (.-value score)))\n                                                       (set! score -text (.-value score)))\n                                                     (p/go :scene/lose (js-get score :value))))]\n     [:evt/collides  [:player ::worm]  (fn [worm]\n                                         (if (c/cur-anim? player :attack)\n                                           (do\n                                             ; (p/destroy worm\n                                             (p/play-anims-and-destroy worm [[:worm-hit :worm-hit 300 0.3]\n                                                                             [:worm-hit :worm-hit 100 0.2]\n                                                                             [:worm-hit :worm-hit 100 0.1]\n                                                                             [:worm-death :worm-death 250 0.5]])\n                                             ; (change-sprite [worm :worm-hit :worm-hit])\n                                             ; (sleep #(change-sprite-and-destroy worm :worm-death :worm-death 350)\n                                             ;        350)\n                                             (set! score -value (+ 5 (.-value score)))\n                                             (set! score -text (.-value score)))\n                                           (when-not (or (c/cur-anim? worm :worm-hit)\n                                                         (c/cur-anim? worm :worm-death))\n                                             (p/go :scene/lose (js-get score :value)))))]\n     [:evt/collides  [:player ::slime]  (fn [slime]\n                                          (if (c/cur-anim? player :attack)\n                                            (do\n                                              ; (p/destroy work)\n                                              (p/play-anims-and-destroy slime [[:explosion :explosion 600]])\n                                              ; (change-sprite-and-destroy slime :explosion :explosion)\n                                              (set! score -value (+ 25 (.-value score)))\n                                              (set! score -text (.-value score)))\n                                            (when-not (c/cur-anim? slime :explosion)\n                                              (p/go :scene/lose (js-get score :value)))))]\n     [:evt/collides  [:player ::coin]  (fn [coin]\n                                         (set! score -value (inc (.-value score)))\n                                         (set! score -text (.-value score))\n                                         (p/change-sprite-and-destroy coin :coin-pickup :coin-pickup 300))]\n     [:evt/collides  [:player ::orb]  (fn [orb]\n                                        (set! score -value (+ 1000 (.-value score)))\n                                        (set! score -text (.-value score))\n                                        (p/change-sprite-and-destroy orb :orb-pickup :orb-pickup 400))]\n     [:game/loop     10      #(dispatch [:game/spawn-birds])]\n     [:evt/action  ::bird (fn [bird]\n                            (.move bird 100 0)\n                            (when (and (> (.. bird -pos -x) 680))\n                              (p/destroy bird))\n                            (when-not (c/cur-anim? bird :flying)\n                              (p/play bird :flying)))]\n     [:game/loop     2   (fn [worm]\n                           (let [worms (p/get-component ::worm)]\n                             (doseq [worm worms]\n                               (set! worm -dir (* -1 (.-dir worm))))))]]))\n"]}