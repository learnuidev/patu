{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$core$Metrics.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,kEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9H,IAAIC,QAAU,EAEdF,OAAAC,QAAA,CAAiBC,OAEjB,KAAIC,UAAYJ,OAAA,CAAQ,qEAAR,CAAhB,CACIK,OAASL,OAAA,CAAQ,kEAAR,CAEZ,UAAQ,EAAG,CAQRG,OAAAG,OAAA,CAAiBC,QAAQ,CAACC,OAAD,CAAU,CAkB/B,MAAOH,OAAAI,OAAA,CAjBQC,CACXC,SAAU,CAAA,CADCD,CAEXE,iBAAkB,CAFPF,CAGXG,iBAAkB,CAHPH,CAIXI,YAAa,CAJFJ,CAKXK,iBAAkB,CALPL,CAMXM,cAAe,CANJN;AAOXO,gBAAiB,CAPNP,CAQXQ,UAAW,IARAR,CASXS,OAAQ,IATGT,CAUXU,SAAU,IAVCV,CAWXW,WAAY,CAXDX,CAYXY,QAAS,CAZEZ,CAaXa,OAAQ,CAbGb,CAcXc,MAAO,CAdId,CAiBR,CAAwB,CAAA,CAAxB,CAA+BF,OAA/B,CAlBwB,CA2BnCL,QAAAsB,MAAA,CAAgBC,QAAQ,CAACC,OAAD,CAAU,CAC1BA,OAAAhB,SAAJ,GACIgB,OAAAf,iBAYA,CAZ2B,CAY3B,CAXAe,OAAAd,iBAWA,CAX2B,CAW3B,CAVAc,OAAAb,YAUA,CAVsB,CAUtB,CATAa,OAAAZ,iBASA,CAT2B,CAS3B,CARAY,OAAAX,cAQA,CARwB,CAQxB,CAPAW,OAAAV,gBAOA,CAP0B,CAO1B,CANAU,OAAAT,UAMA,CANoB,CAMpB,CALAS,OAAAR,OAKA,CALiB,CAKjB,CAJAQ,OAAAP,SAIA,CAJmB,CAInB,CAHAO,OAAAN,WAGA,CAHqB,CAGrB,CAFAM,OAAAL,QAEA,CAFkB,CAElB,CADAK,OAAAH,MACA,CADgB,CAChB,CAAAG,OAAAJ,OAAA,CAAiB,CAbrB,CAD8B,CAyBlCpB,QAAAyB,OAAA,CAAiBC,QAAQ,CAACF,OAAD,CAAUG,MAAV,CAAkB,CACvC,GAAIH,OAAAhB,SAAJ,CAAsB,CAClB,IACIY;AAASnB,SAAA2B,UAAA,CADDD,MAAAE,MACC,CAEbL,QAAAN,WAAA,CAAqBM,OAAAf,iBACrBe,QAAAH,MAAA,CAAgBM,MAAAN,MAAAS,KAAAC,OAChBP,QAAAJ,OAAA,CAAiBA,MAAAW,OACjBP,QAAAR,OAAA,CAAiBgB,CAACR,OAAAf,iBAADuB,EAA6BR,OAAAX,cAA7BmB,EAAsD,CAAtDA,UAAA,CAAkE,CAAlE,CACjBR,QAAAT,UAAA,CAAoBiB,CAACR,OAAAf,iBAADuB,EAA6BR,OAAAd,iBAA7BsB,EAAyD,CAAzDA,UAAA,CAAqE,CAArE,CACpBR,QAAAP,SAAA,CAAmBe,CAAC,CAADA,CAAMR,OAAAV,gBAANkB,EAAiCZ,MAAAW,OAAjCC,EAAkD,CAAlDA,UAAA,CAA+D,CAA/D,CACnBR,QAAAb,YAAA,CAAsBqB,CAACR,OAAAZ,iBAADoB,EAA6BR,OAAAd,iBAA7BsB,EAAyD,CAAzDA,UAAA,CAAqE,CAArE,CAVJ,CADiB,CA5DnC,CAAX,CAAD,EAd8H;",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/core/Metrics.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$core$Metrics\"] = function(global,require,module,exports) {\n// @if DEBUG\r\n/**\r\n* _Internal Class_, not generally used outside of the engine's internals.\r\n*\r\n*/\r\n\r\nvar Metrics = {};\r\n\r\nmodule.exports = Metrics;\r\n\r\nvar Composite = require('../body/Composite');\r\nvar Common = require('./Common');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new metrics.\r\n     * @method create\r\n     * @private\r\n     * @return {metrics} A new metrics\r\n     */\r\n    Metrics.create = function(options) {\r\n        var defaults = {\r\n            extended: false,\r\n            narrowDetections: 0,\r\n            narrowphaseTests: 0,\r\n            narrowReuse: 0,\r\n            narrowReuseCount: 0,\r\n            midphaseTests: 0,\r\n            broadphaseTests: 0,\r\n            narrowEff: 0.0001,\r\n            midEff: 0.0001,\r\n            broadEff: 0.0001,\r\n            collisions: 0,\r\n            buckets: 0,\r\n            bodies: 0,\r\n            pairs: 0\r\n        };\r\n\r\n        return Common.extend(defaults, false, options);\r\n    };\r\n\r\n    /**\r\n     * Resets metrics.\r\n     * @method reset\r\n     * @private\r\n     * @param {metrics} metrics\r\n     */\r\n    Metrics.reset = function(metrics) {\r\n        if (metrics.extended) {\r\n            metrics.narrowDetections = 0;\r\n            metrics.narrowphaseTests = 0;\r\n            metrics.narrowReuse = 0;\r\n            metrics.narrowReuseCount = 0;\r\n            metrics.midphaseTests = 0;\r\n            metrics.broadphaseTests = 0;\r\n            metrics.narrowEff = 0;\r\n            metrics.midEff = 0;\r\n            metrics.broadEff = 0;\r\n            metrics.collisions = 0;\r\n            metrics.buckets = 0;\r\n            metrics.pairs = 0;\r\n            metrics.bodies = 0;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Updates metrics.\r\n     * @method update\r\n     * @private\r\n     * @param {metrics} metrics\r\n     * @param {engine} engine\r\n     */\r\n    Metrics.update = function(metrics, engine) {\r\n        if (metrics.extended) {\r\n            var world = engine.world,\r\n                bodies = Composite.allBodies(world);\r\n\r\n            metrics.collisions = metrics.narrowDetections;\r\n            metrics.pairs = engine.pairs.list.length;\r\n            metrics.bodies = bodies.length;\r\n            metrics.midEff = (metrics.narrowDetections / (metrics.midphaseTests || 1)).toFixed(2);\r\n            metrics.narrowEff = (metrics.narrowDetections / (metrics.narrowphaseTests || 1)).toFixed(2);\r\n            metrics.broadEff = (1 - (metrics.broadphaseTests / (bodies.length || 1))).toFixed(2);\r\n            metrics.narrowReuse = (metrics.narrowReuseCount / (metrics.narrowphaseTests || 1)).toFixed(2);\r\n            //var broadphase = engine.broadphase[engine.broadphase.current];\r\n            //if (broadphase.instance)\r\n            //    metrics.buckets = Common.keys(broadphase.instance.buckets).length;\r\n        }\r\n    };\r\n\r\n})();\r\n// @endif\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Metrics","Composite","Common","create","Metrics.create","options","extend","defaults","extended","narrowDetections","narrowphaseTests","narrowReuse","narrowReuseCount","midphaseTests","broadphaseTests","narrowEff","midEff","broadEff","collisions","buckets","bodies","pairs","reset","Metrics.reset","metrics","update","Metrics.update","engine","allBodies","world","list","length","toFixed"]
}
