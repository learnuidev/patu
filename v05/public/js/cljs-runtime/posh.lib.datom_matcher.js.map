{"version":3,"sources":["posh/lib/datom_matcher.cljc"],"mappings":";;;AAGA,AAAA,AAAMA,AAAsBC,AAAQC;;AAApC,AACE,AAAI,AAACC,AAAOF;AAAZ;;AAEE,AAAM,AAAMG,AAAE,AAACC,AAAMJ;AAAf,AACE,AAAAK,AACC,AAAA,AAAA,AAACC,AAAEH;AADJ,AAAA,AAAAE;AAAAA;;AAAA,AAAAA,AAEC,AAAK,AAACE,AAAKJ,AAAG,AAAAK,AAAG,AAACJ,AAAMH;AAAV,AAAA,AAAAO,AAAAA,AAACL,AAAAA,AAAAA;AAAf;AAFD,AAAA,AAAAE;AAAAA;;AAGC,AAACC,AAAEH,AAAE,AAACC,AAAMH;;;;AAJrB,AAKE,AAAO,AAACQ,AAAKT;AAAS,AAACS,AAAKR;;;;;AAL9B;;;;;;AAOJ,AAAA,AAAMS,AAAcC,AAASV;AAA7B,AACE,AAAA,AAAAW,AAACC;AAAD,AAAO,AAAAD,AAACb,AAAuBE;AAAOU;;AAExC,AAAA,AAAMG,AAAmBH,AAASI;AAAlC,AACE,AAAAC,AAAML;AAAN,AAAA,AAAA,AAAAL,AAAA,AAAAU;AAAA;;AAAA,AAAA,AAAAV,AAAA,AAAAU;AAAA;;AAAA,AAAA,AAAAV,AAAA,AAAA,AAAAU;AAAA;;AAAA,AAIE,AAAA,AAAAC,AAACJ;AAAD,AAAO,AAAAI,AAACP,AAAaC;AAAYI;;;;;;AAErC,AAAA,AAAMG,AAAiBP,AAASI;AAAhC,AACE,AAAAI,AAAMR;AAAN,AAAA,AAAA,AAAAL,AAAA,AAAAa;AACKJ;;AADL,AAAA,AAAAT,AAAA,AAAA,AAAAa;AAEOJ;;AAFP,AAAA,AAAAT,AAAA,AAAAa;AAAA;;AAAA,AAIE,AAAA,AAAAC,AAACC;AAAD,AAAS,AAAAD,AAACV,AAAaC;AAAYI;;;;;;AAEvC,AAAA,AAAMO,AAAgBC,AAAOC,AAAWb,AAASc,AAAaC;;AAA9D,AACE,AAAI,AAACxB,AAAOS;AAAZ,AAAA,AAAA,AACiB,AAACgB,AAAK,AAACC,AAAI,AAACD,AAAKJ,AAAOC,AAAaC,AAChCC;;AACpB,AAAI,AAACpB,AAAEkB,AAAW,AAACf,AAAK,AAACL,AAAMO;AAC7B,AAAO,AAACkB,AAASN,AAAO,AAAI,AAAChB,AAAK,AAACuB,AAAOnB,AAChB,AAACmB,AAAOnB,AACR,AAAA,AAACoB,AAAK,AAACD,AAAOnB;AACjCa;AACA,AAACf,AAAKE;AACNc;AACAC;;;;;;;;AACP,AAAOH;AAAOC;AAAW,AAACf,AAAKE;AAAUc;AAClC,AAACE,AAAK,AAACvB,AAAMO,AAAUe;;;;;;;;;;;;AAEpC,AAAA,AAAMM,AAAiBrB;AAAvB,AACE,AAAA,AAAOc;AACAC,AAAkBf;;AADzB,AAEE,AAAI,AAACT,AAAOwB;AACVD;;AACA,AAAI,AAAMQ,AAAG,AAACH,AAAOJ;AAAjB,AACE,AAAI,AAACnB,AAAK0B,AAAI,AAASA;;AAC3B,AAAMC,AAAE,AAAA,AAAA,AAACZ,AAAmB,AAACb,AAAK,AAACL,AAAMsB,AACjBA,AACAD;AAFxB,AAIE,AAAO,AAAA,AAAeS;AAAG,AAAA,AAAoBA;;;;;AAC/C,AAAO,AAACP,AAAK,AAACvB,AAAMsB,AAAmBD;AAAc,AAAChB,AAAKiB;;;;;;;;;AAEnE","names":["posh.lib.datom-matcher/datom-match-pattern?","pattern","datom","cljs.core/empty?","p","cljs.core/first","or__4126__auto__","cljs.core._EQ_","cljs.core/set?","G__46977","cljs.core/rest","posh.lib.datom-matcher/datom-match?","patterns","p1__46978#","cljs.core/some","posh.lib.datom-matcher/any-datoms-match?","datoms","G__46980","p1__46979#","posh.lib.datom-matcher/matching-datoms","G__46982","p1__46981#","cljs.core.filter","posh.lib.datom-matcher/combine-entids","entids","rest-datom","new-patterns","leftover-patterns","cljs.core/cons","cljs.core/vec","clojure.set.union","cljs.core/ffirst","cljs.core/set","posh.lib.datom-matcher/reduce-patterns","id","r"],"sourcesContent":["(ns posh.lib.datom-matcher\n  (:require [clojure.set :as cs]))\n\n(defn datom-match-pattern? [pattern datom]\n  (if (empty? pattern)\n    true\n    (when (let [p (first pattern)]\n            (or\n             (= p '_)\n             (and (set? p) (p (first datom)))\n             (= p (first datom))))\n      (recur (rest pattern) (rest datom)))))\n\n(defn datom-match? [patterns datom]\n  (some #(datom-match-pattern? % datom) patterns))\n\n(defn any-datoms-match? [patterns datoms]\n  (case patterns\n    nil nil\n    [] nil\n    [[]] true\n    (some #(datom-match? patterns %) datoms)))\n\n(defn matching-datoms [patterns datoms]\n  (case patterns\n    [] datoms\n    [[]] datoms\n    nil nil\n    (filter #(datom-match? patterns %) datoms)))\n\n(defn combine-entids [entids rest-datom patterns new-patterns leftover-patterns]\n  (if (empty? patterns)\n    {:new-patterns (cons (vec (cons entids rest-datom)) new-patterns)\n     :leftover-patterns leftover-patterns}\n    (if (= rest-datom (rest (first patterns)))\n      (recur (cs/union entids (if (set? (ffirst patterns))\n                                (ffirst patterns)\n                                (set [(ffirst patterns)])))\n             rest-datom\n             (rest patterns)\n             new-patterns\n             leftover-patterns)\n      (recur entids rest-datom (rest patterns) new-patterns\n             (cons (first patterns) leftover-patterns)))))\n\n(defn reduce-patterns [patterns]\n  (loop [new-patterns []\n         leftover-patterns patterns]\n    (if (empty? leftover-patterns)\n      new-patterns\n      (if (let [id (ffirst leftover-patterns)]\n            (or (set? id) (number? id)))\n        (let [r (combine-entids #{} (rest (first leftover-patterns))\n                                leftover-patterns\n                                new-patterns\n                                [])]\n          (recur (:new-patterns r) (:leftover-patterns r)))\n        (recur (cons (first leftover-patterns) new-patterns) (rest leftover-patterns))))))\n\n(comment\n  (datom-match? '[#{123 88 32} :jimmy _] '[123 :jimmy \"hey\"])\n\n  (datom-match-patterns? '[[88 :deandog]\n                           [#{123 88 32} :jimmy _]] '[123 :jimmy \"hey\"])\n\n  (any-datoms-match? '[[88 :deandog]\n                       [#{123 88 32} :jimmy _]]\n                     '[[28882 :major \"billy\"] [123 :jimmy \"hey\"]])\n\n  \n  )\n"]}