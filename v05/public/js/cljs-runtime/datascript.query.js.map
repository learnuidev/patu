{"version":3,"sources":["datascript/query.cljc"],"mappings":";;;;;;;;;;;;;AAqBA,AAAA,AAAaA;AAEb,AAAA;AAAA;AAAA,AAIA,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAWoE;;AAAX,AAAA,AAAArE,AAAA;AAAA,AAAA,AAAAA,AAAAC,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAWiE;;AAAX,AAAA,AAAAnE,AAAA;AAAA,AAAA,AAAAG,AAAAF;AAAAE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAAE;;;AAAA;AAAAC;;;AAAA;AAAAC;;;;AAAA,AAAAC,AAAAC,AAAAR,AAAAC;;;;;AAAA,AAAA,AAAA,AAAA,AAAAQ,AAAAC,AAAAC,AAAWuD;;AAAX,AAAA,AAAAzD,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAC,AAAAF,AAAA,AAAA;AAAAG,AAAA,AAAAD,AAAAF,AAAA,AAAA;AAAA,AAAA,AAAAL,AAAAA,AAAAG,AAAAG,AAAAE,AAAAR,AAAAG,AAAAG,AAAAE;AAAAP,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAU,AAAAC,AAAAC,AAAW6C;;AAAX,AAAA,AAAA/C,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAE;;AAAA,AAAA,AAAAC,AAAAJ,AAAAE,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAI,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAAmB,AAAWuC;;AAAX,AAAA,AAAAvC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAqB,AAAArB,AAAA,AAAAsB;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWmC;;AAAX,AAAA,AAAAnC,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWiC;;AAAX,AAAA,AAAAjC,AAAA;AAAA,AAAA,AAAA7B,AAAAC,AAAAC,AAAA0B,AAAAxB,AAAA0B,AAAWgC;;;AAAX,AAAA,AAAA,AAAA,AAAA/B,AAAW+B;;AAAX,AAAA,AAAA/B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA5B;;;AAAA,AAAA,AAAA,AAAA,AAAA6B,AAAW6B;;AAAX,AAAA,AAAA7B,AAAA;AAAA,AAAA,AAAAC,AAAAJ;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAAF;AAAA,AAAA,AAAAH,AAAAI;;AAAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAWwB;;AAAX,AAAA,AAAAzB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAWqB;;AAAX,AAAA,AAAAtB,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAL,AAAAZ,AAAAa;;AAAA,AAAAzC,AAAAC,AAAAC,AAAA0B,AAAA,AAAAkB,AAAA,AAAAH,AAAAvC,AAAAqC,AAAA,AAAWqB;;;;AAAX,AAAA,AAAA,AAAA,AAAAf,AAAAC,AAAAzB,AAAWuC;;AAAX,AAAA,AAAAf,AAAA;AAAA,AAAA,AAAAE,AAAAC;AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAAC,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAA5B,AAAAtB,AAAAC,AAAA0B,AAAAxB,AAAA,AAAW0D;;AAAX,AAAA,AAAAb,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAAnD,AAAAuB,AAAArB,AAAA0B,AAAAxB,AAAA,AAAW0D;;AAAX,AAAA,AAAAb,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAAnD,AAAAC,AAAAsB,AAAAK,AAAAxB,AAAA,AAAW0D;;AAAX,AAAA9D,AAAAC,AAAAC,AAAA0B,AAAA,AAAAwB,AAAAhD,AAAA4C,AAAAzB,AAAA,AAAWuC;;;;;;AAAX,AAAA,AAAA,AAAA,AAAAT,AAAWS;;AAAX,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA,AAAA,AAAAkC,AAAA,AAAAvD,AAAA,AAAA,AAAAuD,AAAA,AAAAtD,AAAA,AAAA,AAAAsD,AAAA,AAAArD,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAAoD,AAAAjC,AAAWuC;;AAAX,AAAA,AAAAN,AAAA;AAAA,AAAA,AAAAxD,AAAAC,AAAAC,AAAAqB,AAAAnB,AAAA0B,AAAWgC;;;AAAX,AAAA,AAAA,AAAA,AAAAL,AAAAC,AAAWI;;AAAX,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAAD;AAAA,AAAAD,AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;;AAAA,AAAAlD,AAAAqD,AAAAJ,AAAAC;;;;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAF,AAAA,AAAAC,AAAAE;AAAA,AAAA,AAAAC,AAAAD,AAAA;;;AAAA;;;AAAA,AAAWM,AAASvE,AAAKC,AAAQC;AAAjC,AAAA,AAAA4D,AAAA,AAAA,AAAA,AAAoB9D,AAAKC,AAAQC;;;AAAjC;;;AAAA,AAAAiE,AAAWK;AAAX,AAAA,AAAAJ,AAAA,AAAAC,AAAA,AAAA1B,AAAAwB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAG,AAAAH;AAAA,AAAAtB,AAAA,AAAAwB;;AAAAA;;;AAAA,AAAA,AAAAP,AAAA,AAAA,AAAAK,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAAsB,AAAA;;;AAAAN,AAOA,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAArE,AAAAC,AAAW0F;;AAAX,AAAA,AAAA3F,AAAA;AAAA,AAAA,AAAAA,AAAAC,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA8E,AAAA5E,AAAWuF;;AAAX,AAAA,AAAAzF,AAAA;AAAA,AAAA,AAAA+E,AAAAD;AAAAC,AAAA,AAAA,AAAAA,AAAA3E,AAAA,AAAA2E,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAAC;;;AAAA;AAAAC;;;;AAAA,AAAAzE,AAAAC,AAAAqE,AAAA5E;;;;;AAAA,AAAA,AAAA,AAAA,AAAAQ,AAAAC,AAAAC,AAAW6E;;AAAX,AAAA,AAAA/E,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC,AAAAoE;AAAA,AAAA,AAAAC,AAAAD;AAAAjE,AAAA,AAAAC,AAAAiE,AAAA,AAAA;AAAAhE,AAAA,AAAAD,AAAAiE,AAAA,AAAA;AAAA,AAAA,AAAAxE,AAAAA,AAAAG,AAAAG,AAAAE,AAAAR,AAAAG,AAAAG,AAAAE;AAAAP,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAU,AAAAC,AAAAC,AAAWmE;;AAAX,AAAA,AAAArE,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAE;;AAAA,AAAA,AAAAC,AAAAJ,AAAAE,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAI,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAqD,AAAA,AAAA,AAAArD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAsD,AAAA,AAAAxE;;;AAAA,AAAA,AAAA,AAAA,AAAA2E,AAAWK;;AAAX,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAvD,AAAA,AAAAuD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA3E,AAAA,AAAAqB,AAAArB,AAAA,AAAAsB;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWyD;;AAAX,AAAA,AAAAzD,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWuD;;AAAX,AAAA,AAAAvD,AAAA;AAAA,AAAA,AAAA8C,AAAAC,AAAAhD,AAAAxB,AAAA0B,AAAWsD;;;AAAX,AAAA,AAAA,AAAA,AAAArD,AAAWqD;;AAAX,AAAA,AAAArD,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA5B;;;AAAA,AAAA,AAAA,AAAA,AAAA6B,AAAWmD;;AAAX,AAAA,AAAAnD,AAAA;AAAA,AAAA,AAAAC,AAAAJ;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAAF;AAAA,AAAA,AAAAH,AAAAI;;AAAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAA8C,AAAAC,AAAWG;;AAAX,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAC,AAAA,AAAA1C,AAAA,AAAAyC,AAAA,AAAAC,AAAA,AAAA1C,AAAA,AAAAyC,AAAA,AAAAC,AAAA,AAAA1C,AAAA,AAAAyC,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAzC,AAAAC,AAAW2C;;AAAX,AAAA,AAAA5C,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAL,AAAAZ,AAAAa;;AAAA,AAAAkC,AAAAC,AAAAhD,AAAA,AAAAkB,AAAA,AAAAH,AAAAvC,AAAAqC,AAAA,AAAW2C;;;;AAAX,AAAA,AAAA,AAAA,AAAArC,AAAAC,AAAA+B,AAAWK;;AAAX,AAAA,AAAArC,AAAA;AAAA,AAAA,AAAAmC,AAAAhC;AAAAiC,AAAAnC;AAAA,AAAA,AAAA,AAAAkC,AAAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAC;AAAA,AAAAJ,AAAAH,AAAAhD,AAAAxB,AAAA,AAAWgF;;AAAX,AAAA,AAAAF,AAAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAC;AAAA,AAAAR,AAAAI,AAAAnD,AAAAxB,AAAA,AAAWgF;;AAAX,AAAAT,AAAAC,AAAAhD,AAAA,AAAAwB,AAAAhD,AAAA4C,AAAA+B,AAAA,AAAWK;;;;;AAAX,AAAA,AAAA,AAAA,AAAA/B,AAAW+B;;AAAX,AAAA,AAAA/B,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA,AAAA,AAAAkC,AAAA,AAAAoB,AAAA,AAAA,AAAApB,AAAA,AAAAqB,AAAA,AAAAxE;;;AAAA,AAAA,AAAA,AAAA,AAAAoD,AAAAuB,AAAWK;;AAAX,AAAA,AAAA5B,AAAA;AAAA,AAAA,AAAAmB,AAAAC,AAAAG,AAAA3E,AAAA0B,AAAWsD;;;AAAX,AAAA,AAAA,AAAA,AAAA3B,AAAAC,AAAW0B;;AAAX,AAAA,AAAA3B,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAAD;AAAA,AAAAD,AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;;AAAA,AAAAlD,AAAAqD,AAAAJ,AAAAC;;;;AAAA,AAAA,AAAA0B,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAArB;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAoB,AAAA,AAAArB,AAAAE;AAAA,AAAA,AAAAC,AAAAD,AAAA;;;AAAA;;;AAAA,AAAWsB,AAAUZ,AAAMC;AAA3B,AAAA,AAAAQ,AAAA,AAAA,AAAA,AAAqBT,AAAMC;;;AAA3B;;;AAAA,AAAAS,AAAWG;AAAX,AAAA,AAAApB,AAAA,AAAAkB,AAAA,AAAA3C,AAAA0C,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAf,AAAAe;AAAA,AAAAxC,AAAA,AAAAyC;;AAAAA;;;AAAA,AAAA,AAAAF,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvC,AAAAsB,AAAA;;;AAAAgB,AAKA,AAAA,AAAMK,AAAQC;AAAd,AACE,AAAQ,AAAA,AAAM,AAACE,AAAKF;AAApB;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAACE,AAAMH;;AAET,AAAA,AAAMI,AAAgBC,AAAOC;AAA7B,AACE,AAACC,AAAiB,AAACC,AAAI,AAACC,AAAKJ,AACX,AAACG,AAAI,AAACC,AAAKH;;AAE/B,AAAA,AAAA,AAAAI,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAAWG;AAAjB,AACE,AAAA,AAAChE,AAAQiE,AAAID;;;AADf,AAAA,AAAA,AAAMH;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAtD,AAAAqD;;;AAAA,AAGA,AAAA,AAAA,AAAAP,AAAMY;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAX,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAW,AAAA,AAAA,AAAAV;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAW,AAAA,AAAAT,AAAA,AAAAQ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE;;;;;AAAA,AAAA,AAAA,AAAMF,AACFO,AAAEC;AADN,AACS,AAACC,AAAKC,AAAOH,AAAEC;;;AADxB,AAAA,AAAA,AAAA,AAAMR,AAEFO,AAAEC,AAAIG;AAFV,AAEgB,AAACC,AAAMC,AAAKH,AAAOH,AAAEC,AAAEG;;;AAFvC;AAAA,AAAA,AAAA,AAAAR,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAvB,AAAAsB;AAAAA,AAAA,AAAAvB,AAAAuB;AAAAE,AAAA,AAAAxB,AAAAsB;AAAAA,AAAA,AAAAvB,AAAAuB;AAAA,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAAA,AAAAF,AAAAC,AAAAF;;;AAAA,AAAA,AAAA,AAAMH;;AAAN,AAIA,AAAA,AAAMc,AAAYP,AAAEC;AAApB,AACE,AAAK,AAACjF,AAAE,AAACP,AAAMuF,AAAG,AAACvF,AAAMwF,AACpB,AAAA,AAAAO,AAACC;AAAD,AAAS,AAAAD,AAACrF,AAAU8E;AAAK,AAACrB,AAAKoB,AAC/B,AAAA,AAAAU,AAACD;AAAD,AAAS,AAAAC,AAACvF,AAAU8E;AAAK,AAACrB,AAAKoB;;AAEtC,AAAA,AAAOW,AAAaC,AAAQC;AAA5B,AACE,AACE,AAAA,AAAA,AAAC7F,AAAK4F;AADR;;AAAA,AAGE,AAAA,AAAA,AAAC5F,AAAO4F;AACN,AAACE,AAAYD;;AAJjB,AAKE,AAAAE,AAASH;AACP,AAAC5F,AAAE6F,AAAKD;;AANZ,AAOE,AAACE,AAAYF;AACX,AAAI,AAAA,AAAA,AAAC5F,AAAE,AAACgG,AAAKJ;AACX,AAAK,AAACE,AAAYD,AACb,AAACJ,AAAO,AAAAQ;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA3H,AAAA4H,AAAA,AAAA,AAAMC;AAAN,AAAA7H,AAAA4H,AAAA,AAAA,AAAiBE;AAAjB,AAA2B,AAACT,AAAAA,AAAAA,AAAYQ,AAAAA,AAAWC,AAAAA;AACnD,AAACC,AAAIlB,AAAO,AAACmB,AAAQV,AAASC;;AAC3C,AAAK,AAACC,AAAYD,AACb,AAAC7F,AAAE,AAACP,AAAMoG,AAAM,AAACpG,AAAMmG,AACvB,AAACH,AAAO,AAAAc;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAjI,AAAAkI,AAAA,AAAA,AAAML;AAAN,AAAA7H,AAAAkI,AAAA,AAAA,AAAiBJ;AAAjB,AAA2B,AAACT,AAAAA,AAAAA,AAAYQ,AAAAA,AAAWC,AAAAA;AACnD,AAACC,AAAIlB,AAAOS,AAAQC;;;AAfvC,AAiBI,AAACD,AAAAA,AAAAA,AAAQC,AAAAA;;;;;;;AAEf,AAAA,AAAMY,AAASC;AAAf,AACE,AAAK,AAAAX,AAASW,AACT,AAAA,AAAC1G,AAAK,AAACsD,AAAM,AAACqD,AAAKD;;AAE1B,AAAA,AAAME,AAAWF;AAAjB,AACE,AAAK,AAAAX,AAASW,AACT,AAAA,AAAC1G,AAAK,AAACsD,AAAM,AAACqD,AAAKD;;AAE1B,AAAA,AAAMG,AAAOhB;AAAb,AACE,AAAI,AAAArI,AAAUqI,AAAM,AAASA;;AAE/B,AAAA,AAAMiB,AAAajB;AAAnB,AACE,AAAA,AAAA,AAAA,AAACF,AAAakB,AAAUhB;;AAI1B,AAAA,AAAMkB,AAAaC,AAAYC,AAEZC,AAAYC;AAF/B,AAIE,AAAMC,AAAI,AAASH;AACbI,AAAI,AAASF;AACbG,AAAI,AAACC,AAAc,AAAGH,AAAGC;AAF/B,AAGE,AAAAG,AAAYJ;AAAZ,AAAA,AAAA,AAAUK;;AAAV,AAAA,AAAA,AAAAD,AAAUC;AAAV,AACE,AAAMH,AAAIG,AAAE,AAA4BT,AAAG,AAAMC,AAAMQ;;AADzD,AAAA,AAAA,AAAUA;;;;AAAV;;;;AAEA,AAAAD,AAAYH;AAAZ,AAAA,AAAA,AAAUI;;AAAV,AAAA,AAAA,AAAAD,AAAUC;AAAV,AACE,AAAMH,AAAI,AAAGF,AAAGK,AAAG,AAA4BP,AAAG,AAAMC,AAAMM;;AADhE,AAAA,AAAA,AAAUA;;;;AAAV;;;;AAEAH;;AAEJ,AAAA,AAAMI,AAAS1C,AAAEC;AAAjB,AACE,AAAA0C,AAAyC3C;AAAzC2C,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAtC,AAAAwC,AAAAF,AAAAA;AAAA,AAAA/J,AAAA+J,AAAA,AAAOI;AAAP,AAAAnK,AAAA+J,AAAA,AAAuBK;AAAvBF,AACyC7C;AADzC6C,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAzC,AAAAwC,AAAAC,AAAAA;AAAA,AAAAlK,AAAAkK,AAAA,AACOG;AADP,AAAArK,AAAAkK,AAAA,AACuBI;AADvB,AAEE,AACE,AAAClI,AAAE+H,AAAQE;AACX,AAAApF,AAAA,AAAA,AAAA,AAAWkF,AAAQ,AAACzH,AAAK,AAAC6H,AAAIH,AAAUE;;AAF1C,AAIE,AAAK,AAAC3C,AAAWwC,AAAQE;AACzB,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAoDN,AAAgBE;;AALtE,AAQE,AAACxC,AAAO6C,AAAQ,AAACC,AAAKR;AACtB,AAAMS,AAAW,AAACL,AAAI,AAAAM,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAA7H,AAAA2H;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAAI,AA60EuB,AAAA4B,AAAAhC;AA70EvBK,AAAA,AAAAtJ,AAAAqJ;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAAI,AAAA,AAAA9H,AAAAyH,AAAAI;AAAA,AAAA5K,AAAA6K,AAAA,AAAA,AAAOzC;AAAP,AAAApI,AAAA6K,AAAA,AAAA,AAAWS;AAAX,AAAA,AAAA,AAAAR,AAAAJ,AAAA,AACGY,AAAM,AAAC7B,AAAAA,AAAAA,AAAQrB,AAAAA;;AADlB,AAAA,AAAAwC,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAd;;AAAA,AAAAW,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAAS,AAAA,AAAAnG,AAAAoF;AAAA,AAAApK,AAAAmL,AAAA,AAAA,AAAO/C;AAAP,AAAApI,AAAAmL,AAAA,AAAA,AAAWG;AAAX,AAAA,AAAAF,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAAjB,AACGkB,AAAM,AAAC7B,AAAAA,AAAAA,AAAQrB,AAAAA;;;AADlB;;;;AAAA,AAAA;;AAAA,AAAA,AAAA+B,AAAkBR;;AAElC4B,AAAa,AAACtB,AAAKR,AAAS,AAAC9J,AAAO6L,AAAK,AAAA;AACzCC,AAAQ,AAACC,AACC,AAAC/L,AACC,AAAKgM,AAAIC;AAAT,AACE,AAAMC,AAAO,AAAC5C,AAAcsC;AAA5B,AACE,AAAAO,AAAA,AAAArJ,AAAsByH;AAAtB6B,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAAjM,AAAAkM,AAAA,AAAA,AAASZ;AAAT,AAAAtL,AAAAkM,AAAA,AAAA,AAAeI;AAAf,AAAA,AACE,AAAMT,AAAOS,AAAM,AAA4BV,AAAQN;;AADzD;AAAA,AAAAQ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA3B,AAAA,AAAA7H,AAAAqJ;AAAA,AAAA,AAAAxB;AAAA,AAAA,AAAAwB,AAAAxB;AAAA,AAAA,AAAA,AAAAC,AAAAuB;AAAA,AAAAK,AAAA,AAAAC,AAAAN;AAAA,AAAA,AAAA,AAAAZ,AAAAY;AAAAK;AAAA,AAAAhL,AAAAgL;AAAA;;;;;;;AAAA,AAAAE,AAAA,AAAArH,AAAA8G;AAAA,AAAA9L,AAAAqM,AAAA,AAAA,AAASf;AAAT,AAAAtL,AAAAqM,AAAA,AAAA,AAAeC;AAAf,AAAA,AACE,AAAMT,AAAOS,AAAM,AAA4BV,AAAQN;;AADzD;AAAA,AAAA,AAAAvG,AAAA+G;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAEA,AAACS,AAAMZ,AAAIE;AACf,AAACW,AAAU,AAAC3C,AAAIH,AAChBE;AAXlB,AAYE,AAAArF,AAAA,AAAA,AAAA,AAAWkF,AAAQgC;;AArBvB,AAwBE,AAAMgB,AAAU,AAACC,AAAO,AAACpH,AAAK,AAACqH,AAAMlD,AAAQE,AAAU,AAACiD;AAAxD,AACM,AAAArI,AAAA,AAAA,AAAA,AAAA,AAAWkI,AACX,AAAAI,AACA,AAAAE;AADAD,AAASpG;AAAT,AAAA,AAAAmG,AAAAC,AAAAD,AAAAC,AAAC1D,AAAAA,AAAAA;;AACD4D,AAASrG;AAAT,AAAA,AAAAoG,AAAAC,AAAAD,AAAAC,AAAC5D,AAAAA,AAAAA;;;;;;AAEb,AAAA,AAAA,AAAA7D,AAAM2H;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAApI,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMoI;AAAN,AACM,AAAA3I,AAAA,AAAA,AAAA,AAAA,AAAA,AAAe,AAAA,AAAC0E;;;AADtB,AAAA,AAAA,AAAMiE,AAEFC,AAAKC;AAFT,AAGI,AAAMlI,AAAO,AAACI,AAAK,AAAA,AAAQ6H;AACrBhI,AAAO,AAACG,AAAK,AAAA,AAAQ8H;AACrBzE,AAAO,AAAC0E,AAAS,AAACtF,AAAI,AAAA,AAAQoF,AAAMjI;AACpC2D,AAAO,AAACwE,AAAS,AAACtF,AAAI,AAAA,AAAQqF,AAAMjI;AAH1C,AAIE,AAAAZ,AACE,AAACmI,AAAO,AAAClM,AAAO0E,AAAOC,AAAQ,AAACyH,AAChC,AAAClB,AACC,AAAC/L,AACC,AAAKgM,AAAIjD;AAAT,AACE,AAAC/I,AAAO,AAAKgM,AAAI/C;AAAT,AACE,AAAC2D,AAAMZ,AAAI,AAAClD,AAAYC,AAAGC,AAAMC,AAAGC;AACtC8C,AAAI,AAAA,AAASyB;AAP7B,AAAA,AAAA,AAQM,AAAA,AAACZ,AAAc,AAAA,AAASW;;;AAfpC,AAAA,AAAA,AAAMD;;AAAN,AAoBA,AAAA,AAAA,AAAA3H,AAAO+H;AAAP,AAAA,AAAA9H,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8H,AAAA3H;;;AAAA,AAAA,AAAA,AAAA,AAAO2H,AAAYtH;AAAnB,AACE,AAAMwH,AAAE,AAACrM,AAAM6E;AAAf,AACE,AAACyH,AAAK,AAACC,AAAK,AAAA,AAAGF,AAAKxH,AAAI,AAAC2H,AAAK,AAAA,AAAGH,AAAKxH;;;AAF1C,AAAA,AAAA,AAAOsH;;AAAP;AAAA,AAAA,AAAA,AAAAC,AAAOD;AAAP,AAAA,AAAAvH,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAtD,AAAA8K;;;AAAA,AAIA,AAAA,AAAOK,AACJC,AAAGC,AAAEpH,AAAEqH;AADV,AAEE,AAAM,AAAA,AAAMA;AAAZ,AACE,AAAA,AAAAjE,AAAA,AAAA,AAAA,AAAA;;AADF;;AAEA,AAAAkE,AAAgB,AAAChJ,AAAM,AAAA,AAACkJ,AAAWL,AAAIC,AAAEpH;AAAzC,AAAA,AAAA,AAAAsH,AAAA;AAEED;;AAFF,AAAAC,AAAUC;AAAV,AACE,AAAA,AAAIA;;;AAGR,AAAA,AAAA,AAAA1I,AAAO4I;AAAP,AAAA,AAAA3I,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2I,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAxI;;;AAAA,AAAA,AAAA,AAAA,AAAOwI,AACJN,AAAGC,AAAIS;AADV,AAEE,AAAC5O,AACA,AAAK6O,AAAE9H;AAAP,AACE,AAAA+H,AAAkB,AAACzJ,AAAM,AAAA,AAACkJ,AAAWL,AAAIC,AAAEpH;AAA3C,AAAA,AAAA,AAAA+H,AAAA;AAAA;;AAAA,AAAAA,AAAYR;AAAZ,AACE,AAAA,AAACS,AAAS,AAAA,AAAIT,AAAO,AAAA,AAAIA;;AAH9B,AAKCM;;;AAPH,AAAA,AAAA,AAAOJ;;AAAP;AAAA,AAAA,AAAA,AAAAC,AAAOD;AAAP,AAAA,AAAAE,AAAA,AAAArJ,AAAAoJ;AAAAA,AAAA,AAAArJ,AAAAqJ;AAAAE,AAAA,AAAAtJ,AAAAoJ;AAAAA,AAAA,AAAArJ,AAAAqJ;AAAA,AAAA,AAAA3H,AAAA;AAAA,AAAA,AAAAA,AAAA4H,AAAAC,AAAAF;;;AAAA,AASA,AAAA,AAAOO,AACJd,AAAGC,AAAEpH;AADR,AAEE,AAAA,AAAM,AAACpH,AAAI,AAACsP,AAAUf,AAAGC,AAAGpH;;AAE9B,AAAA,AAAA,AAAAnB,AAAOsJ;AAAP,AAAA,AAAArJ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqJ,AAAAlJ;;;AAAA,AAAA,AAAA,AAAA,AAAOkJ,AAAUE;AAAjB,AACE,AAACpP,AAAO,AAAK+G,AAAEC;AAAP,AACE,AAAIA;AAAEA;;AAAE,AAAC+H,AAAQ/H;;AAD3B,AACqCoI;;;AAFvC,AAAA,AAAA,AAAOF;;AAAP;AAAA,AAAA,AAAA,AAAAC,AAAOD;AAAP,AAAA,AAAA9I,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAtD,AAAAqM;;;AAAA,AAIA,AAAA,AAAA,AAAAvJ,AAAOyJ;AAAP,AAAA,AAAAxJ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwJ,AAAArJ;;;AAAA,AAAA,AAAA,AAAA,AAAOqJ,AAASD;AAAhB,AACE,AAACpP,AAAO,AAAK+G,AAAEC;AAAP,AACE,AAAIA;AAAE,AAAC+H,AAAQ/H;;AAAGA;;AAD5B,AACoCoI;;;AAFtC,AAAA,AAAA,AAAOC;;AAAP;AAAA,AAAA,AAAA,AAAAC,AAAOD;AAAP,AAAA,AAAAjJ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAtD,AAAAwtEC,AAAeC,AAAWC,AAAUC,AAAUC,AAAUC,AAAU1E,AAAU2E,AACxEC,AAAaC,AAAYC,AAAaC,AAAaC,AAAeC,AACnEC,AAAgBC,AACfC,AAAeC,AAAcC,AAAaC,AAAYC,AAAUnC,AAAYG,AACvEiC,AAAwBC,AAC1BC,AAAgBC,AAAY/I,AAAiBgJ,AAAiBC,AAChEzK,AAAc0K,AAAWlM,AAAekE,AAAqBiI,AAC9DrQ,AAAcsQ,AAAkBxP,AAAmByP,AAAmB7P,AACxE8P,AAAaC,AAAmBC,AAAwBC,AAAsBC,AAAeC,AACzFC,AAAqBC,AAAoBC,AAAoBC,AAC5D9E,AAAoBM,AAAqBO,AAAqBQ,AAAmBwC,AACpEkB,AAAsCC,AAChCC,AAA6CC;AAG5E,AAAKC,AACJ,AAAA,AAAc5N;AAAd,AAAoB,AAAA,AAAClF,AAAOgQ,AAAI9K;;AAAhC,AACcA;AADd,AACoB,AAAG,AAAC6N,AAAI7N,AAAM,AAAC1D,AAAM0D;;AADzC,AAGWA;AAHX,AAIU,AAAM8N,AAAM,AAACC,AAAK/N;AACZgO,AAAK,AAAC1R,AAAM0D;AACZiO,AAAI,AAAA,AAAiBD;AAF3B,AAGE,AAAAE,AAAQ,AAAC/S,AAAI2S,AAAMG;AAAnB,AAAA,AACE,AAACvC,AAAMsC;AACH,AAAAE,AAAG,AAAC/S,AAAI2S,AAAM,AAAA,AAAKG,AACnB,AAAA;;AAHNC;;;AAPZ,AAYWlO;AAZX,AAaU,AAAMmO,AAAK,AAACC,AAAIpO;AACV6N,AAAK,AAACA,AAAI,AAAAvI,AAAA,AAAA+I;AAAA,AAAA,AAAA7I,AAAA,AAAA;AAAA,AAAA,AAAA6I,AAAAA;;AAAA,AAAA,AAAA5I,AAAA,AAAA7H,AAAAyQ;AAAA,AAAA,AAAA5I;AAAA,AAAA,AAAA4I,AAAA5I;AAAA,AAAA,AAAA,AAAAC,AAAA2I;AAAA,AAAA1I,AAouEwB,AAAA4B,AAAA8G;AApuExBzI,AAAA,AAAAtJ,AAAAqJ;AAAA2I,AAAA,AAAAxI,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA2I,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA3I;AAAA,AAAA,AAAA1H,AAAAyH,AAAA4I,AAAME;AAAN,AAAA,AACYC,AAAM,AAAGD,AAAEN;AADvB,AAAA,AAAA,AAAAlI,AAAAqI,AAEE,AAAGI,AAAMA;;AAFX,AAAA,AAAAH,AAAA;;;;AAAA;;;;;AAAA,AAAArI,AAAA,AAAAC,AAAAmI,AAAA,AAAAE,AAAA,AAAAnI,AAAAgI;;AAAA,AAAAnI,AAAA,AAAAC,AAAAmI,AAAA;;;AAAA,AAAA,AAAAnO,AAAAkO,AAAMI;AAAN,AAAA,AACYC,AAAM,AAAGD,AAAEN;AADvB,AAAA,AAAA5H,AAAA,AAAAiI,AAAA,AAAAhI,AAAA6H,AAEE,AAAGK,AAAMA;;;AAFX;;;;AAAA,AAAA;;AAAA,AAAA,AAAApJ,AAAQtF;;AADxB,AAIE,AAAG6N,AAAI,AAACvR,AAAM0D;;AAjB1B,AAmBWA;AAnBX,AAoBU,AAAU2O,AAA6B,AAACC,AAAS5O;;AApB3D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAsBa6O,AACAD,AAGA,AA8BAf,AAMAvR;;AAnCI0D;AADJ,AACU,AAAClF,AAAO,AAAKgM,AAAI2H;AAAT,AACE,AAAI,AAAA,AAAM,AAAC7C,AAAQ6C,AAAE3H;AACnB2H;;AAAE3H;;AACN,AAAC3G,AAAMH,AAAM,AAACE,AAAKF;;AACjC+O,AAAE/O;AALN,AAMI,AAACgF,AACC,AAAClK,AAAO,AAAKgM,AAAI2H;AAAT,AACE,AACE,AAAG,AAACnS,AAAMwK,AAAKiI;AACb,AAAChB,AAAKnC,AAAQ,AAACoD,AAAKlI,AAAI2H;;AAF5B,AAGE,AAAA,AAAM,AAAC7C,AAAQ6C,AAAE,AAAC5L,AAAKiE;AACrB,AAACiH,AAAKnC,AAAQ,AAACoD,AAAK,AAAC7L,AAAQ2D,AAAK2H;;AAJtC,AAKQ3H;;;;AANlB,AAOW9G;;AATb+O,AAAE/O;;;AAAF+O;;AAAAA,AAAE/O;;;;;;;;AAUN;;AACIA;AADJ,AACU,AAAClF,AAAO,AAAKgM,AAAI2H;AAAT,AACE,AAAI,AAAA,AAAM,AAAC7C,AAAQ6C,AAAE3H;AACnB2H;;AAAE3H;;AACN,AAAC3G,AAAMH,AAAM,AAACE,AAAKF;;AACjC+O,AAAE/O;AALN,AAMI,AAACgF,AACC,AAAClK,AAAO,AAAKgM,AAAI2H;AAAT,AACE,AACE,AAAG,AAACnS,AAAMwK,AAAKiI;AACb,AAAChB,AAAKnC,AAAQ,AAACoD,AAAKlI,AAAI2H;;AAF5B,AAGE,AAAA,AAAM,AAAC7C,AAAQ6C,AAAE,AAACtO,AAAM2G;AACtB,AAACiH,AAAKnC,AAAQ,AAACoD,AAAK,AAAC9O,AAAK4G,AAAK2H;;AAJnC,AAKQ3H;;;;AANlB,AAOW9G;;AATb+O,AAAE/O;;;AAAF+O;;AAAAA,AAAE/O;;;;;;;;AAiBA,AAAKA;AAAL,AAAW,AAAC1D,AAAM,AAAC8S,AAASpP;AA1ClCoO,AAGAU,AACAtO,AAgCA;;AACIR;AADJ,AACU,AAACiP,AAASjP;;AAChB+O,AAAE/O;AAFN,AAEY,AAACgF,AAAI,AAAA,AAACkK,AAAWH;AAAZ,AAAe,AAACE,AAASjP;;;AAAtC+O,AAAE/O;;;AAAF+O;;AAAAA,AAAE/O;;;;;;;;AACN,AAAK+O,AAAE/O;AAAP,AACE,AAACgF,AAAI,AAAC6D,AAAKkG,AAAE,AAACI,AAAQnP;;;AAOtC,AAAA,AAAMqP,AAAa7U;AAAnB,AACE,AAAMA,AAAM,AAAI,AAASA,AAAO,AAAC8U,AAAgB9U,AAAOA;AAAxD,AACE,AAAC+U,AAASC,AAAOhV;;AAErB,AAAA,AAAMiV,AAAWC;AAAjB,AACE,AAAMC,AAAU,AAACC,AAAyBF,AAC7B,AAAA,AAACxM;AADd,AAEE,AAAAxD,AAAA,AAAA,AAAA,AAAA,AAAW,AAACmI,AAAO8H,AAAK,AAAC5H;;AAE7B,AAAA;AAAA;;;AAAA,AAAaqI;;AAAb,AAAAP,AAAA,AACYH,AAAQW;AADpB,AAAA,AAAAP,AAAA,AAAA,AAAA,AAAA,AACYJ,AAAAA;AADZK,AAAA,AAAAC,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACYL,AAAAA,AAAQW,AAAAA;;AADpB,AAAAH,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACYR,AAAAA,AAAQW,AAAAA;;AADpB,AAAA,AAAAF,AAAA,AACYT;;;;AADZ,AAAA,AAAA,AACGM,AAASN,AAAQW;AADpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACYX,AAAAA;AADZ,AACYA,AAAAA,AAAQW;;AADpB,AAAAR,AACYH,AAAQW;;;;AADpB,AAGA,AAAA,AAAA,AAAA,AAAA,AAAA5L,AACE6L;;AADF,AAAA,AAAA,AACEA,AACA,AAAU3G,AAAEA;AAAZ,AAAA,AAAA,AAAUA;AAAV,AACE,AAAC4G;;;AAHL,AAAA,AAAA,AAAA,AAAA9L,AAKE+L;;AALF,AAAA,AAAA,AAKEA,AACA,AAAUd,AAAQW;AAAlB,AAAA,AAAA,AAAUX;AAAV,AACE,AAAAhQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAY,AAAA,AAAA,AAAA,AAAC+Q,AAAOf,AAAiC,AAAA,AAACgB,AAAYL;;;AAPtE,AAAA,AAAA,AAAA,AAAA5L,AASEkM;;AATF,AAAA,AAAA,AASEA,AACA,AAAUjB,AAAQ1P;AAAlB,AAAA,AAAA,AAAU0P;AAAV,AACE,AACE,AAAK,AAACkB,AAAY5Q;AAChB,AAAA,AAAAiF,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA4BlF,AAAuB,AAAC6Q,AAAUnB,AACxB1P,AAAe,AAAC6Q,AAAUnB;;AAHpE,AAIE,AAAC7C,AAAO7M;AACN,AAACyP,AAAUC;;AALf,AAQM,AAAA,AAAAoB,AAAC5N,AACD,AAACpI,AAAOyJ;AADR,AAAM,AAAAuM,AAACd,AAAQ,AAAUN;AADtB1P;;;;;;AAlBb,AAAA,AAAA,AAAA,AAAAyE,AAsBEsM;;AAtBF,AAAA,AAAA,AAsBEA,AACA,AAAUrB,AAAQ1P;AAAlB,AAAA,AAAA,AAAU0P;AAAV,AACE,AACE,AAAK,AAACkB,AAAY5Q;AAChB,AAAA,AAAAiF,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA4BlF,AAAkB,AAAC6Q,AAAUnB,AACnB1P,AAAe,AAAC6Q,AAAUnB;;AAHpE,AAIE,AAAG,AAACpT,AAAM0D,AAAM,AAAC1D,AAAM,AAAWoT;AAChC,AAAA,AAAAzK,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA8ClF,AAAuB,AAAC6Q,AAAUnB,AAC1C1P,AAAe,AAAC6Q,AAAUnB;;AANpE,AAQI,AAAC5U,AAAOuN,AACN,AAAA,AAAA2I,AAAAC,AAAC/N;AAAD,AAAM,AAAA8N,AAAAC,AAACjB;AAAe,AAAWN,AAAS1P;;;;;AAEpD,AAAA,AAAAkR,AAAME,AAAYC;AAAlB,AAAA,AAAAF,AAAAD;AAAA,AAAA/V,AAAAgW,AAAA,AAAA,AAA2BzB;AAA3B,AAAAvU,AAAAgW,AAAA,AAAA,AAAmCd;AAAnC,AACE,AACE,AAAK,AAAWG,AAAWd,AACtB,AAAW4B,AAAO,AAAW5B;AAChC,AAAA,AAAC6B,AAAOF,AAAiBG,AAAM,AAAA,AAAA,AAAA,AAACf,AAAOf,AAA6BW;;AAHxE,AAIE,AAAK,AAAWG,AAAWd,AACtB,AAAW+B,AAAS,AAAW/B;AAClC,AAAA,AAAChS,AAAM2T,AAAe,AAAChC,AAAYgB;;AANvC,AAQI,AAAA,AAACkB,AAAOF,AAAcK,AAAK,AAAC1B,AAAQN,AAAQW;;;;;AAElD,AAAA,AAAMsB,AAAaN,AAAQO,AAASC;AAApC,AACE,AAAC/W,AAAOsW,AAAWC,AAAQ,AAACxJ,AAAO+J,AAASC;;AAI9C;;;AAAA,AAEEC;AAEF;;;AAAA,AAEEC;AAEF,AAAA,AAAMC,AAAW/S,AAAMgT;AAAvB,AACE,AAAMC,AAAI,AAACjT,AAAAA,AAAAA,AAAMgT,AAAAA;AAAjB,AACE,AAAI,AAACjV,AAAU8U,AAAeG;AAC5B,AAAKE;AAAL,AACE,AAAMC,AAAI,AAA4BD,AAAMD;AAA5C,AACE,AACE,AAASE;AAASA;;AADpB,AAEE,AAACzP,AAAYyP;AAAK,AAACC,AAASN,AAAkBK;;AAFhD,AAGE,AAACE,AAAUF;AAAO,AAACC,AAASN,AAAkBK;;AAHhD,AAIoBA;;;;;;;AACxB,AAAKD;AAAL,AACE,AAA4BA,AAAMD;;;;AAE1C,AAAA,AAAMK,AAAcC;AAApB,AACE,AAAI,AAAA,AAAI,AAAClW,AAAMkW;AACb,AAACrS,AAAMqS;;AACP,AAAMA,AAAQ,AAAChK,AAASgK;AAAxB,AACE,AAAKL;AAAL,AACE,AAACM,AAAe,AAAA,AAAAC,AAAMF;AAAN,AAAe,AAAAE,AAAAA,AAAAA,AAAGP,AAAAA;;;;;AAG1C,AAAA,AAAMQ,AAAYC,AAAO1T;AAAzB,AACE,AAAOA,AAAWA;AACX2T,AAAW,AAAA,AAAClL;;AADnB,AAEE,AAAAwB,AAAgB,AAAChJ,AAAMjB;AAAvB,AAAA,AAAA,AAAAiK,AAAA;AAIE,AAACtC,AAAYgM;;AAJf,AAAA1J,AAAUgJ;AAAV,AACE,AAAMW,AAAI,AAACF,AAAAA,AAAAA,AAAOT,AAAAA;AAAlB,AACE,AAAO,AAACjS,AAAKhB;AACN,AAAC6T,AAAOF,AAAWC,AAAI,AAAC9D,AAAK,AAAA,AAAA,AAACvU,AAAIoY,AAAWC,AAASX;;;;;;;;AAGrE,AAAA,AAAMa,AAAW1K,AAAKC;AAAtB,AACE,AAAM0K,AAAc,AAAA,AAAS3K;AACvB4K,AAAc,AAAA,AAAS3K;AACvBlI,AAAc,AAAA,AAAQiI;AACtBhI,AAAc,AAAA,AAAQiI;AACtB4K,AAAc,AAACnO,AAAI,AAAC5E,AAAe,AAAA,AAAQkI,AAAM,AAAA,AAAQC;AACzD6K,AAAc,AAAA,AAAAC,AAACnQ;AAAD,AAAM,AAAAmQ,AAACrB,AAAU3R;AAAU8S;AACzCG,AAAc,AAAA,AAAAC,AAACrQ;AAAD,AAAM,AAAAqQ,AAACvB,AAAU1R;AAAU6S;AACzCK,AAAc,AAAC/S,AAAKJ;AACpBoT,AAAc,AAACzO,AAAI,AAAC0O,AAAe,AAAClT,AAAI,AAACC,AAAKH,AAAS,AAACE,AAAI,AAACC,AAAKJ;AAClEsT,AAAc,AAACnL,AAAS,AAACtF,AAAI7C,AAAOmT;AACpCI,AAAc,AAACpL,AAAS,AAACtF,AAAI5C,AAAOmT;AACpCI,AAAc,AAACtB,AAAaa;AAC5BU,AAAc,AAACnB,AAAWkB,AAAQZ;AAClCc,AAAc,AAACxB,AAAae;AAC5BU,AACgB,AAAClZ,AAAO,AAAKgM,AAAImN,AAQjB,AAACpN;AARO,AACE,AAAMiM,AAAI,AAACiB,AAAAA,AAAAA,AAAQE,AAAAA;AAAnB,AACE,AAAA9K,AAAkB,AAAC1O,AAAIqZ,AAAKhB;AAA5B,AAAA,AAAA,AAAA3J,AAAA;AAIErC;;AAJF,AAAAqC,AAAU8J;AAAV,AACE,AAACnY,AAAO,AAAKgM,AAAIoN;AAAT,AACE,AAACxM,AAAMZ,AAAI,AAAClD,AAAYsQ,AAAOP,AAAWM,AAAOL;AACnD9M,AAAImM;;AAExB,AAAA,AAACtL,AAAcuL;AAtBvC,AAwBE,AAAAxT,AAAA,AAAA,AAAA,AAAW,AAACmI,AAAO,AAAClM,AAAO6X,AAAYC,AAAa,AAAC1L,AAC1CiM;;AAEf,AAAA,AAAMG,AAActS,AAAEC;AAAtB,AACE,AAAAsS,AAAyCvS;AAAzCuS,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3P,AAAA,AAAA2P,AAAA,AAAA,AAAA,AAAA,AAAAlS,AAAAwC,AAAA0P,AAAAA;AAAA,AAAA3Z,AAAA2Z,AAAA,AAAOxP;AAAP,AAAAnK,AAAA2Z,AAAA,AAAuBvP;AAAvBwP,AACyCvS;AADzCuS,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5P,AAAA,AAAA4P,AAAA,AAAA,AAAA,AAAA,AAAAnS,AAAAwC,AAAA2P,AAAAA;AAAA,AAAA5Z,AAAA4Z,AAAA,AACOvP;AADP,AAAArK,AAAA4Z,AAAA,AACuBtP;AACjB9F,AAAU,AAACmB,AAAewE,AAAQE;AAClCwP,AAAU,AAAA,AAAAC,AAACrR;AAAD,AAAM,AAAAqR,AAACvC,AAAUlN;AAAW7F;AACtCuV,AAAU,AAACjC,AAAa+B;AACxBR,AAAU,AAACnB,AAAW6B,AAASzP;AAC/B0P,AAAU,AAAA,AAAAC,AAACxR;AAAD,AAAM,AAAAwR,AAAC1C,AAAUpN;AAAW3F;AACtC0V,AAAU,AAACpC,AAAakC;AAP9B,AAQE,AAAA,AAAC/W,AAAMmE,AACG,AAAA,AAAA+S,AAACC;AAAD,AAAU,AAAM,AAAAC,AAAM,AAAAF,AAAAA,AAACD,AAAAA,AAAAA;AAAP,AAAA,AAAAG,AAAAA,AAAChB,AAAAA,AAAAA;AAAP;AAA2BjP;;AAEnD,AAAA,AAAMkQ,AAAmB/L,AAAGvG;AAA5B,AAEE,AAAMuS,AAAe,AAAA,AAAAC,AAAClT;AAAD,AAAO,AAAI,AAAAkT,AAAArS;AAAJ;;AAAAqS;;AAAuBxS;AAC7CyS,AAAe,AAAC7L,AAAWL,AAAGgM;AAC9BG,AACoB,AAACC,AAAO,AAAAC,AACR,AAAA,AAAClY;AADO,AAAA,AAAAmY,AAAAD;AAAA,AAAAla,AAAAma,AAAA,AAAA,AAAMC;AAAN,AAAApa,AAAAma,AAAA,AAAA,AAAQ3L;AAAR,AAAY,AAAClG,AAAU8R;AAD/B,AAAA,AAAA,AAAA,AAAA,AAAA,AAACrS,AAAIlB,AAAOS;AAFtC,AAKE,AAAA/C,AAAA,AAAA,AAAA,AAAWyV,AAAWD;;AAE1B,AAAA,AAAMM,AAAkB/S,AAAQ0P;AAAhC,AACE,AAAOA,AAAQA;AACR1P,AAAQA;;AADf,AAEE,AAAI,AAAAgT,AAAKtD;AAAL,AAAA,AAAAsD;AAAWhT;;AAAXgT;;;AACF,AAAMC,AAAE,AAACvV,AAAMgS;AACTwD,AAAE,AAACxV,AAAMsC;AADf,AAEE,AAAI,AAAI,AAAAG,AAAS+S,AAAG,AAAC9Y,AAAE6Y,AAAEC;AACvB,AAAO,AAACzV,AAAKiS;AAAO,AAACjS,AAAKuC;;;;;AAD5B;;;AAHJ;;;;;AAQJ,AAAA,AAAMmT,AAAqB5V,AAAKyC;AAAhC,AACE,AAAMoT,AAAW,AAAA,AAAAC,AAACV;AAAD,AAAS,AAAAU,AAACN,AAAiB/S;AAAWzC;AACjD+V,AACgB,AAACX,AAAO,AAAAY,AACR,AAAA,AAAC7Y;AADO,AAAA,AAAA8Y,AAAAD;AAAA,AAAA7a,AAAA8a,AAAA,AAAA,AAAMV;AAAN,AAAApa,AAAA8a,AAAA,AAAA,AAAQtM;AAAR,AAAY,AAAClG,AAAU8R;AAD/B,AAACrS,AAAIlB,AAAOS,AAAQ,AAACsF;AAD3C,AAIE,AAAArI,AAAA,AAAA,AAAA,AAAWqW,AAAU,AAAChU,AAAKyG,AAASqN;;AAExC,AAAA,AAAMK,AAA0BC;AAAhC,AACE,AAAI,AAAC7S,AAAQ,AAACnD,AAAMgW;AAClBA;;AACA,AAAA,AAAA,AAAA,AAACxa,AAAYwa;;;AAEjB,AAAA,AAAMC,AAAgBC,AAAO5T;AAA7B,AACE,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA6R,AAAA,AAAA,AAAAA,AAAYC,AAAAA,AAAWF,AAAAA,AAAAA,AAAAA,AAAAA;AACrB,AAACtB,AAAkBsB,AAAO5T;;AAF9B,AAII,AAACmT,AAAoBS,AAAO5T;;;;AAElC,AAAA,AAAM+T,AAAelc,AAAKmc;AAA1B,AACE,AAAOnc,AAAQA;AACRmc,AAAQA;AADf,AAEO3P;;AAFP,AAGE,AAAAqC,AAAc,AAAChJ,AAAM7F;AAArB,AAAA,AAAA,AAAA6O,AAAA;AAIE,AAAC6F,AAAKlI,AAAI2P;;AAJZ,AAAAtN,AAAUuN;AAAV,AACE,AAAI,AAACtZ,AAAU,AAACgD,AAAe,AAAA,AAAQqW,AAAS,AAAA,AAAQC;AACtD,AAAO,AAACxW,AAAK5F;AAAM,AAAC0Y,AAAU0D,AAAID;AAAS3P;;;;;;AAC3C,AAAO,AAAC5G,AAAK5F;AAAMmc;AAAQ,AAACzH,AAAKlI,AAAI4P;;;;;;;;;;AAG7C,AAAA,AAAOC,AAAetF,AAAQ9N;AAA9B,AACE,AAAA,AAAAqT,AAACC;AAAD,AAAO,AAAM,AAAC7Z,AAAU,AAAA,AAAA4Z,AAAWrT;AAA5B,AAAAqT;;AAAA;;AAAoC,AAAA,AAAOvF;;AAEpD,AAAA,AAAOyF,AAAqBzF,AAAQ9N;AAApC,AACE,AAAAqG,AAAgB,AAAC+M,AAActF,AAAQ9N;AAAvC,AAAA,AAAA,AAAAqG,AAAA;AAAA;;AAAA,AAAAA,AAAY8M;AAAZ,AACE,AAAA9M,AAAkB,AAACzJ,AAAM,AAAA,AAASuW;AAAlC,AAAA,AAAA,AAAA9M,AAAA;AAAA;;AAAA,AAAAA,AAAYuI;AAAZ,AACE,AAA4BA,AAAM,AAAA4E,AAAC,AAAA,AAAQL;AAAT,AAAA,AAAAK,AAAAA,AAAAA,AAAcxT,AAAAA;;;;;AAEtD,AAAA,AAAOyT,AAAqBN,AAAIzX;AAAhC,AACE,AAAA,AAAAgY,AAACJ;AAAD,AAAO,AAAAI,AAACja,AAAU,AAAA,AAAQ0Z;AAAQzX;;AAEpC,AAAA,AAAOiY,AAAmB7F,AAAQpS;AAAlC,AACE,AAAM3E,AAAW,AAAA,AAAA6c,AAAC/B;AAAD,AAAS,AAAA+B,AAACH,AAAsB/X;AAAO,AAAA,AAAOoS;AACzD+F,AAAW,AAACtc,AAAOuN,AAAS/N;AADlC,AAAA,AAEG,AAAA,AAAA,AAAA+c,AAAC9F,AAAOF;AAAR,AAAuB,AAAAgG,AAACC,AAAO,AAAC9W,AAAIlG;AAAU8c;;AAEnD,AAAA,AAAMG,AAAUlG,AAAQqF,AAAIc,AAAEtN;AAA9B,AACE,AAAM3P,AAAY,AAAA,AAAU8W;AACtBpS,AAAY,AAAA,AAAQyX;AACpBe,AAAY,AAACnb,AAAM4N;AACnBwN,AAAY,AAACtT,AAAcqT;AAC3BE,AAAY,AAACvT,AAAcqT;AAJjC,AAKE,AAAApT,AAAYoT;AAAZ,AAAA,AAAA,AAAUnT;;AAAV,AAAA,AAAA,AAAAD,AAAUC;AAAV,AACE,AAAMsT,AAAI,AAACzc,AAAI+O,AAAK5F;AAApB,AACE,AAAI,AAAA1B,AAASgV;AACX,AAAAzO,AAAiB,AAAC1O,AAAIF,AAAQqd;AAA9B,AAAA,AAAA,AAAAzO,AAAA;AAEE,AAASwO,AAAYrT,AAAE,AAAC7J,AAAIwE,AAAM2Y;;AAFpC,AAAAzO,AAAUkN;AAAV,AACE,AAASqB,AAAYpT,AAAE+R;;;AAEzB,AAASqB,AAAYpT,AAAEsT;;;AAN7B,AAAA,AAAA,AAAUtT;;;;AAAV;;;;AASA,AACa,AAAYkT,AAAExV;AACzB,AAAKmQ;AAAL,AAEE,AAAMjI,AAAK,AAAC2N,AAAUH;AAAtB,AACE,AAAArT,AAAYoT;AAAZ,AAAA,AAAA,AAAUnT;;AAAV,AAAA,AAAA,AAAAD,AAAUC;AAAV,AACE,AAAAsF,AAAsB,AAAM+N,AAAYrT;AAAxC,AAAA,AAAA,AAAAsF,AAAA;AAAA;AAAA,AAAAA,AAAYkO;AAAZ,AACE,AAAMC,AAAE,AAA4B5F,AAAM2F;AAA1C,AACE,AAAS5N,AAAK5F,AAAEyT;;;AAHtB,AAAA,AAAA,AAAUzT;;;;AAAV;;;;AAIA,AAACpC,AAAMsV,AAAEtN;;;AACb,AAAKiI;AAAL,AAEE,AAAA9N,AAAYoT;AAAZ,AAAA,AAAA,AAAUnT;;AAAV,AAAA,AAAA,AAAAD,AAAUC;AAAV,AACE,AAAAsF,AAAsB,AAAM+N,AAAYrT;AAAxC,AAAA,AAAA,AAAAsF,AAAA;AAAA;AAAA,AAAAA,AAAYkO;AAAZ,AACE,AAAMC,AAAE,AAA4B5F,AAAM2F;AAA1C,AACE,AAASJ,AAAYpT,AAAEyT;;;AAH7B,AAAA,AAAA,AAAUzT;;;;AAAV;;;;AAIA,AAACpC,AAAMsV,AAAEE;;;;AAEjB,AAAA,AAAOM,AAAazU;AAApB,AAAA;;AAKA,AAAA,AAAM0U,AAAgB5G,AAAQ8E;AAA9B,AACE,AAAA+B,AAAmB/B;AAAnBgC,AAAA,AAAAhd,AAAA+c,AAAA,AAAA;AAAAE,AAAA,AAAAxa,AAAAua;AAAAE,AAAA,AAAAlY,AAAAiY;AAAAA,AAAA,AAAAlY,AAAAkY;AAAAC,AAAQb;AAARY,AAAYlO;AACNqO,AAAa,AAAAC,AAAI,AAAC/d,AAAI6P,AAAUkN;AAAnB,AAAA,AAAAgB;AAAAA;;AAAA,AAAAA,AACI,AAAC1B,AAAoBzF,AAAQmG;AADjC,AAAA,AAAAgB;AAAAA;;AAAA,AAAAA,AAEI,AAACR,AAAYR;AAFjB,AAAA,AAAAgB;AAAAA;;AAGI,AAAM,AAAA,AAAM,AAAC7B,AAActF,AAAQmG;AAAnC,AACE,AAAA,AAAAvS,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA6BsS,AAASrB,AACHA,AAAaqB;;AAFlD;;;;;;AAJvBc,AAO2B,AAACpB,AAAkB7F,AAAQ,AAAC+D,AAAOqD,AAAQvO;AAPtE,AAAA/O,AAAAmd,AAAA,AAAA,AAOOjH;AAPP,AAAAlW,AAAAmd,AAAA,AAAA,AAOelB;AACTX,AAAa,AAAI8B,AACF,AAAMG,AAAW,AAACnB,AAASlG,AAAQ+F,AAAWmB,AAAKrO;AAAnD,AACE,AAAA,AAAA,AAAAyO,AAACpH,AAAO6F;AAAR,AAA4B,AAAAuB,AAACvD,AAAOsD;;AACtC,AAAA,AAAA,AAAChb,AAAM0Z;AAX5B,AAYE,AAAA,AAAC7F,AAAOF,AAAcK,AAAK+E;;AAE/B,AAAA,AAAMmC,AAAYvH,AAAQ8E;AAA1B,AACE,AAAA0C,AAAuB1C;AAAvB2C,AAAA,AAAA3d,AAAA0d,AAAA,AAAA;AAAAE,AAAA,AAAAnb,AAAAkb;AAAAE,AAAA,AAAA7Y,AAAA4Y;AAAAA,AAAA,AAAA7Y,AAAA6Y;AAAAC,AAAQxB;AAARuB,AAAY7O;AAAZ,AAAA/O,AAAA0d,AAAA,AAAA,AAAkBK;AACZxJ,AAAS,AAACyJ,AAAiBD;AAC3BE,AAAS,AAAAZ,AAAI,AAAC/d,AAAI6P,AAAUkN;AAAnB,AAAA,AAAAgB;AAAAA;;AAAA,AAAAA,AACI,AAAC1B,AAAoBzF,AAAQmG;AADjC,AAAA,AAAAgB;AAAAA;;AAAA,AAAAA,AAEI,AAACR,AAAYR;AAFjB,AAAA,AAAAgB;AAAAA;;AAGI,AAAM,AAAA,AAAM,AAAC7B,AAActF,AAAQmG;AAAnC,AACE,AAAA,AAAAvS,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA4BsS,AAASrB,AACFA,AAAaqB;;AAFlD;;;;;;AALnByB,AAQ2B,AAAC/B,AAAkB7F,AAAQ,AAAC+D,AAAOqD,AAAQvO;AARtE,AAAA/O,AAAA8d,AAAA,AAAA,AAQO5H;AARP,AAAAlW,AAAA8d,AAAA,AAAA,AAQe7B;AACTX,AAAS,AAAI2C,AACF,AAAMC,AAAS,AAAC9B,AAASlG,AAAQ+F,AAAWgC,AAAIlP;AAC3C5P,AAAS,AAAAgL,AAAA,AAAAgU;AAAA,AAAA,AAAA9T,AAAA,AAAA;AAAA,AAAA,AAAA8T,AAAAA;;AAAA,AAAA,AAAA7T,AAAA,AAAA7H,AAAA0b;AAAA,AAAA,AAAA7T;AAAA,AAAA,AAAA6T,AAAA7T;AAAA,AAAA,AAAA,AAAAC,AAAA4T;AAAA,AAAA3T,AA+5DkB,AAAA4B,AAAA+R;AA/5DlB1T,AAAA,AAAAtJ,AAAAqJ;AAAA4T,AAAA,AAAAzT,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA4T,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA5T;AAAA,AAAA,AAAA1H,AAAAyH,AAAA6T,AAAMrH;AAAN,AAAA,AACauH,AAAI,AAACL,AAASlH;AAD3B,AAAA,AAEY,AAAK,AAAA,AAAMuH;AAFvB,AAAA,AAAAzT,AAAAsT,AAGE,AAAChJ,AAAS,AAAA7Q,AAAA,AAAA,AAAA,AAAA,AAAW,AAAA,AAAQ0X,AAAajF,AAChC,AAACnC,AAAQN,AAAQgK;;AAJ7B,AAAA,AAAAF,AAAA;;;;AAAA,AAAA,AAAAA,AAAA;;;;;AAAA;;;;;AAAA,AAAAtT,AAAA,AAAAC,AAAAoT,AAAA,AAAAE,AAAA,AAAApT,AAAAiT;;AAAA,AAAApT,AAAA,AAAAC,AAAAoT,AAAA;;;AAAA,AAAA,AAAApZ,AAAAmZ,AAAMnH;AAAN,AAAA,AACauH,AAAI,AAACL,AAASlH;AAD3B,AAAA,AAEY,AAAK,AAAA,AAAMuH;AAFvB,AAAAnT,AAAA,AAAAkT,AAAA,AAAAjT,AAAA8S,AAGE,AAAC/I,AAAS,AAAA7Q,AAAA,AAAA,AAAA,AAAA,AAAW,AAAA,AAAQ0X,AAAajF,AAChC,AAACnC,AAAQN,AAAQgK;;AAJ7B,AAAA,AAAAlT,AAAA8S;;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAhU,AAAY,AAAA,AAAS8R;;AADnC,AAME,AAAI,AAACvK,AAAOvS;AACV,AAACiW,AAAS6G,AAAW,AAAC3H,AAAUC;;AAChC,AAAC5U,AAAOyJ,AAAQjK;;AACpB,AAACiW,AAAS,AAAA,AAAA,AAAC7S,AAAM0Z,AAAuB,AAAC3H,AAAUC;AAnBpE,AAoBE,AAAA,AAAC6B,AAAOF,AAAcmF,AAAcC;;AAIxC,AAAA,AAAMkD,AAAOtI,AAAQ8E;AAArB,AACE,AAAK,AAACxT,AAAYwT,AACb,AAACnZ,AAAU,AAAA,AAAQqU,AACR,AAAI,AAAC/N,AAAQ,AAACnD,AAAMgW,AAClB,AAACyD,AAAOzD,AACR,AAAChW,AAAMgW;;AAE3B,AAAK0D,AAAW,AAAA,AAACC;AAEjB,AAAA,AAAMC,AAAa5D,AAAO9E,AAAQ2I;AAAlC,AACE,AAAAC,AAAyB9D;AAAzB+D,AAAA,AAAAtc,AAAAqc;AAAAE,AAAA,AAAAha,AAAA+Z;AAAAA,AAAA,AAAAha,AAAAga;AAAAC,AAAOC;AAAPF,AAAcG;AACRC,AAAmB,AAACC,AAAMV,AAAWzO;AACrCoP,AAAmB,AAAC/f,AAAI,AAAA,AAAQ4W,AAAS+I;AAF/C,AAGE,AAAA9U,AAAA,AAAAmV;AAAA,AAAA,AAAAjV,AAAA,AAAA;AAAA,AAAA,AAAAiV,AAAAA;;AAAA,AAAA,AAAAhV,AAAA,AAAA7H,AAAA6c;AAAA,AAAA,AAAAhV;AAAA,AAAA,AAAAgV,AAAAhV;AAAA,AAAA,AAAA,AAAAC,AAAA+U;AAAA,AAAA9U,AAq4D+C,AAAA4B,AAAAkT;AAr4D/C7U,AAAA,AAAAtJ,AAAAqJ;AAAA+U,AAAA,AAAA5U,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA+U,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA/U;AAAA,AAAA,AAAA1H,AAAAyH,AAAAgV,AAAMc;AAAN,AAAA,AAAAb,AACwCa;AADxCZ,AAAA,AAAAjd,AAAAgd;AAAAE,AAAA,AAAA3a,AAAA0a;AAAAA,AAAA,AAAA3a,AAAA2a;AAAAE,AAAAD;AAAAE,AAAA,AAAApd,AAAAmd;AAAAE,AAAA,AAAA9a,AAAA6a;AAAAA,AAAA,AAAA9a,AAAA8a;AAAAC,AACctR;AADdqR,AACkBU;AADlBb,AAC+Bc;AACnBC,AAAa,AAAC/T,AAAO6T,AAAUrB;AAF3C,AAAA,AAAA,AAAApU,AAAAyU,AAGE,AAAA,AAACoB;AAADD;AAAA,AACE,AAAI,AAAAA,AAACpY;AACH,AAAAsY,AACE,AAAAF,AAAAA,AAACD,AAAAA,AAAAA;AADH,AAAA,AAAA,AAAAG,AAAA;AAEE,AAACC,AAAO,AAAA,AAAK,AAAAH,AAACrY,AAAmB8W;;AAFnCyB;;;AADFF;;;AAKAF;;AATJ,AAAA,AAAAhB,AAAA;;;;AAAA;;;;;AAAA,AAAAzU,AAAA,AAAAC,AAAAuU,AAAA,AAAAQ,AAAA,AAAA7U,AAAAoU;;AAAA,AAAAvU,AAAA,AAAAC,AAAAuU,AAAA;;;AAAA,AAAA,AAAAva,AAAAsa,AAAMgB;AAAN,AAAA,AAAAN,AACwCM;AADxCL,AAAA,AAAAxd,AAAAud;AAAAE,AAAA,AAAAlb,AAAAib;AAAAA,AAAA,AAAAlb,AAAAkb;AAAAE,AAAAD;AAAAE,AAAA,AAAA3d,AAAA0d;AAAAE,AAAA,AAAArb,AAAAob;AAAAA,AAAA,AAAArb,AAAAqb;AAAAC,AACc7R;AADd4R,AACkBG;AADlBN,AAC+BO;AACnBC,AAAa,AAAC/T,AAAO6T,AAAUrB;AAF3C,AAAA,AAAA9T,AAGE,AAAA,AAACuV;AAADD;AAAA,AACE,AAAI,AAAAA,AAACpY;AACH,AAAAsY,AACE,AAAAF,AAAAA,AAACD,AAAAA,AAAAA;AADH,AAAA,AAAA,AAAAG,AAAA;AAEE,AAACC,AAAO,AAAA,AAAK,AAAAH,AAACrY,AAAmB8W;;AAFnCyB;;;AADFF;;;AAJJ,AAAAX,AAAA,AAAA1U,AAAAiU,AASIkB;;;AATJ;;;;AAAA,AAAA;;AAAA,AAAA,AAAArW,AAAakV;;AAWjB,AAAA,AAAMyB,AAAc9a,AAAG+a;AAAvB,AACE,AAAMC,AACW,AAAC7E,AAAO,AAAA8E;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAjhB,AAAAkhB,AAAA,AAAA,AAAM5N;AAAN,AAAAtT,AAAAkhB,AAAA,AAAA,AAAQC;AAAR,AAAY,AAACzf,AAAE4R,AAAE6N;AADzB,AAACpZ,AAAIlB,AAAOb,AAAG+a;AAAhC,AAAA,AAEG,AAAChZ,AAAI/C,AAAMgc,AACX,AAACjZ,AAAI0W,AAAOuC;;AAEjB,AAAA,AAAMI,AAAiBC,AAAYxC;AAAnC,AACE,AAAAyC,AAAyBD;AAAzBE,AAAA,AAAA9e,AAAA6e;AAAAE,AAAA,AAAAxc,AAAAuc;AAAAA,AAAA,AAAAxc,AAAAwc;AAAAC,AAAOvC;AAAPsC,AAAcrC;AACRuC,AAAmB,AAACniB,AAAIuf,AAAUI;AADxC,AAEE,AAAA9U,AAAA,AAAAuX;AAAA,AAAA,AAAArX,AAAA,AAAA;AAAA,AAAA,AAAAqX,AAAAA;;AAAA,AAAA,AAAApX,AAAA,AAAA7H,AAAAif;AAAA,AAAA,AAAApX;AAAA,AAAA,AAAAoX,AAAApX;AAAA,AAAA,AAAA,AAAAC,AAAAmX;AAAA,AAAAlX,AAi3D+C,AAAA4B,AAAAsV;AAj3D/CjX,AAAA,AAAAtJ,AAAAqJ;AAAAmX,AAAA,AAAAhX,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAmX,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAnX;AAAA,AAAA,AAAA1H,AAAAyH,AAAAoX,AAAMI;AAAN,AAAA,AAAAH,AACkC,AAACf,AAAa5B,AAAU8C;AAD1D,AAAAhiB,AAAA6hB,AAAA,AAAA,AACa3C;AADb,AAAAlf,AAAA6hB,AAAA,AAAA,AACuBG;AADvB,AAAA,AAAA,AAAAlX,AAAA6W,AAAA,AAEG,AAAA,AAAA,AAAA,AAACnhB,AAAmB0e,AAAU8C;;AAFjC,AAAA,AAAAJ,AAAA;;;;AAAA;;;;;AAAA,AAAA7W,AAAA,AAAAC,AAAA2W,AAAA,AAAAG,AAAA,AAAA5W,AAAAwW;;AAAA,AAAA3W,AAAA,AAAAC,AAAA2W,AAAA;;;AAAA,AAAA,AAAA3c,AAAA0c,AAAMM;AAAN,AAAA,AAAAD,AACkC,AAACjB,AAAa5B,AAAU8C;AAD1D,AAAAhiB,AAAA+hB,AAAA,AAAA,AACa7C;AADb,AAAAlf,AAAA+hB,AAAA,AAAA,AACuBC;AADvB,AAAA,AAAA5W,AAAA,AAAA,AAAA0W,AAAA,AAAAzW,AAAAqW,AAEG,AAAA,AAAA,AAAA,AAAClhB,AAAmB0e,AAAU8C;;;AAFjC;;;;AAAA,AAAA;;AAAA,AAAA,AAAA7X,AAAgBsX;;AAIpB,AAAA,AAAMQ,AAAc1a,AAAK6V;AAAzB,AACE,AAAMpU,AAAI,AAAA,AAAC2V;AAAX,AACE,AAAA,AAAAwD,AAACxB;AAAD,AAAgB,AAAI,AAAM,AAAAwB,AAAAA,AAAC/E,AAAAA,AAAAA;AAAP,AAAe,AAAA+E,AAAC/C,AAAMpW,AAAIuN;;AAA1B;;AAAJ4L;AAA0C5a;;AAD5D,AAAA2a,AAEGlZ;;AAEL,AAAA,AAAMoZ,AAAcpH;AAApB,AACE,AAAC3V,AAAI,AAAC4c,AAAajH,AAAO1S;;AAE5B,AAAA,AAAM+Z,AAAc7B,AAAQ8B;AAA5B,AACE,AAAMC,AAAW,AAACH,AAAa5B;AACzBpD,AAAW,AAAAoF;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAA1iB,AAAAyiB,AAAA,AAAA;AAAAE,AAAA,AAAAlgB,AAAAigB;AAAAE,AAAA,AAAA5d,AAAA2d;AAAAA,AAAA,AAAA5d,AAAA4d;AAAAC,AAAOpU;AAAPmU,AAAWnO;AAAX,AAAmB,AAACrN,AAAOob,AAAW/N;;AADvD,AAAA,AAEG,AAACyF,AAAOmD,AAAKkF,AACb,AAACnG,AAAOiB,AAAKkF;;AAElB,AAAA,AAAMO,AAAY3M,AAAQ8E;AAA1B,AACE,AAAM8H,AAAgB,AAAC7I,AAAO3R,AAAU0S;AAClC+H,AAAgB,AAACrW,AAAOoW,AAAY,AAAClW;AAErCoW,AAAgB,AAAKC,AAAezC;AAApB,AACE,AAAC7gB,AAAOujB,AAAgBD,AAAezC;;AACzD2C,AAAgB,AAAKjN;AAAL,AACE,AAAA,AAAAkN,AAAC1H;AAAD,AAAO,AAAChK,AAAO,AAAA,AAAA0R;AAAa,AAAA,AAAOlN;;AAN3D,AAOE,AAAOmN,AAAM,AAAAlgB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACuB+S,AACC8E;AAG9BO,AAAM,AAAAhX,AAAA,AAAA,AAAA,AAAA,AAAWwe;;AALxB,AAME,AAAA/U,AAAgB,AAAChJ,AAAMqe;AAAvB,AAAA,AAAA,AAAArV,AAAA;AAwCEuN;;AAxCF,AAAAvN,AAAUsV;AAAV,AACE,AAAAC,AAA6C,AAAA,AAACM;AAADD;AAAA,AAAa,AAAK,AAAAA,AAACpF,AAAMtI;;AAAY,AAAA,AAAUoN;AAA5F,AAAAtjB,AAAAujB,AAAA,AAAA,AAAO/C;AAAPgD,AAAA,AAAAxjB,AAAAujB,AAAA,AAAA;AAAAE,AAAA,AAAAhhB,AAAA+gB;AAAAE,AAAA,AAAA1e,AAAAye;AAAAA,AAAA,AAAA1e,AAAA0e;AAAAC,AAAgBrC;AAAhBoC,AAA8BE;AAA9B,AACE,AAAI,AAAA,AAAMtC;AAGR,AAAMnL,AAAQ,AAAC8M,AAAM,AAAA,AAAiBM,AAAO9C;AACvCzc,AAAQ,AAAC+f,AAAAA,AAAAA,AAAS5N,AAAAA,AAAQ4M,AAAAA;AAC1BxH,AAAQ,AAAA/W,AAAA,AAAA,AAAA,AAAWwe,AAAgBhf;AAFzC,AAGE,AAAO,AAACgB,AAAKse;AAAO,AAACja,AAAQmS,AAAID;;;;;AAGnC,AAAAyI,AAA6B1C;AAA7B2C,AAAA,AAAAvhB,AAAAshB;AAAAE,AAAA,AAAAjf,AAAAgf;AAAAA,AAAA,AAAAjf,AAAAif;AAAAC,AAAOhF;AAAP+E,AAAc9E;AACRoD,AAAuB,AAAClB,AAAgBC,AAAY,AAAA,AAAYiC;AADtEY,AAE6B,AAAC7B,AAAa,AAAC7hB,AAAO,AAAA,AAAiB8iB,AAAO9C,AAChC,AAAChgB,AAAO8hB,AAAO,AAAA,AAAiBgB;AAH3E,AAAAtjB,AAAAkkB,AAAA,AAAA,AAEOC;AAFP,AAAAnkB,AAAAkkB,AAAA,AAAA,AAEiBE;AAFjB,AAIE,AAAI,AAAA,AAAC1I;AAAD2I;AAAA,AAAO,AAAAA,AAAA,AAAA,AAAC3iB;;AAAmByiB;AAG7B,AAAO,AAACpf,AAAKse;AAAO9H;;;;;AAEpB,AAAM+I,AAAe,AAAC9jB,AAAOggB,AAAQ2D;AAC/BlB,AAAe,AAACD,AAAM,AAAA,AAAiBM,AAAOgB;AADpD,AAEE,AAAI,AAACnB,AAAYF;AAGf,AAAO,AAACle,AAAKse;AAAO9H;;;;;AAGpB,AAAMsD,AAAW,AAACtc,AAAM,AAAA,AAAY+gB,AAAOrE,AACxB,AAACpL,AAAK,AAAA,AAACvU,AAAI,AAAA,AAAYgkB,AAAOrE,AAASC;AACpDG,AAAW,AAACT,AAAYyC,AAAYnL,AAAQ2I;AAFlD,AAGE,AAAO,AAACre,AACC,AAAA2J,AAAA;AAAAoa;AAAA,AAAA,AAAAla,AAAA,AAAA;;AAAA,AAAA,AAAAka,AAAAA;;AAAA,AAAA,AAAAja,AAAA,AAAA7H,AAAA8hB;AAAA,AAAA,AAAAja;AAAA,AAAA,AAAAia,AAAAja;AAAA,AAAA,AAAA,AAAAC,AAAAga;AAAA,AAAA/Z,AAizDoB,AAAA4B,AAAAmY;AAjzDpB9Z,AAAA,AAAAtJ,AAAAqJ;AAAAga,AAAA,AAAA7Z,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAga,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAha;AAAA,AAAA,AAAA1H,AAAAyH,AAAAia,AAAMnE;AAAN,AAAA,AAAA,AAAAxV,AAAA0Z,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACmBF,AACArB,AACA,AAAC0B,AAAQrE,AAAOqD,AAChB9E,AACAuF;;AALnB,AAAA,AAAAK,AAAA;;;;AAAA;;;;;AAAA,AAAA1Z,AAAA,AAAAC,AAAAwZ,AAAA,AAAAE,AAAA,AAAAxZ,AAAAqZ;;AAAA,AAAAxZ,AAAA,AAAAC,AAAAwZ,AAAA;;;AAAA,AAAA,AAAAxf,AAAAuf,AAAMjE;AAAN,AAAA,AAAAlV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAsZ,AAAA,AAAArZ,AAAAkZ,AACmBD,AACArB,AACA,AAAC0B,AAAQrE,AAAOqD,AAChB9E,AACAuF;;;AALnB;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAja,AAAakV;AAMb,AAACta,AAAKse;AACR9H;;;;;;;;;;;AAG7B,AAAA,AAAMqJ,AAA6B1J,AAAO5T;AAA1C,AACE,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA6R,AAAA,AAAA,AAAAA,AAAY0J,AAAAA,AAAO3J,AAAAA,AAAAA,AAAAA,AAAAA;AACrB,AAAA4J,AAAiBxd;AAAjB,AAAAtH,AAAA8kB,AAAA,AAAA,AAAOhX;AAAP,AAAA9N,AAAA8kB,AAAA,AAAA,AAASpe;AAAT,AAAA1G,AAAA8kB,AAAA,AAAA,AAAWlI;AAAX,AAAA5c,AAAA8kB,AAAA,AAAA,AAAaC;AAAb,AAEK,AAAI,AAAA1H,AAAI,AAAC7U,AAAYsF,AAItB,AAAA,AAACoX;AAJI,AAAA,AAAA7H;AAAAA;;AAAoB,AAAC9U,AAAMuF;;AAAI,AAACkX,AAAgB9J,AAAOpN,AAAGA,AAC9DpH,AACA,AAAI,AAAA4T,AAAKsC;AAAL,AAAA,AAAAtC;AAAA,AAAO,AAAC/R,AAAM7B;AAAd,AAAiB,AAACue,AAAQ/J,AAAOxU;AAAG,AAAA2W,AAAI,AAAC7U,AAAYoU;AAAjB,AAAA,AAAAS;AAAAA;;AAAoB,AAAC9U,AAAMqU;;;AAA/D;;;AAAA;;;AAAAtC;;AAAoE,AAAC0K,AAAgB9J,AAAO0B,AAAGA,AACnG,AAAI,AAACpU,AAAYuc,AAAI,AAACC,AAAgB9J,AAAO6J,AAAIA,AAClD,AAAU,AAAC5jB,AAAMmG;;AACrBA;;;AAEJ,AAAA,AAAM6d,AAAsBjK,AAAO5T;AAAnC,AACE,AAAA8d,AAAiB9d;AAAjB,AAAAtH,AAAAolB,AAAA,AAAA,AAAOtX;AAAP,AAAA9N,AAAAolB,AAAA,AAAA,AAAS1e;AAAT,AAAA1G,AAAAolB,AAAA,AAAA,AAAWxI;AAAX,AAAA5c,AAAAolB,AAAA,AAAA,AAAaL;AAAb,AACE,AAAAM,AAAA;AAAAA,AAAA,AAAAA,AACE,AAAC/c,AAAUwF,AAAG,AAAAuX,AAACxR,AAAK/F;AADtBuX,AAAA,AAAAA,AAEE,AAAC/c,AAAUyc,AAAI,AAAAM,AAACxR,AAAKkR;AAFvB,AAAA,AAGE,AACE,AAACzc,AAAUsU,AACX,AAAK,AAACtU,AAAU5B,AAChB,AAACue,AAAQ/J,AAAOxU;AAAI,AAAA2e,AAACxR,AAAK+I;;AAN9ByI;;;AAQJ,AAAA,AAAMC,AAAW/J,AAAI/G;AAArB,AACE,AAAA/F,AAAmB,AAACxM,AAAU,AAACujB,AAAY,AAAA,AAAQjK,AAAK/G;AAAxD,AAAA,AAAA,AAAA/F,AAAA;AAAA;;AAAA,AAAAA,AAAY8W;AAAZ,AACE,AAAA,AAAChjB,AAAMgZ,AAAWgK;;;AAEtB,AAAA,AAAME,AAAevP,AAAQ1B;AAA7B,AACE,AAAA,AAACjS,AAAM2T,AAEM,AAAA,AAAAwP,AAACC;AAAD,AAAO,AAAAD,AAACJ,AAAY9Q;AADpB,AAAA,AAAO0B;;AAGtB,AAAA,AAAM0P,AAAY1P;AAAlB,AACE,AAAA,AAAClU,AAAS,AAAA,AAAA6jB,AAACC;AAAD,AAAS,AAACxgB,AAAK,AAAA,AAAAugB;AAAY,AAAA,AAAO3P;;AAE9C,AAAA,AAAM6P,AAAaC,AAAMxR,AAAKjN;AAA9B,AACE,AAAU,AAAC0e,AAAYzR,AAAKwR;AAA5B;;AAAA,AACE,AAAME,AAAQ,AAAC3N,AAAe,AAAClT,AAAImP,AAAMwR;AAAzC,AACE,AAAA,AAAAlc,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAiCmc,AAAyB3e,AAE3CA,AACA2e;;;AAErB,AAAA,AAAMC,AAAiBH,AAAM3G,AAAS9X;AAAtC,AACE,AAAM6e,AAAK,AAAA,AAAAC,AAACzf;AAAD,AAAO,AAAC2R,AAAe,AAAA8N,AAACjE,AAAgB4D;AAAO3G;AAA1D,AACE,AAAU,AAACtY,AAAMqI,AAAEgX;AAAnB;;AAAA,AACE,AAAA,AAAAtc,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkEqc,AAAY7e,AAE/DA,AACA6e;;;AAErB,AAAA,AAAME,AAAmBN,AAAMxR,AAAK6K;AAApC,AACE,AAAM+G,AAAK,AAAC/gB,AAAI,AAAC8W,AAAO6J,AAAMxR;AAA9B,AACE,AAAA+R,AAAA,AAAA9jB,AAAe4c;AAAfmH,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQpG;AAAR,AAAA,AACE,AAAA7R,AAAoB,AAACxM,AAAU,AAACsW,AAAe6N,AAAK,AAAChE,AAAa9B;AAAlE,AAAA,AAAA,AAAA7R,AAAA;AAAA;AAAA,AAAAA,AAAYyX;AAAZ,AACE,AAACS,AAAIrG,AAAO0F,AAAMxR,AAAK4R;;AACvB,AAAA,AAAAtc,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkEmc,AAAyB5F,AAEjFA,AACA4F;;;AANd;AAAA,AAAAK;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApc,AAAA,AAAA7H,AAAA8jB;AAAA,AAAA,AAAAjc;AAAA,AAAA,AAAAic,AAAAjc;AAAA,AAAA,AAAA,AAAAC,AAAAgc;AAAA,AAAApa,AAAA,AAAAC,AAAAma;AAAA,AAAA,AAAA,AAAArb,AAAAqb;AAAApa;AAAA,AAAAhL,AAAAgL;AAAA;;;;;;;AAAA,AAAA,AAAAnH,AAAAuhB,AAAQjG;AAAR,AAAA,AACE,AAAA7R,AAAoB,AAACxM,AAAU,AAACsW,AAAe6N,AAAK,AAAChE,AAAa9B;AAAlE,AAAA,AAAA,AAAA7R,AAAA;AAAA;AAAA,AAAAA,AAAYyX;AAAZ,AACE,AAACS,AAAIrG,AAAO0F,AAAMxR,AAAK4R;;AACvB,AAAA,AAAAtc,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkEmc,AAAyB5F,AAEjFA,AACA4F;;;AANd;AAAA,AAAA,AAAAnhB,AAAAwhB;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAQJ,AAAA,AAAA,AAAAhhB,AAAM2d;AAAN,AAAA,AAAA0D,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAA1D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAApe,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMoe,AACFhN,AAAQ8E;AADZ,AAEI,AAAC6L,AAAgB3Q,AAAQ8E,AAAOA;;;AAFpC,AAAA,AAAA,AAAMkI,AAGFhN,AAAQ8E,AAAO8L;;AAHnB,AAIG,AAAAC,AAAO1f;AAAP2f,AAAmBhM;AAAnB,AAAA,AAAA,AAAAiM,AAAA,AAAA,AAAA,AAAA,AACI3J;AADJ4J,AAAAF;AAAA,AAAA,AAAAD,AAAAA,AAAAE,AAAAC,AAAAH,AAAAE,AAAAC;;AAEE,AAACpK,AAAe5G,AAAQ8E;;AAF1B,AAAA,AAAAmM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAII7J;AAJJ8J,AAAAJ;AAAA,AAAA,AAAAD,AAAAA,AAAAI,AAAAC,AAAAL,AAAAI,AAAAC;;AAKE,AAAC3J,AAAWvH,AAAQ8E;;AALtB,AAAA,AAAAqM,AAAA,AAAA,AAAA,AAOGlf;AAPHmf,AAAAN;AAAA,AAAA,AAAAD,AAAAA,AAAAM,AAAAC,AAAAP,AAAAM,AAAAC;;AAQE,AAAAe,AAA0BrN;AAA1BsN,AAAA,AAAA7lB,AAAA4lB;AAAAE,AAAA,AAAAvjB,AAAAsjB;AAAAA,AAAA,AAAAvjB,AAAAujB;AAAAC,AAAOC;AAAPF,AAAoBxhB;AAApB,AACE,AAAA2hB,AAAU7R;AAAV8R,AAA4B,AAACppB,AAAI,AAAA,AAAU4W,AAASsS;AAApD,AAAA,AAAAE,AAAU9R;;AAAV,AAAA,AACE,AAACiQ,AAAgB3Q,AAAQpP,AAAKkU;AADhC,AAAA,AAAAyN,AAAU7R;;AATd,AAAA,AAAA2Q,AAAA,AAAA;AAAAC,AAAAR;AAAA,AAAA,AAAAD,AAAAA,AAAAQ,AAAAC,AAAAT,AAAAQ,AAAAC;;AAaE,AAAAmB,AAAqB3N;AAArB4N,AAAA,AAAAnmB,AAAAkmB;AAAAE,AAAA,AAAA7jB,AAAA4jB;AAAAA,AAAA,AAAA7jB,AAAA6jB;AAAAC,AAAOra;AAAPoa,AAAWvJ;AACL7Q,AAAS,AAAC2X,AAAgB,AAACP,AAAW1P,AAASmJ,AAASrE;AACxD8N,AAAS,AAAA,AAAC/gB;AAADghB;AAAA,AAAM,AAAAA,AAAAA,AAACC,AAAAA,AAAAA,AAAe9S,AAAAA;;AAAWmJ;AAC1ClgB,AAAS,AAAA,AAAC4I;AAADkhB;AAAA,AAAM,AAACtpB,AAAOkY,AAAU,AAAA,AAAAoR;;AAAWH;AAHlD,AAIE,AAAA,AAAA,AAACvmB,AAAM,AAACyC,AAAM8jB,AAAiB,AAACnpB,AAAOyJ,AAAQjK;;AAjBnD,AAAA,AAAAsoB,AAAA,AAAA;AAAAC,AAAAV;AAAA,AAAA,AAAAD,AAAAA,AAAAU,AAAAC,AAAAX,AAAAU,AAAAC;;AAoBE,AAAAwB,AAAuClO;AAAvCmO,AAAA,AAAA1mB,AAAAymB;AAAAE,AAAA,AAAApkB,AAAAmkB;AAAAA,AAAA,AAAApkB,AAAAokB;AAAAC,AAAO5a;AAAP4a,AAAA,AAAApkB,AAAAmkB;AAAAA,AAAA,AAAApkB,AAAAokB;AAAAE,AAAAD;AAAAE,AAAA,AAAA7mB,AAAA4mB;AAAAE,AAAA,AAAAvkB,AAAAskB;AAAAA,AAAA,AAAAvkB,AAAAukB;AAAAC,AAAUC;AAAVF,AAAqB9U;AAArB2U,AAA6B9J;AACvB2G,AAAM,AAACJ,AAAW1P;AADxB,AAEE,AAAC6P,AAAYC,AAAMwD,AAAS1C;;AAC5B,AAACR,AAAkBN,AAAMxR,AAAK6K;;AAC9B,AAAOnJ;AAAQ,AAAA,AAAA,AAACoB,AAAe,AAAC9W,AAAOgpB,AAAShV,AAAM6K;AAAUrE;;;;;;AAxBpE,AAAA,AAAA2M,AAAA,AAAA;AAAAC,AAAAZ;AAAA,AAAA,AAAAD,AAAAA,AAAAY,AAAAC,AAAAb,AAAAY,AAAAC;;AA2BE,AAAA6B,AAA0BzO;AAA1B0O,AAAA,AAAAjnB,AAAAgnB;AAAAE,AAAA,AAAA3kB,AAAA0kB;AAAAA,AAAA,AAAA3kB,AAAA2kB;AAAAC,AAAOnb;AAAPmb,AAAA,AAAA3kB,AAAA0kB;AAAAA,AAAA,AAAA3kB,AAAA2kB;AAAAC,AAASnV;AAATkV,AAAgBrK;AACV7K,AAAa,AAACnP,AAAImP;AAClBhG,AAAa,AAAC8X,AAAkB,AAACV,AAAW1P,AAAS1B,AAAK6K;AAC1DuK,AAAa,AAACnE,AAAcvP,AAAQ1B;AACpCsU,AAAa,AAAA,AAAC/gB;AAAD8hB;AAAA,AAAUD,AAAAA,AAAa,AAAAC,AAAAA,AAACb,AAAAA,AAAAA,AAAkB,AAACvD,AAAcjR;;AAAO6K;AAC7ElgB,AAAa,AAAA,AAAC4I;AAAD+hB;AAAA,AAAM,AAACnqB,AAAOkY,AAAU,AAAA,AAAAiS;;AAAWhB;AAChDiB,AAAa,AAACpqB,AAAOyJ,AAAQjK;AANnC,AAOE,AAAA,AAACiX,AAAOF,AAAcmF,AAAc0O;;AAlCxC,AAAA,AAAAlC,AAAA,AAAA;AAAAC,AAAAd;AAAA,AAAA,AAAAD,AAAAA,AAAAc,AAAAC,AAAAf,AAAAc,AAAAC;;AAqCE,AAAAkC,AAAoBhP;AAApBiP,AAAA,AAAAxnB,AAAAunB;AAAAE,AAAA,AAAAllB,AAAAilB;AAAAA,AAAA,AAAAllB,AAAAklB;AAAAC,AAAO1b;AAAPyb,AAAWzJ;AAAX,AACE,AAAC7gB,AAAOqpB,AAAe9S,AAAQsK;;AAtCnC,AAAA,AAAAuH,AAAA,AAAA;AAAAC,AAAAhB;AAAA,AAAA,AAAAD,AAAAA,AAAAgB,AAAAC,AAAAjB,AAAAgB,AAAAC;;AAyCE,AAAAmC,AAAoBnP;AAApBoP,AAAA,AAAA3nB,AAAA0nB;AAAAE,AAAA,AAAArlB,AAAAolB;AAAAA,AAAA,AAAArlB,AAAAqlB;AAAAC,AAAO7b;AAAP4b,AAAW5J;AACLwF,AAAiB,AAACJ,AAAW1P;AAC7BoU,AAAiB,AAAClI,AAAa5B;AAC/BhS,AAAiB,AAAA,AAAA,AAAM,AAACkD,AAAO,AAACtM,AAAiB4gB,AAAMsE,AACpC,AAAA,AAAAxgB,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAyCugB,AAA8BxD,AAE7DA;AAC7ByD,AAAiB,AAAA,AAAA,AAAChoB,AAAM2T,AAAe,AAACvW,AAAOkY,AAAU,AAAA,AAAO3B;AAChEsU,AAAiB,AAAC7qB,AAAOqpB,AAAeuB,AAAS/J;AACjDiK,AAAiB,AAACzR,AACC,AAACpU,AAAO,AAAA,AAAO2lB,AACf,AAAC5qB,AAAOkY,AAAU,AAAA,AAAO2S;AAXlD,AAYE,AAAA,AAAA,AAACjoB,AAAMgoB,AAAgBE;;AArD3B,AAAA,AAAAxC,AAAA,AAAA;AAAAC,AAAAlB;AAAA,AAAA,AAAAD,AAAAA,AAAAkB,AAAAC,AAAAnB,AAAAkB,AAAAC;;AAwDE,AAAAwC,AAAyB1P;AAAzB2P,AAAA,AAAAloB,AAAAioB;AAAAE,AAAA,AAAA5lB,AAAA2lB;AAAAA,AAAA,AAAA5lB,AAAA4lB;AAAAC,AAAOpc;AAAPoc,AAAA,AAAA5lB,AAAA2lB;AAAAA,AAAA,AAAA5lB,AAAA4lB;AAAAC,AAASpW;AAATmW,AAAgBnK;AACVwF,AAAiB,AAACJ,AAAW1P;AAC7B1H,AAAiB,AAACuX,AAAYC,AAAMxR,AAAKsS;AACzCyD,AAAiB,AAAA,AAAA,AAAChoB,AAAM2T,AAAe,AAACvW,AAAOkY,AAAU,AAAA,AAAO3B;AAChE0T,AAAiB,AAACnE,AAAc8E,AAAS/V;AACzCgW,AAAqB,AAAC7qB,AAAOqpB,AAAeY,AAAapJ,AACpC,AAACiF,AAAcjR;AACpCiW,AAAiB,AAACzR,AACC,AAACpU,AAAO,AAAA,AAAO2lB,AACf,AAAC5qB,AAAOkY,AAAU,AAAA,AAAO2S;AATlD,AAUE,AAAA,AAAA,AAACjoB,AAAMgoB,AAAgBE;;AAlE3B,AAAA,AAAAtC,AAAA,AAAA;AAAAC,AAAApB;AAAA,AAAA,AAAAD,AAAAA,AAAAoB,AAAAC,AAAArB,AAAAoB,AAAAC;;AAqEE,AAAMlN,AAAStE;AACTtP,AAAS,AAACsd,AAA4B1J,AAAOF;AAC7C6P,AAAS,AAAC5P,AAAeC,AAAO5T;AAFtC,AAGE,AAAAwjB,AAAUnU;AAAVoU,AAAyB,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAzhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA6R,AAAA,AAAA,AAAAA,AAAY0J,AAAAA,AAAO3J,AAAAA,AAAAA,AAAAA,AAAAA,AACrB,AAACiK,AAAqBjK,AAAO5T,AAC7BqP;AAF3B,AAAA,AAAAoU,AAAUpU;;AAAV,AAAA,AAGE,AAAA,AAACP,AAAOF,AAAcmF,AAAcwP;AAHtC,AAAA,AAAAC,AAAUnU;;AAxEd,AAAA,AAAA7R,AAAA,AAAA,AAAAkiB;;;;;;;;;;;;;;;AAJH,AAAA,AAAA,AAAM9D;;AAAN,AAiFA,AAAA,AAAM8F,AAAgB9S,AAAQ8E;AAA9B,AACE,AAAI,AAACwD,AAAMtI,AAAQ8E;AACjB,AAAI,AAAC7S,AAAQ,AAACnD,AAAMgW;AAClB,AAAAgQ,AAAUpU;AAAVqU,AAA4B,AAAC3rB,AAAI,AAAA,AAAU4W,AAAS,AAAClR,AAAMgW;AAA3D,AAAA,AAAAiQ,AAAUrU;;AAAV,AAAA,AACE,AAAAsU,AAAgBhV;AAAhBiV,AAAwB,AAACpmB,AAAKiW;AAA9B,AAAA,AAAAkQ,AAAAC,AAAAD,AAAAC,AAACnC,AAAAA,AAAAA;AADH,AAAA,AAAAgC,AAAUpU;;AAEV,AAAA,AAACR,AAAOF,AAAcmF,AAAc,AAACwH,AAAW3M,AAAQ8E;;;AAC1D,AAAC6L,AAAgB3Q,AAAQ8E;;;AAE7B,AAAA,AAAMoQ,AAAIlV,AAAQsK;AAAlB,AACE,AAAA6K,AAAUzU;AAAV0U,AAA4B,AAAA,AAAA,AAAChsB,AAAI,AAAA,AAAU4W;AAA3C,AAAA,AAAAoV,AAAU1U;;AAAV,AAAA,AACE,AAACjX,AAAOqpB,AAAe9S,AAAQsK;AADjC,AAAA,AAAA6K,AAAUzU;;AAGZ,AAAA,AAAA,AAAArR,AAAMue;AAAN,AAAA,AAAAyH,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAzH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAhf,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMgf,AACF5N,AAAQsV;AADZ,AAEI,AAAMrsB,AAAK,AAAA,AAAO+W;AAAlB,AACE,AAAA,AAACuV,AAAU,AAACxiB,AAAc,AAAC9H,AAAMqqB,AAAWrsB,AAAKqsB;;;AAHvD,AAAA,AAAA,AAAM1H,AAIFnY,AAAIxM,AAAKqsB;;AAJb,AAKI,AAAAxd,AAAc,AAAChJ,AAAM7F;AAArB,AAAA,AAAA,AAAA6O,AAAA;AAgBErC;;AAhBF,AAAAqC,AAAUuN;AAAV,AACE,AAAMmQ,AAAW,AAAClG,AAAY,AAAA,AAAQjK,AAAKiQ;AAA3C,AACE,AAAI,AAAC9Z,AAAOga;AACV,AAAO/f;AAAI,AAAC5G,AAAK5F;AAAMqsB;;;;;;AACvB,AAAMG,AAAS,AAACte,AAAS,AAAA,AAACtF;AAAD6jB;AAAA,AAAM,AAAAA,AAACtsB,AAAIosB;;AAAcF;AAC5ClP,AAAS,AAACnb,AAAMqqB;AADtB,AAEE,AAAO,AAAArhB,AAAA;AAAA0hB;AAAA,AAAA,AAAAxhB,AAAA,AAAA;;AAAA,AAAA,AAAAwhB,AAAAA;;AAAA,AAAA,AAAAvhB,AAAA,AAAA7H,AAAAopB;AAAA,AAAA,AAAAvhB;AAAA,AAAA,AAAAwhB,AAAAxhB;AAAA,AAAA,AAAA,AAAAtF,AAAA8mB,AAAepjB;AAAf,AAAA,AAAAqjB,AAAA;AAAAC;AAAA,AAAA,AAAA3hB,AAAA,AAAA;;AAAA,AAAA,AAAA2hB,AAAAA;;AAAA,AAAA,AAAA1hB,AAAA,AAAA7H,AAAAupB;AAAA,AAAA,AAAA1hB;AAAA,AAAA,AAAA0hB,AAAA1hB;AAAA,AAAA,AAAA,AAAAC,AAAAyhB;AAAA,AAAAxhB,AAooDgC,AAAA4B,AAAA4f;AApoDhCvhB,AAAA,AAAAtJ,AAAAqJ;AAAAyhB,AAAA,AAAAthB,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAyhB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzhB;AAAA,AAAA,AAAA1H,AAAAyH,AAAA0hB,AAEMtjB;AAFN,AAAA,AAAA,AAAAkC,AAAAmhB,AAGE,AAAMjjB,AAAI,AAACsjB,AAAO5jB;AAAlB,AACE,AAAAQ,AAAYoT;AAAZ,AAAA,AAAA,AAAUnT;;AAAV,AAAA,AAAA,AAAAD,AAAUC;AAAV,AACE,AAAAsF,AAAgB,AAAMkd,AAASxiB;AAA/B,AAAA,AAAA,AAAAsF,AAAA;AAAA;AAAA,AAAAA,AAAYsI;AAAZ,AACE,AAAM/N,AAAIG,AAAE,AAA4BP,AAAGmO;;;AAF/C,AAAA,AAAA,AAAU5N;;;;AAAV;;;;AAGAH;;;AAPJ,AAAA,AAAAkjB,AAAA;;;;AAAA;;;;;AAAA,AAAAnhB,AAAA,AAAAC,AAAAihB,AAAA,AAAAE,AAAA,AAAAjhB,AAAA8gB;;AAAA,AAAAjhB,AAAA,AAAAC,AAAAihB,AAAA;;;AAAA,AAAA,AAAAjnB,AAAAgnB,AAEMpjB;AAFN,AAAA,AAAAwC,AAGE,AAAMpC,AAAI,AAACsjB,AAAO5jB;AAAlB,AACE,AAAAQ,AAAYoT;AAAZ,AAAA,AAAA,AAAUnT;;AAAV,AAAA,AAAA,AAAAD,AAAUC;AAAV,AACE,AAAAsF,AAAgB,AAAMkd,AAASxiB;AAA/B,AAAA,AAAA,AAAAsF,AAAA;AAAA;AAAA,AAAAA,AAAYsI;AAAZ,AACE,AAAM/N,AAAIG,AAAE,AAA4BP,AAAGmO;;;AAF/C,AAAA,AAAA,AAAU5N;;;;AAAV;;;;AAGAH;AAPJ,AAAAmjB,AAAA,AAAA9gB,AAAA2gB;;;AAAA;;;;;AAAA,AAAA;;;AAAAI,AAAA,AAAA3pB,AAAA,AAAAspB,AAES,AAAA,AAASxQ;AAFlB,AAAA,AAAA6Q;AAAA,AAAA5rB,AAAA4rB,AAAA,AAAAC,AAAA,AAAAhhB,AAAAwgB;;AAAA,AAAA,AAAAxgB,AAAAwgB;;;;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAA1hB,AACiDwB;;AAOjD,AAAC5G,AAAK5F;AACNqsB;;;;;;;;;;;AApBnB,AAAA,AAAA,AAAM1H;;AAAN,AAuBA,AAAA,AAAMyI,AAASrW,AAAQsV;AAAvB,AACE,AAAK,AAACC,AAASvV,AAAQsV,AAClB,AAACzjB,AAAI8B,AACLxE;;AAEP,AAAA;AAAA;;;AAAA,AAAaqnB;;AAAb,AAAAF,AAAA,AACqBG,AAAIzW;AADzB,AAAA,AAAAvB,AAAA,AAAA,AAAA,AAAA,AACqBgY,AAAAA;AADrB/X,AAAA,AAAA6X,AAAA,AAAA3X,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACqB+X,AAAAA,AAAIzW,AAAAA;;AADzB,AAAAnB,AAAA,AAAA0X,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA1X,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACqB4X,AAAAA,AAAIzW,AAAAA;;AADzB,AAAA,AAAAlB,AAAA,AACqB2X;;;;AADrB,AAAA,AAAA,AACGF,AAAkBE,AAAIzW;AADzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACqByW,AAAAA;AADrB,AACqBA,AAAAA,AAAIzW;;AADzB,AAAAsW,AACqBG,AAAIzW;;;;AADzB,AAGA,AAAA,AAAA,AAAA,AAAA,AAAA5M,AACEsjB;;AADF,AAAA,AAAA,AACEA,AACA,AAAmBD,AAAIzW;AAAvB,AAAA,AAAA,AAAmByW;AAAnB,AACE,AAAChR,AAAoBzF,AAAQ,AAAUyW;;;AAH3C,AAAA,AAAA,AAAA,AAAArjB,AAIE6M;;AAJF,AAAA,AAAA,AAIEA,AACA,AAAmBwW,AAAIzW;AAAvB,AAAA,AAAA,AAAmByW;AAAnB,AACE,AAAA,AAAA,AAACrX,AAAOY,AAAkB,AAAUyW;;;AANxC,AAAA,AAAA,AAAA,AAAArjB,AAOEujB;;AAPF,AAAA,AAAA,AAOEA,AACA,AAAmBF,AAAIne;AAAvB,AAAA,AAAA,AAAmBme;AAAnB,AACE,AAAAtP,AAAI,AAAC/d,AAAImT,AAAoB,AAAUka;AAAvC,AAAA,AAAAtP;AAAAA;;AACI,AAACR,AAAY,AAAU8P;;;;AAV/B,AAAA,AAAA,AAAA,AAAArjB,AAWEwjB;;AAXF,AAAA,AAAA,AAWEA,AACA,AAAmBH,AAAIne;AAAvB,AAAA,AAAA,AAAmBme;AAAnB,AACE,AAASA;;AAEb,AAAA,AAAMI,AAAYC,AAAc9W,AAAQnS;AAAxC,AACE,AAAC6C,AAAK,AAAKqmB,AAAQC,AAAY/jB;AAAzB,AACE,AAAI,AAACgkB,AAAcF;AACjB,AAAM5Q,AAAK,AAACoQ,AAAiB,AAAA,AAAKQ,AAAS/W;AACrCnH,AAAK,AAAA,AAAAqe,AAACrlB;AAAD,AAAM,AAAAqlB,AAACX,AAAmBvW;AAAS,AAAClO,AAAQ,AAAA,AAAOilB;AACxDI,AAAK,AAAA,AAAAC,AAACvlB;AAAD,AAAM,AAAAulB,AAACttB,AAAMmJ;AAAGpF;AAF3B,AAGE,AAACgD,AAAMsV,AAAE,AAAA,AAAC7b,AAAOuO,AAAMse;;AACzBH;;AACRF,AACA,AAAChoB,AAAMjB,AACP,AAAC6I;;AAEL,AAAA,AAAO2gB,AAASnQ,AAAKvY;AAArB,AACO,AAAA,AAAA2oB,AAAAC,AAAC1lB,AACD,AAACoU,AAAOrL;AADR,AAAM,AAAM,AAAA0c,AAAAA,AAACpQ,AAAAA,AAAAA;AAAP,AAAAqQ;;AAAA;;AAAoB5oB,AAAK,AAAC+H;;AAGvC,AAAA,AAAM8gB,AAAWV,AAAc9W,AAAQyX;AAAvC,AACE,AAAMC,AAAW,AAACL,AAAQ,AAACtc,AAAWkc,AAAeH;AAC/Ca,AAAW,AAAK7W;AAAL,AACE,AAAA,AAAA8W,AAAC/lB;AAAD,AAAM,AAAA+lB,AAAC9tB,AAAIgX;AAAS4W;;AACjCG,AAAW,AAAC3Z,AAASyZ,AAASF;AAHpC,AAIE,AAAAxjB,AAAA,AAAA6jB;AAAA,AAAA,AAAA3jB,AAAA,AAAA;AAAA,AAAA,AAAA2jB,AAAAA;;AAAA,AAAA,AAAA1jB,AAAA,AAAA7H,AAAAurB;AAAA,AAAA,AAAA1jB;AAAA,AAAA,AAAA0jB,AAAA1jB;AAAA,AAAA,AAAA,AAAAC,AAAAyjB;AAAA,AAAAxjB,AA4kD+C,AAAA4B,AAAA4hB;AA5kD/CvjB,AAAA,AAAAtJ,AAAAqJ;AAAAyjB,AAAA,AAAAtjB,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAyjB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzjB;AAAA,AAAA0jB,AAAA,AAAAprB,AAAAyH,AAAA0jB;AAAA,AAAAluB,AAAAmuB,AAAA,AAAA,AAAO3f;AAAP,AAAAxO,AAAAmuB,AAAA,AAAA,AAASpqB;AAAT,AAAA,AAAA,AAAA+G,AAAAmjB,AACE,AAAClB,AAAWC,AAAc9W,AAAQnS;;AADpC,AAAA,AAAAmqB,AAAA;;;;AAAA;;;;;AAAA,AAAAnjB,AAAA,AAAAC,AAAAijB,AAAA,AAAAG,AAAA,AAAAljB,AAAA8iB;;AAAA,AAAAjjB,AAAA,AAAAC,AAAAijB,AAAA;;;AAAA,AAAAI,AAAA,AAAArpB,AAAAgpB;AAAA,AAAAhuB,AAAAquB,AAAA,AAAA,AAAO7f;AAAP,AAAAxO,AAAAquB,AAAA,AAAA,AAAStqB;AAAT,AAAA,AAAAqH,AAAA,AAAAgjB,AAAA,AAAA/iB,AAAA2iB,AACE,AAACjB,AAAWC,AAAc9W,AAAQnS;;;AADpC;;;;AAAA,AAAA;;AAAA,AAAA,AAAAoG,AAAiB4jB;;AAGrB,AAAA;AAAA;;;AAAA,AAAaS;;AAAb,AAAAF,AAAA,AACkBG,AAAK1qB;AADvB,AAAA,AAAA4Q,AAAA,AAAA,AAAA,AAAA,AACkB8Z,AAAAA;AADlB7Z,AAAA,AAAA2Z,AAAA,AAAAzZ,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACkB6Z,AAAAA,AAAK1qB,AAAAA;;AADvB,AAAAgR,AAAA,AAAAwZ,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAxZ,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACkB0Z,AAAAA,AAAK1qB,AAAAA;;AADvB,AAAA,AAAAiR,AAAA,AACkByZ;;;;AADlB,AAAA,AAAA,AACGF,AAAeE,AAAK1qB;AADvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACkB0qB,AAAAA;AADlB,AACkBA,AAAAA,AAAK1qB;;AADvB,AAAAuqB,AACkBG,AAAK1qB;;;;AADvB,AAGA,AAAA,AAAA,AAAA,AAAA,AAAAuF,AACEolB;;AADF,AAAA,AAAA,AACEA,AACA,AAAgBlgB,AAAEzK;AAAlB,AAAA,AAAA,AAAgByK;AAAhB,AAA0BzK;;;AAF5B,AAAA,AAAA,AAAA,AAAAuF,AAGEqlB;;AAHF,AAAA,AAAA,AAGEA,AACA,AAAgBngB,AAAEzK;AAAlB,AAAA,AAAA,AAAgByK;AAAhB,AAA0B,AAAA,AAACxM,AAAQ,AAAC+F,AAAI/C,AAAOjB;;;AAJjD,AAAA,AAAA,AAAA,AAAAuF,AAKEslB;;AALF,AAAA,AAAA,AAKEA,AACA,AAAgBpgB,AAAEzK;AAAlB,AAAA,AAAA,AAAgByK;AAAhB,AAA0B,AAAC6F,AAAOtQ;;;AANpC,AAAA,AAAA,AAAA,AAAAuF,AAOEulB;;AAPF,AAAA,AAAA,AAOEA,AACA,AAAgBrgB,AAAEzK;AAAlB,AAAA,AAAA,AAAgByK;AAAhB,AAA0B,AAACxJ,AAAMjB;;AAEnC,AAAA,AAAO+qB,AAAM9B,AAAc9W,AAAQyX;AAAnC,AACE,AAAMoB,AAAS,AAAA5kB,AAAA,AAAA6kB;AAAA,AAAA,AAAA3kB,AAAA,AAAA;AAAA,AAAA,AAAA2kB,AAAAA;;AAAA,AAAA,AAAA1kB,AAAA,AAAA7H,AAAAusB;AAAA,AAAA,AAAA1kB;AAAA,AAAA,AAAA0kB,AAAA1kB;AAAA,AAAA,AAAA,AAAAC,AAAAykB;AAAA,AAAAxkB,AA2jDkC,AAAA4B,AAAA4iB;AA3jDlCvkB,AAAA,AAAAtJ,AAAAqJ;AAAAykB,AAAA,AAAAtkB,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAykB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzkB;AAAA,AAAA,AAAA1H,AAAAyH,AAAA0kB,AAAMT;AAAN,AAAA,AAAA,AAAA3jB,AAAAmkB,AACE,AAAA,AAAA,AAAA,AAAM,AAACG,AAASX,AACb,AAAChC,AAAiB,AAAA,AAASgC,AAAMvY,AACjC,AAACmZ,AACC,AAAC5C,AAAiB,AAAA,AAAUgC,AAAMvY;;AAJzC,AAAA,AAAAgZ,AAAA;;;;AAAA;;;;;AAAA,AAAAnkB,AAAA,AAAAC,AAAAikB,AAAA,AAAAE,AAAA,AAAAjkB,AAAA8jB;;AAAA,AAAAjkB,AAAA,AAAAC,AAAAikB,AAAA;;;AAAA,AAAA,AAAAjqB,AAAAgqB,AAAMP;AAAN,AAAA,AAAArjB,AAAA,AAAA+jB,AAAA,AAAA9jB,AAAA2jB,AACE,AAAA,AAAA,AAAA,AAAM,AAACI,AAASX,AACb,AAAChC,AAAiB,AAAA,AAASgC,AAAMvY,AACjC,AAACmZ,AACC,AAAC5C,AAAiB,AAAA,AAAUgC,AAAMvY;;;AAJzC;;;;AAAA,AAAA;;AAAA,AAAA,AAAA/L,AAAW6iB;;AAA1B,AAKE,AAAA7iB,AAAA,AAAAmlB;AAAA,AAAA,AAAAjlB,AAAA,AAAA;AAAA,AAAA,AAAAilB,AAAAA;;AAAA,AAAA,AAAAhlB,AAAA,AAAA7H,AAAA6sB;AAAA,AAAA,AAAAhlB;AAAA,AAAA,AAAAglB,AAAAhlB;AAAA,AAAA,AAAA,AAAAC,AAAA+kB;AAAA,AAAA9kB,AAsjD+C,AAAA4B,AAAAkjB;AAtjD/C7kB,AAAA,AAAAtJ,AAAAqJ;AAAA+kB,AAAA,AAAA5kB,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA+kB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA/kB;AAAA,AAAA,AAAA1H,AAAAyH,AAAAglB,AAAMxY;AAAN,AAAA,AAAA,AAAAlM,AAAAykB,AACE,AAAC3oB,AAAK;AAAK8oB,AAAIC;AAAT,AACE,AAAID;AACF,AAAAE,AAAiBF;AAAjB,AAAA1vB,AAAA4vB,AAAA,AAAA,AAAOE;AAAP,AAAA9vB,AAAA4vB,AAAA,AAAA,AAAWG;AAAX,AACE,AAAA,AAAA,AAACC,AAAcF,AAAIC,AAAMJ;;AAC3BA;;;AACJZ,AACA/X;;AAPR,AAAA,AAAAwY,AAAA;;;;AAAA;;;;;AAAA,AAAAzkB,AAAA,AAAAC,AAAAukB,AAAA,AAAAE,AAAA,AAAAvkB,AAAAokB;;AAAA,AAAAvkB,AAAA,AAAAC,AAAAukB,AAAA;;;AAAA,AAAA,AAAAvqB,AAAAsqB,AAAMtY;AAAN,AAAA,AAAA5L,AACE,AAACxE,AAAK;AAAK8oB,AAAIC;AAAT,AACE,AAAID;AACF,AAAAG,AAAiBH;AAAjB,AAAA1vB,AAAA6vB,AAAA,AAAA,AAAOC;AAAP,AAAA9vB,AAAA6vB,AAAA,AAAA,AAAWE;AAAX,AACE,AAAA,AAAA,AAACC,AAAcF,AAAIC,AAAMJ;;AAC3BA;;;AALZ,AAAAF,AAAA,AAAApkB,AAAAikB,AAMQP,AACA/X;;;AAPR;;;;AAAA,AAAA;;AAAA,AAAA,AAAA7M,AAAYwjB;;AAShB,AAAesC,AAAY,AAACC,AAAU,AAACC,AAAmBxxB,AAAA;AAE1D,AAAA,AAAMyxB,AAAsBC;AAA5B,AACE,AAAAriB,AAAiB,AAAA,AAAAkU,AAAA,AAAC5iB,AAAK2wB,AAAYI;AAAnC,AAAA,AAAA,AAAAriB,AAAA;AAEE,AAAMuiB,AAAG,AAACC,AAAeH;AAAzB,AACE,AAAA,AAAA,AAAQJ,AAAAA,AAAY1tB,AAAM8tB,AAAEE;;AAC5BA;;AAJJ,AAAAviB,AAAUsiB;AAAV,AACEA;;;AAKJ,AAAA,AAAA,AAAA/qB,AAAMkrB;AAAN,AAAA,AAAAjrB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAirB,AAAA,AAAA,AAAA,AAAA9qB;;;AAAA,AAAA,AAAA,AAAA,AAAM8qB,AAAGJ,AAAIO;AAAb,AACE,AAAMC,AAAc,AAACT,AAAqBC;AACpC5B,AAAc,AAAA,AAAQoC;AACtB7D,AAAc,AAAC8D,AAAiBrC;AAChCsC,AAAc,AAACC,AAAavC;AAC5BwC,AAAc,AAAC9vB,AAAM6rB;AACrBkE,AAAc,AAAA,AAAQL;AAEtBM,AAAc,AAAC3wB,AAAOuwB,AAAU,AAAA,AAAChpB,AAAYmpB;AAC7Cb,AAAc,AAAAe,AAAQf;AAAR,AAAA,AACE,AAAC7oB,AAAY6oB;AADf,AAAAe,AACkBC;;AADlBD;;;AAEdE,AAAc,AAAA,AAAQjB;AACtBna,AAAkB,AAAAjT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACF,AAACuT,AAAY,AAAA,AAAMqa,AAAUD;AAC7CjD,AAAkBzX,AACF,AAACkV,AAAGkG,AACJ,AAAC/E,AAAQ4E;AAf/B,AAgBE,AAAAI,AAAS5D;AAAT4D,AAAA,AACE,AAAA,AAAOlB,AACL,AAAA,AAAAmB,AAAC5qB;AAAD,AAAO,AAACiD,AAAI,AAAA2nB,AAAA,AAACtM,AAAW+L;AAF5BM,AAEIA;AAFJA,AAAA,AAAAA,AAGE,AAAC7V,AAAKyR,AAAcH,AAClB,AAAAuE,AAAC7D,AAAUV,AAAc9W;AAJ7Bqb,AAAA,AAAAA,AAKE,AAAC7V,AAAK0T,AAASpC,AACb,AAAAuE,AAACzC,AAAK9B,AAAc9W;AANxB,AAAA,AAQI,AAAAqb,AAAChD,AAAcE;;;;AAzBvB,AAAA,AAAA,AAAMgC;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAA3rB,AAAA0rB;AAAAA,AAAA,AAAA3rB,AAAA2rB;AAAA,AAAA,AAAAjqB,AAAA;AAAA,AAAA,AAAAA,AAAAkqB,AAAAD;;;AAAA","names":["datascript.query/lru-cache-size","this__4380__auto__","k__4381__auto__","this__4382__auto__","k30736","else__4383__auto__","G__30740","cljs.core/Keyword","rels","sources","rules","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__30741","vec__30742","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__30735","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this30737","other30738","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__30749","cljs.core/keyword-identical?","expr__30750","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","datascript.query/Context","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__30739","extmap__4419__auto__","G__30752","cljs.core/record?","datascript.query/->Context","datascript.query/map->Context","k30754","G__30759","attrs","tuples","p__30760","vec__30761","G__30753","this30755","other30756","pred__30765","expr__30766","datascript.query/Relation","G__30757","G__30768","datascript.query/->Relation","datascript.query/map->Relation","datascript.query/single","coll","js/Error","cljs.core/next","cljs.core/first","datascript.query/intersect-keys","attrs1","attrs2","clojure.set.intersection","cljs.core/set","cljs.core/keys","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","datascript.query/concatv","seq30770","self__4724__auto__","xs","cljs.core/cat","G__30775","datascript.query/zip","args-arr__4757__auto__","argseq__4758__auto__","seq30772","G__30773","G__30774","self__4723__auto__","a","b","cljs.core.mapv","cljs.core/vector","rest","cljs.core.apply","cljs.core/mapv","datascript.query/same-keys?","p1__30776#","cljs.core/every?","p1__30777#","datascript.query/looks-like?","pattern","form","cljs.core/sequential?","cljs.core/Symbol","cljs.core/last","p__30783","vec__30784","pattern-el","form-el","cljs.core.map","cljs.core/butlast","p__30792","vec__30793","datascript.query/source?","sym","cljs.core/name","datascript.query/free-var?","datascript.query/attr?","datascript.query/lookup-ref?","datascript.query/join-tuples","t1","idxs1","t2","idxs2","l1","l2","res","me.tonsky.persistent-sorted-set.arrays/make-array","n__4613__auto__","i","datascript.query/sum-rel","map__30797","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","map__30798","attrs-a","tuples-a","attrs-b","tuples-b","cljs.core/vec","cljs.core.ex_info","cljs.core.pr_str","cljs.core/number?","cljs.core/vals","idxb->idxa","iter__4529__auto__","s__30802","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__30804","cljs.core/chunk-buffer","i__30803","vec__30805","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30801","cljs.core/chunk-rest","vec__30808","cljs.core/cons","cljs.core/rest","idx-b","tlen","cljs.core/max","tuples'","cljs.core/persistent!","acc","tuple-b","tuple'","seq__30811","chunk__30812","count__30813","i__30814","vec__30821","c__4556__auto__","cljs.core/chunk-first","vec__30825","idx-a","cljs.core.conj_BANG_","cljs.core/transient","all-attrs","cljs.core/zipmap","cljs.core.merge","cljs.core.range","G__30830","G__30831","G__30828","G__30829","G__30833","datascript.query/prod-rel","rel1","rel2","cljs.core/to-array","datascript.query/-differ?","seq30834","l","cljs.core.not_EQ_","cljs.core.take","cljs.core.drop","datascript.query/-get-else","db","e","else-val","temp__5737__auto__","datom","datascript.db/-search","datascript.query/-get-some","seq30836","G__30837","G__30838","as","_","temp__5739__auto__","cljs.core/reduced","datascript.query/-missing?","datascript.impl.entity/entity","datascript.query/and-fn","seq30839","args","datascript.query/or-fn","seq30840","cljs.core//","datascript.query/built-ins","cljs.core/=","cljs.core/==","cljs.core/not=","cljs.core/<","cljs.core/>","cljs.core/<=","cljs.core/>=","cljs.core/+","cljs.core/-","cljs.core/*","cljs.core/quot","cljs.core/rem","cljs.core/mod","cljs.core/inc","cljs.core/dec","cljs.core/min","cljs.core/zero?","cljs.core/pos?","cljs.core/neg?","cljs.core/even?","cljs.core/odd?","cljs.core/compare","cljs.core/rand","cljs.core/rand-int","cljs.core/true?","cljs.core/false?","cljs.core/nil?","cljs.core/some?","cljs.core/not","cljs.core/complement","cljs.core/identical?","cljs.core/identity","cljs.core/meta","cljs.core/namespace","cljs.core/type","cljs.core/list","cljs.core/array-map","cljs.core/range","cljs.core/empty?","cljs.core/str","cljs.core/pr-str","cljs.core/print-str","cljs.core/println-str","cljs.core/prn-str","cljs.core/subs","cljs.core/re-find","cljs.core/re-matches","cljs.core/re-seq","cljs.core/re-pattern","clojure.string/blank?","clojure.string/includes?","clojure.string/starts-with?","clojure.string/ends-with?","datascript.query/built-in-aggregates","sum","terms","cljs.core.sort","size","med","G__30848","mean","avg","s__30850","b__30852","i__30851","iter__30849","x","delta","js/Math.sqrt","variance","median","stddev","n","cljs.core.conj","cljs.core/rand-nth","cljs.core.repeatedly","cljs.core/shuffle","cljs.core.distinct","datascript.query/parse-rules","cljs.reader.read_string","cljs.core/group-by","cljs.core/ffirst","datascript.query/empty-rel","binding","vars","datascript.parser/collect-vars-distinct","datascript$query$IBinding$in__GT_rel$dyn","x__4428__auto__","m__4429__auto__","datascript.query/in->rel","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","datascript.query/IBinding","value","datascript.parser/BindIgnore","datascript.query.prod_rel","datascript.parser/BindScalar","cljs.core.get_in","cljs.core.into_array","datascript.parser/BindColl","datascript.db/seqable?","datascript.parser/source","p1__30855#","datascript.parser/BindTuple","p1__30856#","p2__30857#","p__30858","vec__30859","datascript.query/resolve-in","context","datascript.parser/SrcVar","cljs.core.update","cljs.core/assoc","datascript.parser/RulesVar","cljs.core/conj","datascript.query/resolve-ins","bindings","values","datascript.query/*lookup-attrs*","datascript.query/*implicit-source*","datascript.query/getter-fn","attr","idx","tuple","eid","datascript.db/entid","me.tonsky.persistent-sorted-set.arrays/array?","datascript.query/tuple-key-fn","getters","cljs.core.list_STAR_","p1__30863#","datascript.query/hash-attrs","key-fn","hash-table","key","cljs.core.assoc_BANG_","datascript.query/hash-join","tuples1","tuples2","common-attrs","common-gtrs1","p1__30866#","common-gtrs2","p1__30867#","keep-attrs1","keep-attrs2","clojure.set.difference","keep-idxs1","keep-idxs2","key-fn1","hash","key-fn2","new-tuples","tuple2","tuple1","datascript.query/subtract-rel","map__30871","map__30872","getters-b","p1__30868#","key-fn-b","getters-a","p1__30869#","key-fn-a","p1__30870#","cljs.core/filterv","G__30875","datascript.query/lookup-pattern-db","search-pattern","p1__30876#","datoms","attr->prop","cljs.core.filter","p__30877","vec__30878","s","datascript.query/matches-pattern?","and__4115__auto__","t","p","datascript.query/lookup-pattern-coll","data","p1__30882#","attr->idx","p__30883","vec__30884","datascript.query/normalize-pattern-clause","clause","datascript.query/lookup-pattern","source","cljs.core/native-satisfies?","datascript.db/ISearch","datascript.query/collapse-rels","new-rel","rel","datascript.query/rel-with-attr","p1__30889#","cljs.core/some","datascript.query/context-resolve-val","fexpr__30891","datascript.query/rel-contains-attrs?","p1__30892#","datascript.query/rel-prod-by-attrs","p1__30893#","production","p1__30894#","cljs.core.remove","datascript.query/-call-fn","f","len","static-args","tuples-args","arg","me.tonsky.persistent-sorted-set.arrays/aclone","tuple-idx","v","datascript.query/resolve-sym","datascript.query/filter-by-pred","vec__30897","vec__30900","seq__30901","first__30902","vec__30903","pred","or__4126__auto__","cljs.core/symbol?","tuple-pred","p1__30896#","datascript.query/bind-by-fn","vec__30906","vec__30909","seq__30910","first__30911","vec__30912","out","datascript.parser/parse-binding","fun","tuple-fn","s__30916","b__30918","i__30917","iter__30915","val","datascript.query/rule?","cljs.core/second","datascript.query/rule-seqid","cljs.core.atom","datascript.query/expand-rule","used-args","vec__30921","seq__30922","first__30923","rule","call-args","seqid","cljs.core.swap_BANG_","branches","s__30925","b__30927","i__30926","vec__30928","seq__30929","first__30930","vec__30931","seq__30932","first__30933","iter__30924","vec__30935","seq__30936","first__30937","vec__30938","seq__30939","first__30940","branch","rule-args","clauses","replacements","p1__30920#","clojure.walk/postwalk","x__27543__auto__","cljs.core.symbol","datascript.query/remove-pairs","ys","pairs","p__30941","vec__30942","y","datascript.query/rule-gen-guards","rule-clause","vec__30945","seq__30946","first__30947","prev-call-args","s__30949","b__30951","i__30950","vec__30952","iter__30948","vec__30955","prev-args","datascript.query/walk-collect","cljs.core/deref","p1__30958#","datascript.query/collect-vars","datascript.query/split-guards","guards","bound-vars","p__30959","vec__30960","vec__30963","seq__30964","first__30965","datascript.query/solve-rule","final-attrs","final-attrs-map","solve","prefix-context","datascript.query/-resolve-clause","empty-rels?","p1__30966#","stack","frame","vec__30986","vec__30989","seq__30990","first__30991","next-clauses","p1__30967#","cljs.core/split-with","datascript.query/-collect","vec__30992","seq__30993","first__30994","vec__30995","active-gs","pending-gs","p1__30968#","prefix-clauses","s__30999","b__31001","i__31000","iter__30998","datascript.query.concatv","datascript.query/resolve-pattern-lookup-refs","datascript.db/IDB","vec__31004","tx","datascript.db/entid-strict","datascript.db/ref?","cljs.core.subvec","datascript.query/dynamic-lookup-attrs","vec__31007","G__31010","datascript.query/limit-rel","attrs'","cljs.core/select-keys","datascript.query/limit-context","p1__31011#","cljs.core.keep","datascript.query/bound-vars","p1__31013#","cljs.core.mapcat","datascript.query/check-bound","bound","clojure.set/subset?","missing","datascript.query/check-free-same","free","p1__31014#","datascript.query/check-free-subset","seq__31015","chunk__31016","count__31017","i__31018","cljs.core.prn","G__31024","datascript.query._resolve_clause","orig-clause","pred__31026","expr__31027","G__31029","G__31030","G__31031","G__31032","G__31033","G__31034","G__31040","G__31041","G__31045","G__31046","G__31053","G__31054","G__31058","G__31059","G__31063","G__31064","G__31069","G__31070","G__31074","G__31075","vec__31035","seq__31036","first__31037","source-sym","*implicit-source*-orig-val__31038","*implicit-source*-temp-val__31039","vec__31042","seq__31043","first__31044","contexts","p1__31019#","datascript.query/resolve-clause","p1__31020#","vec__31047","seq__31048","first__31049","vec__31050","seq__31051","first__31052","req-vars","vec__31055","seq__31056","first__31057","join-context","p1__31021#","p1__31022#","sum-rel","vec__31060","seq__31061","first__31062","vec__31065","seq__31066","first__31067","negation-vars","context'","negation-context","negation","vec__31071","seq__31072","first__31073","relation","*lookup-attrs*-orig-val__31076","*lookup-attrs*-temp-val__31077","*implicit-source*-orig-val__31079","*implicit-source*-temp-val__31080","G__31081","G__31082","datascript.query/-q","*implicit-source*-orig-val__31083","*implicit-source*-temp-val__31084","G__31087","symbols","datascript.query._collect","keep-attrs","copy-map","p1__31085#","s__31089","xs__6292__auto__","iterys__4525__auto__","s__31091","b__31093","i__31092","iter__31090","fs__4526__auto__","iter__31088","cljs.core/aclone","datascript.query/collect","datascript$query$IContextResolve$_context_resolve$dyn","datascript.query/-context-resolve","datascript.query/IContextResolve","var","datascript.parser/Variable","datascript.parser/PlainSymbol","datascript.parser/Constant","datascript.query/-aggregate","find-elements","element","fixed-value","datascript.parser/aggregate?","p1__31095#","vals","p1__31096#","datascript.query/idxs-of","p1__31097#","p2__31098#","datascript.query/aggregate","resultset","group-idxs","group-fn","p1__31100#","grouped","s__31102","b__31104","i__31103","vec__31105","iter__31101","vec__31108","datascript$query$IPostProcess$_post_process$dyn","datascript.query/-post-process","datascript.query/IPostProcess","find","datascript.parser/FindRel","datascript.parser/FindColl","datascript.parser/FindScalar","datascript.parser/FindTuple","datascript.query/pull","resolved","s__31112","b__31114","i__31113","iter__31111","datascript.parser/pull?","datascript.pull-parser/parse-pull","s__31116","b__31118","i__31117","iter__31115","env","el","vec__31119","vec__31122","src","spec","datascript.pull-api/pull-spec","datascript.query/query-cache","cljs.core/volatile!","datascript.lru/lru","datascript.query/memoized-parse-query","q","cached","qp","datascript.parser/parse-query","datascript.query/q","seq31126","G__31127","inputs","parsed-q","datascript.parser/find-elements","find-vars","datascript.parser/find-vars","result-arity","with","all-vars","G__31128","datascript.parser/query->map","wheres","G__31129","p1__31125#"],"sourcesContent":["(ns ^:no-doc datascript.query\n  (:require\n   [#?(:cljs cljs.reader :clj clojure.edn) :as edn]\n   [clojure.set :as set]\n   [clojure.string :as str]\n   [clojure.walk :as walk]\n   [datascript.db :as db #?(:cljs :refer-macros :clj :refer) [raise]]\n   [me.tonsky.persistent-sorted-set.arrays :as da]\n   [datascript.lru]\n   [datascript.impl.entity :as de]\n   [datascript.parser :as dp #?@(:cljs [:refer [BindColl BindIgnore BindScalar BindTuple Constant\n                                                FindColl FindRel FindScalar FindTuple PlainSymbol\n                                                RulesVar SrcVar Variable]])]\n   [datascript.pull-api :as dpa]\n   [datascript.pull-parser :as dpp])\n  #?(:clj (:import [datascript.parser BindColl BindIgnore BindScalar BindTuple\n                    Constant FindColl FindRel FindScalar FindTuple PlainSymbol\n                    RulesVar SrcVar Variable])))\n\n;; ----------------------------------------------------------------------------\n\n(def ^:const lru-cache-size 100)\n\n(declare -collect -resolve-clause resolve-clause)\n\n;; Records\n\n(defrecord Context [rels sources rules])\n\n;; attrs:\n;;    {?e 0, ?v 1} or {?e2 \"a\", ?age \"v\"}\n;; tuples:\n;;    [ #js [1 \"Ivan\" 5 14] ... ]\n;; or [ (Datom. 2 \"Oleg\" 1 55) ... ]\n(defrecord Relation [attrs tuples])\n\n\n;; Utilities\n\n(defn single [coll]\n  (assert (nil? (next coll)) \"Expected single element\")\n  (first coll))\n\n(defn intersect-keys [attrs1 attrs2]\n  (set/intersection (set (keys attrs1))\n                    (set (keys attrs2))))\n\n(defn concatv [& xs]\n  (into [] cat xs))\n\n(defn zip\n  ([a b] (mapv vector a b))\n  ([a b & rest] (apply mapv vector a b rest)))\n\n(defn same-keys? [a b]\n  (and (= (count a) (count b))\n       (every? #(contains? b %) (keys a))\n       (every? #(contains? b %) (keys a))))\n\n(defn- looks-like? [pattern form]\n  (cond\n    (= '_ pattern)\n      true\n    (= '[*] pattern)\n      (sequential? form)\n    (symbol? pattern)\n      (= form pattern)\n    (sequential? pattern)\n      (if (= (last pattern) '*)\n        (and (sequential? form)\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector (butlast pattern) form)))\n        (and (sequential? form)\n             (= (count form) (count pattern))\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector pattern form))))\n    :else ;; (predicate? pattern)\n      (pattern form)))\n\n(defn source? [sym]\n  (and (symbol? sym)\n       (= \\$ (first (name sym)))))\n\n(defn free-var? [sym]\n  (and (symbol? sym)\n       (= \\? (first (name sym)))))\n\n(defn attr? [form]\n  (or (keyword? form) (string? form)))\n\n(defn lookup-ref? [form]\n  (looks-like? [attr? '_] form))\n\n;; Relation algebra\n\n(defn join-tuples [t1 #?(:cljs idxs1\n                         :clj  ^{:tag \"[[Ljava.lang.Object;\"} idxs1)\n                   t2 #?(:cljs idxs2\n                         :clj  ^{:tag \"[[Ljava.lang.Object;\"} idxs2)]\n  (let [l1  (alength idxs1)\n        l2  (alength idxs2)\n        res (da/make-array (+ l1 l2))]\n    (dotimes [i l1]\n      (aset res i (#?(:cljs da/aget :clj get) t1 (aget idxs1 i)))) ;; FIXME aget\n    (dotimes [i l2]\n      (aset res (+ l1 i) (#?(:cljs da/aget :clj get) t2 (aget idxs2 i)))) ;; FIXME aget\n    res))\n\n(defn sum-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b]\n    (cond\n      (= attrs-a attrs-b)\n      (Relation. attrs-a (into (vec tuples-a) tuples-b))\n\n      (not (same-keys? attrs-a attrs-b))\n      (raise \"Can\u2019t sum relations with different attrs: \" attrs-a \" and \" attrs-b\n             {:error :query/where})\n\n      (every? number? (vals attrs-a)) ;; can\u2019t conj into BTSetIter\n      (let [idxb->idxa (vec (for [[sym idx-b] attrs-b]\n                              [idx-b (attrs-a sym)]))\n            tlen    (->> (vals attrs-a) (reduce max) (inc)) \n            tuples' (persistent!\n                      (reduce\n                        (fn [acc tuple-b]\n                          (let [tuple' (da/make-array tlen)]\n                            (doseq [[idx-b idx-a] idxb->idxa]\n                              (aset tuple' idx-a (#?(:cljs da/aget :clj get) tuple-b idx-b)))\n                            (conj! acc tuple')))\n                        (transient (vec tuples-a))\n                        tuples-b))]\n        (Relation. attrs-a tuples'))\n\n      :else\n      (let [all-attrs (zipmap (keys (merge attrs-a attrs-b)) (range))]\n        (-> (Relation. all-attrs [])\n            (sum-rel a)\n            (sum-rel b))))))\n\n(defn prod-rel\n  ([] (Relation. {} [(da/make-array 0)]))\n  ([rel1 rel2]\n    (let [attrs1 (keys (:attrs rel1))\n          attrs2 (keys (:attrs rel2))\n          idxs1  (to-array (map (:attrs rel1) attrs1))\n          idxs2  (to-array (map (:attrs rel2) attrs2))]\n      (Relation.\n        (zipmap (concat attrs1 attrs2) (range))\n        (persistent!\n          (reduce\n            (fn [acc t1]\n              (reduce (fn [acc t2]\n                        (conj! acc (join-tuples t1 idxs1 t2 idxs2)))\n                      acc (:tuples rel2)))\n            (transient []) (:tuples rel1)))\n        ))))\n\n;; built-ins\n\n(defn- -differ? [& xs]\n  (let [l (count xs)]\n    (not= (take (/ l 2) xs) (drop (/ l 2) xs))))\n\n(defn- -get-else\n  [db e a else-val]\n  (when (nil? else-val)\n    (raise \"get-else: nil default value is not supported\" {:error :query/where}))\n  (if-some [datom (first (db/-search db [e a]))]\n    (:v datom)\n    else-val))\n\n(defn- -get-some\n  [db e & as]\n  (reduce\n   (fn [_ a]\n     (when-some [datom (first (db/-search db [e a]))]\n       (reduced [(:a datom) (:v datom)])))\n   nil\n   as))\n\n(defn- -missing?\n  [db e a]\n  (nil? (get (de/entity db e) a)))\n\n(defn- and-fn [& args]\n  (reduce (fn [a b]\n            (if b b (reduced b))) true args))\n            \n(defn- or-fn [& args]\n  (reduce (fn [a b]\n            (if b (reduced b) b)) nil args))\n\n(def built-ins {\n  '= =, '== ==, 'not= not=, '!= not=, '< <, '> >, '<= <=, '>= >=, '+ +, '- -,\n  '* *, '/ /, 'quot quot, 'rem rem, 'mod mod, 'inc inc, 'dec dec, 'max max, 'min min,\n  'zero? zero?, 'pos? pos?, 'neg? neg?, 'even? even?, 'odd? odd?, 'compare compare,\n  'rand rand, 'rand-int rand-int,\n  'true? true?, 'false? false?, 'nil? nil?, 'some? some?, 'not not, 'and and-fn, 'or or-fn,\n  'complement complement, 'identical? identical?,\n  'identity identity, 'meta meta, 'name name, 'namespace namespace, 'type type,\n  'vector vector, 'list list, 'set set, 'hash-map hash-map, 'array-map array-map,\n  'count count, 'range range, 'not-empty not-empty, 'empty? empty?, 'contains? contains?,\n  'str str, 'pr-str pr-str, 'print-str print-str, 'println-str println-str, 'prn-str prn-str, 'subs subs,\n  're-find re-find, 're-matches re-matches, 're-seq re-seq, 're-pattern re-pattern,\n  '-differ? -differ?, 'get-else -get-else, 'get-some -get-some, 'missing? -missing?, 'ground identity,\n  'clojure.string/blank? str/blank?, 'clojure.string/includes? str/includes?,\n  'clojure.string/starts-with? str/starts-with?, 'clojure.string/ends-with? str/ends-with?\n})\n\n(def built-in-aggregates\n (letfn [(sum [coll] (reduce + 0 coll))\n         (avg [coll] (/ (sum coll) (count coll)))\n         (median\n           [coll]\n           (let [terms (sort coll)\n                 size (count coll)\n                 med (bit-shift-right size 1)]\n             (cond-> (nth terms med)\n               (even? size)\n               (-> (+ (nth terms (dec med)))\n                   (/ 2)))))\n         (variance\n           [coll]\n           (let [mean (avg coll)\n                 sum  (sum (for [x coll\n                                 :let [delta (- x mean)]]\n                             (* delta delta)))]\n             (/ sum (count coll))))\n         (stddev \n           [coll] \n           (#?(:cljs js/Math.sqrt :clj Math/sqrt) (variance coll)))]\n   {'avg      avg\n    'median   median\n    'variance variance\n    'stddev   stddev\n    'distinct set\n    'min      (fn\n                ([coll] (reduce (fn [acc x]\n                                  (if (neg? (compare x acc))\n                                    x acc))\n                                (first coll) (next coll)))\n                ([n coll]\n                  (vec\n                    (reduce (fn [acc x]\n                              (cond\n                                (< (count acc) n)\n                                  (sort compare (conj acc x))\n                                (neg? (compare x (last acc)))\n                                  (sort compare (conj (butlast acc) x))\n                                :else acc))\n                            [] coll))))\n    'max      (fn\n                ([coll] (reduce (fn [acc x]\n                                  (if (pos? (compare x acc))\n                                    x acc))\n                                (first coll) (next coll)))\n                ([n coll]\n                  (vec\n                    (reduce (fn [acc x]\n                              (cond\n                                (< (count acc) n)\n                                  (sort compare (conj acc x))\n                                (pos? (compare x (first acc)))\n                                  (sort compare (conj (next acc) x))\n                                :else acc))\n                            [] coll))))\n    'sum      sum\n    'rand     (fn\n                ([coll] (rand-nth coll))\n                ([n coll] (vec (repeatedly n #(rand-nth coll)))))\n    'sample   (fn [n coll]\n                (vec (take n (shuffle coll))))\n    'count    count\n    'count-distinct (fn [coll] (count (distinct coll)))}))\n\n\n;;\n\n(defn parse-rules [rules]\n  (let [rules (if (string? rules) (edn/read-string rules) rules)] ;; for datascript.js interop\n    (group-by ffirst rules)))\n\n(defn empty-rel [binding]\n  (let [vars (->> (dp/collect-vars-distinct binding)\n               (map :symbol))]\n    (Relation. (zipmap vars (range)) [])))\n\n(defprotocol IBinding\n  (in->rel [binding value]))\n\n(extend-protocol IBinding\n  BindIgnore\n  (in->rel [_ _]\n    (prod-rel))\n  \n  BindScalar\n  (in->rel [binding value]\n    (Relation. {(get-in binding [:variable :symbol]) 0} [(into-array [value])]))\n  \n  BindColl\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to collection \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (empty? coll)\n        (empty-rel binding)\n      :else\n        (->> coll\n          (map #(in->rel (:binding binding) %))\n          (reduce sum-rel))))\n  \n  BindTuple\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (< (count coll) (count (:bindings binding)))\n        (raise \"Not enough elements in a collection \" coll \" to bind tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      :else\n        (reduce prod-rel\n          (map #(in->rel %1 %2) (:bindings binding) coll)))))\n\n(defn resolve-in [context [binding value]]\n  (cond\n    (and (instance? BindScalar binding)\n         (instance? SrcVar (:variable binding)))\n      (update context :sources assoc (get-in binding [:variable :symbol]) value)\n    (and (instance? BindScalar binding)\n         (instance? RulesVar (:variable binding)))\n      (assoc context :rules (parse-rules value))\n    :else\n      (update context :rels conj (in->rel binding value))))\n\n(defn resolve-ins [context bindings values]\n  (reduce resolve-in context (zipmap bindings values)))\n\n;;\n\n(def ^{:dynamic true\n       :doc \"List of symbols in current pattern that might potentiall be resolved to refs\"}\n  *lookup-attrs* nil)\n\n(def ^{:dynamic true\n       :doc \"Default pattern source. Lookup refs, patterns, rules will be resolved with it\"}\n  *implicit-source* nil)\n\n(defn getter-fn [attrs attr]\n  (let [idx (attrs attr)]\n    (if (contains? *lookup-attrs* attr)\n      (fn [tuple]\n        (let [eid (#?(:cljs da/aget :clj get) tuple idx)]\n          (cond\n            (number? eid)     eid ;; quick path to avoid fn call\n            (sequential? eid) (db/entid *implicit-source* eid)\n            (da/array? eid)   (db/entid *implicit-source* eid)\n            :else             eid)))\n      (fn [tuple]\n        (#?(:cljs da/aget :clj get) tuple idx)))))\n\n(defn tuple-key-fn [getters]\n  (if (== (count getters) 1)\n    (first getters)\n    (let [getters (to-array getters)]\n      (fn [tuple]\n        (list* #?(:cljs (.map getters #(% tuple))\n                  :clj  (to-array (map #(% tuple) getters))))))))\n\n(defn hash-attrs [key-fn tuples]\n  (loop [tuples     tuples\n         hash-table (transient {})]\n    (if-some [tuple (first tuples)]\n      (let [key (key-fn tuple)]\n        (recur (next tuples)\n               (assoc! hash-table key (conj (get hash-table key '()) tuple))))\n      (persistent! hash-table))))\n\n(defn hash-join [rel1 rel2]\n  (let [tuples1       (:tuples rel1)\n        tuples2       (:tuples rel2)\n        attrs1        (:attrs rel1)\n        attrs2        (:attrs rel2)\n        common-attrs  (vec (intersect-keys (:attrs rel1) (:attrs rel2)))\n        common-gtrs1  (map #(getter-fn attrs1 %) common-attrs)\n        common-gtrs2  (map #(getter-fn attrs2 %) common-attrs)\n        keep-attrs1   (keys attrs1)\n        keep-attrs2   (vec (set/difference (set (keys attrs2)) (set (keys attrs1))))\n        keep-idxs1    (to-array (map attrs1 keep-attrs1))\n        keep-idxs2    (to-array (map attrs2 keep-attrs2))\n        key-fn1       (tuple-key-fn common-gtrs1)\n        hash          (hash-attrs key-fn1 tuples1)\n        key-fn2       (tuple-key-fn common-gtrs2)\n        new-tuples    (->>\n                        (reduce (fn [acc tuple2]\n                                  (let [key (key-fn2 tuple2)]\n                                    (if-some [tuples1 (get hash key)]\n                                      (reduce (fn [acc tuple1]\n                                                (conj! acc (join-tuples tuple1 keep-idxs1 tuple2 keep-idxs2)))\n                                              acc tuples1)\n                                      acc)))\n                          (transient []) tuples2)\n                        (persistent!))]\n    (Relation. (zipmap (concat keep-attrs1 keep-attrs2) (range))\n               new-tuples)))\n\n(defn subtract-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b\n        attrs     (intersect-keys attrs-a attrs-b)\n        getters-b (map #(getter-fn attrs-b %) attrs)\n        key-fn-b  (tuple-key-fn getters-b)\n        hash      (hash-attrs key-fn-b tuples-b)\n        getters-a (map #(getter-fn attrs-a %) attrs)\n        key-fn-a  (tuple-key-fn getters-a)]\n    (assoc a\n      :tuples (filterv #(nil? (hash (key-fn-a %))) tuples-a))))\n\n(defn lookup-pattern-db [db pattern]\n  ;; TODO optimize with bound attrs min/max values here\n  (let [search-pattern (mapv #(if (symbol? %) nil %) pattern)\n        datoms         (db/-search db search-pattern)\n        attr->prop     (->> (map vector pattern [\"e\" \"a\" \"v\" \"tx\"])\n                            (filter (fn [[s _]] (free-var? s)))\n                            (into {}))]\n    (Relation. attr->prop datoms)))\n\n(defn matches-pattern? [pattern tuple]\n  (loop [tuple   tuple\n         pattern pattern]\n    (if (and tuple pattern)\n      (let [t (first tuple)\n            p (first pattern)]\n        (if (or (symbol? p) (= t p))\n          (recur (next tuple) (next pattern))\n          false))\n      true)))\n\n(defn lookup-pattern-coll [coll pattern]\n  (let [data       (filter #(matches-pattern? pattern %) coll)\n        attr->idx  (->> (map vector pattern (range))\n                        (filter (fn [[s _]] (free-var? s)))\n                        (into {}))]\n    (Relation. attr->idx (mapv to-array data)))) ;; FIXME to-array\n\n(defn normalize-pattern-clause [clause]\n  (if (source? (first clause))\n    clause\n    (concat ['$] clause)))\n\n(defn lookup-pattern [source pattern]\n  (cond\n    (satisfies? db/ISearch source)\n      (lookup-pattern-db source pattern)\n    :else\n      (lookup-pattern-coll source pattern)))\n\n(defn collapse-rels [rels new-rel]\n  (loop [rels    rels\n         new-rel new-rel\n         acc     []]\n    (if-some [rel (first rels)]\n      (if (not-empty (intersect-keys (:attrs new-rel) (:attrs rel)))\n        (recur (next rels) (hash-join rel new-rel) acc)\n        (recur (next rels) new-rel (conj acc rel)))\n      (conj acc new-rel))))\n\n(defn- rel-with-attr [context sym]\n  (some #(when (contains? (:attrs %) sym) %) (:rels context)))\n\n(defn- context-resolve-val [context sym]\n  (when-some [rel (rel-with-attr context sym)]\n    (when-some [tuple (first (:tuples rel))]\n      (#?(:cljs da/aget :clj get) tuple ((:attrs rel) sym)))))\n\n(defn- rel-contains-attrs? [rel attrs]\n  (some #(contains? (:attrs rel) %) attrs))\n\n(defn- rel-prod-by-attrs [context attrs]\n  (let [rels       (filter #(rel-contains-attrs? % attrs) (:rels context))\n        production (reduce prod-rel rels)]\n    [(update context :rels #(remove (set rels) %)) production]))\n\n(defn -call-fn [context rel f args]\n  (let [sources     (:sources context)\n        attrs       (:attrs rel)\n        len         (count args)\n        static-args (da/make-array len)\n        tuples-args (da/make-array len)]\n    (dotimes [i len]\n      (let [arg (nth args i)]\n        (if (symbol? arg) \n          (if-some [source (get sources arg)]\n            (da/aset static-args i source)\n            (da/aset tuples-args i (get attrs arg)))\n          (da/aset static-args i arg))))\n    ;; CLJS `apply` + `vector` will hold onto mutable array of arguments directly\n    ;; https://github.com/tonsky/datascript/issues/262\n    (if #?(:clj  false\n           :cljs (identical? f vector))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (let [args (da/aclone static-args)]\n          (dotimes [i len]\n            (when-some [tuple-idx (aget tuples-args i)]\n              (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n                (da/aset args i v))))\n          (apply f args)))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (dotimes [i len]\n          (when-some [tuple-idx (aget tuples-args i)]\n            (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n              (da/aset static-args i v))))\n        (apply f static-args)))))\n\n(defn- resolve-sym [sym]\n  #?(:cljs nil\n     :clj (when (namespace sym)\n            (when-some [v (resolve sym)] @v))))\n\n(defn filter-by-pred [context clause]\n  (let [[[f & args]] clause\n        pred         (or (get built-ins f)\n                         (context-resolve-val context f)\n                         (resolve-sym f)\n                         (when (nil? (rel-with-attr context f))\n                           (raise \"Unknown predicate '\" f \" in \" clause\n                                  {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel      (if pred\n                       (let [tuple-pred (-call-fn context production pred args)]\n                         (update production :tuples #(filter tuple-pred %)))\n                       (assoc production :tuples []))]\n    (update context :rels conj new-rel)))\n\n(defn bind-by-fn [context clause]\n  (let [[[f & args] out] clause\n        binding  (dp/parse-binding out)\n        fun      (or (get built-ins f)\n                     (context-resolve-val context f)\n                     (resolve-sym f)\n                     (when (nil? (rel-with-attr context f))\n                       (raise \"Unknown function '\" f \" in \" clause\n                              {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel  (if fun\n                   (let [tuple-fn (-call-fn context production fun args)\n                        rels     (for [tuple (:tuples production)\n                                       :let  [val (tuple-fn tuple)]\n                                       :when (not (nil? val))]\n                                   (prod-rel (Relation. (:attrs production) [tuple])\n                                             (in->rel binding val)))]\n                     (if (empty? rels)\n                       (prod-rel production (empty-rel binding))\n                       (reduce sum-rel rels)))\n                   (prod-rel (assoc production :tuples []) (empty-rel binding)))]\n    (update context :rels collapse-rels new-rel)))\n\n;;; RULES\n\n(defn rule? [context clause]\n  (and (sequential? clause)\n       (contains? (:rules context)\n                  (if (source? (first clause))\n                    (second clause)\n                    (first clause)))))\n\n(def rule-seqid (atom 0))\n\n(defn expand-rule [clause context used-args]\n  (let [[rule & call-args] clause\n        seqid              (swap! rule-seqid inc)\n        branches           (get (:rules context) rule)]\n    (for [branch branches\n          :let [[[_ & rule-args] & clauses] branch\n                replacements (zipmap rule-args call-args)]]\n      (walk/postwalk\n       #(if (free-var? %)\n          (db/some-of\n            (replacements %)\n            (symbol (str (name %) \"__auto__\" seqid)))\n          %)\n        clauses))))\n\n(defn remove-pairs [xs ys]\n  (let [pairs (->> (map vector xs ys)\n                   (remove (fn [[x y]] (= x y))))]\n    [(map first pairs)\n     (map second pairs)]))\n\n(defn rule-gen-guards [rule-clause used-args]\n  (let [[rule & call-args] rule-clause\n        prev-call-args     (get used-args rule)]\n    (for [prev-args prev-call-args\n          :let [[call-args prev-args] (remove-pairs call-args prev-args)]]\n      [(concat ['-differ?] call-args prev-args)])))\n\n(defn walk-collect [form pred]\n  (let [res (atom [])]\n    (walk/postwalk #(do (when (pred %) (swap! res conj %)) %) form)\n    @res))\n\n(defn collect-vars [clause]\n  (set (walk-collect clause free-var?)))\n\n(defn split-guards [clauses guards]\n  (let [bound-vars (collect-vars clauses)\n        pred       (fn [[[_ & vars]]] (every? bound-vars vars))]\n    [(filter pred guards)\n     (remove pred guards)]))\n\n(defn solve-rule [context clause]\n  (let [final-attrs     (filter free-var? clause)\n        final-attrs-map (zipmap final-attrs (range))\n;;         clause-cache    (atom {}) ;; TODO\n        solve           (fn [prefix-context clauses]\n                          (reduce -resolve-clause prefix-context clauses))\n        empty-rels?     (fn [context]\n                          (some #(empty? (:tuples %)) (:rels context)))]\n    (loop [stack (list {:prefix-clauses []\n                        :prefix-context context\n                        :clauses        [clause]\n                        :used-args      {}\n                        :pending-guards {}})\n           rel   (Relation. final-attrs-map [])]\n      (if-some [frame (first stack)]\n        (let [[clauses [rule-clause & next-clauses]] (split-with #(not (rule? context %)) (:clauses frame))]\n          (if (nil? rule-clause)\n\n            ;; no rules -> expand, collect, sum\n            (let [context (solve (:prefix-context frame) clauses)\n                  tuples  (-collect context final-attrs)\n                  new-rel (Relation. final-attrs-map tuples)]\n              (recur (next stack) (sum-rel rel new-rel)))\n\n            ;; has rule -> add guards -> check if dead -> expand rule -> push to stack, recur\n            (let [[rule & call-args]     rule-clause\n                  guards                 (rule-gen-guards rule-clause (:used-args frame))\n                  [active-gs pending-gs] (split-guards (concat (:prefix-clauses frame) clauses)\n                                                       (concat guards (:pending-guards frame)))]\n              (if (some #(= % '[(-differ?)]) active-gs) ;; trivial always false case like [(not= [?a ?b] [?a ?b])]\n\n                ;; this branch has no data, just drop it from stack\n                (recur (next stack) rel)\n\n                (let [prefix-clauses (concat clauses active-gs)\n                      prefix-context (solve (:prefix-context frame) prefix-clauses)]\n                  (if (empty-rels? prefix-context)\n\n                    ;; this branch has no data, just drop it from stack\n                    (recur (next stack) rel)\n\n                    ;; need to expand rule to branches\n                    (let [used-args  (assoc (:used-args frame) rule\n                                       (conj (get (:used-args frame) rule []) call-args))\n                          branches   (expand-rule rule-clause context used-args)]\n                      (recur (concat\n                               (for [branch branches]\n                                 {:prefix-clauses prefix-clauses\n                                  :prefix-context prefix-context\n                                  :clauses        (concatv branch next-clauses)\n                                  :used-args      used-args\n                                  :pending-guards pending-gs})\n                               (next stack))\n                             rel))))))))\n        rel))))\n\n(defn resolve-pattern-lookup-refs [source pattern]\n  (if (satisfies? db/IDB source)\n    (let [[e a v tx] pattern]\n      (->\n        [(if (or (lookup-ref? e) (attr? e)) (db/entid-strict source e) e)\n         a\n         (if (and v (attr? a) (db/ref? source a) (or (lookup-ref? v) (attr? v))) (db/entid-strict source v) v)\n         (if (lookup-ref? tx) (db/entid-strict source tx) tx)]\n        (subvec 0 (count pattern))))\n    pattern))\n\n(defn dynamic-lookup-attrs [source pattern]\n  (let [[e a v tx] pattern]\n    (cond-> #{}\n      (free-var? e) (conj e)\n      (free-var? tx) (conj tx)\n      (and\n        (free-var? v)\n        (not (free-var? a))\n        (db/ref? source a)) (conj v))))\n\n(defn limit-rel [rel vars]\n  (when-some [attrs' (not-empty (select-keys (:attrs rel) vars))]\n    (assoc rel :attrs attrs')))\n\n(defn limit-context [context vars]\n  (assoc context\n    :rels (->> (:rels context)\n               (keep #(limit-rel % vars)))))\n\n(defn bound-vars [context]\n  (into #{} (mapcat #(keys (:attrs %)) (:rels context))))\n\n(defn check-bound [bound vars form]\n  (when-not (set/subset? vars bound)\n    (let [missing (set/difference (set vars) bound)]\n      (raise \"Insufficient bindings: \" missing \" not bound in \" form\n             {:error :query/where\n              :form  form\n              :vars  missing}))))\n\n(defn check-free-same [bound branches form]\n  (let [free (mapv #(set/difference (collect-vars %) bound) branches)]\n    (when-not (apply = free)\n      (raise \"All clauses in 'or' must use same set of free vars, had \" free \" in \" form\n             {:error :query/where\n              :form  form\n              :vars  free}))))\n\n(defn check-free-subset [bound vars branches]\n  (let [free (set (remove bound vars))]\n    (doseq [branch branches]\n      (when-some [missing (not-empty (set/difference free (collect-vars branch)))]\n        (prn branch bound vars free)\n        (raise \"All clauses in 'or' must use same set of free vars, had \" missing \" not bound in \" branch\n          {:error :query/where\n           :form  branch\n           :vars  missing})))))\n\n(defn -resolve-clause\n  ([context clause]\n    (-resolve-clause context clause clause))\n  ([context clause orig-clause]\n   (condp looks-like? clause\n     [[symbol? '*]] ;; predicate [(pred ?a ?b ?c)]\n     (filter-by-pred context clause)\n     \n     [[symbol? '*] '_] ;; function [(fn ?a ?b) ?res]\n     (bind-by-fn context clause)\n     \n     [source? '*] ;; source + anything\n     (let [[source-sym & rest] clause]\n       (binding [*implicit-source* (get (:sources context) source-sym)]\n         (-resolve-clause context rest clause)))\n     \n     '[or *] ;; (or ...)\n     (let [[_ & branches] clause\n           _        (check-free-same (bound-vars context) branches clause)\n           contexts (map #(resolve-clause context %) branches)\n           rels     (map #(reduce hash-join (:rels %)) contexts)]\n       (assoc (first contexts) :rels [(reduce sum-rel rels)]))\n     \n     '[or-join [[*] *] *] ;; (or-join [[req-vars] vars] ...)\n     (let [[_ [req-vars & vars] & branches] clause\n           bound (bound-vars context)]\n       (check-bound bound req-vars orig-clause)\n       (check-free-subset bound vars branches)\n       (recur context (list* 'or-join (concat req-vars vars) branches) clause))\n     \n     '[or-join [*] *] ;; (or-join [vars] ...)\n     (let [[_ vars & branches] clause\n           vars         (set vars)\n           _            (check-free-subset (bound-vars context) vars branches)\n           join-context (limit-context context vars)\n           contexts     (map #(-> join-context (resolve-clause %) (limit-context vars)) branches)\n           rels         (map #(reduce hash-join (:rels %)) contexts)\n           sum-rel      (reduce sum-rel rels)]\n       (update context :rels collapse-rels sum-rel))\n     \n     '[and *] ;; (and ...)\n     (let [[_ & clauses] clause]\n       (reduce resolve-clause context clauses))\n     \n     '[not *] ;; (not ...)\n     (let [[_ & clauses] clause\n           bound            (bound-vars context)\n           negation-vars    (collect-vars clauses)\n           _                (when (empty? (set/intersection bound negation-vars))\n                              (raise \"Insufficient bindings: none of \" negation-vars \" is bound in \" orig-clause\n                                {:error :query/where\n                                 :form  orig-clause}))\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           negation-context (reduce resolve-clause context' clauses)\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[not-join [*] *] ;; (not-join [vars] ...)\n     (let [[_ vars & clauses] clause\n           bound            (bound-vars context)\n           _                (check-bound bound vars orig-clause)\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           join-context     (limit-context context' vars)\n           negation-context (-> (reduce resolve-clause join-context clauses)\n                                (limit-context vars))\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[*] ;; pattern\n     (let [source   *implicit-source*\n           pattern  (resolve-pattern-lookup-refs source clause)\n           relation (lookup-pattern source pattern)]\n       (binding [*lookup-attrs* (if (satisfies? db/IDB source)\n                                  (dynamic-lookup-attrs source pattern)\n                                  *lookup-attrs*)]\n         (update context :rels collapse-rels relation))))))\n\n(defn resolve-clause [context clause]\n  (if (rule? context clause)\n    (if (source? (first clause))\n      (binding [*implicit-source* (get (:sources context) (first clause))]\n        (resolve-clause context (next clause)))\n      (update context :rels collapse-rels (solve-rule context clause)))\n    (-resolve-clause context clause)))\n\n(defn -q [context clauses]\n  (binding [*implicit-source* (get (:sources context) '$)]\n    (reduce resolve-clause context clauses)))\n\n(defn -collect\n  ([context symbols]\n    (let [rels (:rels context)]\n      (-collect [(da/make-array (count symbols))] rels symbols)))\n  ([acc rels symbols]\n    (if-some [rel (first rels)]\n      (let [keep-attrs (select-keys (:attrs rel) symbols)]\n        (if (empty? keep-attrs)\n          (recur acc (next rels) symbols)\n          (let [copy-map (to-array (map #(get keep-attrs %) symbols))\n                len      (count symbols)]\n            (recur (for [#?(:cljs t1\n                            :clj ^{:tag \"[[Ljava.lang.Object;\"} t1) acc\n                         t2 (:tuples rel)]\n                     (let [res (aclone t1)]\n                       (dotimes [i len]\n                         (when-some [idx (aget copy-map i)]\n                           (aset res i (#?(:cljs da/aget :clj get) t2 idx))))\n                       res))\n                   (next rels)\n                   symbols))))\n      acc)))\n\n(defn collect [context symbols]\n  (->> (-collect context symbols)\n       (map vec)\n       set))\n\n(defprotocol IContextResolve\n  (-context-resolve [var context]))\n\n(extend-protocol IContextResolve\n  Variable\n  (-context-resolve [var context]\n    (context-resolve-val context (.-symbol var)))\n  SrcVar\n  (-context-resolve [var context]\n    (get-in context [:sources (.-symbol var)]))\n  PlainSymbol\n  (-context-resolve [var _]\n    (or (get built-in-aggregates (.-symbol var))\n        (resolve-sym (.-symbol var))))\n  Constant\n  (-context-resolve [var _]\n    (.-value var)))\n\n(defn -aggregate [find-elements context tuples]\n  (mapv (fn [element fixed-value i]\n          (if (dp/aggregate? element)\n            (let [f    (-context-resolve (:fn element) context)\n                  args (map #(-context-resolve % context) (butlast (:args element)))\n                  vals (map #(nth % i) tuples)]\n              (apply f (concat args [vals])))\n            fixed-value))\n    find-elements\n    (first tuples)\n    (range)))\n\n(defn- idxs-of [pred coll]\n  (->> (map #(when (pred %1) %2) coll (range))\n       (remove nil?)))\n\n(defn aggregate [find-elements context resultset]\n  (let [group-idxs (idxs-of (complement dp/aggregate?) find-elements)\n        group-fn   (fn [tuple]\n                     (map #(nth tuple %) group-idxs))\n        grouped    (group-by group-fn resultset)]\n    (for [[_ tuples] grouped]\n      (-aggregate find-elements context tuples))))\n\n(defprotocol IPostProcess\n  (-post-process [find tuples]))\n\n(extend-protocol IPostProcess\n  FindRel\n  (-post-process [_ tuples] tuples)\n  FindColl\n  (-post-process [_ tuples] (into [] (map first) tuples))\n  FindScalar\n  (-post-process [_ tuples] (ffirst tuples))\n  FindTuple\n  (-post-process [_ tuples] (first tuples)))\n\n(defn- pull [find-elements context resultset]\n  (let [resolved (for [find find-elements]\n                   (when (dp/pull? find)\n                     [(-context-resolve (:source find) context)\n                      (dpp/parse-pull\n                        (-context-resolve (:pattern find) context))]))]\n    (for [tuple resultset]\n      (mapv (fn [env el]\n              (if env\n                (let [[src spec] env]\n                  (dpa/pull-spec src spec [el] false))\n                el))\n            resolved\n            tuple))))\n\n(def ^:private query-cache (volatile! (datascript.lru/lru lru-cache-size)))\n\n(defn memoized-parse-query [q]\n  (if-some [cached (get @query-cache q nil)]\n    cached\n    (let [qp (dp/parse-query q)]\n      (vswap! query-cache assoc q qp)\n      qp)))\n\n(defn q [q & inputs]\n  (let [parsed-q      (memoized-parse-query q)\n        find          (:qfind parsed-q)\n        find-elements (dp/find-elements find)\n        find-vars     (dp/find-vars find)\n        result-arity  (count find-elements)\n        with          (:qwith parsed-q)\n        ;; TODO utilize parser\n        all-vars      (concat find-vars (map :symbol with))\n        q             (cond-> q\n                        (sequential? q) dp/query->map)\n        wheres        (:where q)\n        context       (-> (Context. [] {} {})\n                        (resolve-ins (:qin parsed-q) inputs))\n        resultset     (-> context\n                        (-q wheres)\n                        (collect all-vars))]\n    (cond->> resultset\n      (:with q)\n        (mapv #(vec (subvec % 0 result-arity)))\n      (some dp/aggregate? find-elements)\n        (aggregate find-elements context)\n      (some dp/pull? find-elements)\n        (pull find-elements context)\n      true\n        (-post-process find))))\n"]}