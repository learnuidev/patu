{"version":3,"sources":["devtools/formatters/printing.cljs"],"mappings":"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","names":["devtools.formatters.printing/markup?","value","cljs.core/meta","devtools.formatters.printing/mark-as-markup","cljs.core/with-meta","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","devtools.formatters.printing/build-markup","seq25738","G__25739","cljs.core/first","cljs.core/next","G__25740","self__4723__auto__","markup-db","fn-key","args","f","cljs.core.get","js/Error","cljs.core.apply","devtools.formatters.printing/wrap-value-as-reference-if-needed","or__4126__auto__","devtools.formatters.helpers/directly-printable?","devtools.formatters.printing.build_markup","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","devtools.formatters.printing/TemplateWriter","devtools.formatters.printing/->TemplateWriter","group","_","a","cljs.core.concat","o","devtools.formatters.printing/make-template-writer","devtools.formatters.printing/already-reference?","temp__5733__auto__","tag","cljs.core._EQ_","devtools.formatters.printing/wrap-group-in-reference-if-needed","obj","cljs.core/not","devtools.formatters.helpers/expandable?","devtools.formatters.helpers/abbreviated?","expandable-markup","surrogate-markup","reference-markup","devtools.formatters.printing/wrap-group-in-circular-warning-if-needed","circular?","devtools.formatters.printing/wrap-group-in-meta-if-needed","p1__25760#","devtools.formatters.helpers/should-render?","cljs.core.partial","devtools.formatters.printing/detect-edge-case-and-patch-it","cljs.core/count","cljs.core.nth","devtools.formatters.printing/post-process-printed-output","output-group","devtools.formatters.printing/alt-printer-job","writer","opts","map__25769","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core/native-satisfies?","_e__24830__auto__","e25773","devtools.format/IDevtoolsFormat","e25777","devtools.protocols/IFormat","atomic-markup","default-impl","inner-opts","cljs.core/*print-level*","cljs.core.assoc","devtools.formatters.printing/alt-printer-impl","*current-state*-orig-val__25779","*current-state*-temp-val__25780","devtools.formatters.state/*current-state*","devtools.formatters.state/get-current-state","map__25781","devtools.formatters.state/is-circular?","inner-writer","devtools.formatters.state/push-object-to-current-history!","devtools.formatters.printing/managed-print","printer","devtools.prefs/pref","job-fn","managed-print-level","devtools.formatters.state/get-managed-print-level","*print-level*-orig-val__25786","*print-level*-temp-val__25787","p1__25785#","devtools.formatters.state/update-current-state!","devtools.formatters.state/set-managed-print-level","devtools.formatters.printing/managed-print-via-writer","cljs.core/pr-seq-writer","devtools.formatters.printing/managed-print-via-protocol","cljs.core/-pr-writer"],"sourcesContent":["(ns devtools.formatters.printing\n  (:require-macros [devtools.oops :refer [safe-call]])\n  (:require [devtools.prefs :refer [pref]]\n            [devtools.format :refer [IDevtoolsFormat]]\n            [devtools.protocols :refer [ITemplate IGroup ISurrogate IFormat]]\n            [devtools.formatters.state :refer [push-object-to-current-history! *current-state* get-current-state\n                                               is-circular? get-managed-print-level set-managed-print-level\n                                               update-current-state!]]\n            [devtools.formatters.helpers :refer [cljs-value? expandable? abbreviated? directly-printable? should-render?]]))\n\n; -- helpers ----------------------------------------------------------------------------------------------------------------\n\n(defn markup? [value]\n  (::markup (meta value)))\n\n(defn mark-as-markup [value]\n  (with-meta value {::markup true}))\n\n(defn build-markup [markup-db fn-key & args]\n  (let [f (get markup-db fn-key)]\n    (assert f (str \"missing markup method in markup-db: \" fn-key))\n    (mark-as-markup (apply f args))))\n\n(defn wrap-value-as-reference-if-needed [markup-db value]\n  (if (or (directly-printable? value) (markup? value))\n    value\n    (build-markup markup-db :reference-surrogate value)))\n\n; -- TemplateWriter ---------------------------------------------------------------------------------------------------------\n\n(deftype TemplateWriter [^:mutable group markup-db]\n  Object\n  (merge [_ a] (set! group (concat group a)))\n  (get-group [_] group)\n  IWriter\n  (-write [_ o] (set! group (concat group [(wrap-value-as-reference-if-needed markup-db o)])))                                ; issue #21\n  (-flush [_] nil))\n\n(defn make-template-writer [markup-db]\n  (TemplateWriter. [] markup-db))\n\n; -- post-processing --------------------------------------------------------------------------------------------------------\n\n(defn already-reference? [group]\n  (if-let [tag (first (first group))]\n    (= tag \"reference\")))\n\n(defn wrap-group-in-reference-if-needed [group obj markup-db]\n  (if (and (not (already-reference? group))\n           (or (expandable? obj) (abbreviated? group)))\n    (let [expandable-markup (apply build-markup markup-db :expandable group)\n          surrogate-markup (build-markup markup-db :raw-surrogate obj expandable-markup :target)\n          reference-markup (build-markup markup-db :reference surrogate-markup)]\n      [reference-markup])\n    group))\n\n(defn wrap-group-in-circular-warning-if-needed [group markup-db circular?]\n  (if circular?\n    [(apply build-markup markup-db :circular-reference group)]\n    group))\n\n(defn wrap-group-in-meta-if-needed [group value markup-db]\n  (if (should-render? :render-metas value #(some? (meta %)))\n    [(apply (partial (:meta-wrapper markup-db) (meta value)) group)]\n    group))\n\n; default printer implementation can do this:\n;   :else (write-all writer \"#<\" (str obj) \">\")\n; we want to wrap stringified obj in a reference for further inspection\n;\n; this behaviour changed in https://github.com/clojure/clojurescript/commit/34c3b8985ed8197d90f441c46d168c4024a20eb8\n; newly functions and :else branch print \"#object [\" ... \"]\"\n;\n; in some situations obj can still be a clojurescript value (e.g. deftypes)\n; we have to implement a special flag to prevent infinite recursion\n; see https://github.com/binaryage/cljs-devtools/issues/2\n;     https://github.com/binaryage/cljs-devtools/issues/8\n(defn detect-edge-case-and-patch-it [group obj markup-db]\n  (cond\n    (or\n      (and (= (count group) 5) (= (nth group 0) \"#object[\") (= (nth group 4) \"\\\"]\"))                                          ; function case\n      (and (= (count group) 5) (= (nth group 0) \"#object[\") (= (nth group 4) \"]\"))                                            ; :else -constructor case\n      (and (= (count group) 3) (= (nth group 0) \"#object[\") (= (nth group 2) \"]\")))                                           ; :else -cljs$lang$ctorStr case\n    [(build-markup markup-db :native-reference obj)]\n\n    (and (= (count group) 3) (= (nth group 0) \"#<\") (= (str obj) (nth group 1)) (= (nth group 2) \">\"))                        ; old code prior r1.7.28\n    [(nth group 0) (build-markup :native-reference obj) (nth group 2)]\n\n    :else group))\n\n(defn post-process-printed-output [output-group obj markup-db circular?]\n  (-> output-group\n      (detect-edge-case-and-patch-it obj markup-db)                                                                           ; an ugly hack\n      (wrap-group-in-reference-if-needed obj markup-db)\n      (wrap-group-in-circular-warning-if-needed markup-db circular?)\n      (wrap-group-in-meta-if-needed obj markup-db)))\n\n; -- alternative printer ----------------------------------------------------------------------------------------------------\n\n(defn alt-printer-job [obj writer opts]\n  (let [{:keys [markup-db]} opts]\n    (if (or (safe-call satisfies? false IDevtoolsFormat obj)\n            (safe-call satisfies? false IFormat obj))                                                                         ; we have to wrap value in reference if detected IFormat\n      (-write writer (build-markup markup-db :reference obj))\n      (if-let [atomic-markup (build-markup markup-db :atomic obj)]\n        (-write writer atomic-markup)\n        (let [default-impl (:fallback-impl opts)\n              ; we want to limit print-level, at max-print-level level use maximal abbreviation e.g. [...] or {...}\n              inner-opts (if (= *print-level* 1) (assoc opts :print-length 0) opts)]\n          (default-impl obj writer inner-opts))))))\n\n(defn alt-printer-impl [obj writer opts]\n  (binding [*current-state* (get-current-state)]\n    (let [{:keys [markup-db]} opts\n          circular? (is-circular? obj)\n          inner-writer (make-template-writer (:markup-db opts))]\n      (push-object-to-current-history! obj)\n      (alt-printer-job obj inner-writer opts)\n      (.merge writer (post-process-printed-output (.get-group inner-writer) obj markup-db circular?)))))\n\n; -- common code for managed printing ---------------------------------------------------------------------------------------\n\n(defn managed-print [tag markup-db printer]\n  (let [writer (make-template-writer markup-db)\n        opts {:alt-impl     alt-printer-impl\n              :markup-db    markup-db\n              :print-length (pref :max-header-elements)\n              :more-marker  (pref :more-marker)}\n        job-fn #(printer writer opts)]\n    (if-let [managed-print-level (get-managed-print-level)]\n      (binding [*print-level* managed-print-level]\n        (update-current-state! #(set-managed-print-level % nil))                                                              ; reset managed-print-level so it does not propagate further down in expaded data\n        (job-fn))\n      (job-fn))\n    (concat [(pref tag)] (.get-group writer))))\n\n; -- public printing API ----------------------------------------------------------------------------------------------------\n\n(defn managed-print-via-writer [value tag markup-db]\n  (managed-print tag markup-db (fn [writer opts]\n                                 (pr-seq-writer [value] writer opts))))                                                       ; note we use pr-seq-writer because pr-writer is private for some reason\n\n(defn managed-print-via-protocol [value tag markup-db]\n  (managed-print tag markup-db (fn [writer opts]\n                                 (-pr-writer value writer opts))))\n"]}