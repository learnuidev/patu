{
"version":3,
"file":"module$node_modules$Phaser$src$geom$triangle$BuildFromPolygon.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,8DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO1H,IAAIC,OAASH,OAAA,CAAQ,oDAAR,CAAb,CACII,SAAWJ,OAAA,CAAQ,uDAAR,CA6DfC,OAAAC,QAAA,CA3CuBG,QAAS,CAACC,IAAD,CAAOC,KAAP,CAAcC,MAAd,CAAsBC,MAAtB,CAA8BC,GAA9B,CAChC,CACkBC,IAAAA,EAAd,GAAIJ,KAAJ,GAA2BA,KAA3B,CAAmC,IAAnC,CACeI,KAAAA,EAAf,GAAIH,MAAJ,GAA4BA,MAA5B,CAAqC,CAArC,CACeG,KAAAA,EAAf,GAAIF,MAAJ,GAA4BA,MAA5B,CAAqC,CAArC,CACYE,KAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,EAA/B,CAEIE,MAAAA,CAAOT,MAAA,CAAOG,IAAP,CAAaC,KAAb,CAeX,KAbA,IAAIM,CAAJ,CACIC,CADJ,CAEIC,CAFJ,CAIIC,EAJJ,CAOIC,EAPJ,CAUIC,EAVJ,CAaSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBP,KAAAQ,OAApB,CAAiCD,CAAjC,EAAsC,CAAtC,CAEIN,CAaA,CAbID,KAAA,CAAKO,CAAL,CAaJ;AAZAL,CAYA,CAZIF,KAAA,CAAKO,CAAL,CAAS,CAAT,CAYJ,CAXAJ,CAWA,CAXIH,KAAA,CAAKO,CAAL,CAAS,CAAT,CAWJ,CATAH,EASA,CATKV,IAAA,CAAS,CAAT,CAAKO,CAAL,CASL,CATmBL,MASnB,CARAa,CAQA,CARKf,IAAA,CAAU,CAAV,CAAMO,CAAN,CAAe,CAAf,CAQL,CARyBJ,MAQzB,CANAQ,EAMA,CANKX,IAAA,CAAS,CAAT,CAAKQ,CAAL,CAML,CANmBN,MAMnB,CALAc,CAKA,CALKhB,IAAA,CAAU,CAAV,CAAMQ,CAAN,CAAe,CAAf,CAKL,CALyBL,MAKzB,CAHAS,EAGA,CAHKZ,IAAA,CAAS,CAAT,CAAKS,CAAL,CAGL,CAHmBP,MAGnB,CAFAe,CAEA,CAFKjB,IAAA,CAAU,CAAV,CAAMS,CAAN,CAAe,CAAf,CAEL,CAFyBN,MAEzB,CAAAC,GAAAc,KAAA,CAAS,IAAIpB,QAAJ,CAAaY,EAAb,CAAiBK,CAAjB,CAAqBJ,EAArB,CAAyBK,CAAzB,CAA6BJ,EAA7B,CAAiCK,CAAjC,CAAT,CAGJ,OAAOb,IAvCX,CA3B0H;",
"sources":["node_modules/Phaser/src/geom/triangle/BuildFromPolygon.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$triangle$BuildFromPolygon\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar EarCut = require('../polygon/Earcut');\r\nvar Triangle = require('./Triangle');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Geom.Triangle.BuildFromPolygon\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Triangle[]} O - [out,$return]\r\n *\r\n * @param {array} data - A flat array of vertice coordinates like [x0,y0, x1,y1, x2,y2, ...]\r\n * @param {array} [holes=null] - An array of hole indices if any (e.g. [5, 8] for a 12-vertice input would mean one hole with vertices 5\u20137 and another with 8\u201311).\r\n * @param {number} [scaleX=1] - [description]\r\n * @param {number} [scaleY=1] - [description]\r\n * @param {(array|Phaser.Geom.Triangle[])} [out] - [description]\r\n *\r\n * @return {(array|Phaser.Geom.Triangle[])} [description]\r\n */\r\nvar BuildFromPolygon = function (data, holes, scaleX, scaleY, out)\r\n{\r\n    if (holes === undefined) { holes = null; }\r\n    if (scaleX === undefined) { scaleX = 1; }\r\n    if (scaleY === undefined) { scaleY = 1; }\r\n    if (out === undefined) { out = []; }\r\n\r\n    var tris = EarCut(data, holes);\r\n\r\n    var a;\r\n    var b;\r\n    var c;\r\n\r\n    var x1;\r\n    var y1;\r\n\r\n    var x2;\r\n    var y2;\r\n\r\n    var x3;\r\n    var y3;\r\n\r\n    for (var i = 0; i < tris.length; i += 3)\r\n    {\r\n        a = tris[i];\r\n        b = tris[i + 1];\r\n        c = tris[i + 2];\r\n\r\n        x1 = data[a * 2] * scaleX;\r\n        y1 = data[(a * 2) + 1] * scaleY;\r\n\r\n        x2 = data[b * 2] * scaleX;\r\n        y2 = data[(b * 2) + 1] * scaleY;\r\n\r\n        x3 = data[c * 2] * scaleX;\r\n        y3 = data[(c * 2) + 1] * scaleY;\r\n\r\n        out.push(new Triangle(x1, y1, x2, y2, x3, y3));\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = BuildFromPolygon;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","EarCut","Triangle","BuildFromPolygon","data","holes","scaleX","scaleY","out","undefined","tris","a","b","c","x1","x2","x3","i","length","y1","y2","y3","push"]
}
