{
"version":3,
"file":"module$node_modules$Phaser$src$renderer$webgl$WebGLPipeline.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/Phaser/src/renderer/webgl/WebGLPipeline.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$renderer$webgl$WebGLPipeline\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Utils = require('./Utils');\r\n\r\n/**\r\n * @classdesc\r\n * WebGLPipeline is a class that describes the way elements will be rendererd\r\n * in WebGL, specially focused on batching vertices (batching is not provided).\r\n * Pipelines are mostly used for describing 2D rendering passes but it's\r\n * flexible enough to be used for any type of rendering including 3D.\r\n * Internally WebGLPipeline will handle things like compiling shaders,\r\n * creating vertex buffers, assigning primitive topology and binding\r\n * vertex attributes.\r\n *\r\n * The config properties are:\r\n * - game: Current game instance.\r\n * - renderer: Current WebGL renderer.\r\n * - gl: Current WebGL context.\r\n * - topology: This indicates how the primitives are rendered. The default value is GL_TRIANGLES.\r\n *              Here is the full list of rendering primitives (https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants).\r\n * - vertShader: Source for vertex shader as a string.\r\n * - fragShader: Source for fragment shader as a string.\r\n * - vertexCapacity: The amount of vertices that shall be allocated\r\n * - vertexSize: The size of a single vertex in bytes.\r\n * - vertices: An optional buffer of vertices\r\n * - attributes: An array describing the vertex attributes\r\n *\r\n * The vertex attributes properties are:\r\n * - name : String - Name of the attribute in the vertex shader\r\n * - size : integer - How many components describe the attribute. For ex: vec3 = size of 3, float = size of 1\r\n * - type : GLenum - WebGL type (gl.BYTE, gl.SHORT, gl.UNSIGNED_BYTE, gl.UNSIGNED_SHORT, gl.FLOAT)\r\n * - normalized : boolean - Is the attribute normalized\r\n * - offset : integer - The offset in bytes to the current attribute in the vertex. Equivalent to offsetof(vertex, attrib) in C\r\n * Here you can find more information of how to describe an attribute:\r\n * - https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\r\n *\r\n * @class WebGLPipeline\r\n * @memberOf Phaser.Renderer.WebGL\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {object} config - [description]\r\n */\r\nvar WebGLPipeline = new Class({\r\n\r\n    initialize:\r\n\r\n    function WebGLPipeline (config)\r\n    {\r\n        /**\r\n         * Name of the Pipeline. Used for identifying\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#name\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.name = 'WebGLPipeline';\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#game\r\n         * @type {Phaser.Game}\r\n         * @since 3.0.0\r\n         */\r\n        this.game = config.game;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#view\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.0.0\r\n         */\r\n        this.view = config.game.canvas;\r\n\r\n        /**\r\n         * Used to store the current game resolution\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#resolution\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.resolution = config.game.config.resolution;\r\n\r\n        /**\r\n         * Width of the current viewport\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#width\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = config.game.config.width * this.resolution;\r\n\r\n        /**\r\n         * Height of the current viewport\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#height\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = config.game.config.height * this.resolution;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#gl\r\n         * @type {WebGLRenderingContext}\r\n         * @since 3.0.0\r\n         */\r\n        this.gl = config.gl;\r\n\r\n        /**\r\n         * How many vertices have been fed to the current pipeline.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexCount\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexCount = 0;\r\n\r\n        /**\r\n         * The limit of vertices that the pipeline can hold\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexCapacity\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexCapacity = config.vertexCapacity;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#renderer\r\n         * @type {Phaser.Renderer.WebGL.WebGLRenderer}\r\n         * @since 3.0.0\r\n         */\r\n        this.renderer = config.renderer;\r\n\r\n        /**\r\n         * Raw byte buffer of vertices.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexData\r\n         * @type {ArrayBuffer}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexData = (config.vertices ? config.vertices : new ArrayBuffer(config.vertexCapacity * config.vertexSize));\r\n\r\n        /**\r\n         * The handle to a WebGL vertex buffer object.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexBuffer\r\n         * @type {WebGLBuffer}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexBuffer = this.renderer.createVertexBuffer((config.vertices ? config.vertices : this.vertexData.byteLength), this.gl.STREAM_DRAW);\r\n\r\n        /**\r\n         * The handle to a WebGL program\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#program\r\n         * @type {WebGLProgram}\r\n         * @since 3.0.0\r\n         */\r\n        this.program = this.renderer.createProgram(config.vertShader, config.fragShader);\r\n\r\n        /**\r\n         * Array of objects that describe the vertex attributes\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#attributes\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.attributes = config.attributes;\r\n\r\n        /**\r\n         * The size in bytes of the vertex\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexSize\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexSize = config.vertexSize;\r\n\r\n        /**\r\n         * The primitive topology which the pipeline will use to submit draw calls\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#topology\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.topology = config.topology;\r\n\r\n        /**\r\n         * Uint8 view to the vertex raw buffer. Used for uploading vertex buffer resources\r\n         * to the GPU.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#bytes\r\n         * @type {Uint8Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.bytes = new Uint8Array(this.vertexData);\r\n\r\n        /**\r\n         * This will store the amount of components of 32 bit length\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexComponentCount\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexComponentCount = Utils.getComponentCount(config.attributes, this.gl);\r\n\r\n        /**\r\n         * Indicates if the current pipeline is flushing the contents to the GPU.\r\n         * When the variable is set the flush function will be locked.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#flushLocked\r\n         * @type {boolean}\r\n         * @since 3.1.0\r\n         */\r\n        this.flushLocked = false;\r\n\r\n        /**\r\n         * Indicates if the current pipeline is active or not for this frame only.\r\n         * Reset in the onRender method.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#active\r\n         * @type {boolean}\r\n         * @since 3.10.0\r\n         */\r\n        this.active = false;\r\n    },\r\n\r\n    /**\r\n     * Called when the Game has fully booted and the Renderer has finished setting up.\r\n     *\r\n     * By this stage all Game level systems are now in place and you can perform any final\r\n     * tasks that the pipeline may need that relied on game systems such as the Texture Manager.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#boot\r\n     * @since 3.11.0\r\n     */\r\n    boot: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * Adds a description of vertex attribute to the pipeline\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#addAttribute\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - Name of the vertex attribute\r\n     * @param {integer} size - Vertex component size\r\n     * @param {integer} type - Type of the attribute\r\n     * @param {boolean} normalized - Is the value normalized to a range\r\n     * @param {integer} offset - Byte offset to the beginning of the first element in the vertex\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    addAttribute: function (name, size, type, normalized, offset)\r\n    {\r\n        this.attributes.push({\r\n            name: name,\r\n            size: size,\r\n            type: this.renderer.glFormats[type],\r\n            normalized: normalized,\r\n            offset: offset\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Check if the current batch of vertices is full.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#shouldFlush\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    shouldFlush: function ()\r\n    {\r\n        return (this.vertexCount >= this.vertexCapacity);\r\n    },\r\n\r\n    /**\r\n     * Resizes the properties used to describe the viewport\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#resize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {number} resolution - [description]\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    resize: function (width, height, resolution)\r\n    {\r\n        this.width = width * resolution;\r\n        this.height = height * resolution;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Binds the pipeline resources, including programs, vertex buffers and binds attributes\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#bind\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    bind: function ()\r\n    {\r\n        var gl = this.gl;\r\n        var vertexBuffer = this.vertexBuffer;\r\n        var attributes = this.attributes;\r\n        var program = this.program;\r\n        var renderer = this.renderer;\r\n        var vertexSize = this.vertexSize;\r\n\r\n        renderer.setProgram(program);\r\n        renderer.setVertexBuffer(vertexBuffer);\r\n\r\n        for (var index = 0; index < attributes.length; ++index)\r\n        {\r\n            var element = attributes[index];\r\n            var location = gl.getAttribLocation(program, element.name);\r\n\r\n            if (location >= 0)\r\n            {\r\n                gl.enableVertexAttribArray(location);\r\n                gl.vertexAttribPointer(location, element.size, element.type, element.normalized, vertexSize, element.offset);\r\n            }\r\n            else\r\n            {\r\n                gl.disableVertexAttribArray(location);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#onBind\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    onBind: function ()\r\n    {\r\n        // This is for updating uniform data it's called on each bind attempt.\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#onPreRender\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    onPreRender: function ()\r\n    {\r\n        // called once every frame\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#onRender\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Scene} scene - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - [description]\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    onRender: function ()\r\n    {\r\n        // called for each camera\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#onPostRender\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    onPostRender: function ()\r\n    {\r\n        // called once every frame\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Uploads the vertex data and emits a draw call\r\n     * for the current batch of vertices.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#flush\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    flush: function ()\r\n    {\r\n        if (this.flushLocked) { return this; }\r\n\r\n        this.flushLocked = true;\r\n\r\n        var gl = this.gl;\r\n        var vertexCount = this.vertexCount;\r\n        var topology = this.topology;\r\n        var vertexSize = this.vertexSize;\r\n\r\n        if (vertexCount === 0)\r\n        {\r\n            this.flushLocked = false;\r\n            return;\r\n        }\r\n\r\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.bytes.subarray(0, vertexCount * vertexSize));\r\n        gl.drawArrays(topology, 0, vertexCount);\r\n\r\n        this.vertexCount = 0;\r\n        this.flushLocked = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#destroy\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    destroy: function ()\r\n    {\r\n        var gl = this.gl;\r\n\r\n        gl.deleteProgram(this.program);\r\n        gl.deleteBuffer(this.vertexBuffer);\r\n\r\n        delete this.program;\r\n        delete this.vertexBuffer;\r\n        delete this.gl;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat1\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {number} x - [description]\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat1: function (name, x)\r\n    {\r\n        this.renderer.setFloat1(this.program, name, x);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat2\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat2: function (name, x, y)\r\n    {\r\n        this.renderer.setFloat2(this.program, name, x, y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat3\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} z - [description]\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat3: function (name, x, y, z)\r\n    {\r\n        this.renderer.setFloat3(this.program, name, x, y, z);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat4\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {number} x - X component of the uniform\r\n     * @param {number} y - Y component of the uniform\r\n     * @param {number} z - Z component of the uniform\r\n     * @param {number} w - W component of the uniform\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat4: function (name, x, y, z, w)\r\n    {\r\n        this.renderer.setFloat4(this.program, name, x, y, z, w);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat1v\r\n     * @since 3.13.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat1v: function (name, arr)\r\n    {\r\n        this.renderer.setFloat1v(this.program, name, arr);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat2v\r\n     * @since 3.13.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat2v: function (name, arr)\r\n    {\r\n        this.renderer.setFloat2v(this.program, name, arr);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat3v\r\n     * @since 3.13.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat3v: function (name, arr)\r\n    {\r\n        this.renderer.setFloat3v(this.program, name, arr);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat4v\r\n     * @since 3.13.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat4v: function (name, arr)\r\n    {\r\n        this.renderer.setFloat4v(this.program, name, arr);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt1\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {integer} x - [description]\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setInt1: function (name, x)\r\n    {\r\n        this.renderer.setInt1(this.program, name, x);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt2\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {integer} x - [description]\r\n     * @param {integer} y - [description]\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setInt2: function (name, x, y)\r\n    {\r\n        this.renderer.setInt2(this.program, name, x, y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt3\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {integer} x - [description]\r\n     * @param {integer} y - [description]\r\n     * @param {integer} z - [description]\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setInt3: function (name, x, y, z)\r\n    {\r\n        this.renderer.setInt3(this.program, name, x, y, z);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt4\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {integer} x - X component of the uniform\r\n     * @param {integer} y - Y component of the uniform\r\n     * @param {integer} z - Z component of the uniform\r\n     * @param {integer} w - W component of the uniform\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setInt4: function (name, x, y, z, w)\r\n    {\r\n        this.renderer.setInt4(this.program, name, x, y, z, w);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setMatrix2\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {boolean} transpose - [description]\r\n     * @param {Float32Array} matrix - [description]\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setMatrix2: function (name, transpose, matrix)\r\n    {\r\n        this.renderer.setMatrix2(this.program, name, transpose, matrix);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setMatrix3\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {boolean} transpose - [description]\r\n     * @param {Float32Array} matrix - [description]\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setMatrix3: function (name, transpose, matrix)\r\n    {\r\n        this.renderer.setMatrix3(this.program, name, transpose, matrix);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setMatrix4\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {boolean} transpose - Should the matrix be transpose\r\n     * @param {Float32Array} matrix - Matrix data\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setMatrix4: function (name, transpose, matrix)\r\n    {\r\n        this.renderer.setMatrix4(this.program, name, transpose, matrix);\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = WebGLPipeline;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Utils","WebGLPipeline","initialize","config","name","game","view","canvas","resolution","width","height","gl","vertexCount","vertexCapacity","renderer","vertexData","vertices","ArrayBuffer","vertexSize","vertexBuffer","createVertexBuffer","byteLength","STREAM_DRAW","program","createProgram","vertShader","fragShader","attributes","topology","bytes","Uint8Array","vertexComponentCount","getComponentCount","active","flushLocked","boot","addAttribute","size","type","normalized","offset","push","glFormats","shouldFlush","resize","bind","setProgram","setVertexBuffer","index","length","element","location","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","disableVertexAttribArray","onBind","onPreRender","onRender","onPostRender","flush","bufferSubData","ARRAY_BUFFER","subarray","drawArrays","destroy","deleteProgram","deleteBuffer","setFloat1","x","setFloat2","y","setFloat3","z","setFloat4","w","setFloat1v","arr","setFloat2v","setFloat3v","setFloat4v","setInt1","setInt2","setInt3","setInt4","setMatrix2","transpose","matrix","setMatrix3","setMatrix4"]
}
