{"version":3,"sources":["app/kaboomv5/gfx.cljs"],"mappings":"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","names":["app.kaboomv5.gfx/def-origin","app.kaboomv5.gfx/queue-count","app.kaboomv5.gfx/bg-grid-size","app.kaboomv5.gfx/stride","app.kaboomv5.gfx/vert-template","app.kaboomv5.gfx/frag-template","app.kaboomv5.gfx/default-vert","app.kaboomv5.gfx/default-frag","app.kaboomv5.gfx/gfx-init","app.kaboomv5.math.core/mat4","app.kaboomv5.gfx/gfx","cljs.core.atom","app.kaboomv5.gfx/init-gl","gl","gl-ctx","cljs.core/reset!","app.kaboomv5.gfx/height","cljs.core/deref","app.kaboomv5.app.state/app-state","cljs.core.get_in","app.kaboomv5.gfx/width","app.kaboomv5.gfx/center","app.kaboomv5.gfx/scale","app.kaboomv5.gfx/clear-color","r","b","g","a","app.kaboomv5.gfx/draw-calls","app.kaboomv5.gfx/push-matrix","m","cljs.core.swap_BANG_","cljs.core/assoc","app.kaboomv5.gfx/push-translate","pv2","and__4115__auto__","cljs.core/seq","app.kaboomv5.math.matrix/translate","p__26639","map__26640","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.kaboomv5.gfx/push-scale","x","y","scale","cljs.core.not_EQ_","app.kaboomv5.math.matrix/scale","app.kaboomv5.gfx/push-rot-x","num","app.kaboomv5.math.matrix/rot-x","app.kaboomv5.gfx/push-rot-y","app.kaboomv5.math.matrix/rot-y","app.kaboomv5.gfx/push-rot-z","app.kaboomv5.math.matrix/rot-z","app.kaboomv5.gfx/push-transform","cljs.core/update","cljs.core/conj","app.kaboomv5.gfx/pop-transform","ts","cljs.core/last","cljs.core/butlast","js/app","js/app.kaboomv5","js/app.kaboomv5.gfx","js/app.kaboomv5.gfx.get-info-log","method-table__4619__auto__","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__26643","cljs.core/MultiFn","cljs.core.symbol","app.kaboomv5.gfx/get-info-log","id","type","_","app.kaboomv5.gfx/tex-filter","G__26644","cljs.core/Keyword","app.kaboomv5.gfx/create-texture","app.kaboomv5.gfx/power-of-two","n","cljs.core._EQ_","cljs.core/rem","js/Math.log","app.kaboomv5.gfx/make-texture","data","wrap","cljs.core/clj->js","app.kaboomv5.gfx/make-tex","app.kaboomv5.gfx/ex-data2","var_args","G__26647","app.kaboomv5.gfx/bg-tex","js/Error","app.kaboomv5.gfx.bg_tex","js/ImageData","js/Uint8ClampedArray","G__26649","app.kaboomv5.gfx/empty-tex","app.kaboomv5.gfx.empty_tex","js/console.log","app.kaboomv5.gfx/make-font","tex","gw","gh","chars","cols","rows","qw","qh","chars-map","clojure.string.split","cljs.core/reduce-kv","font-map","index","char","prop","G__26650","G__26651","app.kaboomv5.math.core/vec2","js/Math.floor","cljs.core.assoc","app.kaboomv5.gfx/attach-shader","shader","app.kaboomv5.gfx/validate-program","pos","cljs.core/name","app.kaboomv5.gfx/attr-loc","app.kaboomv5.gl/get-attrib-location","app.kaboomv5.gfx/make-program","vert-shader","app.kaboomv5.gl/reg-shader","clojure.string/replace","frag-shader","app.kaboomv5.gl/create-program","app.kaboomv5.gl/attach-shader","app.kaboomv5.gl/bind-attrib-location","app.kaboomv5.gl/link-program","warning-msg","app.kaboomv5.gfx/make-program-alt","app.kaboomv5.gl/create-shader","vert-template","frag-template","app.kaboomv5.gl/compile-shader","app.kaboomv5.gfx/bind","app.kaboomv5.gl.use_program","app.kaboomv5.gfx/unbind","app.kaboomv5.gfx/send-float","name","val","loc","app.kaboomv5.gfx/send-vec2","app.kaboomv5.gfx/send-vec3","z","app.kaboomv5.gfx/send-vec4","w","app.kaboomv5.gfx/send-mat4","js/Float32Array","app.kaboomv5.gfx/send","uniform","iter__4529__auto__","s__26653","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__26655","cljs.core/chunk-buffer","i__26654","vec__26656","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26652","cljs.core/chunk-rest","vec__26659","cljs.core/first","cljs.core/cons","cljs.core/rest","app.kaboomv5.gfx/bind-attribs","normalized-data?","vsize","app.kaboomv5.gfx/flush!","js/Uint16Array","state","cljs.core.update","cljs.core/inc","app.kaboomv5.gfx/origin-pt","orig","G__26662","app.kaboomv5.gfx/create-index","idx","app.kaboomv5.gfx/set-tpu","prog","uni","p__26663","map__26664","app.kaboomv5.gfx/to-ndc","G__26666","G__26667","p__26668","map__26669","app.kaboomv5.gfx/create-vertex","uv","color","pt","app.kaboomv5.math.matrix/mult-vec2","app.kaboomv5.gfx/draw-raw","verts","indices","or__4126__auto__","cljs.core.map","cljs.core.mapcat","G__26672","app.kaboomv5.gfx/draw-quad","p__26673","map__26674","app.kaboomv5.gfx.draw_quad","width","height","origin","quad","rot","h","G__26676","G__26677","G__26678","q","app.kaboomv5.math.core/quad","app.kaboomv5.math.core/color","offset","G__26679","G__26680","app.kaboomv5.math.core/scale","G__26681","G__26682","G__26683","G__26684","G__26685","app.kaboomv5.math.core/vec3","app.kaboomv5.math.core/neg","G__26686","G__26687","G__26688","G__26689","G__26690","G__26691","G__26692","G__26693","G__26694","G__26695","G__26696","G__26697","G__26698","G__26699","G__26700","G__26701","G__26702","app.kaboomv5.gfx/frame-start","sc","app.kaboomv5.gfx/frame-end","app.kaboomv5.gfx/draw-rect","config","p__26703","map__26704","app.kaboomv5.gfx/draw-rect-stroke","p","G__26706","G__26707","G__26708","G__26709","G__26710","G__26711","G__26712","G__26713","app.kaboomv5.math.core/subtract","G__26714","G__26715","app.kaboomv5.math.core/add","G__26716","G__26717","app.kaboomv5.gfx/buffer-init","vbuf","ibuf","app.kaboomv5.gfx/tex-init","etex","btex","app.kaboomv5.gfx/get-clear-color","app.kaboomv5.gfx/init","map__26718","app.kaboomv5.gfx/init!","cljs.core/chunk-first"],"sourcesContent":["(ns app.kaboomv5.gfx\n  (:require [app.kaboomv5.math.core :as math]\n            [app.kaboomv5.math.matrix :as matrix]\n            [app.kaboomv5.math.vector :as vect]\n            [app.kaboomv5.app.state :as state]\n            [app.kaboomv5.gl :as kgl]\n            [clojure.string :as s]))\n\n;; ============================== 0. Constants =================================\n;; =============================================================================\n\n;; 0.1 Dimensions\n(def def-origin :topleft)\n(def queue-count 65536)\n(def bg-grid-size 64)\n(def stride 9);\n\n\n;; 0.2 Templates\n(def vert-template\n  \"\n  attribute vec3 a_pos;\n  attribute vec2 a_uv;\n  attribute vec4 a_color;\n\n  varying vec3 v_pos;\n  varying vec2 v_uv;\n  varying vec4 v_color;\n\n  vec4 def_vert() {\n  \t return vec4(a_pos, 1.0);\n  }\n\n  {{user}}\n\n  void main() {\n  \t vec4 pos = vert(a_pos, a_uv, a_color);\n  \t v_pos = a_pos;\n  \t v_uv = a_uv;\n  \t v_color = a_color;\n  \t gl_Position = pos;\n  }\")\n(def frag-template\n  \"\n  precision mediump float;\n\n  varying vec3 v_pos;\n  varying vec2 v_uv;\n  varying vec4 v_color;\n\n  uniform sampler2D u_tex;\n\n  vec4 def_frag() {\n  \treturn v_color * texture2D(u_tex, v_uv);\n  }\n\n  {{user}}\n\n  void main() {\n  \tgl_FragColor = frag(v_pos, v_uv, v_color, u_tex);\n  \tif (gl_FragColor.a == 0.0) {\n  \t\tdiscard;\n  \t}\n  }\")\n\n(def default-vert\n  \"\n  vec4 vert(vec3 pos, vec2 uv, vec4 color) {\n  \t return def_vert();\n  }\")\n(def default-frag\n  \"\n  vec4 frag(vec3 pos, vec2 uv, vec4 color, sampler2D tex) {\n    return def_frag();\n  }\")\n\n;; ================================= 1. State ==================================\n;; =============================================================================\n;; 0.3 Init State\n(def gfx-init\n  {:vbuf 0\n   :ibuf 0\n   :prog 0\n   :vqueue []\n   :iqueue []\n   :clear-color nil\n   :cur-prog nil\n   :def-tex nil\n   :cur-tex nil\n   :bg-tex nil\n   :cur-uniform {}\n   :transform (math/mat4)\n   :transform-stack []\n   :draw-calls 0\n   :last-draw-calls 0})\n\n;; 1. State\n(def gfx (atom gfx-init))\n\n(defn init-gl [gl gl-ctx]\n  (reset! gl gl-ctx))\n(comment\n  (:transform @gfx))\n\n;;\n;; ================================= 3. API ====================================\n;; =============================================================================\n\n;; ================================ 3.1 Dimension =============================\n(defn height []\n  (/ (.-drawingBufferHeight (:gl @state/app-state))\n     (get-in @state/app-state [:config :scale] 1)))\n\n(defn width []\n  (/ (.-drawingBufferWidth (:gl @state/app-state))\n     (get-in @state/app-state [:config :scale] 1)))\n\n(defn center []\n  [(/ (width) 2) (/ (height) 2)])\n(defn scale []\n  1)\n\n(defn clear-color [gl r b g a]\n  (.clearColor gl r b g a))\n\n(defn draw-calls []\n  (:last-draw-calls @gfx))\n\n;; ================================= 3.2 Push ====================================\n(defn push-matrix [m]\n  (swap! gfx assoc :transform m))\n\n(defn push-translate [pv2]\n  (when (and (seq pv2) (:transform @gfx))\n    (swap! gfx assoc :transform (matrix/translate (:transform @gfx) pv2))))\n\n(defn push-scale [{:keys [x y] :as scale}]\n  (when (and (seq scale)\n             (and (not= 1 x) (not= 1 y)))\n    (swap! gfx assoc :transform (matrix/scale (:transform @gfx) scale))))\n\n(defn push-rot-x [num]\n  (when num\n    (swap! gfx assoc :transform (matrix/rot-x (:transform @gfx) num))))\n\n(defn push-rot-y [num]\n  (when num\n    (swap! gfx assoc :transform (matrix/rot-y (:transform @gfx) num))))\n\n(defn push-rot-z [num]\n  (when num\n    (swap! gfx assoc :transform (matrix/rot-z (:transform @gfx) num))))\n\n(defn push-transform []\n  (swap! gfx update :transform-stack conj (:transform @gfx)));))\n\n\n(comment\n  (:transform-stack @gfx)\n  (push-transform)\n  (:transform @gfx));\n\n(comment\n  (butlast [1,2,4]))\n(defn pop-transform []\n  (let [ts (:transform-stack @gfx)]\n    (when (seq ts)\n      (swap! gfx assoc\n             :transform (last ts)  ;; \t\t\tgfx.transform = gfx.transformStack.pop();\n             :transform-stack (butlast ts)))))\n\n;; ============================= 3.3 Logging =================================\n;; Logging\n(defmulti get-info-log (fn [gl id type] type))\n(defmethod get-info-log :program [gl id _]\n  (.getProgramInfoLog gl id))\n\n;; ================================= 3.4 Assets =================================\n;; ============================= 3.4.1 Textures =================================\n(defn tex-filter [gl]\n  (case (:tex-filter (get-in @state/app-state [:config :tex-filter]))\n    :linear (.-LINEAR gl)\n    :nearest (.-NEAREST gl)\n    (.-NEAREST gl)))\n\n(comment\n  (tex-filter (:gl @state/app-state)))\n(defn create-texture [gl]\n  (.createTexture gl))\n\n(defn power-of-two [n]\n  (= 0\n     (rem (/ (js/Math.log n) (js/Math.log 2))\n          1)))\n\n(rem (js/Math.log 2) 1)\n\n(defn make-texture [gl data]\n  (let [id (create-texture gl)\n        wrap (if (and (power-of-two (.-width data))\n                      (power-of-two (.-height data)))\n               (.-REPEAT gl)\n               (.-CLAMP_TO_EDGE gl))]\n    (.bindTexture gl (.-TEXTURE_2D gl) id)\n    (.texImage2D gl\n                 (.-TEXTURE_2D gl)\n                 0\n                 (.-RGBA gl)\n                 (.-RGBA gl)\n                 (.-UNSIGNED_BYTE gl)\n                 data)\n    (.texParameteri gl (.-TEXTURE_2D gl) (.-TEXTURE_MIN_FILTER gl), (tex-filter gl));\n    (.texParameteri gl (.-TEXTURE_2D gl) (.-TEXTURE_MAG_FILTER gl), (tex-filter gl));\n    ;;\n    (.texParameteri gl (.-TEXTURE_2D gl) (.-TEXTURE_WRAP_S gl), wrap);\n    (.texParameteri gl (.-TEXTURE_2D gl) (.-TEXTURE_WRAP_T gl), wrap);\n    (.bindTexture gl (.-TEXTURE_2D gl) nil)\n    (clj->js {:id id\n              :width (.-width data)\n              :height (.-height data)\n              :bind (fn [gl]\n                      (.bindTexture gl (.-TEXTURE_2D gl) id))\n              :unbind (fn [gl]\n                        (.bindTexture gl (.-TEXTURE_2D gl) nil))})))\n\n(defn make-tex [data]\n  (make-texture (:gl @state/app-state) data))\n(comment\n  (make-texture @gl 1 2 \"\")\n  ;; Tutorial: Webgl Texture\n  (let [data (clj->js [128, 128, 128, 255\n                       190, 190, 190, 255\n                       190, 190, 190, 255\n                       128, 128, 128, 255])]\n    (make-tex\n     (js/ImageData. (js/Uint8ClampedArray. data) 2 2))))\n\n(def ex-data2 [128, 128, 128, 255\n               190, 190, 190, 255\n               190, 190, 190, 255\n               128, 128, 128, 255])\n(defn bg-tex\n  ([] (bg-tex [128, 128, 128, 255\n               190, 190, 190, 255\n               190, 190, 190, 255\n               128, 128, 128, 255]))\n  ([data]\n   (make-tex\n    (js/ImageData. (js/Uint8ClampedArray. (clj->js data)) 2 2))))\n\n(defn empty-tex\n  ([] (empty-tex [255, 255, 255, 255]))\n  ([data]\n   (js/console.log \"DATA: \" data)\n   (make-tex\n    (js/ImageData. (js/Uint8ClampedArray. (clj->js data)) 1 1))))\n\n(comment\n  (make-tex (js/ImageData. (js/Uint8ClampedArray. (clj->js ex-data2)) 2 2)))\n\n; (defonce gl (atom nil))\n\n(comment\n  (js/console.log @gl))\n\n(comment\n  (.bindTexture @gl (.-TEXTURE_2D gl) (.createTexture @gl))\n  (.createTexture @gl)\n  (.-TEXTURE_2D @gl)\n  (make-texture @gl 1 1 1))\n\n;;\n;; ============================= 3.4.2 Font =================================\n(defn make-font [tex gw gh chars]\n  (let [cols (/ (.-width tex) gw)\n        rows (/ (.-height tex) gh)\n        qw (/ 1.0 cols)\n        qh (/ 1.0 rows)\n        chars-map (->> (s/split chars \"\")\n                       (reduce-kv (fn [font-map index char]\n                                    (let [prop (math/vec2 (* (rem index cols) qw)\n                                                          (* (js/Math.floor (/ index cols)) qh))]\n                                      (assoc font-map char prop)))\n                                  {}))]\n    {:tex tex\n     :qw qw\n     :qh qh\n     :map chars-map}))\n\n;; ============================= 3.5 Shaders =================================\n(comment\n  (kgl/reg-shader (:gl @state/app-state) (s/replace vert-template \"{{user}}\" default-vert)  (.-VERTEX_SHADER (:gl @state/app-state)))\n  (kgl/reg-shader (:gl @state/app-state) (s/replace frag-template \"{{user}}\" default-frag)  (.-FRAGMENT_SHADER (:gl @state/app-state))))\n\n(defn attach-shader [gl id shader]\n  (.attachShader gl id shader));\n\n\n;; ============================= 3.6 Program =================================\n(defn validate-program [pos]\n  (.validateProgram\n   (:gl @state/app-state)\n   (:program/id @state/app-state)\n   (name pos)))\n\n(defn attr-loc [pos]\n  (kgl/get-attrib-location\n   (:gl @state/app-state)\n   (:program/id @state/app-state)\n   (name pos)))\n\n(comment\n  (attr-loc :a_pos)\n  (attr-loc :a_normal)\n  (attr-loc :a_uv)\n  (attr-loc :a_color)\n  (attr-loc :fragment/no-work)\n  (attr-loc :v_uv))\n\n(defn make-program [gl]\n  (let [vert-shader (kgl/reg-shader gl (s/replace vert-template \"{{user}}\" default-vert) (.-VERTEX_SHADER gl))\n        frag-shader (kgl/reg-shader gl (s/replace frag-template \"{{user}}\" default-frag) (.-FRAGMENT_SHADER gl))\n        id (kgl/create-program gl)]\n    (kgl/attach-shader gl id vert-shader)\n    (kgl/attach-shader gl id frag-shader);\n    (kgl/bind-attrib-location gl id 0 \"a_pos\");\n    (kgl/bind-attrib-location gl id 1 \"a_normal\");\n    (kgl/bind-attrib-location gl id 2 \"a_uv\");\n    (kgl/bind-attrib-location gl id 3 \"a_color\")\n    (kgl/link-program gl id)\n    (let [warning-msg (get-info-log gl id :program)]\n      (when (seq warning-msg)\n        (throw (js/Error warning-msg)))\n      (swap! state/app-state assoc :program/id id)\n      (swap! gfx assoc :cur-prog id)\n      id)))\n\n(defn make-program-alt [gl]\n  (let [vert-shader (kgl/create-shader gl (.-VERTEX_SHADER gl))\n        vert-template (s/replace vert-template \"{{user}}\" default-vert)\n        frag-shader (kgl/create-shader gl (.-FRAGMENT_SHADER gl))\n        frag-template (s/replace frag-template \"{{user}}\" default-frag)\n        id (kgl/create-program gl)]\n    (kgl/compile-shader gl vert-template vert-shader)\n    (kgl/compile-shader gl frag-template frag-shader)\n    (kgl/attach-shader gl id vert-shader)\n    (kgl/attach-shader gl id frag-shader);\n    (kgl/bind-attrib-location gl id 0 \"a_pos\");\n    (kgl/bind-attrib-location gl id 1 \"a_normal\");\n    (kgl/bind-attrib-location gl id 2 \"a_uv\");\n    (kgl/bind-attrib-location gl id 3 \"a_color\")\n    (kgl/link-program gl id)\n    (let [warning-msg (get-info-log gl id :program)]\n      (when (seq warning-msg)\n        (throw (js/Error warning-msg)))\n      ; (swap! gfx assoc :program/id id)\n      (js/console.log \"ID \" id)\n      (swap! state/app-state assoc :program/id id)\n      (swap! gfx assoc :cur-prog id)\n      id)));\n\n(defn bind [gl id]\n  (kgl/use-program gl id))\n(defn unbind [gl]\n  (kgl/use-program gl))\n\n;; ============================= 3.7 Send =================================\n(defn send-float [gl id name val]\n  (let [loc (.getUniformLocation gl id name)]\n    (.uniform1f gl loc val)))\n\n(defn send-vec2 [gl id name x y]\n  (let [loc (.getUniformLocation gl id name)]\n    (.uniform2f gl loc x y)))\n\n(defn send-vec3 [gl id name x y z]\n  (let [loc (.getUniformLocation gl id name)]\n    (.uniform3f gl loc x y z)))\n\n(defn send-vec4 [gl id name x y z w]\n  (let [loc (.getUniformLocation gl id name)]\n    (.uniform4f gl loc x y z w)))\n\n(defn send-mat4 [gl id name m]\n  (let [loc (.getUniformLocation gl id name)]\n    (.uniformMatrix4fv gl loc false loc (js/Float32Array. (clj->js m)))))\n\n(defn send [gl id uniform]\n  (.useProgram gl id)\n  (for [[name val] uniform]\n    (let [loc (.getUniformLocation gl id name)]\n      (when (number? val)\n        (.uniform1f loc val))))\n  (.useProgram gl nil))\n\n  ; (println \"TODO\"))\n\n\n;; ============================= 3.8 flush =================================\n(defn bind-attribs\n  \"Runs before render loop\"\n  [gl]\n  (let [normalized-data? false\n        vsize (* stride 4)]  ;; stride = 9\n          ;;                 wegl-context attr-pos elements/attr   ;;32bit floats is data normalized?  vertex size | offset from the beginning of a single vertex to this attribute             ;;\n    (.vertexAttribPointer     gl           0        3               (.-FLOAT gl)  normalized-data?       vsize            0)\n    ;; This enables the attribute for use\n    (.enableVertexAttribArray gl           0)\n    (.vertexAttribPointer     gl           1        2               (.-FLOAT gl)  normalized-data?       vsize            12)\n    (.enableVertexAttribArray gl           1)\n    (.vertexAttribPointer     gl           2        4               (.-FLOAT gl)  normalized-data?       vsize            20)\n    (.enableVertexAttribArray gl           2)))\n\n(comment\n  (bind-attribs (:gl @state/app-state)))\n\n(defn flush! [gl id]\n  ; (js/console.log \"ID: \" id)\n  (when (and (:cur-tex @gfx)\n             (:cur-prog @gfx)\n             (not= 0 (count (:vqueue @gfx)))\n             (not= 0 (count (:iqueue @gfx))))\n    ; (js/console.log \"LOGGED i\" (:iqueue @gfx))\n    ; (js/console.log \"LOGGED v\" (:vqueue @gfx))\n    (send gl id (:cur-uniform @gfx))\n    ;; 1. Bind\n    (.bindBuffer    gl (.-ARRAY_BUFFER gl) (:vbuf @gfx))\n    (.bufferSubData gl (.-ARRAY_BUFFER gl) 0 (js/Float32Array. (clj->js (:vqueue @gfx))))\n    (.bindBuffer    gl (.-ELEMENT_ARRAY_BUFFER gl) (:ibuf @gfx))\n    (.bufferSubData gl (.-ELEMENT_ARRAY_BUFFER gl) 0 (js/Uint16Array. (clj->js (:iqueue @gfx))))\n    ;; Bind Program\n    (.useProgram gl id) ; (bind gl id) ;; curProg.bind()\n    (bind-attribs gl)\n    (.bind (:cur-tex @gfx) gl)\n    ;; Draw\n    (.drawElements gl (.-TRIANGLES gl), (count (:iqueue @gfx)) (.-UNSIGNED_SHORT gl) 0)\n    (.unbind (:cur-tex @gfx) gl)\n    (.useProgram gl nil) ;; (unbind gl) - curProg.unbind()\n    (.bindBuffer gl (.-ARRAY_BUFFER gl)         nil)\n    (.bindBuffer gl (.-ELEMENT_ARRAY_BUFFER gl) nil)\n    (swap! gfx (fn [state]\n                 (-> state\n                     (assoc :vqueue [])\n                     (assoc :iqueue [])\n                     (update :draw-calls inc))))))\n\n(comment\n  (:draw-calls @gfx)\n  (:iqueue @gfx))\n;; ===\n\n;; ============================= 3.8 draw-raw =================================\n(defn origin-pt [orig]\n  (case orig\n    :topleft  (math/vec2 -1 -1)\n    :top      (math/vec2   0 -1)\n    :topright (math/vec2   1 -1)\n    :left     (math/vec2  -1  0)\n    :center   (math/vec2   0  0)\n    :right    (math/vec2   1  0)\n    :botleft (math/vec2   -1 1)\n    :bot (math/vec2 0 1)\n    :botright (math/vec2 1 1)\n    orig))\n\n(defn create-index [idx]\n  (+ idx (/ (count (:vqueue @gfx)) stride)))\n\n(defn set-tpu [tex prog uni]\n  (swap! gfx assoc :cur-tex tex :cur-prog prog :cur-uniform uni))\n\n(defn to-ndc [{:keys [x y]}]\n  (math/vec2\n   (/ x (+ -1 (* 2 (width))))\n   (/ y (+  1 (* 2 (height))))))\n\n(defn create-vertex [{:keys [pos uv color]}]\n  (let [pt (to-ndc (matrix/mult-vec2 (:transform @gfx) pos))]\n    [(:x pt)    (:y pt)    (:z pos)                 ;; pos\n     (:x uv)    (:y uv)                             ;; uv\n     (:r color) (:g color) (:b color) (:a color)])) ;; color\n\n(defn draw-raw [verts indices tex prog uni]\n  (let [uni (or uni {})]\n    (if (or (not= tex (:cur-tex @gfx))\n            (not= prog (:cur-prog @gfx))\n            (not= uni (:cur-uniform @gfx))\n            (> (+ (* (count verts) stride)\n                  (count (:vqueue @gfx)))\n               queue-count)\n            (> (+ (count indices)\n                  (count (:iqueue @gfx)))\n               queue-count))\n      (do\n        ; (js/console.log \"DRAWING\")\n        ; (js/console.log \"GL: \" (:gl @state/app-state))\n        ; (js/console.log \"pid: \" (:gl @state/app-state))\n        (flush! (:gl @state/app-state) (:program/id @state/app-state)))\n      (do\n        (set-tpu tex prog uni)\n        (swap! gfx assoc\n               :iqueue (map create-index indices)\n               :vqueue (mapcat create-vertex verts))))))\n        ; (doseq [idx (map create-index indices)]\n        ;   (swap! gfx update :iqueue conj idx))\n        ; (let [vrts (mapcat create-vertex verts)]\n        ;   (doseq [vert vrts]\n        ;     (swap! gfx update :vqueue conj vert)))))))\n\n;; ============================= 3.9 draw-quad =================================\n; (math/scale (math/vec2 1) (math/vec2 6))\n(defn draw-quad\n  ([]\n   (draw-quad {:width 0\n               :height 0\n               :pos [0 0]\n               :origin def-origin\n               :scale 1}))\n  ([{:keys [width height pos scale z origin tex quad color rot]}]\n   (let [w (or width 0)\n         h (or height 0)\n         pos (math/vec2 (or (nth pos 0) 0) (or (nth pos 1) 0))\n         origin (origin-pt (or origin def-origin))\n         scale (math/vec2 (or scale 1))\n         q (or quad (math/quad 0 0 1 1))\n         z (- 1 (or z 0))\n         color (or color (math/color 1 1 1 1))\n         offset (math/scale origin (math/scale (math/vec2 w h) -0.5))\n         rot (or rot 0)]\n     (push-transform)\n     (push-translate pos)\n     (push-scale scale)\n     (push-rot-z rot)\n     (push-translate offset)\n     (draw-raw\n      [{:pos (math/vec3  (/ (math/neg width) 2) (/ height 2)            z)\n        :uv  (math/vec2  (:x q)                 (+ (:y q) (:h q)))\n        :color color}\n       {:pos (math/vec3  (/ (math/neg width) 2) (math/neg (/ height 2)) z)\n        :uv  (math/vec2  (:x q)                 (:y q))\n        :color color}\n       {:pos (math/vec3  (/ width 2)            (/ (math/neg height) 2) z)\n        :uv  (math/vec2  (+ (:x q) (:w q))      (:y q))\n        :color color}\n       {:pos (math/vec3  (/ width 2)            (/ height 2)            z)\n        :uv  (math/vec2  (+ (:x q) (:w q))      (+ (:y q) (:h q)))\n        :color color}]\n      [0 1 3 1 2 3] tex (:cur-prog @gfx) (:cur-uniform @gfx)))))   ; origin])))\n\n;; ============================= 3.9 frame-start =================================\n(defn frame-start [gl]\n  (.clear gl (.-COLOR_BUFFER_BIT gl))\n  (when-not (seq (:clear-color (:config @state/app-state)))\n    (let [w (width) h (height) sc (scale)]\n      (draw-quad {:width w\n                  :height h\n                  :tex (:bg-tex @gfx)\n                  :quad (math/quad 0 0\n                                   (* w (/ sc bg-grid-size))\n                                   (* h (/ sc bg-grid-size)))})))\n  (swap! gfx assoc\n         :transform-stack []\n         :transform (math/mat4)\n         :draw-calls 0))\n\n(comment\n  @gfx)\n\n;; ============================= 3.10 frame-end =================================\n(defn frame-end [gl id]\n  (flush! gl id)\n  (swap! gfx assoc :last-draw-calls (:draw-calls @gfx)));))\n\n\n;; ============================= 3.11 Drawing API's =================================\n(defn draw-rect [config]\n  (draw-quad config))\n\n(comment\n  (math/add (math/vec2 0 0) (math/vec2 1 2)))\n\n(defn draw-rect-stroke\n  [{:keys [pos width origin height] :as config}]\n  (let [w (or width 0)\n        h (or height 0)\n        p (math/vec2 (nth pos 0) (nth pos 1))\n        offset (math/scale origin (math/scale (math/vec2 w h) -0.5))\n        p (math/subtract (math/add p (math/vec2 (/ (math/neg w) 2)\n                                                (/ (math/neg h) 2)))\n                         offset)]))\n\n;; ============================= 3.12 init =================================\n(defn buffer-init [gl]\n  (let [vbuf  (.createBuffer gl)\n        ibuf (.createBuffer gl)]\n    (.bindBuffer gl (.-ARRAY_BUFFER gl)  vbuf)\n    (.bufferData gl (.-ARRAY_BUFFER gl) (* queue-count 4) (.-DYNAMIC_DRAW gl))\n    (.bindBuffer gl (.-ARRAY_BUFFER gl) nil)\n\n    (.bindBuffer gl (.-ELEMENT_ARRAY_BUFFER gl) ibuf)\n    (.bufferData gl (.-ELEMENT_ARRAY_BUFFER gl) (* queue-count 2) (.-DYNAMIC_DRAW gl))\n    (.bindBuffer gl (.-ELEMENT_ARRAY_BUFFER gl) nil)\n    (swap! gfx assoc :vbuf vbuf :ibuf ibuf)))\n\n(comment\n  (:vbuf @gfx))\n\n;; 1.4 tex-init\n(defn tex-init [etex btex]\n  (swap! gfx assoc :bg-tex btex :cur-tex etex))\n(comment\n  (tex-filter (:gl @state/app-state))\n  (.-NEAREST (:gl @state/app-state)))\n\n;; TODO: move to utils\n(defn get-clear-color []\n  #_(or nil (math/color))\n  (or (get-in @state/app-state [:config :clear-color])\n      (math/color 0 0 0 1)))\n\n(defn init [gl]\n  (let [{:keys [r g b a]} (get-clear-color)\n        id (make-program gl)\n        tex (empty-tex)\n        btex (bg-tex)]\n    (clear-color gl r g b a)\n    (.enable gl (.-BLEND gl))\n    (.blendFuncSeparate gl\n                        (.-SRC_ALPHA gl)\n                        (.-ONE_MINUS_SRC_ALPHA gl)\n                        (.-ONE gl)\n                        (.-ONE_MINUS_SRC_ALPHA gl))\n    (buffer-init gl)\n    (tex-init tex btex)\n    (frame-start gl)\n    (frame-end gl id)))\n\n(defn init! []\n  (init (:gl @state/app-state)))\n"]}