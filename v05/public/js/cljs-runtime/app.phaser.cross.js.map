{"version":3,"sources":["app/phaser/cross.cljs"],"mappings":"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","names":["js/app","js/app.phaser","js/app.phaser.cross","js/app.phaser.cross.self","app.phaser.cross/self","js/window","app.phaser.cross/load-image","this","name","property","p__41632","vec__41633","cljs.core.nth","app.phaser.cross/add-sprite","x","y","js/app.phaser.cross.Scene","app.phaser.cross/Scene","js/module$node_modules$Phaser$src$phaser","js/app.phaser.cross.Game","app.phaser.cross/Game","js/app.phaser.cross.scene","app.phaser.cross/scene","app.phaser.cross/assets","app.phaser.cross/preload!","seq__41636","cljs.core/seq","chunk__41637","count__41638","i__41639","vec__41646","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__41649","cljs.core/first","cljs.core/next","k","v","app.phaser.cross/create!","background","player","enemy","treasure","js/console.log","app.phaser.cross/MAX-GROWTH","app.phaser.cross/GROWTH-RATE","app.phaser.cross/GROWTH-ANGLE","app.phaser.cross/update!","js/app.phaser.cross.config","app.phaser.cross/config","app.phaser.cross/init-game","c","app.phaser.cross/app"],"sourcesContent":["(ns app.phaser.cross\n  (:require [\"Phaser\" :as Phaser]))\n\n;; Demo\n(defonce self nil)\n(set! js/window -self self)\n\n(defn load-image [this name property]\n  (.image (.-load this) name property))\n\n(defn add-sprite [this [x y name]]\n  (.sprite (.-add this) x y name))\n\n;; === Destructing for easy access ===\n(defonce Scene (.-Scene Phaser))\n(defonce Game (.-Game Phaser))\n\n;; 1. Create a scene\n(defonce scene #js {})\n\n;; 1.1 Load Assets\n#_(defn preload! []\n    (this-as this\n             (load-image this \"background\" \"assets/background.png\")\n             (load-image this \"player\" \"assets/player.png\")\n             (load-image this \"enemy\" \"assets/dragon.png\")))\n(def assets\n  [[\"background\" \"assets/background.png\"]\n   [\"player\"     \"assets/player.png\"]\n   [\"enemy\"      \"assets/dragon.png\"]\n   [\"treasure\"   \"assets/treasure.png\"]])\n(defn preload!\n  \"Load assets. this here refers to Scene object\"\n  []\n  (this-as this\n           (set! self this)\n           (doseq [[k v] assets]\n             (load-image this k v))))\n(set! scene -preload preload!)\n\n(defn create!\n  \"=== 1.2 Create a game ===\n  This function gets called after the preload! ends\"\n  []\n  (this-as this\n           ; (js/console.log \"THIS\" this)\n           (let [background (add-sprite this [0   0   \"background\"])\n                 player     (add-sprite this [50  180 \"player\"])\n                 enemy      (add-sprite this [250 180 \"enemy\"])\n                 treasure   (add-sprite this [350 180 \"treasure\"])]\n             (js/console.log player)\n             ;; === Set up background\n             (set! this -background background)\n             (.setOrigin (.-background this) 0 0)\n             (set! player -x 450)\n             (set! js/window -player player)\n             (.setScale player 1)\n             (set! player -y 230)\n             (set! this -player player)\n             (set! this -enemy enemy)\n             (set! this -treasure treasure))))\n(set! scene -create create!)\n\n;; 1.3\n(def MAX-GROWTH 2)\n(def GROWTH-RATE 0.01)\n(def GROWTH-ANGLE 0.1)\n(defn update!\n  \"Gets called in every frame\"\n  []\n  (this-as this\n           (let [enemy (.. this -enemy)\n                 player (.. this -player)]\n             (set! enemy -angle (+ GROWTH-ANGLE (.. enemy -angle)))\n             (when (< (.. player -scaleX) MAX-GROWTH)\n               (set! player -scaleY (+ GROWTH-RATE (.. player  -scaleY)))\n               (set! player -scaleX (+ GROWTH-RATE (.. player  -scaleX)))))))\n\n(set! scene -update update!)\n;; 2. Set Configuration\n(defonce config #js {:type (.-AUTO Phaser)\n                     :width 640\n                     :height 360\n                     :scene scene})\n\n;; 3. Create a new game\n(defn init-game [c]\n  (Game. c))\n\n; (defonce game (Game. config))\n(defn app []\n  (init-game config))\n"]}