{"version":3,"sources":["app/kaboomv5/gl.cljs"],"mappings":";;;AAIA,AAAA,AAAMA,AAAcC;AAApB,AACE,AAAA,AAACC,AACE,AAAA,AAACC,AAAI,AAAG,AAACC,AAAYH,AAAG,AAAA,AAACG;;AAG9B,AAAA,AAAMC,AAAgBC;AAAtB,AACE,AAAgBA;;AAGlB,AAAA,AAAMC,AAAYD,AAAGE;AAArB,AACE,AAAAC,AAAMD;AAANC,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACU,AAAUH;;;AADpB;AAEW,AAAWA;;;;AACpB,AAAWA;;;;AAEf,AAAA,AAAMK,AAAcL,AAAGM,AAAKJ;AAA5B,AACE,AAAMK,AAAG,AAACR,AAAeC;AACnBQ,AAAK,AAAI,AAAK,AAACd,AAAa,AAASY,AACvB,AAACZ,AAAa,AAAUY,AAC/B,AAAUN,AACV,AAAiBA;AAJ9B,AAKE,AAAcA,AAAG,AAAcA,AAAIO;;AACnC,AAAA,AAAaP,AACA,AAAcA,AAEd,AAAQA,AACR,AAAQA,AACR,AAAiBA,AACjBM;;AACb,AAAgBN,AAAG,AAAcA,AAAI,AAAsBA,AAAK,AAACC,AAAWD,AAAGE;;AAC/E,AAAgBF,AAAG,AAAcA,AAAI,AAAsBA,AAAK,AAACC,AAAWD,AAAGE;;AAE/E,AAAgBF,AAAG,AAAcA,AAAI,AAAkBA,AAAKQ;;AAC5D,AAAgBR,AAAG,AAAcA,AAAI,AAAkBA,AAAKQ;;AAC5D,AAAA,AAAcR,AAAG,AAAcA;;AAC/B,AAAA,AAAA,AAAA,AAAA,AAAA,AAACS,AAAaF,AACG,AAASD,AACR,AAAUA,AACZ,AAAKN;AAAL,AACE,AAAcA,AAAG,AAAcA,AAAIO;AAJrD,AAKkB,AAAKP;AAAL,AACE,AAAA,AAAcA,AAAG,AAAcA;;;AAEvD,AAAA,AAAMU,AAAUV,AAAGO;AAAnB,AACE,AAAcP,AAAG,AAAcA,AAAIO;;AAErC,AAAA,AAAMI,AAAYX;AAAlB,AACE,AAAA,AAAcA,AAAG,AAAcA;;AAEjC,AAAA,AAAMY,AAAaZ,AAAGa,AAAKC;AAA3B,AACE,AAAad,AAAGa,AAAKC;;AACvB,AASA,AAAA,AAAMC,AAAef,AAAGgB;AAAxB,AACE,AAAehB,AAAGgB;;AAEpB,AAAA,AAAMC,AAAgBjB,AAAGkB,AAASC;AAAlC,AACE,AAAenB,AAAGmB,AAAOD;;AACzB,AAAgBlB,AAAGmB;;AACnB;AAIA,AAAMC,AAAY,AAAmBpB,AAAGmB;AAAxC,AACE,AAAM,AAACE,AAAID;AAAX,AACE,AAAO,AAAAE,AAAWF;;AADpB;;;AAGJ,AAAA,AAAMG,AAAYvB,AAAGkB,AAASF;AAA9B,AACE,AAAMG,AAAO,AAAenB,AAAGgB;AAA/B,AACE,AAAehB,AAAGmB,AAAOD;;AACzB,AAAgBlB,AAAGmB;;AACnB;AAIA,AAAMC,AAAY,AAAmBpB,AAAGmB;AAAxC,AACE,AAAM,AAACE,AAAID;AAAX,AACE,AAAO,AAAAE,AAAWF;;AADpB;;AAEFD;;AAEJ,AAMA,AAAA,AAAMK,AAAexB,AAAGO,AAAGY;AAA3B,AACE,AAAenB,AAAGO,AAAGY;;AAGvB,AAAA,AAAMM,AAAsBzB,AAAGO,AAAGmB,AAAMC;AAAxC,AACE,AAAqB3B,AAAGO,AAAGmB,AAAMC;;AAEnC,AAAA,AAAMC,AAAqB5B,AAAG6B,AAAQC;AAAtC,AACE,AAAoB9B,AAAG6B,AAAQC;;AAEjC,AAAA,AAAMC,AAAgB/B;AAAtB,AACE,AAAgBA;;AAElB,AAAA,AAAAgC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAUS;AAAVR,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAuB,AAAK7C,AAAGO,AAAGoB;AAAX,AAAiBA;AAAxC,AAAAc,AAAAL,AAAAE,AAAAC,AAAAC;;;AACA,AAAAM,AAAA,AAAA,AAAkC9C,AAAGO,AAAGwC;AAAxC,AACE,AAAoB/C,AAAGO;;AAEzB,AAAA,AAAMyC,AAAchD,AAAGO;AAAvB,AACE,AAAcP,AAAGO;;AAGnB,AAAA,AAAA,AAAA0C,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA7B,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM6B,AACFnD;AADJ,AACQ,AAAA,AAACoD,AAAYpD;;;AADrB,AAAA,AAAA,AAAMmD,AAEFnD,AAAGO;AAFP,AAGG,AAAaP,AAAGO;;;AAHnB,AAAA,AAAA,AAAM4C;;AAAN,AAKA,AAAA,AAAME,AAAMrD,AAAGO;AAAf,AACE,AAAC6C,AAAYpD,AAAGO;;AAElB,AAAA,AAAM+C,AAAQtD;AAAd,AACE,AAACoD,AAAYpD;;AAGf,AAAA,AAAMuD,AAAYvD,AAAGO,AAAGiD,AAAK1C;AAA7B,AACE,AAAM2C,AAAI,AAAqBzD,AAAGO,AAAGiD;AAArC,AACE,AAAYxD,AAAGyD,AAAI3C;;AAEvB,AAAA,AAAM4C,AAAW1D,AAAGO,AAAGiD,AAAKG,AAAEC;AAA9B,AACE,AAAMH,AAAI,AAAqBzD,AAAGO,AAAGiD;AAArC,AACE,AAAYxD,AAAGyD,AAAIE,AAAEC;;AAEzB,AAAA,AAAMC,AAAW7D,AAAGO,AAAGiD,AAAKG,AAAEC,AAAEE;AAAhC,AACE,AAAML,AAAI,AAAqBzD,AAAGO,AAAGiD;AAArC,AACE,AAAYxD,AAAGyD,AAAIE,AAAEC,AAAEE;;AAE3B,AAAA,AAAMC,AAAW/D,AAAGO,AAAGiD,AAAKG,AAAEC,AAAEE,AAAEE;AAAlC,AACE,AAAMP,AAAI,AAAqBzD,AAAGO,AAAGiD;AAArC,AACE,AAAYxD,AAAGyD,AAAIE,AAAEC,AAAEE,AAAEE;;AAE7B,AAAA,AAAMC,AAAWjE,AAAGO,AAAGiD,AAAKU;AAA5B,AACE,AAAMT,AAAI,AAAqBzD,AAAGO,AAAGiD;AAArC,AACE,AAAA,AAAmBxD,AAAGyD,AAAUA,AAAI,AAAAU,AAAkB,AAAC1D,AAAQyD;;AAGnE,AAAA,AAAME,AAAapE,AAAGqE,AAAEC,AAAEC,AAAEC;AAA5B,AACE,AAAaxE,AAAGqE,AAAEC,AAAEC,AAAEC;;AAExB,AAAA,AAAMC,AAAkBzE;AAAxB,AACE,AAAQA,AAAG,AAAoBA","names":["app.kaboomv5.gl/power-of-two","n","cljs.core._EQ_","cljs.core/rem","js/Math.log","app.kaboomv5.gl/create-texture","gl","app.kaboomv5.gl/tex-filter","fil","G__48044","cljs.core/Keyword","app.kaboomv5.gl/make-texture","data","id","wrap","cljs.core/clj->js","app.kaboomv5.gl/tex-bind","app.kaboomv5.gl/tex-unbind","app.kaboomv5.gl/bind-buffer","attr","val","app.kaboomv5.gl/create-shader","shader-type","app.kaboomv5.gl/compile-shader","template","shader","warning-msg","cljs.core/seq","js/Error","app.kaboomv5.gl/reg-shader","app.kaboomv5.gl/attach-shader","app.kaboomv5.gl/bind-attrib-location","index","type","app.kaboomv5.gl/get-attrib-location","program","attrib","app.kaboomv5.gl/create-program","js/app","js/app.kaboomv5","js/app.kaboomv5.gl","js/app.kaboomv5.gl.get-info-log","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__48045","cljs.core/MultiFn","cljs.core.symbol","app.kaboomv5.gl/get-info-log","_","app.kaboomv5.gl/link-program","var_args","G__48047","app.kaboomv5.gl/use-program","app.kaboomv5.gl.use_program","app.kaboomv5.gl/bind","app.kaboomv5.gl/unbind","app.kaboomv5.gl/send-float","name","loc","app.kaboomv5.gl/send-vec2","x","y","app.kaboomv5.gl/send-vec3","z","app.kaboomv5.gl/send-vec4","w","app.kaboomv5.gl/send-mat4","m","js/Float32Array","app.kaboomv5.gl/clear-color","r","b","g","a","app.kaboomv5.gl/clear-color-bbit"],"sourcesContent":["(ns app.kaboomv5.gl\n  (:require [clojure.string :as s]))\n\n;; === Texture\n(defn power-of-two [n]\n  (= 0\n     (rem (/ (js/Math.log n) (js/Math.log 2))\n          1)))\n\n(defn create-texture [gl]\n  (.createTexture gl))\n\n;;\n(defn tex-filter [gl fil]\n  (case fil\n    :linear (.-LINEAR gl)\n    :nearest (.-NEAREST gl)\n    (.-NEAREST gl)))\n\n(defn make-texture [gl data fil]\n  (let [id (create-texture gl)\n        wrap (if (and (power-of-two (.-width data))\n                      (power-of-two (.-height data)))\n               (.-REPEAT gl)\n               (.-CLAMP_TO_EDGE gl))]\n    (.bindTexture gl (.-TEXTURE_2D gl) id)\n    (.texImage2D gl\n                 (.-TEXTURE_2D gl)\n                 0\n                 (.-RGBA gl)\n                 (.-RGBA gl)\n                 (.-UNSIGNED_BYTE gl)\n                 data)\n    (.texParameteri gl (.-TEXTURE_2D gl) (.-TEXTURE_MIN_FILTER gl), (tex-filter gl fil));\n    (.texParameteri gl (.-TEXTURE_2D gl) (.-TEXTURE_MAG_FILTER gl), (tex-filter gl fil));\n    ;;\n    (.texParameteri gl (.-TEXTURE_2D gl) (.-TEXTURE_WRAP_S gl), wrap);\n    (.texParameteri gl (.-TEXTURE_2D gl) (.-TEXTURE_WRAP_T gl), wrap);\n    (.bindTexture gl (.-TEXTURE_2D gl) nil)\n    (clj->js {:id id\n              :width (.-width data)\n              :height (.-height data)\n              :bind (fn [gl]\n                      (.bindTexture gl (.-TEXTURE_2D gl) id))\n              :unbind (fn [gl]\n                        (.bindTexture gl (.-TEXTURE_2D gl) nil))})))\n\n(defn tex-bind [gl id]\n  (.bindTexture gl (.-TEXTURE_2D gl) id))\n\n(defn tex-unbind [gl]\n  (.bindTexture gl (.-TEXTURE_2D gl) nil))\n\n(defn bind-buffer [gl attr val]\n  (.bindBuffer gl attr val))\n(comment\n  (make-texture @gl 1 2 \"\")\n  (.bindTexture @gl (.-TEXTURE_2D gl) (.createTexture @gl))\n  (.createTexture @gl)\n  (.-TEXTURE_2D @gl)\n  (make-texture @gl 1 1 1))\n\n;;\n;; 1. Shaders ====\n(defn create-shader [gl shader-type]\n  (.createShader gl shader-type))\n\n(defn compile-shader [gl template shader]\n  (.shaderSource gl shader template)\n  (.compileShader gl shader)\n  (comment\n    \"  WebGLRenderingContext.getShaderInfoLog() 3 is only used by the renderer when a shader program is created.\n       It is used to retrieve the program log in order to evaluate and print\n       warnings, debugging and compile information.\")\n  (let [warning-msg (.getShaderInfoLog gl shader)]\n    (when (seq warning-msg)\n      (throw (js/Error. warning-msg)))))\n\n(defn reg-shader [gl template shader-type]\n  (let [shader (.createShader gl shader-type)]\n    (.shaderSource gl shader template)\n    (.compileShader gl shader)\n    (comment\n      \"WebGLRenderingContext.getShaderInfoLog() 3 is only used by the renderer when a shader program is created.\n       It is used to retrieve the program log in order to evaluate and print\n       warnings, debugging and compile information.\")\n    (let [warning-msg (.getShaderInfoLog gl shader)]\n      (when (seq warning-msg)\n        (throw (js/Error. warning-msg))))\n    shader))\n\n(comment\n  (reg-shader @gl default-vert (.-VERTEX_SHADER @gl))\n  (reg-shader @gl default-frag (.-FRAGMENT_SHADER @gl))\n  (reg-shader @gl \"\" (.-FRAGMENT_SHADER @gl))\n  (reg-shader @gl default-frag 100))\n\n(defn attach-shader [gl id shader]\n  (.attachShader gl id shader));\n\n;; attributes\n(defn bind-attrib-location [gl id index type]\n  (.bindAttribLocation gl id index type));\n;;\n(defn get-attrib-location [gl program attrib]\n  (.getAttribLocation gl program attrib))\n;;\n(defn create-program [gl]\n  (.createProgram gl))\n\n(defmulti get-info-log (fn [gl id type] type))\n(defmethod get-info-log :program [gl id _]\n  (.getProgramInfoLog gl id))\n\n(defn link-program [gl id]\n  (.linkProgram gl id))\n\n;; Program\n(defn use-program\n  ([gl] (use-program gl nil))\n  ([gl id]\n   (.useProgram gl id)))\n\n(defn bind [gl id]\n  (use-program gl id))\n\n(defn unbind [gl]\n  (use-program gl))\n\n;; Sending Data\n(defn send-float [gl id name val]\n  (let [loc (.getUniformLocation gl id name)]\n    (.uniform1f gl loc val)))\n\n(defn send-vec2 [gl id name x y]\n  (let [loc (.getUniformLocation gl id name)]\n    (.uniform2f gl loc x y)))\n\n(defn send-vec3 [gl id name x y z]\n  (let [loc (.getUniformLocation gl id name)]\n    (.uniform3f gl loc x y z)))\n\n(defn send-vec4 [gl id name x y z w]\n  (let [loc (.getUniformLocation gl id name)]\n    (.uniform4f gl loc x y z w)))\n\n(defn send-mat4 [gl id name m]\n  (let [loc (.getUniformLocation gl id name)]\n    (.uniformMatrix4fv gl loc false loc (js/Float32Array. (clj->js m)))))\n\n;; Colors\n(defn clear-color [gl r b g a]\n  (.clearColor gl r b g a))\n\n(defn clear-color-bbit [gl]\n  (.clear gl (.-COLOR_BUFFER_BIT gl)))\n"]}