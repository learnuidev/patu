{"version":3,"sources":["posh/lib/q_analyze.cljc"],"mappings":"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","names":["posh.lib.q-analyze/take-until","stop-at?","ls","or__4126__auto__","cljs.core/empty?","G__47076","cljs.core/first","cljs.core/cons","G__47077","G__47078","cljs.core/rest","posh.lib.q-analyze/rest-at","rest-at?","G__47080","posh.lib.q-analyze/split-list-at","split-at?","cljs.core.merge","G__47081","G__47082","posh.lib.q-analyze/query-to-map","query","cljs.core/map?","cljs.core/keyword?","posh.lib.q-analyze/dbvar?","x","cljs.core/Symbol","cljs.core._EQ_","posh.lib.q-analyze/qvar?","posh.lib.q-analyze/get-all-vars","cljs.core/coll?","clojure.set.union","G__47083","G__47084","cljs.core.conj","G__47085","G__47086","posh.lib.q-analyze/qvar-gen","qvar-count","cljs.core.atom","cljs.core.symbol","cljs.core.swap_BANG_","cljs.core/inc","posh.lib.q-analyze/eav?","v","cljs.core/vector?","cljs.core/second","posh.lib.q-analyze/wildcard?","s","posh.lib.q-analyze/normalize-eav-helper","eav","n","neweav","vars","and__4115__auto__","G__47087","G__47088","G__47089","G__47090","var","G__47091","G__47092","G__47093","G__47094","posh.lib.q-analyze/normalize-eav","dbeav","cljs.core/vec","cljs.core.concat","cljs.core.drop","posh.lib.q-analyze/normalize-all-eavs","where","cljs.core/list?","cljs.core/some","G__47095","G__47096","cljs.core.map","posh.lib.q-analyze/get-eavs","item","cljs.core/seq?","G__47097","G__47098","G__47099","G__47100","G__47101","ocr-47102","cljs.core/count","ocr-47102_0__47105","cljs.core.nth","ocr-47102_0__47105_0__47107","cljs.core.match/backtrack","e47115","js/Error","e__46070__auto__","e47114","e47112","db","e","a","G__47116","G__47113","G__47117","posh.lib.q-analyze/qm-to-query","qm","cljs.core.reduce","p__47118","vec__47119","xs","k","posh.lib.q-analyze/create-q-datoms","results","eavs","cljs.core/set","cljs.core.mapcat","r","vs","cljs.core/zipmap","p1__47122#","cljs.core.get","posh.lib.q-analyze/count-qvars","cljs.core.merge_with","cljs.core/+","G__47123","G__47124","G__47125","posh.lib.q-analyze/fill-qvar-set","qvar","iter__4529__auto__","s__47127","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__47129","cljs.core/chunk-buffer","i__47128","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47126","cljs.core/chunk-rest","posh.lib.q-analyze/seq-merge-with","f","seq1","seq2","G__47130","G__47131","G__47132","G__47133","G__47134","posh.lib.q-analyze/stack-vectors","stacked","cljs.core/conj","cljs.core.take","cljs.core.repeat","p__47137","vec__47138","posh.lib.q-analyze/pattern-from-eav--old","vec__47141","qe","qa","qv","s__47145","xs__6292__auto__","iterys__4525__auto__","s__47147","s__47149","b__47151","i__47150","iter__47148","fs__4526__auto__","iter__47146","iter__47144","ee","aa","vv","wildcard-count","p1__47135#","exposed-qvars","p__47152","vec__47153","p__47156","vec__47157","var?","val","cljs.core.not_EQ_","p1__47136#","posh.lib.q-analyze/get_","m","posh.lib.q-analyze/pattern-from-eav","ocr-47160","ocr-47161","ocr-47160_0__47189","ocr-47160_1__47190","ocr-47160_2__47191","e47265","ocr-47161_2__47194","e47267","e47268","e47266","e47260","ocr-47161_1__47196","e47263","e47264","e47262","e47261","e47202","ocr-47161_0__47198","e47259","e47258","e47204","e47255","ocr-47161_1__47199","e47256","e47257","e47254","e47205","e47253","e47250","e47252","e47251","e47206","ocr-47161_2__47200","e47249","e47248","e47207","e47247","e47246","e47208","e47245","e47244","e47209","e47243","e47242","e47210","e47241","e47240","e47211","e47239","e47238","e47212","e47237","e47236","e47213","e47235","e47234","e47214","e47233","e47228","e47232","e47229","e47231","e47230","e47215","e47227","e47226","e47216","e47225","e47224","e47217","e47223","e47219","e47221","e47222","e47220","e47218","e47203","e47201","posh.lib.q-analyze/filter-pattern-from-eav","ocr-47269","ocr-47270","ocr-47269_0__47295","ocr-47269_1__47296","ocr-47269_2__47297","e47359","ocr-47270_2__47300","e47361","e47362","e47360","e47354","ocr-47270_1__47302","e47357","e47358","e47356","e47355","e47308","ocr-47270_0__47304","e47353","e47352","e47310","e47349","ocr-47270_1__47305","e47350","e47351","e47348","e47311","e47347","e47346","e47312","ocr-47270_2__47306","e47345","e47344","e47313","e47343","e47342","e47314","e47341","e47338","e47340","e47339","e47315","e47337","e47336","e47316","e47335","e47329","e47333","e47334","e47330","e47332","e47331","e47317","e47328","e47327","e47318","e47326","e47325","e47319","e47324","e47321","e47323","e47322","e47320","e47309","e47307","posh.lib.q-analyze/patterns-from-eavs","dbvarmap","patterns","cljs.core/group-by","p__47364","vec__47365","p1__47363#","cljs.core.apply","cljs.core/merge","posh.lib.q-analyze/filter-patterns-from-eavs","p__47369","vec__47370","p1__47368#","posh.lib.q-analyze/just-qvars","ins","args","G__47373","G__47374","posh.lib.q-analyze/get-input-sets","q-fn","varmap","qvars","cljs.core/keys","varvals","cljs.core.partial","cljs.core/vals","varsets","cljs.core/merge-with","p1__47375#","posh.lib.q-analyze/pull-pattern?","posh.lib.q-analyze/replace-find-pulls","qfind","clojure.walk/postwalk","posh.lib.q-analyze/get-pull-var-pairs","posh.lib.q-analyze/match-var-to-db","dbeavs","vec__47376","posh.lib.pull-analyze/ref?","posh.lib.q-analyze/match-vars-to-dbs","G__47379","G__47380","G__47381","posh.lib.q-analyze/index-of","posh.lib.q-analyze/db-arg?","arg","posh.lib.q-analyze/convert-args-to","type","p1__47382#","posh.lib.q-analyze/make-dbarg-map","G__47383","G__47384","posh.lib.q-analyze/split-datoms","datoms","p__47385","vec__47386","db-sym","db-datoms","cljs.core.comp","posh.lib.q-analyze/schema-ref?","schema","posh.lib.q-analyze/indexes-of","coll","p1__47390#","p2__47389#","cljs.core.keep_indexed","posh.lib.q-analyze/lookup-ref?","var-name","var-value","clause","remaining","pred__47394","expr__47395","cljs.core/=","posh.lib.q-analyze/resolve-any-idents","entid-fn","input-set","s__47398","b__47400","i__47399","iter__47397","posh.lib.q-analyze/q-analyze","dcfg","retrieve","newqm","fixed-args","p__47405","vec__47406","sym","lookup-ref-patterns","cljs.core.filter","cljs.core.every_pred","p__47409","vec__47410","p__47413","vec__47414","p__47417","vec__47418","posh.lib.util/t-for-datoms","G__47422","G__47423","fexpr__47421","in-vars","eavs-ins","p__47424","vec__47425","seq__47426","first__47427","cljs.core/next","temp__5733__auto__","linked-qvars","cljs.core.remove","cljs.core/nil?","p__47428","vec__47429","rvars","prepped-eavs","p1__47403#","cljs.core/not","p1__47404#","cljs.core/chunk-first"],"sourcesContent":["(ns posh.lib.q-analyze\n  (:require\n   [posh.lib.util :as util]\n   [posh.lib.datom-matcher :as dm]\n   [posh.lib.pull-analyze :as pa]\n   #?(:clj [clojure.core.match :refer [match]]\n      :cljs [cljs.core.match :refer-macros [match]])))\n\n;;;;;;;;; Q-datoms  -- gets datoms for a query\n\n(defn take-until [stop-at? ls]\n  (if (or\n       (empty? ls)\n       (stop-at? (first ls)))\n    []\n    (cons (first ls) (take-until stop-at? (rest ls)))))\n\n(defn rest-at [rest-at? ls]\n  (if (or (empty? ls) (rest-at? (first ls)))\n    ls\n    (recur rest-at? (rest ls))))\n\n(defn split-list-at [split-at? ls]\n  (if (empty? ls)\n    {}\n    (merge {(first ls) (take-until split-at? (take-until split-at? (rest ls)))}\n           (split-list-at split-at? (rest-at split-at? (rest ls))))))\n\n(defn query-to-map [query]\n  (if-not (map? query)\n    (split-list-at keyword? query)\n    query))\n\n(defn dbvar? [x] (and (symbol? x) (= (first (str x)) \\$)))\n\n(defn qvar? [x] (and (symbol? x) (= (first (str x)) \\?)))\n\n(defn get-all-vars [query]\n  (cond\n   (empty? query) #{}\n   (coll? (first query)) (clojure.set/union (get-all-vars (first query))\n                                            (get-all-vars (rest query)))\n   (qvar? (first query)) (conj (get-all-vars (rest query)) (first query))\n   :else (get-all-vars (rest query))))\n\n(def qvar-gen\n  (let [qvar-count (atom 3284832)]\n    (fn [] (symbol (str \"?var\" (swap! qvar-count inc))))))\n\n(defn eav? [v]\n  (and (vector? v)\n       (not (or (coll? (first v))\n                (coll? (second v))))))\n\n(defn wildcard? [s] (= s '_))\n\n(defn normalize-eav-helper [eav n neweav vars]\n  (if (= n 0)\n    {:eav neweav :vars vars}\n    (if (and (first eav) (not (wildcard? (first eav))))\n      (normalize-eav-helper (rest eav) (dec n)\n                            (conj neweav (first eav))\n                            vars)\n      (let [var (qvar-gen)]\n        (normalize-eav-helper (rest eav) (dec n)\n                              (conj neweav var)\n                              (conj vars var))))))\n\n(defn normalize-eav [eav]\n  (let [dbeav (if (dbvar? (first eav))\n                eav\n                (cons (symbol \"$\") eav))]\n    (vec (cons (first dbeav) (concat (:eav (normalize-eav-helper (rest dbeav) 3 [] []))\n                                     (drop 4 dbeav))))))\n\n(defn normalize-all-eavs [where]\n  (cond\n   (empty? where) []\n\n   (list? where)\n   (if (some #{(first where)} ['or-join 'not-join]) ;; skip first vector\n     (concat [(first where) (second where)] (normalize-all-eavs (vec (drop 2 where))))\n     (cons (first where) (normalize-all-eavs (vec (rest where)))))\n\n   (eav? where)\n   (normalize-eav where)\n\n   (and (vector? where) (list? (first where)))\n   where\n\n   (coll? where)\n   (vec (map normalize-all-eavs where))\n\n   :else where))\n\n\n(defn get-eavs [where]\n  (if (empty? where)\n    []\n    (let [item (first where)]\n      (cond\n       (seq? item)\n       (if (some #{(first item)} ['or-join 'not-join]) ;; skip first vector\n         (concat (get-eavs (vec (rest where))) (get-eavs (vec (drop 2 item))))\n         (concat (get-eavs (vec (rest where))) (get-eavs (vec (rest item)))))\n\n       (eav? item)\n       (cons item (get-eavs (rest where)))\n\n       (and (vector? item) (seq? (first item)))\n       (match (vec (concat [(vec (first item))] (rest item)))\n              [['get-else db e a _] v]\n              (concat [[db e a v]] (get-eavs (vec (rest where))))\n              :else (get-eavs (vec (rest where))))\n\n       :else (get-eavs (vec (rest where)))))))\n\n\n(defn qm-to-query [qm]\n  (reduce (fn [xs [k v]]\n            (concat xs [k] v))\n          []\n          qm))\n\n(defn create-q-datoms [results eavs vars]\n  (set\n   (mapcat (fn [r] (let [vs (zipmap vars r)]\n                    (map (fn [eav]\n                           (vec (map #(if (qvar? %) (get vs %) %) eav)))\n                         eavs)))\n           results)))\n\n;;; q pattern gen ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn count-qvars [xs]\n  (cond\n   (empty? xs) {}\n   (coll? (first xs)) (merge-with + (count-qvars (first xs)) (count-qvars (rest xs)))\n   :else (merge-with +\n                     (when (qvar? (first xs)) {(first xs) 1})\n                     (count-qvars (rest xs)))))\n\n(defn fill-qvar-set [qvar results where]\n  (for [r results]\n    (let [vars (zipmap where r)]\n      (get vars qvar))))\n\n(defn seq-merge-with [f seq1 seq2]\n  (if (empty? seq1)\n    []\n    (cons (f (first seq1) (first seq2))\n          (seq-merge-with f (rest seq1) (rest seq2)))))\n\n(defn stack-vectors [vs]\n  (reduce (fn [stacked eav]\n            (seq-merge-with conj stacked eav))\n          (take (count (first vs)) (repeat #{})) vs))\n\n(defn pattern-from-eav--old [vars [e a v :as eav]]\n  (let [[qe qa qv] (map qvar? eav)]\n    (for [ee (if qe ['_ (get vars e)] [e])\n          aa (if qa ['_ (get vars a)] [a])\n          vv (if qv ['_ (get vars v)] [v])\n          :when (let [wildcard-count\n                      (reduce + (map #(if (= '_ %) 1 0) [ee aa vv]))\n                      exposed-qvars\n                      (reduce + (map (fn [[var? val]]\n                                       (if (and var? (not= val '_))\n                                         1\n                                         0))\n                                     [[qe ee] [qa aa] [qv vv]]))\n                      qvar-count (reduce + (map #(if % 1 0) [qe qa qv]))]\n                  (and (>= wildcard-count 1)\n                       (or (and (> qvar-count 1) (= 1 exposed-qvars))\n                           (<= qvar-count 1))\n                       (<= wildcard-count qvar-count)))]\n      [ee aa vv])))\n\n(defn get_ [m k]\n  \"returns '_ if k is not found\"\n  (or (get m k) '_))\n\n;; generates matching patterns from eavs.\n;; the qvars are \"connecting\" vars that are used between\n;; two eavs in the query. the '_ wildcards are either output\n;; vars or originally wildcards. Input vars and things like\n;; attribs that are hand-typed in the query are there as\n;; they are or as sets (if there was a var that inputted a set)\n(defn pattern-from-eav [vars eav]\n  (match [(vec eav) (vec (map qvar? eav))]\n         [['_ '_ '_] _] [[]]\n         [['_ '_ v] [_ _ false]] [['_ '_ v]]\n         [['_ '_ v] [_ _ true]] [['_ '_ (get_ vars v)]]\n         [['_ a '_] [_ false _]] [['_ a '_]]\n         [['_ a '_] [_ true _]] [['_ (get_ vars a) '_]]\n         [[e '_ '_] [false _ _]] [[e '_ '_]]\n         [[e '_ '_] [true _ _]] [[(get_ vars e) '_ '_]]\n         [[e a '_] [true true _]] [[(get_ vars e) '_ '_]\n                                   ['_ (get_ vars a) '_]]\n         [[e a '_] [true false _]] [[(get_ vars e) a '_]]\n         [[e a '_] [false true _]] [[e (get_ vars a) '_]]\n         [[e a '_] [false false _]] [[e a '_]]\n         [[e '_ v] [true _ true]] [[(get_ vars e) '_ '_]\n                                   ['_ '_ (get_ vars v)]]\n         [[e '_ v] [true _ false]] [[(get_ vars e) '_ v]]\n         [[e '_ v] [false _ true]] [[e '_ (get_ vars v)]]\n         [[e '_ v] [false _ false]] [[e '_ v]]\n         [['_ a v] [_ true true]] [['_ '_  (get_ vars v)]\n                                   ['_ (get_ vars a) '_]]\n         [['_ a v] [_ true false]] [['_ (get_ vars a) v]]\n         [['_ a v] [_ false true]] [['_ a (get_ vars v)]]\n         [['_ a v] [_ false false]] [['_ a v]]\n         [[e a v] [true true true]] [['_ '_  (get_ vars v)]\n                                     ['_ (get_ vars a) '_]\n                                     [(get_ vars e) '_ '_]]\n         [[e a v] [false true true]] [[e '_  (get_ vars v)]\n                                      [e (get_ vars a) '_]]\n         [[e a v] [true false true]] [['_ a  (get_ vars v)]\n                                      [(get_ vars e) a '_]]\n         [[e a v] [true true false]] [['_ (get_ vars a) v]\n                                      [(get_ vars e) '_ v]]\n         [[e a v] [false false true]] [[e a '_]]\n         [[e a v] [true false false]] [['_ a v]]\n         [[e a v] [false true false]] [[e '_ v]]\n         [[e a v] [false false false]] [[e a v]]   ;;; maybe this?\n         :else [[]]))\n\n\n\n\n;; this is the pattern that tells the filter it should update.\n;; it won't match any v's that change unless they are connected\n;; to some other part of the query. i.e. if the query is looking\n;; at :person/name it won't update when the name changes.\n(defn filter-pattern-from-eav [vars eav]\n  (match [(vec eav) (vec (map qvar? eav))]\n         [['_ '_ '_] _] []  ;; if it matches everything, it never\n         ;; needs to update itself\n         [['_ '_ v] [_ _ false]] [['_ '_ v]]\n         [['_ '_ v] [_ _ true]] [['_ '_ (vars v)]]\n         [['_ a '_] [_ false _]] [['_ a '_]]\n         [['_ a '_] [_ true _]] [['_ (vars a) '_]]\n         [[e '_ '_] [false _ _]] [[e '_ '_]]\n         [[e '_ '_] [true _ _]] [[(vars e) '_ '_]]\n         [[e a '_] [true true _]] [[(vars e) '_ '_]\n                                   ['_ (vars a) '_]]\n         [[e a '_] [true false _]] [[(vars e) a '_]]\n         [[e a '_] [false true _]] [[e (vars a) '_]]\n         [[e '_ v] [true _ true]] [[(vars e) '_ '_]\n                                   ['_ '_ (vars v)]]\n         [[e '_ v] [true _ false]] [[(vars e) '_ v]]\n         [[e '_ v] [false _ true]] [[e '_ (vars v)]]\n         [['_ a v] [_ true true]] [['_ '_  (vars v)]\n                                   ['_ (vars a) '_]]\n         [['_ a v] [_ true false]] [['_ (vars a) v]]\n         [['_ a v] [_ false true]] [['_ a (vars v)]]\n         [[e a v] [true true true]] [['_ '_  (vars v)]\n                                     ['_ (vars a) '_]\n                                     [(vars e) '_ '_]]\n         [[e a v] [false true true]] [[e '_  (vars v)]\n                                      [e (vars a) '_]]\n         [[e a v] [true false true]] [['_ a  (vars v)]\n                                      [(vars e) a '_]]\n         [[e a v] [true true false]] [['_ (vars a) v]\n                                      [(vars e) '_ v]]\n         [[e a v] [false false true]] [[e a '_]]\n         [[e a v] [true false false]] [['_ a v]]\n         [[e a v] [false true false]] [[e '_ v]]\n         :else [[]]))\n\n(defn patterns-from-eavs [dbvarmap vars patterns]\n  (->> (group-by first patterns)\n       (map (fn [[k v]]\n              {(:db-id (dbvarmap k)) (mapcat #(pattern-from-eav vars (rest %)) v)}))\n       (apply merge)))\n\n(defn filter-patterns-from-eavs [dbvarmap vars patterns]\n  (->> (group-by first patterns)\n       (map (fn [[k v]]\n              {(:db-id (dbvarmap k)) (mapcat #(filter-pattern-from-eav vars (rest %)) v)}))\n       (apply merge)))\n\n(defn just-qvars [ins args]\n  (if (empty? ins)\n    {}\n    (merge\n     (when-not (and (symbol? (first ins)) (= (first (str (first ins))) \\$))\n       {(first ins) (first args)})\n     (just-qvars (rest ins) (rest args)))))\n\n(defn get-input-sets [q-fn ins args]\n  (let [varmap  (just-qvars ins args)]\n    (if-not (empty? varmap)\n      (let\n          [qvars   (vec (get-all-vars (keys varmap)))\n           varvals (apply\n                    (partial q-fn {:find qvars\n                                   :in (keys varmap)})\n                    (vals varmap))\n           varsets (reduce (partial merge-with conj) (zipmap qvars (repeat #{}))\n                           (map #(zipmap qvars %) varvals))]\n        varsets)\n      {})))\n\n;;;; handling pulls in queries\n\n;;; needs to also extract all the pulls\n\n(defn pull-pattern? [x]\n  (and (coll? x) (= (first x) 'pull) (= 3 (count x))))\n\n(defn replace-find-pulls [qfind]\n  \"replaces pulls in query's :find with just their eid symbol\"\n  (clojure.walk/postwalk (fn [x] (if (pull-pattern? x)\n                                  (second x)\n                                  x)) qfind))\n\n(defn get-pull-var-pairs [qfind]\n  \"returns map of any vars and their pull commands in the :find\"\n  (if (coll? qfind)\n    (cond\n     (empty? qfind) {}\n     (pull-pattern? qfind) {(second qfind) (nth qfind 2)}\n     :else (apply merge (map get-pull-var-pairs qfind)))\n   {}))\n\n(defn match-var-to-db [var dbvarmap dbeavs]\n  (if (empty? dbeavs)\n    nil\n    (let [[db e a v] (first dbeavs)]\n      (if (or (= var e) (and (= var v) (pa/ref? (:schema (dbvarmap db)) a)))\n        (dbvarmap db)\n        (recur var dbvarmap (rest dbeavs))))))\n\n(defn match-vars-to-dbs [vars dbvarmap dbeavs]\n  (if (empty? vars)\n    {}\n    (merge {(first vars) (match-var-to-db (first vars) dbvarmap dbeavs)}\n           (match-vars-to-dbs (rest vars) dbvarmap dbeavs))))\n\n(defn index-of [xs x]\n  (loop [n 0\n         xs xs]\n    (cond\n     (empty? xs) nil\n     (= (first xs) x) n\n     :else (recur (inc n) (rest xs)))))\n\n\n;;;; handling db args: {:conn conn :db db}\n\n(defn db-arg? [arg]\n  (and\n   (map? arg)\n   (:db arg)\n   (:conn arg)))\n\n(defn convert-args-to [type args]\n  (map #(if (db-arg? %) (type %) %) args))\n\n(defn make-dbarg-map [ins args]\n  (if (empty? ins)\n    {}\n    (merge\n     (when (dbvar? (first ins))\n       {(first ins) (first args)})\n     (make-dbarg-map (rest ins) (rest args)))))\n\n(comment\n  (defn split-datoms [dbvarmap datoms]\n    (->> (group-by first datoms)\n         (map (fn [[db db-datoms]]\n                {(dbvarmap db)\n                 (map (comp vec rest) db-datoms)}))\n         (apply merge))))\n\n(defn split-datoms [datoms]\n  (->> (group-by first datoms)\n       (map (fn [[db-sym db-datoms]]\n              {db-sym\n               (map (comp vec rest) db-datoms)}))\n       (apply merge)))\n\n(defn- schema-ref?\n  \"Returns whether attribute identified by k is of :db/valueType :db.type/ref\"\n  [schema k]\n  (= :db.type/ref (:db/valueType (get schema k))))\n\n(defn- indexes-of [e coll] (keep-indexed #(if (= e %2) %1) coll))\n\n(defn- lookup-ref?\n  \"Returns whether var-name is used as lookup-ref inside of query's :where clauses.\n  var-name - the symbolic variable name\n  where - coll of where clauses\n  schema - map of schemas with attribute names as keys\n  Returns boolean true or false\"\n  [schema where var-name var-value]\n  (if-not (coll? var-value)\n    false\n    (loop [clause (first where)\n           remaining (rest where)]\n      (condp = (first (indexes-of var-name clause))\n        1 true\n\n        ;; If datascript supported :db/valueTuple :db.type/tuple, could check that here\n        ;; instead of needing to scan every :where clause to ensure it's not a schema-ref\n        3 (if (schema-ref? schema (nth clause 2))\n            true\n            (if (seq remaining)\n              (recur (first remaining) (rest remaining))\n              false))\n\n        (if (seq remaining)\n          (recur (first remaining) (rest remaining))\n          false)))))\n\n(defn resolve-any-idents\n  \"Given input-set from query, resolves any lookup-refs\n  Inputs:\n  entid-fn - Datomic/DS function to take lookup-ref & returns entid\n  db - value of DB\n  schemas - map with keys matching known schema attributes\n  where - where clauses of query\n  input-set - value from query :in\"\n  [entid-fn db schema where var-name input-set]\n  (set (for [var-value input-set]\n         (if (lookup-ref? schema where var-name var-value)\n           (entid-fn db var-value)\n           var-value))))\n\n;;;;;;;; q function that gives pattern, datoms, and results all in one\n;;;;;;;; query. db should be first of args (for now. later, finding\n;;;;;;;; the t of each datom will be part of the q).\n\n;; instead of passing db's to q-analyze you pass\n;; {:conn conn :db db :schema schema :db-id db-id}\n\n;; it will return the requested info, sorted by db-id.\n\n;; not necessarily working at this time...\n(comment\n  (defn q-analyze-with-pulls [dcfg retrieve query & args]\n    (if (and (= 1 (count retrieve)) (some #{:results} retrieve))\n      {:results (apply (partial (:q dcfg) query) (convert-args-to :db args))}\n      (let [qm            (if-not (map? query)\n                            (query-to-map query)\n                            query)\n            where         (normalize-all-eavs (:where qm))\n            eavs          (get-eavs where)\n            vars          (vec (get-all-vars eavs))\n            newqm         (merge qm {:find vars :where where})\n            newq          (qm-to-query newqm)\n            dbvarmap      (make-dbarg-map (:in qm) args)\n            r             (apply (partial (:q dcfg) newqm) (convert-args-to :db args))\n            ;; handle pull queries:\n            pull-vars     (get-pull-var-pairs (:find qm))\n            pull-vars-dbs (match-vars-to-dbs (keys pull-vars) dbvarmap eavs)\n            no-pulls-find (replace-find-pulls (:find qm))]\n        (merge\n         (when (some #{:pulls} retrieve)\n           {:pulls pull-vars-dbs})\n         (when (some #{:datoms :datoms-t} retrieve)\n           (let [datoms (split-datoms dbvarmap (create-q-datoms r eavs vars))]\n             (merge\n              (when (some #{:datoms} retrieve)\n                {:datoms datoms})\n              (when (some #{:datoms-t} retrieve)\n                {:datoms-t\n                 (->> datoms\n                      (map (fn [[db db-datoms]]\n                             {db\n                              (util/t-for-datoms (:q dcfg) (:db db) db-datoms)}))\n                      (apply merge))}))))\n         (when (some #{:results} retrieve)\n           {:results\n            (d/q {:find (vec no-pulls-find)\n                  :in [[vars '...]]}\n                 (vec r))})\n         (when (some #{:patterns} retrieve)\n           (let\n               [in-vars      (get-input-sets (:in qm) args)\n                eavs-ins     (clojure.walk/postwalk\n                              #(if-let [v (in-vars %)] v %) eavs)\n                qvar-count   (count-qvars eavs-ins)\n                linked-qvars (set (remove nil? (map (fn [[k v]] (if (> v 1) k)) qvar-count)))\n                rvars        (zipmap\n                              vars\n                              (stack-vectors r))\n                prepped-eavs (clojure.walk/postwalk\n                              #(if (and (qvar? %) (not (linked-qvars %))) '_ %)\n                              eavs-ins)]\n             {:patterns (patterns-from-eavs dbvarmap rvars prepped-eavs)})))))))\n\n\n(defn q-analyze [dcfg retrieve query args]\n  (let [qm           (merge\n                      {:in '[$]}\n                      (query-to-map query))\n        where        (normalize-all-eavs (vec (:where qm)))\n        eavs         (get-eavs where)\n        vars         (vec (get-all-vars eavs))\n        newqm        (merge qm {:find vars :where where})\n        ;; This doesn't seem to be getting used anymore\n        ;;newq         (qm-to-query newqm)\n        dbvarmap     (make-dbarg-map (:in qm) args)\n        fixed-args   (->> (zipmap (:in qm) args)\n                          (map (fn [[sym arg]]\n                                 (or (:db (get dbvarmap sym)) arg))))\n        r            (apply (partial (:q dcfg) newqm) fixed-args)\n        lookup-ref-patterns\n        (->> args\n             ;; Would be nice to check by the schema as well, to make sure this is actually a identity attribute\n             (filter (every-pred vector? (comp keyword? first) (comp (partial = 2) count)))\n             (map (fn [[a v]] ['$ '_ a v])))]\n    (merge\n     (when (some #{:datoms :datoms-t} retrieve)\n       (let [datoms (split-datoms (create-q-datoms r eavs vars))]\n         (merge\n          (when (some #{:datoms} retrieve)\n            {:datoms\n             (->> datoms\n                  (map (fn [[db-sym db-datoms]]\n                         {(:db-id (dbvarmap db-sym))\n                          db-datoms}))\n                  (apply merge))})\n          (when (some #{:datoms-t} retrieve)\n            {:datoms-t\n             (->> datoms\n                  (map (fn [[db-sym db-datoms]]\n                         (let [db (dbvarmap db-sym)]\n                           {(:db-id db)\n                            (util/t-for-datoms (:q dcfg) (:db db) db-datoms)})))\n                  (apply merge))}))))\n     (when (some #{:results} retrieve)\n       {:results\n        ((:q dcfg) {:find (vec (:find qm))\n                    :in [[vars '...]]}\n         (vec r))})\n     (when (some #{:patterns :filter-patterns :simple-patterns} retrieve)\n       (let\n           [in-vars      (get-input-sets (:q dcfg) (:in qm) args)\n            eavs-ins    (map (fn [[db & eav]]\n                               (vec\n                                (cons db\n                                      (map\n                                       (fn [var-name]\n                                         (if-let [var-value (in-vars var-name)]\n                                           (resolve-any-idents (:entid dcfg)\n                                                               (:db (get dbvarmap db))\n                                                               (:schema (get dbvarmap db))\n                                                               where\n                                                               var-name\n                                                               var-value)\n                                           var-name))\n                                       eav))))\n                             (concat lookup-ref-patterns eavs))\n            qvar-count   (count-qvars eavs-ins)\n            linked-qvars (set (remove nil? (map (fn [[k v]] (if (> v 1) k)) qvar-count)))\n            rvars        (zipmap\n                          vars\n                          (stack-vectors r))\n            prepped-eavs (clojure.walk/postwalk\n                          #(if (and (qvar? %) (not (linked-qvars %))) '_ %)\n                          eavs-ins)]\n         (merge\n          (when (some #{:simple-patterns} retrieve)\n            {:patterns\n             (patterns-from-eavs dbvarmap rvars\n                                 (clojure.walk/postwalk #(if (qvar? %) '_ %)\n                                                        eavs-ins))})\n          (when (some #{:patterns} retrieve)\n            {:patterns (patterns-from-eavs dbvarmap rvars prepped-eavs)\n             :linked   linked-qvars})\n          (when (some #{:filter-patterns} retrieve)\n            {:filter-patterns (filter-patterns-from-eavs dbvarmap rvars prepped-eavs)})))))))\n"]}