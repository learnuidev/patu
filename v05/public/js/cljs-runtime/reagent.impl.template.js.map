{"version":3,"sources":["reagent/impl/template.cljs"],"mappings":"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","names":["reagent.impl.template/re-tag","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","reagent.impl.template/NativeWrapper","reagent.impl.template/->NativeWrapper","tag","id","className","reagent.impl.template/adapt-react-class","c","reagent.impl.template/hiccup-tag?","x","reagent.impl.util/named?","reagent.impl.template/valid-tag?","cljs.core/ifn?","reagent.impl.template/prop-name-cache","reagent.impl.template/cache-get","o","k","goog.object/get","reagent.impl.template/cached-prop-name","temp__5737__auto__","k'","cljs.core/name","v","reagent.impl.util/dash-to-prop-name","goog.object/set","reagent.impl.template/kv-conv","G__26794","reagent.impl.template/convert-prop-value","reagent.impl.util/js-val?","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply","reagent.impl.template/custom-prop-name-cache","reagent.impl.template/cached-custom-prop-name","reagent.impl.template/custom-kv-conv","G__26797","reagent.impl.template/convert-custom-prop-value","reagent.impl.template/set-id-class","props","id-class","class","G__26798","cljs.core.assoc","reagent.impl.util.class_names","or__4126__auto__","reagent.impl.template/convert-props","G__26799","reagent.impl.template/make-element","this","argv","component","jsprops","first-child","G__26800","cljs.core/count","js/module$node_modules$react$index.createElement","reagent.impl.protocols/as-element","cljs.core.nth","a","reagent.impl.template/HiccupTag","reagent.impl.template/->HiccupTag","custom","reagent.impl.template/parse-tag","hiccup-tag","vec__26806","cljs.core/re-matches","cljs.core/next","clojure.string/replace","js/Error","reagent.impl.component/comp-name","cljs.core.not_EQ_","reagent.impl.template/reag-element","compiler","reagent.impl.component/as-class","temp__5739__auto__","key","reagent.impl.util/react-key-from-vec","reagent.impl.template/function-element","first-arg","cljs.core.subvec","reagent.impl.component/functional-render-fn","reagent.impl.template/maybe-function-element","reagent.impl.component/react-class?","reagent.impl.template/fragment-element","hasprops","reagent.impl.protocols/make-element","js/module$node_modules$react$index.Fragment","reagent.impl.template/tag-name-cache","reagent.impl.template/cached-parse","s","reagent.impl.template/native-element","parsed","first","reagent.impl.input/input-component?","input-class","reagent.impl.component/create-class","reagent.impl.input/input-spec","cljs.core/with-meta","cljs.core/meta","reagent.impl.util/get-react-key","reagent.impl.template/raw-element","comp","reagent.impl.template/expand-seq","cljs.core.into_array","p1__26809#","cljs.core.map","reagent.impl.template/expand-seq-dev","val","cljs.core/vector?","reagent.impl.template/expand-seq-check","vec__26810","ctx","res","derefed","reagent.ratom/check-derefs","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","reagent.impl.util.hiccup_err","reagent.impl.template/hiccup-element","n","pos","G__26813","cljs.core._EQ_","cljs.core.subs","reagent.impl.template/vec-to-elem","fn-to-element","js/console.error","cljs.core.pr_str","G__26814","cljs.core/Keyword","reagent.impl.template/as-element","cljs.core/seq?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","reagent.impl.template/create-compiler","opts","cljs.core.gensym","js/reagent","js/reagent.impl","js/reagent.impl.template","js/reagent.impl.template.t_reagent$impl$template26816","reagent.impl.template/t_reagent$impl$template26816","_26818","meta26817","reagent.impl.template/->t_reagent$impl$template26816","reagent.impl.template/default-compiler*","reagent.impl.template/default-compiler","reagent.impl.template/set-default-compiler!"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [reagent.impl.util :as util :refer [named?]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.input :as input]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dev? warn]]\n            [goog.object :as gobj]))\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [tag id className])\n\n(defn adapt-react-class\n  [c]\n  (->NativeWrapper c nil nil))\n\n;;; Common utilities\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n;;; Props conversion\n\n;; TODO: Move prop-name caches to the compiler object, if this\n;; conversion can be configured.\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (gobj/get o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set prop-name-cache (name k) v)\n        v))\n    k))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-prop-name k) (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set custom-prop-name-cache (name k) v)\n        v))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-custom-prop-name k) (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id (.-id id-class)\n        class (.-className id-class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      ;; Note: someone might use React-style :className property,\n      ;; this is the only place where that needs special case. Using\n      ;; :class and :className together is not supported.\n      (assoc :class (util/class-names class (or (:class props) (:className props)))))))\n\n(defn convert-props [props ^clj id-class]\n  (let [class (:class props)\n        props (-> props\n                  (cond-> class (assoc :class (util/class-names class)))\n                  (set-id-class id-class))]\n    (if (.-custom id-class)\n      (convert-custom-prop-value props)\n      (convert-prop-value props))))\n\n;;; Conversion from Hiccup forms\n\n(defn make-element [this argv component jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement component jsprops)\n\n    1 (react/createElement component jsprops\n                           (p/as-element this (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                          (.push a (p/as-element this v)))\n                         a)\n                       #js [component jsprops] argv))))\n\n(deftype HiccupTag [tag id className custom])\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id className] (->> hiccup-tag name (re-matches re-tag) next)\n        className (when-not (nil? className)\n                    (string/replace className #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\" (comp/comp-name)))\n    (->HiccupTag tag\n                 id\n                 className\n                 ;; Custom element names must contain hyphen\n                 ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n                 (not= -1 (.indexOf tag \"-\")))))\n\n(defn reag-element [tag v compiler]\n  (let [c (comp/as-class tag compiler)\n        jsprops #js {}]\n    (set! (.-argv jsprops) v)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement c jsprops)))\n\n(defn function-element [tag v first-arg compiler]\n  (let [jsprops #js {}]\n    (set! (.-reagentRender jsprops) tag)\n    (set! (.-argv jsprops) (subvec v first-arg))\n    ; (set! (.-opts jsprops) opts)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement (comp/functional-render-fn compiler tag) jsprops)))\n\n(defn maybe-function-element\n  \"If given tag is a Class, use it as a class,\n  else wrap in Reagent function wrapper.\"\n  [tag v compiler]\n  (if (comp/react-class? tag)\n    (reag-element tag v compiler)\n    (function-element tag v 1 compiler)))\n\n(defn fragment-element [argv compiler]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-prop-value (if hasprops props))\n                    #js {})\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (util/react-key-from-vec argv)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv react/Fragment jsprops first-child)))\n\n(def tag-name-cache #js {})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (let [v (parse-tag x)]\n      (gobj/set tag-name-cache x v)\n      v)))\n\n(defn native-element [parsed argv first compiler]\n  (let [component (.-tag parsed)\n        props (nth argv first nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-props (if hasprops props) parsed)\n                    #js {})\n        first-child (+ first (if hasprops 1 0))]\n    (if (input/input-component? component)\n      (let [input-class (or (.-reagentInput compiler)\n                            (let [x (comp/create-class input/input-spec compiler)]\n                              (set! (.-reagentInput compiler) x)\n                              x))]\n        (-> [input-class argv component jsprops first-child compiler]\n            (with-meta (meta argv))\n            (->> (p/as-element compiler))))\n      (do\n        (when-some [key (-> (meta argv) util/get-react-key)]\n          (set! (.-key jsprops) key))\n        (p/make-element compiler argv component jsprops first-child)))))\n\n(defn raw-element [comp argv compiler]\n  (let [props (nth argv 2 nil)\n        jsprops (or props #js {})]\n    (when-some [key (-> (meta argv) util/get-react-key)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv comp jsprops 3)))\n\n(defn expand-seq [s compiler]\n  (into-array (map #(p/as-element compiler %) s)))\n\n(defn expand-seq-dev [s ^clj o compiler]\n  (into-array (map (fn [val]\n                     (when (and (vector? val)\n                                (nil? (util/react-key-from-vec val)))\n                       (set! (.-no-key o) true))\n                     (p/as-element compiler val))\n                   s)))\n\n(defn expand-seq-check [x compiler]\n  (let [ctx #js {}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx compiler))]\n    (when derefed\n      (warn (util/hiccup-err x (comp/comp-name) \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when (.-no-key ctx)\n      (warn (util/hiccup-err x (comp/comp-name) \"Every element in a seq should have a unique :key\")))\n    res))\n\n(defn hiccup-element [v compiler]\n  (let [tag (nth v 0 nil)\n        n (name tag)\n        pos (.indexOf n \">\")]\n    (case pos\n      -1 (native-element (cached-parse n) v 1 compiler)\n      0 (assert (= \">\" n) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup tag\"))\n      ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n      ;; Apply metadata (e.g. :key) to the outermost element.\n      ;; Metadata is probably used only with sequeneces, and in that case\n      ;; only the key of the outermost element matters.\n      (recur (with-meta [(subs n 0 pos)\n                         (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                        (meta v))\n             compiler))))\n\n(defn vec-to-elem [v compiler fn-to-element]\n  (when (nil? compiler)\n    (js/console.error \"vec-to-elem\" (pr-str v)))\n  (assert (pos? (count v)) (util/hiccup-err v (comp/comp-name) \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup form\"))\n    (case tag\n      :> (native-element (->HiccupTag (nth v 1 nil) nil nil nil) v 2 compiler)\n      :r> (raw-element (nth v 1 nil) v compiler)\n      :f> (function-element (nth v 1 nil) v 2 compiler)\n      :<> (fragment-element v compiler)\n      (cond\n       (hiccup-tag? tag)\n       (hiccup-element v compiler)\n\n       (instance? NativeWrapper tag)\n       (native-element tag v 1 compiler)\n\n       :else (fn-to-element tag v compiler)))))\n\n(defn as-element [this x fn-to-element]\n  (cond (util/js-val? x) x\n        (vector? x) (vec-to-elem x this fn-to-element)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x this)\n                   (expand-seq x this))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(defn create-compiler [opts]\n  (let [id (gensym)\n        fn-to-element (if (:function-components opts)\n                        maybe-function-element\n                        reag-element)]\n    (reify p/Compiler\n      ;; This is used to as cache key to cache component fns per compiler\n      (get-id [this] id)\n      (as-element [this x]\n        (as-element this x fn-to-element))\n      (make-element [this argv component jsprops first-child]\n        (make-element this argv component jsprops first-child)))))\n\n(def default-compiler* (create-compiler {}))\n(def ^:dynamic default-compiler default-compiler*)\n\n(defn set-default-compiler! [compiler]\n  (set! default-compiler compiler))\n"]}