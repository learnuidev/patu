{
"version":3,
"file":"module$node_modules$Phaser$src$structs$RTree.js",
"lineCount":17,
"mappings":"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0BzGC,QAASA,MAAM,CAACC,UAAD,CACf,CACI,IAAIC,OAAS,CAAE,OAAF,CAAW,MAAX,CAAmB,QAAnB,CAA6B,SAA7B,CAEb,IAAI,EAAE,IAAF,WAAkBF,MAAlB,CAAJ,CAA8B,MAAO,KAAIA,KAAJ,CAAUC,UAAV,CAAsBC,MAAtB,CAGrC,KAAAC,YAAA,CAAmBC,IAAAC,IAAA,CAAS,CAAT,CAAYJ,UAAZ,EAA0B,CAA1B,CACnB,KAAAK,YAAA,CAAmBF,IAAAC,IAAA,CAAS,CAAT,CAAYD,IAAAG,KAAA,CAA6B,EAA7B,CAAU,IAAAJ,YAAV,CAAZ,CAEnB,KAAAK,MAAA,EATJ,CAudAC,QAASA,SAAS,CAACC,IAAD,CAAOC,MAAP,CAClB,CACIC,QAAA,CAASF,IAAT,CAAe,CAAf,CAAkBA,IAAAG,SAAAC,OAAlB,CAAwCH,MAAxC,CAAgDD,IAAhD,CADJ,CAKAE,QAASA,SAAS,CAACF,IAAD,CAAOK,CAAP,CAAUC,CAAV,CAAaL,MAAb,CAAqBM,QAArB,CAClB,CACSA,QAAL,GAAeA,QAAf,CAA0BC,UAAA,CAAW,IAAX,CAA1B,CACAD;QAAAE,KAAA,CAAgBC,QAChBH,SAAAI,KAAA,CAAgBD,QAChBH,SAAAK,KAAA,CAAgB,CAACF,QACjBH,SAAAM,KAAA,CAAgB,CAACH,QAEjB,KAAK,IAAWI,KAAhB,CAAuBC,CAAvB,CAA2BT,CAA3B,CAA8BS,CAAA,EAA9B,CACID,KACA,CADQd,IAAAG,SAAA,CAAcY,CAAd,CACR,CAAAC,MAAA,CAAOT,QAAP,CAAiBP,IAAAiB,KAAA,CAAYhB,MAAA,CAAOa,KAAP,CAAZ,CAA4BA,KAA7C,CAGJ,OAAOP,SAZX,CAeAS,QAASA,OAAO,CAACE,CAAD,CAAIC,CAAJ,CAChB,CACID,CAAAT,KAAA,CAASf,IAAA0B,IAAA,CAASF,CAAAT,KAAT,CAAiBU,CAAAV,KAAjB,CACTS,EAAAP,KAAA,CAASjB,IAAA0B,IAAA,CAASF,CAAAP,KAAT,CAAiBQ,CAAAR,KAAjB,CACTO,EAAAN,KAAA,CAASlB,IAAAC,IAAA,CAASuB,CAAAN,KAAT,CAAiBO,CAAAP,KAAjB,CACTM,EAAAL,KAAA,CAASnB,IAAAC,IAAA,CAASuB,CAAAL,KAAT,CAAiBM,CAAAN,KAAjB,CACT,OAAOK,EALX,CAQAG,QAASA,gBAAgB,CAACH,CAAD,CAAIC,CAAJ,CAAO,CAAE,MAAOD,EAAAT,KAAP,CAAgBU,CAAAV,KAAlB,CAChCa,QAASA,gBAAgB,CAACJ,CAAD,CAAIC,CAAJ,CAAO,CAAE,MAAOD,EAAAP,KAAP,CAAgBQ,CAAAR,KAAlB,CAEhCY,QAASA,SAAS,CAACL,CAAD,CAAI,CAAE,OAAQA,CAAAN,KAAR,CAAiBM,CAAAT,KAAjB;CAA4BS,CAAAL,KAA5B,CAAqCK,CAAAP,KAArC,CAAF,CACtBa,QAASA,WAAW,CAACN,CAAD,CAAI,CAAE,MAAQA,EAAAN,KAAR,CAAiBM,CAAAT,KAAjB,EAA4BS,CAAAL,KAA5B,CAAqCK,CAAAP,KAArC,CAAF,CAmBxBc,QAASA,SAAS,CAACP,CAAD,CAAIC,CAAJ,CAClB,CACI,MAAOD,EAAAT,KAAP,EAAiBU,CAAAV,KAAjB,EACOS,CAAAP,KADP,EACiBQ,CAAAR,KADjB,EAEOQ,CAAAP,KAFP,EAEiBM,CAAAN,KAFjB,EAGOO,CAAAN,KAHP,EAGiBK,CAAAL,KAJrB,CAOAa,QAASA,WAAW,CAACR,CAAD,CAAIC,CAAJ,CACpB,CACI,MAAOA,EAAAV,KAAP,EAAiBS,CAAAN,KAAjB,EACOO,CAAAR,KADP,EACiBO,CAAAL,KADjB,EAEOM,CAAAP,KAFP,EAEiBM,CAAAT,KAFjB,EAGOU,CAAAN,KAHP,EAGiBK,CAAAP,KAJrB,CAOAH,QAASA,WAAW,CAACL,QAAD,CACpB,CACI,MAAO,CACHA,SAAUA,QADP,CAEHwB,OAAQ,CAFL,CAGHV,KAAM,CAAA,CAHH,CAIHR,KAAMC,QAJH,CAKHC,KAAMD,QALH,CAMHE,KAAM,CAACF,QANJ,CAOHG,KAAM,CAACH,QAPJ,CADX,CAeAkB,QAASA,YAAY,CAACC,GAAD,CAAMC,IAAN,CAAYC,KAAZ,CAAmBC,CAAnB,CAAsBC,OAAtB,CACrB,CAII,IAJJ,IACQC,MAAQ,CAACJ,IAAD,CAAOC,KAAP,CADhB,CAEQI,GAEJ,CAAOD,KAAA9B,OAAP,CAAA,CAEI2B,KAGA,CAHQG,KAAAE,IAAA,EAGR;AAFAN,IAEA,CAFOI,KAAAE,IAAA,EAEP,CAAIL,KAAJ,CAAYD,IAAZ,EAAoBE,CAApB,GAEAG,GAGA,CAHML,IAGN,CAHapC,IAAAG,KAAA,EAAWkC,KAAX,CAAmBD,IAAnB,EAA2BE,CAA3B,CAA+B,CAA/B,CAGb,CAHiDA,CAGjD,CAFAK,WAAA,CAAYR,GAAZ,CAAiBM,GAAjB,CAAsBL,IAAtB,CAA4BC,KAA5B,CAAmCE,OAAnC,CAEA,CAAAC,KAAAI,KAAA,CAAWR,IAAX,CAAiBK,GAAjB,CAAsBA,GAAtB,CAA2BJ,KAA3B,CALA,CATR,CAlkBA,IAAIM,YAAclD,OAAA,CAAQ,wDAAR,CAgClBG,MAAAiD,UAAA,CAAkB,CAEdC,IAAKA,QAAS,EACd,CACI,MAAO,KAAAC,KAAA,CAAU,IAAAC,KAAV,CAAqB,EAArB,CADX,CAHc,CAOdC,OAAQA,QAAS,CAACC,IAAD,CACjB,CAAA,IACQ5C,KAAO,IAAA0C,KADf,CAEQG,OAAS,EAFjB,CAGQ5C,OAAS,IAAAA,OAEb,IAAI,CAACyB,UAAA,CAAWkB,IAAX,CAAiB5C,IAAjB,CAAL,CAA6B,MAAO6C,OAKpC,KAVJ,IAOQC,cAAgB,EAPxB,CAQQ/B,CARR,CAQWgC,GARX,CAQgBjC,KARhB,CAQuBkC,SAEnB,CAAOhD,IAAP,CAAA,CAAa,CACJe,CAAA,CAAI,CAAT,KAAYgC,GAAZ,CAAkB/C,IAAAG,SAAAC,OAAlB,CAAwCW,CAAxC,CAA4CgC,GAA5C,CAAiDhC,CAAA,EAAjD,CAEID,KAGA;AAHQd,IAAAG,SAAA,CAAcY,CAAd,CAGR,CAFAiC,SAEA,CAFYhD,IAAAiB,KAAA,CAAYhB,MAAA,CAAOa,KAAP,CAAZ,CAA4BA,KAExC,CAAIY,UAAA,CAAWkB,IAAX,CAAiBI,SAAjB,CAAJ,GACQhD,IAAAiB,KAAJ,CAAe4B,MAAAP,KAAA,CAAYxB,KAAZ,CAAf,CACSW,QAAA,CAASmB,IAAT,CAAeI,SAAf,CAAJ,CAA+B,IAAAP,KAAA,CAAU3B,KAAV,CAAiB+B,MAAjB,CAA/B,CACAC,aAAAR,KAAA,CAAmBxB,KAAnB,CAHT,CAMJd,KAAA,CAAO8C,aAAAV,IAAA,EAZE,CAeb,MAAOS,OAzBX,CARc,CAoCdI,SAAUA,QAAS,CAACL,IAAD,CACnB,CAAA,IACQ5C,KAAO,IAAA0C,KADf,CAEQzC,OAAS,IAAAA,OAEb,IAAI,CAACyB,UAAA,CAAWkB,IAAX,CAAiB5C,IAAjB,CAAL,CAA6B,MAAO,CAAA,CAKpC,KATJ,IAMQ8C,cAAgB,EANxB,CAOQ/B,CAPR,CAOWgC,GAPX,CAOgBjC,KAPhB,CAOuBkC,SAEnB,CAAOhD,IAAP,CAAA,CAAa,CACJe,CAAA,CAAI,CAAT,KAAYgC,GAAZ,CAAkB/C,IAAAG,SAAAC,OAAlB,CAAwCW,CAAxC,CAA4CgC,GAA5C,CAAiDhC,CAAA,EAAjD,CAKI,GAHAD,KAGI,CAHId,IAAAG,SAAA,CAAcY,CAAd,CAGJ,CAFJiC,SAEI,CAFQhD,IAAAiB,KAAA,CAAYhB,MAAA,CAAOa,KAAP,CAAZ,CAA4BA,KAEpC,CAAAY,UAAA,CAAWkB,IAAX;AAAiBI,SAAjB,CAAJ,CAAiC,CAC7B,GAAIhD,IAAAiB,KAAJ,EAAiBQ,QAAA,CAASmB,IAAT,CAAeI,SAAf,CAAjB,CAA4C,MAAO,CAAA,CACnDF,cAAAR,KAAA,CAAmBxB,KAAnB,CAF6B,CAKrCd,IAAA,CAAO8C,aAAAV,IAAA,EAXE,CAcb,MAAO,CAAA,CAvBX,CArCc,CA+Ddc,KAAMA,QAAS,CAACR,IAAD,CACf,CACI,GAAMA,CAAAA,IAAN,EAActC,CAAAsC,IAAAtC,OAAd,CAA4B,MAAO,KAEnC,IAAIsC,IAAAtC,OAAJ,CAAkB,IAAAR,YAAlB,CAAoC,CAChC,IADgC,IACvBmB,EAAI,CADmB,CAChBgC,IAAML,IAAAtC,OAAtB,CAAmCW,CAAnC,CAAuCgC,GAAvC,CAA4ChC,CAAA,EAA5C,CACI,IAAAoC,OAAA,CAAYT,IAAA,CAAK3B,CAAL,CAAZ,CAEJ,OAAO,KAJyB,CAQhCf,IAAAA,CAAO,IAAAoD,OAAA,CAAYV,IAAAW,MAAA,EAAZ,CAA0B,CAA1B,CAA6BX,IAAAtC,OAA7B,CAA2C,CAA3C,CAA8C,CAA9C,CAEN,KAAAsC,KAAAvC,SAAAC,OAAL,CAIW,IAAAsC,KAAAf,OAAJ,GAAyB3B,IAAA2B,OAAzB,CAEH,IAAA2B,WAAA,CAAgB,IAAAZ,KAAhB,CAA2B1C,IAA3B,CAFG,EAKC,IAAA0C,KAAAf,OAQJ,CARuB3B,IAAA2B,OAQvB,GANQ4B,CAEJ,CAFc,IAAAb,KAEd,CADA,IAAAA,KACA,CADY1C,IACZ,CAAAA,IAAA,CAAOuD,CAIX,EAAA,IAAAC,QAAA,CAAaxD,IAAb;AAAmB,IAAA0C,KAAAf,OAAnB,CAAsC3B,IAAA2B,OAAtC,CAAoD,CAApD,CAAuD,CAAA,CAAvD,CAbG,CAJP,CAEI,IAAAe,KAFJ,CAEgB1C,IAkBhB,OAAO,KAjCX,CAhEc,CAoGdmD,OAAQA,QAAS,CAACM,IAAD,CACjB,CACQA,IAAJ,EAAU,IAAAD,QAAA,CAAaC,IAAb,CAAmB,IAAAf,KAAAf,OAAnB,CAAsC,CAAtC,CACV,OAAO,KAFX,CArGc,CA0Gd7B,MAAOA,QAAS,EAChB,CACI,IAAA4C,KAAA,CAAYlC,UAAA,CAAW,EAAX,CACZ,OAAO,KAFX,CA3Gc,CAgHdkD,OAAQA,QAAS,CAACD,IAAD,CAAOE,QAAP,CACjB,CACI,GAAI,CAACF,IAAL,CAAW,MAAO,KASlB,KAVJ,IAGQzD,KAAO,IAAA0C,KAHf,CAIQE,KAAO,IAAA3C,OAAA,CAAYwD,IAAZ,CAJf,CAKQG,KAAO,EALf,CAMQC,QAAU,EANlB,CAOQ9C,CAPR,CAOW+C,MAPX,CAOmBC,KAPnB,CAO0BC,OAGtB,CAAOhE,IAAP,EAAe4D,IAAAxD,OAAf,CAAA,CAA4B,CAEnBJ,IAAL,GACIA,IAGA,CAHO4D,IAAAxB,IAAA,EAGP,CAFA0B,MAEA,CAFSF,IAAA,CAAKA,IAAAxD,OAAL,CAAmB,CAAnB,CAET,CADAW,CACA,CADI8C,OAAAzB,IAAA,EACJ,CAAA4B,OAAA,CAAU,CAAA,CAJd,CAOA,IAAIhE,IAAAiB,KAAJ,CAAe,CA6T3B,CAAA,CAAA,CA5TiCwC,KAAAA,CAAAA,IAAMtD,KAAAA,MAAAH,IAAAG,SAAAA,CAAewD;AAAAA,QA6TlD,IAAKA,iBAAL,CAAA,CAEA,IAAK,IAAI5C,WAAI,CAAb,CAAgBA,UAAhB,CAAoBkD,KAAA7D,OAApB,CAAkCW,UAAA,EAAlC,CACI,GAAI4C,iBAAA,CAASF,KAAT,CAAeQ,KAAA,CAAMlD,UAAN,CAAf,CAAJ,CAA8B,CAAA,KAAA,CAAOA,UAAP,OAAA,CAAA,CAElC,KAAA,CAAO,EALP,CAAA,IAAe,MAAA,CAAOkD,KAAAC,QAAA,CAAcT,KAAd,CAD1B,CA1TgB,GAAc,EAAd,GAAIM,KAAJ,CAAkB,CAEd/D,IAAAG,SAAAgE,OAAA,CAAqBJ,KAArB,CAA4B,CAA5B,CACAH,KAAAtB,KAAA,CAAUtC,IAAV,CACA,KAAAoE,UAAA,CAAeR,IAAf,CACA,MALc,CAHP,CAYVI,OAAL,EAAiBhE,IAAAiB,KAAjB,EAA8B,CAAAQ,QAAA,CAASzB,IAAT,CAAe4C,IAAf,CAA9B,CAOWkB,MAAJ,EACH/C,CAAA,EAEA,CADAf,IACA,CADO8D,MAAA3D,SAAA,CAAgBY,CAAhB,CACP,CAAAiD,OAAA,CAAU,CAAA,CAHP,EAKAhE,IALA,CAKO,IAZd,EACI4D,IAAAtB,KAAA,CAAUtC,IAAV,CAIA,CAHA6D,OAAAvB,KAAA,CAAavB,CAAb,CAGA,CAFAA,CAEA,CAFI,CAEJ,CADA+C,MACA,CADS9D,IACT,CAAAA,IAAA,CAAOA,IAAAG,SAAA,CAAc,CAAd,CALX,CArBwB,CAoC5B,MAAO,KA9CX,CAjHc,CAkKdF,OAAQA,QAAS,CAACwD,IAAD,CAAO,CAAE,MAAOA,KAAT,CAlKV;AAoKdY,YAAahD,eApKC,CAqKdiD,YAAahD,eArKC,CAuKdiD,OAAQA,QAAS,EAAG,CAAE,MAAO,KAAA7B,KAAT,CAvKN,CAyKd8B,SAAUA,QAAS,CAAC9B,IAAD,CACnB,CACI,IAAAA,KAAA,CAAYA,IACZ,OAAO,KAFX,CA1Kc,CA+KdD,KAAMA,QAAS,CAACzC,IAAD,CAAO6C,MAAP,CACf,CAEI,IADA,IAAIC,cAAgB,EACpB,CAAO9C,IAAP,CAAA,CACQA,IAAAiB,KAAJ,CAAe4B,MAAAP,KAAAmC,MAAA,CAAkB5B,MAAlB,CAA0B7C,IAAAG,SAA1B,CAAf,CACK2C,aAAAR,KAAAmC,MAAA,CAAyB3B,aAAzB,CAAwC9C,IAAAG,SAAxC,CAEL,CAAAH,IAAA,CAAO8C,aAAAV,IAAA,EAEX,OAAOS,OARX,CAhLc,CA2LdO,OAAQA,QAAS,CAACa,KAAD,CAAQnC,IAAR,CAAcC,KAAd,CAAqBJ,MAArB,CACjB,CAAA,IACQ+C,EAAI3C,KAAJ2C,CAAY5C,IAAZ4C,CAAmB,CAD3B,CAEQC,EAAI,IAAAlF,YAGR,IAAIiF,CAAJ,EAASC,CAAT,CAAY,CAER,IAAA3E,KAAOQ,UAAA,CAAWyD,KAAAZ,MAAA,CAAYvB,IAAZ,CAAkBC,KAAlB,CAA0B,CAA1B,CAAX,CACPhC,SAAA,CAASC,IAAT,CAAe,IAAAC,OAAf,CACA;MAAOD,KAJC,CAOP2B,MAAL,GAEIA,MAGA,CAHSjC,IAAAG,KAAA,CAAUH,IAAAkF,IAAA,CAASF,CAAT,CAAV,CAAwBhF,IAAAkF,IAAA,CAASD,CAAT,CAAxB,CAGT,CAAAA,CAAA,CAAIjF,IAAAG,KAAA,CAAU6E,CAAV,CAAchF,IAAAmF,IAAA,CAASF,CAAT,CAAYhD,MAAZ,CAAqB,CAArB,CAAd,CALR,CAQA3B,KAAA,CAAOQ,UAAA,CAAW,EAAX,CACPR,KAAAiB,KAAA,CAAY,CAAA,CACZjB,KAAA2B,OAAA,CAAcA,MAIVmD,EAAAA,CAAKpF,IAAAG,KAAA,CAAU6E,CAAV,CAAcC,CAAd,CACLI,EAAAA,CAAKD,CAALC,CAAUrF,IAAAG,KAAA,CAAUH,IAAAsF,KAAA,CAAUL,CAAV,CAAV,CA3BlB,KA4BWM,CAIP,KAFArD,WAAA,CAAYqC,KAAZ,CAAmBnC,IAAnB,CAAyBC,KAAzB,CAAgCgD,CAAhC,CAAoC,IAAAV,YAApC,CAEA,CAAetD,IAAf,EAAoBgB,KAApB,CAA2BhB,IAA3B,EAAgCgE,CAAhC,CAAoC,CAEhC,IAAAG,OAASxF,IAAA0B,IAAA,CAASL,IAAT,CAAagE,CAAb,CAAkB,CAAlB,CAAqBhD,KAArB,CAETH,YAAA,CAAYqC,KAAZ,CAAmBlD,IAAnB,CAAsBmE,MAAtB,CAA8BJ,CAA9B,CAAkC,IAAAR,YAAlC,CAEA,KAAKW,CAAL,CAASlE,IAAT,CAAYkE,CAAZ,EAAiBC,MAAjB,CAAyBD,CAAzB,EAA8BH,CAA9B,CAAkC,CAE9B,IAAAK,OAASzF,IAAA0B,IAAA,CAAS6D,CAAT,CAAaH,CAAb,CAAkB,CAAlB,CAAqBI,MAArB,CAGTlF,KAAAG,SAAAmC,KAAA,CAAmB,IAAAc,OAAA,CAAYa,KAAZ,CAAmBgB,CAAnB,CAAsBE,MAAtB,CAA8BxD,MAA9B,CAAuC,CAAvC,CAAnB,CAL8B,CANF,CAepC5B,QAAA,CAASC,IAAT,CAAe,IAAAC,OAAf,CAEA;MAAOD,KAjDX,CA5Lc,CAgPdoF,eAAgBA,QAAS,CAACxC,IAAD,CAAO5C,IAAP,CAAaqF,KAAb,CAAoBzB,IAApB,CACzB,CAGI,IAHJ,IACQ7C,CADR,CACWgC,GADX,CACgBjC,KADhB,CACuBwE,UADvB,CACmCC,IADnC,CACyCC,WADzC,CACsDC,OADtD,CAC+DC,cAE3D,CAAA,CAAA,CAAa,CACT9B,IAAAtB,KAAA,CAAUtC,IAAV,CAEA,IAAIA,IAAAiB,KAAJ,EAAiB2C,IAAAxD,OAAjB,CAA+B,CAA/B,GAAqCiF,KAArC,CAA4C,KAE5CI,QAAA,CAAUC,cAAV,CAA2BhF,QAEtBK,EAAA,CAAI,CAAT,KAAYgC,GAAZ,CAAkB/C,IAAAG,SAAAC,OAAlB,CAAwCW,CAAxC,CAA4CgC,GAA5C,CAAiDhC,CAAA,EAAjD,CACID,KAKA,CALQd,IAAAG,SAAA,CAAcY,CAAd,CAKR,CAJAwE,IAIA,CAJOhE,QAAA,CAAST,KAAT,CAIP,CAHA0E,WAGA,EAiPJ9F,IAAAC,IAAA,CApPqCmB,KAoP5BF,KAAT,CApP+BgC,IAoPdhC,KAAjB,CAjPI,CAiPuBlB,IAAA0B,IAAA,CApPUN,KAoPDL,KAAT,CApPImC,IAoPanC,KAAjB,CAjPvB,GAkPJf,IAAAC,IAAA,CArPqCmB,KAqP5BD,KAAT,CArP+B+B,IAqPd/B,KAAjB,CAlPI,CAkPuBnB,IAAA0B,IAAA,CArPUN,KAqPDH,KAAT,CArPIiC,IAqPajC,KAAjB,CAlPvB,EAH0C4E,IAG1C,CAAIC,WAAJ,CAAkBE,cAAlB,EACIA,cAEA,CAFiBF,WAEjB;AADAC,OACA,CADUF,IAAA,CAAOE,OAAP,CAAiBF,IAAjB,CAAwBE,OAClC,CAAAH,UAAA,CAAaxE,KAHjB,EAKW0E,WALX,GAK2BE,cAL3B,EAOQH,IAPR,CAOeE,OAPf,GAQQA,OACA,CADUF,IACV,CAAAD,UAAA,CAAaxE,KATrB,CAcJd,KAAA,CAAOsF,UAAP,EAAqBtF,IAAAG,SAAA,CAAc,CAAd,CA3BZ,CA8Bb,MAAOH,KAjCX,CAjPc,CAqRdwD,QAASA,QAAS,CAACC,IAAD,CAAO4B,KAAP,CAAcM,MAAd,CAClB,CAAA,IACQ1F,OAAS,IAAAA,OACT2C,OAAAA,CAAO+C,MAAA,CAASlC,IAAT,CAAgBxD,MAAA,CAAOwD,IAAP,CACvBmC,OAAAA,CAAa,EAGjB,KAAI5F,KAAO,IAAAoF,eAAA,CAAoBxC,MAApB,CAA0B,IAAAF,KAA1B,CAAqC2C,KAArC,CAA4CO,MAA5C,CAGX5F,KAAAG,SAAAmC,KAAA,CAAmBmB,IAAnB,CAIA,KAHAzC,MAAA,CAAOhB,IAAP,CAAa4C,MAAb,CAGA,CAAgB,CAAhB,EAAOyC,KAAP,CAAA,CACI,GAAIO,MAAA,CAAWP,KAAX,CAAAlF,SAAAC,OAAJ,CAAwC,IAAAX,YAAxC,CACI,IAAAoG,OAAA,CAAYD,MAAZ,CAAwBP,KAAxB,CACA,CAAAA,KAAA,EAFJ,KAGO,MAIX,KAAAS,oBAAA,CAAyBlD,MAAzB;AAA+BgD,MAA/B,CAA2CP,KAA3C,CArBJ,CAtRc,CA+SdQ,OAAQA,QAAS,CAACD,UAAD,CAAaP,KAAb,CACjB,CAAA,IACQrF,KAAO4F,UAAA,CAAWP,KAAX,CADf,CAEQV,EAAI3E,IAAAG,SAAAC,OAFZ,CAGQ2F,EAAI,IAAAnG,YAER,KAAAoG,iBAAA,CAAsBhG,IAAtB,CAA4B+F,CAA5B,CAA+BpB,CAA/B,CAEIsB,EAAAA,CAAa,IAAAC,kBAAA,CAAuBlG,IAAvB,CAA6B+F,CAA7B,CAAgCpB,CAAhC,CAEbwB,EAAAA,CAAU3F,UAAA,CAAWR,IAAAG,SAAAgE,OAAA,CAAqB8B,CAArB,CAAiCjG,IAAAG,SAAAC,OAAjC,CAAwD6F,CAAxD,CAAX,CACdE,EAAAxE,OAAA,CAAiB3B,IAAA2B,OACjBwE,EAAAlF,KAAA,CAAejB,IAAAiB,KAEflB,SAAA,CAASC,IAAT,CAAe,IAAAC,OAAf,CACAF,SAAA,CAASoG,CAAT,CAAkB,IAAAlG,OAAlB,CAEIoF,MAAJ,CAAWO,UAAA,CAAWP,KAAX,CAAmB,CAAnB,CAAAlF,SAAAmC,KAAA,CAAoC6D,CAApC,CAAX,CACK,IAAA7C,WAAA,CAAgBtD,IAAhB,CAAsBmG,CAAtB,CAjBT,CAhTc,CAoUd7C,WAAYA,QAAS,CAACtD,IAAD,CAAOmG,OAAP,CACrB,CAEI,IAAAzD,KAAA,CAAYlC,UAAA,CAAW,CAACR,IAAD,CAAOmG,OAAP,CAAX,CACZ,KAAAzD,KAAAf,OAAA,CAAmB3B,IAAA2B,OAAnB;AAAiC,CACjC,KAAAe,KAAAzB,KAAA,CAAiB,CAAA,CACjBlB,SAAA,CAAS,IAAA2C,KAAT,CAAoB,IAAAzC,OAApB,CALJ,CArUc,CA6UdiG,kBAAmBA,QAAS,CAAClG,IAAD,CAAO+F,CAAP,CAAUpB,CAAV,CAC5B,CAAA,IACQ5D,CADR,CACoD0E,OAEhD,KAAAW,WAAaX,OAAbW,CAAuB1F,QAEvB,KAAKK,CAAL,CAASgF,CAAT,CAAYhF,CAAZ,EAAiB4D,CAAjB,CAAqBoB,CAArB,CAAwBhF,CAAA,EAAxB,CAA6B,CACzB,IAAAsF,MAAQnG,QAAA,CAASF,IAAT,CAAe,CAAf,CAAkBe,CAAlB,CAAqB,IAAAd,OAArB,CACR,KAAAqG,MAAQpG,QAAA,CAASF,IAAT,CAAee,CAAf,CAAkB4D,CAAlB,CAAqB,IAAA1E,OAArB,CAwKhB,KAAA,QAAOP,IAAAC,IAAA,CAAS,CAAT,CAHID,IAAA0B,IAAAR,CAnKwByF,KAmKfzF,KAATA,CAnK+B0F,KAmKd1F,KAAjBA,CAGJ,CALIlB,IAAAC,IAAAc,CAjKwB4F,KAiKf5F,KAATA,CAjK+B6F,KAiKd7F,KAAjBA,CAKJ,CAAP,CACOf,IAAAC,IAAA,CAAS,CAAT,CAHID,IAAA0B,IAAAP,CApKwBwF,KAoKfxF,KAATA,CApK+ByF,KAoKdzF,KAAjBA,CAGJ,CALInB,IAAAC,IAAAgB,CAlKwB0F,KAkKf1F,KAATA,CAlK+B2F,KAkKd3F,KAAjBA,CAKJ,CAtKC4E,MAAA,CAAOhE,QAAA,CAAS8E,KAAT,CAAP,CAAyB9E,QAAA,CAAS+E,KAAT,CAGzB,IAAIC,OAAJ,CAAcH,UAAd,CAA0B,CACtBA,UAAA,CAAaG,OACb,KAAAxC,MAAQhD,CAER0E,QAAA;AAAUF,KAAA,CAAOE,OAAP,CAAiBF,KAAjB,CAAwBE,OAJZ,CAA1B,IAMWc,QAAJ,GAAgBH,UAAhB,EAECb,KAFD,CAEQE,OAFR,GAGCA,OACA,CADUF,KACV,CAAAxB,KAAA,CAAQhD,CAJT,CAdkB,CAuB7B,MAAOgD,MA5BX,CA9Uc,CA8WdiC,iBAAkBA,QAAS,CAAChG,IAAD,CAAO+F,CAAP,CAAUpB,CAAV,CAC3B,CAAA,IACQN,YAAcrE,IAAAiB,KAAA,CAAY,IAAAoD,YAAZ,CAA+BhD,eADrD,CAEQiD,YAActE,IAAAiB,KAAA,CAAY,IAAAqD,YAAZ,CAA+BhD,eAFrD,CAGQkF,QAAU,IAAAC,eAAA,CAAoBzG,IAApB,CAA0B+F,CAA1B,CAA6BpB,CAA7B,CAAgCN,WAAhC,CACVqC,EAAAA,CAAU,IAAAD,eAAA,CAAoBzG,IAApB,CAA0B+F,CAA1B,CAA6BpB,CAA7B,CAAgCL,WAAhC,CAIVkC,QAAJ,CAAcE,CAAd,EAAuB1G,IAAAG,SAAAwG,KAAA,CAAmBtC,WAAnB,CAR3B,CA/Wc,CA2XdoC,eAAgBA,QAAS,CAACzG,IAAD,CAAO+F,CAAP,CAAUpB,CAAV,CAAa1C,OAAb,CACzB,CACIjC,IAAAG,SAAAwG,KAAA,CAAmB1E,OAAnB,CAEIhC,QAAAA,CAAS,IAAAA,OAHjB,KAIQ2G,SAAW1G,QAAA,CAASF,IAAT;AAAe,CAAf,CAAkB+F,CAAlB,CAAqB9F,OAArB,CAJnB,CAKQ4G,UAAY3G,QAAA,CAASF,IAAT,CAAe2E,CAAf,CAAmBoB,CAAnB,CAAsBpB,CAAtB,CAAyB1E,OAAzB,CALpB,CAMQ6G,OAAStF,UAAA,CAAWoF,QAAX,CAATE,CAAgCtF,UAAA,CAAWqF,SAAX,CANxC,CAOQ9F,CAEJ,KAAKA,CAAL,CAASgF,CAAT,CAAYhF,CAAZ,CAAgB4D,CAAhB,CAAoBoB,CAApB,CAAuBhF,CAAA,EAAvB,CAA4B,CACxB,IAAAD,MAAQd,IAAAG,SAAA,CAAcY,CAAd,CACRC,OAAA,CAAO4F,QAAP,CAAiB5G,IAAAiB,KAAA,CAAYhB,OAAA,CAAOa,KAAP,CAAZ,CAA4BA,KAA7C,CACAgG,OAAA,EAAUtF,UAAA,CAAWoF,QAAX,CAHc,CAM5B,IAAK7F,CAAL,CAAS4D,CAAT,CAAaoB,CAAb,CAAiB,CAAjB,CAAoBhF,CAApB,EAAyBgF,CAAzB,CAA4BhF,CAAA,EAA5B,CACID,KAEA,CAFQd,IAAAG,SAAA,CAAcY,CAAd,CAER,CADAC,MAAA,CAAO6F,SAAP,CAAkB7G,IAAAiB,KAAA,CAAYhB,OAAA,CAAOa,KAAP,CAAZ,CAA4BA,KAA9C,CACA,CAAAgG,MAAA,EAAUtF,UAAA,CAAWqF,SAAX,CAGd,OAAOC,OArBX,CA5Xc,CAoZdhB,oBAAqBA,QAAS,CAAClD,IAAD,CAAOgB,IAAP,CAAayB,KAAb,CAC9B,CAEI,IAAA,CAAyB,CAAzB,EAAoBtE,KAApB,CAA4BA,KAAA,EAA5B,CACIC,MAAA,CAAO4C,IAAA,CAAK7C,KAAL,CAAP,CAAgB6B,IAAhB,CAHR,CArZc,CA4ZdwB,UAAWA,QAAS,CAACR,IAAD,CACpB,CAEI,IAFJ,IAEa7C,EAAI6C,IAAAxD,OAAJW;AAAkB,CAF/B,CAEkCgG,QAA9B,CAA6C,CAA7C,EAAwChG,CAAxC,CAAgDA,CAAA,EAAhD,CACoC,CAAhC,GAAI6C,IAAA,CAAK7C,CAAL,CAAAZ,SAAAC,OAAJ,CACY,CAAR,CAAIW,CAAJ,EACIgG,QACA,CADWnD,IAAA,CAAK7C,CAAL,CAAS,CAAT,CAAAZ,SACX,CAAA4G,QAAA5C,OAAA,CAAgB4C,QAAA7C,QAAA,CAAiBN,IAAA,CAAK7C,CAAL,CAAjB,CAAhB,CAA2C,CAA3C,CAFJ,EAIO,IAAAjB,MAAA,EALX,CAOOC,QAAA,CAAS6D,IAAA,CAAK7C,CAAL,CAAT,CAAkB,IAAAd,OAAlB,CAVf,CA7Zc,CA2adoE,YAAaA,QAAS,CAACnD,CAAD,CAAIC,CAAJ,CACtB,CACI,MAAOD,EAAAY,KAAP,CAAgBX,CAAAW,KADpB,CA5ac,CAgbdwC,YAAaA,QAAS,CAACpD,CAAD,CAAIC,CAAJ,CACtB,CACI,MAAOD,EAAA8F,IAAP,CAAe7F,CAAA6F,IADnB,CAjbc,CAqbd/G,OAAQA,QAAS,CAACiB,CAAD,CACjB,CACI,MAAO,CACHT,KAAMS,CAAAY,KADH,CAEHnB,KAAMO,CAAA8F,IAFH,CAGHpG,KAAMM,CAAAa,MAHH,CAIHlB,KAAMK,CAAA+F,OAJH,CADX,CAtbc,CAojBlB7H,OAAAC,QAAA,CAAiBC,KA3lBwF;",
"sources":["node_modules/Phaser/src/structs/RTree.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$structs$RTree\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar quickselect = require('../utils/array/QuickSelect');\r\n\r\n/**\r\n * @classdesc\r\n * RBush is a high-performance JavaScript library for 2D spatial indexing of points and rectangles.\r\n * It's based on an optimized R-tree data structure with bulk insertion support.\r\n *\r\n * Spatial index is a special data structure for points and rectangles that allows you to perform queries like\r\n * \"all items within this bounding box\" very efficiently (e.g. hundreds of times faster than looping over all items).\r\n *\r\n * This version of RBush uses a fixed min/max accessor structure of `[ '.left', '.top', '.right', '.bottom' ]`.\r\n * This is to avoid the eval like function creation that the original library used, which caused CSP policy violations.\r\n *\r\n * @class RTree\r\n * @memberOf Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n */\r\n\r\nfunction rbush (maxEntries)\r\n{\r\n    var format = [ '.left', '.top', '.right', '.bottom' ];\r\n\r\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\r\n\r\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\r\n    this._maxEntries = Math.max(4, maxEntries || 9);\r\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\r\n\r\n    this.clear();\r\n}\r\n\r\nrbush.prototype = {\r\n\r\n    all: function ()\r\n    {\r\n        return this._all(this.data, []);\r\n    },\r\n\r\n    search: function (bbox)\r\n    {\r\n        var node = this.data,\r\n            result = [],\r\n            toBBox = this.toBBox;\r\n\r\n        if (!intersects(bbox, node)) return result;\r\n\r\n        var nodesToSearch = [],\r\n            i, len, child, childBBox;\r\n\r\n        while (node) {\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n\r\n                child = node.children[i];\r\n                childBBox = node.leaf ? toBBox(child) : child;\r\n\r\n                if (intersects(bbox, childBBox)) {\r\n                    if (node.leaf) result.push(child);\r\n                    else if (contains(bbox, childBBox)) this._all(child, result);\r\n                    else nodesToSearch.push(child);\r\n                }\r\n            }\r\n            node = nodesToSearch.pop();\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    collides: function (bbox)\r\n    {\r\n        var node = this.data,\r\n            toBBox = this.toBBox;\r\n\r\n        if (!intersects(bbox, node)) return false;\r\n\r\n        var nodesToSearch = [],\r\n            i, len, child, childBBox;\r\n\r\n        while (node) {\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n\r\n                child = node.children[i];\r\n                childBBox = node.leaf ? toBBox(child) : child;\r\n\r\n                if (intersects(bbox, childBBox)) {\r\n                    if (node.leaf || contains(bbox, childBBox)) return true;\r\n                    nodesToSearch.push(child);\r\n                }\r\n            }\r\n            node = nodesToSearch.pop();\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    load: function (data)\r\n    {\r\n        if (!(data && data.length)) return this;\r\n\r\n        if (data.length < this._minEntries) {\r\n            for (var i = 0, len = data.length; i < len; i++) {\r\n                this.insert(data[i]);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // recursively build the tree with the given data from scratch using OMT algorithm\r\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\r\n\r\n        if (!this.data.children.length) {\r\n            // save as is if tree is empty\r\n            this.data = node;\r\n\r\n        } else if (this.data.height === node.height) {\r\n            // split root if trees have the same height\r\n            this._splitRoot(this.data, node);\r\n\r\n        } else {\r\n            if (this.data.height < node.height) {\r\n                // swap trees if inserted one is bigger\r\n                var tmpNode = this.data;\r\n                this.data = node;\r\n                node = tmpNode;\r\n            }\r\n\r\n            // insert the small tree into the large tree at appropriate level\r\n            this._insert(node, this.data.height - node.height - 1, true);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    insert: function (item)\r\n    {\r\n        if (item) this._insert(item, this.data.height - 1);\r\n        return this;\r\n    },\r\n\r\n    clear: function ()\r\n    {\r\n        this.data = createNode([]);\r\n        return this;\r\n    },\r\n\r\n    remove: function (item, equalsFn)\r\n    {\r\n        if (!item) return this;\r\n\r\n        var node = this.data,\r\n            bbox = this.toBBox(item),\r\n            path = [],\r\n            indexes = [],\r\n            i, parent, index, goingUp;\r\n\r\n        // depth-first iterative tree traversal\r\n        while (node || path.length) {\r\n\r\n            if (!node) { // go up\r\n                node = path.pop();\r\n                parent = path[path.length - 1];\r\n                i = indexes.pop();\r\n                goingUp = true;\r\n            }\r\n\r\n            if (node.leaf) { // check current node\r\n                index = findItem(item, node.children, equalsFn);\r\n\r\n                if (index !== -1) {\r\n                    // item found, remove the item and condense tree upwards\r\n                    node.children.splice(index, 1);\r\n                    path.push(node);\r\n                    this._condense(path);\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\r\n                path.push(node);\r\n                indexes.push(i);\r\n                i = 0;\r\n                parent = node;\r\n                node = node.children[0];\r\n\r\n            } else if (parent) { // go right\r\n                i++;\r\n                node = parent.children[i];\r\n                goingUp = false;\r\n\r\n            } else node = null; // nothing found\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    toBBox: function (item) { return item; },\r\n\r\n    compareMinX: compareNodeMinX,\r\n    compareMinY: compareNodeMinY,\r\n\r\n    toJSON: function () { return this.data; },\r\n\r\n    fromJSON: function (data)\r\n    {\r\n        this.data = data;\r\n        return this;\r\n    },\r\n\r\n    _all: function (node, result)\r\n    {\r\n        var nodesToSearch = [];\r\n        while (node) {\r\n            if (node.leaf) result.push.apply(result, node.children);\r\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\r\n\r\n            node = nodesToSearch.pop();\r\n        }\r\n        return result;\r\n    },\r\n\r\n    _build: function (items, left, right, height)\r\n    {\r\n        var N = right - left + 1,\r\n            M = this._maxEntries,\r\n            node;\r\n\r\n        if (N <= M) {\r\n            // reached leaf level; return leaf\r\n            node = createNode(items.slice(left, right + 1));\r\n            calcBBox(node, this.toBBox);\r\n            return node;\r\n        }\r\n\r\n        if (!height) {\r\n            // target height of the bulk-loaded tree\r\n            height = Math.ceil(Math.log(N) / Math.log(M));\r\n\r\n            // target number of root entries to maximize storage utilization\r\n            M = Math.ceil(N / Math.pow(M, height - 1));\r\n        }\r\n\r\n        node = createNode([]);\r\n        node.leaf = false;\r\n        node.height = height;\r\n\r\n        // split the items into M mostly square tiles\r\n\r\n        var N2 = Math.ceil(N / M),\r\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\r\n            i, j, right2, right3;\r\n\r\n        multiSelect(items, left, right, N1, this.compareMinX);\r\n\r\n        for (i = left; i <= right; i += N1) {\r\n\r\n            right2 = Math.min(i + N1 - 1, right);\r\n\r\n            multiSelect(items, i, right2, N2, this.compareMinY);\r\n\r\n            for (j = i; j <= right2; j += N2) {\r\n\r\n                right3 = Math.min(j + N2 - 1, right2);\r\n\r\n                // pack each entry recursively\r\n                node.children.push(this._build(items, j, right3, height - 1));\r\n            }\r\n        }\r\n\r\n        calcBBox(node, this.toBBox);\r\n\r\n        return node;\r\n    },\r\n\r\n    _chooseSubtree: function (bbox, node, level, path)\r\n    {\r\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\r\n\r\n        while (true) {\r\n            path.push(node);\r\n\r\n            if (node.leaf || path.length - 1 === level) break;\r\n\r\n            minArea = minEnlargement = Infinity;\r\n\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n                child = node.children[i];\r\n                area = bboxArea(child);\r\n                enlargement = enlargedArea(bbox, child) - area;\r\n\r\n                // choose entry with the least area enlargement\r\n                if (enlargement < minEnlargement) {\r\n                    minEnlargement = enlargement;\r\n                    minArea = area < minArea ? area : minArea;\r\n                    targetNode = child;\r\n\r\n                } else if (enlargement === minEnlargement) {\r\n                    // otherwise choose one with the smallest area\r\n                    if (area < minArea) {\r\n                        minArea = area;\r\n                        targetNode = child;\r\n                    }\r\n                }\r\n            }\r\n\r\n            node = targetNode || node.children[0];\r\n        }\r\n\r\n        return node;\r\n    },\r\n\r\n    _insert: function (item, level, isNode)\r\n    {\r\n        var toBBox = this.toBBox,\r\n            bbox = isNode ? item : toBBox(item),\r\n            insertPath = [];\r\n\r\n        // find the best node for accommodating the item, saving all nodes along the path too\r\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\r\n\r\n        // put the item into the node\r\n        node.children.push(item);\r\n        extend(node, bbox);\r\n\r\n        // split on node overflow; propagate upwards if necessary\r\n        while (level >= 0) {\r\n            if (insertPath[level].children.length > this._maxEntries) {\r\n                this._split(insertPath, level);\r\n                level--;\r\n            } else break;\r\n        }\r\n\r\n        // adjust bboxes along the insertion path\r\n        this._adjustParentBBoxes(bbox, insertPath, level);\r\n    },\r\n\r\n    // split overflowed node into two\r\n    _split: function (insertPath, level)\r\n    {\r\n        var node = insertPath[level],\r\n            M = node.children.length,\r\n            m = this._minEntries;\r\n\r\n        this._chooseSplitAxis(node, m, M);\r\n\r\n        var splitIndex = this._chooseSplitIndex(node, m, M);\r\n\r\n        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\r\n        newNode.height = node.height;\r\n        newNode.leaf = node.leaf;\r\n\r\n        calcBBox(node, this.toBBox);\r\n        calcBBox(newNode, this.toBBox);\r\n\r\n        if (level) insertPath[level - 1].children.push(newNode);\r\n        else this._splitRoot(node, newNode);\r\n    },\r\n\r\n    _splitRoot: function (node, newNode)\r\n    {\r\n        // split root node\r\n        this.data = createNode([node, newNode]);\r\n        this.data.height = node.height + 1;\r\n        this.data.leaf = false;\r\n        calcBBox(this.data, this.toBBox);\r\n    },\r\n\r\n    _chooseSplitIndex: function (node, m, M)\r\n    {\r\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\r\n\r\n        minOverlap = minArea = Infinity;\r\n\r\n        for (i = m; i <= M - m; i++) {\r\n            bbox1 = distBBox(node, 0, i, this.toBBox);\r\n            bbox2 = distBBox(node, i, M, this.toBBox);\r\n\r\n            overlap = intersectionArea(bbox1, bbox2);\r\n            area = bboxArea(bbox1) + bboxArea(bbox2);\r\n\r\n            // choose distribution with minimum overlap\r\n            if (overlap < minOverlap) {\r\n                minOverlap = overlap;\r\n                index = i;\r\n\r\n                minArea = area < minArea ? area : minArea;\r\n\r\n            } else if (overlap === minOverlap) {\r\n                // otherwise choose distribution with minimum area\r\n                if (area < minArea) {\r\n                    minArea = area;\r\n                    index = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    },\r\n\r\n    // sorts node children by the best axis for split\r\n    _chooseSplitAxis: function (node, m, M)\r\n    {\r\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\r\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\r\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\r\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\r\n\r\n        // if total distributions margin value is minimal for x, sort by minX,\r\n        // otherwise it's already sorted by minY\r\n        if (xMargin < yMargin) node.children.sort(compareMinX);\r\n    },\r\n\r\n    // total margin of all possible split distributions where each node is at least m full\r\n    _allDistMargin: function (node, m, M, compare)\r\n    {\r\n        node.children.sort(compare);\r\n\r\n        var toBBox = this.toBBox,\r\n            leftBBox = distBBox(node, 0, m, toBBox),\r\n            rightBBox = distBBox(node, M - m, M, toBBox),\r\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\r\n            i, child;\r\n\r\n        for (i = m; i < M - m; i++) {\r\n            child = node.children[i];\r\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\r\n            margin += bboxMargin(leftBBox);\r\n        }\r\n\r\n        for (i = M - m - 1; i >= m; i--) {\r\n            child = node.children[i];\r\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\r\n            margin += bboxMargin(rightBBox);\r\n        }\r\n\r\n        return margin;\r\n    },\r\n\r\n    _adjustParentBBoxes: function (bbox, path, level)\r\n    {\r\n        // adjust bboxes along the given tree path\r\n        for (var i = level; i >= 0; i--) {\r\n            extend(path[i], bbox);\r\n        }\r\n    },\r\n\r\n    _condense: function (path)\r\n    {\r\n        // go through the path, removing empty nodes and updating bboxes\r\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\r\n            if (path[i].children.length === 0) {\r\n                if (i > 0) {\r\n                    siblings = path[i - 1].children;\r\n                    siblings.splice(siblings.indexOf(path[i]), 1);\r\n\r\n                } else this.clear();\r\n\r\n            } else calcBBox(path[i], this.toBBox);\r\n        }\r\n    },\r\n\r\n    compareMinX: function (a, b)\r\n    {\r\n        return a.left - b.left;\r\n    },\r\n\r\n    compareMinY: function (a, b)\r\n    {\r\n        return a.top - b.top;\r\n    },\r\n\r\n    toBBox: function (a)\r\n    {\r\n        return {\r\n            minX: a.left,\r\n            minY: a.top,\r\n            maxX: a.right,\r\n            maxY: a.bottom\r\n        };\r\n    }\r\n};\r\n\r\nfunction findItem (item, items, equalsFn)\r\n{\r\n    if (!equalsFn) return items.indexOf(item);\r\n\r\n    for (var i = 0; i < items.length; i++) {\r\n        if (equalsFn(item, items[i])) return i;\r\n    }\r\n    return -1;\r\n}\r\n\r\n// calculate node's bbox from bboxes of its children\r\nfunction calcBBox (node, toBBox)\r\n{\r\n    distBBox(node, 0, node.children.length, toBBox, node);\r\n}\r\n\r\n// min bounding rectangle of node children from k to p-1\r\nfunction distBBox (node, k, p, toBBox, destNode)\r\n{\r\n    if (!destNode) destNode = createNode(null);\r\n    destNode.minX = Infinity;\r\n    destNode.minY = Infinity;\r\n    destNode.maxX = -Infinity;\r\n    destNode.maxY = -Infinity;\r\n\r\n    for (var i = k, child; i < p; i++) {\r\n        child = node.children[i];\r\n        extend(destNode, node.leaf ? toBBox(child) : child);\r\n    }\r\n\r\n    return destNode;\r\n}\r\n\r\nfunction extend (a, b)\r\n{\r\n    a.minX = Math.min(a.minX, b.minX);\r\n    a.minY = Math.min(a.minY, b.minY);\r\n    a.maxX = Math.max(a.maxX, b.maxX);\r\n    a.maxY = Math.max(a.maxY, b.maxY);\r\n    return a;\r\n}\r\n\r\nfunction compareNodeMinX (a, b) { return a.minX - b.minX; }\r\nfunction compareNodeMinY (a, b) { return a.minY - b.minY; }\r\n\r\nfunction bboxArea (a) { return (a.maxX - a.minX) * (a.maxY - a.minY); }\r\nfunction bboxMargin (a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\r\n\r\nfunction enlargedArea (a, b)\r\n{\r\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\r\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\r\n}\r\n\r\nfunction intersectionArea (a, b)\r\n{\r\n    var minX = Math.max(a.minX, b.minX),\r\n        minY = Math.max(a.minY, b.minY),\r\n        maxX = Math.min(a.maxX, b.maxX),\r\n        maxY = Math.min(a.maxY, b.maxY);\r\n\r\n    return Math.max(0, maxX - minX) *\r\n           Math.max(0, maxY - minY);\r\n}\r\n\r\nfunction contains (a, b)\r\n{\r\n    return a.minX <= b.minX &&\r\n           a.minY <= b.minY &&\r\n           b.maxX <= a.maxX &&\r\n           b.maxY <= a.maxY;\r\n}\r\n\r\nfunction intersects (a, b)\r\n{\r\n    return b.minX <= a.maxX &&\r\n           b.minY <= a.maxY &&\r\n           b.maxX >= a.minX &&\r\n           b.maxY >= a.minY;\r\n}\r\n\r\nfunction createNode (children)\r\n{\r\n    return {\r\n        children: children,\r\n        height: 1,\r\n        leaf: true,\r\n        minX: Infinity,\r\n        minY: Infinity,\r\n        maxX: -Infinity,\r\n        maxY: -Infinity\r\n    };\r\n}\r\n\r\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\r\n// combines selection algorithm with binary divide & conquer approach\r\n\r\nfunction multiSelect (arr, left, right, n, compare)\r\n{\r\n    var stack = [left, right],\r\n        mid;\r\n\r\n    while (stack.length)\r\n    {\r\n        right = stack.pop();\r\n        left = stack.pop();\r\n\r\n        if (right - left <= n) continue;\r\n\r\n        mid = left + Math.ceil((right - left) / n / 2) * n;\r\n        quickselect(arr, mid, left, right, compare);\r\n\r\n        stack.push(left, mid, mid, right);\r\n    }\r\n}\r\n\r\nmodule.exports = rbush;\n};"],
"names":["shadow$provide","global","require","module","exports","rbush","maxEntries","format","_maxEntries","Math","max","_minEntries","ceil","clear","calcBBox","node","toBBox","distBBox","children","length","k","p","destNode","createNode","minX","Infinity","minY","maxX","maxY","child","i","extend","leaf","a","b","min","compareNodeMinX","compareNodeMinY","bboxArea","bboxMargin","contains","intersects","height","multiSelect","arr","left","right","n","compare","stack","mid","pop","quickselect","push","prototype","all","_all","data","search","bbox","result","nodesToSearch","len","childBBox","collides","load","insert","_build","slice","_splitRoot","tmpNode","_insert","item","remove","equalsFn","path","indexes","parent","index","goingUp","items","indexOf","splice","_condense","compareMinX","compareMinY","toJSON","fromJSON","apply","N","M","log","pow","N2","N1","sqrt","j","right2","right3","_chooseSubtree","level","targetNode","area","enlargement","minArea","minEnlargement","isNode","insertPath","_split","_adjustParentBBoxes","m","_chooseSplitAxis","splitIndex","_chooseSplitIndex","newNode","minOverlap","bbox1","bbox2","overlap","xMargin","_allDistMargin","yMargin","sort","leftBBox","rightBBox","margin","siblings","top","bottom"]
}
