{
"version":3,
"file":"module$node_modules$Phaser$src$device$Audio.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,4CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOpGC,MAAAA,CAAUH,OAAA,CAAQ,+CAAR,CAqBVI,QAAAA,CAAQ,CAERC,UAAW,CAAA,CAFH,CAGRC,MAAO,CAAA,CAHC,CAIRC,IAAK,CAAA,CAJG,CAKRC,IAAK,CAAA,CALG,CAMRC,IAAK,CAAA,CANG,CAORC,KAAM,CAAA,CAPE,CAQRC,IAAK,CAAA,CARG,CASRC,SAAU,CAAA,CATF,CAURC,KAAM,CAAA,CAVE,CAgBRT,QAAAC,UAAA,CAAkB,CAAC,CAAES,MAAA,MAErBV,QAAAQ,SAAA,CAAiB,EAAG,CAAAE,MAAA,aAAH,EAA6B,CAAAA,MAAA,mBAA7B,CAEbC,QAAAA,CAAeC,QAAAC,cAAA,CAAuB,OAAvB,CAEnB,KAAIC,OAAS,CAAC,CAACH,OAAAI,YAEf,IACA,CACI,GAAID,MAAJ,CACA,CACQH,OAAAI,YAAA,CAAyB,+BAAzB,CAAAC,QAAA,CAA+D,MAA/D;AAAuE,EAAvE,CAAJ,GAEIhB,OAAAK,IAFJ,CAEgB,CAAA,CAFhB,CAKA,IAAIM,OAAAI,YAAA,CAAyB,6BAAzB,CAAAC,QAAA,CAA6D,MAA7D,CAAqE,EAArE,CAAJ,EAAgFL,OAAAI,YAAA,CAAyB,aAAzB,CAAAC,QAAA,CAAgD,MAAhD,CAAwD,EAAxD,CAAhF,CAEIhB,OAAAM,KAAA,CAAa,CAAA,CAGbK,QAAAI,YAAA,CAAyB,aAAzB,CAAAC,QAAA,CAAgD,MAAhD,CAAwD,EAAxD,CAAJ,GAEIhB,OAAAI,IAFJ,CAEgB,CAAA,CAFhB,CAQIO,QAAAI,YAAA,CAAyB,0BAAzB,CAAAC,QAAA,CAA0D,MAA1D,CAAkE,EAAlE,CAAJ,GAEIhB,OAAAO,IAFJ,CAEgB,CAAA,CAFhB,CAKA,IAAII,OAAAI,YAAA,CAAyB,cAAzB,CAAJ,EAAgDJ,OAAAI,YAAA,CAAyB,YAAzB,CAAAC,QAAA,CAA+C,MAA/C,CAAuD,EAAvD,CAAhD,CAEIhB,OAAAG,IAAA,CAAY,CAAA,CAGZQ,QAAAI,YAAA,CAAyB,gCAAzB,CAAAC,QAAA,CAAgE,MAAhE,CAAwE,EAAxE,CAAJ;CAEIhB,OAAAS,KAFJ,CAEiB,CAAA,CAFjB,CAKA,IAA4D,EAA5D,GAAIE,OAAAI,YAAA,CAAyB,4BAAzB,CAAJ,CAEI,GAAIhB,MAAAkB,KAAJ,CAEIjB,OAAAE,MAAA,CAAc,CAAA,CAFlB,KAIK,IAAIH,MAAAmB,OAAJ,EAA+C,CAA/C,EAAsBnB,MAAAoB,cAAtB,EAEI,sBAADC,KAAA,CAA8BC,SAAAC,UAA9B,CAFH,CAGD,CACI,IAAIC,MAAQC,QAAA,CAASC,MAAAC,GAAT,CAAoB,EAApB,CAAZ,CACIC,MAAQH,QAAA,CAASC,MAAAG,GAAT,CAAoB,EAApB,CAEZ,IAAe,EAAf,GAAKL,KAAL,EAA8B,EAA9B,EAAqBI,KAArB,EAA6C,EAA7C,CAAqCJ,KAArC,CAEIvB,OAAAE,MAAA,CAAc,CAAA,CANtB,CA3CZ,CAFJ,CA0DA,MAAO2B,CAAP,CACA,EAOJhC,MAAAC,QAAA,CAHWE,OApH6F;",
"sources":["node_modules/Phaser/src/device/Audio.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$device$Audio\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Browser = require('./Browser');\r\n\r\n/**\r\n * Determines the audio playback capabilities of the device running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.audio` from within any Scene.\r\n * \r\n * @typedef {object} Phaser.Device.Audio\r\n * @since 3.0.0\r\n * \r\n * @property {boolean} audioData - Can this device play HTML Audio tags?\r\n * @property {boolean} dolby - Can this device play EC-3 Dolby Digital Plus files?\r\n * @property {boolean} m4a - Can this device can play m4a files.\r\n * @property {boolean} mp3 - Can this device play mp3 files?\r\n * @property {boolean} ogg - Can this device play ogg files?\r\n * @property {boolean} opus - Can this device play opus files?\r\n * @property {boolean} wav - Can this device play wav files?\r\n * @property {boolean} webAudio - Does this device have the Web Audio API?\r\n * @property {boolean} webm - Can this device play webm files?\r\n */\r\nvar Audio = {\r\n\r\n    audioData: false,\r\n    dolby: false,\r\n    m4a: false,\r\n    mp3: false,\r\n    ogg: false,\r\n    opus: false,\r\n    wav: false,\r\n    webAudio: false,\r\n    webm: false\r\n\r\n};\r\n\r\nfunction init ()\r\n{\r\n    Audio.audioData = !!(window['Audio']);\r\n\r\n    Audio.webAudio = !!(window['AudioContext'] || window['webkitAudioContext']);\r\n\r\n    var audioElement = document.createElement('audio');\r\n\r\n    var result = !!audioElement.canPlayType;\r\n\r\n    try\r\n    {\r\n        if (result)\r\n        {\r\n            if (audioElement.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''))\r\n            {\r\n                Audio.ogg = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, '') || audioElement.canPlayType('audio/opus;').replace(/^no$/, ''))\r\n            {\r\n                Audio.opus = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/mpeg;').replace(/^no$/, ''))\r\n            {\r\n                Audio.mp3 = true;\r\n            }\r\n\r\n            //  Mimetypes accepted:\r\n            //  developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\r\n            //  bit.ly/iphoneoscodecs\r\n            if (audioElement.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''))\r\n            {\r\n                Audio.wav = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/x-m4a;') || audioElement.canPlayType('audio/aac;').replace(/^no$/, ''))\r\n            {\r\n                Audio.m4a = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''))\r\n            {\r\n                Audio.webm = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/mp4;codecs=\"ec-3\"') !== '')\r\n            {\r\n                if (Browser.edge)\r\n                {\r\n                    Audio.dolby = true;\r\n                }\r\n                else if (Browser.safari && Browser.safariVersion >= 9)\r\n                {\r\n                    if ((/Mac OS X (\\d+)_(\\d+)/).test(navigator.userAgent))\r\n                    {\r\n                        var major = parseInt(RegExp.$1, 10);\r\n                        var minor = parseInt(RegExp.$2, 10);\r\n\r\n                        if ((major === 10 && minor >= 11) || major > 10)\r\n                        {\r\n                            Audio.dolby = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (e)\r\n    {\r\n        //  Nothing to do here\r\n    }\r\n\r\n    return Audio;\r\n}\r\n\r\nmodule.exports = init();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Browser","Audio","audioData","dolby","m4a","mp3","ogg","opus","wav","webAudio","webm","window","audioElement","document","createElement","result","canPlayType","replace","edge","safari","safariVersion","test","navigator","userAgent","major","parseInt","RegExp","$1","minor","$2","e"]
}
