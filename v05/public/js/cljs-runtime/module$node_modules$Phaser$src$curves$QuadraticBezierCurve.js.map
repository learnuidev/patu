{
"version":3,
"file":"module$node_modules$Phaser$src$curves$QuadraticBezierCurve.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/curves/QuadraticBezierCurve.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$curves$QuadraticBezierCurve\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Curve = require('./Curve');\r\nvar QuadraticBezierInterpolation = require('../math/interpolation/QuadraticBezierInterpolation');\r\nvar Vector2 = require('../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class QuadraticBezier\r\n * @extends Phaser.Curves.Curve\r\n * @memberOf Phaser.Curves\r\n * @constructor\r\n * @since 3.2.0\r\n *\r\n * @param {(Phaser.Math.Vector2|number[])} p0 - Start point, or an array of point pairs.\r\n * @param {Phaser.Math.Vector2} p1 - Control Point 1.\r\n * @param {Phaser.Math.Vector2} p2 - Control Point 2.\r\n */\r\nvar QuadraticBezier = new Class({\r\n\r\n    Extends: Curve,\r\n\r\n    initialize:\r\n\r\n    function QuadraticBezier (p0, p1, p2)\r\n    {\r\n        Curve.call(this, 'QuadraticBezier');\r\n\r\n        if (Array.isArray(p0))\r\n        {\r\n            p2 = new Vector2(p0[4], p0[5]);\r\n            p1 = new Vector2(p0[2], p0[3]);\r\n            p0 = new Vector2(p0[0], p0[1]);\r\n        }\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.QuadraticBezier#p0\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.2.0\r\n         */\r\n        this.p0 = p0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.QuadraticBezier#p1\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.2.0\r\n         */\r\n        this.p1 = p1;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.QuadraticBezier#p2\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.2.0\r\n         */\r\n        this.p2 = p2;\r\n    },\r\n\r\n    /**\r\n     * Gets the starting point on the curve.\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#getStartPoint\r\n     * @since 3.2.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getStartPoint: function (out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        return out.copy(this.p0);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#getResolution\r\n     * @since 3.2.0\r\n     *\r\n     * @param {number} divisions - [description]\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getResolution: function (divisions)\r\n    {\r\n        return divisions;\r\n    },\r\n\r\n    /**\r\n     * Get point at relative position in curve according to length.\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#getPoint\r\n     * @since 3.2.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getPoint: function (t, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        var p0 = this.p0;\r\n        var p1 = this.p1;\r\n        var p2 = this.p2;\r\n\r\n        return out.set(\r\n            QuadraticBezierInterpolation(t, p0.x, p1.x, p2.x),\r\n            QuadraticBezierInterpolation(t, p0.y, p1.y, p2.y)\r\n        );\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#draw\r\n     * @since 3.2.0\r\n     *\r\n     * @generic {Phaser.GameObjects.Graphics} G - [graphics,$return]\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - `Graphics` object to draw onto.\r\n     * @param {integer} [pointsTotal=32] - Number of points to be used for drawing the curve. Higher numbers result in smoother curve but require more processing.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} `Graphics` object that was drawn to.\r\n     */\r\n    draw: function (graphics, pointsTotal)\r\n    {\r\n        if (pointsTotal === undefined) { pointsTotal = 32; }\r\n\r\n        var points = this.getPoints(pointsTotal);\r\n\r\n        graphics.beginPath();\r\n        graphics.moveTo(this.p0.x, this.p0.y);\r\n\r\n        for (var i = 1; i < points.length; i++)\r\n        {\r\n            graphics.lineTo(points[i].x, points[i].y);\r\n        }\r\n\r\n        graphics.strokePath();\r\n\r\n        //  So you can chain graphics calls\r\n        return graphics;\r\n    },\r\n\r\n    /**\r\n     * Converts the curve into a JSON compatible object.\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#toJSON\r\n     * @since 3.2.0\r\n     *\r\n     * @return {JSONCurve} The JSON object containing this curve data.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        return {\r\n            type: this.type,\r\n            points: [\r\n                this.p0.x, this.p0.y,\r\n                this.p1.x, this.p1.y,\r\n                this.p2.x, this.p2.y\r\n            ]\r\n        };\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Creates a curve from a JSON object, e. g. created by `toJSON`.\r\n *\r\n * @function Phaser.Curves.QuadraticBezier.fromJSON\r\n * @since 3.2.0\r\n *\r\n * @param {JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.QuadraticBezier} The created curve instance.\r\n */\r\nQuadraticBezier.fromJSON = function (data)\r\n{\r\n    var points = data.points;\r\n\r\n    var p0 = new Vector2(points[0], points[1]);\r\n    var p1 = new Vector2(points[2], points[3]);\r\n    var p2 = new Vector2(points[4], points[5]);\r\n\r\n    return new QuadraticBezier(p0, p1, p2);\r\n};\r\n\r\nmodule.exports = QuadraticBezier;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Curve","QuadraticBezierInterpolation","Vector2","QuadraticBezier","Extends","initialize","p0","p1","p2","call","Array","isArray","getStartPoint","out","undefined","copy","getResolution","divisions","getPoint","t","set","x","y","draw","graphics","pointsTotal","points","getPoints","beginPath","moveTo","i","length","lineTo","strokePath","toJSON","type","fromJSON","QuadraticBezier.fromJSON","data"]
}
