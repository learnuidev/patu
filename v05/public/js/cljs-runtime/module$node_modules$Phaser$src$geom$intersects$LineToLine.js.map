{
"version":3,
"file":"module$node_modules$Phaser$src$geom$intersects$LineToLine.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOtH,IAAIC,MAAQH,OAAA,CAAQ,iDAAR,CA+DZC,OAAAC,QAAA,CA9CiBE,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAeC,GAAf,CAC1B,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,IAAIJ,KAAnC,CAEA,KAAIM,GAAKJ,KAAAI,GAAT,CACIC,GAAKL,KAAAK,GADT,CAEIC,GAAKN,KAAAM,GACLC,MAAAA,CAAKP,KAAAO,GAET,KAAIC,GAAKP,KAAAG,GAAT,CACIK,GAAKR,KAAAI,GADT,CAEIK,GAAKT,KAAAK,GAFT,CAGIK,GAAKV,KAAAM,GAILK,MAAAA,EAASD,EAATC,CAAcH,EAAdG,GAAqBN,EAArBM,CAA0BR,EAA1BQ,GAAiCF,EAAjCE,CAAsCJ,EAAtCI,GAA6CL,KAA7CK,CAAkDP,EAAlDO,CAMJ,IAAc,CAAd,GAAIA,KAAJ,CAEI,MAAO,CAAA,CAKPC,GAAAA,GAfQH,EAeRG,CAfaL,EAebK,GAfoBR,EAepBQ,CAfyBJ,EAezBI,GAfgCF,EAehCE,CAfqCJ,EAerCI,GAf4CT,EAe5CS,CAfiDL,EAejDK,GAAYD,KACZE,GAAAA,GAfQR,EAeRQ,CAfaV,EAebU,GAfoBT,EAepBS,CAfyBL,EAezBK,GAfgCP,KAehCO,CAfqCT,EAerCS,GAf4CV,EAe5CU;AAfiDN,EAejDM,GAAYF,KAKhB,OAAU,EAAV,EAAIC,EAAJ,EAAqB,CAArB,EAAeA,EAAf,EAAgC,CAAhC,EAA0BC,EAA1B,EAA2C,CAA3C,EAAqCA,EAArC,EAEIZ,GAAAa,EAGO,CAHCX,EAGD,CAHOS,EAGP,EAHaP,EAGb,CAHkBF,EAGlB,EAFPF,GAAAc,EAEO,CAFCX,EAED,CAFOQ,EAEP,EAFaN,KAEb,CAFkBF,EAElB,EAAA,CAAA,CALX,EAQO,CAAA,CA1CX,CAzBsH;",
"sources":["node_modules/Phaser/src/geom/intersects/LineToLine.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$intersects$LineToLine\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n//  This is based off an explanation and expanded math presented by Paul Bourke:\r\n//  See http:'local.wasp.uwa.edu.au/~pbourke/geometry/lineline2d/\r\n\r\n/**\r\n * Checks if two Lines intersect. If the Lines are identical, they will be treated as parallel and thus non-intersecting.\r\n *\r\n * @function Phaser.Geom.Intersects.LineToLine\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line1 - The first Line to check.\r\n * @param {Phaser.Geom.Line} line2 - The second Line to check.\r\n * @param {Phaser.Geom.Point} [out] - A Point in which to optionally store the point of intersection.\r\n *\r\n * @return {boolean} `true` if the two Lines intersect, and the `out` object will be populated, if given. Otherwise, `false`.\r\n */\r\nvar LineToLine = function (line1, line2, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var x1 = line1.x1;\r\n    var y1 = line1.y1;\r\n    var x2 = line1.x2;\r\n    var y2 = line1.y2;\r\n\r\n    var x3 = line2.x1;\r\n    var y3 = line2.y1;\r\n    var x4 = line2.x2;\r\n    var y4 = line2.y2;\r\n\r\n    var numA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\r\n    var numB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\r\n    var deNom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\r\n\r\n    //  Make sure there is not a division by zero - this also indicates that the lines are parallel.\r\n    //  If numA and numB were both equal to zero the lines would be on top of each other (coincidental).\r\n    //  This check is not done because it is not necessary for this implementation (the parallel check accounts for this).\r\n\r\n    if (deNom === 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    //  Calculate the intermediate fractional point that the lines potentially intersect.\r\n\r\n    var uA = numA / deNom;\r\n    var uB = numB / deNom;\r\n\r\n    //  The fractional point will be between 0 and 1 inclusive if the lines intersect.\r\n    //  If the fractional calculation is larger than 1 or smaller than 0 the lines would need to be longer to intersect.\r\n\r\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1)\r\n    {\r\n        out.x = x1 + (uA * (x2 - x1));\r\n        out.y = y1 + (uA * (y2 - y1));\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nmodule.exports = LineToLine;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Point","LineToLine","line1","line2","out","undefined","x1","y1","x2","y2","x3","y3","x4","y4","deNom","uA","uB","x","y"]
}
