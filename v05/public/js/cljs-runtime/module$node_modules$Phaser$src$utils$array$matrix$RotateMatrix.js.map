{
"version":3,
"file":"module$node_modules$Phaser$src$utils$array$matrix$RotateMatrix.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,+DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAS3H,IAAIC,YAAcH,OAAA,CAAQ,+DAAR,CAAlB,CACII,gBAAkBJ,OAAA,CAAQ,mEAAR,CAkDtBC,OAAAC,QAAA,CArCmBG,QAAS,CAACC,MAAD,CAASC,SAAT,CAC5B,CACsBC,IAAAA,EAAlB,GAAID,SAAJ,GAA+BA,SAA/B,CAA2C,EAA3C,CAEA,IAAI,CAACJ,WAAA,CAAYG,MAAZ,CAAL,CAEI,MAAO,KAGc,SAAzB,GAAI,MAAOC,UAAX,GAEIA,SAFJ,EAEkBA,SAFlB,CAE8B,GAF9B,CAEqC,GAFrC,EAE4C,GAF5C,CAKA,IAAkB,EAAlB,GAAIA,SAAJ,EAAsC,IAAtC;AAAwBA,SAAxB,EAA4D,YAA5D,GAA8CA,SAA9C,CAEID,MACA,CADSF,eAAA,CAAgBE,MAAhB,CACT,CAAAA,MAAAG,QAAA,EAHJ,KAKK,IAAkB,GAAlB,GAAIF,SAAJ,EAAuC,GAAvC,GAAyBA,SAAzB,EAA4D,aAA5D,GAA8CA,SAA9C,CAEDD,MAAAG,QAAA,EACA,CAAAH,MAAA,CAASF,eAAA,CAAgBE,MAAhB,CAHR,KAKA,IAA4B,GAA5B,GAAII,IAAAC,IAAA,CAASJ,SAAT,CAAJ,EAAiD,WAAjD,GAAmCA,SAAnC,CACL,CACI,IAASK,SAAT,CAAa,CAAb,CAAgBA,SAAhB,CAAoBN,MAAAO,OAApB,CAAmCD,SAAA,EAAnC,CAEIN,MAAA,CAAOM,SAAP,CAAAH,QAAA,EAGJH,OAAAG,QAAA,EANJ,CASA,MAAOH,OAjCX,CAxB2H;",
"sources":["node_modules/Phaser/src/utils/array/matrix/RotateMatrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$array$matrix$RotateMatrix\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n// Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\r\n\r\nvar CheckMatrix = require('./CheckMatrix');\r\nvar TransposeMatrix = require('./TransposeMatrix');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateMatrix\r\n * @since 3.0.0\r\n *\r\n * @param {array} matrix - The array to rotate.\r\n * @param {(number|string)} [direction=90] - The amount to rotate the matrix by. The value can be given in degrees: 90, -90, 270, -270 or 180, or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\r\n *\r\n * @return {array} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nvar RotateMatrix = function (matrix, direction)\r\n{\r\n    if (direction === undefined) { direction = 90; }\r\n\r\n    if (!CheckMatrix(matrix))\r\n    {\r\n        return null;\r\n    }\r\n\r\n    if (typeof direction !== 'string')\r\n    {\r\n        direction = ((direction % 360) + 360) % 360;\r\n    }\r\n\r\n    if (direction === 90 || direction === -270 || direction === 'rotateLeft')\r\n    {\r\n        matrix = TransposeMatrix(matrix);\r\n        matrix.reverse();\r\n    }\r\n    else if (direction === -90 || direction === 270 || direction === 'rotateRight')\r\n    {\r\n        matrix.reverse();\r\n        matrix = TransposeMatrix(matrix);\r\n    }\r\n    else if (Math.abs(direction) === 180 || direction === 'rotate180')\r\n    {\r\n        for (var i = 0; i < matrix.length; i++)\r\n        {\r\n            matrix[i].reverse();\r\n        }\r\n\r\n        matrix.reverse();\r\n    }\r\n\r\n    return matrix;\r\n};\r\n\r\nmodule.exports = RotateMatrix;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","CheckMatrix","TransposeMatrix","RotateMatrix","matrix","direction","undefined","reverse","Math","abs","i","length"]
}
