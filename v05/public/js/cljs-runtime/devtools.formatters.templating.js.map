{"version":3,"sources":["devtools/formatters/templating.cljs"],"mappings":"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","names":["devtools.formatters.templating/mark-as-group!","value","x25737","cljs.core/PROTOCOL_SENTINEL","devtools.formatters.templating/group?","cljs.core/native-satisfies?","devtools.protocols/IGroup","devtools.formatters.templating/mark-as-template!","x25742","devtools.formatters.templating/template?","devtools.protocols/ITemplate","devtools.formatters.templating/mark-as-surrogate!","x25746","devtools.formatters.templating/surrogate?","devtools.protocols/ISurrogate","devtools.formatters.templating/reference?","cljs.core._EQ_","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","devtools.formatters.templating/make-group","seq25748","self__4724__auto__","cljs.core/seq","items","group","seq__25749","chunk__25750","count__25751","i__25752","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","item","cljs.core/coll?","cljs.core.into_array","devtools.formatters.helpers/pref","devtools.formatters.templating/make-template","seq25757","G__25758","G__25759","self__4723__auto__","tag","style","children","template","cljs.core/empty?","seq__25761","chunk__25762","count__25763","i__25764","child","cljs.core.keep","temp__5733__auto__","child-value","devtools.formatters.templating/concat-templates!","seq25767","G__25768","templates","cljs.core.map","cljs.core/into-array","devtools.formatters.templating/extend-template!","seq25775","G__25776","args","devtools.formatters.templating.concat_templates_BANG_","G__25784","devtools.formatters.templating/make-surrogate","js/Error","object","devtools.formatters.templating.make_surrogate","header","body","start-index","obj25789","or__4126__auto__","devtools.formatters.templating/get-surrogate-target","surrogate","devtools.formatters.templating/get-surrogate-header","devtools.formatters.templating/get-surrogate-body","devtools.formatters.templating/get-surrogate-start-index","devtools.formatters.templating/make-reference","p__25796","vec__25797","cljs.core.nth","seq25794","G__25795","state-override-fn","cljs.core/fn?","devtools.formatters.templating.make_template","sub-state","G__25800","devtools.formatters.state/get-current-state","devtools.formatters.templating.make_group","devtools.formatters.templating/*current-render-stack*","devtools.formatters.templating/*current-render-path*","devtools.formatters.templating/print-preview","markup","*print-level*-orig-val__25804","*print-level*-temp-val__25805","cljs.core/*print-level*","cljs.core.pr_str","devtools.formatters.templating/add-stack-separators","stack","cljs.core.interpose","devtools.formatters.templating/replace-fns-with-markers","f","v","clojure.walk/prewalk","devtools.formatters.templating/pprint-render-calls","devtools.util/pprint-str","devtools.formatters.templating/pprint-render-stack","clojure.string.join","cljs.core/reverse","devtools.formatters.templating/pprint-render-path","path","devtools.util.pprint_str","devtools.formatters.templating/assert-markup-error","msg","devtools.formatters.templating/surrogate-markup?","cljs.core/sequential?","devtools.formatters.templating/render-special","name","G__25806","obj","converted-args","devtools.formatters.templating/render-json-ml*","cljs.core/rest","cljs.core.apply","cljs.core.concat","converted-obj","devtools.formatters.templating/emptyish?","cljs.core/seqable?","cljs.core/array?","devtools.formatters.templating/render-subtree","vec__25807","html-tag","cljs.core.remove","*current-render-path*-orig-val__25814","*current-render-path*-temp-val__25815","cljs.core.conj","devtools.formatters.templating/render-json-ml","*current-render-stack*-orig-val__25816","*current-render-path*-orig-val__25817","*current-render-stack*-temp-val__25818","*current-render-path*-temp-val__25819","devtools.formatters.templating/assert-failed-markup-rendering","initial-value","devtools.formatters.templating/render-markup*","cljs.core/Keyword","devtools.formatters.templating/render-markup"],"sourcesContent":["(ns devtools.formatters.templating\n  (:require-macros [devtools.oops :refer [oget oset ocall oapply safe-call unchecked-aget]])\n  (:require [clojure.walk :refer [prewalk]]\n            [devtools.util :refer [pprint-str]]\n            [devtools.protocols :refer [ITemplate IGroup ISurrogate IFormat]]\n            [devtools.formatters.helpers :refer [pref cljs-value?]]\n            [devtools.formatters.state :refer [get-current-state prevent-recursion?]]\n            [clojure.string :as string]))\n\n; -- object marking support -------------------------------------------------------------------------------------------------\n\n(defn mark-as-group! [value]\n  (specify! value IGroup)\n  value)\n\n(defn group? [value]\n  (satisfies? IGroup value))\n\n(defn mark-as-template! [value]\n  (specify! value ITemplate)\n  value)\n\n(defn template? [value]\n  (satisfies? ITemplate value))\n\n(defn mark-as-surrogate! [value]\n  (specify! value ISurrogate)\n  value)\n\n(defn surrogate? [value]\n  (satisfies? ISurrogate value))\n\n(defn reference? [value]\n  (and (group? value)\n       (= (unchecked-aget value 0) \"object\")))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn make-group [& items]\n  (let [group (mark-as-group! #js [])]\n    (doseq [item items]\n      (if (some? item)\n        (if (coll? item)\n          (.apply (unchecked-aget group \"push\") group (mark-as-group! (into-array item)))                                               ; convenience helper to splat cljs collections\n          (.push group (pref item)))))\n    group))\n\n(defn make-template\n  [tag style & children]\n  (let [tag (pref tag)\n        style (pref style)\n        template (mark-as-template! #js [tag (if (empty? style)\n                                               #js {}\n                                               #js {\"style\" style})])]\n    (doseq [child children]\n      (if (some? child)\n        (if (coll? child)\n          (.apply (unchecked-aget template \"push\") template (mark-as-template! (into-array (keep pref child))))                         ; convenience helper to splat cljs collections\n          (if-let [child-value (pref child)]\n            (.push template child-value)))))\n    template))\n\n(defn concat-templates! [template & templates]\n  (mark-as-template! (.apply (oget template \"concat\") template (into-array (map into-array (keep pref templates))))))\n\n(defn extend-template! [template & args]\n  (concat-templates! template args))\n\n(defn make-surrogate\n  ; passing :target as body means that targt object body should be rendered using standard templates\n  ; see <surrogate-body> in markup.cljs\n  ([object] (make-surrogate object nil))\n  ([object header] (make-surrogate object header nil))\n  ([object header body] (make-surrogate object header body 0))\n  ([object header body start-index]\n   (mark-as-surrogate! (js-obj\n                         \"target\" object\n                         \"header\" header\n                         \"body\" body\n                         \"startIndex\" (or start-index 0)))))\n\n(defn get-surrogate-target [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"target\"))\n\n(defn get-surrogate-header [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"header\"))\n\n(defn get-surrogate-body [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"body\"))\n\n(defn get-surrogate-start-index [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"startIndex\"))\n\n(defn make-reference [object & [state-override-fn]]\n  {:pre [(or (nil? state-override-fn) (fn? state-override-fn))]}\n  (if (nil? object)\n    ; this code is duplicated in markup.cljs <nil>\n    (make-template :span :nil-style :nil-label)\n    (let [sub-state (if (some? state-override-fn)\n                      (state-override-fn (get-current-state))\n                      (get-current-state))]\n      (make-group \"object\" #js {\"object\" object\n                                \"config\" sub-state}))))\n\n; -- JSON ML support --------------------------------------------------------------------------------------------------------\n\n; a renderer from hiccup-like data markup to json-ml\n;\n; [[tag style] child1 child2 ...] -> #js [tag #js {\"style\" ...} child1 child2 ...]\n;\n\n(declare render-json-ml*)\n\n(def ^:dynamic *current-render-stack* [])\n(def ^:dynamic *current-render-path* [])\n\n(defn print-preview [markup]\n  (binding [*print-level* 1]\n    (pr-str markup)))\n\n(defn add-stack-separators [stack]\n  (interpose \"-------------\" stack))\n\n(defn replace-fns-with-markers [stack]\n  (let [f (fn [v]\n            (if (fn? v)\n              \"##fn##\"\n              v))]\n    (prewalk f stack)))\n\n(defn pprint-render-calls [stack]\n  (map pprint-str stack))\n\n(defn pprint-render-stack [stack]\n  (string/join \"\\n\" (-> stack\n                        reverse\n                        replace-fns-with-markers\n                        pprint-render-calls\n                        add-stack-separators)))\n\n(defn pprint-render-path [path]\n  (pprint-str path))\n\n(defn assert-markup-error [msg]\n  (assert false (str msg \"\\n\"\n                     \"Render path: \" (pprint-render-path *current-render-path*) \"\\n\"\n                     \"Render stack:\\n\"\n                     (pprint-render-stack *current-render-stack*))))\n\n(defn surrogate-markup? [markup]\n  (and (sequential? markup) (= (first markup) \"surrogate\")))\n\n(defn render-special [name args]\n  (case name\n    \"surrogate\" (let [obj (first args)\n                      converted-args (map render-json-ml* (rest args))]\n                  (apply make-surrogate (concat [obj] converted-args)))\n    \"reference\" (let [obj (first args)\n                      converted-obj (if (surrogate-markup? obj) (render-json-ml* obj) obj)]\n                  (apply make-reference (concat [converted-obj] (rest args))))\n    (assert-markup-error (str \"no matching special tag name: '\" name \"'\"))))\n\n(defn emptyish? [v]\n  (if (or (seqable? v) (array? v) (string? v))\n    (empty? v)\n    false))\n\n(defn render-subtree [tag children]\n  (let [[html-tag style] tag]\n    (apply make-template html-tag style (map render-json-ml* (remove emptyish? (map pref children))))))\n\n(defn render-json-ml* [markup]\n  (if-not (sequential? markup)\n    markup\n    (binding [*current-render-path* (conj *current-render-path* (first markup))]\n      (let [tag (pref (first markup))]\n        (cond\n          (string? tag) (render-special tag (rest markup))\n          (sequential? tag) (render-subtree tag (rest markup))\n          :else (assert-markup-error (str \"invalid json-ml markup at \" (print-preview markup) \":\")))))))\n\n(defn render-json-ml [markup]\n  (binding [*current-render-stack* (conj *current-render-stack* markup)\n            *current-render-path* (conj *current-render-path* \"<render-json-ml>\")]\n    (render-json-ml* markup)))\n\n; -- template rendering -----------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic assert-failed-markup-rendering [initial-value value]\n  (assert false (str \"result of markup rendering must be a template,\\n\"\n                     \"resolved to \" (pprint-str value)\n                     \"initial value: \" (pprint-str initial-value))))\n\n(defn render-markup* [initial-value value]\n  (cond\n    (fn? value) (recur initial-value (value))\n    (keyword? value) (recur initial-value (pref value))\n    (sequential? value) (recur initial-value (render-json-ml value))\n    (template? value) value\n    (surrogate? value) value\n    (reference? value) value\n    :else (assert-failed-markup-rendering initial-value value)))\n\n(defn render-markup [value]\n  (render-markup* value value))\n"]}