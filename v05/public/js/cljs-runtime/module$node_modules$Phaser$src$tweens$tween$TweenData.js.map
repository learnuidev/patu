{
"version":3,
"file":"module$node_modules$Phaser$src$tweens$tween$TweenData.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmJlHD,MAAAC,QAAA,CA/EgBC,QAAS,CAACC,MAAD,CAASC,GAAT,CAAcC,MAAd,CAAsBC,QAAtB,CAAgCC,IAAhC,CAAsCC,KAAtC,CAA6CC,QAA7C,CAAuDC,IAAvD,CAA6DC,IAA7D,CAAmEC,MAAnE,CAA2EC,WAA3E,CAAwFC,KAAxF,CAA+FC,KAA/F,CACzB,CACI,MAAO,CAGHZ,OAAQA,MAHL,CAMHC,IAAKA,GANF,CASHY,YAAaX,MATV,CAYHY,cAAeX,QAZZ,CAeHC,KAAMA,IAfH,CAkBHE,SAAU,CAlBP,CAqBHS,cAAe,CArBZ,CAwBHV,MAAO,CAxBJ,CA2BHE,KAAMA,IA3BH,CA8BHC,KAAM,CA9BH,CAiCHC,OAAQ,CAjCL,CAoCHC,YAAa,CApCV,CAuCHC,MAAOA,KAvCJ,CA0CHC,MAAOA,KA1CJ,CA6CHI,SAAU,CA7CP,CAgDHC,QAAS,CAhDN,CAmDHC,cAAe,CAnDZ,CAuDHC,MAAO,CAvDJ,CAwDHC,QAAS,CAxDN,CAyDHC,IAAK,CAzDF,CA4DHC,GAAI,CA5DD,CA6DHC,GAAI,CA7DD,CAgEHC,IAAK,CACDnB,MAAOA,KADN,CAEDC,SAAUA,QAFT;AAGDE,KAAMA,IAHL,CAIDC,OAAQA,MAJP,CAKDC,YAAaA,WALZ,CAhEF,CAyEHe,MAAO,CAzEJ,CADX,CArEkH;",
"sources":["node_modules/Phaser/src/tweens/tween/TweenData.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tweens$tween$TweenData\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * @typedef {object} TweenDataGenConfig\r\n *\r\n * @property {function} delay - [description]\r\n * @property {function} duration - [description]\r\n * @property {function} hold - [description]\r\n * @property {function} repeat - [description]\r\n * @property {function} repeatDelay - [description]\r\n */\r\n\r\n/**\r\n * @typedef {object} Phaser.Tweens.TweenDataConfig\r\n *\r\n * @property {object} target - The target to tween.\r\n * @property {string} key - The property of the target being tweened.\r\n * @property {function} getEndValue - The returned value sets what the property will be at the END of the Tween.\r\n * @property {function} getStartValue - The returned value sets what the property will be at the START of the Tween.\r\n * @property {function} ease - The ease function this tween uses.\r\n * @property {number} [duration=0] - Duration of the tween in ms/frames, excludes time for yoyo or repeats.\r\n * @property {number} [totalDuration=0] - The total calculated duration of this TweenData (based on duration, repeat, delay and yoyo)\r\n * @property {number} [delay=0] - Time in ms/frames before tween will start.\r\n * @property {boolean} [yoyo=false] - Cause the tween to return back to its start value after hold has expired.\r\n * @property {number} [hold=0] - Time in ms/frames the tween will pause before running the yoyo or starting a repeat.\r\n * @property {integer} [repeat=0] - Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.\r\n * @property {number} [repeatDelay=0] - Time in ms/frames before the repeat will start.\r\n * @property {boolean} [flipX=false] - Automatically call toggleFlipX when the TweenData yoyos or repeats\r\n * @property {boolean} [flipY=false] - Automatically call toggleFlipY when the TweenData yoyos or repeats\r\n * @property {number} [progress=0] - Between 0 and 1 showing completion of this TweenData.\r\n * @property {number} [elapsed=0] - Delta counter\r\n * @property {integer} [repeatCounter=0] - How many repeats are left to run?\r\n * @property {number} [start=0] - Ease value data.\r\n * @property {number} [current=0] - Ease value data.\r\n * @property {number} [end=0] - Ease value data.\r\n * @property {number} [t1=0] - Time duration 1.\r\n * @property {number} [t2=0] - Time duration 2.\r\n * @property {TweenDataGenConfig} [gen] - LoadValue generation functions.\r\n * @property {integer} [state=0] - TWEEN_CONST.CREATED\r\n */\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Tweens.TweenData\r\n * @since 3.0.0\r\n *\r\n * @param {object} target - [description]\r\n * @param {string} key - [description]\r\n * @param {function} getEnd - [description]\r\n * @param {function} getStart - [description]\r\n * @param {function} ease - [description]\r\n * @param {number} delay - [description]\r\n * @param {number} duration - [description]\r\n * @param {boolean} yoyo - [description]\r\n * @param {number} hold - [description]\r\n * @param {number} repeat - [description]\r\n * @param {number} repeatDelay - [description]\r\n * @param {boolean} flipX - [description]\r\n * @param {boolean} flipY - [description]\r\n *\r\n * @return {TweenDataConfig} [description]\r\n */\r\nvar TweenData = function (target, key, getEnd, getStart, ease, delay, duration, yoyo, hold, repeat, repeatDelay, flipX, flipY)\r\n{\r\n    return {\r\n\r\n        //  The target to tween\r\n        target: target,\r\n\r\n        //  The property of the target to tween\r\n        key: key,\r\n\r\n        //  The returned value sets what the property will be at the END of the Tween.\r\n        getEndValue: getEnd,\r\n\r\n        //  The returned value sets what the property will be at the START of the Tween.\r\n        getStartValue: getStart,\r\n\r\n        //  The ease function this tween uses.\r\n        ease: ease,\r\n\r\n        //  Duration of the tween in ms/frames, excludes time for yoyo or repeats.\r\n        duration: 0,\r\n\r\n        //  The total calculated duration of this TweenData (based on duration, repeat, delay and yoyo)\r\n        totalDuration: 0,\r\n\r\n        //  Time in ms/frames before tween will start.\r\n        delay: 0,\r\n\r\n        //  Cause the tween to return back to its start value after hold has expired.\r\n        yoyo: yoyo,\r\n\r\n        //  Time in ms/frames the tween will pause before running the yoyo or starting a repeat.\r\n        hold: 0,\r\n\r\n        //  Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.\r\n        repeat: 0,\r\n\r\n        //  Time in ms/frames before the repeat will start.\r\n        repeatDelay: 0,\r\n\r\n        //  Automatically call toggleFlipX when the TweenData yoyos or repeats\r\n        flipX: flipX,\r\n\r\n        //  Automatically call toggleFlipY when the TweenData yoyos or repeats\r\n        flipY: flipY,\r\n\r\n        //  Between 0 and 1 showing completion of this TweenData.\r\n        progress: 0,\r\n\r\n        //  Delta counter.\r\n        elapsed: 0,\r\n\r\n        //  How many repeats are left to run?\r\n        repeatCounter: 0,\r\n\r\n        //  Ease Value Data:\r\n\r\n        start: 0,\r\n        current: 0,\r\n        end: 0,\r\n\r\n        //  Time Durations\r\n        t1: 0,\r\n        t2: 0,\r\n\r\n        //  LoadValue generation functions\r\n        gen: {\r\n            delay: delay,\r\n            duration: duration,\r\n            hold: hold,\r\n            repeat: repeat,\r\n            repeatDelay: repeatDelay\r\n        },\r\n\r\n        //  TWEEN_CONST.CREATED\r\n        state: 0\r\n    };\r\n};\r\n\r\nmodule.exports = TweenData;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","TweenData","target","key","getEnd","getStart","ease","delay","duration","yoyo","hold","repeat","repeatDelay","flipX","flipY","getEndValue","getStartValue","totalDuration","progress","elapsed","repeatCounter","start","current","end","t1","t2","gen","state"]
}
