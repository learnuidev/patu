{
"version":3,
"file":"module$node_modules$$formatjs$intl$src$number.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA4B1GC,QAASA,aAAY,CAACC,EAAD,CAAKC,eAAL,CAAsBC,OAAtB,CAA+B,CAAA,IAC5CC,OAASH,EAAAG,OADmC,CACxBC,QAAUJ,EAAAI,QAAYC,GAAAA,CAAUL,EAAAK,QACxC,KAAK,EAArB,GAAIH,OAAJ,GAA0BA,OAA1B,CAAoC,EAApC,CACA,KAAII,OAASJ,OAAAI,OACTC,QAAAA,CAAaD,MAAbC,EACAC,OAAAC,eAAA,CAAuBL,OAAvB,CAAgC,QAAhC,CAA0CE,MAA1C,CAAkDD,EAAlD,CADAE,EAEA,EACAG,QAAAA,CAAkBF,OAAAG,YAAA,CAAoBT,OAApB,CAA6BU,qBAA7B,CAAoDL,OAApD,CACtB,OAAON,gBAAA,CAAgBE,MAAhB,CAAwBO,OAAxB,CARyC,CA1BpDG,MAAAC,eAAA,CAAsBhB,OAAtB,CAA+B,YAA/B,CAA6C,CAAEiB,MAAO,CAAA,CAAT,CAA7C,CACAjB,QAAAkB,oBAAA;AAA8BlB,OAAAmB,aAA9B,CAAqDnB,OAAAC,aAArD,CAA4E,IAAK,EACjF,KAAIS,QAAUZ,OAAA,CAAQ,8CAAR,CAAd,CACIsB,QAAUtB,OAAA,CAAQ,8CAAR,CADd,CAEIgB,sBAAwB,gRAAA,MAAA,CAAA,GAAA,CAgC5Bd,QAAAC,aAAA;AAAuBA,YAWvBD,QAAAmB,aAAA,CAVAA,QAAqB,CAACE,MAAD,CAASlB,eAAT,CAA0Bc,KAA1B,CAAiCb,OAAjC,CAA0C,CAC3C,IAAK,EAArB,GAAIA,OAAJ,GAA0BA,OAA1B,CAAoC,EAApC,CACA,IAAI,CACA,MAAOH,aAAA,CAAaoB,MAAb,CAAqBlB,eAArB,CAAsCC,OAAtC,CAAAI,OAAA,CAAsDS,KAAtD,CADP,CAGJ,MAAOK,CAAP,CAAU,CACND,MAAAd,QAAA,CAAe,IAAIa,OAAAG,UAAJ,CAAsB,cAAtB,CAAyD,0BAAzD,CAAqFD,CAArF,CAAf,CADM,CAGV,MAAOE,OAAA,CAAOP,KAAP,CARoD,CAqB/DjB,QAAAkB,oBAAA,CAVAA,QAA4B,CAACG,MAAD,CAASlB,eAAT,CAA0Bc,KAA1B,CAAiCb,OAAjC,CAA0C,CAClD,IAAK,EAArB,GAAIA,OAAJ,GAA0BA,OAA1B,CAAoC,EAApC,CACA,IAAI,CACA,MAAOH,aAAA,CAAaoB,MAAb,CAAqBlB,eAArB,CAAsCC,OAAtC,CAAAqB,cAAA,CAA6DR,KAA7D,CADP,CAGJ,MAAOK,CAAP,CAAU,CACND,MAAAd,QAAA,CAAe,IAAIa,OAAAG,UAAJ,CAAsB,cAAtB;AAAyD,0BAAzD,CAAqFD,CAArF,CAAf,CADM,CAGV,MAAO,EAR2D,CAlDoC;",
"sources":["node_modules/@formatjs/intl/src/number.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$formatjs$intl$src$number\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatNumberToParts = exports.formatNumber = exports.getFormatter = void 0;\nvar utils_1 = require(\"./utils\");\nvar error_1 = require(\"./error\");\nvar NUMBER_FORMAT_OPTIONS = [\n    'localeMatcher',\n    'style',\n    'currency',\n    'currencyDisplay',\n    'unit',\n    'unitDisplay',\n    'useGrouping',\n    'minimumIntegerDigits',\n    'minimumFractionDigits',\n    'maximumFractionDigits',\n    'minimumSignificantDigits',\n    'maximumSignificantDigits',\n    // ES2020 NumberFormat\n    'compactDisplay',\n    'currencyDisplay',\n    'currencySign',\n    'notation',\n    'signDisplay',\n    'unit',\n    'unitDisplay',\n];\nfunction getFormatter(_a, getNumberFormat, options) {\n    var locale = _a.locale, formats = _a.formats, onError = _a.onError;\n    if (options === void 0) { options = {}; }\n    var format = options.format;\n    var defaults = ((format &&\n        utils_1.getNamedFormat(formats, 'number', format, onError)) ||\n        {});\n    var filteredOptions = utils_1.filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n    return getNumberFormat(locale, filteredOptions);\n}\nexports.getFormatter = getFormatter;\nfunction formatNumber(config, getNumberFormat, value, options) {\n    if (options === void 0) { options = {}; }\n    try {\n        return getFormatter(config, getNumberFormat, options).format(value);\n    }\n    catch (e) {\n        config.onError(new error_1.IntlError(\"FORMAT_ERROR\" /* FORMAT_ERROR */, 'Error formatting number.', e));\n    }\n    return String(value);\n}\nexports.formatNumber = formatNumber;\nfunction formatNumberToParts(config, getNumberFormat, value, options) {\n    if (options === void 0) { options = {}; }\n    try {\n        return getFormatter(config, getNumberFormat, options).formatToParts(value);\n    }\n    catch (e) {\n        config.onError(new error_1.IntlError(\"FORMAT_ERROR\" /* FORMAT_ERROR */, 'Error formatting number.', e));\n    }\n    return [];\n}\nexports.formatNumberToParts = formatNumberToParts;\n\n};"],
"names":["shadow$provide","global","require","module","exports","getFormatter","_a","getNumberFormat","options","locale","formats","onError","format","defaults","utils_1","getNamedFormat","filteredOptions","filterProps","NUMBER_FORMAT_OPTIONS","Object","defineProperty","value","formatNumberToParts","formatNumber","error_1","config","e","IntlError","String","formatToParts"]
}
