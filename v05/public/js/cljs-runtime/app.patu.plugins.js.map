{"version":3,"sources":["app/patu/plugins.cljs"],"mappings":";;;;;;;;;AAWA,AAAA,AAAMA,AAAWC,AAAKC;AAAtB,AACE,AAAMC,AAAM,AAAA,AAAQF;AAApB,AAAA,AACG,AAAG,AAAA,AAAIE,AAAO,AAAA,AAAID,AAClB,AAAG,AAAA,AAAIC,AAAO,AAAA,AAAID,AAClB,AAAG,AAAA,AAAIC,AAAO,AAAA,AAAID,AAClB,AAAG,AAAA,AAAIC,AAAO,AAAA,AAAID;;AAEvB,AAAA,AAAME,AAAUC;AAAhB,AACM,AAACC,AAASD,AACV,AAAA,AAAAE;AAAA,AAAQ,AAAAA;;;AAEd,AAAA,AAAAC,AAAMO,AAAYC;AAAlB,AAAA,AAAAP,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAI,AAAA,AAAAC,AAAAL,AAAA;AAAAI,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAH,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAAC,AAAAC,AAAAA;AAAA,AAAAC,AAAAD,AAAA,AAAkCI;AAAlC,AACE,AAAAC,AAAA,AAAAC,AAAaF;AAAbG,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQS;AAAR,AAAA,AACE,AAAA,AAAA,AAAA,AAACC,AACA,AAAA,AAACC,AAAOjB,AACR,AAAA,AAAOe,AACA,AAAA,AAAOA,AACT,AAAA,AAAKA;;AALb;AAAA,AAAAb;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAJ,AAAAD;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAI,AAAAX,AAAQa;AAAR,AAAA,AACE,AAAA,AAAA,AAAA,AAACC,AACA,AAAA,AAACC,AAAOjB,AACR,AAAA,AAAOe,AACA,AAAA,AAAOA,AACT,AAAA,AAAKA;;AALb;AAAA,AAAA,AAAAD,AAAAZ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAOF,AAAA,AAAAgB,AAAMG,AAAgBC,AAAItB;AAA1B,AAAA,AAAAmB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzB,AAAA,AAAAyB,AAAA,AAAA,AAAA,AAAA,AAAAxB,AAAAC,AAAAuB,AAAAA;AAAAC,AAAA,AAAAtB,AAAAqB,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1B,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAAzB,AAAAC,AAAAwB,AAAAA;AAAA,AAAAtB,AAAAsB,AAAA,AAA0ClC;AAA1C,AAAAY,AAAAqB,AAAA,AACkCI;AADlC,AAEE,AAACC,AAAQ,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAnB,AAAA,AAAAJ,AAAAuB;AAAA,AAAA,AAAAnB;AAAA,AAAA,AAAAmB,AAAAnB;AAAA,AAAA,AAAA,AAAAC,AAAAkB;AAAA,AAAAE,AAq6EwC,AAAAlB,AAAAgB;AAr6ExCG,AAAA,AAAAjB,AAAAgB;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAA,AAAAI,AAAAL,AAAAI,AAAM7C;AAAN,AAAA,AAAA,AAAA+C,AAAAJ,AACE,AAACU,AAAQlB,AAAI,AAACtC,AAAUG,AAAMD;;AADhC,AAAA,AAAA8C,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAA1B,AAAAe;;AAAA,AAAAS,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAjB,AAAAa,AAAMvC;AAAN,AAAA,AAAAmD,AAAA,AAAAD,AAAA,AAAAE,AAAAb,AACE,AAACc,AAAQlB,AAAI,AAACtC,AAAUG,AAAMD;;;AADhC;;;;AAAA,AAAA;;AAAA,AAAA,AAAAuC,AAAYF;;;AAGvB,AAAA,AAAAkB,AAAME,AAAgBrB;AAAtB,AAAA,AAAAoB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhD,AAAA,AAAAgD,AAAA,AAAA,AAAA,AAAA,AAAA/C,AAAAC,AAAA8C,AAAAA;AAAA,AAAA5C,AAAA4C,AAAA,AAAkC1C;AAAlC,AAAAF,AAAA4C,AAAA,AAAyCE;AAAzC,AAAA9C,AAAA4C,AAAA,AAA8CG;AAA9C,AAAA/C,AAAA4C,AAAA,AAAsDI;AAAtD,AACE,AAAMC,AAAU,AAAK,AAACC,AAAc1B,AAAKsB;AAAzC,AACM,AAACxD,AAAS2D,AACV,AAAO,AAAKE,AAKZ;AALO,AACE,AAAMA,AAAK,AAAA,AAAA,AAACC,AAAQD;AAApB,AACE,AAAA,AAAMjD,AAAe,AAACqB,AAAeC,AAAItB,AAAOiD;;AAChD,AAAClD,AAAWC,AAAOiD;;AACnB,AAACJ,AAAAA,AAAAA,AAAQ7C,AAAAA;AACZ;AAAA,AAAO,AAAAmD,AAAQ,AAAA,AAAwBP;AAAhC,AAAA,AAAAO,AAAAA,AAACL,AAAAA,AAAAA;;;AAExB,AAAA,AAAAM,AAAME,AAAehC;AAArB,AAAA,AAAA+B,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3D,AAAA,AAAA2D,AAAA,AAAA,AAAA,AAAA,AAAA1D,AAAAC,AAAAyD,AAAAA;AAAA,AAAAvD,AAAAuD,AAAA,AAAiCR;AAAjC,AAAA/C,AAAAuD,AAAA,AAAyCP;AAAzC,AAAAhD,AAAAuD,AAAA,AAAgDE;AAAhD,AAAAzD,AAAAuD,AAAA,AAAqDG;AAArD,AAAA1D,AAAAuD,AAAA,AAAyDT;AAAzD,AACM,AAACa,AAAgBnC,AAAIiC,AAAKC,AAC1B,AAAA,AAAAE;AAAA,AAAQ,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAACf,AAAerB,AACWsB,AACGC,AACDC;;;AAE3C,AAAA,AAAAa,AAAME,AAAgBvC;AAAtB,AAAA,AAAAsC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlE,AAAA,AAAAkE,AAAA,AAAA,AAAA,AAAA,AAAAjE,AAAAC,AAAAgE,AAAAA;AAAA,AAAA9D,AAAA8D,AAAA,AAAkCL;AAAlC,AAAAzD,AAAA8D,AAAA,AAAuCJ;AAAvC,AAAA1D,AAAA8D,AAAA,AAA2ChB;AAA3C,AACE,AAAMkB,AAAU,AAAAC,AAAA,AAAAC,AAAAC;AAAA,AAAc,AAAA,AAAA,AAAAD,AAAA,AAAAC,AAAA,AAAA,AAAA,AAACX,AAAchC,AAAkCiC,AAAUC,AAAUZ;;AAAnG,AACE,AAACsB,AAAe5C,AAAIwC;;AACpBA;;AAEJ,AAAA,AAAMK,AAA4B7C;AAAlC,AACE,AAAA,AAAA,AAAA,AAAA8C,AAAAC,AAAAC,AAAC9C;AAAD,AAAyB,AAAA,AAAA,AAAA4C,AAAA,AAAAC,AAAA,AAAAC,AAACT,AAAevC","names":["app.patu.plugins/calc-quad","file","size","frame","app.patu.plugins/js-fetch","url","js/fetch","p1__28752#","p__28761","map__28762","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","map__28763","cljs.core.get","app.patu.plugins/set-anims!","sprite","frameTags","seq__28770","cljs.core/seq","chunk__28771","count__28772","i__28773","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","anim","app.patu.utils/js-set!","app.patu.utils.js_get","p__28786","map__28787","map__28788","app.patu.plugins/create-frames!","ctx","frames","cljs.core/clj->js","iter__4529__auto__","s__28796","cljs.core/LazySeq","c__4527__auto__","size__4528__auto__","b__28798","cljs.core/chunk-buffer","i__28797","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28795","cljs.core/cons","cljs.core/rest","app.patu.core/quad!","p__28807","map__28808","app.patu.plugins/sprite-handler","json","resolve","reject","json-path","app.patu.lib.load_root","data","cljs.core.js__GT_clj","G__28810","p__28812","map__28813","app.patu.plugins/sprite-loader","name","img","app.patu.lib.load_sprite","p1__28811#","p__28817","map__28818","app.patu.plugins/load-aseprite!","loader-fn","js/Promise","p1__28815#","p2__28816#","app.patu.lib/add-loader","app.patu.plugins/aseprite-plugin","p1__28820#","p2__28821#","p3__28822#"],"sourcesContent":["(ns app.patu.plugins\n  (:require\n   [clojure.repl :refer [doc]]\n   [goog.object :as obj]\n   [app.patu.core :as p]\n   [app.patu.loaders :as l]\n   [app.patu.lib :as lib]\n   [app.patu.utils :refer [js-set! js-get]]\n   [app.patu.components :as c]))\n\n;;\n(defn calc-quad [file size]\n  (let [frame (:frame file)]\n    [(/ (:x frame) (:w size))\n     (/ (:y frame) (:h size))\n     (/ (:w frame) (:w size))\n     (/ (:h frame) (:h size))]))\n\n(defn js-fetch [url]\n  (-> (js/fetch url)\n      (.then #(.json %))))\n\n(defn set-anims! [sprite {{:keys [frameTags]} :meta}]\n  (doseq [anim frameTags]\n    (js-set!\n     (js-get sprite :anims)\n     (:name anim)\n     {:from (:from anim)\n      :to (:to anim)})))\n\n(defn create-frames! [ctx sprite {{:keys [size]} :meta\n                                  frames :frames}]\n  (clj->js (for [frame frames]\n             (p/quad! ctx (calc-quad frame size)))))\n\n(defn sprite-handler [ctx {:keys [sprite json resolve reject]}]\n  (let [json-path (str (lib/load-root ctx) json)]\n    (-> (js-fetch json-path)\n        (.then (fn [data]\n                 (let [data (js->clj data :keywordize-keys true)]\n                   (set! sprite -frames (create-frames! ctx sprite data))\n                   (set-anims! sprite data)\n                   (resolve sprite))))\n        (.catch (fn [] (reject (str \"Failed to load: \" json)))))))\n\n(defn sprite-loader [ctx {:keys [resolve reject name img json]}]\n  (-> (lib/load-sprite ctx name img)\n      (.then #(sprite-handler ctx {:sprite %\n                                   :json json\n                                   :resolve resolve\n                                   :reject reject}))))\n\n(defn load-aseprite! [ctx {:keys [name img json]}]\n  (let [loader-fn (js/Promise. #(sprite-loader ctx {:resolve %1 :reject %2 :name name :img img :json json}))]\n    (lib/add-loader ctx loader-fn)\n    loader-fn))\n\n(defn aseprite-plugin [^js/object ctx]\n  (clj->js {:loadAseprite #(load-aseprite! ctx {:name %1 :img %2 :json %3})}))\n\n;;\n"]}