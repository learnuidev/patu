{"version":3,"sources":["re_frame/std_interceptors.cljc"],"mappings":";;;;;;;;;;AAcA,AAAKA,AACH,AAAA,AAAA,AAAA,AAACC,AAES,AACGC;AADH,AAEE,AAAA,AAAA,AAACC,AAAwC,AAAA,AAACC,AAAaF;;AACvDA;AALZ,AAMU,AACGA;AADH,AAEE,AAAMG,AAAQ,AAAA,AAACD,AAAaF;AACtBI,AAAQ,AAAA,AAACF,AAAaF;AACtBK,AAAQ,AAAA,AAAA,AAACC,AAAaN;AAF5B,AAGE,AAAI,AAAA,AAACO,AAAEF;AACL,AAAA,AAAA,AAACJ,AAAqCE;;AACtC,AAAAK,AAA+B,AAACI,AAAUR,AAAQC;AAAlD,AAAAI,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAAmBG;AACbE,AAAe,AAAI,AAAA,AAAA,AAAOH,AAAa,AAAA,AAAA,AAAOC;AADpD,AAEE,AAAIE;AACF,AAAI,AAAA,AAAA,AAACZ,AAA2CE;;AAC5C,AAAA,AAAA,AAACF,AAA4BS;;AAC7B,AAAA,AAAA,AAACT,AAA4BU;;AAC7B,AAAA,AAACG;;AACL,AAAA,AAAA,AAACb,AAAgDE;;;;AACvDH;;AAGhB,AAAKe,AACH,AAAA,AAAA,AAAA,AAAChB,AAEU,AACGC;AADH,AAEMA,AACA,AAAA,AAAA,AAACgB,AAAuBC,AACxB,AAAA,AAACC,AAAiC,AAAA,AAAChB,AAAaF;AANjE,AAOW,AACGA;AADH,AAEMA,AACA,AAAA,AAAA,AAAA,AAACmB,AACD,AAAA,AAACD,AAAsB,AAAA,AAAChB,AAAaF;;AAQxD;;;;;;;;;;;;;AAAA,AAAMoB,AAYHC;AAZH,AAaE,AAAA,AAAA,AAAA,AAACtB,AAES,AACGC;AADH,AAEE,AAAMsB,AACA,AAAA,AAAAC,AAAA,AAAAC,AAAAC;AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAEc,AAAA,AAACzB,AAAaF;AAF5B,AAAA,AAAAyB,AAAAC;;AAAA,AAAA,AAAA,AAAA,AAGE,AAAAU,AAAyB,AAAClC,AAAaF;AAAvCoC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcM;AAAd,AAAAF,AAAAJ,AAAA,AAAiBjC;AAAjB,AACO,AAACkB,AAAAA,AAAAA,AAAWqB,AAAAA,AAAGvC,AAAAA,AACf,AAAA,AAACwC,AAAa3C;AALvB,AAAA,AAAA,AAAAuB;AAAA,AAAA,AAAAK,AAAA,AAAAC;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAAH;AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAA,AAAAC,AAAAT,AAAA,AAAAK,AAAA,AAAA,AAAAD;;AAAA,AAAAM,AAAAP;;AAAA;AAAA,AAAA,AAAAH,AAAAD;AAAA,AAGE,AAAAiB,AAAyB,AAACvC,AAAaF;AAAvCyC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAJ,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAAC,AAAAE,AAAAA;AAAA,AAAAD,AAAAC,AAAA,AAAcC;AAAd,AAAAF,AAAAC,AAAA,AAAiBtC;AAAjB,AACO,AAACkB,AAAAA,AAAAA,AAAWqB,AAAAA,AAAGvC,AAAAA,AACf,AAAA,AAACwC,AAAa3C;;AAN7B,AASE,AAAA,AAAAuB;AAAA,AAAA,AAAAqB,AAAA,AAAAC,AAAA,AAAAC,AAAArB,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACqB,AAAA,AAAC1C,AAAAA,AAAWgB,AAAAA,AACZ,AAAA,AAACpB,AAAAA,AAAaF,AAAAA;AAFnC,AAAA,AAAAyB,AAAAmB;;AAAA;AAAA;;AAGAtB;;;AAGhB;;;;;;;;;;;;;;AAAA,AAAM2B,AAaH5B;AAbH,AAcA,AAAA,AAAA,AAAA,AAACtB,AAES,AACGC;AADH,AAEE,AAAMsB,AACA,AAAA,AAAAC,AAAA,AAAA2B,AAAAzB;AAAA0B,AAAA,AAAAxB,AAAA,AAAA,AAAA,AAAA,AAEc,AAAA,AAACzB,AAAaF;AAF5B,AAAA,AAAAyB,AAAA0B;;AAAA,AAAA,AAAA,AAAA,AAGE,AAAAC,AAAoC,AAAClD,AAAaF;AAAlDoD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAf,AAAA,AAAAe,AAAA,AAAA,AAAA,AAAA,AAAAd,AAAAC,AAAAa,AAAAA;AAAAA,AAAyBE;AAAzB,AAAAd,AAAAY,AAAA,AAAcjD;AAAd,AACO,AAACkB,AAAAA,AAAAA,AAAWiC,AAAAA,AAAUnD,AAAAA,AACtB,AAAA,AAAC+B,AAAMlC;AALhB,AAAA,AAAA,AAAAuB;AAAA,AAAA,AAAAK,AAAA,AAAAC;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAAH;AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAA,AAAAC,AAAAT,AAAA,AAAAK,AAAA,AAAA,AAAAD;;AAAA,AAAAM,AAAAP;;AAAA;AAAA,AAAA,AAAAH,AAAAyB;AAAA,AAGE,AAAAG,AAAoC,AAACnD,AAAaF;AAAlDqD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhB,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAAf,AAAAC,AAAAc,AAAAA;AAAAA,AAAyBC;AAAzB,AAAAd,AAAAa,AAAA,AAAclD;AAAd,AACO,AAACkB,AAAAA,AAAAA,AAAWiC,AAAAA,AAAUnD,AAAAA,AACtB,AAAA,AAAC+B,AAAMlC;;AANtB,AAOE,AAAA,AAAAuB;AAAA,AAAA,AAAAqB,AAAA,AAAAC,AAAA,AAAAC,AAAArB,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACqB,AAAA,AAAC1C,AAAAA,AAAWgB,AAAAA,AACZ,AAAA,AAACpB,AAAAA,AAAaF,AAAAA;AAFnC,AAAA,AAAAyB,AAAAmB;;AAAA;AAAA;;AAGAtB;;;AAGd;;;;;;;;AAAA,AAAMiC,AAOHlC;AAPH,AAQE,AAAA,AAAA,AAAA,AAACtB,AAES,AACGC;AADH,AAEE,AAAMsB,AACA,AAAA,AAAAC,AAAA,AAAAiC,AAAA/B;AAAAgC,AAAA,AAAA9B,AAAA,AAAA,AAAA,AAAA,AAEc,AAAA,AAACzB,AAAaF;AAF5B,AAAA,AAAAyB,AAAAgC;;AAAA,AAAA,AAAA,AAAA,AAGE,AAACpC,AAAAA,AAAAA,AAAWrB,AAAAA;AAHd,AAAA,AAAA,AAAAuB;AAAA,AAAA,AAAAK,AAAA,AAAAC;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAAH;AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAA,AAAAC,AAAAT,AAAA,AAAAK,AAAA,AAAA,AAAAD;;AAAA,AAAAM,AAAAP;;AAAA;AAAA,AAAA,AAAAH,AAAA+B;AAAA,AAGE,AAACnC,AAAAA,AAAAA,AAAWrB,AAAAA;AAJpB,AAKE,AAAA,AAAAuB;AAAA,AAAA,AAAAqB,AAAA,AAAAC,AAAA,AAAAC,AAAArB,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACqB,AAAA,AAAC1C,AAAAA,AAAWgB,AAAAA,AACZ,AAAA,AAACpB,AAAAA,AAAaF,AAAAA;AAFnC,AAAA,AAAAyB,AAAAmB;;AAAA;AAAA;;AAGAtB;;;AAMhB,AAAA,AAAA,AAAAoC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACDI;AADL,AAEE,AAAMC,AAAK,AAACC,AAAQF;AAApB,AACMG;AADN,AAEE,AAAM,AAACC,AAAOH;AAAd,AACE,AAAA,AAAA,AAACpE;;AADH;;AAEA,AAAA,AAAA,AAAA,AAACF,AAEU,AACGC;AADH,AAEE,AAAMyE,AAAY,AAAA,AAACvE,AAAaF;AAAhC,AACMA,AACA,AAAC8C,AAAOyB,AAAatC,AAAKwC,AAC1B,AAAA,AAACvD,AAAmB,AAACwD,AAAOD,AAAYJ;AAP3D,AAQW,AAAKrE;AAAL,AACE,AAAM2E,AAAa,AAACJ,AAAavE;AAC3ByE,AAAa,AAACG,AAAKD;AACnBE,AAAa,AAACC,AAAIH;AAClBI,AAAiB,AAAC7C,AAAMlC,AAAQuE,AAAaM,AAC5B,AAAA,AAAC3D,AAAmBuD;AACrC/B,AAAa,AAAA,AAAA,AAACpC,AAAWN;AAL/B,AAME,AAAI,AAAA,AAACO,AAAEmC;AACLqC;;AACK,AAACC,AAASP,AAAYJ,AAAK3B,AAC3B,AAAA,AAACC,AAAaoC;;;;;AAxBxC,AAAA,AAAA,AAAMf;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AA6BA,AAAA,AAAMgB,AACHC;AADH,AAEE,AAAA,AAAA,AAAA,AAACnF,AAEQ,AACGC;AADH,AAEE,AAAMG,AAAM,AAAA,AAACD,AAAaF;AACpB0C,AAAM,AAAI,AAAA,AAACyC,AAAU,AAAC7E,AAAWN,AACzB,AAAA,AAACM,AAAWN,AACZ,AAAA,AAACE,AAAaF;AAH5B,AAIO,AAACkF,AAAAA,AAAAA,AAAExC,AAAAA,AAAGvC,AAAAA,AACN,AAAA,AAACwC,AAAa3C;;;AAIlC,AAAA,AAAMoF,AACHF;AADH,AAEE,AAAA,AAAA,AAAA,AAACnF,AAEQ,AACGC;AADH,AAEE,AAAM0C,AAAM,AAAI,AAAA,AAACyC,AAAU,AAAC7E,AAAWN,AACzB,AAAA,AAACM,AAAWN,AACZ,AAAA,AAACE,AAAaF;AACtBG,AAAM,AAAA,AAACD,AAAaF;AAH1B,AAIE,AAACkF,AAAAA,AAAAA,AAAExC,AAAAA,AAAGvC,AAAAA;;AACNH;;;AAEf,AAAA,AAAA,AAAA0D,AAAO2B;AAAP,AAAA,AAAA1B,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAvB;;;AAAA,AAAA,AAAA,AAAA,AAAOuB,AACJH,AAAEU,AAAWC;AADhB,AAEE,AAAA,AAAA,AAAA,AAAC9F,AAEQ,AACGC;AADH,AAEE,AAAMK,AAAS,AAAA,AAACC,AAAWN;AACrB8F,AAAS,AAAA,AAAC5F,AAAaF;AAGvB+F,AAAa,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAAD,AAACtB,AAAOrE;AAAUwF;AACrCK,AAAa,AAAA,AAAAC,AAACF;AAAD,AAAM,AAAAE,AAACzB,AAAOoB;AAAUD;AAErCO,AAAa,AAAA,AAAK,AAAA,AAACjB,AAAU,AAAC7E,AAAWN,AACvB,AAACqG,AAAKC,AAAO,AAACL,AAAIM,AAAWR,AAAQG;AAR7D,AAWE,AAAIE;AACG,AAAC9D,AAAM4C,AAAEa,AACT,AAACf,AAAS3E,AAAOuF,AACjB,AAAA,AAACjD,AAAa3C;;AACnBA;;;;;AArBjB,AAAA,AAAA,AAAOqF;;AAAP;AAAA,AAAA,AAAA,AAAAC,AAAOD;AAAP,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AAwBA;;;;;AAAKkB,AAIH,AAAA,AAAA,AAAA,AAACzG,AAES,AACGC;AADH,AAEE,AAAA,AAAA,AAAAyG,AAAC3D,AAAO9C;AAAR,AAAwB,AAAAyG,AAACC,AAAK,AAACC","names":["re-frame.std-interceptors/debug","re_frame.interceptor.__GT_interceptor","context","re_frame.loggers.console","re_frame.interceptor.get_coeffect","event","orig-db","new-db","re_frame.interceptor.get_effect","cljs.core._EQ_","vec__28270","cljs.core.nth","only-before","only-after","clojure.data/diff","db-changed?","re-frame.loggers/console","re-frame.std-interceptors/trim-v","re_frame.interceptor.update_coeffect","cljs.core/subvec","re-frame.interceptor/assoc-coeffect","re-frame.utils/dissoc-in","re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__28280","re-frame.trace/*current-trace*","*current-trace*-temp-val__28281","re-frame.trace/start-trace","end__28106__auto__","re-frame.interop/now","duration__28107__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","map__28283","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__28287","db","re-frame.interceptor/assoc-effect","new-trace__28108__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.std-interceptors/fx-handler->interceptor","*current-trace*-orig-val__28292","*current-trace*-temp-val__28293","map__28295","map__28298","coeffects","re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__28303","*current-trace*-temp-val__28304","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-frame.std-interceptors/path","seq28308","self__4724__auto__","cljs.core/seq","args","path","cljs.core/flatten","db-store-key","cljs.core/empty?","original-db","cljs.core.get_in","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core/assoc-in","re-frame.std-interceptors/enrich","f","cljs.core/contains?","re-frame.std-interceptors/after","re-frame.std-interceptors/on-changes","seq28325","G__28326","cljs.core/first","cljs.core/next","G__28327","self__4723__auto__","out-path","in-paths","old-db","new-ins","p1__28323#","cljs.core.map","old-ins","p1__28324#","changed-ins?","cljs.core/some","cljs.core/false?","cljs.core/identical?","re-frame.std-interceptors/inject-global-interceptors","p1__28335#","cljs.core.into","re-frame.settings/get-global-interceptors"],"sourcesContent":["(ns re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n    [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect update-coeffect]]\n    [re-frame.loggers :refer [console]]\n    [re-frame.settings :as settings]\n    [re-frame.db :refer [app-db]]\n    [clojure.data :as data]\n    [re-frame.cofx :as cofx]\n    [re-frame.utils :as utils]\n    [re-frame.trace :as trace :include-macros true]\n    [re-frame.interceptor :as interceptor]))\n\n\n(def debug\n  (->interceptor\n    :id     :debug\n    :before (fn debug-before\n              [context]\n              (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n              context)\n    :after  (fn debug-after\n              [context]\n              (let [event   (get-coeffect context :event)\n                    orig-db (get-coeffect context :db)\n                    new-db  (get-effect   context :db ::not-found)]\n                (if (= new-db ::not-found)\n                  (console :log \"No app-db changes in:\" event)\n                  (let [[only-before only-after] (data/diff orig-db new-db)\n                        db-changed?    (or (some? only-before) (some? only-after))]\n                    (if db-changed?\n                      (do (console :group \"db clojure.data/diff for:\" event)\n                          (console :log \"only before:\" only-before)\n                          (console :log \"only after :\" only-after)\n                          (console :groupEnd))\n                      (console :log \"No app-db changes resulted from:\" event))))\n                context))))\n\n\n(def trim-v\n  (->interceptor\n    :id      :trim-v\n    :before  (fn trimv-before\n               [context]\n               (-> context\n                   (update-coeffect :event subvec 1)\n                   (assoc-coeffect ::untrimmed-event (get-coeffect context :event))))\n    :after   (fn trimv-after\n               [context]\n               (-> context\n                   (utils/dissoc-in [:coeffects ::untrimmed-event])\n                   (assoc-coeffect :event (get-coeffect context ::untrimmed-event))))))\n\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n    :id     :db-handler\n    :before (fn db-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :event)}\n                      (let [{:keys [db event]} (get-coeffect context)]\n                        (->> (handler-fn db event)\n                             (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n(->interceptor\n  :id     :fx-handler\n  :before (fn fx-handler-before\n            [context]\n            (let [new-context\n                  (trace/with-trace\n                    {:op-type   :event/handler\n                     :operation (get-coeffect context :event)}\n                    (let [{:keys [event] :as coeffects} (get-coeffect context)]\n                      (->> (handler-fn coeffects event)\n                           (assoc context :effects))))]\n              (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n              new-context))))\n\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n    :id     :ctx-handler\n    :before (fn ctx-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :event)}\n                      (handler-fn context))]\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n\n(defn path\n  [& args]\n  (let [path (flatten args)\n        db-store-key :re-frame-path/db-store]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n      :id      :path\n      :before  (fn\n                 [context]\n                 (let [original-db (get-coeffect context :db)]\n                   (-> context\n                       (update db-store-key conj original-db)\n                       (assoc-coeffect :db (get-in original-db path)))))\n      :after   (fn [context]\n                 (let [db-store     (db-store-key context)\n                       original-db  (peek db-store)\n                       new-db-store (pop db-store)\n                       context'     (-> (assoc context db-store-key new-db-store)\n                                        (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                       db           (get-effect context :db ::not-found)]\n                   (if (= db ::not-found)\n                     context'\n                     (->> (assoc-in original-db path db)\n                          (assoc-effect context' :db))))))))\n\n\n\n\n(defn enrich\n  [f]\n  (->interceptor\n    :id :enrich\n    :after (fn enrich-after\n             [context]\n             (let [event (get-coeffect context :event)\n                   db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                           (get-coeffect context :db))]\n               (->> (f db event)\n                    (assoc-effect context :db))))))\n\n\n\n(defn after\n  [f]\n  (->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db)\n                           (get-coeffect context :db))\n                   event (get-coeffect context :event)]\n               (f db event) ;; call f for side effects\n               context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n    :id    :on-changes\n    :after (fn on-change-after\n             [context]\n             (let [new-db   (get-effect context :db)\n                   old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                   new-ins      (map #(get-in new-db %) in-paths)\n                   old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                   changed-ins? (and (contains? (get-effect context) :db)\n                                     (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n               (if changed-ins?\n                 (->> (apply f new-ins)\n                      (assoc-in new-db out-path)\n                      (assoc-effect context :db))\n                 context)))))\n\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n    :id     :inject-global-interceptors\n    :before (fn inject-global-interceptors-before\n              [context]\n              (update context :queue #(into (settings/get-global-interceptors) %)))))\n"]}