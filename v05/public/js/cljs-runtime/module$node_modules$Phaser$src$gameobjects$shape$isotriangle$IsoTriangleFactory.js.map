{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$isotriangle$IsoTriangleFactory.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,gFAAA,CAAoG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOxIC,MAAAA,CAAoBH,OAAA,CAAQ,8DAAR,CACxB,KAAII,YAAcJ,OAAA,CAAQ,0EAAR,CAoClBG,OAAAE,SAAA,CAA2B,aAA3B,CAA0C,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,IAAP,CAAaC,MAAb,CAAqBC,QAArB,CAA+BC,OAA/B,CAAwCC,QAAxC,CAAkDC,SAAlD,CACnD,CACI,MAAO,KAAAC,YAAAC,IAAA,CAAqB,IAAIX,WAAJ,CAAgB,IAAAY,MAAhB,CAA4BV,CAA5B,CAA+BC,CAA/B,CAAkCC,IAAlC,CAAwCC,MAAxC,CAAgDC,QAAhD,CAA0DC,OAA1D,CAAmEC,QAAnE;AAA6EC,SAA7E,CAArB,CADX,CADA,CA5C4I;",
"sources":["node_modules/Phaser/src/gameobjects/shape/isotriangle/IsoTriangleFactory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$isotriangle$IsoTriangleFactory\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GameObjectFactory = require('../../GameObjectFactory');\r\nvar IsoTriangle = require('./IsoTriangle');\r\n\r\n/**\r\n * Creates a new IsoTriangle Shape Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the IsoTriangle Game Object has been built into Phaser.\r\n * \r\n * The IsoTriangle Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only fill colors and cannot be stroked.\r\n * \r\n * An IsoTriangle is an 'isometric' triangle. Think of it like a pyramid. Each face has a different\r\n * fill color. You can set the color of the top, left and right faces of the triangle respectively\r\n * You can also choose which of the faces are rendered via the `showTop`, `showLeft` and `showRight` properties.\r\n * \r\n * You cannot view an IsoTriangle from under-neath, however you can change the 'angle' by setting\r\n * the `projection` property. The `reversed` property controls if the IsoTriangle is rendered upside\r\n * down or not.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#isotriangle\r\n * @since 3.13.0\r\n *\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [size=48] - The width of the iso triangle in pixels. The left and right faces will be exactly half this value.\r\n * @param {number} [height=32] - The height of the iso triangle. The left and right faces will be this tall. The overall height of the iso triangle will be this value plus half the `size` value.\r\n * @param {boolean} [reversed=false] - Is the iso triangle upside down?\r\n * @param {number} [fillTop=0xeeeeee] - The fill color of the top face of the iso triangle.\r\n * @param {number} [fillLeft=0x999999] - The fill color of the left face of the iso triangle.\r\n * @param {number} [fillRight=0xcccccc] - The fill color of the right face of the iso triangle.\r\n *\r\n * @return {Phaser.GameObjects.IsoTriangle} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('isotriangle', function (x, y, size, height, reversed, fillTop, fillLeft, fillRight)\r\n{\r\n    return this.displayList.add(new IsoTriangle(this.scene, x, y, size, height, reversed, fillTop, fillLeft, fillRight));\r\n});\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GameObjectFactory","IsoTriangle","register","x","y","size","height","reversed","fillTop","fillLeft","fillRight","displayList","add","scene"]
}
