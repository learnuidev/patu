{"version":3,"sources":["app/kaboom/mario/lib.cljs"],"mappings":"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","names":["app.kaboom.mario.lib/game-state","cljs.core.atom","app.kaboom.mario.lib/kaboom","config","js/kaboom","cljs.core/clj->js","js/console.log","p__69376","map__69377","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.kaboom.mario.lib/init-game!","canvas","game","cljs.core.swap_BANG_","cljs.core/assoc","app.kaboom.mario.lib/load-root","url","app.kaboom.mario.lib/load-root!","cljs.core/deref","app.kaboom.mario.lib/load-sprite","title","cljs.core/name","app.kaboom.mario.lib/load-sprite!","app.kaboom.mario.lib/sprite","app.kaboom.mario.lib/solid","app.kaboom.mario.lib/scale","value","app.kaboom.mario.lib/layers","layers","main-layer","app.kaboom.mario.lib/add-level","map","app.kaboom.mario.lib/add-level!","m","level-id","map__69379","levels","temp__5733__auto__","handler","app.kaboom.mario.lib/key-down","id","app.kaboom.mario.lib/key-press","app.kaboom.mario.lib/key-down!","app.kaboom.mario.lib/key-press!","app.kaboom.mario.lib/add","comps","app.kaboom.mario.lib/scene","app.kaboom.mario.lib/add-scene!","app.kaboom.mario.lib/start","scene-id","app.kaboom.mario.lib/start!","app.kaboom.mario.lib/cam-pos","pos","app.kaboom.mario.lib/cam-pos!","app.kaboom.mario.lib/gravity","app.kaboom.mario.lib/gravity!","app.kaboom.mario.lib/cam-ignore","val","app.kaboom.mario.lib/cam-ignore!","app.kaboom.mario.lib/get-component","state","cljs.core.get_in","app.kaboom.mario.lib/get-component!","js/app","js/app.kaboom","js/app.kaboom.mario","js/app.kaboom.mario.lib","js/app.kaboom.mario.lib.create-component","method-table__4619__auto__","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__69381","cljs.core/MultiFn","cljs.core.symbol","app.kaboom.mario.lib/create-component","_","type","props","p__69382","vec__69383","cljs.core.nth","p__69386","vec__69387","x","y","p__69390","vec__69391","p__69394","vec__69395","p__69398","vec__69399","p__69402","vec__69403","p__69406","vec__69407","cljs.core/Keyword","app.kaboom.mario.lib/create-components","iter__4529__auto__","s__69411","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__69413","cljs.core/chunk-buffer","i__69412","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__69410","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","prop","app.kaboom.mario.lib/add-component","app.kaboom.mario.lib/reg-component","comp","cljs.core/assoc-in","app.kaboom.mario.lib/set-layers","coll","p__69414","map__69415","app.kaboom.mario.lib/format-for-level","width","height","components","input","cljs.core.merge","cljs.core.reduce","p__69417","vec__69418","seq__69419","first__69420","cljs.core/next","primes","cljs.core.assoc","app.kaboom.mario.lib/reg-level","app.kaboom.mario.lib/reg-level!","data-handler","cljs.core/chunk-first"],"sourcesContent":["(ns app.kaboom.mario.lib)\n\n;;\n(def game-state (atom {:scenes {}\n                       :components {}}))\n\n(comment\n  (deref game-state))\n(defn kaboom [config]\n  (js/kaboom (clj->js config)))\n(js/console.log kaboom)\n\n;;\n(defn init-game! [{:keys [canvas]}]\n  (let [game (kaboom {:global true\n                      :fullscreen false\n                      :scale 1\n                      :canvas canvas\n                      :debug true\n                      :clearColor [0,0,0, 0.9]})] ;; rgb+opacity\n    (swap! game-state assoc :game game)))\n\n;; Load Sprites\n(defn load-root [game url]\n  (.loadRoot game url))\n\n(defn load-root! [url]\n  (let [game (:game @game-state)]\n    (load-root game url)))\n\n(defn load-sprite [game title url]\n  (.loadSprite game (name title) url))\n(defn load-sprite! [title url]\n  (let [game (:game @game-state)]\n    (load-sprite game title url)))\n\n(defn sprite [game title]\n  (.sprite game (name title)))\n\n(defn solid [game]\n  (.solid game))\n(defn scale [game value]\n  (.scale game value))\n\n(defn layers [game layers main-layer]\n  (.layers game (clj->js layers) (name main-layer)))\n\n(defn add-level [game map config]\n  (.addLevel game (clj->js map) (clj->js config)))\n\n;;\n(defn add-level! [m level-id]\n  (let [{:keys [game levels]} @game-state]\n    (if-let [handler (get levels level-id)]\n      (add-level game m (handler game)))))\n\n(defn key-down [game id handler]\n  (.keyDown game (name id) handler))\n(defn key-press [game id handler]\n  (.keyPress game (name id) handler))\n\n(defn key-down! [id handler]\n  (key-down (:game @game-state) id handler))\n(defn key-press! [id handler]\n  (key-press (:game @game-state) (name id) handler))\n\n(defn add [game comps]\n  (.add game (clj->js comps)))\n\n(defn scene [game id handler]\n  (.scene game (name id) handler))\n\n(defn add-scene! [id handler]\n  (scene (:game @game-state) id handler))\n(defn start [game scene-id]\n  (.start game (name scene-id)))\n\n(defn start! [id]\n  (start (:game @game-state) id))\n;;\n\n(defn cam-pos [game pos]\n  (.camPos game pos))\n\n(defn cam-pos! [pos]\n  (cam-pos (:game @game-state) pos))\n;;\n\n(defn gravity [game value]\n  (.gravity game value))\n\n(defn gravity! [value]\n  (gravity (:game @game-state) value))\n;;\n\n(defn cam-ignore [game val]\n  (.camIgnore game (clj->js val)))\n\n(defn cam-ignore! [value]\n  (cam-ignore (:game @game-state) value))\n;;\n(defn get-component [state id]\n  (get-in state [:components id :comp]))\n(comment\n  (get-component @game-state :player))\n\n(defn get-component! [id]\n  (get-component @game-state id))\n\n(defmulti create-component (fn [_ type props] type))\n\n(defmethod create-component :sprite [game _ [_ id]]\n  (sprite game id))\n\n(defmethod create-component :solid [game _ _]\n  (solid game))\n\n(defmethod create-component :pos [game _ [_ x y]]\n  (.pos game x y))\n\n(defmethod create-component :body [game _ _]\n  (.body game))\n\n(defmethod create-component :origin [game _ [_ id]]\n  (.origin game (name id)))\n\n(defmethod create-component :text [game _ [_ value]]\n  (.text game value))\n\n(defmethod create-component :layer [game _ [_ value]]\n  (.layer game (name value)))\n\n(defmethod create-component :scale [game _ [_ value]]\n  (.scale game value))\n\n(defmethod create-component :prop [_ _ [_ props]]\n  (if (keyword? props)\n    props\n    (clj->js props)))\n\n; (defmethod create-component :tag [game _ val]\n;   val)\n\n\n(comment\n  (create-component game :sprite [:sprite :mario]))\n;\n;; [[:sprite :mario] [:solid] [:pos 30 0] [:body] [:origin \"bot\"]]\n(defn create-components [game props]\n  (clj->js (for [prop props]\n             (create-component game (nth prop 0) prop))))\n\n(comment\n  (map inc [1,2,3]))\n\n(comment\n  (for [item [1,2,3]]\n    (inc item)))\n\n(defn add-component [game props]\n  (add game (create-components game props)))\n\n;;\n\n; ;;\n; (def ex [[:= [[:sprite :block]\n;               [:solid]]]\n;          [:$ [[:sprite :coin]]]\n;          [:% [[:sprite :surprise]]]\n;          [:* [[:sprite :surprise]]]\n;          [\"}\" [[:sprite :surprise]]]\n;          [:- [[:sprite :surprise]]]\n;          [\"(\" [[:sprite :surprise]]]\n;          [:+ [[:sprite :surprise]]]\n;          [\")\" [[:sprite :surprise]]]\n;          [\"^\" [[:sprite :surprise]]]\n;          [:# [[:sprite :surprise]]]])\n\n(defn reg-component [id props]\n  (let [comp  (add-component (:game @game-state) props)]\n    (swap! game-state assoc-in [:components id] {:comp comp :props props})\n    comp))\n\n;;\n(defn set-layers [coll main-layer]\n  (layers (:game @game-state) coll main-layer))\n\n(defn format-for-level [game {:keys [map width height components]}]\n  (let [input {:map map :width width :height height}]\n    (-> input\n        (merge (reduce\n                (fn [primes [id & props]] (assoc primes id (create-components (:game @game-state) props)))\n                {}\n                components)))))\n\n(defn reg-level [id handler]\n  (swap! game-state assoc-in [:levels id] handler))\n\n;;\n(defn reg-level! [id data-handler]\n  (reg-level id\n             (fn [game]\n               (format-for-level game (data-handler)))))\n"]}