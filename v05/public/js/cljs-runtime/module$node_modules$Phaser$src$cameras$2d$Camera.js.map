{
"version":3,
"file":"module$node_modules$Phaser$src$cameras$2d$Camera.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/Phaser/src/cameras/2d/Camera.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$cameras$2d$Camera\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar BaseCamera = require('./BaseCamera');\r\nvar CanvasPool = require('../../display/canvas/CanvasPool');\r\nvar CenterOn = require('../../geom/rectangle/CenterOn');\r\nvar Clamp = require('../../math/Clamp');\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar Effects = require('./effects');\r\nvar Linear = require('../../math/Linear');\r\nvar Rectangle = require('../../geom/rectangle/Rectangle');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Camera.\r\n *\r\n * The Camera is the way in which all games are rendered in Phaser. They provide a view into your game world,\r\n * and can be positioned, rotated, zoomed and scrolled accordingly.\r\n *\r\n * A Camera consists of two elements: The viewport and the scroll values.\r\n *\r\n * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\r\n * created the same size as your game, but their position and size can be set to anything. This means if you\r\n * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\r\n * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\r\n *\r\n * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\r\n * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\r\n * viewport, and changing the viewport has no impact on the scrolling.\r\n *\r\n * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\r\n * allowing you to filter Game Objects out on a per-Camera basis.\r\n *\r\n * A Camera also has built-in special effects including Fade, Flash and Camera Shake.\r\n *\r\n * @class Camera\r\n * @memberOf Phaser.Cameras.Scene2D\r\n * @constructor\r\n * @since 3.0.0\r\n * \r\n * @extends Phaser.Cameras.Scene2D.BaseCamera\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.Tint\r\n *\r\n * @param {number} x - The x position of the Camera, relative to the top-left of the game canvas.\r\n * @param {number} y - The y position of the Camera, relative to the top-left of the game canvas.\r\n * @param {number} width - The width of the Camera, in pixels.\r\n * @param {number} height - The height of the Camera, in pixels.\r\n */\r\nvar Camera = new Class({\r\n\r\n    Extends: BaseCamera,\r\n\r\n    Mixins: [\r\n        Components.Flip,\r\n        Components.Tint\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Camera (x, y, width, height)\r\n    {\r\n        BaseCamera.call(this, x, y, width, height);\r\n\r\n        /**\r\n         * Does this Camera allow the Game Objects it renders to receive input events?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#inputEnabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.inputEnabled = true;\r\n\r\n        /**\r\n         * The Camera Fade effect handler.\r\n         * To fade this camera see the `Camera.fade` methods.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#fadeEffect\r\n         * @type {Phaser.Cameras.Scene2D.Effects.Fade}\r\n         * @since 3.5.0\r\n         */\r\n        this.fadeEffect = new Effects.Fade(this);\r\n\r\n        /**\r\n         * The Camera Flash effect handler.\r\n         * To flash this camera see the `Camera.flash` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#flashEffect\r\n         * @type {Phaser.Cameras.Scene2D.Effects.Flash}\r\n         * @since 3.5.0\r\n         */\r\n        this.flashEffect = new Effects.Flash(this);\r\n\r\n        /**\r\n         * The Camera Shake effect handler.\r\n         * To shake this camera see the `Camera.shake` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#shakeEffect\r\n         * @type {Phaser.Cameras.Scene2D.Effects.Shake}\r\n         * @since 3.5.0\r\n         */\r\n        this.shakeEffect = new Effects.Shake(this);\r\n\r\n        /**\r\n         * The Camera Pan effect handler.\r\n         * To pan this camera see the `Camera.pan` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#panEffect\r\n         * @type {Phaser.Cameras.Scene2D.Effects.Pan}\r\n         * @since 3.11.0\r\n         */\r\n        this.panEffect = new Effects.Pan(this);\r\n\r\n        /**\r\n         * The Camera Zoom effect handler.\r\n         * To zoom this camera see the `Camera.zoom` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#zoomEffect\r\n         * @type {Phaser.Cameras.Scene2D.Effects.Zoom}\r\n         * @since 3.11.0\r\n         */\r\n        this.zoomEffect = new Effects.Zoom(this);\r\n\r\n        /**\r\n         * The linear interpolation value to use when following a target.\r\n         *\r\n         * Can also be set via `setLerp` or as part of the `startFollow` call.\r\n         *\r\n         * The default values of 1 means the camera will instantly snap to the target coordinates.\r\n         * A lower value, such as 0.1 means the camera will more slowly track the target, giving\r\n         * a smooth transition. You can set the horizontal and vertical values independently, and also\r\n         * adjust this value in real-time during your game.\r\n         *\r\n         * Be sure to keep the value between 0 and 1. A value of zero will disable tracking on that axis.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#lerp\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.9.0\r\n         */\r\n        this.lerp = new Vector2(1, 1);\r\n\r\n        /**\r\n         * The values stored in this property are subtracted from the Camera targets position, allowing you to\r\n         * offset the camera from the actual target x/y coordinates by this amount.\r\n         * Can also be set via `setFollowOffset` or as part of the `startFollow` call.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#followOffset\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.9.0\r\n         */\r\n        this.followOffset = new Vector2();\r\n\r\n        /**\r\n         * The Camera dead zone.\r\n         *\r\n         * The deadzone is only used when the camera is following a target.\r\n         *\r\n         * It defines a rectangular region within which if the target is present, the camera will not scroll.\r\n         * If the target moves outside of this area, the camera will begin scrolling in order to follow it.\r\n         *\r\n         * The `lerp` values that you can set for a follower target also apply when using a deadzone.\r\n         *\r\n         * You can directly set this property to be an instance of a Rectangle. Or, you can use the\r\n         * `setDeadzone` method for a chainable approach.\r\n         *\r\n         * The rectangle you provide can have its dimensions adjusted dynamically, however, please\r\n         * note that its position is updated every frame, as it is constantly re-centered on the cameras mid point.\r\n         *\r\n         * Calling `setDeadzone` with no arguments will reset an active deadzone, as will setting this property\r\n         * to `null`.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#deadzone\r\n         * @type {?Phaser.Geom.Rectangle}\r\n         * @since 3.11.0\r\n         */\r\n        this.deadzone = null;\r\n\r\n        /**\r\n         * Internal follow target reference.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#_follow\r\n         * @type {?any}\r\n         * @private\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this._follow = null;\r\n\r\n        /**\r\n         * Is this Camera rendering directly to the canvas or to a texture?\r\n         * \r\n         * Enable rendering to texture with the method `setRenderToTexture` (just enabling this boolean won't be enough)\r\n         * \r\n         * Once enabled you can toggle it by switching this property.\r\n         * \r\n         * To properly remove a render texture you should call the `clearRenderToTexture()` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#renderToTexture\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.13.0\r\n         */\r\n        this.renderToTexture = false;\r\n\r\n        /**\r\n         * If this Camera has been set to render to a texture then this holds a reference\r\n         * to the HTML Canvas Element that the Camera is drawing to.\r\n         * \r\n         * Enable texture rendering using the method `setRenderToTexture`.\r\n         * \r\n         * This is only populated if Phaser is running with the Canvas Renderer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#canvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.13.0\r\n         */\r\n        this.canvas = null;\r\n\r\n        /**\r\n         * If this Camera has been set to render to a texture then this holds a reference\r\n         * to the Rendering Context belonging to the Canvas element the Camera is drawing to.\r\n         * \r\n         * Enable texture rendering using the method `setRenderToTexture`.\r\n         * \r\n         * This is only populated if Phaser is running with the Canvas Renderer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#context\r\n         * @type {CanvasRenderingContext2D}\r\n         * @since 3.13.0\r\n         */\r\n        this.context = null;\r\n\r\n        /**\r\n         * If this Camera has been set to render to a texture then this holds a reference\r\n         * to the GL Texture belonging the Camera is drawing to.\r\n         * \r\n         * Enable texture rendering using the method `setRenderToTexture`.\r\n         * \r\n         * This is only set if Phaser is running with the WebGL Renderer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#framebuffer\r\n         * @type {?WebGLTexture}\r\n         * @since 3.13.0\r\n         */\r\n        this.glTexture = null;\r\n\r\n        /**\r\n         * If this Camera has been set to render to a texture then this holds a reference\r\n         * to the GL Frame Buffer belonging the Camera is drawing to.\r\n         * \r\n         * Enable texture rendering using the method `setRenderToTexture`.\r\n         * \r\n         * This is only set if Phaser is running with the WebGL Renderer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#framebuffer\r\n         * @type {?WebGLFramebuffer}\r\n         * @since 3.13.0\r\n         */\r\n        this.framebuffer = null;\r\n\r\n        /**\r\n         * If this Camera has been set to render to a texture and to use a custom pipeline,\r\n         * then this holds a reference to the pipeline the Camera is drawing with.\r\n         * \r\n         * Enable texture rendering using the method `setRenderToTexture`.\r\n         * \r\n         * This is only set if Phaser is running with the WebGL Renderer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#pipeline\r\n         * @type {any}\r\n         * @since 3.13.0\r\n         */\r\n        this.pipeline = null;\r\n    },\r\n\r\n    /**\r\n     * Sets the Camera to render to a texture instead of to the main canvas.\r\n     * \r\n     * The Camera will redirect all Game Objects it's asked to render to this texture.\r\n     * \r\n     * During the render sequence, the texture itself will then be rendered to the main canvas.\r\n     * \r\n     * Doing this gives you the ability to modify the texture before this happens,\r\n     * allowing for special effects such as Camera specific shaders, or post-processing\r\n     * on the texture.\r\n     * \r\n     * If running under Canvas the Camera will render to its `canvas` property.\r\n     * \r\n     * If running under WebGL the Camera will create a frame buffer, which is stored in its `framebuffer` and `glTexture` properties.\r\n     * \r\n     * If you set a camera to render to a texture then it will emit 2 events during the render loop:\r\n     * \r\n     * First, it will emit the event `prerender`. This happens right before any Game Object's are drawn to the Camera texture.\r\n     * \r\n     * Then, it will emit the event `postrender`. This happens after all Game Object's have been drawn, but right before the\r\n     * Camera texture is rendered to the main game canvas. It's the final point at which you can manipulate the texture before\r\n     * it appears in-game.\r\n     * \r\n     * You should not enable this unless you plan on actually using the texture it creates\r\n     * somehow, otherwise you're just doubling the work required to render your game.\r\n     * \r\n     * To temporarily disable rendering to a texture, toggle the `renderToTexture` boolean.\r\n     * \r\n     * If you no longer require the Camera to render to a texture, call the `clearRenderToTexture` method,\r\n     * which will delete the respective textures and free-up resources.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#setRenderToTexture\r\n     * @since 3.13.0\r\n     *\r\n     * @param {(string|Phaser.Renderer.WebGL.WebGLPipeline)} [pipeline] - An optional WebGL Pipeline to render with, can be either a string which is the name of the pipeline, or a pipeline reference.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    setRenderToTexture: function (pipeline)\r\n    {\r\n        var renderer = this.scene.sys.game.renderer;\r\n\r\n        if (renderer.gl)\r\n        {\r\n            this.glTexture = renderer.createTextureFromSource(null, this.width, this.height, 0);\r\n            this.framebuffer = renderer.createFramebuffer(this.width, this.height, this.glTexture, false);\r\n        }\r\n        else\r\n        {\r\n            this.canvas = CanvasPool.create2D(this, this.width, this.height);\r\n            this.context = this.canvas.getContext('2d');\r\n        }\r\n\r\n        this.renderToTexture = true;\r\n\r\n        if (pipeline)\r\n        {\r\n            this.setPipeline(pipeline);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the WebGL pipeline this Camera is using when rendering to a texture.\r\n     * \r\n     * You can pass either the string-based name of the pipeline, or a reference to the pipeline itself.\r\n     * \r\n     * Call this method with no arguments to clear any previously set pipeline.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#setPipeline\r\n     * @since 3.13.0\r\n     *\r\n     * @param {(string|Phaser.Renderer.WebGL.WebGLPipeline)} [pipeline] - The WebGL Pipeline to render with, can be either a string which is the name of the pipeline, or a pipeline reference. Or if left empty it will clear the pipeline.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    setPipeline: function (pipeline)\r\n    {\r\n        if (typeof pipeline === 'string')\r\n        {\r\n            var renderer = this.scene.sys.game.renderer;\r\n\r\n            if (renderer.gl && renderer.hasPipeline(pipeline))\r\n            {\r\n                this.pipeline = renderer.getPipeline(pipeline);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.pipeline = pipeline;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * If this Camera was set to render to a texture, this will clear the resources it was using and\r\n     * redirect it to render back to the primary Canvas again.\r\n     * \r\n     * If you only wish to temporarily disable rendering to a texture then you can toggle the\r\n     * property `renderToTexture` instead.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#clearRenderToTexture\r\n     * @since 3.13.0\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    clearRenderToTexture: function ()\r\n    {\r\n        var renderer = this.scene.sys.game.renderer;\r\n\r\n        if (renderer.gl)\r\n        {\r\n            if (this.framebuffer)\r\n            {\r\n                renderer.deleteFramebuffer(this.framebuffer);\r\n            }\r\n\r\n            if (this.glTexture)\r\n            {\r\n                renderer.deleteTexture(this.glTexture);\r\n            }\r\n\r\n            this.framebuffer = null;\r\n            this.glTexture = null;\r\n            this.pipeline = null;\r\n        }\r\n        else\r\n        {\r\n            CanvasPool.remove(this);\r\n\r\n            this.canvas = null;\r\n            this.context = null;\r\n        }\r\n\r\n        this.renderToTexture = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the Camera dead zone.\r\n     *\r\n     * The deadzone is only used when the camera is following a target.\r\n     *\r\n     * It defines a rectangular region within which if the target is present, the camera will not scroll.\r\n     * If the target moves outside of this area, the camera will begin scrolling in order to follow it.\r\n     *\r\n     * The deadzone rectangle is re-positioned every frame so that it is centered on the mid-point\r\n     * of the camera. This allows you to use the object for additional game related checks, such as\r\n     * testing if an object is within it or not via a Rectangle.contains call.\r\n     *\r\n     * The `lerp` values that you can set for a follower target also apply when using a deadzone.\r\n     *\r\n     * Calling this method with no arguments will reset an active deadzone.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#setDeadzone\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} [width] - The width of the deadzone rectangle in pixels. If not specified the deadzone is removed.\r\n     * @param {number} [height] - The height of the deadzone rectangle in pixels.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    setDeadzone: function (width, height)\r\n    {\r\n        if (width === undefined)\r\n        {\r\n            this.deadzone = null;\r\n        }\r\n        else\r\n        {\r\n            if (this.deadzone)\r\n            {\r\n                this.deadzone.width = width;\r\n                this.deadzone.height = height;\r\n            }\r\n            else\r\n            {\r\n                this.deadzone = new Rectangle(0, 0, width, height);\r\n            }\r\n\r\n            if (this._follow)\r\n            {\r\n                var originX = this.width / 2;\r\n                var originY = this.height / 2;\r\n\r\n                var fx = this._follow.x - this.followOffset.x;\r\n                var fy = this._follow.y - this.followOffset.y;\r\n\r\n                this.midPoint.set(fx, fy);\r\n\r\n                this.scrollX = fx - originX;\r\n                this.scrollY = fy - originY;\r\n            }\r\n\r\n            CenterOn(this.deadzone, this.midPoint.x, this.midPoint.y);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fades the Camera in from the given color over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#fadeIn\r\n     * @since 3.3.0\r\n     *\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    fadeIn: function (duration, red, green, blue, callback, context)\r\n    {\r\n        return this.fadeEffect.start(false, duration, red, green, blue, true, callback, context);\r\n    },\r\n\r\n    /**\r\n     * Fades the Camera out to the given color over the duration specified.\r\n     * This is an alias for Camera.fade that forces the fade to start, regardless of existing fades.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#fadeOut\r\n     * @since 3.3.0\r\n     *\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    fadeOut: function (duration, red, green, blue, callback, context)\r\n    {\r\n        return this.fadeEffect.start(true, duration, red, green, blue, true, callback, context);\r\n    },\r\n\r\n    /**\r\n     * Fades the Camera from the given color to transparent over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#fadeFrom\r\n     * @since 3.5.0\r\n     *\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n     * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    fadeFrom: function (duration, red, green, blue, force, callback, context)\r\n    {\r\n        return this.fadeEffect.start(false, duration, red, green, blue, force, callback, context);\r\n    },\r\n\r\n    /**\r\n     * Fades the Camera from transparent to the given color over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#fade\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n     * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    fade: function (duration, red, green, blue, force, callback, context)\r\n    {\r\n        return this.fadeEffect.start(true, duration, red, green, blue, force, callback, context);\r\n    },\r\n\r\n    /**\r\n     * Flashes the Camera by setting it to the given color immediately and then fading it away again quickly over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#flash\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [duration=250] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=255] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=255] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=255] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n     * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    flash: function (duration, red, green, blue, force, callback, context)\r\n    {\r\n        return this.flashEffect.start(duration, red, green, blue, force, callback, context);\r\n    },\r\n\r\n    /**\r\n     * Shakes the Camera by the given intensity over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#shake\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [duration=100] - The duration of the effect in milliseconds.\r\n     * @param {number} [intensity=0.05] - The intensity of the shake.\r\n     * @param {boolean} [force=false] - Force the shake effect to start immediately, even if already running.\r\n     * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    shake: function (duration, intensity, force, callback, context)\r\n    {\r\n        return this.shakeEffect.start(duration, intensity, force, callback, context);\r\n    },\r\n\r\n    /**\r\n     * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\r\n     * over the duration and with the ease specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#pan\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The destination x coordinate to scroll the center of the Camera viewport to.\r\n     * @param {number} y - The destination y coordinate to scroll the center of the Camera viewport to.\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {(string|function)} [ease='Linear'] - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.\r\n     * @param {boolean} [force=false] - Force the shake effect to start immediately, even if already running.\r\n     * @param {CameraPanCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n     * the current camera scroll x coordinate and the current camera scroll y coordinate.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    pan: function (x, y, duration, ease, force, callback, context)\r\n    {\r\n        return this.panEffect.start(x, y, duration, ease, force, callback, context);\r\n    },\r\n\r\n    /**\r\n     * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#zoomTo\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} zoom - The target Camera zoom value.\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {(string|function)} [ease='Linear'] - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.\r\n     * @param {boolean} [force=false] - Force the shake effect to start immediately, even if already running.\r\n     * @param {CameraPanCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n     * the current camera scroll x coordinate and the current camera scroll y coordinate.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    zoomTo: function (zoom, duration, ease, force, callback, context)\r\n    {\r\n        return this.zoomEffect.start(zoom, duration, ease, force, callback, context);\r\n    },\r\n\r\n    /**\r\n     * Internal preRender step.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#preRender\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} baseScale - The base scale, as set in the Camera Manager.\r\n     * @param {number} resolution - The game resolution.\r\n     */\r\n    preRender: function (baseScale, resolution)\r\n    {\r\n        var width = this.width;\r\n        var height = this.height;\r\n\r\n        var halfWidth = width * 0.5;\r\n        var halfHeight = height * 0.5;\r\n\r\n        var zoom = this.zoom * baseScale;\r\n        var matrix = this.matrix;\r\n\r\n        var originX = width * this.originX;\r\n        var originY = height * this.originY;\r\n\r\n        var follow = this._follow;\r\n        var deadzone = this.deadzone;\r\n\r\n        var sx = this.scrollX;\r\n        var sy = this.scrollY;\r\n\r\n        if (deadzone)\r\n        {\r\n            CenterOn(deadzone, this.midPoint.x, this.midPoint.y);\r\n        }\r\n\r\n        if (follow)\r\n        {\r\n            var fx = (follow.x - this.followOffset.x);\r\n            var fy = (follow.y - this.followOffset.y);\r\n\r\n            if (deadzone)\r\n            {\r\n                if (fx < deadzone.x)\r\n                {\r\n                    sx = Linear(sx, sx - (deadzone.x - fx), this.lerp.x);\r\n                }\r\n                else if (fx > deadzone.right)\r\n                {\r\n                    sx = Linear(sx, sx + (fx - deadzone.right), this.lerp.x);\r\n                }\r\n\r\n                if (fy < deadzone.y)\r\n                {\r\n                    sy = Linear(sy, sy - (deadzone.y - fy), this.lerp.y);\r\n                }\r\n                else if (fy > deadzone.bottom)\r\n                {\r\n                    sy = Linear(sy, sy + (fy - deadzone.bottom), this.lerp.y);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                sx = Linear(sx, fx - originX, this.lerp.x);\r\n                sy = Linear(sy, fy - originY, this.lerp.y);\r\n            }\r\n        }\r\n\r\n        if (this.useBounds)\r\n        {\r\n            sx = this.clampX(sx);\r\n            sy = this.clampY(sy);\r\n        }\r\n\r\n        if (this.roundPixels)\r\n        {\r\n            originX = Math.round(originX);\r\n            originY = Math.round(originY);\r\n        }\r\n\r\n        //  Values are in pixels and not impacted by zooming the Camera\r\n        this.scrollX = sx;\r\n        this.scrollY = sy;\r\n\r\n        var midX = sx + halfWidth;\r\n        var midY = sy + halfHeight;\r\n\r\n        //  The center of the camera, in world space, so taking zoom into account\r\n        //  Basically the pixel value of what it's looking at in the middle of the cam\r\n        this.midPoint.set(midX, midY);\r\n\r\n        var displayWidth = width / zoom;\r\n        var displayHeight = height / zoom;\r\n\r\n        this.worldView.setTo(\r\n            midX - (displayWidth / 2),\r\n            midY - (displayHeight / 2),\r\n            displayWidth,\r\n            displayHeight\r\n        );\r\n\r\n        matrix.loadIdentity();\r\n        matrix.scale(resolution, resolution);\r\n        matrix.translate(this.x + originX, this.y + originY);\r\n        matrix.rotate(this.rotation);\r\n        matrix.scale(zoom, zoom);\r\n        matrix.translate(-originX, -originY);\r\n\r\n        this.shakeEffect.preRender();\r\n    },\r\n\r\n    /**\r\n     * Sets the linear interpolation value to use when following a target.\r\n     *\r\n     * The default values of 1 means the camera will instantly snap to the target coordinates.\r\n     * A lower value, such as 0.1 means the camera will more slowly track the target, giving\r\n     * a smooth transition. You can set the horizontal and vertical values independently, and also\r\n     * adjust this value in real-time during your game.\r\n     *\r\n     * Be sure to keep the value between 0 and 1. A value of zero will disable tracking on that axis.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#setLerp\r\n     * @since 3.9.0\r\n     *\r\n     * @param {number} [x=1] - The amount added to the horizontal linear interpolation of the follow target.\r\n     * @param {number} [y=1] - The amount added to the vertical linear interpolation of the follow target.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setLerp: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 1; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.lerp.set(x, y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal and vertical offset of the camera from its follow target.\r\n     * The values are subtracted from the targets position during the Cameras update step.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#setFollowOffset\r\n     * @since 3.9.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal offset from the camera follow target.x position.\r\n     * @param {number} [y=0] - The vertical offset from the camera follow target.y position.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setFollowOffset: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n\r\n        this.followOffset.set(x, y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the Camera to follow a Game Object.\r\n     *\r\n     * When enabled the Camera will automatically adjust its scroll position to keep the target Game Object\r\n     * in its center.\r\n     *\r\n     * You can set the linear interpolation value used in the follow code.\r\n     * Use low lerp values (such as 0.1) to automatically smooth the camera motion.\r\n     *\r\n     * If you find you're getting a slight \"jitter\" effect when following an object it's probably to do with sub-pixel\r\n     * rendering of the targets position. This can be rounded by setting the `roundPixels` argument to `true` to\r\n     * force full pixel rounding rendering. Note that this can still be broken if you have specified a non-integer zoom\r\n     * value on the camera. So be sure to keep the camera zoom to integers.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#startFollow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject|object)} target - The target for the Camera to follow.\r\n     * @param {boolean} [roundPixels=false] - Round the camera position to whole integers to avoid sub-pixel rendering?\r\n     * @param {number} [lerpX=1] - A value between 0 and 1. This value specifies the amount of linear interpolation to use when horizontally tracking the target. The closer the value to 1, the faster the camera will track.\r\n     * @param {number} [lerpY=1] - A value between 0 and 1. This value specifies the amount of linear interpolation to use when vertically tracking the target. The closer the value to 1, the faster the camera will track.\r\n     * @param {number} [offsetX=0] - The horizontal offset from the camera follow target.x position.\r\n     * @param {number} [offsetY=0] - The vertical offset from the camera follow target.y position.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    startFollow: function (target, roundPixels, lerpX, lerpY, offsetX, offsetY)\r\n    {\r\n        if (roundPixels === undefined) { roundPixels = false; }\r\n        if (lerpX === undefined) { lerpX = 1; }\r\n        if (lerpY === undefined) { lerpY = lerpX; }\r\n        if (offsetX === undefined) { offsetX = 0; }\r\n        if (offsetY === undefined) { offsetY = offsetX; }\r\n\r\n        this._follow = target;\r\n\r\n        this.roundPixels = roundPixels;\r\n\r\n        lerpX = Clamp(lerpX, 0, 1);\r\n        lerpY = Clamp(lerpY, 0, 1);\r\n\r\n        this.lerp.set(lerpX, lerpY);\r\n\r\n        this.followOffset.set(offsetX, offsetY);\r\n\r\n        var originX = this.width / 2;\r\n        var originY = this.height / 2;\r\n\r\n        var fx = target.x - offsetX;\r\n        var fy = target.y - offsetY;\r\n\r\n        this.midPoint.set(fx, fy);\r\n\r\n        this.scrollX = fx - originX;\r\n        this.scrollY = fy - originY;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stops a Camera from following a Game Object, if previously set via `Camera.startFollow`.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#stopFollow\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    stopFollow: function ()\r\n    {\r\n        this._follow = null;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resets any active FX, such as a fade, flash or shake. Useful to call after a fade in order to\r\n     * remove the fade.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#resetFX\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    resetFX: function ()\r\n    {\r\n        this.panEffect.reset();\r\n        this.shakeEffect.reset();\r\n        this.flashEffect.reset();\r\n        this.fadeEffect.reset();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal method called automatically by the Camera Manager.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#update\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (this.visible)\r\n        {\r\n            this.panEffect.update(time, delta);\r\n            this.zoomEffect.update(time, delta);\r\n            this.shakeEffect.update(time, delta);\r\n            this.flashEffect.update(time, delta);\r\n            this.fadeEffect.update(time, delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Camera instance. You rarely need to call this directly.\r\n     *\r\n     * Called by the Camera Manager. If you wish to destroy a Camera please use `CameraManager.remove` as\r\n     * cameras are stored in a pool, ready for recycling later, and calling this directly will prevent that.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#destroy\r\n     * @fires CameraDestroyEvent\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.clearRenderToTexture();\r\n\r\n        this.resetFX();\r\n\r\n        BaseCamera.prototype.destroy.call(this);\r\n\r\n        this._follow = null;\r\n\r\n        this.deadzone = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Camera;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BaseCamera","CanvasPool","CenterOn","Clamp","Class","Components","Effects","Linear","Rectangle","Vector2","Camera","Extends","Mixins","Flip","Tint","initialize","x","y","width","height","call","inputEnabled","fadeEffect","Fade","flashEffect","Flash","shakeEffect","Shake","panEffect","Pan","zoomEffect","Zoom","lerp","followOffset","_follow","deadzone","renderToTexture","pipeline","framebuffer","glTexture","context","canvas","setRenderToTexture","renderer","scene","sys","game","gl","createTextureFromSource","createFramebuffer","create2D","getContext","setPipeline","hasPipeline","getPipeline","clearRenderToTexture","deleteFramebuffer","deleteTexture","remove","setDeadzone","undefined","originX","originY","fx","fy","midPoint","set","scrollX","scrollY","fadeIn","duration","red","green","blue","callback","start","fadeOut","fadeFrom","force","fade","flash","shake","intensity","pan","ease","zoomTo","zoom","preRender","baseScale","resolution","halfWidth","halfHeight","matrix","follow","sx","sy","right","bottom","useBounds","clampX","clampY","roundPixels","Math","round","midX","midY","displayWidth","displayHeight","worldView","setTo","loadIdentity","scale","translate","rotate","rotation","setLerp","setFollowOffset","startFollow","target","lerpX","lerpY","offsetX","offsetY","stopFollow","resetFX","reset","update","time","delta","visible","destroy","prototype"]
}
