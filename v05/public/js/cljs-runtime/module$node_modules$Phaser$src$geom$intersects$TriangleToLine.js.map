{
"version":3,
"file":"module$node_modules$Phaser$src$geom$intersects$TriangleToLine.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,8DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO1H,IAAIC,SAAWH,OAAA,CAAQ,uDAAR,CAAf,CACII,WAAaJ,OAAA,CAAQ,2DAAR,CA0CjBC,OAAAC,QAAA,CA3BqBG,QAAS,CAACC,QAAD,CAAWC,IAAX,CAC9B,CAkBI,MAhBIJ,SAAA,CAASG,QAAT,CAAmBC,IAAAC,UAAA,EAAnB,CAgBJ,EAhB4CL,QAAA,CAASG,QAAT,CAAmBC,IAAAE,UAAA,EAAnB,CAgB5C,EAVIL,UAAA,CAAWE,QAAAI,SAAA,EAAX,CAAgCH,IAAhC,CAUJ,EALIH,UAAA,CAAWE,QAAAK,SAAA,EAAX,CAAgCJ,IAAhC,CAKJ,EAAIH,UAAA,CAAWE,QAAAM,SAAA,EAAX;AAAgCL,IAAhC,CAAJ,CAEW,CAAA,CAFX,CAKO,CAAA,CAvBX,CAxB0H;",
"sources":["node_modules/Phaser/src/geom/intersects/TriangleToLine.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$intersects$TriangleToLine\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Contains = require('../triangle/Contains');\r\nvar LineToLine = require('./LineToLine');\r\n\r\n/**\r\n * Checks if a Triangle and a Line intersect.\r\n * \r\n * The Line intersects the Triangle if it starts inside of it, ends inside of it, or crosses any of the Triangle's sides. Thus, the Triangle is considered \"solid\".\r\n *\r\n * @function Phaser.Geom.Intersects.TriangleToLine\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to check with.\r\n * @param {Phaser.Geom.Line} line - The Line to check with.\r\n *\r\n * @return {boolean} `true` if the Triangle and the Line intersect, otherwise `false`.\r\n */\r\nvar TriangleToLine = function (triangle, line)\r\n{\r\n    //  If the Triangle contains either the start or end point of the line, it intersects\r\n    if (Contains(triangle, line.getPointA()) || Contains(triangle, line.getPointB()))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    //  Now check the line against each line of the Triangle\r\n    if (LineToLine(triangle.getLineA(), line))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (LineToLine(triangle.getLineB(), line))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (LineToLine(triangle.getLineC(), line))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nmodule.exports = TriangleToLine;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Contains","LineToLine","TriangleToLine","triangle","line","getPointA","getPointB","getLineA","getLineB","getLineC"]
}
