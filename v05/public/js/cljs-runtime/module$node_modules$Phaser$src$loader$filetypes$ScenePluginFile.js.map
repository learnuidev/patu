{
"version":3,
"file":"module$node_modules$Phaser$src$loader$filetypes$ScenePluginFile.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/loader/filetypes/ScenePluginFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$filetypes$ScenePluginFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.ScenePluginFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within the Loader.\r\n * @property {(string|function)} [url] - The absolute or relative URL to load the file from. Or, a Scene Plugin.\r\n * @property {string} [extension='js'] - The default file extension to use if no url is provided.\r\n * @property {string} [systemKey] - If this plugin is to be added to Scene.Systems, this is the property key for it.\r\n * @property {string} [sceneKey] - If this plugin is to be added to the Scene, this is the property key for it.\r\n * @property {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A single Scene Plugin Script File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#scenePlugin method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#scenePlugin.\r\n *\r\n * @class ScenePluginFile\r\n * @extends Phaser.Loader.File\r\n * @memberOf Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.8.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.ScenePluginFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\r\n * @param {string} [systemKey] - If this plugin is to be added to Scene.Systems, this is the property key for it.\r\n * @param {string} [sceneKey] - If this plugin is to be added to the Scene, this is the property key for it.\r\n * @param {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar ScenePluginFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function ScenePluginFile (loader, key, url, systemKey, sceneKey, xhrSettings)\r\n    {\r\n        var extension = 'js';\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            url = GetFastValue(config, 'url');\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            extension = GetFastValue(config, 'extension', extension);\r\n            systemKey = GetFastValue(config, 'systemKey');\r\n            sceneKey = GetFastValue(config, 'sceneKey');\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'scenePlugin',\r\n            cache: false,\r\n            extension: extension,\r\n            responseType: 'text',\r\n            key: key,\r\n            url: url,\r\n            xhrSettings: xhrSettings,\r\n            config: {\r\n                systemKey: systemKey,\r\n                sceneKey: sceneKey\r\n            }\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n\r\n        // If the url variable refers to a class, add the plugin directly\r\n        if (typeof url === 'function')\r\n        {\r\n            this.data = url;\r\n\r\n            this.state = CONST.FILE_POPULATED;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.ScenePluginFile#onProcess\r\n     * @since 3.8.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        var pluginManager = this.loader.systems.plugins;\r\n        var config = this.config;\r\n\r\n        var key = this.key;\r\n        var systemKey = GetFastValue(config, 'systemKey', key);\r\n        var sceneKey = GetFastValue(config, 'sceneKey', key);\r\n\r\n        if (this.state === CONST.FILE_POPULATED)\r\n        {\r\n            pluginManager.installScenePlugin(systemKey, this.data, sceneKey, this.loader.scene);\r\n        }\r\n        else\r\n        {\r\n            //  Plugin added via a js file\r\n            this.state = CONST.FILE_PROCESSING;\r\n\r\n            this.data = document.createElement('script');\r\n            this.data.language = 'javascript';\r\n            this.data.type = 'text/javascript';\r\n            this.data.defer = false;\r\n            this.data.text = this.xhrLoader.responseText;\r\n\r\n            document.head.appendChild(this.data);\r\n\r\n            pluginManager.installScenePlugin(systemKey, window[this.key], sceneKey, this.loader.scene);\r\n        }\r\n\r\n        this.onProcessComplete();\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds a Scene Plugin Script file, or array of plugin files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.scenePlugin('ModPlayer', 'plugins/ModPlayer.js', 'modPlayer', 'mods');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String and not already in-use by another file in the Loader.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.scenePlugin({\r\n *     key: 'modplayer',\r\n *     url: 'plugins/ModPlayer.js'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.ScenePluginFileConfig` for more details.\r\n *\r\n * Once the file has finished loading it will automatically be converted into a script element\r\n * via `document.createElement('script')`. It will have its language set to JavaScript, `defer` set to\r\n * false and then the resulting element will be appended to `document.head`. Any code then in the\r\n * script will be executed. It will then be passed to the Phaser PluginCache.register method.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.js\". It will always add `.js` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Script File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#scenePlugin\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.8.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.ScenePluginFileConfig|Phaser.Loader.FileTypes.ScenePluginFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {(string|function)} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\". Or, set to a plugin function.\r\n * @param {string} [systemKey] - If this plugin is to be added to Scene.Systems, this is the property key for it.\r\n * @param {string} [sceneKey] - If this plugin is to be added to the Scene, this is the property key for it.\r\n * @param {XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('scenePlugin', function (key, url, systemKey, sceneKey, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new ScenePluginFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new ScenePluginFile(this, key, url, systemKey, sceneKey, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = ScenePluginFile;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","CONST","File","FileTypesManager","GetFastValue","IsPlainObject","ScenePluginFile","Extends","initialize","loader","key","url","systemKey","sceneKey","xhrSettings","extension","config","call","fileConfig","type","cache","responseType","data","state","FILE_POPULATED","onProcess","pluginManager","systems","plugins","installScenePlugin","scene","FILE_PROCESSING","document","createElement","language","defer","text","xhrLoader","responseText","head","appendChild","window","onProcessComplete","register","Array","isArray","i","length","addFile"]
}
