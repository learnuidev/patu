{
"version":3,
"file":"module$node_modules$Phaser$src$physics$impact$ImpactPhysics.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/impact/ImpactPhysics.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$impact$ImpactPhysics\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Factory = require('./Factory');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Merge = require('../../utils/object/Merge');\r\nvar PluginCache = require('../../plugins/PluginCache');\r\nvar World = require('./World');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class ImpactPhysics\r\n * @memberOf Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\r\nvar ImpactPhysics = new Class({\r\n\r\n    initialize:\r\n\r\n    function ImpactPhysics (scene)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.ImpactPhysics#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.ImpactPhysics#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.ImpactPhysics#config\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = this.getConfig();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.ImpactPhysics#world\r\n         * @type {Phaser.Physics.Impact.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.ImpactPhysics#add\r\n         * @type {Phaser.Physics.Impact.Factory}\r\n         * @since 3.0.0\r\n         */\r\n        this.add;\r\n\r\n        scene.sys.events.once('boot', this.boot, this);\r\n        scene.sys.events.on('start', this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.world = new World(this.scene, this.config);\r\n        this.add = new Factory(this.world);\r\n\r\n        this.systems.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (!this.world)\r\n        {\r\n            this.world = new World(this.scene, this.config);\r\n            this.add = new Factory(this.world);\r\n        }\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on('update', this.world.update, this.world);\r\n        eventEmitter.once('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#getConfig\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} [description]\r\n     */\r\n    getConfig: function ()\r\n    {\r\n        var gameConfig = this.systems.game.config.physics;\r\n        var sceneConfig = this.systems.settings.physics;\r\n\r\n        var config = Merge(\r\n            GetFastValue(sceneConfig, 'impact', {}),\r\n            GetFastValue(gameConfig, 'impact', {})\r\n        );\r\n\r\n        return config;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} The Impact World object.\r\n     */\r\n    pause: function ()\r\n    {\r\n        return this.world.pause();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} The Impact World object.\r\n     */\r\n    resume: function ()\r\n    {\r\n        return this.world.resume();\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off('update', this.world.update, this.world);\r\n        eventEmitter.off('shutdown', this.shutdown, this);\r\n\r\n        this.add.destroy();\r\n        this.world.destroy();\r\n\r\n        this.add = null;\r\n        this.world = null;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off('start', this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('ImpactPhysics', ImpactPhysics, 'impactPhysics');\r\n\r\nmodule.exports = ImpactPhysics;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Factory","GetFastValue","Merge","PluginCache","World","ImpactPhysics","initialize","scene","systems","sys","config","getConfig","events","once","boot","on","start","world","add","destroy","eventEmitter","update","shutdown","gameConfig","game","physics","settings","pause","resume","off","register"]
}
