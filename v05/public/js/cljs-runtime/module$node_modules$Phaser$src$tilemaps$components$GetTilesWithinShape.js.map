{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$GetTilesWithinShape.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/tilemaps/components/GetTilesWithinShape.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$GetTilesWithinShape\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Geom = require('../../geom/');\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar Intersects = require('../../geom/intersects/');\r\nvar NOOP = require('../../utils/NOOP');\r\nvar TileToWorldX = require('./TileToWorldX');\r\nvar TileToWorldY = require('./TileToWorldY');\r\nvar WorldToTileX = require('./WorldToTileX');\r\nvar WorldToTileY = require('./WorldToTileY');\r\n\r\nvar TriangleToRectangle = function (triangle, rect)\r\n{\r\n    return Intersects.RectangleToTriangle(rect, triangle);\r\n};\r\n\r\n// Note: Could possibly be optimized by copying the shape and shifting it into tilemapLayer\r\n// coordinates instead of shifting the tiles.\r\n\r\n/**\r\n * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTilesWithinShape\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {Phaser.Tilemaps.Tile[]} Array of Tile objects.\r\n */\r\nvar GetTilesWithinShape = function (shape, filteringOptions, camera, layer)\r\n{\r\n    if (shape === undefined) { return []; }\r\n\r\n    // intersectTest is a function with parameters: shape, rect\r\n    var intersectTest = NOOP;\r\n    if (shape instanceof Geom.Circle) { intersectTest = Intersects.CircleToRectangle; }\r\n    else if (shape instanceof Geom.Rectangle) { intersectTest = Intersects.RectangleToRectangle; }\r\n    else if (shape instanceof Geom.Triangle) { intersectTest = TriangleToRectangle; }\r\n    else if (shape instanceof Geom.Line) { intersectTest = Intersects.LineToRectangle; }\r\n\r\n    // Top left corner of the shapes's bounding box, rounded down to include partial tiles\r\n    var xStart = WorldToTileX(shape.left, true, camera, layer);\r\n    var yStart = WorldToTileY(shape.top, true, camera, layer);\r\n\r\n    // Bottom right corner of the shapes's bounding box, rounded up to include partial tiles\r\n    var xEnd = Math.ceil(WorldToTileX(shape.right, false, camera, layer));\r\n    var yEnd = Math.ceil(WorldToTileY(shape.bottom, false, camera, layer));\r\n\r\n    // Tiles within bounding rectangle of shape. Bounds are forced to be at least 1 x 1 tile in size\r\n    // to grab tiles for shapes that don't have a height or width (e.g. a horizontal line).\r\n    var width = Math.max(xEnd - xStart, 1);\r\n    var height = Math.max(yEnd - yStart, 1);\r\n    var tiles = GetTilesWithin(xStart, yStart, width, height, filteringOptions, layer);\r\n\r\n    var tileWidth = layer.tileWidth;\r\n    var tileHeight = layer.tileHeight;\r\n    if (layer.tilemapLayer)\r\n    {\r\n        tileWidth *= layer.tilemapLayer.scaleX;\r\n        tileHeight *= layer.tilemapLayer.scaleY;\r\n    }\r\n\r\n    var results = [];\r\n    var tileRect = new Geom.Rectangle(0, 0, tileWidth, tileHeight);\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        var tile = tiles[i];\r\n        tileRect.x = TileToWorldX(tile.x, camera, layer);\r\n        tileRect.y = TileToWorldY(tile.y, camera, layer);\r\n        if (intersectTest(shape, tileRect))\r\n        {\r\n            results.push(tile);\r\n        }\r\n    }\r\n\r\n    return results;\r\n};\r\n\r\nmodule.exports = GetTilesWithinShape;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Geom","GetTilesWithin","Intersects","NOOP","TileToWorldX","TileToWorldY","WorldToTileX","WorldToTileY","TriangleToRectangle","triangle","rect","RectangleToTriangle","GetTilesWithinShape","shape","filteringOptions","camera","layer","undefined","intersectTest","Circle","CircleToRectangle","Rectangle","RectangleToRectangle","Triangle","Line","LineToRectangle","xStart","left","yStart","top","xEnd","Math","ceil","right","yEnd","bottom","tiles","max","width","height","tileWidth","tileHeight","tilemapLayer","scaleX","scaleY","results","tileRect","i","length","tile","x","y","push"]
}
