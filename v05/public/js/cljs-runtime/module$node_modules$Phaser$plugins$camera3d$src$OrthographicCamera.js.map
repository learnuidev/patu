{
"version":3,
"file":"module$node_modules$Phaser$plugins$camera3d$src$OrthographicCamera.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,mEAAA,CAAuF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO/H,IAAIC,OAASH,OAAA,CAAQ,wDAAR,CACTI,OAAAA,CAAQJ,OAAA,CAAQ,4CAAR,CAIZ,KAAIK,QAAU,KAHAL,OAAAM,CAAQ,6CAARA,CAGA,CAgBVC,QAAAA,CAAqB,IAAIH,MAAJ,CAAU,CAE/BI,QAASL,MAFsB,CAI/BM,WAEAF,QAA4B,CAACG,KAAD,CAAQC,aAAR,CAAuBC,cAAvB,CAC5B,CAC0BC,IAAAA,EAAtB,GAAIF,aAAJ,GAAmCA,aAAnC,CAAmD,CAAnD,CACuBE,KAAAA,EAAvB,GAAID,cAAJ,GAAoCA,cAApC;AAAqD,CAArD,CAEAT,OAAAW,KAAA,CAAY,IAAZ,CAAkBJ,KAAlB,CASA,KAAAC,cAAA,CAAqBA,aASrB,KAAAC,eAAA,CAAsBA,cAUtB,KAAAG,MAAA,CAAa,CAUb,KAAAC,KAAA,CAAY,CAEZ,KAAAC,OAAA,EA5CJ,CAP+B,CAkE/BC,WAAYA,QAAS,CAACC,KAAD,CAAQR,aAAR,CAAuBC,cAAvB,CACrB,CAC0BC,IAAAA,EAAtB,GAAIF,aAAJ,GAAmCA,aAAnC,CAAmD,IAAAA,cAAnD,CACuBE,KAAAA,EAAvB,GAAID,cAAJ,GAAoCA,cAApC,CAAqD,IAAAA,eAArD,CAEA,KAAIQ,KAAO,IAAAA,KAEX,KAAAC,GAAAC,IAAA,CAAY,CAAZ,CAAgBH,KAAD,CAAU,EAAV,CAAe,CAA9B,CAAiC,CAAjC,CACA,KAAAI,UAAAD,IAAA,CAAmB,CAAnB,CAAsB,CAAtB,CAA0BH,KAAD,CAAU,CAAV,CAAc,EAAvC,CACA,KAAAK,SAAAF,IAAA,CAAkBF,IAAlB,CAAyBT,aAAzB,CAAyC,CAAzC,CAA4CS,IAA5C,CAAmDR,cAAnD,CAAoE,CAApE,CAAuE,CAAvE,CAEA,KAAAD,cAAA,CAAqBA,aACrB,KAAAC,eAAA;AAAsBA,cAEtB,OAAO,KAAAK,OAAA,EAbX,CAnE+B,CA2F/BA,OAAQA,QAAS,EACjB,CACI,IAAIQ,EAAI,IAAAd,cAAR,CACIe,EAAI,IAAAd,eADR,CAIIQ,KAAO,IAAAA,KAEX,IAAU,CAAV,GAAIK,CAAJ,EAAqB,CAArB,GAAeC,CAAf,CAGI,MAAO,KAGX,KAAAC,WAAAC,MAAA,CACIR,IADJ,CACW,CAACK,CADZ,CACgB,CADhB,CACmBL,IADnB,CAC0BK,CAD1B,CAC8B,CAD9B,CAEIL,IAFJ,CAEW,CAACM,CAFZ,CAEgB,CAFhB,CAEmBN,IAFnB,CAE0BM,CAF1B,CAE8B,CAF9B,CAVWG,IAAAC,IAAAd,CAAS,IAAAA,KAATA,CAUX,CATUa,IAAAC,IAAAC,CAAS,IAAAA,IAATA,CASV,CAQA1B,QAAA2B,KAAA,CAAa,IAAAR,SAAb,CAAAS,IAAA,CAAgC,IAAAV,UAAhC,CAEA,KAAAW,KAAAC,OAAA,CAAiB,IAAAX,SAAjB,CAAgCnB,OAAhC,CAAyC,IAAAgB,GAAzC,CAGA,KAAAe,SAAAJ,KAAA,CAAmB,IAAAL,WAAnB,CAAAU,SAAA,CAA6C,IAAAH,KAA7C,CAGA,KAAAI,kBAAAN,KAAA,CAA4B,IAAAI,SAA5B,CAAAG,OAAA,EAEA,KAAAC,qBAAA,CAA4B,CAAA,CAE5B,KAAAC,eAAA,EAEA,OAAO,KAnCX,CA5F+B;AAyI/BrB,KAAM,CAEFsB,IAAKA,QAAS,EACd,CACI,MAAO,KAAA3B,MADX,CAHE,CAOFO,IAAKA,QAAS,CAACqB,KAAD,CACd,CACI,IAAA5B,MAAA,CAAa4B,KACb,KAAA1B,OAAA,EAFJ,CARE,CAzIyB,CAAV,CAyJzBhB,OAAAC,QAAA,CAAiBK,OArL8G;",
"sources":["node_modules/Phaser/plugins/camera3d/src/OrthographicCamera.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$plugins$camera3d$src$OrthographicCamera\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Camera = require('./Camera');\r\nvar Class = require('../../../src/utils/Class');\r\nvar Vector3 = require('../../../src/math/Vector3');\r\n\r\n//  Local cache vars\r\nvar tmpVec3 = new Vector3();\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class OrthographicCamera\r\n * @extends Phaser.Cameras.Sprite3D.Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {integer} [viewportWidth=0] - [description]\r\n * @param {integer} [viewportHeight=0] - [description]\r\n */\r\nvar OrthographicCamera = new Class({\r\n\r\n    Extends: Camera,\r\n\r\n    initialize:\r\n\r\n    function OrthographicCamera (scene, viewportWidth, viewportHeight)\r\n    {\r\n        if (viewportWidth === undefined) { viewportWidth = 0; }\r\n        if (viewportHeight === undefined) { viewportHeight = 0; }\r\n\r\n        Camera.call(this, scene);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.OrthographicCamera#viewportWidth\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportWidth = viewportWidth;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.OrthographicCamera#viewportHeight\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportHeight = viewportHeight;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.OrthographicCamera#_zoom\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._zoom = 1.0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.OrthographicCamera#near\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.near = 0;\r\n\r\n        this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.OrthographicCamera#setToOrtho\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} yDown - [description]\r\n     * @param {number} [viewportWidth] - [description]\r\n     * @param {number} [viewportHeight] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n     */\r\n    setToOrtho: function (yDown, viewportWidth, viewportHeight)\r\n    {\r\n        if (viewportWidth === undefined) { viewportWidth = this.viewportWidth; }\r\n        if (viewportHeight === undefined) { viewportHeight = this.viewportHeight; }\r\n\r\n        var zoom = this.zoom;\r\n\r\n        this.up.set(0, (yDown) ? -1 : 1, 0);\r\n        this.direction.set(0, 0, (yDown) ? 1 : -1);\r\n        this.position.set(zoom * viewportWidth / 2, zoom * viewportHeight / 2, 0);\r\n\r\n        this.viewportWidth = viewportWidth;\r\n        this.viewportHeight = viewportHeight;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.OrthographicCamera#update\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n     */\r\n    update: function ()\r\n    {\r\n        var w = this.viewportWidth;\r\n        var h = this.viewportHeight;\r\n        var near = Math.abs(this.near);\r\n        var far = Math.abs(this.far);\r\n        var zoom = this.zoom;\r\n\r\n        if (w === 0 || h === 0)\r\n        {\r\n            //  What to do here... hmm?\r\n            return this;\r\n        }\r\n\r\n        this.projection.ortho(\r\n            zoom * -w / 2, zoom * w / 2,\r\n            zoom * -h / 2, zoom * h / 2,\r\n            near,\r\n            far\r\n        );\r\n\r\n        //  Build the view matrix\r\n        tmpVec3.copy(this.position).add(this.direction);\r\n\r\n        this.view.lookAt(this.position, tmpVec3, this.up);\r\n\r\n        //  Projection * view matrix\r\n        this.combined.copy(this.projection).multiply(this.view);\r\n\r\n        //  Invert combined matrix, used for unproject\r\n        this.invProjectionView.copy(this.combined).invert();\r\n\r\n        this.billboardMatrixDirty = true;\r\n\r\n        this.updateChildren();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.OrthographicCamera#zoom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    zoom: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._zoom;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._zoom = value;\r\n            this.update();\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = OrthographicCamera;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Camera","Class","tmpVec3","Vector3","OrthographicCamera","Extends","initialize","scene","viewportWidth","viewportHeight","undefined","call","_zoom","near","update","setToOrtho","yDown","zoom","up","set","direction","position","w","h","projection","ortho","Math","abs","far","copy","add","view","lookAt","combined","multiply","invProjectionView","invert","billboardMatrixDirty","updateChildren","get","value"]
}
