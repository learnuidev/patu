{
"version":3,
"file":"module$node_modules$Phaser$src$loader$filetypes$TilemapCSVFile.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,+DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOvHC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,MAAQJ,OAAA,CAAQ,6CAAR,CAAZ,CACIK,KAAOL,OAAA,CAAQ,4CAAR,CACPM,QAAAA,CAAmBN,OAAA,CAAQ,wDAAR,CACvB,KAAIO,aAAeP,OAAA,CAAQ,0DAAR,CAAnB,CACIQ,cAAgBR,OAAA,CAAQ,2DAAR,CADpB;AAEIS,gBAAkBT,OAAA,CAAQ,iDAAR,CAFtB,CAgCIU,eAAiB,IAAIP,MAAJ,CAAU,CAE3BQ,QAASN,IAFkB,CAI3BO,WAEAF,QAAwB,CAACG,MAAD,CAASC,GAAT,CAAcC,GAAd,CAAmBC,WAAnB,CACxB,CACI,IAAIC,UAAY,KAEhB,IAAIT,aAAA,CAAcM,GAAd,CAAJ,CACA,CACI,IAAII,OAASJ,GAEbA,IAAA,CAAMP,YAAA,CAAaW,MAAb,CAAqB,KAArB,CACNH,IAAA,CAAMR,YAAA,CAAaW,MAAb,CAAqB,KAArB,CACNF,YAAA,CAAcT,YAAA,CAAaW,MAAb,CAAqB,aAArB,CACdD,UAAA,CAAYV,YAAA,CAAaW,MAAb,CAAqB,WAArB,CAAkCD,SAAlC,CANhB,CAmBAZ,IAAAc,KAAA,CAAU,IAAV,CAAgBN,MAAhB,CAViBO,CACbC,KAAM,YADOD,CAEbE,MAAOT,MAAAU,aAAAC,QAFMJ,CAGbH,UAAWA,SAHEG,CAIbK,aAAc,MAJDL,CAKbN,IAAKA,GALQM;AAMbL,IAAKA,GANQK,CAObJ,YAAaA,WAPAI,CAUjB,CAEA,KAAAM,cAAA,CAAqBjB,eAAAkB,IAzBzB,CAP2B,CA0C3BC,UAAWA,QAAS,EACpB,CACI,IAAAC,MAAA,CAAazB,KAAA0B,gBAEb,KAAAC,KAAA,CAAY,IAAAC,UAAAC,aAEZ,KAAAC,kBAAA,EALJ,CA3C2B,CAyD3BC,WAAYA,QAAS,EACrB,CACI,IAAIC,SAAW,CAAEC,OAAQ,IAAAX,cAAV,CAA8BK,KAAM,IAAAA,KAApC,CAEf,KAAAT,MAAAgB,IAAA,CAAe,IAAAxB,IAAf,CAAyBsB,QAAzB,CAEA,KAAAG,eAAA,CAAoBH,QAApB,CALJ,CA1D2B,CAAV,CAyIrB9B,QAAAkC,SAAA,CAA0B,YAA1B,CAAwC,QAAS,CAAC1B,GAAD,CAAMC,GAAN,CAAWC,WAAX,CACjD,CACI,GAAIyB,KAAAC,QAAA,CAAc5B,GAAd,CAAJ,CAEI,IAAS6B,GAAT,CAAa,CAAb,CAAgBA,GAAhB,CAAoB7B,GAAA8B,OAApB,CAAgCD,GAAA,EAAhC,CAGI,IAAAE,QAAA,CAAa,IAAInC,cAAJ,CAAmB,IAAnB,CAAyBI,GAAA,CAAI6B,GAAJ,CAAzB,CAAb,CALR,KAUI,KAAAE,QAAA,CAAa,IAAInC,cAAJ,CAAmB,IAAnB;AAAyBI,GAAzB,CAA8BC,GAA9B,CAAmCC,WAAnC,CAAb,CAGJ,OAAO,KAdX,CADA,CAkBAf,OAAAC,QAAA,CAAiBQ,cAtM0G;",
"sources":["node_modules/Phaser/src/loader/filetypes/TilemapCSVFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$filetypes$TilemapCSVFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\nvar TILEMAP_FORMATS = require('../../tilemaps/Formats');\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.TilemapCSVFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within both the Loader and the Tilemap Cache.\r\n * @property {string} [url] - The absolute or relative URL to load the file from.\r\n * @property {string} [extension='csv'] - The default file extension to use if no url is provided.\r\n * @property {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A single Tilemap CSV File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#tilemapCSV method and are not typically created directly.\r\n *\r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#tilemapCSV.\r\n *\r\n * @class TilemapCSVFile\r\n * @extends Phaser.Loader.File\r\n * @memberOf Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.TilemapCSVFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.csv`, i.e. if `key` was \"alien\" then the URL will be \"alien.csv\".\r\n * @param {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar TilemapCSVFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function TilemapCSVFile (loader, key, url, xhrSettings)\r\n    {\r\n        var extension = 'csv';\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            url = GetFastValue(config, 'url');\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            extension = GetFastValue(config, 'extension', extension);\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'tilemapCSV',\r\n            cache: loader.cacheManager.tilemap,\r\n            extension: extension,\r\n            responseType: 'text',\r\n            key: key,\r\n            url: url,\r\n            xhrSettings: xhrSettings\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n\r\n        this.tilemapFormat = TILEMAP_FORMATS.CSV;\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.TilemapCSVFile#onProcess\r\n     * @since 3.7.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        this.data = this.xhrLoader.responseText;\r\n\r\n        this.onProcessComplete();\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.TilemapCSVFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        var tiledata = { format: this.tilemapFormat, data: this.data };\r\n\r\n        this.cache.add(this.key, tiledata);\r\n\r\n        this.pendingDestroy(tiledata);\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds a CSV Tilemap file, or array of CSV files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n *\r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.tilemapCSV('level1', 'maps/Level1.csv');\r\n * }\r\n * ```\r\n *\r\n * Tilemap CSV data can be created in a text editor, or a 3rd party app that exports as CSV.\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Tilemap Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Tilemap Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Text Cache first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n *\r\n * ```javascript\r\n * this.load.tilemapCSV({\r\n *     key: 'level1',\r\n *     url: 'maps/Level1.csv'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.TilemapCSVFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can access it from its Cache using its key:\r\n *\r\n * ```javascript\r\n * this.load.tilemapCSV('level1', 'maps/Level1.csv');\r\n * // and later in your game ...\r\n * var map = this.make.tilemap({ key: 'level1' });\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `LEVEL1.` and the key was `Story` the final key will be `LEVEL1.Story` and\r\n * this is what you would use to retrieve the text from the Tilemap Cache.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"level\"\r\n * and no URL is given then the Loader will set the URL to be \"level.csv\". It will always add `.csv` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Tilemap CSV File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#tilemapCSV\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.TilemapCSVFileConfig|Phaser.Loader.FileTypes.TilemapCSVFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.csv`, i.e. if `key` was \"alien\" then the URL will be \"alien.csv\".\r\n * @param {XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('tilemapCSV', function (key, url, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new TilemapCSVFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new TilemapCSVFile(this, key, url, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = TilemapCSVFile;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","CONST","File","FileTypesManager","GetFastValue","IsPlainObject","TILEMAP_FORMATS","TilemapCSVFile","Extends","initialize","loader","key","url","xhrSettings","extension","config","call","fileConfig","type","cache","cacheManager","tilemap","responseType","tilemapFormat","CSV","onProcess","state","FILE_PROCESSING","data","xhrLoader","responseText","onProcessComplete","addToCache","tiledata","format","add","pendingDestroy","register","Array","isArray","i","length","addFile"]
}
