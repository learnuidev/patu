{
"version":3,
"file":"module$node_modules$Phaser$src$geom$intersects$RectangleToTriangle.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,mEAAA,CAAuF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO/H,IAAIC,WAAaH,OAAA,CAAQ,2DAAR,CAAjB,CACII,SAAWJ,OAAA,CAAQ,wDAAR,CADf,CAEIK,cAAgBL,OAAA,CAAQ,4DAAR,CAFpB,CAGIM,UAAYN,OAAA,CAAQ,yDAAR,CA6EhBC,OAAAC,QAAA,CAhE0BK,QAAS,CAACC,IAAD,CAAOC,QAAP,CACnC,CAGI,GACIA,QAAAC,KADJ,CACoBF,IAAAG,MADpB;AAEIF,QAAAE,MAFJ,CAEqBH,IAAAE,KAFrB,EAGID,QAAAG,IAHJ,CAGmBJ,IAAAK,OAHnB,EAIIJ,QAAAI,OAJJ,CAIsBL,IAAAI,IAJtB,CAMI,MAAO,CAAA,CAGX,KAAIE,KAAOL,QAAAM,SAAA,EAAX,CACIC,KAAOP,QAAAQ,SAAA,EADX,CAEIC,KAAOT,QAAAU,SAAA,EAcX,IAVIf,QAAA,CAASI,IAAT,CAAeM,IAAAM,GAAf,CAAwBN,IAAAO,GAAxB,CAUJ,EAVwCjB,QAAA,CAASI,IAAT,CAAeM,IAAAQ,GAAf,CAAwBR,IAAAS,GAAxB,CAUxC,EALInB,QAAA,CAASI,IAAT,CAAeQ,IAAAI,GAAf,CAAwBJ,IAAAK,GAAxB,CAKJ,EALwCjB,QAAA,CAASI,IAAT,CAAeQ,IAAAM,GAAf,CAAwBN,IAAAO,GAAxB,CAKxC,EAAInB,QAAA,CAASI,IAAT,CAAeU,IAAAE,GAAf,CAAwBF,IAAAG,GAAxB,CAAJ,EAAwCjB,QAAA,CAASI,IAAT,CAAeU,IAAAI,GAAf,CAAwBJ,IAAAK,GAAxB,CAAxC,CAEI,MAAO,CAAA,CAKX,KAAIC,MAAQhB,IAAAO,SAAA,EAAZ,CACIU,MAAQjB,IAAAS,SAAA,EADZ,CAEIS,MAAQlB,IAAAW,SAAA,EAFZ,CAGIQ,MAAQnB,IAAAoB,SAAA,EAYZ,IAVIzB,UAAA,CAAWW,IAAX,CAAiBU,KAAjB,CAUJ,EAV+BrB,UAAA,CAAWW,IAAX;AAAiBW,KAAjB,CAU/B,EAV0DtB,UAAA,CAAWW,IAAX,CAAiBY,KAAjB,CAU1D,EAVqFvB,UAAA,CAAWW,IAAX,CAAiBa,KAAjB,CAUrF,EALIxB,UAAA,CAAWa,IAAX,CAAiBQ,KAAjB,CAKJ,EAL+BrB,UAAA,CAAWa,IAAX,CAAiBS,KAAjB,CAK/B,EAL0DtB,UAAA,CAAWa,IAAX,CAAiBU,KAAjB,CAK1D,EALqFvB,UAAA,CAAWa,IAAX,CAAiBW,KAAjB,CAKrF,EAAIxB,UAAA,CAAWe,IAAX,CAAiBM,KAAjB,CAAJ,EAA+BrB,UAAA,CAAWe,IAAX,CAAiBO,KAAjB,CAA/B,EAA0DtB,UAAA,CAAWe,IAAX,CAAiBQ,KAAjB,CAA1D,EAAqFvB,UAAA,CAAWe,IAAX,CAAiBS,KAAjB,CAArF,CAEI,MAAO,CAAA,CAKPE,KAAAA,CAASvB,SAAA,CAAUE,IAAV,CAGb,OAAwB,EAAxB,CAFaH,aAAAyB,CAAcrB,QAAdqB,CAAwBD,IAAxBC,CAAgC,CAAA,CAAhCA,CAELC,OA5DZ,CAxB+H;",
"sources":["node_modules/Phaser/src/geom/intersects/RectangleToTriangle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$intersects$RectangleToTriangle\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar LineToLine = require('./LineToLine');\r\nvar Contains = require('../rectangle/Contains');\r\nvar ContainsArray = require('../triangle/ContainsArray');\r\nvar Decompose = require('../rectangle/Decompose');\r\n\r\n/**\r\n * Checks for intersection between Rectangle shape and Triangle shape.\r\n *\r\n * @function Phaser.Geom.Intersects.RectangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - Rectangle object to test.\r\n * @param {Phaser.Geom.Triangle} triangle - Triangle object to test.\r\n *\r\n * @return {boolean} A value of `true` if objects intersect; otherwise `false`.\r\n */\r\nvar RectangleToTriangle = function (rect, triangle)\r\n{\r\n    //  First the cheapest ones:\r\n\r\n    if (\r\n        triangle.left > rect.right ||\r\n        triangle.right < rect.left ||\r\n        triangle.top > rect.bottom ||\r\n        triangle.bottom < rect.top)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    var triA = triangle.getLineA();\r\n    var triB = triangle.getLineB();\r\n    var triC = triangle.getLineC();\r\n\r\n    //  Are any of the triangle points within the rectangle?\r\n\r\n    if (Contains(rect, triA.x1, triA.y1) || Contains(rect, triA.x2, triA.y2))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (Contains(rect, triB.x1, triB.y1) || Contains(rect, triB.x2, triB.y2))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (Contains(rect, triC.x1, triC.y1) || Contains(rect, triC.x2, triC.y2))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    //  Cheap tests over, now to see if any of the lines intersect ...\r\n\r\n    var rectA = rect.getLineA();\r\n    var rectB = rect.getLineB();\r\n    var rectC = rect.getLineC();\r\n    var rectD = rect.getLineD();\r\n\r\n    if (LineToLine(triA, rectA) || LineToLine(triA, rectB) || LineToLine(triA, rectC) || LineToLine(triA, rectD))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (LineToLine(triB, rectA) || LineToLine(triB, rectB) || LineToLine(triB, rectC) || LineToLine(triB, rectD))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (LineToLine(triC, rectA) || LineToLine(triC, rectB) || LineToLine(triC, rectC) || LineToLine(triC, rectD))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    //  None of the lines intersect, so are any rectangle points within the triangle?\r\n\r\n    var points = Decompose(rect);\r\n    var within = ContainsArray(triangle, points, true);\r\n\r\n    return (within.length > 0);\r\n};\r\n\r\nmodule.exports = RectangleToTriangle;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","LineToLine","Contains","ContainsArray","Decompose","RectangleToTriangle","rect","triangle","left","right","top","bottom","triA","getLineA","triB","getLineB","triC","getLineC","x1","y1","x2","y2","rectA","rectB","rectC","rectD","getLineD","points","within","length"]
}
