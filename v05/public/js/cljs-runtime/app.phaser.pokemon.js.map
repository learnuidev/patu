{"version":3,"sources":["app/phaser/pokemon.cljs"],"mappings":"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","names":["js/app","js/app.phaser","js/app.phaser.pokemon","js/app.phaser.pokemon.app-db","app.phaser.pokemon/app-db","cljs.core.atom","js/app.phaser.pokemon.controls","app.phaser.pokemon/controls","js/app.phaser.pokemon.scene","app.phaser.pokemon/scene","app.phaser.pokemon/preload!","this","app.phaser.pokemon/arrows-config","app.phaser.pokemon/create!","map","cljs.core/clj->js","tileset","below-layer","world-layer","above-layer","_","spawn-point","obj","cljs.core._EQ_","new-player","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/deref","anims","camera","cursors","title","config","js/Phaser.Cameras.Controls.FixedKeyControl","app.phaser.pokemon/update!","_time","delta","map__26772","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","player","speed","prev-velocity","app.phaser.pokemon/config","js/Phaser","app.phaser.pokemon/create-game","js/Phaser.Game","app.phaser.pokemon/app"],"sourcesContent":["(ns app.phaser.pokemon\n  (:require [cljs.reader :as reader]\n            [reagent.core :as r]\n            [\"Phaser\" :as phaser]))\n\n;; - Step 0 - Create game state\n(defonce app-db (atom {:cursors nil\n                       :player nil\n                       :show-debug? false}))\n\n(comment\n ;;  const prevVelocity = player.body.velocity.clone();\n  (-> (:player (deref app-db)) .-body .-velocity .clone)\n  (:player (deref app-db)))\n\n;;\n;; ==================\n(declare preload)\n(declare create)\n\n;; Utils ===\n(defonce controls #js {})\n\n;; step 1 - create a new game scene\n(defonce scene #js {})\n\n;; step 3 - load assets\n(defn preload! []\n  (this-as this\n           (.image (.-load this) \"tiles\" \"https://www.mikewesthad.com/phaser-3-tilemap-blog-posts/post-1/assets/tilesets/tuxmon-sample-32px-extruded.png\")\n           (.tilemapTiledJSON (.-load this) \"map\", \"https://www.mikewesthad.com/phaser-3-tilemap-blog-posts/post-1/assets/tilemaps/tuxemon-town.json\")\n           (.atlas (.-load this) \"atlas\" \"https://www.mikewesthad.com/phaser-3-tilemap-blog-posts/post-1/assets/atlas/atlas.png\" \"https://www.mikewesthad.com/phaser-3-tilemap-blog-posts/post-1/assets/atlas/atlas.json\")))\n\n(set! scene -preload preload!)\n\n;; step 4 - called once the preload ends\n(def arrows-config\n  {:font \"18px monospace\"\n   :fill \"#ffffff\"\n   :padding {:x 20, :y 10}\n   :backgroundColor \"#000000\"})\n\n(defn create! []\n  (this-as this\n           (let [map (.tilemap (.-make this) (clj->js {:key \"map\"}))\n                 tileset (.addTilesetImage map \"tuxmon-sample-32px-extruded\", \"tiles\")\n                 below-layer (.createStaticLayer map \"Below Player\", tileset, 0, 0)\n                 world-layer (.createStaticLayer map \"World\", tileset, 0, 0)\n                 above-layer (.createStaticLayer map \"Above Player\", tileset, 0, 0)\n                 _ (.setCollisionByProperty world-layer (clj->js {:collides true}))\n                 ; _ (.setDepth above-layer 10)\n                 spawn-point (.findObject map \"Objects\" (fn [obj]\n                                                          (= (.-name obj) \"Spawn Point\")))\n                 new-player (-> (.-add (.-physics this))\n                                (.sprite (.-x spawn-point) (.-y spawn-point) \"atlas\" \"misa-front\")\n                                (.setSize 30 40)\n                                (.setOffset 0 24))\n                 _ (swap! app-db assoc :player new-player)\n                 _ (.collider (.-add (.-physics this)) (:player @app-db) world-layer)\n\n                 ;; Create the player's walking animations from the texture atlas.\n                 ;; These are stored in the global\n                 anims (.-anims this)\n                 _ (.create anims (clj->js {:key \"misa-left-walk\"\n                                            :frameRate 10\n                                            :releat -1\n                                            :frames (.generateFrameNames\n                                                     anims\n                                                     \"atlas\"\n                                                     (clj->js {:prefix \"misa-left-walk.\"\n                                                               :start 0\n                                                               :end 3\n                                                               :zeroPad 3}))}))\n                 _ (.create anims (clj->js {:key \"misa-right-walk\"\n                                            :frameRate 10\n                                            :releat -1\n                                            :frames (.generateFrameNames\n                                                     anims\n                                                     \"atlas\"\n                                                     (clj->js {:prefix \"misa-right-walk.\"\n                                                               :start 0\n                                                               :end 3\n                                                               :zeroPad 3}))}))\n                 _ (.create anims (clj->js {:key \"misa-front-walk\"\n                                            :frameRate 10\n                                            :releat -1\n                                            :frames (.generateFrameNames\n                                                     anims\n                                                     \"atlas\"\n                                                     (clj->js {:prefix \"misa-front-walk.\"\n                                                               :start 0\n                                                               :end 3\n                                                               :zeroPad 3}))}))\n                 _ (.create anims (clj->js {:key \"misa-back-walk\"\n                                            :frameRate 10\n                                            :releat -1\n                                            :frames (.generateFrameNames\n                                                     anims\n                                                     \"atlas\"\n                                                     (clj->js {:prefix \"misa-back-walk.\"\n                                                               :start 0\n                                                               :end 3\n                                                               :zeroPad 3}))}))\n                 camera (.-main (.-cameras this))\n                 _ (.startFollow camera (:player @app-db))\n                 cursors (.createCursorKeys (.-keyboard (.-input this)))\n                 _ (swap! app-db assoc :cursors cursors)\n                 title \"Arrow keys to move\\nPress 'D' to show hitboxes\"\n                 _ (->  (.-add this)\n                        (.text  16 16 title (clj->js {:font \"18px monospace\"\n                                                      :fill \"#000000\"\n                                                      :padding {:x 20 :y 10}\n                                                      :backgroundColor \"#ffffff\"}))\n                        (.setScrollFactor 0)\n                        (.setDepth 0))\n                 config {:camera camera\n                         :left  (.-left cursors)\n                         :right (.-right cursors)\n                         :up    (.-up cursors)\n                         :down  (.-down cursors)\n                         :speed 0.5}]\n                 ; controls (new js/Phaser.Cameras.Controls.FixedKeyControl (clj->js config))\n             (set! controls -controls (new js/Phaser.Cameras.Controls.FixedKeyControl (clj->js config)))\n             (.setBounds camera 0, 0, (.-widthInPixels map) (.-heightInPixels map))\n             (.setScrollFactor (.text (.-add this) 16 16 \"Arrows keys to scroll\" (clj->js arrows-config))\n                               0))))\n\n(set! scene -create create!)\n\n;;\n(comment\n ;;  const prevVelocity = player.body.velocity.clone();\n  (-> (:player (deref app-db)) .-body .-velocity .clone)\n  (:player (deref app-db)))\n\n;; Update\n(defn update! [_time delta]\n  ; (js/console.log \"DELTA: \" delta)\n  (let [{:keys [player cursors]} (deref app-db)\n        speed 175\n        prev-velocity  (-> player .-body .-velocity .clone)\n        _ (.setVelocity (.-body player) 0)\n        _ (if (-> cursors .-left .-isDown)\n            (.setVelocityX (.-body player) (- speed))\n            (when (-> cursors .-right .-isDown)\n              (.setVelocityX (.-body player) speed)))\n        _ (if (-> cursors .-up .-isDown)\n            (.setVelocityY (.-body player) (- speed))\n            (when (-> cursors .-down .-isDown)\n              (.setVelocityY (.-body player) speed)))\n        _ (.scale (.normalize (.-velocity (.-body player))) speed)\n        _ (if (-> cursors .-left .-isDown)\n            (.play (.-anims player) \"misa-left-walk\" true)\n            (if (-> cursors .-right .-isDown)\n              (.play (.-anims player) \"misa-right-walk\" true)\n              (if (-> cursors .-up .-isDown)\n                (.play (.-anims player) \"misa-back-walk\" true)\n                (when (-> cursors .-down .-isDown)\n                  (.play (.-anims player) \"misa-front-walk\" true)))))]\n\n    (.update (.-controls controls) delta)))\n\n(set! scene -update update!)\n\n;; step 2 - set the configuration of the game\n(def config\n  {:type (.-AUTO js/Phaser)\n   :width 800\n   :height 600\n   :parent \"game-container\"\n   :pixelArt true\n   :physics\n   {:default \"arcade\"\n    :arcade {:gravity {:y 0}}}\n   :scene scene})\n\n;; Step 5 - create a game\n(defn create-game []\n  (new js/Phaser.Game (clj->js config)))\n\n(defn app []\n  (create-game))\n"]}