{
"version":3,
"file":"module$node_modules$Phaser$src$geom$circle$GetPoints.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,qDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOjH,IAAIC,cAAgBH,OAAA,CAAQ,0DAAR,CAApB,CACII,mBAAqBJ,OAAA,CAAQ,+DAAR,CADzB,CAEIK,YAAcL,OAAA,CAAQ,iDAAR,CAFlB,CAGIM,WAAaN,OAAA,CAAQ,2CAAR,CAoCjBC,OAAAC,QAAA,CApBgBK,QAAS,CAACC,MAAD,CAASC,QAAT,CAAmBC,QAAnB,CAA6BC,GAA7B,CACzB,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,EAA/B,CAGKF,SAAL;CAEIA,QAFJ,CAEeN,aAAA,CAAcK,MAAd,CAFf,CAEuCE,QAFvC,CAKA,KAASG,QAAT,CAAa,CAAb,CAAgBA,QAAhB,CAAoBJ,QAApB,CAA8BI,QAAA,EAA9B,CACA,CACI,IAAIC,MAAQT,WAAA,CAAYQ,QAAZ,CAAgBJ,QAAhB,CAA0B,CAA1B,CAA6BH,UAAAS,IAA7B,CAEZJ,IAAAK,KAAA,CAASZ,kBAAA,CAAmBI,MAAnB,CAA2BM,KAA3B,CAAT,CAHJ,CAMA,MAAOH,IAhBX,CA3BiH;",
"sources":["node_modules/Phaser/src/geom/circle/GetPoints.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$circle$GetPoints\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar Circumference = require('./Circumference');\r\nvar CircumferencePoint = require('./CircumferencePoint');\r\nvar FromPercent = require('../../math/FromPercent');\r\nvar MATH_CONST = require('../../math/const');\r\n\r\n/**\r\n * Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\r\n * based on the given quantity or stepRate values.\r\n *\r\n * @function Phaser.Geom.Circle.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The Circle to get the points from.\r\n * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n * @param {number} [stepRate] - Sets the quantity by getting the circumference of the circle and dividing it by the stepRate.\r\n * @param {array} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n *\r\n * @return {Phaser.Geom.Point[]} An array of Point objects pertaining to the points around the circumference of the circle.\r\n */\r\nvar GetPoints = function (circle, quantity, stepRate, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity)\r\n    {\r\n        quantity = Circumference(circle) / stepRate;\r\n    }\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        var angle = FromPercent(i / quantity, 0, MATH_CONST.PI2);\r\n\r\n        out.push(CircumferencePoint(circle, angle));\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoints;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Circumference","CircumferencePoint","FromPercent","MATH_CONST","GetPoints","circle","quantity","stepRate","out","undefined","i","angle","PI2","push"]
}
