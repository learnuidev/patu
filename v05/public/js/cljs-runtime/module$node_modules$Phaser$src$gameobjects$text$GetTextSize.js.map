{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$text$GetTextSize.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,4DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA4ExHD,MAAAC,QAAA,CAzDkBC,QAAS,CAACC,IAAD,CAAOC,IAAP,CAAaC,KAAb,CAC3B,CACI,IAAIC,OAASH,IAAAG,OAAb,CACIC,QAAUJ,IAAAI,QADd,CAEIC,MAAQL,IAAAK,MAFZ,CAIIC,WAAa,EAJjB,CAKIC,aAAe,CALnB,CAMIC,WAAaN,KAAAO,OAEI,EAArB,CAAIJ,KAAAK,SAAJ,EAA0BL,KAAAK,SAA1B,CAA2CR,KAAAO,OAA3C,GAEID,UAFJ,CAEiBH,KAAAK,SAFjB,CAKAL,MAAAM,SAAA,CAAeR,MAAf,CAAuBC,OAAvB,CAIA,KAASQ,MAAT,CAAa,CAAb,CAAgBA,MAAhB,CAAoBJ,UAApB,CAAgCI,MAAA,EAAhC,CACA,CACI,IAAIC,UAAYR,KAAAS,gBAEhBD,UAAA,EAAaT,OAAAW,YAAA,CAAoBb,KAAA,CAAMU,MAAN,CAApB,CAAAI,MAGTX;KAAAY,SAAJ,GAEIJ,SAFJ,EAEiBT,OAAAW,YAAA,CAAoB,GAApB,CAAAC,MAFjB,CAKAV,WAAA,CAAWM,MAAX,CAAA,CAAgBM,IAAAC,KAAA,CAAUN,SAAV,CAChBN,aAAA,CAAeW,IAAAE,IAAA,CAASb,YAAT,CAAuBD,UAAA,CAAWM,MAAX,CAAvB,CAZnB,CAiBIS,IAAAA,CAAapB,IAAAqB,SAAbD,CAA6BhB,KAAAS,gBAC7BS,QAAAA,CAASF,IAATE,CAAsBf,UACtBgB,KAAAA,CAAcxB,IAAAwB,YAGC,EAAnB,CAAItB,KAAAO,OAAJ,GAEIc,OAFJ,EAEcC,IAFd,EAE6BtB,KAAAO,OAF7B,CAE4C,CAF5C,EAKA,OAAO,CACHO,MAAOT,YADJ,CAEHgB,OAAQA,OAFL,CAGHrB,MAAOM,UAHJ,CAIHF,WAAYA,UAJT,CAKHkB,YAAaA,IALV,CAMHH,WAAYA,IANT,CA9CX,CApBwH;",
"sources":["node_modules/Phaser/src/gameobjects/text/GetTextSize.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$text$GetTextSize\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Returns an object containing dimensions of the Text object.\r\n *\r\n * @function Phaser.GameObjects.Text.GetTextSize\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Text} text - The Text object to calculate the size from.\r\n * @param {BitmapTextMetrics} size - The Text metrics to use when calculating the size.\r\n * @param {array} lines - The lines of text to calculate the size from.\r\n *\r\n * @return {object} An object containing dimensions of the Text object.\r\n */\r\nvar GetTextSize = function (text, size, lines)\r\n{\r\n    var canvas = text.canvas;\r\n    var context = text.context;\r\n    var style = text.style;\r\n\r\n    var lineWidths = [];\r\n    var maxLineWidth = 0;\r\n    var drawnLines = lines.length;\r\n\r\n    if (style.maxLines > 0 && style.maxLines < lines.length)\r\n    {\r\n        drawnLines = style.maxLines;\r\n    }\r\n\r\n    style.syncFont(canvas, context);\r\n\r\n    //  Text Width\r\n\r\n    for (var i = 0; i < drawnLines; i++)\r\n    {\r\n        var lineWidth = style.strokeThickness;\r\n\r\n        lineWidth += context.measureText(lines[i]).width;\r\n\r\n        // Adjust for wrapped text\r\n        if (style.wordWrap)\r\n        {\r\n            lineWidth -= context.measureText(' ').width;\r\n        }\r\n\r\n        lineWidths[i] = Math.ceil(lineWidth);\r\n        maxLineWidth = Math.max(maxLineWidth, lineWidths[i]);\r\n    }\r\n\r\n    //  Text Height\r\n\r\n    var lineHeight = size.fontSize + style.strokeThickness;\r\n    var height = lineHeight * drawnLines;\r\n    var lineSpacing = text.lineSpacing;\r\n\r\n    //  Adjust for line spacing\r\n    if (lines.length > 1)\r\n    {\r\n        height += lineSpacing * (lines.length - 1);\r\n    }\r\n\r\n    return {\r\n        width: maxLineWidth,\r\n        height: height,\r\n        lines: drawnLines,\r\n        lineWidths: lineWidths,\r\n        lineSpacing: lineSpacing,\r\n        lineHeight: lineHeight\r\n    };\r\n};\r\n\r\nmodule.exports = GetTextSize;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetTextSize","text","size","lines","canvas","context","style","lineWidths","maxLineWidth","drawnLines","length","maxLines","syncFont","i","lineWidth","strokeThickness","measureText","width","wordWrap","Math","ceil","max","lineHeight","fontSize","height","lineSpacing"]
}
