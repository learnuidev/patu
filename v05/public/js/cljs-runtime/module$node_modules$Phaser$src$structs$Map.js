shadow$provide.module$node_modules$Phaser$src$structs$Map=function(global,require,module,exports){global=new (require("module$node_modules$Phaser$src$utils$Class"))({initialize:function(elements){this.entries={};this.size=0;if(Array.isArray(elements))for(var i=0;i<elements.length;i++)this.set(elements[i][0],elements[i][1])},set:function(key,value){this.has(key)||(this.entries[key]=value,this.size++);return this},get:function(key){if(this.has(key))return this.entries[key]},getArray:function(){var output=
[],entries=this.entries,key;for(key in entries)output.push(entries[key]);return output},has:function(key){return this.entries.hasOwnProperty(key)},delete:function(key){this.has(key)&&(delete this.entries[key],this.size--);return this},clear:function(){Object.keys(this.entries).forEach(function(prop){delete this.entries[prop]},this);this.size=0;return this},keys:function(){return Object.keys(this.entries)},values:function(){var output=[],entries=this.entries,key;for(key in entries)output.push(entries[key]);
return output},dump:function(){var entries=this.entries;console.group("Map");for(var key in entries)console.log(key,entries[key]);console.groupEnd()},each:function(callback){var entries=this.entries,key;for(key in entries)if(!1===callback(key,entries[key]))break;return this},contains:function(value){var entries=this.entries,key;for(key in entries)if(entries[key]===value)return!0;return!1},merge:function(map,override){void 0===override&&(override=!1);var local=this.entries;map=map.entries;for(var key in map)local.hasOwnProperty(key)&&
override?local[key]=map[key]:this.set(key,map[key]);return this}});module.exports=global}
//# sourceMappingURL=module$node_modules$Phaser$src$structs$Map.js.map
