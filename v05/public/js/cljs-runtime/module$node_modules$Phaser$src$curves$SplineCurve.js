shadow$provide.module$node_modules$Phaser$src$curves$SplineCurve=function(global,require,module,exports){var CatmullRom=require("module$node_modules$Phaser$src$math$CatmullRom");global=require("module$node_modules$Phaser$src$utils$Class");var Curve=require("module$node_modules$Phaser$src$curves$Curve"),Vector2=require("module$node_modules$Phaser$src$math$Vector2"),SplineCurve=new global({Extends:Curve,initialize:function(points){void 0===points&&(points=[]);Curve.call(this,"SplineCurve");this.points=
[];this.addPoints(points)},addPoints:function(points){for(var i=0;i<points.length;i++){var p=new Vector2;"number"===typeof points[i]?(p.x=points[i],p.y=points[i+1],i++):Array.isArray(points[i])?(p.x=points[i][0],p.y=points[i][1]):(p.x=points[i].x,p.y=points[i].y);this.points.push(p)}return this},addPoint:function(x,y){x=new Vector2(x,y);this.points.push(x);return x},getStartPoint:function(out){void 0===out&&(out=new Vector2);return out.copy(this.points[0])},getResolution:function(divisions){return divisions*
this.points.length},getPoint:function(t,out){void 0===out&&(out=new Vector2);var points=this.points,point=(points.length-1)*t;t=Math.floor(point);point-=t;var p0=points[0===t?t:t-1],p1=points[t],p2=points[t>points.length-2?points.length-1:t+1];points=points[t>points.length-3?points.length-1:t+2];return out.set(CatmullRom(point,p0.x,p1.x,p2.x,points.x),CatmullRom(point,p0.y,p1.y,p2.y,points.y))},toJSON:function(){for(var points=[],i=0;i<this.points.length;i++)points.push(this.points[i].x),points.push(this.points[i].y);
return{type:this.type,points:points}}});SplineCurve.fromJSON=function(data){return new SplineCurve(data.points)};module.exports=SplineCurve}
//# sourceMappingURL=module$node_modules$Phaser$src$curves$SplineCurve.js.map
