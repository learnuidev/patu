{
"version":3,
"file":"module$node_modules$Phaser$src$boot$ScaleManager.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,iDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOzGC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,KAAOJ,OAAA,CAAQ,6CAAR,CA8BPK,QAAAA,CAAe,IAAIF,MAAJ,CAAU,CAEzBG,WAEAD,QAAsB,CAACE,IAAD,CAAOC,MAAP,CACtB,CASI,IAAAD,KAAA,CAAYA,IAEZ,KAAAC,OAAA,CAAcA,MAgBd,KAAAC,KAAA,CAFA,IAAAC,OAEA,CATA,IAAAC,MASA,CATa,CAWb,KAAAC,WAAA,CAAkB,CAElB,KAAAC,OAAA,CAAc,IAEd,KAAAC,UAAA,CAAiB,CAsCjB,KAAAC,UAAA,CAVA,IAAAC,SAUA,CApBA,IAAAC,UAoBA,CA7BA,IAAAC,SA6BA,CA7BgB,IAoChB,KAAAC,YAAA,CAAmB,IAAIf,IAAJ,CAAS,CAAT,CAAY,CAAZ,CAQnB,KAAAgB,oBAAA;AAA2B,IAAIhB,IAAJ,CAAS,CAAT,CAAY,CAAZ,CAc3B,KAAAiB,kBAAA,CAPA,IAAAC,YAOA,CAPmB,CAkBnB,KAAAC,eAAA,CAAsB,CAAA,CAYtB,KAAAC,WAAA,CAAkB,IAOlB,KAAAC,kBAAA,CAAyB,IAAIrB,IAAJ,CAAS,CAAT,CAAY,CAAZ,CAMzB,KAAAsB,aAAA,CAFA,IAAAC,kBAEA,CAJA,IAAAC,iBAIA,CAJwB,CAMxB,KAAAC,KAAA,EA1IJ,CALyB,CAkJzBA,KAAMA,QAAS,EACf,CACI,IAAAH,aAAA,CAAoB,IAAAI,eAAA,EADxB,CAnJyB,CA0JzBC,cAAeA,QAAS,EACxB,CACI,IAAIrB,OAAS,IAAAA,OAIb,KAAAc,WAAAQ,MAAAC,QAAA,CAAgC,MAChC,KAAAT,WAAAQ,MAAAtB,OAAA,CAA+BA,MAA/B,CAAwC,IAExC,KAAAwB,OAAAF,MAAAG,OAAA,CAA2B,MAC3B,KAAAD,OAAAF,MAAArB,MAAA,CAA0B,KAC1B,KAAAuB,OAAAF,MAAAtB,OAAA,CAA2B,KAV/B,CA3JyB,CAwLzB0B,cAAeA,QAAS,EACxB,EAzLyB;AA8MzBN,eAAgBA,QAAS,EACzB,CAGI,GAAI,CAAC,IAAAvB,KAAA8B,OAAAC,GAAAC,IAAL,CAEI,MAAOC,OAAAC,YAGX,KAAIC,KAAOC,IAAAC,IAAA,CAASJ,MAAAK,YAAT,CAAX,CAIIC,MAAQC,QAAAC,cAAA,CAAuB,KAAvB,CAEZF,MAAAG,aAAA,CAAmB,OAAnB,CAA4B,kDAA5B,CAEAF,SAAAG,gBAAAC,YAAA,CAAqCL,KAArC,CAEA,KAAAM,gCAAmB,EAAV,GAACV,IAAD,CAAgBI,KAAAO,aAAhB,CAAqCb,MAAAc,WAC9CC,KAAA,CAAmB,EAAV,GAACb,IAAD,CAAgBF,MAAAc,WAAhB,CAAoCR,KAAAO,aAE7CN,SAAAG,gBAAAM,YAAA,CAAqCV,KAArC,CAIA,OAAqC,GAArC,GAAIH,IAAAC,IAAA,CAASJ,MAAAK,YAAT,CAAJ,CAEWU,IAFX;AAMWH,+BA/Bf,CA/MyB,CAwPzBK,QAASA,QAAS,EAClB,CACI,IAAAlD,KAAA,CAAY,IADhB,CAzPyB,CAAV,CA+PnBN,OAAAC,QAAA,CAAiBG,OArS4F;",
"sources":["node_modules/Phaser/src/boot/ScaleManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$boot$ScaleManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Vec2 = require('../math/Vector2');\r\n\r\n/*\r\n    Use `scaleMode` SHOW_ALL.\r\n    Use `scaleMode` EXACT_FIT.\r\n    Use `scaleMode` USER_SCALE. Examine `parentBounds` in the {@link #setResizeCallback resize callback} and call {@link #setUserScale} if necessary.\r\n    Use `scaleMode` RESIZE. Examine the game or canvas size from the {@link #onSizeChange} signal **or** the {@link Phaser.State#resize} callback and reposition game objects if necessary.\r\n\r\n    Canvas width / height in the element\r\n    Canvas CSS width / height in the style\r\n\r\n    Detect orientation\r\n    Lock orientation (Android only?)\r\n    Full-screen support\r\n\r\n    Scale Mode - \r\n*/\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class ScaleManager\r\n * @memberOf Phaser.Boot\r\n * @constructor\r\n * @since 3.12.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance.\r\n * @param {any} config\r\n */\r\nvar ScaleManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function ScaleManager (game, config)\r\n    {\r\n        /**\r\n         * A reference to the Phaser.Game instance.\r\n         *\r\n         * @name Phaser.Boot.ScaleManager#game\r\n         * @type {Phaser.Game}\r\n         * @readOnly\r\n         * @since 3.12.0\r\n         */\r\n        this.game = game;\r\n\r\n        this.config = config;\r\n\r\n        /**\r\n         * Target width (in pixels) of the Display canvas.\r\n         * @property {number} width\r\n         * @readonly\r\n         */\r\n        this.width = 0;\r\n\r\n        /**\r\n         * Target height (in pixels) of the Display canvas.\r\n         * @property {number} height\r\n         * @readonly\r\n         */\r\n        this.height = 0;\r\n\r\n        this.zoom = 0;\r\n\r\n        this.resolution = 1;\r\n\r\n        this.parent = null;\r\n\r\n        this.scaleMode = 0;\r\n\r\n        /**\r\n         * Minimum width the canvas should be scaled to (in pixels).\r\n         * Change with {@link #setMinMax}.\r\n         * @property {?number} minWidth\r\n         * @readonly\r\n         * @protected\r\n         */\r\n        this.minWidth = null;\r\n\r\n        /**\r\n         * Minimum height the canvas should be scaled to (in pixels).\r\n         * Change with {@link #setMinMax}.\r\n         * @property {?number} minHeight\r\n         * @readonly\r\n         * @protected\r\n         */\r\n        this.minHeight = null;\r\n\r\n        /**\r\n         * Maximum width the canvas should be scaled to (in pixels).\r\n         * If null it will scale to whatever width the browser can handle.\r\n         * Change with {@link #setMinMax}.\r\n         * @property {?number} maxWidth\r\n         * @readonly\r\n         * @protected\r\n         */\r\n        this.maxWidth = null;\r\n\r\n        /**\r\n         * Maximum height the canvas should be scaled to (in pixels).\r\n         * If null it will scale to whatever height the browser can handle.\r\n         * Change with {@link #setMinMax}.\r\n         * @property {?number} maxHeight\r\n         * @readonly\r\n         * @protected\r\n         */\r\n        this.maxHeight = null;\r\n\r\n        /**\r\n         * The _current_ scale factor based on the game dimensions vs. the scaled dimensions.\r\n         * @property {Phaser.Point} scaleFactor\r\n         * @readonly\r\n         */\r\n        this.scaleFactor = new Vec2(1, 1);\r\n\r\n        /**\r\n         * The _current_ inversed scale factor. The displayed dimensions divided by the game dimensions.\r\n         * @property {Phaser.Point} scaleFactorInversed\r\n         * @readonly\r\n         * @protected\r\n         */\r\n        this.scaleFactorInversed = new Vec2(1, 1);\r\n\r\n        /**\r\n         * The aspect ratio of the scaled Display canvas.\r\n         * @property {number} aspectRatio\r\n         * @readonly\r\n         */\r\n        this.aspectRatio = 0;\r\n\r\n        /**\r\n         * The aspect ratio of the original game dimensions.\r\n         * @property {number} sourceAspectRatio\r\n         * @readonly\r\n         */\r\n        this.sourceAspectRatio = 0;\r\n\r\n        /**\r\n         * True if the the browser window (instead of the display canvas's DOM parent) should be used as the bounding parent.\r\n         *\r\n         * This is set automatically based on the `parent` argument passed to {@link Phaser.Game}.\r\n         *\r\n         * The {@link #parentNode} property is generally ignored while this is in effect.\r\n         *\r\n         * @property {boolean} parentIsWindow\r\n         */\r\n        this.parentIsWindow = false;\r\n\r\n        /**\r\n         * The _original_ DOM element for the parent of the Display canvas.\r\n         * This may be different in fullscreen - see {@link #createFullScreenTarget}.\r\n         *\r\n         * This is set automatically based on the `parent` argument passed to {@link Phaser.Game}.\r\n         *\r\n         * This should only be changed after moving the Game canvas to a different DOM parent.\r\n         *\r\n         * @property {?DOMElement} parentNode\r\n         */\r\n        this.parentNode = null;\r\n\r\n        /**\r\n         * The scale of the game in relation to its parent container.\r\n         * @property {Phaser.Point} parentScaleFactor\r\n         * @readonly\r\n         */\r\n        this.parentScaleFactor = new Vec2(1, 1);\r\n\r\n        this._lastParentWidth = 0;\r\n\r\n        this._lastParentHeight = 0;\r\n\r\n        this._innerHeight = 0;\r\n\r\n        this.init();\r\n    },\r\n\r\n    init: function ()\r\n    {\r\n        this._innerHeight = this.getInnerHeight();\r\n\r\n        // var gameWidth = this.config.width;\r\n        // var gameHeight = this.config.height;\r\n    },\r\n\r\n    centerDisplay: function ()\r\n    {\r\n        var height = this.height;\r\n        var gameWidth = 0;\r\n        var gameHeight = 0;\r\n\r\n        this.parentNode.style.display = 'flex';\r\n        this.parentNode.style.height = height + 'px';\r\n\r\n        this.canvas.style.margin = 'auto';\r\n        this.canvas.style.width = gameWidth + 'px';\r\n        this.canvas.style.height = gameHeight + 'px';\r\n    },\r\n\r\n    /*\r\n    iOS10 Resize hack. Thanks, Apple.\r\n\r\n    I._onWindowResize = function(a) {\r\n        if (this._lastReportedWidth != document.body.offsetWidth) {\r\n            this._lastReportedWidth = document.body.offsetWidth;\r\n            if (this._isAutoPlaying && this._cancelAutoPlayOnInteraction) {\r\n                this.stopAutoPlay(a)\r\n            }\r\n            window.clearTimeout(this._onResizeDebouncedTimeout);\r\n            this._onResizeDebouncedTimeout = setTimeout(this._onResizeDebounced, 500);\r\n            aj._onWindowResize.call(this, a)\r\n        }\r\n    };\r\n    */\r\n\r\n    resizeHandler: function ()\r\n    {\r\n\r\n    },\r\n\r\n    /*\r\n    resize: function ()\r\n    {\r\n        let scale = Math.min(window.innerWidth / canvas.width, window.innerHeight / canvas.height);\r\n        let orientation = 'left';\r\n        let extra = (this.mobile) ? 'margin-left: -50%': '';\r\n        let margin = window.innerWidth / 2 - (canvas.width / 2) * scale;\r\n\r\n        canvas.setAttribute('style', '-ms-transform-origin: ' + orientation + ' top; -webkit-transform-origin: ' + orientation + ' top;' +\r\n            ' -moz-transform-origin: ' + orientation + ' top; -o-transform-origin: ' + orientation + ' top; transform-origin: ' + orientation + ' top;' +\r\n            ' -ms-transform: scale(' + scale + '); -webkit-transform: scale3d(' + scale + ', 1);' +\r\n            ' -moz-transform: scale(' + scale + '); -o-transform: scale(' + scale + '); transform: scale(' + scale + ');' +\r\n            ' display: block; margin-left: ' + margin + 'px;'\r\n        );\r\n    },\r\n    */\r\n\r\n    getInnerHeight: function ()\r\n    {\r\n        //  Based on code by @tylerjpeterson\r\n\r\n        if (!this.game.device.os.iOS)\r\n        {\r\n            return window.innerHeight;\r\n        }\r\n\r\n        var axis = Math.abs(window.orientation);\r\n\r\n        var size = { w: 0, h: 0 };\r\n        \r\n        var ruler = document.createElement('div');\r\n\r\n        ruler.setAttribute('style', 'position: fixed; height: 100vh; width: 0; top: 0');\r\n\r\n        document.documentElement.appendChild(ruler);\r\n\r\n        size.w = (axis === 90) ? ruler.offsetHeight : window.innerWidth;\r\n        size.h = (axis === 90) ? window.innerWidth : ruler.offsetHeight;\r\n\r\n        document.documentElement.removeChild(ruler);\r\n\r\n        ruler = null;\r\n\r\n        if (Math.abs(window.orientation) !== 90)\r\n        {\r\n            return size.h;\r\n        }\r\n        else\r\n        {\r\n            return size.w;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys the ScaleManager.\r\n     *\r\n     * @method Phaser.Boot.ScaleManager#destroy\r\n     * @since 3.12.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.game = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = ScaleManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Vec2","ScaleManager","initialize","game","config","zoom","height","width","resolution","parent","scaleMode","maxHeight","maxWidth","minHeight","minWidth","scaleFactor","scaleFactorInversed","sourceAspectRatio","aspectRatio","parentIsWindow","parentNode","parentScaleFactor","_innerHeight","_lastParentHeight","_lastParentWidth","init","getInnerHeight","centerDisplay","style","display","canvas","margin","resizeHandler","device","os","iOS","window","innerHeight","axis","Math","abs","orientation","ruler","document","createElement","setAttribute","documentElement","appendChild","w","offsetHeight","innerWidth","h","removeChild","destroy"]
}
