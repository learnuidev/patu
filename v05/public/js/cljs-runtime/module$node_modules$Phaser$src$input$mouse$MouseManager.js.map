{
"version":3,
"file":"module$node_modules$Phaser$src$input$mouse$MouseManager.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/input/mouse/MouseManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$input$mouse$MouseManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Features = require('../../device/Features');\r\n\r\n//  https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\r\n//  https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\n\r\n/**\r\n * @classdesc\r\n * The Mouse Manager is a helper class that belongs to the Input Manager.\r\n * \r\n * Its role is to listen for native DOM Mouse Events and then pass them onto the Input Manager for further processing.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically.\r\n *\r\n * @class MouseManager\r\n * @memberOf Phaser.Input.Mouse\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\r\nvar MouseManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function MouseManager (inputManager)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = inputManager;\r\n\r\n        /**\r\n         * If true the DOM mouse events will have event.preventDefault applied to them, if false they will propagate fully.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#capture\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.capture = true;\r\n\r\n        /**\r\n         * A boolean that controls if the Mouse Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#enabled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = false;\r\n\r\n        /**\r\n         * The Touch Event target, as defined in the Game Config.\r\n         * Typically the canvas to which the game is rendering, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#target\r\n         * @type {any}\r\n         * @since 3.0.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * If the mouse has been pointer locked successfully this will be set to true.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#locked\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.locked = false;\r\n\r\n        inputManager.events.once('boot', this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Touch Manager boot process.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#boot\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var config = this.manager.config;\r\n\r\n        this.enabled = config.inputMouse;\r\n        this.target = config.inputMouseEventTarget;\r\n        this.capture = config.inputMouseCapture;\r\n\r\n        if (!this.target)\r\n        {\r\n            this.target = this.manager.game.canvas;\r\n        }\r\n\r\n        if (config.disableContextMenu)\r\n        {\r\n            this.disableContextMenu();\r\n        }\r\n\r\n        if (this.enabled)\r\n        {\r\n            this.startListeners();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Attempts to disable the context menu from appearing if you right-click on the browser.\r\n     * \r\n     * Works by listening for the `contextmenu` event and prevent defaulting it.\r\n     * \r\n     * Use this if you need to enable right-button mouse support in your game, and the browser\r\n     * menu keeps getting in the way.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#disableContextMenu\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Input.Mouse.MouseManager} This Mouse Manager instance.\r\n     */\r\n    disableContextMenu: function ()\r\n    {\r\n        document.body.addEventListener('contextmenu', function (event)\r\n        {\r\n            event.preventDefault();\r\n            return false;\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * If the browser supports it, you can request that the pointer be locked to the browser window.\r\n     *\r\n     * This is classically known as 'FPS controls', where the pointer can't leave the browser until\r\n     * the user presses an exit key.\r\n     *\r\n     * If the browser successfully enters a locked state, a `POINTER_LOCK_CHANGE_EVENT` will be dispatched,\r\n     * from the games Input Manager, with an `isPointerLocked` property.\r\n     *\r\n     * It is important to note that pointer lock can only be enabled after an 'engagement gesture',\r\n     * see: https://w3c.github.io/pointerlock/#dfn-engagement-gesture.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#requestPointerLock\r\n     * @since 3.0.0\r\n     */\r\n    requestPointerLock: function ()\r\n    {\r\n        if (Features.pointerLock)\r\n        {\r\n            var element = this.target;\r\n            element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;\r\n            element.requestPointerLock();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal pointerLockChange handler.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#pointerLockChange\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MouseEvent} event - The native event from the browser.\r\n     */\r\n\r\n    /*\r\n    pointerLockChange: function (event)\r\n    {\r\n        var element = this.target;\r\n\r\n        this.locked = (document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement === element) ? true : false;\r\n\r\n        this.manager.queue.push(event);\r\n    },\r\n    */\r\n\r\n    /**\r\n     * If the browser supports pointer lock, this will request that the pointer lock is released. If\r\n     * the browser successfully enters a locked state, a 'POINTER_LOCK_CHANGE_EVENT' will be\r\n     * dispatched - from the game's input manager - with an `isPointerLocked` property.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#releasePointerLock\r\n     * @since 3.0.0\r\n     */\r\n    releasePointerLock: function ()\r\n    {\r\n        if (Features.pointerLock)\r\n        {\r\n            document.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock;\r\n            document.exitPointerLock();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The Mouse Move Event Handler.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#onMouseMove\r\n     * @since 3.10.0\r\n     *\r\n     * @param {MouseEvent} event - The native DOM Mouse Move Event.\r\n     */\r\n\r\n    /*\r\n    onMouseMove: function (event)\r\n    {\r\n        if (event.defaultPrevented || !this.enabled || !this.manager)\r\n        {\r\n            // Do nothing if event already handled\r\n            return;\r\n        }\r\n\r\n        this.manager.queueMouseMove(event);\r\n\r\n        if (this.capture)\r\n        {\r\n            event.preventDefault();\r\n        }\r\n    },\r\n    */\r\n\r\n    /**\r\n     * The Mouse Down Event Handler.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#onMouseDown\r\n     * @since 3.10.0\r\n     *\r\n     * @param {MouseEvent} event - The native DOM Mouse Down Event.\r\n     */\r\n\r\n    /*\r\n    onMouseDown: function (event)\r\n    {\r\n        if (event.defaultPrevented || !this.enabled)\r\n        {\r\n            // Do nothing if event already handled\r\n            return;\r\n        }\r\n\r\n        this.manager.queueMouseDown(event);\r\n\r\n        if (this.capture)\r\n        {\r\n            event.preventDefault();\r\n        }\r\n    },\r\n    */\r\n\r\n    /**\r\n     * The Mouse Up Event Handler.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#onMouseUp\r\n     * @since 3.10.0\r\n     *\r\n     * @param {MouseEvent} event - The native DOM Mouse Up Event.\r\n     */\r\n\r\n    /*\r\n    onMouseUp: function (event)\r\n    {\r\n        if (event.defaultPrevented || !this.enabled)\r\n        {\r\n            // Do nothing if event already handled\r\n            return;\r\n        }\r\n\r\n        this.manager.queueMouseUp(event);\r\n\r\n        if (this.capture)\r\n        {\r\n            event.preventDefault();\r\n        }\r\n    },\r\n    */\r\n\r\n    /**\r\n     * Starts the Mouse Event listeners running.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#startListeners\r\n     * @since 3.0.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        var onMouseMove = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.queueMouseMove(event);\r\n    \r\n            if (_this.capture)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        var onMouseDown = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.queueMouseDown(event);\r\n    \r\n            if (_this.capture)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        var onMouseUp = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.queueMouseUp(event);\r\n    \r\n            if (_this.capture)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        this.onMouseMove = onMouseMove;\r\n        this.onMouseDown = onMouseDown;\r\n        this.onMouseUp = onMouseUp;\r\n\r\n        var target = this.target;\r\n        var passive = { passive: true };\r\n        var nonPassive = { passive: false };\r\n\r\n        target.addEventListener('mousemove', onMouseMove, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('mousedown', onMouseDown, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('mouseup', onMouseUp, (this.capture) ? nonPassive : passive);\r\n\r\n        if (Features.pointerLock)\r\n        {\r\n            var onPointerLockChange = function (event)\r\n            {\r\n                var element = _this.target;\r\n\r\n                _this.locked = (document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement === element) ? true : false;\r\n        \r\n                _this.manager.queue.push(event);\r\n            };\r\n\r\n            this.pointerLockChange = onPointerLockChange;\r\n\r\n            document.addEventListener('pointerlockchange', onPointerLockChange, true);\r\n            document.addEventListener('mozpointerlockchange', onPointerLockChange, true);\r\n            document.addEventListener('webkitpointerlockchange', onPointerLockChange, true);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Stops the Mouse Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#stopListeners\r\n     * @since 3.0.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        var target = this.target;\r\n\r\n        target.removeEventListener('mousemove', this.onMouseMove);\r\n        target.removeEventListener('mousedown', this.onMouseDown);\r\n        target.removeEventListener('mouseup', this.onMouseUp);\r\n\r\n        if (Features.pointerLock)\r\n        {\r\n            document.removeEventListener('pointerlockchange', this.pointerLockChange, true);\r\n            document.removeEventListener('mozpointerlockchange', this.pointerLockChange, true);\r\n            document.removeEventListener('webkitpointerlockchange', this.pointerLockChange, true);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Mouse Manager instance.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.target = null;\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = MouseManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Features","MouseManager","initialize","inputManager","manager","capture","locked","enabled","events","once","boot","config","inputMouse","target","inputMouseEventTarget","inputMouseCapture","game","canvas","disableContextMenu","startListeners","document","body","addEventListener","event","preventDefault","requestPointerLock","pointerLock","element","mozRequestPointerLock","webkitRequestPointerLock","releasePointerLock","exitPointerLock","mozExitPointerLock","webkitExitPointerLock","_this","onMouseMove","defaultPrevented","queueMouseMove","onMouseDown","queueMouseDown","onMouseUp","queueMouseUp","passive","nonPassive","pointerLockChange","onPointerLockChange","pointerLockElement","mozPointerLockElement","webkitPointerLockElement","queue","push","stopListeners","removeEventListener","destroy"]
}
