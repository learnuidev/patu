{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$components$GetBounds.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/components/GetBounds.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$components$GetBounds\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Rectangle = require('../../geom/rectangle/Rectangle');\r\nvar RotateAround = require('../../math/RotateAround');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * Provides methods used for obtaining the bounds of a Game Object.\r\n * Should be applied as a mixin and not used directly.\r\n *\r\n * @name Phaser.GameObjects.Components.GetBounds\r\n * @since 3.0.0\r\n */\r\n\r\nvar GetBounds = {\r\n\r\n    /**\r\n     * Gets the center coordinate of this Game Object, regardless of origin.\r\n     * The returned point is calculated in local space and does not factor in any parent containers\r\n     *\r\n     * @method Phaser.GameObjects.Components.GetBounds#getCenter\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [output,$return]\r\n     *\r\n     * @param {(Phaser.Math.Vector2|object)} [output] - An object to store the values in. If not provided a new Vector2 will be created.\r\n     *\r\n     * @return {(Phaser.Math.Vector2|object)} The values stored in the output object.\r\n     */\r\n    getCenter: function (output)\r\n    {\r\n        if (output === undefined) { output = new Vector2(); }\r\n\r\n        output.x = this.x - (this.displayWidth * this.originX) + (this.displayWidth / 2);\r\n        output.y = this.y - (this.displayHeight * this.originY) + (this.displayHeight / 2);\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Gets the top-left corner coordinate of this Game Object, regardless of origin.\r\n     * The returned point is calculated in local space and does not factor in any parent containers\r\n     *\r\n     * @method Phaser.GameObjects.Components.GetBounds#getTopLeft\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [output,$return]\r\n     *\r\n     * @param {(Phaser.Math.Vector2|object)} [output] - An object to store the values in. If not provided a new Vector2 will be created.\r\n     * @param {boolean} [includeParent=false] - If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector?\r\n     *\r\n     * @return {(Phaser.Math.Vector2|object)} The values stored in the output object.\r\n     */\r\n    getTopLeft: function (output, includeParent)\r\n    {\r\n        if (!output) { output = new Vector2(); }\r\n        if (includeParent === undefined) { includeParent = false; }\r\n\r\n        output.x = this.x - (this.displayWidth * this.originX);\r\n        output.y = this.y - (this.displayHeight * this.originY);\r\n\r\n        if (this.rotation !== 0)\r\n        {\r\n            RotateAround(output, this.x, this.y, this.rotation);\r\n        }\r\n\r\n        if (includeParent && this.parentContainer)\r\n        {\r\n            var parentMatrix = this.parentContainer.getBoundsTransformMatrix();\r\n\r\n            parentMatrix.transformPoint(output.x, output.y, output);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Gets the top-right corner coordinate of this Game Object, regardless of origin.\r\n     * The returned point is calculated in local space and does not factor in any parent containers\r\n     *\r\n     * @method Phaser.GameObjects.Components.GetBounds#getTopRight\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [output,$return]\r\n     *\r\n     * @param {(Phaser.Math.Vector2|object)} [output] - An object to store the values in. If not provided a new Vector2 will be created.\r\n     * @param {boolean} [includeParent=false] - If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector?\r\n     *\r\n     * @return {(Phaser.Math.Vector2|object)} The values stored in the output object.\r\n     */\r\n    getTopRight: function (output, includeParent)\r\n    {\r\n        if (!output) { output = new Vector2(); }\r\n        if (includeParent === undefined) { includeParent = false; }\r\n\r\n        output.x = (this.x - (this.displayWidth * this.originX)) + this.displayWidth;\r\n        output.y = this.y - (this.displayHeight * this.originY);\r\n\r\n        if (this.rotation !== 0)\r\n        {\r\n            RotateAround(output, this.x, this.y, this.rotation);\r\n        }\r\n\r\n        if (includeParent && this.parentContainer)\r\n        {\r\n            var parentMatrix = this.parentContainer.getBoundsTransformMatrix();\r\n\r\n            parentMatrix.transformPoint(output.x, output.y, output);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\r\n     * The returned point is calculated in local space and does not factor in any parent containers\r\n     *\r\n     * @method Phaser.GameObjects.Components.GetBounds#getBottomLeft\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [output,$return]\r\n     *\r\n     * @param {(Phaser.Math.Vector2|object)} [output] - An object to store the values in. If not provided a new Vector2 will be created.\r\n     * @param {boolean} [includeParent=false] - If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector?\r\n     *\r\n     * @return {(Phaser.Math.Vector2|object)} The values stored in the output object.\r\n     */\r\n    getBottomLeft: function (output, includeParent)\r\n    {\r\n        if (!output) { output = new Vector2(); }\r\n        if (includeParent === undefined) { includeParent = false; }\r\n\r\n        output.x = this.x - (this.displayWidth * this.originX);\r\n        output.y = (this.y - (this.displayHeight * this.originY)) + this.displayHeight;\r\n\r\n        if (this.rotation !== 0)\r\n        {\r\n            RotateAround(output, this.x, this.y, this.rotation);\r\n        }\r\n\r\n        if (includeParent && this.parentContainer)\r\n        {\r\n            var parentMatrix = this.parentContainer.getBoundsTransformMatrix();\r\n\r\n            parentMatrix.transformPoint(output.x, output.y, output);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\r\n     * The returned point is calculated in local space and does not factor in any parent containers\r\n     *\r\n     * @method Phaser.GameObjects.Components.GetBounds#getBottomRight\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [output,$return]\r\n     *\r\n     * @param {(Phaser.Math.Vector2|object)} [output] - An object to store the values in. If not provided a new Vector2 will be created.\r\n     * @param {boolean} [includeParent=false] - If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector?\r\n     *\r\n     * @return {(Phaser.Math.Vector2|object)} The values stored in the output object.\r\n     */\r\n    getBottomRight: function (output, includeParent)\r\n    {\r\n        if (!output) { output = new Vector2(); }\r\n        if (includeParent === undefined) { includeParent = false; }\r\n\r\n        output.x = (this.x - (this.displayWidth * this.originX)) + this.displayWidth;\r\n        output.y = (this.y - (this.displayHeight * this.originY)) + this.displayHeight;\r\n\r\n        if (this.rotation !== 0)\r\n        {\r\n            RotateAround(output, this.x, this.y, this.rotation);\r\n        }\r\n\r\n        if (includeParent && this.parentContainer)\r\n        {\r\n            var parentMatrix = this.parentContainer.getBoundsTransformMatrix();\r\n\r\n            parentMatrix.transformPoint(output.x, output.y, output);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Gets the bounds of this Game Object, regardless of origin.\r\n     * The values are stored and returned in a Rectangle, or Rectangle-like, object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.GetBounds#getBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Rectangle} O - [output,$return]\r\n     *\r\n     * @param {(Phaser.Geom.Rectangle|object)} [output] - An object to store the values in. If not provided a new Rectangle will be created.\r\n     *\r\n     * @return {(Phaser.Geom.Rectangle|object)} The values stored in the output object.\r\n     */\r\n    getBounds: function (output)\r\n    {\r\n        if (output === undefined) { output = new Rectangle(); }\r\n\r\n        //  We can use the output object to temporarily store the x/y coords in:\r\n\r\n        var TLx, TLy, TRx, TRy, BLx, BLy, BRx, BRy;\r\n\r\n        // Instead of doing a check if parent container is \r\n        // defined per corner we only do it once.\r\n        if (this.parentContainer)\r\n        {\r\n            var parentMatrix = this.parentContainer.getBoundsTransformMatrix();\r\n\r\n            this.getTopLeft(output);\r\n            parentMatrix.transformPoint(output.x, output.y, output);\r\n\r\n            TLx = output.x;\r\n            TLy = output.y;\r\n\r\n            this.getTopRight(output);\r\n            parentMatrix.transformPoint(output.x, output.y, output);\r\n\r\n            TRx = output.x;\r\n            TRy = output.y;\r\n\r\n            this.getBottomLeft(output);\r\n            parentMatrix.transformPoint(output.x, output.y, output);\r\n\r\n            BLx = output.x;\r\n            BLy = output.y;\r\n\r\n            this.getBottomRight(output);\r\n            parentMatrix.transformPoint(output.x, output.y, output);\r\n\r\n            BRx = output.x;\r\n            BRy = output.y;\r\n        }\r\n        else\r\n        {\r\n            this.getTopLeft(output);\r\n\r\n            TLx = output.x;\r\n            TLy = output.y;\r\n\r\n            this.getTopRight(output);\r\n\r\n            TRx = output.x;\r\n            TRy = output.y;\r\n\r\n            this.getBottomLeft(output);\r\n\r\n            BLx = output.x;\r\n            BLy = output.y;\r\n\r\n            this.getBottomRight(output);\r\n\r\n            BRx = output.x;\r\n            BRy = output.y;\r\n        }\r\n\r\n        output.x = Math.min(TLx, TRx, BLx, BRx);\r\n        output.y = Math.min(TLy, TRy, BLy, BRy);\r\n        output.width = Math.max(TLx, TRx, BLx, BRx) - output.x;\r\n        output.height = Math.max(TLy, TRy, BLy, BRy) - output.y;\r\n\r\n        return output;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = GetBounds;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Rectangle","RotateAround","Vector2","GetBounds","getCenter","output","undefined","x","displayWidth","originX","y","displayHeight","originY","getTopLeft","includeParent","rotation","parentContainer","getBoundsTransformMatrix","parentMatrix","transformPoint","getTopRight","getBottomLeft","getBottomRight","getBounds","TLx","TLy","TRx","TRy","BLx","BLy","BRx","BRy","Math","min","width","max","height"]
}
