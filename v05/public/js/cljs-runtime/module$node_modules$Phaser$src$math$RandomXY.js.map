{
"version":3,
"file":"module$node_modules$Phaser$src$math$RandomXY.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkCzGD,MAAAC,QAAA,CAZeC,QAAS,CAACC,MAAD,CAASC,KAAT,CACxB,CACkBC,IAAAA,EAAd,GAAID,KAAJ,GAA2BA,KAA3B,CAAmC,CAAnC,CAEA,KAAIE,EAAoB,CAApBA,CAAIC,IAAAC,OAAA,EAAJF,CAAwBC,IAAAE,GAE5BN,OAAAO,EAAA,CAAWH,IAAAI,IAAA,CAASL,CAAT,CAAX,CAAyBF,KACzBD,OAAAS,EAAA,CAAWL,IAAAM,IAAA,CAASP,CAAT,CAAX,CAAyBF,KAEzB,OAAOD,OARX,CAvByG;",
"sources":["node_modules/Phaser/src/math/RandomXY.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$RandomXY\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Compute a random unit vector.\r\n *\r\n * Computes random values for the given vector between -1 and 1 that can be used to represent a direction.\r\n *\r\n * Optionally accepts a scale value to scale the resulting vector by.\r\n *\r\n * @function Phaser.Math.RandomXY\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector2} vector - The Vector to compute random values for.\r\n * @param {number} [scale=1] - The scale of the random values.\r\n *\r\n * @return {Phaser.Math.Vector2} The given Vector.\r\n */\r\nvar RandomXY = function (vector, scale)\r\n{\r\n    if (scale === undefined) { scale = 1; }\r\n\r\n    var r = Math.random() * 2 * Math.PI;\r\n\r\n    vector.x = Math.cos(r) * scale;\r\n    vector.y = Math.sin(r) * scale;\r\n\r\n    return vector;\r\n};\r\n\r\nmodule.exports = RandomXY;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","RandomXY","vector","scale","undefined","r","Math","random","PI","x","cos","y","sin"]
}
