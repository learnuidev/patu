{
"version":3,
"file":"module$node_modules$Phaser$src$geom$rectangle$MarchingAnts.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,2DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOvH,IAAIC,UAAYH,OAAA,CAAQ,yDAAR,CAAhB,CACII,MAAQJ,OAAA,CAAQ,iDAAR,CA0GZC,OAAAC,QAAA,CAtFmBG,QAAS,CAACC,IAAD,CAAOC,IAAP,CAAaC,QAAb,CAAuBC,GAAvB,CAC5B,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,EAA/B,CAEA,IAAI,CAACF,IAAL,EAAa,CAACC,QAAd,CAGI,MAAOC,IAKNF,KAAL,CAMIC,QANJ,CAMeG,IAAAC,MAAA,CAAWT,SAAA,CAAUG,IAAV,CAAX,CAA6BC,IAA7B,CANf,CAEIA,IAFJ,CAEWJ,SAAA,CAAUG,IAAV,CAFX,CAE6BE,QAa7B,KANA,IAAIK,EAAIP,IAAAO,EAAR,CACIC,EAAIR,IAAAQ,EADR,CAEIC,KAAO,CAFX,CAMSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBR,QAApB,CAA8BQ,CAAA,EAA9B,CAII,OAFAP,GAAAQ,KAAA,CAAS,IAAIb,KAAJ,CAAUS,CAAV;AAAaC,CAAb,CAAT,CAEQC,CAAAA,IAAR,EAII,KAAK,CAAL,CACIF,CAAA,EAAKN,IAEDM,EAAJ,EAASP,IAAAY,MAAT,GAEIH,IAEA,CAFO,CAEP,CADAD,CACA,EADMD,CACN,CADUP,IAAAY,MACV,CAAAL,CAAA,CAAIP,IAAAY,MAJR,CAMA,MAGJ,MAAK,CAAL,CACIJ,CAAA,EAAKP,IAEDO,EAAJ,EAASR,IAAAa,OAAT,GAEIJ,IAEA,CAFO,CAEP,CADAF,CACA,EADMC,CACN,CADUR,IAAAa,OACV,CAAAL,CAAA,CAAIR,IAAAa,OAJR,CAMA,MAGJ,MAAK,CAAL,CACIN,CAAA,EAAKN,IAEDM,EAAJ,EAASP,IAAAc,KAAT,GAEIL,IAEA,CAFO,CAEP,CADAD,CACA,EADMR,IAAAc,KACN,CADkBP,CAClB,CAAAA,CAAA,CAAIP,IAAAc,KAJR,CAMA,MAGJ,MAAK,CAAL,CACIN,CAEA,EAFKP,IAEL,CAAIO,CAAJ,EAASR,IAAAe,IAAT,GAEIN,IACA,CADO,CACP,CAAAD,CAAA,CAAIR,IAAAe,IAHR,CA3CR,CAoDJ,MAAOZ,IAlFX,CA7BuH;",
"sources":["node_modules/Phaser/src/geom/rectangle/MarchingAnts.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$rectangle$MarchingAnts\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Perimeter = require('./Perimeter');\r\nvar Point = require('../point/Point');\r\n\r\n//  Return an array of points from the perimeter of the rectangle\r\n//  each spaced out based on the quantity or step required\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Geom.Rectangle.MarchingAnts\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point[]} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - [description]\r\n * @param {number} step - [description]\r\n * @param {integer} quantity - [description]\r\n * @param {(array|Phaser.Geom.Point[])} [out] - [description]\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} [description]\r\n */\r\nvar MarchingAnts = function (rect, step, quantity, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    if (!step && !quantity)\r\n    {\r\n        //  Bail out\r\n        return out;\r\n    }\r\n\r\n    //  If step is a falsey value (false, null, 0, undefined, etc) then we calculate\r\n    //  it based on the quantity instead, otherwise we always use the step value\r\n    if (!step)\r\n    {\r\n        step = Perimeter(rect) / quantity;\r\n    }\r\n    else\r\n    {\r\n        quantity = Math.round(Perimeter(rect) / step);\r\n    }\r\n\r\n    var x = rect.x;\r\n    var y = rect.y;\r\n    var face = 0;\r\n\r\n    //  Loop across each face of the rectangle\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        out.push(new Point(x, y));\r\n\r\n        switch (face)\r\n        {\r\n\r\n            //  Top face\r\n            case 0:\r\n                x += step;\r\n\r\n                if (x >= rect.right)\r\n                {\r\n                    face = 1;\r\n                    y += (x - rect.right);\r\n                    x = rect.right;\r\n                }\r\n                break;\r\n\r\n            //  Right face\r\n            case 1:\r\n                y += step;\r\n\r\n                if (y >= rect.bottom)\r\n                {\r\n                    face = 2;\r\n                    x -= (y - rect.bottom);\r\n                    y = rect.bottom;\r\n                }\r\n                break;\r\n\r\n            //  Bottom face\r\n            case 2:\r\n                x -= step;\r\n\r\n                if (x <= rect.left)\r\n                {\r\n                    face = 3;\r\n                    y -= (rect.left - x);\r\n                    x = rect.left;\r\n                }\r\n                break;\r\n\r\n            //  Left face\r\n            case 3:\r\n                y -= step;\r\n\r\n                if (y <= rect.top)\r\n                {\r\n                    face = 0;\r\n                    y = rect.top;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = MarchingAnts;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Perimeter","Point","MarchingAnts","rect","step","quantity","out","undefined","Math","round","x","y","face","i","push","right","bottom","left","top"]
}
