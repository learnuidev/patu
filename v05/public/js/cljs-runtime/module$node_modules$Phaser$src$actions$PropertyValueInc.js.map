{
"version":3,
"file":"module$node_modules$Phaser$src$actions$PropertyValueInc.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6DpHD,MAAAC,QAAA,CAhCuBC,QAAS,CAACC,KAAD,CAAQC,GAAR,CAAaC,KAAb,CAAoBC,IAApB,CAA0BC,KAA1B,CAAiCC,SAAjC,CAChC,CACiBC,IAAAA,EAAb,GAAIH,IAAJ,GAA0BA,IAA1B,CAAiC,CAAjC,CACcG,KAAAA,EAAd,GAAIF,KAAJ,GAA2BA,KAA3B,CAAmC,CAAnC,CACkBE,KAAAA,EAAlB,GAAID,SAAJ,GAA+BA,SAA/B,CAA2C,CAA3C,CAGA,KAAIE,EAAI,CAAR,CACIC,IAAMR,KAAAS,OAEV,IAAkB,CAAlB,GAAIJ,SAAJ,CAGI,IAAA,CAAgBK,KAAhB,CAAoBF,GAApB,CAAyBE,KAAA,EAAzB,CAEIV,KAAA,CAAMU,KAAN,CAAA,CAAST,GAAT,CACA,EADiBC,KACjB,CAD0BK,CAC1B,CAD8BJ,IAC9B,CAAAI,CAAA,EANR,KAYI,KAAA,CAAqB,CAArB,EAAgBG,KAAhB,CAAwBA,KAAA,EAAxB,CAEIV,KAAA,CAAMU,KAAN,CAAA,CAAST,GAAT,CACA,EADiBC,KACjB,CAD0BK,CAC1B,CAD8BJ,IAC9B,CAAAI,CAAA,EAIR,OAAOP,MA5BX,CA9BoH;",
"sources":["node_modules/Phaser/src/actions/PropertyValueInc.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$actions$PropertyValueInc\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Takes an array of Game Objects, or any objects that have a public property as defined in `key`,\r\n * and then adds the given value to it.\r\n *\r\n * The optional `step` property is applied incrementally, multiplied by each item in the array.\r\n *\r\n * To use this with a Group: `PropertyValueInc(group.getChildren(), key, value, step)`\r\n *\r\n * @function Phaser.Actions.PropertyValueInc\r\n * @since 3.3.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - The array of items to be updated by this action.\r\n * @param {string} key - The property to be updated.\r\n * @param {number} value - The amount to be added to the property.\r\n * @param {number} [step=0] - This is added to the `value` amount, multiplied by the iteration counter.\r\n * @param {integer} [index=0] - An optional offset to start searching from within the items array.\r\n * @param {integer} [direction=1] - The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning.\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of objects that were passed to this Action.\r\n */\r\nvar PropertyValueInc = function (items, key, value, step, index, direction)\r\n{\r\n    if (step === undefined) { step = 0; }\r\n    if (index === undefined) { index = 0; }\r\n    if (direction === undefined) { direction = 1; }\r\n\r\n    var i;\r\n    var t = 0;\r\n    var end = items.length;\r\n\r\n    if (direction === 1)\r\n    {\r\n        //  Start to End\r\n        for (i = index; i < end; i++)\r\n        {\r\n            items[i][key] += value + (t * step);\r\n            t++;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        //  End to Start\r\n        for (i = index; i >= 0; i--)\r\n        {\r\n            items[i][key] += value + (t * step);\r\n            t++;\r\n        }\r\n    }\r\n\r\n    return items;\r\n};\r\n\r\nmodule.exports = PropertyValueInc;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","PropertyValueInc","items","key","value","step","index","direction","undefined","t","end","length","i"]
}
