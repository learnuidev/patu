{"version":3,"sources":["tick/alpha/api.cljc"],"mappings":"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","names":["tick.alpha.api/new-time","tick.core/new-time","tick.alpha.api/new-date","tick.core/new-date","tick.alpha.api/unit-map","tick.core/unit-map","tick.alpha.api/now","tick.core/now","tick.alpha.api/today","tick.core/today","tick.alpha.api/tomorrow","tick.core/tomorrow","tick.alpha.api/yesterday","tick.core/yesterday","var_args","G__31961","tick.alpha.api/time","js/Error","tick.core/time","v","G__31963","tick.alpha.api/date","tick.core/date","G__31965","tick.alpha.api/inst","tick.core/inst","G__31967","tick.alpha.api/instant","tick.core/instant","G__31969","tick.alpha.api/date-time","tick.core/date-time","G__31971","tick.alpha.api/offset-date-time","tick.core/offset-date-time","G__31973","tick.alpha.api/zoned-date-time","tick.core/zoned-date-time","tick.alpha.api/nanosecond","t","tick.core/nanosecond","tick.alpha.api/microsecond","tick.core/microsecond","tick.alpha.api/millisecond","tick.core/millisecond","tick.alpha.api/second","tick.core/second","tick.alpha.api/minute","tick.core/minute","tick.alpha.api/hour","tick.core/hour","G__31975","tick.alpha.api/day-of-week","tick.core/day-of-week","G__31977","tick.alpha.api/day-of-month","tick.core/day-of-month","G__31979","tick.alpha.api/month","tick.core/month","G__31981","tick.alpha.api/year","tick.core/year","G__31983","tick.alpha.api/year-month","tick.core/year-month","G__31985","tick.alpha.api/zone","tick.core/current-zone","z","tick.core/zone","G__31987","tick.alpha.api/zone-offset","offset","tick.core/zone-offset","hours","minutes","java.time/ZoneOffset","seconds","tick.alpha.api/on","d","tick.core/on","tick.alpha.api.date","tick.alpha.api/at","tick.core/at","tick.alpha.api.time","tick.alpha.api/in","ldt","tick.core/in","tick.alpha.api.zone","tick.alpha.api/offset-by","tick.core/offset-by","tick.alpha.api.zone_offset","tick.alpha.api/MONDAY","java.time/DayOfWeek","tick.alpha.api/TUESDAY","tick.alpha.api/WEDNESDAY","tick.alpha.api/THURSDAY","tick.alpha.api/FRIDAY","tick.alpha.api/SATURDAY","tick.alpha.api/SUNDAY","tick.alpha.api/JANUARY","java.time/Month","tick.alpha.api/FEBRUARY","tick.alpha.api/MARCH","tick.alpha.api/APRIL","tick.alpha.api/MAY","tick.alpha.api/JUNE","tick.alpha.api/JULY","tick.alpha.api/AUGUST","tick.alpha.api/SEPTEMBER","tick.alpha.api/OCTOBER","tick.alpha.api/NOVEMBER","tick.alpha.api/DECEMBER","tick.alpha.api/beginning","tick.core/beginning","tick.alpha.api/end","tick.core/end","tick.alpha.api/duration","tick.core/duration","tick.alpha.api/coincident?","tick.core/coincident?","tick.alpha.api/noon","tick.core/noon","tick.alpha.api/midnight","tick.core/midnight","tick.alpha.api/midnight?","tick.core/midnight?","tick.alpha.api/epoch","tick.core/epoch","tick.alpha.api/fields","tick.core/fields","tick.alpha.api/with","tick.core/with","tick.alpha.api/ago","tick.core/ago","tick.alpha.api/hence","tick.core/hence","tick.alpha.api/UTC","tick.alpha.api/parse","tick.core/parse","G__31993","tick.alpha.api/+","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq31991","G__31992","cljs.core/first","cljs.core/next","self__4723__auto__","java.time/Duration","arg","args","p1__31988#","p2__31989#","cljs.core.reduce","tick.core/+","G__31999","tick.alpha.api/-","seq31997","G__31998","tick.core/negated","p1__31994#","p2__31995#","tick.core/-","tick.alpha.api/inc","tick.core/inc","tick.alpha.api/dec","tick.core/dec","tick.alpha.api/>>","amt","tick.core/>>","tick.alpha.api/<<","tick.core/<<","tick.alpha.api/max","tick.core/max","tick.alpha.api/min","tick.core/min","tick.alpha.api/min-of-type","tick.core/min-of-type","tick.alpha.api/max-of-type","tick.core/max-of-type","tick.alpha.api/range","tick.core/range","tick.alpha.api/int","tick.core/int","tick.alpha.api/long","tick.core/long","tick.alpha.api/nanos","tick.core/nanos","tick.alpha.api/micros","tick.core/micros","tick.alpha.api/millis","tick.core/millis","tick.alpha.api/seconds","tick.core/seconds","tick.alpha.api/minutes","tick.core/minutes","tick.alpha.api/hours","tick.core/hours","tick.alpha.api/days","tick.core/days","tick.alpha.api/months","tick.core/months","tick.alpha.api/years","tick.core/years","tick.alpha.api/units","tick.core/units","tick.alpha.api/truncate","tick.core/truncate","G__32004","tick.alpha.api/<","seq32001","G__32002","G__32003","x","y","tick.core/<","more","G__32009","tick.alpha.api/<=","seq32006","G__32007","G__32008","tick.core/<=","G__32014","tick.alpha.api/>","seq32011","G__32012","G__32013","tick.core/>","G__32019","tick.alpha.api/>=","seq32016","G__32017","G__32018","tick.core/>=","G__32021","tick.alpha.api/clock","tick.core/current-clock","i","tick.core/clock","tick.alpha.api/atom","tick.core/atom","tick.alpha.api/swap!","tick.core/swap!","tick.alpha.api/swap-vals!","tick.core/swap-vals!","tick.alpha.api/compare-and-set!","tick.core/compare-and-set!","tick.alpha.api/reset!","tick.core/reset!","tick.alpha.api/reset-vals!","tick.core/reset-vals!","tick.alpha.api/new-interval","tick.interval/new-interval","args__4742__auto__","argseq__4743__auto__","tick.alpha.api/extend","seq32022","G__32023","ival","durations","tick.interval/extend","tick.alpha.api/scale","seq32024","G__32025","tick.alpha.api/bounds","tick.interval/bounds","tick.alpha.api/am","date","tick.interval/am","tick.alpha.api/pm","tick.interval/pm","tick.alpha.api/relation","i1","i2","tick.interval/relation","tick.alpha.api/new-duration","n","u","tick.core/new-duration","tick.alpha.api/new-period","tick.core/new-period","tick.alpha.api/between","v1","v2","tick.core/between","G__32029","tick.alpha.api/concur","seq32027","G__32028","tick.interval/concur","tick.alpha.api/concurrencies","seq32030","self__4724__auto__","cljs.core/seq","intervals","cljs.core.apply","tick.interval/concurrencies","tick.alpha.api/divide-by","divisor","tick.core/divide","tick.alpha.api/divide","tick.alpha.api/ordered-disjoint-intervals?","tick.interval/ordered-disjoint-intervals?","tick.alpha.api/unite","tick.interval/unite","tick.alpha.api/normalize","tick.interval/normalize","tick.alpha.api/union","tick.interval/union","tick.alpha.api/conj","tick.interval/conj","tick.alpha.api/intersection","tick.interval/intersection","tick.alpha.api/intersects?","tick.interval/intersects?","tick.alpha.api/difference","tick.interval/difference","tick.alpha.api/complement","tick.interval/complement","tick.alpha.api/group-by","tick.interval/group-by","G__32032","tick.alpha.api/format","o","tick.format.format","fmt","G__32034","tick.alpha.api/formatter","tick.format.formatter","locale"],"sourcesContent":[";; Copyright \u00a9 2016-2017, JUXT LTD.\n\n(ns tick.alpha.api\n  (:refer-clojure\n   :exclude [+ - * inc dec max min conj\n             range time int long complement\n             < <= > >= << >>\n             extend\n             atom swap! swap-vals! compare-and-set!\n             reset! reset-vals!\n             second\n             group-by divide format] )\n  (:require\n    [clojure.spec.alpha :as s]\n    [tick.core :as core]\n    [tick.format :as t.f]\n    #?(:clj tick.file) ; To ensure protocol extension\n    #?(:clj [net.cgrand.macrovich :as macros])\n    [tick.interval :as interval]\n    [clojure.set :as set]\n    #?@(:cljs\n       [\n        [java.time :refer [Duration ZoneId LocalTime LocalDate DayOfWeek Month ZoneOffset]]\n        [java.time.format :refer [DateTimeFormatter]]]))\n  #?(:cljs\n     (:require-macros\n       [net.cgrand.macrovich :as macros]\n       [tick.alpha.api :refer [with-clock]]))\n  #?(:clj\n     (:import\n       [java.time Duration ZoneId LocalTime LocalDate DayOfWeek Month ZoneOffset]\n       [java.time.format DateTimeFormatter])))\n\n;; This API is optimises convenience, API stability and (type) safety\n;; over performance. Where performance is critical, use tick.core and\n;; friends.\n\n;; clojure.spec assertions are used to check correctness, but these\n;; are disabled by default (except when testing).\n\n;; Construction\n\n(def new-time core/new-time)\n(def new-date core/new-date)\n\n;; Surfacing some useful constants\n\n(def unit-map core/unit-map)\n\n;; Point-in-time 'demo' functions\n\n(defn now [] (core/now))\n(defn today [] (core/today))\n(defn tomorrow [] (core/tomorrow))\n(defn yesterday [] (core/yesterday))\n\n;; Conversions, with 0-arity defaults\n\n(defn time\n  ([] (core/time (now)))\n  ([v] (core/time v)))\n\n(defn date\n  ([] (today))\n  ([v] (core/date v)))\n\n(defn inst\n  ([] (core/inst (now)))\n  ([v] (core/inst v)))\n\n(defn instant\n  ([] (core/instant (now)))\n  ([v] (core/instant v)))\n\n(defn date-time\n  ([] (core/date-time (now)))\n  ([v] (core/date-time v)))\n\n(defn offset-date-time\n  ([] (core/offset-date-time (now)))\n  ([v] (core/offset-date-time v)))\n\n(defn zoned-date-time\n  ([] (core/zoned-date-time (now)))\n  ([v] (core/zoned-date-time v)))\n\n;; Extraction\n\n(defn nanosecond [t] (core/nanosecond t))\n(defn microsecond [t] (core/microsecond t))\n(defn millisecond [t] (core/millisecond t))\n(defn second [t] (core/second t))\n(defn minute [t] (core/minute t))\n(defn hour [t] (core/hour t))\n\n(defn day-of-week\n  ([] (core/day-of-week (today)))\n  ([v] (core/day-of-week v)))\n\n(defn day-of-month\n  ([] (core/day-of-month (today)))\n  ([v] (core/day-of-month v)))\n\n(defn month\n  ([] (core/month (today)))\n  ([v] (core/month v)))\n\n(defn year\n  ([] (core/year (today)))\n  ([v] (core/year v)))\n\n(defn year-month\n  ([] (core/year-month (today)))\n  ([v] (core/year-month v)))\n\n(defn zone\n  ([] (core/current-zone))\n  ([z] (core/zone z)))\n\n(defn zone-offset\n  ([offset] (core/zone-offset offset))\n  ([hours minutes] (. ZoneOffset ofHoursMinutes hours minutes))\n  ([hours minutes seconds] (. ZoneOffset ofHoursMinutesSeconds hours minutes seconds)))\n\n;; Reification\n\n(defn on [t d] (core/on t (date d)))\n(defn at [d t] (core/at d (time t)))\n(defn in [ldt z] (core/in ldt (zone z)))\n(defn offset-by [ldt offset] (core/offset-by ldt (zone-offset offset)))\n\n;; Constants\n\n(def MONDAY (. DayOfWeek -MONDAY))\n(def TUESDAY (. DayOfWeek -TUESDAY))\n(def WEDNESDAY (. DayOfWeek -WEDNESDAY))\n(def THURSDAY (. DayOfWeek -THURSDAY))\n(def FRIDAY (. DayOfWeek -FRIDAY))\n(def SATURDAY (. DayOfWeek -SATURDAY))\n(def SUNDAY (. DayOfWeek -SUNDAY))\n\n(def JANUARY (. Month -JANUARY))\n(def FEBRUARY (. Month -FEBRUARY))\n(def MARCH (. Month -MARCH))\n(def APRIL (. Month -APRIL))\n(def MAY (. Month -MAY))\n(def JUNE (. Month -JUNE))\n(def JULY (. Month -JULY))\n(def AUGUST (. Month -AUGUST))\n(def SEPTEMBER (. Month -SEPTEMBER))\n(def OCTOBER (. Month -OCTOBER))\n(def NOVEMBER (. Month -NOVEMBER))\n(def DECEMBER (. Month -DECEMBER))\n\n(defn beginning [v] (core/beginning v))\n(defn end [v] (core/end v))\n(defn duration [v] (core/duration v))\n\n(def coincident? core/coincident?)\n\n(def noon core/noon)\n(def midnight core/midnight)\n(def midnight? core/midnight?)\n(def epoch core/epoch)\n\n(def fields core/fields)\n(def with core/with)\n(def ago core/ago)\n(def hence core/hence)\n\n;; Zones\n\n(def UTC (zone \"UTC\"))\n;(def LONDON (zone \"Europe/London\"))\n\n;; Parsing\n\n(def parse core/parse)\n\n;; Arithmetic\n\n(defn +\n  ([] (. Duration -ZERO))\n  ([arg] arg)\n  ([arg & args]\n   (reduce #(core/+ %1 %2) arg args)))\n\n(defn -\n  ([] (. Duration -ZERO))\n  ([arg] (core/negated arg))\n  ([arg & args]\n   (reduce #(core/- %1 %2) arg args)))\n\n(defn inc [t]\n  (core/inc t))\n\n(defn dec [t]\n  (core/dec t))\n\n(defn >> [t amt]\n  (core/>> t amt))\n\n(defn << [t amt]\n  (core/<< t amt))\n\n(def max core/max)\n(def min core/min)\n\n(def min-of-type core/min-of-type)\n(def max-of-type core/max-of-type)\n\n(def range core/range)\n\n(defn int [arg] (core/int arg))\n(defn long [arg] (core/long arg))\n\n;; Lengths of time (durations & periods)\n\n(defn nanos [v] (core/nanos v))\n(defn micros [v] (core/micros v))\n(defn millis [v] (core/millis v))\n(defn seconds [v] (core/seconds v))\n(defn minutes [v] (core/minutes v))\n(defn hours [v] (core/hours v))\n(defn days [v] (core/days v))\n(defn months [v] (core/months v))\n(defn years [v] (core/years v))\n\n;; Units\n(def units core/units)\n\n;; Truncation\n(def truncate core/truncate)\n\n;; Comparisons\n\n(defn <\n  ([x] true)\n  ([x y] (core/< x y))\n  ([x y & more] (if (core/< x y)\n                  (if (next more)\n                    (recur y (first more) (next more))\n                    (core/< y (first more)))\n                  false)))\n\n(defn <=\n  ([x] true)\n  ([x y] (core/<= x y))\n  ([x y & more] (if (core/<= x y)\n                  (if (next more)\n                    (recur y (first more) (next more))\n                    (core/<= y (first more)))\n                  false)))\n\n(defn >\n  ([x] true)\n  ([x y] (core/> x y))\n  ([x y & more] (if (core/> x y)\n                  (if (next more)\n                    (recur y (first more) (next more))\n                    (core/> y (first more)))\n                  false)))\n\n(defn >=\n  ([x] true)\n  ([x y] (core/>= x y))\n  ([x y & more] (if (core/>= x y)\n                  (if (next more)\n                    (recur y (first more) (next more))\n                    (core/>= y (first more)))\n                  false)))\n\n;; TODO: Multiplication (of durations)\n\n;; Clocks\n\n;; Fixing the clock used for `today` and `now`.\n\n(defn clock\n  ([] (core/current-clock))\n  ([i] (core/clock i)))\n\n(defmacro with-clock [^java.time.Clock clock & body]\n  `(binding [tick.core/*clock* (core/clock ~clock)]\n     ~@body))\n\n;(def tick core/tick)\n(def atom core/atom)\n(def swap! core/swap!)\n(def swap-vals! core/swap-vals!)\n(def compare-and-set! core/compare-and-set!)\n(def reset! core/reset!)\n(def reset-vals! core/reset-vals!)\n\n;; Intervals\n\n(defn new-interval [x y]\n  (interval/new-interval x y))\n\n(defn extend [ival & durations]\n  (reduce interval/extend ival durations))\n\n(defn scale [ival & durations]\n  (reduce interval/extend ival durations))\n\n(def ^{:doc \"Return an interval which forms the bounding-box of the given arguments.\"}\n  bounds interval/bounds)\n\n(defn am [^LocalDate date] (interval/am date))\n(defn pm [^LocalDate date] (interval/pm date))\n\n(defn relation [i1 i2]\n  (interval/relation i1 i2))\n\n(defn new-duration\n  [n u]\n  (core/new-duration n u))\n\n(defn new-period\n  [n u]\n  (core/new-period n u))\n\n(defn between [v1 v2] (core/between v1 v2))\n\n(defn concur\n  ([] nil)\n  ([x] x)\n  ([x & args]\n   (reduce interval/concur x args)))\n\n(defn concurrencies [& intervals]\n  (apply interval/concurrencies intervals))\n\n;; Divisions\n\n(defn divide-by [divisor t]\n  (core/divide t divisor))\n\n;; Alternative useful for -> threading\n(defn divide [t divisor]\n  (core/divide t divisor))\n\n;; Temporal adjusters\n\n#_(defn adjust [t adjuster]\n  (core/adjust t adjuster))\n\n;; Useful functions\n\n#_(defn dates-over [interval]\n  (let [interval (interval/interval interval)]\n    (s/assert :tick.interval/interval interval)\n    (interval/dates-over interval)))\n\n#_(defn year-months-over [interval]\n  (let [interval (interval/interval interval)]\n    (s/assert :tick.interval/interval interval)\n    (interval/year-months-over interval)))\n\n#_(defn years-over [interval]\n  (let [interval (interval/interval interval)]\n    (s/assert :tick.interval/interval interval)\n    (interval/years-over interval)))\n\n;; Note: Not sure about partition here for an individual interval. Should reserve for interval sets.\n\n#_(defn segment-by [f interval]\n  (let [interval (interval/interval interval)]\n    (s/assert :tick.interval/interval interval)\n    (interval/segment-by f interval)))\n\n#_(defn segment-by-date [interval]\n  (segment-by interval/dates-over interval))\n\n#_(defn group-segments-by [f interval]\n  (let [interval (interval/interval interval)]\n    (s/assert :tick.interval/interval interval)\n    (interval/group-segments-by f interval)))\n\n#_(defn group-segments-by-date [interval]\n  (group-segments-by interval/dates-over interval))\n\n;; Interval sets\n\n(def ordered-disjoint-intervals? interval/ordered-disjoint-intervals?)\n(def unite interval/unite)\n(def normalize interval/normalize)\n(def union interval/union)\n(def conj interval/conj)\n(def intersection interval/intersection)\n(def intersects? interval/intersects?)\n(def difference interval/difference)\n(def complement interval/complement)\n(def group-by interval/group-by)\n\n;; Formatting\n(defn format\n  ([o] (t.f/format o))\n  ([fmt o]\n    (t.f/format fmt o)))\n\n(defn ^DateTimeFormatter formatter\n  \"Constructs a DateTimeFormatter out of either a\n\n  * format string - \\\"YYYY/mm/DD\\\" \\\"YYY HH:MM\\\" etc.\n  or\n  * formatter name - :iso-instant :iso-date etc\"\n  ([fmt]\n   (t.f/formatter fmt))\n  ([fmt locale]\n    (t.f/formatter fmt locale)))\n"]}