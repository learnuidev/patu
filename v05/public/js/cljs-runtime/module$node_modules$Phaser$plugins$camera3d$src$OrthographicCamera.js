shadow$provide.module$node_modules$Phaser$plugins$camera3d$src$OrthographicCamera=function(global,require,module,exports){var Camera=require("module$node_modules$Phaser$plugins$camera3d$src$Camera");global=require("module$node_modules$Phaser$src$utils$Class");var tmpVec3=new (require("module$node_modules$Phaser$src$math$Vector3"));require=new global({Extends:Camera,initialize:function(scene,viewportWidth,viewportHeight){void 0===viewportWidth&&(viewportWidth=0);void 0===viewportHeight&&(viewportHeight=
0);Camera.call(this,scene);this.viewportWidth=viewportWidth;this.viewportHeight=viewportHeight;this._zoom=1;this.near=0;this.update()},setToOrtho:function(yDown,viewportWidth,viewportHeight){void 0===viewportWidth&&(viewportWidth=this.viewportWidth);void 0===viewportHeight&&(viewportHeight=this.viewportHeight);var zoom=this.zoom;this.up.set(0,yDown?-1:1,0);this.direction.set(0,0,yDown?1:-1);this.position.set(zoom*viewportWidth/2,zoom*viewportHeight/2,0);this.viewportWidth=viewportWidth;this.viewportHeight=
viewportHeight;return this.update()},update:function(){var w=this.viewportWidth,h=this.viewportHeight,zoom=this.zoom;if(0===w||0===h)return this;this.projection.ortho(zoom*-w/2,zoom*w/2,zoom*-h/2,zoom*h/2,Math.abs(this.near),Math.abs(this.far));tmpVec3.copy(this.position).add(this.direction);this.view.lookAt(this.position,tmpVec3,this.up);this.combined.copy(this.projection).multiply(this.view);this.invProjectionView.copy(this.combined).invert();this.billboardMatrixDirty=!0;this.updateChildren();return this},
zoom:{get:function(){return this._zoom},set:function(value){this._zoom=value;this.update()}}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$plugins$camera3d$src$OrthographicCamera.js.map
