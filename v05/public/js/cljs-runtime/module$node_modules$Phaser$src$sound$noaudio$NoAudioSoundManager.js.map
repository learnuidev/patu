{
"version":3,
"file":"module$node_modules$Phaser$src$sound$noaudio$NoAudioSoundManager.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,iEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQ7H,IAAIC,iBAAmBH,OAAA,CAAQ,uDAAR,CACnBI,OAAAA,CAAQJ,OAAA,CAAQ,4CAAR,CACZ,KAAIK,aAAeL,OAAA,CAAQ,yCAAR,CAAnB,CACIM,aAAeN,OAAA,CAAQ,2DAAR,CACfO,QAAAA,CAAOP,OAAA,CAAQ,2CAAR,CAmBPQ,QAAAA,CAAsB,IAAIJ,MAAJ,CAAU,CAEhCK,QAASJ,YAFuB;AAIhCK,WAEAF,QAA6B,CAACG,IAAD,CAC7B,CACIN,YAAAO,KAAA,CAAkB,IAAlB,CAEA,KAAAD,KAAA,CAAYA,IACZ,KAAAE,OAAA,CAAc,EACd,KAAAC,KAAA,CAAY,CAAA,CAEZ,KAAAC,KAAA,CADA,IAAAC,OACA,CADc,CAEd,KAAAC,OAAA,CAAc,CACd,KAAAC,YAAA,CAAmB,CAAA,CACnB,KAAAC,OAAA,CAAc,CAAA,CAVlB,CAPgC,CAoBhCC,IAAKA,QAAS,CAACC,GAAD,CAAMC,MAAN,CACd,CACQC,GAAAA,CAAQ,IAAIjB,YAAJ,CAAiB,IAAjB,CAAuBe,GAAvB,CAA4BC,MAA5B,CAEZ,KAAAT,OAAAW,KAAA,CAAiBD,GAAjB,CAEA,OAAOA,IALX,CArBgC,CA6BhCE,eAAgBA,QAAS,CAACJ,GAAD,CAAMC,MAAN,CACzB,CACQC,GAAAA,CAAQ,IAAAH,IAAA,CAASC,GAAT,CAAcC,MAAd,CAEZC,IAAAG,UAAA,CAAkB,EAElB,OAAOH,IALX,CA9BgC,CAuChCI,KAAMA,QAAS,CAACN,GAAD,CAAMO,KAAN,CACf,CACI,MAAO,CAAA,CADX,CAxCgC,CA6ChCC,gBAAiBA,QAAS,CAACR,GAAD,CAAMS,UAAN,CAAkBR,MAAlB,CAC1B,CACI,MAAO,CAAA,CADX,CA9CgC,CAkDhCS,OAAQA,QAAS,CAACR,KAAD,CACjB,CACI,MAAOpB,iBAAA6B,UAAAD,OAAAnB,KAAA,CAAuC,IAAvC;AAA6CW,KAA7C,CADX,CAnDgC,CAuDhCU,YAAaA,QAAS,CAACZ,GAAD,CACtB,CACI,MAAOlB,iBAAA6B,UAAAC,YAAArB,KAAA,CAA4C,IAA5C,CAAkDS,GAAlD,CADX,CAxDgC,CA4DhCa,SAAU3B,OA5DsB,CA6DhC4B,UAAW5B,OA7DqB,CA8DhC6B,QAAS7B,OA9DuB,CA+DhC8B,OAAQ9B,OA/DwB,CAgEhC+B,QAAS/B,OAhEuB,CAiEhCgC,UAAWhC,OAjEqB,CAkEhCiC,QAASjC,OAlEuB,CAmEhCkC,UAAWlC,OAnEqB,CAqEhCmC,mBAAoBA,QAAS,CAACC,UAAD,CAAaC,KAAb,CAC7B,CACIzC,gBAAA6B,UAAAU,mBAAA9B,KAAA,CAAmD,IAAnD,CAAyD+B,UAAzD,CAAqEC,KAArE,CADJ,CAtEgC,CA0EhCC,QAASA,QAAS,EAClB,CACI1C,gBAAA6B,UAAAa,QAAAjC,KAAA,CAAwC,IAAxC,CADJ,CA3EgC,CAAV,CAiF1BX,OAAAC,QAAA,CAAiBM,OAhH4G;",
"sources":["node_modules/Phaser/src/sound/noaudio/NoAudioSoundManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$sound$noaudio$NoAudioSoundManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar BaseSoundManager = require('../BaseSoundManager');\r\nvar Class = require('../../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar NoAudioSound = require('./NoAudioSound');\r\nvar NOOP = require('../../utils/NOOP');\r\n\r\n/**\r\n * @classdesc\r\n * No audio implementation of the sound manager. It is used if audio has been\r\n * disabled in the game config or the device doesn't support any audio.\r\n *\r\n * It represents a graceful degradation of sound manager logic that provides\r\n * minimal functionality and prevents Phaser projects that use audio from\r\n * breaking on devices that don't support any audio playback technologies.\r\n *\r\n * @class NoAudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberOf Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\r\nvar NoAudioSoundManager = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function NoAudioSoundManager (game)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        this.game = game;\r\n        this.sounds = [];\r\n        this.mute = false;\r\n        this.volume = 1;\r\n        this.rate = 1;\r\n        this.detune = 0;\r\n        this.pauseOnBlur = true;\r\n        this.locked = false;\r\n    },\r\n\r\n    add: function (key, config)\r\n    {\r\n        var sound = new NoAudioSound(this, key, config);\r\n\r\n        this.sounds.push(sound);\r\n\r\n        return sound;\r\n    },\r\n\r\n    addAudioSprite: function (key, config)\r\n    {\r\n        var sound = this.add(key, config);\r\n\r\n        sound.spritemap = {};\r\n\r\n        return sound;\r\n    },\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    play: function (key, extra)\r\n    {\r\n        return false;\r\n    },\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    playAudioSprite: function (key, spriteName, config)\r\n    {\r\n        return false;\r\n    },\r\n\r\n    remove: function (sound)\r\n    {\r\n        return BaseSoundManager.prototype.remove.call(this, sound);\r\n    },\r\n\r\n    removeByKey: function (key)\r\n    {\r\n        return BaseSoundManager.prototype.removeByKey.call(this, key);\r\n    },\r\n\r\n    pauseAll: NOOP,\r\n    resumeAll: NOOP,\r\n    stopAll: NOOP,\r\n    update: NOOP,\r\n    setRate: NOOP,\r\n    setDetune: NOOP,\r\n    setMute: NOOP,\r\n    setVolume: NOOP,\r\n\r\n    forEachActiveSound: function (callbackfn, scope)\r\n    {\r\n        BaseSoundManager.prototype.forEachActiveSound.call(this, callbackfn, scope);\r\n    },\r\n\r\n    destroy: function ()\r\n    {\r\n        BaseSoundManager.prototype.destroy.call(this);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = NoAudioSoundManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BaseSoundManager","Class","EventEmitter","NoAudioSound","NOOP","NoAudioSoundManager","Extends","initialize","game","call","sounds","mute","rate","volume","detune","pauseOnBlur","locked","add","key","config","sound","push","addAudioSprite","spritemap","play","extra","playAudioSprite","spriteName","remove","prototype","removeByKey","pauseAll","resumeAll","stopAll","update","setRate","setDetune","setMute","setVolume","forEachActiveSound","callbackfn","scope","destroy"]
}
