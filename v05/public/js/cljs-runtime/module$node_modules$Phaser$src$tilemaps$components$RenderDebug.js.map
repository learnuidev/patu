{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$RenderDebug.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/tilemaps/components/RenderDebug.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$RenderDebug\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar Color = require('../../display/color');\r\n\r\nvar defaultTileColor = new Color(105, 210, 231, 150);\r\nvar defaultCollidingTileColor = new Color(243, 134, 48, 200);\r\nvar defaultFaceColor = new Color(40, 39, 37, 150);\r\n\r\n/**\r\n * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n * wherever you want on the screen.\r\n *\r\n * @function Phaser.Tilemaps.Components.RenderDebug\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n * @param {?Phaser.Display.Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n * @param {?Phaser.Display.Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n * @param {?Phaser.Display.Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n * tile faces. If set to null, interesting tile faces will not be drawn.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar RenderDebug = function (graphics, styleConfig, layer)\r\n{\r\n    if (styleConfig === undefined) { styleConfig = {}; }\r\n\r\n    // Default colors without needlessly creating Color objects\r\n    var tileColor = (styleConfig.tileColor !== undefined) ? styleConfig.tileColor : defaultTileColor;\r\n    var collidingTileColor = (styleConfig.collidingTileColor !== undefined) ? styleConfig.collidingTileColor : defaultCollidingTileColor;\r\n    var faceColor = (styleConfig.faceColor !== undefined) ? styleConfig.faceColor : defaultFaceColor;\r\n\r\n    var tiles = GetTilesWithin(0, 0, layer.width, layer.height, null, layer);\r\n\r\n    graphics.translate(layer.tilemapLayer.x, layer.tilemapLayer.y);\r\n    graphics.scale(layer.tilemapLayer.scaleX, layer.tilemapLayer.scaleY);\r\n\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        var tile = tiles[i];\r\n\r\n        var tw = tile.width;\r\n        var th = tile.height;\r\n        var x = tile.pixelX;\r\n        var y = tile.pixelY;\r\n\r\n        var color = tile.collides ? collidingTileColor : tileColor;\r\n\r\n        if (color !== null)\r\n        {\r\n            graphics.fillStyle(color.color, color.alpha / 255);\r\n            graphics.fillRect(x, y, tw, th);\r\n        }\r\n\r\n        // Inset the face line to prevent neighboring tile's lines from overlapping\r\n        x += 1;\r\n        y += 1;\r\n        tw -= 2;\r\n        th -= 2;\r\n\r\n        if (faceColor !== null)\r\n        {\r\n            graphics.lineStyle(1, faceColor.color, faceColor.alpha / 255);\r\n\r\n            if (tile.faceTop) { graphics.lineBetween(x, y, x + tw, y); }\r\n            if (tile.faceRight) { graphics.lineBetween(x + tw, y, x + tw, y + th); }\r\n            if (tile.faceBottom) { graphics.lineBetween(x, y + th, x + tw, y + th); }\r\n            if (tile.faceLeft) { graphics.lineBetween(x, y, x, y + th); }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = RenderDebug;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetTilesWithin","Color","defaultTileColor","defaultCollidingTileColor","defaultFaceColor","RenderDebug","graphics","styleConfig","layer","undefined","tileColor","collidingTileColor","faceColor","tiles","width","height","translate","tilemapLayer","x","y","scale","scaleX","scaleY","i","length","tile","tw","th","pixelX","pixelY","color","collides","fillStyle","alpha","fillRect","lineStyle","faceTop","lineBetween","faceRight","faceBottom","faceLeft"]
}
