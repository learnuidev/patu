{"version":3,"sources":["app/functions.cljs"],"mappings":";;;;;AAwBA,AAGA,AAAC;AAAA,AAAA;;AAMD,AAAKA,AAAQ;AAAA,AAAA;AAAA;AAAA;AAIE,AAAA,AAAA;;AACf,AAACA;AAED,AAAA,AAAMC;AAAN,AAAA;;AACA,AAACA;AAID,AAAA,AAAMC,AAAcC,AAAEC;AAAtB,AACE,AAAGD,AAAEC;;AAGP,AAAA,AAAA,AAACF;AAGD,AAAA,AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI;;;;;AAAA,AAAA,AAAA,AAAMJ;AAAN,AAAA;;;AAAA,AAAA,AAAA,AAAMA,AAEFJ;AAFJ,AAAA;;;AAAA,AAAA,AAAA,AAAMI,AAGFJ,AAAEC;AAHN,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAMG,AAIFJ,AAAEC,AAAIe;AAJV,AAIgB,AAAA,AAAK,AAACC,AAAMD;;;AAJ5B;AAAA,AAAA,AAAA,AAAAN,AAAMN;AAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AAAA,AAAA,AAAMN;;AAAN,AAWA,AAAA,AAAAc,AAAAC,AAAAC;AAAA,AAAE,AAAA,AAAAF,AAAAC,AAAAC;AAAF,AAAA,AAAA;AAEA,AAAC,AAAKpB,AAAEC,AAAEoB;AAAT,AAAY,AAAA,AAAGrB,AAAEC,AAAEoB;AAApB,AAAA,AAAA","names":["app.functions/some-fn","app.functions/some-other-fn","app.functions/fn-with-args","a","b","var_args","G__28752","app.functions/multi-yo","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq28746","G__28749","cljs.core/first","cljs.core/next","G__28750","self__4723__auto__","args","cljs.core/count","p1__28815#","p2__28816#","p3__28817#","c"],"sourcesContent":["(ns app.functions)\n\n;; Data Literals\n1\n45.56\ntrue\n\"String\"\n:some-keyword\nfalse\n\n;; nil for\nnil\n\n;; collections\n;; ordered\n[1 2 3]\n'(1 2 3)\n\n;; unordered\n{:name \"John\"}\n#{:apples :oranges :pineapples}\n\n;; functions\n;; simplest function definition using fn\n(fn [])\n\n;; this is how you would call a function. returns nil\n((fn []))\n\n;; it can be useful to save a piece of data for later.\n;; can do it with repl\n;; everything is discared except for the\n;; last thing in the function\n(def some-fn (fn []\n               1\n               2\n               3\n               (+ 1 34)))\n(some-fn)\n\n(defn some-other-fn [])\n(some-other-fn)\n\n;; functions can have arguments\n;; arguments are ordered\n(defn fn-with-args [a b]\n  (+ a b))\n\n;; a is bound to 1 and b is bround to 2\n(fn-with-args 1 2)\n\n;; Multiple arity functions\n(defn multi-yo\n  ([] 0)\n  ([a] 1)\n  ([a b] 2)\n  ([a b & args] (+ 2 (count args))))\n#_(multi-yo 1 2 1 2 4 5)\n\n;; short cut functions\n;; concise way to declare functions\n;; %1 is bound to first arg 4, %2 => 2nd arg and so on\n\n(#(+ %1 %2 %3) 4 5 6)\n;; same as this functions\n((fn [a b c] (+ a b c)) 4 5 6)\n"]}