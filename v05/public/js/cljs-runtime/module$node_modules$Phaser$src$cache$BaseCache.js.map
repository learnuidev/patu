{
"version":3,
"file":"module$node_modules$Phaser$src$cache$BaseCache.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOvGC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,UAAYJ,OAAA,CAAQ,4CAAR,CAAhB,CACIK,aAAeL,OAAA,CAAQ,yCAAR,CAefM,QAAAA,CAAY,IAAIH,MAAJ,CAAU,CAEtBI,WAEAD,QAAmB,EACnB,CAUI,IAAAE,QAAA,CAAe,IAAIJ,SASnB,KAAAK,OAAA,CAAc,IAAIJ,YAnBtB,CALsB,CAmDtBK,IAAKA,QAAS,CAACC,GAAD,CAAMC,IAAN,CACd,CACI,IAAAJ,QAAAK,IAAA,CAAiBF,GAAjB,CAAsBC,IAAtB,CAEA,KAAAH,OAAAK,KAAA,CAAiB,KAAjB,CAAwB,IAAxB,CAA8BH,GAA9B,CAAmCC,IAAnC,CAEA,OAAO,KALX,CApDsB,CAuEtBG,IAAKA,QAAS,CAACJ,GAAD,CACd,CACI,MAAO,KAAAH,QAAAO,IAAA,CAAiBJ,GAAjB,CADX,CAxEsB;AAuFtBK,OAAQA,QAAS,CAACL,GAAD,CACjB,CACI,MAAO,KAAAH,QAAAO,IAAA,CAAiBJ,GAAjB,CADX,CAxFsB,CAsGtBM,IAAKA,QAAS,CAACN,GAAD,CACd,CACI,MAAO,KAAAH,QAAAS,IAAA,CAAiBN,GAAjB,CADX,CAvGsB,CAqItBO,OAAQA,QAAS,CAACP,GAAD,CACjB,CACI,IAAIQ,MAAQ,IAAAF,IAAA,CAASN,GAAT,CAERQ,MAAJ,GAEI,IAAAX,QAAAY,OAAA,CAAoBT,GAApB,CAEA,CAAA,IAAAF,OAAAK,KAAA,CAAiB,QAAjB,CAA2B,IAA3B,CAAiCH,GAAjC,CAAsCQ,KAAAP,KAAtC,CAJJ,CAOA,OAAO,KAVX,CAtIsB,CAyJtBS,QAASA,QAAS,EAClB,CACI,IAAAb,QAAAc,MAAA,EACA,KAAAb,OAAAc,mBAAA,EAGA,KAAAd,OAAA,CADA,IAAAD,QACA,CADe,IAJnB,CA1JsB,CAAV,CAoKhBP,OAAAC,QAAA,CAAiBI,OA5L0F;",
"sources":["node_modules/Phaser/src/cache/BaseCache.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$cache$BaseCache\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar CustomMap = require('../structs/Map');\r\nvar EventEmitter = require('eventemitter3');\r\n\r\n/**\r\n * @classdesc\r\n * The BaseCache is a base Cache class that can be used for storing references to any kind of data.\r\n *\r\n * Data can be added, retrieved and removed based on the given keys.\r\n *\r\n * Keys are string-based.\r\n *\r\n * @class BaseCache\r\n * @memberOf Phaser.Cache\r\n * @constructor\r\n * @since 3.0.0\r\n */\r\nvar BaseCache = new Class({\r\n\r\n    initialize:\r\n\r\n    function BaseCache ()\r\n    {\r\n        /**\r\n         * The Map in which the cache objects are stored.\r\n         *\r\n         * You can query the Map directly or use the BaseCache methods.\r\n         *\r\n         * @name Phaser.Cache.BaseCache#entries\r\n         * @type {Phaser.Structs.Map.<String, *>}\r\n         * @since 3.0.0\r\n         */\r\n        this.entries = new CustomMap();\r\n\r\n        /**\r\n         * An instance of EventEmitter used by the cache to emit related events.\r\n         *\r\n         * @name Phaser.Cache.BaseCache#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events = new EventEmitter();\r\n    },\r\n\r\n    /**\r\n     * Cache add event.\r\n     *\r\n     * This event is fired by the Cache each time a new object is added to it.\r\n     *\r\n     * @event Phaser.Cache.BaseCache#addEvent\r\n     * @param {Phaser.Cache.BaseCache} cache - The BaseCache to which the object was added.\r\n     * @param {string} key - The key of the object added to the cache.\r\n     * @param {*} object - A reference to the object added to the cache.\r\n     */\r\n\r\n    /**\r\n     * Adds an item to this cache. The item is referenced by a unique string, which you are responsible\r\n     * for setting and keeping track of. The item can only be retrieved by using this string.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#add\r\n     * @fires Phaser.Cache.BaseCache#addEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key by which the data added to the cache will be referenced.\r\n     * @param {*} data - The data to be stored in the cache.\r\n     *\r\n     * @return {Phaser.Cache.BaseCache} This BaseCache object.\r\n     */\r\n    add: function (key, data)\r\n    {\r\n        this.entries.set(key, data);\r\n\r\n        this.events.emit('add', this, key, data);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks if this cache contains an item matching the given key.\r\n     * This performs the same action as `BaseCache.exists`.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#has\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key of the item to be checked in this cache.\r\n     *\r\n     * @return {boolean} Returns `true` if the cache contains an item matching the given key, otherwise `false`.\r\n     */\r\n    has: function (key)\r\n    {\r\n        return this.entries.has(key);\r\n    },\r\n\r\n    /**\r\n     * Checks if this cache contains an item matching the given key.\r\n     * This performs the same action as `BaseCache.has` and is called directly by the Loader.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#exists\r\n     * @since 3.7.0\r\n     *\r\n     * @param {string} key - The unique key of the item to be checked in this cache.\r\n     *\r\n     * @return {boolean} Returns `true` if the cache contains an item matching the given key, otherwise `false`.\r\n     */\r\n    exists: function (key)\r\n    {\r\n        return this.entries.has(key);\r\n    },\r\n\r\n    /**\r\n     * Gets an item from this cache based on the given key.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key of the item to be retrieved from this cache.\r\n     *\r\n     * @return {*} The item in the cache, or `null` if no item matching the given key was found.\r\n     */\r\n    get: function (key)\r\n    {\r\n        return this.entries.get(key);\r\n    },\r\n\r\n    /**\r\n     * Cache remove event.\r\n     *\r\n     * This event is fired by the Cache each time an object is removed from it.\r\n     *\r\n     * @event Phaser.Cache.BaseCache#removeEvent\r\n     * @param {Phaser.Cache.BaseCache} cache - The BaseCache from which the object was removed.\r\n     * @param {string} key - The key of the object removed from the cache.\r\n     * @param {*} object - The object that was removed from the cache.\r\n     */\r\n\r\n    /**\r\n     * Removes and item from this cache based on the given key.\r\n     *\r\n     * If an entry matching the key is found it is removed from the cache and a `remove` event emitted.\r\n     * No additional checks are done on the item removed. If other systems or parts of your game code\r\n     * are relying on this item, it is up to you to sever those relationships prior to removing the item.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#remove\r\n     * @fires Phaser.Cache.BaseCache#removeEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key of the item to remove from the cache.\r\n     *\r\n     * @return {Phaser.Cache.BaseCache} This BaseCache object.\r\n     */\r\n    remove: function (key)\r\n    {\r\n        var entry = this.get(key);\r\n\r\n        if (entry)\r\n        {\r\n            this.entries.delete(key);\r\n\r\n            this.events.emit('remove', this, key, entry.data);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroys this cache and all items within it.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.entries.clear();\r\n        this.events.removeAllListeners();\r\n\r\n        this.entries = null;\r\n        this.events = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = BaseCache;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","CustomMap","EventEmitter","BaseCache","initialize","entries","events","add","key","data","set","emit","has","exists","get","remove","entry","delete","destroy","clear","removeAllListeners"]
}
