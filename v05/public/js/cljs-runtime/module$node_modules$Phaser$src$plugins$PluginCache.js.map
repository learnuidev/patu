{
"version":3,
"file":"module$node_modules$Phaser$src$plugins$PluginCache.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,mDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAS/G,IAAIC,YAAc,EAAlB,CAIIC,cAAgB,EA0MpBH,OAAAC,QAAA,CAxLkBG,CAgBN,SAAWC,QAAS,CAACC,GAAD,CAAMC,MAAN,CAAcC,OAAd,CAAuBC,MAAvB,CAChC,CACmBC,IAAAA,EAAf,GAAID,MAAJ,GAA4BA,MAA5B,CAAqC,CAAA,CAArC,CAEAP,YAAA,CAAYI,GAAZ,CAAA,CAAmB,CAAEC,OAAQA,MAAV,CAAkBC,QAASA,OAA3B,CAAoCC,OAAQA,MAA5C,CAHvB,CAjBkBL,CAmCN,eAAiBO,QAAS,CAACL,GAAD,CAAMC,MAAN,CAAcC,OAAd,CAAuBI,IAAvB,CACtC,CACIT,aAAA,CAAcG,GAAd,CAAA,CAAqB,CAAEC,OAAQA,MAAV,CAAkBC,QAASA,OAA3B,CAAoCI,KAAMA,IAA1C,CADzB,CApCkBR,CAkDN,QAAUS,QAAS,CAACP,GAAD,CAC/B,CACI,MAAOJ,YAAAY,eAAA,CAA2BR,GAA3B,CADX,CAnDkBF,CAiEN,UAAYW,QAAS,CAACT,GAAD,CACjC,CACI,MAAOH,cAAAW,eAAA,CAA6BR,GAA7B,CADX,CAlEkBF;AAgFN,QAAUY,QAAS,CAACV,GAAD,CAC/B,CACI,MAAOJ,YAAA,CAAYI,GAAZ,CADX,CAjFkBF,CA+FN,UAAYa,QAAS,CAACX,GAAD,CACjC,CACI,MAAOH,cAAA,CAAcG,GAAd,CADX,CAhGkBF,CA8GN,eAAiBc,QAAS,CAACZ,GAAD,CACtC,CACI,MAAQH,cAAAW,eAAA,CAA6BR,GAA7B,CAAD,CAAsCH,aAAA,CAAcG,GAAd,CAAAC,OAAtC,CAAkE,IAD7E,CA/GkBH,CA2HN,OAASe,QAAS,CAACb,GAAD,CAC9B,CACQJ,WAAAY,eAAA,CAA2BR,GAA3B,CAAJ,EAEI,OAAOJ,WAAA,CAAYI,GAAZ,CAHf,CA5HkBF,CA2IN,aAAegB,QAAS,CAACd,GAAD,CACpC,CACQH,aAAAW,eAAA,CAA6BR,GAA7B,CAAJ,EAEI,OAAOH,aAAA,CAAcG,GAAd,CAHf,CA5IkBF,CA4JN,mBAAqBiB,QAAS,EAC1C,CACI,IAAKf,IAAIA,GAAT,GAAgBJ,YAAhB,CAEQA,WAAAY,eAAA,CAA2BR,GAA3B,CAAJ,EAEI,OAAOJ,WAAA,CAAYI,GAAZ,CALnB,CA7JkBF,CA6KN,qBAAuBkB,QAAS,EAC5C,CACI,IAAKhB,IAAIA,GAAT,GAAgBH,cAAhB,CAEQA,aAAAW,eAAA,CAA6BR,GAA7B,CAAJ;AAEI,OAAOH,aAAA,CAAcG,GAAd,CALnB,CA9KkBF,CA/B6F;",
"sources":["node_modules/Phaser/src/plugins/PluginCache.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$plugins$PluginCache\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n//  Contains the plugins that Phaser uses globally and locally.\r\n//  These are the source objects, not instantiated.\r\nvar corePlugins = {};\r\n\r\n//  Contains the plugins that the dev has loaded into their game\r\n//  These are the source objects, not instantiated.\r\nvar customPlugins = {};\r\n\r\n/**\r\n * @typedef {object} CorePluginContainer\r\n *\r\n * @property {string} key - The unique name of this plugin in the core plugin cache.\r\n * @property {function} plugin - The plugin to be stored. Should be the source object, not instantiated.\r\n * @property {string} [mapping] - If this plugin is to be injected into the Scene Systems, this is the property key map used.\r\n * @property {boolean} [custom=false] - Core Scene plugin or a Custom Scene plugin?\r\n */\r\n\r\n/**\r\n * @typedef {object} CustomPluginContainer\r\n *\r\n * @property {string} key - The unique name of this plugin in the custom plugin cache.\r\n * @property {function} plugin - The plugin to be stored. Should be the source object, not instantiated.\r\n */\r\n\r\nvar PluginCache = {};\r\n\r\n/**\r\n * Static method called directly by the Core internal Plugins.\r\n * Key is a reference used to get the plugin from the plugins object (i.e. InputPlugin)\r\n * Plugin is the object to instantiate to create the plugin\r\n * Mapping is what the plugin is injected into the Scene.Systems as (i.e. input)\r\n *\r\n * @method Phaser.Plugins.PluginCache.register\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - A reference used to get this plugin from the plugin cache.\r\n * @param {function} plugin - The plugin to be stored. Should be the core object, not instantiated.\r\n * @param {string} mapping - If this plugin is to be injected into the Scene Systems, this is the property key map used.\r\n * @param {boolean} [custom=false] - Core Scene plugin or a Custom Scene plugin?\r\n */\r\nPluginCache.register = function (key, plugin, mapping, custom)\r\n{\r\n    if (custom === undefined) { custom = false; }\r\n\r\n    corePlugins[key] = { plugin: plugin, mapping: mapping, custom: custom };\r\n};\r\n\r\n/**\r\n * Stores a custom plugin in the global plugin cache.\r\n * The key must be unique, within the scope of the cache.\r\n *\r\n * @method Phaser.Plugins.PluginCache.registerCustom\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - A reference used to get this plugin from the plugin cache.\r\n * @param {function} plugin - The plugin to be stored. Should be the core object, not instantiated.\r\n * @param {string} mapping - If this plugin is to be injected into the Scene Systems, this is the property key map used.\r\n * @param {?any} data - A value to be passed to the plugin's `init` method.\r\n */\r\nPluginCache.registerCustom = function (key, plugin, mapping, data)\r\n{\r\n    customPlugins[key] = { plugin: plugin, mapping: mapping, data: data };\r\n};\r\n\r\n/**\r\n * Checks if the given key is already being used in the core plugin cache.\r\n *\r\n * @method Phaser.Plugins.PluginCache.hasCore\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key to check for.\r\n *\r\n * @return {boolean} `true` if the key is already in use in the core cache, otherwise `false`.\r\n */\r\nPluginCache.hasCore = function (key)\r\n{\r\n    return corePlugins.hasOwnProperty(key);\r\n};\r\n\r\n/**\r\n * Checks if the given key is already being used in the custom plugin cache.\r\n *\r\n * @method Phaser.Plugins.PluginCache.hasCustom\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key to check for.\r\n *\r\n * @return {boolean} `true` if the key is already in use in the custom cache, otherwise `false`.\r\n */\r\nPluginCache.hasCustom = function (key)\r\n{\r\n    return customPlugins.hasOwnProperty(key);\r\n};\r\n\r\n/**\r\n * Returns the core plugin object from the cache based on the given key.\r\n *\r\n * @method Phaser.Plugins.PluginCache.getCore\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the core plugin to get.\r\n *\r\n * @return {CorePluginContainer} The core plugin object.\r\n */\r\nPluginCache.getCore = function (key)\r\n{\r\n    return corePlugins[key];\r\n};\r\n\r\n/**\r\n * Returns the custom plugin object from the cache based on the given key.\r\n *\r\n * @method Phaser.Plugins.PluginCache.getCustom\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the custom plugin to get.\r\n *\r\n * @return {CustomPluginContainer} The custom plugin object.\r\n */\r\nPluginCache.getCustom = function (key)\r\n{\r\n    return customPlugins[key];\r\n};\r\n\r\n/**\r\n * Returns an object from the custom cache based on the given key that can be instantiated.\r\n *\r\n * @method Phaser.Plugins.PluginCache.getCustomClass\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the custom plugin to get.\r\n *\r\n * @return {function} The custom plugin object.\r\n */\r\nPluginCache.getCustomClass = function (key)\r\n{\r\n    return (customPlugins.hasOwnProperty(key)) ? customPlugins[key].plugin : null;\r\n};\r\n\r\n/**\r\n * Removes a core plugin based on the given key.\r\n *\r\n * @method Phaser.Plugins.PluginCache.remove\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the core plugin to remove.\r\n */\r\nPluginCache.remove = function (key)\r\n{\r\n    if (corePlugins.hasOwnProperty(key))\r\n    {\r\n        delete corePlugins[key];\r\n    }\r\n};\r\n\r\n/**\r\n * Removes a custom plugin based on the given key.\r\n *\r\n * @method Phaser.Plugins.PluginCache.removeCustom\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the custom plugin to remove.\r\n */\r\nPluginCache.removeCustom = function (key)\r\n{\r\n    if (customPlugins.hasOwnProperty(key))\r\n    {\r\n        delete customPlugins[key];\r\n    }\r\n};\r\n\r\n/**\r\n * Removes all Core Plugins.\r\n * \r\n * This includes all of the internal system plugins that Phaser needs, like the Input Plugin and Loader Plugin.\r\n * So be sure you only call this if you do not wish to run Phaser again.\r\n *\r\n * @method Phaser.Plugins.PluginCache.destroyCorePlugins\r\n * @since 3.12.0\r\n */\r\nPluginCache.destroyCorePlugins = function ()\r\n{\r\n    for (var key in corePlugins)\r\n    {\r\n        if (corePlugins.hasOwnProperty(key))\r\n        {\r\n            delete corePlugins[key];\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Removes all Custom Plugins.\r\n *\r\n * @method Phaser.Plugins.PluginCache.destroyCustomPlugins\r\n * @since 3.12.0\r\n */\r\nPluginCache.destroyCustomPlugins = function ()\r\n{\r\n    for (var key in customPlugins)\r\n    {\r\n        if (customPlugins.hasOwnProperty(key))\r\n        {\r\n            delete customPlugins[key];\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = PluginCache;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","corePlugins","customPlugins","PluginCache","PluginCache.register","key","plugin","mapping","custom","undefined","PluginCache.registerCustom","data","PluginCache.hasCore","hasOwnProperty","PluginCache.hasCustom","PluginCache.getCore","PluginCache.getCustom","PluginCache.getCustomClass","PluginCache.remove","PluginCache.removeCustom","PluginCache.destroyCorePlugins","PluginCache.destroyCustomPlugins"]
}
