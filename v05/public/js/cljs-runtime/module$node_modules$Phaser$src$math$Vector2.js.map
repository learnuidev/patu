{
"version":3,
"file":"module$node_modules$Phaser$src$math$Vector2.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/math/Vector2.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$Vector2\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @typedef {object} Vector2Like\r\n *\r\n * @property {number} x - The x component.\r\n * @property {number} y - The y component.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A representation of a vector in 2D space.\r\n *\r\n * A two-component vector.\r\n *\r\n * @class Vector2\r\n * @memberOf Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number|Vector2Like} [x] - The x component, or an object with `x` and `y` properties.\r\n * @param {number} [y] - The y component.\r\n */\r\nvar Vector2 = new Class({\r\n\r\n    initialize:\r\n\r\n    function Vector2 (x, y)\r\n    {\r\n        /**\r\n         * The x component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector2#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = 0;\r\n\r\n        /**\r\n         * The y component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector2#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = 0;\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n        }\r\n        else\r\n        {\r\n            if (y === undefined) { y = x; }\r\n\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Make a clone of this Vector2.\r\n     *\r\n     * @method Phaser.Math.Vector2#clone\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector2} A clone of this Vector2.\r\n     */\r\n    clone: function ()\r\n    {\r\n        return new Vector2(this.x, this.y);\r\n    },\r\n\r\n    /**\r\n     * Copy the components of a given Vector into this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector2#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} src - The Vector to copy the components from.\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        this.x = src.x || 0;\r\n        this.y = src.y || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the component values of this Vector from a given Vector2Like object.\r\n     *\r\n     * @method Phaser.Math.Vector2#setFromObject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Vector2Like} obj - The object containing the component values to set for this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    setFromObject: function (obj)\r\n    {\r\n        this.x = obj.x || 0;\r\n        this.y = obj.y || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the `x` and `y` components of the this Vector to the given `x` and `y` values.\r\n     *\r\n     * @method Phaser.Math.Vector2#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x value to set for this Vector.\r\n     * @param {number} [y=x] - The y value to set for this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    set: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * This method is an alias for `Vector2.set`.\r\n     *\r\n     * @method Phaser.Math.Vector2#setTo\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} x - The x value to set for this Vector.\r\n     * @param {number} [y=x] - The y value to set for this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    setTo: function (x, y)\r\n    {\r\n        return this.set(x, y);\r\n    },\r\n\r\n    /**\r\n     * Sets the `x` and `y` values of this object from a given polar coordinate.\r\n     *\r\n     * @method Phaser.Math.Vector2#setToPolar\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} azimuth - The angular coordinate, in radians.\r\n     * @param {number} [radius=1] - The radial coordinate (length).\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    setToPolar: function (azimuth, radius)\r\n    {\r\n        if (radius == null) { radius = 1; }\r\n\r\n        this.x = Math.cos(azimuth) * radius;\r\n        this.y = Math.sin(azimuth) * radius;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Check whether this Vector is equal to a given Vector.\r\n     *\r\n     * Performs a strict equality check against each Vector's components.\r\n     *\r\n     * @method Phaser.Math.Vector2#equals\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} v - The vector to compare with this Vector.\r\n     *\r\n     * @return {boolean} Whether the given Vector is equal to this Vector.\r\n     */\r\n    equals: function (v)\r\n    {\r\n        return ((this.x === v.x) && (this.y === v.y));\r\n    },\r\n\r\n    /**\r\n     * Calculate the angle between this Vector and the positive x-axis, in radians.\r\n     *\r\n     * @method Phaser.Math.Vector2#angle\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The angle between this Vector, and the positive x-axis, given in radians.\r\n     */\r\n    angle: function ()\r\n    {\r\n        // computes the angle in radians with respect to the positive x-axis\r\n\r\n        var angle = Math.atan2(this.y, this.x);\r\n\r\n        if (angle < 0)\r\n        {\r\n            angle += 2 * Math.PI;\r\n        }\r\n\r\n        return angle;\r\n    },\r\n\r\n    /**\r\n     * Add a given Vector to this Vector. Addition is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector2#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} src - The Vector to add to this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    add: function (src)\r\n    {\r\n        this.x += src.x;\r\n        this.y += src.y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Subtract the given Vector from this Vector. Subtraction is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector2#subtract\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} src - The Vector to subtract from this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    subtract: function (src)\r\n    {\r\n        this.x -= src.x;\r\n        this.y -= src.y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise multiplication between this Vector and the given Vector.\r\n     *\r\n     * Multiplies this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector2#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} src - The Vector to multiply this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    multiply: function (src)\r\n    {\r\n        this.x *= src.x;\r\n        this.y *= src.y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale this Vector by the given value.\r\n     *\r\n     * @method Phaser.Math.Vector2#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The value to scale this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    scale: function (value)\r\n    {\r\n        if (isFinite(value))\r\n        {\r\n            this.x *= value;\r\n            this.y *= value;\r\n        }\r\n        else\r\n        {\r\n            this.x = 0;\r\n            this.y = 0;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise division between this Vector and the given Vector.\r\n     *\r\n     * Divides this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector2#divide\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} src - The Vector to divide this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    divide: function (src)\r\n    {\r\n        this.x /= src.x;\r\n        this.y /= src.y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Negate the `x` and `y` components of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector2#negate\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    negate: function ()\r\n    {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector2#distance\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} src - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector.\r\n     */\r\n    distance: function (src)\r\n    {\r\n        var dx = src.x - this.x;\r\n        var dy = src.y - this.y;\r\n\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector, squared.\r\n     *\r\n     * @method Phaser.Math.Vector2#distanceSq\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} src - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector, squared.\r\n     */\r\n    distanceSq: function (src)\r\n    {\r\n        var dx = src.x - this.x;\r\n        var dy = src.y - this.y;\r\n\r\n        return dx * dx + dy * dy;\r\n    },\r\n\r\n    /**\r\n     * Calculate the length (or magnitude) of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector2#length\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector.\r\n     */\r\n    length: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n\r\n        return Math.sqrt(x * x + y * y);\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Vector squared.\r\n     *\r\n     * @method Phaser.Math.Vector2#lengthSq\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector, squared.\r\n     */\r\n    lengthSq: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n\r\n        return x * x + y * y;\r\n    },\r\n\r\n    /**\r\n     * Normalize this Vector.\r\n     *\r\n     * Makes the vector a unit length vector (magnitude of 1) in the same direction.\r\n     *\r\n     * @method Phaser.Math.Vector2#normalize\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    normalize: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var len = x * x + y * y;\r\n\r\n        if (len > 0)\r\n        {\r\n            len = 1 / Math.sqrt(len);\r\n\r\n            this.x = x * len;\r\n            this.y = y * len;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Right-hand normalize (make unit length) this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector2#normalizeRightHand\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    normalizeRightHand: function ()\r\n    {\r\n        var x = this.x;\r\n\r\n        this.x = this.y * -1;\r\n        this.y = x;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the dot product of this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector2#dot\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} src - The Vector2 to dot product with this Vector2.\r\n     *\r\n     * @return {number} The dot product of this Vector and the given Vector.\r\n     */\r\n    dot: function (src)\r\n    {\r\n        return this.x * src.x + this.y * src.y;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Math.Vector2#cross\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} src - [description]\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    cross: function (src)\r\n    {\r\n        return this.x * src.y - this.y * src.x;\r\n    },\r\n\r\n    /**\r\n     * Linearly interpolate between this Vector and the given Vector.\r\n     *\r\n     * Interpolates this Vector towards the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector2#lerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} src - The Vector2 to interpolate towards.\r\n     * @param {number} [t=0] - The interpolation percentage, between 0 and 1.\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    lerp: function (src, t)\r\n    {\r\n        if (t === undefined) { t = 0; }\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n\r\n        this.x = ax + t * (src.x - ax);\r\n        this.y = ay + t * (src.y - ay);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Vector2#transformMat3\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} mat - The Matrix3 to transform this Vector2 with.\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    transformMat3: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var m = mat.val;\r\n\r\n        this.x = m[0] * x + m[3] * y + m[6];\r\n        this.y = m[1] * x + m[4] * y + m[7];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Vector2#transformMat4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector2 with.\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    transformMat4: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var m = mat.val;\r\n\r\n        this.x = m[0] * x + m[4] * y + m[12];\r\n        this.y = m[1] * x + m[5] * y + m[13];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Make this Vector the zero vector (0, 0).\r\n     *\r\n     * @method Phaser.Math.Vector2#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector2} This Vector2.\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 0;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * A static zero Vector2 for use by reference.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector2.ZERO\r\n * @type {Vector2}\r\n * @since 3.1.0\r\n */\r\nVector2.ZERO = new Vector2();\r\n\r\nmodule.exports = Vector2;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Vector2","Class","initialize","x","y","undefined","clone","copy","src","setFromObject","obj","set","setTo","setToPolar","azimuth","radius","Math","cos","sin","equals","v","angle","atan2","PI","add","subtract","multiply","scale","value","isFinite","divide","negate","distance","dx","dy","sqrt","distanceSq","length","lengthSq","normalize","len","normalizeRightHand","dot","cross","lerp","t","ax","ay","transformMat3","mat","m","val","transformMat4","reset","ZERO"]
}
