{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$Tilemap.js",
"lineCount":36,
"mappings":"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",
"sources":["node_modules/Phaser/src/tilemaps/Tilemap.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$Tilemap\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar DegToRad = require('../math/DegToRad');\r\nvar DynamicTilemapLayer = require('./dynamiclayer/DynamicTilemapLayer.js');\r\nvar Extend = require('../utils/object/Extend');\r\nvar Formats = require('./Formats');\r\nvar LayerData = require('./mapdata/LayerData');\r\nvar Rotate = require('../math/Rotate');\r\nvar StaticTilemapLayer = require('./staticlayer/StaticTilemapLayer.js');\r\nvar Tile = require('./Tile');\r\nvar TilemapComponents = require('./components');\r\nvar Tileset = require('./Tileset');\r\n\r\n/**\r\n * @callback TilemapFilterCallback\r\n *\r\n * @param {Phaser.GameObjects.GameObject} value - An object found in the filtered area.\r\n * @param {number} index - The index of the object within the array.\r\n * @param {Phaser.GameObjects.GameObject[]} array - An array of all the objects found.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The object.\r\n */\r\n\r\n/**\r\n * @callback TilemapFindCallback\r\n *\r\n * @param {Phaser.GameObjects.GameObject} value - An object found.\r\n * @param {number} index - The index of the object within the array.\r\n * @param {Phaser.GameObjects.GameObject[]} array - An array of all the objects found.\r\n *\r\n * @return {boolean} `true` if the callback should be invoked, otherwise `false`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A Tilemap is a container for Tilemap data. This isn't a display object, rather, it holds data\r\n * about the map and allows you to add tilesets and tilemap layers to it. A map can have one or\r\n * more tilemap layers (StaticTilemapLayer or DynamicTilemapLayer), which are the display\r\n * objects that actually render tiles.\r\n *\r\n * The Tilemap data be parsed from a Tiled JSON file, a CSV file or a 2D array. Tiled is a free\r\n * software package specifically for creating tile maps, and is available from:\r\n * http://www.mapeditor.org\r\n *\r\n * A Tilemap has handy methods for getting & manipulating the tiles within a layer. You can only\r\n * use the methods that change tiles (e.g. removeTileAt) on a DynamicTilemapLayer.\r\n *\r\n * Note that all Tilemaps use a base tile size to calculate dimensions from, but that a\r\n * StaticTilemapLayer or DynamicTilemapLayer may have its own unique tile size that overrides\r\n * it.\r\n *\r\n * @class Tilemap\r\n * @memberOf Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Tilemap belongs.\r\n * @param {Phaser.Tilemaps.MapData} mapData - A MapData instance containing Tilemap data.\r\n */\r\nvar Tilemap = new Class({\r\n\r\n    initialize:\r\n\r\n    function Tilemap (scene, mapData)\r\n    {\r\n        /**\r\n         * @name Phaser.Tilemaps.Tilemap#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * The base width of a tile in pixels. Note that individual layers may have a different tile\r\n         * width.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#tileWidth\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileWidth = mapData.tileWidth;\r\n\r\n        /**\r\n         * The base height of a tile in pixels. Note that individual layers may have a different\r\n         * tile height.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#tileHeight\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileHeight = mapData.tileHeight;\r\n\r\n        /**\r\n         * The width of the map (in tiles).\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#width\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = mapData.width;\r\n\r\n        /**\r\n         * The height of the map (in tiles).\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#height\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = mapData.height;\r\n\r\n        /**\r\n         * The orientation of the map data (as specified in Tiled), usually 'orthogonal'.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#orientation\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.orientation = mapData.orientation;\r\n\r\n        /**\r\n         * The render (draw) order of the map data (as specified in Tiled), usually 'right-down'.\r\n         * \r\n         * The draw orders are:\r\n         * \r\n         * right-down\r\n         * left-down\r\n         * right-up\r\n         * left-up\r\n         * \r\n         * This can be changed via the `setRenderOrder` method.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#renderOrder\r\n         * @type {string}\r\n         * @since 3.12.0\r\n         */\r\n        this.renderOrder = mapData.renderOrder;\r\n\r\n        /**\r\n         * The format of the map data.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#format\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.format = mapData.format;\r\n\r\n        /**\r\n         * The version of the map data (as specified in Tiled, usually 1).\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#version\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.version = mapData.version;\r\n\r\n        /**\r\n         * Map specific properties as specified in Tiled.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#properties\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.properties = mapData.properties;\r\n\r\n        /**\r\n         * The width of the map in pixels based on width * tileWidth.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#widthInPixels\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.widthInPixels = mapData.widthInPixels;\r\n\r\n        /**\r\n         * The height of the map in pixels based on height * tileHeight.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#heightInPixels\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.heightInPixels = mapData.heightInPixels;\r\n\r\n        /**\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#imageCollections\r\n         * @type {Phaser.Tilemaps.ImageCollection[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.imageCollections = mapData.imageCollections;\r\n\r\n        /**\r\n         * An array of Tiled Image Layers.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#images\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.images = mapData.images;\r\n\r\n        /**\r\n         * An array of Tilemap layer data.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#layers\r\n         * @type {Phaser.Tilemaps.LayerData[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.layers = mapData.layers;\r\n\r\n        /**\r\n         * An array of Tilesets used in the map.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#tilesets\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilesets = mapData.tilesets;\r\n\r\n        /**\r\n         * An array of ObjectLayer instances parsed from Tiled object layers.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#objects\r\n         * @type {Phaser.Tilemaps.ObjectLayer[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.objects = mapData.objects;\r\n\r\n        /**\r\n         * The index of the currently selected LayerData object.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#currentLayerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.currentLayerIndex = 0;\r\n    },\r\n\r\n    /**\r\n     * Sets the rendering (draw) order of the tiles in this map.\r\n     * \r\n     * The default is 'right-down', meaning it will order the tiles starting from the top-left,\r\n     * drawing to the right and then moving down to the next row.\r\n     * \r\n     * The draw orders are:\r\n     * \r\n     * 0 = right-down\r\n     * 1 = left-down\r\n     * 2 = right-up\r\n     * 3 = left-up\r\n     * \r\n     * Setting the render order does not change the tiles or how they are stored in the layer,\r\n     * it purely impacts the order in which they are rendered.\r\n     * \r\n     * You can provide either an integer (0 to 3), or the string version of the order.\r\n     * \r\n     * Calling this method _after_ creating Static or Dynamic Tilemap Layers will **not** automatically\r\n     * update them to use the new render order. If you call this method after creating layers, use their\r\n     * own `setRenderOrder` methods to change them as needed.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setRenderOrder\r\n     * @since 3.12.0\r\n     *\r\n     * @param {(integer|string)} renderOrder - The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.\r\n     *\r\n     * @return {this} This Tilemap object.\r\n     */\r\n    setRenderOrder: function (renderOrder)\r\n    {\r\n        var orders = [ 'right-down', 'left-down', 'right-up', 'left-up' ];\r\n\r\n        if (typeof renderOrder === 'number')\r\n        {\r\n            renderOrder = orders[renderOrder];\r\n        }\r\n\r\n        if (orders.indexOf(renderOrder) > -1)\r\n        {\r\n            this.renderOrder = renderOrder;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds an image to the map to be used as a tileset. A single map may use multiple tilesets.\r\n     * Note that the tileset name can be found in the JSON file exported from Tiled, or in the Tiled\r\n     * editor.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#addTilesetImage\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} tilesetName - The name of the tileset as specified in the map data.\r\n     * @param {string} [key] - The key of the Phaser.Cache image used for this tileset. If\r\n     * `undefined` or `null` it will look for an image with a key matching the tilesetName parameter.\r\n     * @param {integer} [tileWidth] - The width of the tile (in pixels) in the Tileset Image. If not\r\n     * given it will default to the map's tileWidth value, or the tileWidth specified in the Tiled\r\n     * JSON file.\r\n     * @param {integer} [tileHeight] - The height of the tiles (in pixels) in the Tileset Image. If\r\n     * not given it will default to the map's tileHeight value, or the tileHeight specified in the\r\n     * Tiled JSON file.\r\n     * @param {integer} [tileMargin] - The margin around the tiles in the sheet (in pixels). If not\r\n     * specified, it will default to 0 or the value specified in the Tiled JSON file.\r\n     * @param {integer} [tileSpacing] - The spacing between each the tile in the sheet (in pixels).\r\n     * If not specified, it will default to 0 or the value specified in the Tiled JSON file.\r\n     * @param {integer} [gid=0] - If adding multiple tilesets to a blank map, specify the starting\r\n     * GID this set will use here.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tileset} Returns the Tileset object that was created or updated, or null if it\r\n     * failed.\r\n     */\r\n    addTilesetImage: function (tilesetName, key, tileWidth, tileHeight, tileMargin, tileSpacing, gid)\r\n    {\r\n        if (tilesetName === undefined) { return null; }\r\n        if (key === undefined || key === null) { key = tilesetName; }\r\n\r\n        if (!this.scene.sys.textures.exists(key))\r\n        {\r\n            console.warn('Invalid Tileset Image: ' + key);\r\n            return null;\r\n        }\r\n\r\n        var texture = this.scene.sys.textures.get(key);\r\n\r\n        var index = this.getTilesetIndex(tilesetName);\r\n\r\n        if (index === null && this.format === Formats.TILED_JSON)\r\n        {\r\n            console.warn('No data found for Tileset: ' + tilesetName);\r\n            return null;\r\n        }\r\n\r\n        var tileset = this.tilesets[index];\r\n\r\n        if (tileset)\r\n        {\r\n            tileset.setTileSize(tileWidth, tileHeight);\r\n            tileset.setSpacing(tileMargin, tileSpacing);\r\n            tileset.setImage(texture);\r\n\r\n            return tileset;\r\n        }\r\n\r\n        if (tileWidth === undefined) { tileWidth = this.tileWidth; }\r\n        if (tileHeight === undefined) { tileHeight = this.tileHeight; }\r\n        if (tileMargin === undefined) { tileMargin = 0; }\r\n        if (tileSpacing === undefined) { tileSpacing = 0; }\r\n        if (gid === undefined) { gid = 0; }\r\n\r\n        tileset = new Tileset(tilesetName, gid, tileWidth, tileHeight, tileMargin, tileSpacing);\r\n\r\n        tileset.setImage(texture);\r\n\r\n        this.tilesets.push(tileset);\r\n\r\n        return tileset;\r\n    },\r\n\r\n    /**\r\n     * Turns the StaticTilemapLayer associated with the given layer into a DynamicTilemapLayer. If\r\n     * no layer specified, the map's current layer is used. This is useful if you want to manipulate\r\n     * a map at the start of a scene, but then make it non-manipulable and optimize it for speed.\r\n     * Note: the DynamicTilemapLayer passed in is destroyed, so make sure to store the value\r\n     * returned from this method if you want to manipulate the new StaticTilemapLayer.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#convertLayerToStatic\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer)} [layer] - The name of the layer from Tiled, the\r\n     * index of the layer in the map, or a DynamicTilemapLayer.\r\n     *\r\n     * @return {?Phaser.Tilemaps.StaticTilemapLayer} Returns the new layer that was created, or null if it\r\n     * failed.\r\n     */\r\n    convertLayerToStatic: function (layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        var dynamicLayer = layer.tilemapLayer;\r\n\r\n        if (!dynamicLayer || !(dynamicLayer instanceof DynamicTilemapLayer))\r\n        {\r\n            return null;\r\n        }\r\n\r\n        var staticLayer = new StaticTilemapLayer(\r\n            dynamicLayer.scene,\r\n            dynamicLayer.tilemap,\r\n            dynamicLayer.layerIndex,\r\n            dynamicLayer.tileset,\r\n            dynamicLayer.x,\r\n            dynamicLayer.y\r\n        );\r\n\r\n        this.scene.sys.displayList.add(staticLayer);\r\n\r\n        dynamicLayer.destroy();\r\n\r\n        return staticLayer;\r\n    },\r\n\r\n    /**\r\n     * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n     * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n     * information in the destination region.\r\n     * \r\n     * If no layer specified, the map's current layer is used. This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#copy\r\n     * @since 3.0.0\r\n     * \r\n     * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n     * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n     * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n     * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n     * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n     * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    copy: function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'copy')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.Copy(\r\n                srcTileX, srcTileY,\r\n                width, height,\r\n                destTileX, destTileY,\r\n                recalculateFaces, layer\r\n            );\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a new and empty DynamicTilemapLayer. The currently selected layer in the map is set to this new layer.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createBlankDynamicLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of this layer. Must be unique within the map.\r\n     * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n     * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n     * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n     * @param {integer} [width] - The width of the layer in tiles. If not specified, it will default to the map's width.\r\n     * @param {integer} [height] - The height of the layer in tiles. If not specified, it will default to the map's height.\r\n     * @param {integer} [tileWidth] - The width of the tiles the layer uses for calculations. If not specified, it will default to the map's tileWidth.\r\n     * @param {integer} [tileHeight] - The height of the tiles the layer uses for calculations. If not specified, it will default to the map's tileHeight.\r\n     * \r\n     * @return {?Phaser.Tilemaps.DynamicTilemapLayer} Returns the new layer was created, or null if it failed.\r\n     */\r\n    createBlankDynamicLayer: function (name, tileset, x, y, width, height, tileWidth, tileHeight)\r\n    {\r\n        if (tileWidth === undefined) { tileWidth = tileset.tileWidth; }\r\n        if (tileHeight === undefined) { tileHeight = tileset.tileHeight; }\r\n        if (width === undefined) { width = this.width; }\r\n        if (height === undefined) { height = this.height; }\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n\r\n        var index = this.getLayerIndex(name);\r\n\r\n        if (index !== null)\r\n        {\r\n            console.warn('Invalid Tilemap Layer ID: ' + name);\r\n            return null;\r\n        }\r\n\r\n        var layerData = new LayerData({\r\n            name: name,\r\n            tileWidth: tileWidth,\r\n            tileHeight: tileHeight,\r\n            width: width,\r\n            height: height\r\n        });\r\n\r\n        var row;\r\n\r\n        for (var tileY = 0; tileY < height; tileY++)\r\n        {\r\n            row = [];\r\n\r\n            for (var tileX = 0; tileX < width; tileX++)\r\n            {\r\n                row.push(new Tile(layerData, -1, tileX, tileY, tileWidth, tileHeight, this.tileWidth, this.tileHeight));\r\n            }\r\n\r\n            layerData.data.push(row);\r\n        }\r\n\r\n        this.layers.push(layerData);\r\n\r\n        this.currentLayerIndex = this.layers.length - 1;\r\n\r\n        var dynamicLayer = new DynamicTilemapLayer(this.scene, this, this.currentLayerIndex, tileset, x, y);\r\n\r\n        dynamicLayer.setRenderOrder(this.renderOrder);\r\n\r\n        this.scene.sys.displayList.add(dynamicLayer);\r\n\r\n        return dynamicLayer;\r\n    },\r\n\r\n    /**\r\n     * Creates a new DynamicTilemapLayer that renders the LayerData associated with the given\r\n     * `layerID`. The currently selected layer in the map is set to this new layer.\r\n     *\r\n     * The `layerID` is important. If you've created your map in Tiled then you can get this by\r\n     * looking in Tiled and looking at the layer name. Or you can open the JSON file it exports and\r\n     * look at the layers[].name value. Either way it must match.\r\n     *\r\n     * Unlike a static layer, a dynamic layer can be modified. See DynamicTilemapLayer for more\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createDynamicLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|string)} layerID - The layer array index value, or if a string is given, the layer name from Tiled.\r\n     * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n     * @param {number} x - The x position to place the layer in the world. If not specified, it will default to the layer offset from Tiled or 0.\r\n     * @param {number} y - The y position to place the layer in the world. If not specified, it will default to the layer offset from Tiled or 0.\r\n     *\r\n     * @return {?Phaser.Tilemaps.DynamicTilemapLayer} Returns the new layer was created, or null if it failed.\r\n     */\r\n    createDynamicLayer: function (layerID, tileset, x, y)\r\n    {\r\n        var index = this.getLayerIndex(layerID);\r\n\r\n        if (index === null)\r\n        {\r\n            console.warn('Invalid Tilemap Layer ID: ' + layerID);\r\n            return null;\r\n        }\r\n\r\n        var layerData = this.layers[index];\r\n\r\n        // Check for an associated static or dynamic tilemap layer\r\n        if (layerData.tilemapLayer)\r\n        {\r\n            console.warn('Tilemap Layer ID already exists:' + layerID);\r\n            return null;\r\n        }\r\n\r\n        this.currentLayerIndex = index;\r\n\r\n        //  Default the x/y position to match Tiled layer offset, if it exists.\r\n        if (x === undefined && this.layers[index].x) { x = this.layers[index].x; }\r\n        if (y === undefined && this.layers[index].y) { y = this.layers[index].y; }\r\n\r\n        var layer = new DynamicTilemapLayer(this.scene, this, index, tileset, x, y);\r\n\r\n        layer.setRenderOrder(this.renderOrder);\r\n\r\n        this.scene.sys.displayList.add(layer);\r\n\r\n        return layer;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given gid in the map data. All properties from\r\n     * the map data objectgroup are copied into the `spriteConfig`, so you can use this as an easy\r\n     * way to configure Sprite properties from within the map editor. For example giving an object a\r\n     * property of alpha: 0.5 in the map editor will duplicate that when the Sprite is created.\r\n     *\r\n     * Custom object properties not sharing names with the Sprite's own properties are copied to the\r\n     * Sprite's {@link Phaser.GameObjects.Sprite#data data store}.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createFromObjects\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the object layer (from Tiled) to create Sprites from.\r\n     * @param {(integer|string)} id - Either the id (object), gid (tile object) or name (object or\r\n     * tile object) from Tiled. Ids are unique in Tiled, but a gid is shared by all tile objects\r\n     * with the same graphic. The same name can be used on multiple objects.\r\n     * @param {SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=the scene the map is within] - The Scene to create the Sprites within.\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromObjects: function (name, id, spriteConfig, scene)\r\n    {\r\n        if (spriteConfig === undefined) { spriteConfig = {}; }\r\n        if (scene === undefined) { scene = this.scene; }\r\n\r\n        var objectLayer = this.getObjectLayer(name);\r\n        if (!objectLayer)\r\n        {\r\n            console.warn('Cannot create from object. Invalid objectgroup name given: ' + name);\r\n            return;\r\n        }\r\n\r\n        var objects = objectLayer.objects;\r\n        var sprites = [];\r\n\r\n        for (var i = 0; i < objects.length; i++)\r\n        {\r\n            var found = false;\r\n            var obj = objects[i];\r\n\r\n            if (obj.gid !== undefined && typeof id === 'number' && obj.gid === id ||\r\n                obj.id !== undefined && typeof id === 'number' && obj.id === id ||\r\n                obj.name !== undefined && typeof id === 'string' && obj.name === id)\r\n            {\r\n                found = true;\r\n            }\r\n\r\n            if (found)\r\n            {\r\n                var config = Extend({}, spriteConfig, obj.properties);\r\n\r\n                config.x = obj.x;\r\n                config.y = obj.y;\r\n\r\n                var sprite = this.scene.make.sprite(config);\r\n\r\n                sprite.name = obj.name;\r\n\r\n                if (obj.width) { sprite.displayWidth = obj.width; }\r\n                if (obj.height) { sprite.displayHeight = obj.height; }\r\n\r\n                // Origin is (0, 1) in Tiled, so find the offset that matches the Sprite's origin.\r\n                var offset = {\r\n                    x: sprite.originX * sprite.displayWidth,\r\n                    y: (sprite.originY - 1) * sprite.displayHeight\r\n                };\r\n\r\n                // If the object is rotated, then the origin offset also needs to be rotated.\r\n                if (obj.rotation)\r\n                {\r\n                    var angle = DegToRad(obj.rotation);\r\n                    Rotate(offset, angle);\r\n                    sprite.rotation = angle;\r\n                }\r\n\r\n                sprite.x += offset.x;\r\n                sprite.y += offset.y;\r\n\r\n                if (obj.flippedHorizontal !== undefined || obj.flippedVertical !== undefined)\r\n                {\r\n                    sprite.setFlip(obj.flippedHorizontal, obj.flippedVertical);\r\n                }\r\n\r\n                if (!obj.visible) { sprite.visible = false; }\r\n\r\n                for (var key in obj.properties)\r\n                {\r\n                    if (sprite.hasOwnProperty(key))\r\n                    {\r\n                        continue;\r\n                    }\r\n\r\n                    sprite.setData(key, obj.properties[key]);\r\n                }\r\n\r\n                sprites.push(sprite);\r\n            }\r\n        }\r\n\r\n        return sprites;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e. scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.GameObjects.Sprite[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Creates a new StaticTilemapLayer that renders the LayerData associated with the given\r\n     * `layerID`. The currently selected layer in the map is set to this new layer.\r\n     *\r\n     * The `layerID` is important. If you've created your map in Tiled then you can get this by\r\n     * looking in Tiled and looking at the layer name. Or you can open the JSON file it exports and\r\n     * look at the layers[].name value. Either way it must match.\r\n     *\r\n     * It's important to remember that a static layer cannot be modified. See StaticTilemapLayer for\r\n     * more information.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createStaticLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|string)} layerID - The layer array index value, or if a string is given, the layer name from Tiled.\r\n     * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n     * @param {number} x - The x position to place the layer in the world. If not specified, it will default to the layer offset from Tiled or 0.\r\n     * @param {number} y - The y position to place the layer in the world. If not specified, it will default to the layer offset from Tiled or 0.\r\n     *\r\n     * @return {?Phaser.Tilemaps.StaticTilemapLayer} Returns the new layer was created, or null if it failed.\r\n     */\r\n    createStaticLayer: function (layerID, tileset, x, y)\r\n    {\r\n        var index = this.getLayerIndex(layerID);\r\n\r\n        if (index === null)\r\n        {\r\n            console.warn('Invalid Tilemap Layer ID: ' + layerID);\r\n            return null;\r\n        }\r\n\r\n        var layerData = this.layers[index];\r\n\r\n        //  Check for an associated static or dynamic tilemap layer\r\n        if (layerData.tilemapLayer)\r\n        {\r\n            console.warn('Tilemap Layer ID already exists:' + layerID);\r\n            return null;\r\n        }\r\n\r\n        this.currentLayerIndex = index;\r\n\r\n        //  Default the x/y position to match Tiled layer offset, if it exists.\r\n        if (x === undefined && this.layers[index].x) { x = this.layers[index].x; }\r\n        if (y === undefined && this.layers[index].y) { y = this.layers[index].y; }\r\n\r\n        var layer = new StaticTilemapLayer(this.scene, this, index, tileset, x, y);\r\n\r\n        layer.setRenderOrder(this.renderOrder);\r\n\r\n        this.scene.sys.displayList.add(layer);\r\n\r\n        return layer;\r\n    },\r\n\r\n    /**\r\n     * Removes all layer data from this Tilemap and nulls the scene reference. This will destroy any\r\n     * StaticTilemapLayers or DynamicTilemapLayers that have been linked to LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.removeAllLayers();\r\n        this.tilesets.length = 0;\r\n        this.objects.length = 0;\r\n        this.scene = undefined;\r\n    },\r\n\r\n    /**\r\n     * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n     * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n     * Collision information in the region will be recalculated.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#fill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index to fill the area with.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    fill: function (index, tileX, tileY, width, height, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'fill')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.Fill(index, tileX, tileY, width, height, recalculateFaces, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * For each object in the given object layer, run the given filter callback function. Any\r\n     * objects that pass the filter test (i.e. where the callback returns true) will returned as a\r\n     * new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#filterObjects\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Tilemaps.ObjectLayer|string)} objectLayer - The name of an object layer (from Tiled) or an ObjectLayer instance.\r\n     * @param {TilemapFilterCallback} callback - The callback. Each object in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     *\r\n     * @return {?Phaser.GameObjects.GameObject[]} An array of object that match the search, or null if the objectLayer given was invalid.\r\n     */\r\n    filterObjects: function (objectLayer, callback, context)\r\n    {\r\n        if (typeof objectLayer === 'string')\r\n        {\r\n            var name = objectLayer;\r\n\r\n            objectLayer = this.getObjectLayer(objectLayer);\r\n\r\n            if (!objectLayer)\r\n            {\r\n                console.warn('No object layer found with the name: ' + name);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return objectLayer.objects.filter(callback, context);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The Tile layer to apply the filter on. If not provided will use the current layer.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, layer);\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the bottom-right. Otherwise it scans from the top-left.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The Tile layer to run the search on. If not provided will use the current layer.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tiles, or null if the layer given was invalid.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first object in the given object layer that satisfies the provided testing function.\r\n     * I.e. finds the first object for which `callback` returns true. Similar to\r\n     * Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#findObject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Tilemaps.ObjectLayer|string)} objectLayer - The name of an object layer (from Tiled) or an ObjectLayer instance.\r\n     * @param {TilemapFindCallback} callback - The callback. Each object in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     *\r\n     * @return {?Phaser.GameObjects.GameObject} An object that matches the search, or null if no object found.\r\n     */\r\n    findObject: function (objectLayer, callback, context)\r\n    {\r\n        if (typeof objectLayer === 'string')\r\n        {\r\n            var name = objectLayer;\r\n\r\n            objectLayer = this.getObjectLayer(objectLayer);\r\n\r\n            if (!objectLayer)\r\n            {\r\n                console.warn('No object layer found with the name: ' + name);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return objectLayer.objects.find(callback, context) || null;\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {FindTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The Tile layer to run the search on. If not provided will use the current layer.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tiles, or null if the layer given was invalid.\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {EachTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The Tile layer to run the search on. If not provided will use the current layer.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the image layer index based on its name.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getImageIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the image to get.\r\n     *\r\n     * @return {integer} The index of the image in this tilemap, or null if not found.\r\n     */\r\n    getImageIndex: function (name)\r\n    {\r\n        return this.getIndex(this.images, name);\r\n    },\r\n\r\n    /**\r\n     * Internally used. Returns the index of the object in one of the Tilemaps arrays whose name\r\n     * property matches the given `name`.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {array} location - The Tilemap array to search.\r\n     * @param {string} name - The name of the array element to get.\r\n     *\r\n     * @return {number} The index of the element in the array, or null if not found.\r\n     */\r\n    getIndex: function (location, name)\r\n    {\r\n        for (var i = 0; i < location.length; i++)\r\n        {\r\n            if (location[i].name === name)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Gets the LayerData from this.layers that is associated with `layer`, or null if an invalid\r\n     * `layer` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n     * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n     * StaticTilemapLayer. If not given will default to the maps current layer index.\r\n     *\r\n     * @return {Phaser.Tilemaps.LayerData} The corresponding LayerData within this.layers.\r\n     */\r\n    getLayer: function (layer)\r\n    {\r\n        var index = this.getLayerIndex(layer);\r\n\r\n        return index !== null ? this.layers[index] : null;\r\n    },\r\n\r\n    /**\r\n     * Gets the ObjectLayer from this.objects that has the given `name`, or null if no ObjectLayer\r\n     * is found with that name.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getObjectLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [name] - The name of the object layer from Tiled.\r\n     *\r\n     * @return {?Phaser.Tilemaps.ObjectLayer} The corresponding ObjectLayer within this.objects or null.\r\n     */\r\n    getObjectLayer: function (name)\r\n    {\r\n        var index = this.getIndex(this.objects, name);\r\n\r\n        return index !== null ? this.objects[index] : null;\r\n    },\r\n\r\n    /**\r\n     * Gets the LayerData index of the given `layer` within this.layers, or null if an invalid\r\n     * `layer` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getLayerIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n     * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n     * StaticTilemapLayer. If not given will default to the map's current layer index.\r\n     *\r\n     * @return {integer} The LayerData index within this.layers.\r\n     */\r\n    getLayerIndex: function (layer)\r\n    {\r\n        if (layer === undefined)\r\n        {\r\n            return this.currentLayerIndex;\r\n        }\r\n        else if (typeof layer === 'string')\r\n        {\r\n            return this.getLayerIndexByName(layer);\r\n        }\r\n        else if (typeof layer === 'number' && layer < this.layers.length)\r\n        {\r\n            return layer;\r\n        }\r\n        else if (layer instanceof StaticTilemapLayer || layer instanceof DynamicTilemapLayer)\r\n        {\r\n            return layer.layerIndex;\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Gets the index of the LayerData within this.layers that has the given `name`, or null if an\r\n     * invalid `name` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getLayerIndexByName\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the layer to get.\r\n     *\r\n     * @return {integer} The LayerData index within this.layers.\r\n     */\r\n    getLayerIndexByName: function (name)\r\n    {\r\n        return this.getIndex(this.layers, name);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile object with an index of -1.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null)\r\n        {\r\n            return null;\r\n        }\r\n        else\r\n        {\r\n            return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, layer);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to search. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n     * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n     * @param {number} width - The width of the area.\r\n     * @param {number} height - The height of the area.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to search. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the Tileset that has the given `name`, or null if an invalid `name` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTileset\r\n     * @since 3.14.0\r\n     *\r\n     * @param {string} name - The name of the Tileset to get.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tileset} The Tileset, or `null` if no matching named tileset was found.\r\n     */\r\n    getTileset: function (name)\r\n    {\r\n        var index = this.getIndex(this.tilesets, name);\r\n\r\n        return (index !== null) ? this.tilesets[index] : null;\r\n    },\r\n\r\n    /**\r\n     * Gets the index of the Tileset within this.tilesets that has the given `name`, or null if an\r\n     * invalid `name` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTilesetIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the Tileset to get.\r\n     *\r\n     * @return {integer} The Tileset index within this.tilesets.\r\n     */\r\n    getTilesetIndex: function (name)\r\n    {\r\n        return this.getIndex(this.tilesets, name);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to search. If not given the current layer is used.\r\n     *\r\n     * @return {?boolean} Returns a boolean, or null if the layer given was invalid.\r\n     */\r\n    hasTileAt: function (tileX, tileY, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.HasTileAt(tileX, tileY, layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to search. If not given the current layer is used.\r\n     *\r\n     * @return {?boolean} Returns a boolean, or null if the layer given was invalid.\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * The LayerData object that is currently selected in the map. You can set this property using\r\n     * any type supported by setLayer.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#layer\r\n     * @type {Phaser.Tilemaps.LayerData}\r\n     * @since 3.0.0\r\n     */\r\n    layer: {\r\n        get: function ()\r\n        {\r\n            return this.layers[this.currentLayerIndex];\r\n        },\r\n\r\n        set: function (layer)\r\n        {\r\n            this.setLayer(layer);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\r\n     * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\r\n     * location. If you pass in an index, only the index at the specified location will be changed.\r\n     * Collision information will be recalculated at the specified location.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#putTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid or the coordinates were out of bounds.\r\n     */\r\n    putTileAt: function (tile, tileX, tileY, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'putTileAt')) { return null; }\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.PutTileAt(tile, tileX, tileY, recalculateFaces, layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\r\n     * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\r\n     * specified location. If you pass in an index, only the index at the specified location will be\r\n     * changed. Collision information will be recalculated at the specified location.\r\n     *\r\n     * If no layer specified, the maps current layer is used. This\r\n     * cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#putTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    putTileAtWorldXY: function (tile, worldX, worldY, recalculateFaces, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'putTileAtWorldXY')) { return null; }\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.PutTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n     * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n     * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n     * index at the specified location will be changed. Collision information will be recalculated\r\n     * within the region tiles were changed.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#putTilesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    putTilesAt: function (tilesArray, tileX, tileY, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'putTilesAt')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will recieve a new index. If an array of indexes is passed in, then\r\n     * those will be used for randomly assigning new tile indexes. If an array is not provided, the\r\n     * indexes found within the region (excluding -1) will be used for randomly assigning new tile\r\n     * indexes. This method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#randomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {integer[]} [indexes] - An array of indexes to randomly draw from during randomization.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    randomize: function (tileX, tileY, width, height, indexes, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'randomize')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.Randomize(tileX, tileY, width, height, indexes, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes all layers from this Tilemap and destroys any associated StaticTilemapLayers or\r\n     * DynamicTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#removeAllLayers\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n     */\r\n    removeAllLayers: function ()\r\n    {\r\n        // Destroy any StaticTilemapLayers or DynamicTilemapLayers that are stored in LayerData\r\n        for (var i = 0; i < this.layers.length; i++)\r\n        {\r\n            if (this.layers[i].tilemapLayer)\r\n            {\r\n                this.layers[i].tilemapLayer.destroy();\r\n            }\r\n        }\r\n\r\n        this.layers.length = 0;\r\n        this.currentLayerIndex = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#removeTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to search. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    removeTileAt: function (tileX, tileY, replaceWithNull, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'removeTileAt')) { return null; }\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, layer);\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given world coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#removeTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    removeTileAtWorldXY: function (worldX, worldY, replaceWithNull, recalculateFaces, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'removeTileAtWorldXY')) { return null; }\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.RemoveTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     * @param {?Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting tile faces. If set to null, interesting tile faces will not be drawn.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to search. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    renderDebug: function (graphics, styleConfig, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n     * not change collision information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#replaceByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} findIndex - The index of the tile to search for.\r\n     * @param {integer} newIndex - The index of the tile to replace it with.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    replaceByIndex: function (findIndex, newIndex, tileX, tileY, width, height, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'replaceByIndex')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.ReplaceByIndex(findIndex, newIndex, tileX, tileY, width, height, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tile's collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tile's collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes to have a collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordindates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} tileY - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} width - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} height - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} [callbackContext] - The context under which the callback is called.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the current layer to the LayerData associated with `layer`.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n     * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n     * StaticTilemapLayer. If not given will default to the map's current layer index.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n     */\r\n    setLayer: function (layer)\r\n    {\r\n        var index = this.getLayerIndex(layer);\r\n\r\n        if (index !== null)\r\n        {\r\n            this.currentLayerIndex = index;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the base tile size for the map. Note: this does not necessarily match the tileWidth and\r\n     * tileHeight for all layers. This also updates the base size on all tiles across all layers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setBaseTileSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileWidth - The width of the tiles the map uses for calculations.\r\n     * @param {integer} tileHeight - The height of the tiles the map uses for calculations.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n     */\r\n    setBaseTileSize: function (tileWidth, tileHeight)\r\n    {\r\n        this.tileWidth = tileWidth;\r\n        this.tileHeight = tileHeight;\r\n        this.widthInPixels = this.width * tileWidth;\r\n        this.heightInPixels = this.height * tileHeight;\r\n\r\n        // Update the base tile size on all layers & tiles\r\n        for (var i = 0; i < this.layers.length; i++)\r\n        {\r\n            this.layers[i].baseTileWidth = tileWidth;\r\n            this.layers[i].baseTileHeight = tileHeight;\r\n\r\n            var mapData = this.layers[i].data;\r\n            var mapWidth = this.layers[i].width;\r\n            var mapHeight = this.layers[i].height;\r\n\r\n            for (var row = 0; row < mapHeight; ++row)\r\n            {\r\n                for (var col = 0; col < mapWidth; ++col)\r\n                {\r\n                    var tile = mapData[row][col];\r\n\r\n                    if (tile !== null)\r\n                    {\r\n                        tile.setSize(undefined, undefined, tileWidth, tileHeight);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the tile size for a specific `layer`. Note: this does not necessarily match the map's\r\n     * tileWidth and tileHeight for all layers. This will set the tile size for the layer and any\r\n     * tiles the layer has.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setLayerTileSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileWidth - The width of the tiles (in pixels) in the layer.\r\n     * @param {integer} tileHeight - The height of the tiles (in pixels) in the layer.\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n     * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n     * StaticTilemapLayer. If not given will default to the map's current layer index.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n     */\r\n    setLayerTileSize: function (tileWidth, tileHeight, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        layer.tileWidth = tileWidth;\r\n        layer.tileHeight = tileHeight;\r\n\r\n        var mapData = layer.data;\r\n        var mapWidth = layer.width;\r\n        var mapHeight = layer.height;\r\n\r\n        for (var row = 0; row < mapHeight; ++row)\r\n        {\r\n            for (var col = 0; col < mapWidth; ++col)\r\n            {\r\n                var tile = mapData[row][col];\r\n\r\n                if (tile !== null) { tile.setSize(tileWidth, tileHeight); }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n     * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n     * appear to have changed! This method only modifies tile indexes and does not change collision\r\n     * information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#shuffle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    shuffle: function (tileX, tileY, width, height, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'shuffle')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.Shuffle(tileX, tileY, width, height, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n     * information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#swapByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileA - First tile index.\r\n     * @param {integer} tileB - Second tile index.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    swapByIndex: function (indexA, indexB, tileX, tileY, width, height, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'swapByIndex')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.SwapByIndex(indexA, indexB, tileX, tileY, width, height, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?number} Returns a number, or null if the layer given was invalid.\r\n     */\r\n    tileToWorldX: function (tileX, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.TileToWorldX(tileX, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?number} Returns a number, or null if the layer given was invalid.\r\n     */\r\n    tileToWorldY: function (tileX, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.TileToWorldY(tileX, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Math.Vector2} Returns a point, or null if the layer given was invalid.\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will receive a new index. New indexes are drawn from the given\r\n     * weightedIndexes array. An example weighted array:\r\n     *\r\n     * [\r\n     *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n     *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n     *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n     *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n     * ]\r\n     *\r\n     * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n     * method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * If no layer specified, the map's current layer is used. This\r\n     * cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#weightedRandomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n     * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n     * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    weightedRandomize: function (tileX, tileY, width, height, weightedIndexes, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'weightedRandomize')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.WeightedRandomize(tileX, tileY, width, height, weightedIndexes, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?number} Returns a number, or null if the layer given was invalid.\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#worldToTileY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?number} Returns a number, or null if the layer given was invalid.\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n     * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     * @param {Phaser.Tilemaps.LayerData} [layer] - The tile layer to use. If not given the current layer is used.\r\n     *\r\n     * @return {?Phaser.Math.Vector2} Returns a point, or null if the layer given was invalid.\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Used internally to check if a layer is static and prints out a warning.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#_isStaticCall\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    _isStaticCall: function (layer, functionName)\r\n    {\r\n        if (layer.tilemapLayer instanceof StaticTilemapLayer)\r\n        {\r\n            console.warn(functionName + ': You cannot change the tiles in a static tilemap layer');\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Tilemap;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","DegToRad","DynamicTilemapLayer","Extend","Formats","LayerData","Rotate","StaticTilemapLayer","Tile","TilemapComponents","Tileset","Tilemap","initialize","scene","mapData","tileWidth","tileHeight","width","height","orientation","renderOrder","format","version","properties","widthInPixels","heightInPixels","imageCollections","images","layers","tilesets","objects","currentLayerIndex","setRenderOrder","orders","indexOf","addTilesetImage","tilesetName","key","tileMargin","tileSpacing","gid","undefined","sys","textures","exists","console","warn","texture","get","index","getTilesetIndex","TILED_JSON","tileset","setTileSize","setSpacing","setImage","push","convertLayerToStatic","layer","getLayer","dynamicLayer","tilemapLayer","staticLayer","tilemap","layerIndex","x","y","displayList","add","destroy","copy","srcTileX","srcTileY","destTileX","destTileY","recalculateFaces","_isStaticCall","Copy","createBlankDynamicLayer","name","getLayerIndex","layerData","row","tileY","tileX","data","length","createDynamicLayer","layerID","createFromObjects","id","spriteConfig","objectLayer","getObjectLayer","sprites","i","found","obj","config","sprite","make","displayWidth","displayHeight","offset","originX","originY","rotation","angle","flippedHorizontal","flippedVertical","setFlip","visible","hasOwnProperty","setData","createFromTiles","indexes","replacements","camera","CreateFromTiles","createStaticLayer","removeAllLayers","fill","Fill","filterObjects","callback","context","filter","filterTiles","filteringOptions","FilterTiles","findByIndex","findIndex","skip","reverse","FindByIndex","findObject","find","findTile","FindTile","forEachTile","ForEachTile","getImageIndex","getIndex","location","getLayerIndexByName","getTileAt","nonNull","GetTileAt","getTileAtWorldXY","worldX","worldY","GetTileAtWorldXY","getTilesWithin","GetTilesWithin","getTilesWithinShape","shape","GetTilesWithinShape","getTilesWithinWorldXY","GetTilesWithinWorldXY","getTileset","hasTileAt","HasTileAt","hasTileAtWorldXY","HasTileAtWorldXY","set","setLayer","putTileAt","tile","PutTileAt","putTileAtWorldXY","PutTileAtWorldXY","putTilesAt","tilesArray","PutTilesAt","randomize","Randomize","calculateFacesAt","CalculateFacesAt","calculateFacesWithin","CalculateFacesWithin","removeTileAt","replaceWithNull","RemoveTileAt","removeTileAtWorldXY","RemoveTileAtWorldXY","renderDebug","graphics","styleConfig","RenderDebug","replaceByIndex","newIndex","ReplaceByIndex","setCollision","collides","SetCollision","setCollisionBetween","start","stop","SetCollisionBetween","setCollisionByProperty","SetCollisionByProperty","setCollisionByExclusion","SetCollisionByExclusion","setCollisionFromCollisionGroup","SetCollisionFromCollisionGroup","setTileIndexCallback","callbackContext","SetTileIndexCallback","setTileLocationCallback","SetTileLocationCallback","setBaseTileSize","baseTileWidth","baseTileHeight","mapWidth","mapHeight","col","setSize","setLayerTileSize","shuffle","Shuffle","swapByIndex","indexA","indexB","SwapByIndex","tileToWorldX","TileToWorldX","tileToWorldY","TileToWorldY","tileToWorldXY","point","TileToWorldXY","weightedRandomize","weightedIndexes","WeightedRandomize","worldToTileX","snapToFloor","WorldToTileX","worldToTileY","WorldToTileY","worldToTileXY","WorldToTileXY","functionName"]
}
