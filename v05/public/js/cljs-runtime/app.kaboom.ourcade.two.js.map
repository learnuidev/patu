{"version":3,"sources":["app/kaboom/ourcade/two.cljs"],"mappings":"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","names":["app.kaboom.ourcade.two/start!","game","scene-id","cljs.core/name","app.kaboom.ourcade.two/play","player","animation-id","app.kaboom.ourcade.two/scale-x!","pos","value","app.kaboom.ourcade.two/scale-y!","app.kaboom.ourcade.two/move","x","y","app.kaboom.ourcade.two/jump","app.kaboom.ourcade.two/action","handler","app.kaboom.ourcade.two/pos","app.kaboom.ourcade.two/add!","cljs.core/clj->js","app.kaboom.ourcade.two/width","this","app.kaboom.ourcade.two/height","app.kaboom.ourcade.two/pos!","app.kaboom.ourcade.two/text!","font-size","var_args","G__57288","app.kaboom.ourcade.two/load-sprite!","js/Error","sprite-id","asset-path","app.kaboom.ourcade.two.load_sprite_BANG_","options","app.kaboom.ourcade.two/scene!","func","app.kaboom.ourcade.two/add-level!","g","app.kaboom.ourcade.two/origin!","app.kaboom.ourcade.two/go!","app.kaboom.ourcade.two/rect!","width","height","app.kaboom.ourcade.two/body","app.kaboom.ourcade.two/solid","app.kaboom.ourcade.two/sprite","app.kaboom.ourcade.two/key-press","id","app.kaboom.ourcade.two/key-release","app.kaboom.ourcade.two/key-down","app.kaboom.ourcade.two/cam-pos","app.kaboom.ourcade.two/vec2","app.kaboom.ourcade.two/scale!","G__57290","app.kaboom.ourcade.two/kaboom!","app.kaboom.ourcade.two.kaboom_BANG_","js/kaboom","app.kaboom.ourcade.two/game","js/document.querySelector","app.kaboom.ourcade.two/reg-scene","app.kaboom.ourcade.two/level","app.kaboom.ourcade.two/biggify-player","state","cljs.core.atom","biggify","js/console.warn","smallify","update","app.kaboom.ourcade.two/init","entity","app.kaboom.ourcade.two/component-handler","config","times-jumped","js/console.log","cljs.core.swap_BANG_","cljs.core/inc","app.kaboom.ourcade.two/app"],"sourcesContent":["(ns app.kaboom.ourcade.two\n  (:require [clojure.repl :refer [doc]]\n            [clojure.spec.alpha :as s]\n            [clojure.spec.gen.alpha :as gen]\n            [\"matter-js\" :refer [Bodies]]))\n\n(comment\n  (.rectangle Bodies 100 100 32 32))\n\n(defn start! [game scene-id]\n  (.start game (name scene-id)))\n;;\n(defn play [player animation-id]\n  (.play player (name animation-id)))\n(defn scale-x! [player pos value]\n  (set! (.. player -scale -x) value))\n(defn scale-y! [player pos value]\n  (set! (.. player -scale -y) value))\n(defn move [player x y]\n  (.move player x y))\n(defn jump [player value]\n  (.jump player value))\n(defn action [player handler]\n  (.action player handler))\n(defn pos [player]\n  (.-pos player))\n\n(defn add! [game value]\n  (.add game (clj->js value)))\n\n(defn width [this]\n  (.width this))\n(defn height  [this]\n  (.height this))\n(defn pos! [this x y]\n  (.pos this x y))\n\n(defn text! [^js/object game value font-size]\n  (.text game value font-size))\n\n(defn load-sprite!\n  ([^js/object game sprite-id asset-path]\n   (load-sprite! game sprite-id asset-path))\n  ([^js/object game sprite-id asset-path options]\n   (.loadSprite game (name sprite-id) asset-path (clj->js options))))\n\n(defn scene! [^js/object game scene-id func]\n  (.scene game (name scene-id) func))\n\n(defn add-level! [g value options]\n  (.addLevel g (clj->js value) (clj->js options)))\n(defn origin! [g value]\n  (.origin g (name value)))\n(defn go! [g value]\n  (.go g (name value)))\n(defn rect! [g width height]\n  (.rect g width height))\n(defn body [g]\n  (.body g))\n(defn solid [g]\n  (.solid g))\n(defn sprite [g sprite-id options]\n  (.sprite g (name sprite-id) (clj->js options)))\n(defn key-press [g id handler]\n  (.keyPress g (name id) handler))\n(defn key-release [g id handler]\n  (.keyRelease g (name id) handler))\n\n(defn key-down [g id handler]\n  (.keyDown g (name id) handler))\n\n(defn cam-pos [g value]\n  (.camPos g value))\n\n(defn vec2 [g value]\n  (.vec2 g value))\n\n(defn scale! [game value]\n  (.scale game value))\n\n(defn kaboom!\n  ([] (kaboom! {}))\n  ([options]\n   (js/kaboom (clj->js options))))\n\n;; 0 Create New game\n(def game (kaboom! {:debug true\n                    :width 320\n                    :height 240\n                    :scale 2.5\n                    :clearColor [0, 0, 0, 1]\n                    :canvas (js/document.querySelector \"canvas\")}))\n(comment\n  (set! js/window -game game))\n\n(defn reg-scene [id handler]\n  (scene! game id #(handler game)))\n\n;; ================== IMPLEMENTATION =================\n;; 1 Import asset\n(load-sprite! game\n              :tiles\n              \"assets/platformer/Tilemap/monochrome_tilemap.png\"\n              {:sliceX 20\n               :sliceY 20\n               :anims {:idle {:from 300 :to 300}\n                       :run {:from 301 :to 302}}})\n\n(def level\n  [\"                                            \"\n   \"                                            \"\n   \"                                            \"\n   \"                                            \"\n   \"                                            \"\n   \"                                            \"\n   \"                                            \"\n   \"                                            \"\n   \"                                            \"\n   \"    ===                                     \"\n   \"                                            \"\n   \" >   +                                     <\"\n   \"============================================\"])\n\n;; ==== Component ====\n(defn biggify-player []\n  (let [state (atom {:pressed? false})\n        biggify (fn [player]\n                  (set! player -scale (.vec2 game 2))\n                  (js/console.warn \"Please run init first\"))\n        smallify (fn [player]\n                   (set! player -scale (vec2 game 1))\n                   (js/console.warn \"Please run init first\"))\n        update (fn [player]\n                 ())]\n    (clj->js  {:biggify #(this-as player (biggify player))\n               :smallify #(this-as player (smallify player))\n               :update #(this-as player (update player))})))\n\n(defn init [entity]\n  (.init entity entity))\n\n(defn component-handler [game]\n  (let [config {:width  16\n                :height 16\n                := [(sprite game :tiles {:frame 65})\n                    (solid  game)]\n                :< [(sprite game :tiles {:frame 92})]\n                :> [(sprite game :tiles {:frame 93})]}\n        player (add! game [(sprite  game :tiles {:animation 0.1\n                                                 :frame 300})\n                           (pos!    game (* (width game) 0.5) (* (height game) 0.5))\n                           (origin! game :center)\n                           (scale!  game 1)\n                           (body    game)\n                           (biggify-player)])\n        times-jumped (atom 0)]\n    (add-level! game level config)\n    (play player :idle)\n    ;; Players movement\n    (key-down game :left #(move player -100 0))\n    (key-down game :right #(move player 100 0))\n    ;; Jump\n    (key-press game :b\n               (fn []\n                 (js/console.log \"PRESSED\")\n                 (.biggify player 1000)))\n    (key-press game :s\n               (fn []\n                 (js/console.log \"PRESSED\")\n                 (.smallify player 1000)))\n    (key-press game :space\n               (fn []\n                 (swap! times-jumped inc)\n                 (jump player 350)))\n    (key-press game :up\n               (fn []\n                 (swap! times-jumped inc)\n                 (jump player 350)))\n    ;; Left animation\n    (key-press game :left\n               (fn []\n                 (scale-x! player :x -1)\n                 (play player :run)))\n    ;; Right animation\n    (key-press game :right\n               (fn []\n                 (scale-x! player :x 1)\n                 (play player :run)))\n    ;; Right animation\n    (key-release game :left\n                 #(play player :idle))\n    (key-release game :right\n                 #(play player :idle));; TODO: Camera follow player\n    (action player (fn []\n                     (cam-pos game (pos player))))))\n(reg-scene :component component-handler)\n\n(reg-scene\n :main\n (fn [game]\n   (go! game :component)))\n\n(comment\n  (object? #js {}))\n\n(defn app []\n  (start! game :main))\n\n(comment\n  (js/console.log (clj->js  {:well/helloWorld true}))\n  (js/console.log {}))\n\n(comment\n  (doc load-sprite))\n"]}