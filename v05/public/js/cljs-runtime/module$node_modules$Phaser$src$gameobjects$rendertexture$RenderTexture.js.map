{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$rendertexture$RenderTexture.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/rendertexture/RenderTexture.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$rendertexture$RenderTexture\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Camera = require('../../cameras/2d/BaseCamera');\r\nvar CanvasPool = require('../../display/canvas/CanvasPool');\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar CONST = require('../../const');\r\nvar Frame = require('../../textures/Frame');\r\nvar GameObject = require('../GameObject');\r\nvar Render = require('./RenderTextureRender');\r\nvar UUID = require('../../utils/string/UUID');\r\n\r\n/**\r\n * @classdesc\r\n * A Render Texture.\r\n * \r\n * A Render Texture is a special texture that allows any number of Game Objects to be drawn to it. You can take many complex objects and\r\n * draw them all to this one texture, which can they be used as the texture for other Game Object's. It's a way to generate dynamic\r\n * textures at run-time that are WebGL friendly and don't invoke expensive GPU uploads.\r\n *\r\n * @class RenderTexture\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.2.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Tint\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {integer} [width=32] - The width of the Render Texture.\r\n * @param {integer} [height=32] - The height of the Render Texture.\r\n */\r\nvar RenderTexture = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Crop,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Mask,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.ScrollFactor,\r\n        Components.Tint,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Render\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function RenderTexture (scene, x, y, width, height)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = 32; }\r\n        if (height === undefined) { height = 32; }\r\n\r\n        GameObject.call(this, scene, 'RenderTexture');\r\n\r\n        /**\r\n         * A reference to either the Canvas or WebGL Renderer that the Game instance is using.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#renderer\r\n         * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n         * @since 3.2.0\r\n         */\r\n        this.renderer = scene.sys.game.renderer;\r\n\r\n        /**\r\n         * A reference to the Texture Manager.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#textureManager\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @since 3.12.0\r\n         */\r\n        this.textureManager = scene.sys.textures;\r\n\r\n        /**\r\n         * The tint of the Render Texture when rendered.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#globalTint\r\n         * @type {number}\r\n         * @default 0xffffff\r\n         * @since 3.2.0\r\n         */\r\n        this.globalTint = 0xffffff;\r\n\r\n        /**\r\n         * The alpha of the Render Texture when rendered.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#globalAlpha\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.2.0\r\n         */\r\n        this.globalAlpha = 1;\r\n\r\n        /**\r\n         * The HTML Canvas Element that the Render Texture is drawing to.\r\n         * This is only populated if Phaser is running with the Canvas Renderer.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#canvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.2.0\r\n         */\r\n        this.canvas = CanvasPool.create2D(this, width, height);\r\n\r\n        /**\r\n         * A reference to the Rendering Context belonging to the Canvas Element this Render Texture is drawing to.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#context\r\n         * @type {CanvasRenderingContext2D}\r\n         * @since 3.2.0\r\n         */\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        /**\r\n         * A reference to the GL Frame Buffer this Render Texture is drawing to.\r\n         * This is only set if Phaser is running with the WebGL Renderer.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#framebuffer\r\n         * @type {?WebGLFramebuffer}\r\n         * @since 3.2.0\r\n         */\r\n        this.framebuffer = null;\r\n\r\n        /**\r\n         * The internal crop data object, as used by `setCrop` and passed to the `Frame.setCropUVs` method.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#_crop\r\n         * @type {object}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._crop = this.resetCropObject();\r\n\r\n        /**\r\n         * The Texture corresponding to this Render Texture.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#texture\r\n         * @type {Phaser.Textures.Texture}\r\n         * @since 3.12.0\r\n         */\r\n        this.texture = scene.sys.textures.addCanvas(UUID(), this.canvas);\r\n\r\n        /**\r\n         * The Frame corresponding to this Render Texture.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#frame\r\n         * @type {Phaser.Textures.Frame}\r\n         * @since 3.12.0\r\n         */\r\n        this.frame = this.texture.get();\r\n        \r\n        /**\r\n         * Internal saved texture flag.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#_saved\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._saved = false;\r\n\r\n        /**\r\n         * An internal Camera that can be used to move around the Render Texture.\r\n         * Control it just like you would any Scene Camera. The difference is that it only impacts the placement of what\r\n         * is drawn to the Render Texture. You can scroll, zoom and rotate this Camera.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#camera\r\n         * @type {Phaser.Cameras.Scene2D.BaseCamera}\r\n         * @since 3.12.0\r\n         */\r\n        this.camera = new Camera(0, 0, width, height);\r\n\r\n        /**\r\n         * Is this Render Texture dirty or not? If not it won't spend time clearing or filling itself.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#dirty\r\n         * @type {boolean}\r\n         * @since 3.12.0\r\n         */\r\n        this.dirty = false;\r\n\r\n        /**\r\n         * A reference to the WebGL Rendering Context.\r\n         *\r\n         * @name Phaser.GameObjects.RenderTexture#gl\r\n         * @type {WebGLRenderingContext}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.gl = null;\r\n\r\n        var renderer = this.renderer;\r\n\r\n        if (renderer.type === CONST.WEBGL)\r\n        {\r\n            var gl = renderer.gl;\r\n\r\n            this.gl = gl;\r\n            this.drawGameObject = this.batchGameObjectWebGL;\r\n            this.framebuffer = renderer.createFramebuffer(width, height, this.frame.source.glTexture, false);\r\n        }\r\n        else if (renderer.type === CONST.CANVAS)\r\n        {\r\n            this.drawGameObject = this.batchGameObjectCanvas;\r\n        }\r\n\r\n        this.camera.setScene(scene);\r\n\r\n        this.setPosition(x, y);\r\n        this.setSize(width, height);\r\n        this.setOrigin(0, 0);\r\n        this.initPipeline();\r\n    },\r\n\r\n    /**\r\n     * Sets the size of this Game Object.\r\n     * \r\n     * @method Phaser.GameObjects.Components.Size#setSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of this Game Object.\r\n     * @param {number} height - The height of this Game Object.\r\n     * \r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setSize: function (width, height)\r\n    {\r\n        return this.resize(width, height);\r\n    },\r\n\r\n    /**\r\n     * Resizes the Render Texture to the new dimensions given.\r\n     *\r\n     * In WebGL it will destroy and then re-create the frame buffer being used by the Render Texture.\r\n     * In Canvas it will resize the underlying canvas element.\r\n     * Both approaches will erase everything currently drawn to the Render Texture.\r\n     *\r\n     * If the dimensions given are the same as those already being used, calling this method will do nothing.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#resize\r\n     * @since 3.10.0\r\n     *\r\n     * @param {number} width - The new width of the Render Texture.\r\n     * @param {number} [height] - The new height of the Render Texture. If not specified, will be set the same as the `width`.\r\n     *\r\n     * @return {this} This Render Texture.\r\n     */\r\n    resize: function (width, height)\r\n    {\r\n        if (height === undefined) { height = width; }\r\n\r\n        if (width !== this.width || height !== this.height)\r\n        {\r\n            this.canvas.width = width;\r\n            this.canvas.height = height;\r\n\r\n            if (this.gl)\r\n            {\r\n                var gl = this.gl;\r\n\r\n                this.renderer.deleteTexture(this.frame.source.glTexture);\r\n                this.renderer.deleteFramebuffer(this.framebuffer);\r\n\r\n                this.frame.source.glTexture = this.renderer.createTexture2D(0, gl.NEAREST, gl.NEAREST, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.RGBA, null, width, height, false);\r\n                this.framebuffer = this.renderer.createFramebuffer(width, height, this.frame.source.glTexture, false);\r\n\r\n                this.frame.glTexture = this.frame.source.glTexture;\r\n            }\r\n\r\n            this.frame.source.width = width;\r\n            this.frame.source.height = height;\r\n\r\n            this.camera.setSize(width, height);\r\n\r\n            this.frame.setSize(width, height);\r\n\r\n            this.width = width;\r\n            this.height = height;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the tint to use when rendering this Render Texture.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#setGlobalTint\r\n     * @since 3.2.0\r\n     *\r\n     * @param {integer} tint - The tint value.\r\n     *\r\n     * @return {this} This Render Texture.\r\n     */\r\n    setGlobalTint: function (tint)\r\n    {\r\n        this.globalTint = tint;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the alpha to use when rendering this Render Texture.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#setGlobalAlpha\r\n     * @since 3.2.0\r\n     *\r\n     * @param {number} alpha - The alpha value.\r\n     *\r\n     * @return {this} This Render Texture.\r\n     */\r\n    setGlobalAlpha: function (alpha)\r\n    {\r\n        this.globalAlpha = alpha;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stores a copy of this Render Texture in the Texture Manager using the given key.\r\n     * \r\n     * After doing this, any texture based Game Object, such as a Sprite, can use the contents of this\r\n     * Render Texture by using the texture key:\r\n     * \r\n     * ```javascript\r\n     * var rt = this.add.renderTexture(0, 0, 128, 128);\r\n     * \r\n     * // Draw something to the Render Texture\r\n     * \r\n     * rt.saveTexture('doodle');\r\n     * \r\n     * this.add.image(400, 300, 'doodle');\r\n     * ```\r\n     * \r\n     * Updating the contents of this Render Texture will automatically update _any_ Game Object\r\n     * that is using it as a texture. Calling `saveTexture` again will not save another copy\r\n     * of the same texture, it will just rename the key of the existing copy.\r\n     * \r\n     * By default it will create a single base texture. You can add frames to the texture\r\n     * by using the `Texture.add` method. After doing this, you can then allow Game Objects\r\n     * to use a specific frame from a Render Texture.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#saveTexture\r\n     * @since 3.12.0\r\n     *\r\n     * @param {string} key - The unique key to store the texture as within the global Texture Manager.\r\n     *\r\n     * @return {Phaser.Textures.Texture} The Texture that was saved.\r\n     */\r\n    saveTexture: function (key)\r\n    {\r\n        this.textureManager.renameTexture(this.texture.key, key);\r\n        \r\n        this._saved = true;\r\n\r\n        return this.texture;\r\n    },\r\n\r\n    /**\r\n     * Fills the Render Texture with the given color.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#fill\r\n     * @since 3.2.0\r\n     *\r\n     * @param {number} rgb - The color to fill the Render Texture with.\r\n     * @param {number} [alpha=1] - The alpha value used by the fill.\r\n     *\r\n     * @return {this} This Render Texture instance.\r\n     */\r\n    fill: function (rgb, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        var ur = ((rgb >> 16)|0) & 0xff;\r\n        var ug = ((rgb >> 8)|0) & 0xff;\r\n        var ub = (rgb|0) & 0xff;\r\n\r\n        if (this.gl)\r\n        {\r\n            this.renderer.setFramebuffer(this.framebuffer);\r\n\r\n            var gl = this.gl;\r\n    \r\n            gl.clearColor(ur / 255.0, ug / 255.0, ub / 255.0, alpha);\r\n    \r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n    \r\n            this.renderer.setFramebuffer(null);\r\n        }\r\n        else\r\n        {\r\n            this.context.fillStyle = 'rgb(' + ur + ',' + ug + ',' + ub + ')';\r\n            this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Clears the Render Texture.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#clear\r\n     * @since 3.2.0\r\n     *\r\n     * @return {this} This Render Texture instance.\r\n     */\r\n    clear: function ()\r\n    {\r\n        if (this.dirty)\r\n        {\r\n            if (this.gl)\r\n            {\r\n                this.renderer.setFramebuffer(this.framebuffer);\r\n\r\n                var gl = this.gl;\r\n        \r\n                gl.clearColor(0, 0, 0, 0);\r\n        \r\n                gl.clear(gl.COLOR_BUFFER_BIT);\r\n        \r\n                this.renderer.setFramebuffer(null);\r\n            }\r\n            else\r\n            {\r\n                var ctx = this.context;\r\n\r\n                ctx.save();\r\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n                ctx.restore();\r\n            }\r\n\r\n            this.dirty = false;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Draws the given object, or an array of objects, to this Render Texture.\r\n     * \r\n     * It can accept any of the following:\r\n     * \r\n     * * Any renderable Game Object, such as a Sprite, Text, Graphics or TileSprite.\r\n     * * Dynamic and Static Tilemap Layers.\r\n     * * A Group. The contents of which will be iterated and drawn in turn.\r\n     * * A Container. The contents of which will be iterated fully, and drawn in turn.\r\n     * * A Scene's Display List. Pass in `Scene.children` to draw the whole list.\r\n     * * Another Render Texture.\r\n     * * A Texture Frame instance.\r\n     * * A string. This is used to look-up a texture from the Texture Manager.\r\n     * \r\n     * Note: You cannot draw a Render Texture to itself.\r\n     * \r\n     * If passing in a Group or Container it will only draw children that return `true`\r\n     * when their `willRender()` method is called. I.e. a Container with 10 children,\r\n     * 5 of which have `visible=false` will only draw the 5 visible ones.\r\n     * \r\n     * If passing in an array of Game Objects it will draw them all, regardless if\r\n     * they pass a `willRender` check or not.\r\n     * \r\n     * You can pass in a string in which case it will look for a texture in the Texture\r\n     * Manager matching that string, and draw the base frame. If you need to specify\r\n     * exactly which frame to draw then use the method `drawFrame` instead.\r\n     * \r\n     * You can pass in the `x` and `y` coordinates to draw the objects at. The use of\r\n     * the coordinates differ based on what objects are being drawn. If the object is\r\n     * a Group, Container or Display List, the coordinates are _added_ to the positions\r\n     * of the children. For all other types of object, the coordinates are exact.\r\n     * \r\n     * The `alpha` and `tint` values are only used by Texture Frames.\r\n     * Game Objects use their own alpha and tint values when being drawn.\r\n     * \r\n     * Calling this method causes the WebGL batch to flush, so it can write the texture\r\n     * data to the framebuffer being used internally. The batch is flushed at the end,\r\n     * after the entries have been iterated. So if you've a bunch of objects to draw,\r\n     * try and pass them in an array in one single call, rather than making lots of\r\n     * separate calls.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#draw\r\n     * @since 3.2.0\r\n     *\r\n     * @param {any} entries - Any renderable Game Object, or Group, Container, Display List, other Render Texture, Texture Frame or an array of any of these.\r\n     * @param {number} [x] - The x position to draw the Frame at, or the offset applied to the object.\r\n     * @param {number} [y] - The y position to draw the Frame at, or the offset applied to the object.\r\n     * @param {number} [alpha] -  The alpha value. Only used for Texture Frames and if not specified defaults to the `globalAlpha` property. Game Objects use their own current alpha value.\r\n     * @param {number} [tint] -  WebGL only. The tint color value. Only used for Texture Frames and if not specified defaults to the `globalTint` property. Game Objects use their own current tint value.\r\n     *\r\n     * @return {this} This Render Texture instance.\r\n     */\r\n    draw: function (entries, x, y, alpha, tint)\r\n    {\r\n        if (alpha === undefined) { alpha = this.globalAlpha; }\r\n\r\n        if (tint === undefined)\r\n        {\r\n            tint = (this.globalTint >> 16) + (this.globalTint & 0xff00) + ((this.globalTint & 0xff) << 16);\r\n        }\r\n        else\r\n        {\r\n            tint = (tint >> 16) + (tint & 0xff00) + ((tint & 0xff) << 16);\r\n        }\r\n\r\n        if (!Array.isArray(entries))\r\n        {\r\n            entries = [ entries ];\r\n        }\r\n\r\n        var gl = this.gl;\r\n\r\n        this.camera.preRender(1, 1, 1);\r\n\r\n        if (gl)\r\n        {\r\n            this.renderer.setFramebuffer(this.framebuffer);\r\n\r\n            var pipeline = this.pipeline;\r\n    \r\n            pipeline.projOrtho(0, this.width, 0, this.height, -1000.0, 1000.0);\r\n\r\n            this.batchList(entries, x, y, alpha, tint);\r\n\r\n            pipeline.flush();\r\n\r\n            this.renderer.setFramebuffer(null);\r\n\r\n            pipeline.projOrtho(0, pipeline.width, pipeline.height, 0, -1000.0, 1000.0);\r\n        }\r\n        else\r\n        {\r\n            this.renderer.setContext(this.context);\r\n\r\n            this.batchList(entries, x, y, alpha, tint);\r\n\r\n            this.renderer.setContext();\r\n        }\r\n\r\n        this.dirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Draws the Texture Frame to the Render Texture at the given position.\r\n     * \r\n     * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n     * \r\n     * ```javascript\r\n     * var rt = this.add.renderTexture(0, 0, 800, 600);\r\n     * rt.drawFrame(key, frame);\r\n     * ```\r\n     * \r\n     * You can optionally provide a position, alpha and tint value to apply to the frame\r\n     * before it is drawn.\r\n     * \r\n     * Calling this method will cause a batch flush, so if you've got a stack of things to draw\r\n     * in a tight loop, try using the `draw` method instead.\r\n     * \r\n     * If you need to draw a Sprite to this Render Texture, use the `draw` method instead.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#drawFrame\r\n     * @since 3.12.0\r\n     *\r\n     * @param {string} key - The key of the texture to be used, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n     * @param {number} [x=0] - The x position to draw the frame at.\r\n     * @param {number} [y=0] - The y position to draw the frame at.\r\n     * @param {number} [alpha] - The alpha to use. If not specified it uses the `globalAlpha` property.\r\n     * @param {number} [tint] - WebGL only. The tint color to use. If not specified it uses the `globalTint` property.\r\n     *\r\n     * @return {this} This Render Texture instance.\r\n     */\r\n    drawFrame: function (key, frame, x, y, alpha, tint)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (alpha === undefined) { alpha = this.globalAlpha; }\r\n\r\n        if (tint === undefined)\r\n        {\r\n            tint = (this.globalTint >> 16) + (this.globalTint & 0xff00) + ((this.globalTint & 0xff) << 16);\r\n        }\r\n        else\r\n        {\r\n            tint = (tint >> 16) + (tint & 0xff00) + ((tint & 0xff) << 16);\r\n        }\r\n\r\n        var gl = this.gl;\r\n        var textureFrame = this.textureManager.getFrame(key, frame);\r\n\r\n        if (textureFrame)\r\n        {\r\n            this.camera.preRender(1, 1, 1);\r\n\r\n            if (gl)\r\n            {\r\n                this.renderer.setFramebuffer(this.framebuffer);\r\n    \r\n                var pipeline = this.pipeline;\r\n        \r\n                pipeline.projOrtho(0, this.width, 0, this.height, -1000.0, 1000.0);\r\n        \r\n                pipeline.batchTextureFrame(textureFrame, x, y, tint, alpha, this.camera.matrix, null);\r\n            \r\n                pipeline.flush();\r\n        \r\n                this.renderer.setFramebuffer(null);\r\n        \r\n                pipeline.projOrtho(0, pipeline.width, pipeline.height, 0, -1000.0, 1000.0);\r\n            }\r\n            else\r\n            {\r\n                this.batchTextureFrame(textureFrame, x, y, alpha, tint);\r\n            }\r\n\r\n            this.dirty = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal method that handles the drawing of an array of children.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#batchList\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {array} children - The array of Game Objects to draw.\r\n     * @param {number} x - The x position to offset the Game Object by.\r\n     * @param {number} y - The y position to offset the Game Object by.\r\n     * @param {number} [alpha] - The alpha to use. If not specified it uses the `globalAlpha` property.\r\n     * @param {number} [tint] - The tint color to use. If not specified it uses the `globalTint` property.\r\n     */\r\n    batchList: function (children, x, y, alpha, tint)\r\n    {\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            var entry = children[i];\r\n\r\n            if (!entry || entry === this)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            if (entry.renderWebGL || entry.renderCanvas)\r\n            {\r\n                //  Game Objects\r\n                this.drawGameObject(entry, x, y);\r\n            }\r\n            else if (entry.isParent || entry.list)\r\n            {\r\n                //  Groups / Display Lists\r\n                this.batchGroup(entry.getChildren(), x, y);\r\n            }\r\n            else if (typeof entry === 'string')\r\n            {\r\n                //  Texture key\r\n                this.batchTextureFrameKey(entry, null, x, y, alpha, tint);\r\n            }\r\n            else if (entry instanceof Frame)\r\n            {\r\n                //  Texture Frame instance\r\n                this.batchTextureFrame(entry, x, y, alpha, tint);\r\n            }\r\n            else if (Array.isArray(entry))\r\n            {\r\n                //  Another Array\r\n                this.batchList(entry, x, y, alpha, tint);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal method that handles the drawing a Phaser Group contents.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#batchGroup\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {array} children - The array of Game Objects to draw.\r\n     * @param {number} x - The x position to offset the Game Object by.\r\n     * @param {number} y - The y position to offset the Game Object by.\r\n     */\r\n    batchGroup: function (children, x, y)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            var entry = children[i];\r\n\r\n            if (entry.willRender())\r\n            {\r\n                var tx = entry.x + x;\r\n                var ty = entry.y + y;\r\n\r\n                this.drawGameObject(entry, tx, ty);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal method that handles drawing a single Phaser Game Object to this Render Texture using WebGL.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#batchGameObjectWebGL\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to draw.\r\n     * @param {number} x - The x position to draw the Game Object at.\r\n     * @param {number} y - The y position to draw the Game Object at.\r\n     */\r\n    batchGameObjectWebGL: function (gameObject, x, y)\r\n    {\r\n        if (x === undefined) { x = gameObject.x; }\r\n        if (y === undefined) { y = gameObject.y; }\r\n\r\n        var prevX = gameObject.x;\r\n        var prevY = gameObject.y;\r\n\r\n        this.renderer.setBlendMode(gameObject.blendMode);\r\n\r\n        gameObject.setPosition(x, y);\r\n\r\n        gameObject.renderWebGL(this.renderer, gameObject, 0, this.camera, null);\r\n\r\n        gameObject.setPosition(prevX, prevY);\r\n    },\r\n\r\n    /**\r\n     * Internal method that handles drawing a single Phaser Game Object to this Render Texture using Canvas.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#batchGameObjectCanvas\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to draw.\r\n     * @param {number} x - The x position to draw the Game Object at.\r\n     * @param {number} y - The y position to draw the Game Object at.\r\n     */\r\n    batchGameObjectCanvas: function (gameObject, x, y)\r\n    {\r\n        if (x === undefined) { x = gameObject.x; }\r\n        if (y === undefined) { y = gameObject.y; }\r\n\r\n        var prevX = gameObject.x;\r\n        var prevY = gameObject.y;\r\n\r\n        gameObject.setPosition(x, y);\r\n\r\n        gameObject.renderCanvas(this.renderer, gameObject, 0, this.camera, null);\r\n\r\n        gameObject.setPosition(prevX, prevY);\r\n    },\r\n\r\n    /**\r\n     * Internal method that handles the drawing of an array of children.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#batchTextureFrameKey\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {string} key - The key of the texture to be used, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n     * @param {number} x - The x position to offset the Game Object by.\r\n     * @param {number} y - The y position to offset the Game Object by.\r\n     * @param {number} [alpha] - The alpha to use. If not specified it uses the `globalAlpha` property.\r\n     * @param {number} [tint] - The tint color to use. If not specified it uses the `globalTint` property.\r\n     * \r\n     * @return {boolean} `true` if the frame was found and drawn, otherwise `false`.\r\n     */\r\n    batchTextureFrameKey: function (key, frame, x, y, alpha, tint)\r\n    {\r\n        var textureFrame = this.textureManager.getFrame(key, frame);\r\n\r\n        if (textureFrame)\r\n        {\r\n            this.batchTextureFrame(textureFrame, x, y, alpha, tint);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal method that handles the drawing of a Texture Frame to this Render Texture.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#batchTextureFrame\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {Phaser.Textures.Frame} textureFrame - The Texture Frame to draw.\r\n     * @param {number} x - The x position to draw the Frame at.\r\n     * @param {number} y - The y position to draw the Frame at.\r\n     * @param {number} [tint] - A tint color to be applied to the frame drawn to the Render Texture.\r\n     */\r\n    batchTextureFrame: function (textureFrame, x, y, alpha, tint)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n\r\n        if (this.gl)\r\n        {\r\n            this.pipeline.batchTextureFrame(textureFrame, x, y, tint, alpha, this.camera.matrix, null);\r\n        }\r\n        else\r\n        {\r\n            var ctx = this.context;\r\n            var cd = textureFrame.canvasData;\r\n            var source = textureFrame.source.image;\r\n    \r\n            var matrix = this.camera.matrix;\r\n    \r\n            ctx.globalAlpha = this.globalAlpha;\r\n\r\n            ctx.setTransform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\r\n\r\n            ctx.drawImage(source, cd.x, cd.y, cd.width, cd.height, x, y, cd.width, cd.height);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal destroy handler, called as part of the destroy process.\r\n     *\r\n     * @method Phaser.GameObjects.RenderTexture#preDestroy\r\n     * @protected\r\n     * @since 3.9.0\r\n     */\r\n    preDestroy: function ()\r\n    {\r\n        if (!this._saved)\r\n        {\r\n            CanvasPool.remove(this.canvas);\r\n\r\n            if (this.gl)\r\n            {\r\n                this.renderer.deleteFramebuffer(this.framebuffer);\r\n            }\r\n\r\n            this.texture.destroy();\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = RenderTexture;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Camera","CanvasPool","Class","Components","CONST","Frame","GameObject","Render","UUID","RenderTexture","Extends","Mixins","Alpha","BlendMode","ComputedSize","Crop","Depth","Flip","GetBounds","Mask","Origin","Pipeline","ScaleMode","ScrollFactor","Tint","Transform","Visible","initialize","scene","x","y","width","height","undefined","call","renderer","sys","game","textureManager","textures","globalTint","globalAlpha","canvas","create2D","context","getContext","framebuffer","_crop","resetCropObject","texture","addCanvas","frame","get","_saved","camera","dirty","gl","type","WEBGL","drawGameObject","batchGameObjectWebGL","createFramebuffer","source","glTexture","CANVAS","batchGameObjectCanvas","setScene","setPosition","setSize","setOrigin","initPipeline","resize","deleteTexture","deleteFramebuffer","createTexture2D","NEAREST","CLAMP_TO_EDGE","RGBA","setGlobalTint","tint","setGlobalAlpha","alpha","saveTexture","key","renameTexture","fill","rgb","ur","ug","ub","setFramebuffer","clearColor","clear","COLOR_BUFFER_BIT","fillStyle","fillRect","ctx","save","setTransform","clearRect","restore","draw","entries","Array","isArray","preRender","pipeline","projOrtho","batchList","flush","setContext","drawFrame","textureFrame","getFrame","batchTextureFrame","matrix","children","i","length","entry","renderWebGL","renderCanvas","isParent","list","batchGroup","getChildren","batchTextureFrameKey","willRender","gameObject","prevX","prevY","setBlendMode","blendMode","cd","canvasData","image","drawImage","preDestroy","remove","destroy"]
}
