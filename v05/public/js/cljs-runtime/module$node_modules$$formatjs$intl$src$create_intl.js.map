{
"version":3,
"file":"module$node_modules$$formatjs$intl$src$create_intl.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@formatjs/intl/src/create-intl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$formatjs$intl$src$create_intl\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createIntl = void 0;\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"./utils\");\nvar error_1 = require(\"./error\");\nvar number_1 = require(\"./number\");\nvar relativeTime_1 = require(\"./relativeTime\");\nvar dateTime_1 = require(\"./dateTime\");\nvar plural_1 = require(\"./plural\");\nvar message_1 = require(\"./message\");\nvar list_1 = require(\"./list\");\nvar displayName_1 = require(\"./displayName\");\nfunction messagesContainAst(messages) {\n    var firstMessage = messages\n        ? messages[Object.keys(messages)[0]]\n        : undefined;\n    return typeof firstMessage === 'object' && !!firstMessage;\n}\nfunction verifyConfigMessages(config) {\n    if (config.defaultRichTextElements &&\n        !messagesContainAst(config.messages || {})) {\n        console.warn(\"[@formatjs/intl] \\\"defaultRichTextElements\\\" was specified but \\\"message\\\" was not pre-compiled. \\nPlease consider using \\\"@formatjs/cli\\\" to pre-compile your messages for performance.\\nFor more details see https://formatjs.io/docs/getting-started/message-distribution\");\n    }\n}\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nfunction createIntl(config, cache) {\n    var formatters = utils_1.createFormatters(cache);\n    var resolvedConfig = tslib_1.__assign(tslib_1.__assign({}, utils_1.DEFAULT_INTL_CONFIG), config);\n    var locale = resolvedConfig.locale, defaultLocale = resolvedConfig.defaultLocale, onError = resolvedConfig.onError;\n    if (!locale) {\n        if (onError) {\n            onError(new error_1.InvalidConfigError(\"\\\"locale\\\" was not configured, using \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details\"));\n        }\n        // Since there's no registered locale data for `locale`, this will\n        // fallback to the `defaultLocale` to make sure things can render.\n        // The `messages` are overridden to the `defaultProps` empty object\n        // to maintain referential equality across re-renders. It's assumed\n        // each <FormattedMessage> contains a `defaultMessage` prop.\n        resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n    }\n    else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\n        onError(new error_1.MissingDataError(\"Missing locale data for locale: \\\"\" + locale + \"\\\" in Intl.NumberFormat. Using default locale: \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\"));\n    }\n    else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length &&\n        onError) {\n        onError(new error_1.MissingDataError(\"Missing locale data for locale: \\\"\" + locale + \"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\"));\n    }\n    verifyConfigMessages(resolvedConfig);\n    return tslib_1.__assign(tslib_1.__assign({}, resolvedConfig), { formatters: formatters, formatNumber: number_1.formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: number_1.formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: relativeTime_1.formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: dateTime_1.formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: dateTime_1.formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: dateTime_1.formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateTimeRange: dateTime_1.formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: dateTime_1.formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: plural_1.formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), formatMessage: message_1.formatMessage.bind(null, resolvedConfig, formatters), formatList: list_1.formatList.bind(null, resolvedConfig, formatters.getListFormat), formatDisplayName: displayName_1.formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames), __addMessages: function (messages) {\n            var existingMessagesContainAst = messagesContainAst(resolvedConfig.messages);\n            var mergingMessagesContainAst = messagesContainAst(messages);\n            if (config.onError &&\n                ((existingMessagesContainAst && !mergingMessagesContainAst) ||\n                    (!existingMessagesContainAst && mergingMessagesContainAst))) {\n                config.onError(new error_1.InvalidConfigError(\"Cannot mix AST & non-AST messages for locale \" + resolvedConfig.locale));\n            }\n            // @ts-expect-error this is fine\n            resolvedConfig.messages = tslib_1.__assign(tslib_1.__assign({}, resolvedConfig.messages), messages);\n        } });\n}\nexports.createIntl = createIntl;\n\n};"],
"names":["shadow$provide","global","require","module","exports","messagesContainAst","messages","firstMessage","Object","keys","undefined","defineProperty","value","createIntl","tslib_1","utils_1","error_1","number_1","relativeTime_1","dateTime_1","plural_1","message_1","list_1","displayName_1","config","cache","formatters","createFormatters","resolvedConfig","__assign","DEFAULT_INTL_CONFIG","locale","defaultLocale","onError","Intl","NumberFormat","supportedLocalesOf","length","MissingDataError","DateTimeFormat","InvalidConfigError","defaultRichTextElements","console","warn","formatNumber","bind","getNumberFormat","formatNumberToParts","formatRelativeTime","getRelativeTimeFormat","formatDate","getDateTimeFormat","formatDateToParts","formatTime","formatDateTimeRange","formatTimeToParts","formatPlural","getPluralRules","formatMessage","formatList","getListFormat","formatDisplayName","getDisplayNames","__addMessages","existingMessagesContainAst","mergingMessagesContainAst"]
}
