shadow$provide.module$node_modules$Phaser$src$physics$matter_js$lib$core$Plugin=function(global,require,module$jscomp$0,exports){var Plugin={};module$jscomp$0.exports=Plugin;var Common=require("module$node_modules$Phaser$src$physics$matter_js$lib$core$Common");(function(){Plugin._registry={};Plugin.register=function(plugin){Plugin.isPlugin(plugin)||Common.warn("Plugin.register:",Plugin.toString(plugin),"does not implement all required fields.");if(plugin.name in Plugin._registry){var registered=Plugin._registry[plugin.name],
pluginVersion=Plugin.versionParse(plugin.version).number,registeredVersion=Plugin.versionParse(registered.version).number;pluginVersion>registeredVersion?(Common.warn("Plugin.register:",Plugin.toString(registered),"was upgraded to",Plugin.toString(plugin)),Plugin._registry[plugin.name]=plugin):pluginVersion<registeredVersion?Common.warn("Plugin.register:",Plugin.toString(registered),"can not be downgraded to",Plugin.toString(plugin)):plugin!==registered&&Common.warn("Plugin.register:",Plugin.toString(plugin),
"is already registered to different plugin object")}else Plugin._registry[plugin.name]=plugin;return plugin};Plugin.resolve=function(dependency){return Plugin._registry[Plugin.dependencyParse(dependency).name]};Plugin.toString=function(plugin){return"string"===typeof plugin?plugin:(plugin.name||"anonymous")+"@"+(plugin.version||plugin.range||"0.0.0")};Plugin.isPlugin=function(obj){return obj&&obj.name&&obj.version&&obj.install};Plugin.isUsed=function(module,name){return-1<module.used.indexOf(name)};
Plugin.isFor=function(plugin,module){var parsed=plugin.for&&Plugin.dependencyParse(plugin.for);return!plugin.for||module.name===parsed.name&&Plugin.versionSatisfies(module.version,parsed.range)};Plugin.use=function(module,plugins){module.uses=(module.uses||[]).concat(plugins||[]);if(0===module.uses.length)Common.warn("Plugin.use:",Plugin.toString(module),"does not specify any dependencies to install.");else{plugins=Plugin.dependencies(module);plugins=Common.topologicalSort(plugins);for(var status=
[],i=0;i<plugins.length;i+=1)if(plugins[i]!==module.name){var plugin=Plugin.resolve(plugins[i]);plugin?Plugin.isUsed(module,plugin.name)||(Plugin.isFor(plugin,module)||(Common.warn("Plugin.use:",Plugin.toString(plugin),"is for",plugin.for,"but installed on",Plugin.toString(module)+"."),plugin._warned=!0),plugin.install?plugin.install(module):(Common.warn("Plugin.use:",Plugin.toString(plugin),"does not specify an install function."),plugin._warned=!0),plugin._warned?(status.push("\ud83d\udd36 "+Plugin.toString(plugin)),
delete plugin._warned):status.push("✅ "+Plugin.toString(plugin)),module.used.push(plugin.name)):status.push("❌ "+plugins[i])}0<status.length&&!plugin.silent&&Common.info(status.join("  "))}};Plugin.dependencies=function(module,tracked){var parsedBase=Plugin.dependencyParse(module),name=parsedBase.name;tracked=tracked||{};if(!(name in tracked)){module=Plugin.resolve(module)||module;tracked[name]=Common.map(module.uses||[],function(dependency){Plugin.isPlugin(dependency)&&Plugin.register(dependency);
var parsed=Plugin.dependencyParse(dependency),resolved=Plugin.resolve(dependency);resolved&&!Plugin.versionSatisfies(resolved.version,parsed.range)?(Common.warn("Plugin.dependencies:",Plugin.toString(resolved),"does not satisfy",Plugin.toString(parsed),"used by",Plugin.toString(parsedBase)+"."),resolved._warned=!0,module._warned=!0):resolved||(Common.warn("Plugin.dependencies:",Plugin.toString(dependency),"used by",Plugin.toString(parsedBase),"could not be resolved."),module._warned=!0);return parsed.name});
for(var i=0;i<tracked[name].length;i+=1)Plugin.dependencies(tracked[name][i],tracked);return tracked}};Plugin.dependencyParse=function(dependency){return Common.isString(dependency)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?))?$/.test(dependency)||Common.warn("Plugin.dependencyParse:",dependency,"is not a valid dependency string."),{name:dependency.split("@")[0],range:dependency.split("@")[1]||"*"}):{name:dependency.name,range:dependency.range||dependency.version}};Plugin.versionParse=function(range){/^\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?$/.test(range)||
Common.warn("Plugin.versionParse:",range,"is not a valid version or range.");var identifiers=range.split("-");range=identifiers[0];var isRange=isNaN(Number(range[0])),version=isRange?range.substr(1):range,parts=Common.map(version.split("."),function(part){return Number(part)});return{isRange:isRange,version:version,range:range,operator:isRange?range[0]:"",parts:parts,prerelease:identifiers[1],number:1E8*parts[0]+1E4*parts[1]+parts[2]}};Plugin.versionSatisfies=function(version,range){range=range||
"*";var rangeParsed=Plugin.versionParse(range),rangeParts=rangeParsed.parts,versionParsed=Plugin.versionParse(version),versionParts=versionParsed.parts;if(rangeParsed.isRange){if("*"===rangeParsed.operator||"*"===version)return!0;if("~"===rangeParsed.operator)return versionParts[0]===rangeParts[0]&&versionParts[1]===rangeParts[1]&&versionParts[2]>=rangeParts[2];if("^"===rangeParsed.operator)return 0<rangeParts[0]?versionParts[0]===rangeParts[0]&&versionParsed.number>=rangeParsed.number:0<rangeParts[1]?
versionParts[1]===rangeParts[1]&&versionParts[2]>=rangeParts[2]:versionParts[2]===rangeParts[2]}return version===range||"*"===version}})()}
//# sourceMappingURL=module$node_modules$Phaser$src$physics$matter_js$lib$core$Plugin.js.map
