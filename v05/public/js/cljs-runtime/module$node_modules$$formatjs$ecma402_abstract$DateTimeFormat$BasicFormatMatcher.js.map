{
"version":3,
"file":"module$node_modules$$formatjs$ecma402_abstract$DateTimeFormat$BasicFormatMatcher.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,iFAAA,CAAqG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE7IC,MAAAC,eAAA,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAAI,mBAAA,CAA6B,IAAK,EAClC,KAAIC,QAAUP,OAAA,CAAQ,iCAAR,CAAd,CACIQ,QAAUR,OAAA,CAAQ,sDAAR,CADd,CAEIS,QAAUT,OAAA,CAAQ,qEAAR,CAiDdE,QAAAI,mBAAA,CA3CAA,QAA2B,CAACI,OAAD,CAAUC,OAAV,CAAmB,CAC1C,IAAIC;AAAY,CAACC,QAAjB,CACIC,WAAaH,OAAA,CAAQ,CAAR,CACjBH,QAAAO,UAAA,CAAkBC,KAAAC,QAAA,CAAcN,OAAd,CAAlB,CAA0C,oCAA1C,CACA,KAJ0C,IAIjCO,GAAK,CAAd,CAAsCA,EAAtC,CAA6BP,OAAcQ,OAA3C,CAA6DD,EAAA,EAA7D,CAAmE,CAG/D,IAFA,IAAIE,OADqBT,OACZ,CAAUO,EAAV,CAAb,CACIG,MAAQ,CADZ,CAESC,GAAK,CAFd,CAEiBC,kBAAoBd,OAAAe,gBAArC,CAA8DF,EAA9D,CAAmEC,iBAAAJ,OAAnE,CAA6FG,EAAA,EAA7F,CAAmG,CAC/F,IAAIG,KAAOF,iBAAA,CAAkBD,EAAlB,CAAX,CACII,YAAchB,OAAA,CAAQe,IAAR,CACdE,KAAAA,CAAaP,MAAA,CAAOK,IAAP,CACjB,IAAoBG,IAAAA,EAApB,GAAIF,WAAJ,EAAgDE,IAAAA,EAAhD,GAAiCD,IAAjC,CACIN,KAAA,EAASZ,OAAAoB,gBADb,KAGK,IAAoBD,IAAAA,EAApB,GAAIF,WAAJ,EAAgDE,IAAAA,EAAhD,GAAiCD,IAAjC,CACDN,KAAA,EAASZ,OAAAqB,eADR,KAGA,IAAIJ,WAAJ;AAAoBC,IAApB,CAAgC,CACjC,IAAII,OAAS,CAAC,SAAD,CAAY,SAAZ,CAAuB,QAAvB,CAAiC,OAAjC,CAA0C,MAA1C,CACTC,YAAAA,CAAmBD,MAAAE,QAAA,CAAeP,WAAf,CACnBQ,KAAAA,CAAkBH,MAAAE,QAAA,CAAeN,IAAf,CAClBQ,YAAAA,CAAQC,IAAAC,IAAA,CAAS,EAAT,CAAaD,IAAAE,IAAA,CAASJ,IAAT,CAA2BF,WAA3B,CAA6C,CAA7C,CAAb,CACE,EAAd,GAAIG,WAAJ,CACId,KADJ,EACaZ,OAAA8B,gBADb,CAGmB,CAAd,GAAIJ,WAAJ,CACDd,KADC,EACQZ,OAAA+B,iBADR,CAGc,EAAd,GAAIL,WAAJ,CACDd,KADC,EACQZ,OAAAgC,iBADR,CAGc,EAHd,GAGIN,WAHJ,GAIDd,KAJC,EAIQZ,OAAAiC,gBAJR,CAX4B,CAV0D,CA6B/FrB,KAAJ,CAAYT,SAAZ,GACIA,SACA,CADYS,KACZ,CAAAP,UAAA,CAAaM,MAFjB,CAhC+D,CAqCnE,MAAOb,QAAAoC,SAAA,CAAiB,EAAjB,CAAqB7B,UAArB,CAzCmC,CAZ+F;",
"sources":["node_modules/@formatjs/ecma402-abstract/DateTimeFormat/BasicFormatMatcher.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$formatjs$ecma402_abstract$DateTimeFormat$BasicFormatMatcher\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BasicFormatMatcher = void 0;\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"../utils\");\nvar utils_2 = require(\"./utils\");\n/**\n * https://tc39.es/ecma402/#sec-basicformatmatcher\n * @param options\n * @param formats\n */\nfunction BasicFormatMatcher(options, formats) {\n    var bestScore = -Infinity;\n    var bestFormat = formats[0];\n    utils_1.invariant(Array.isArray(formats), 'formats should be a list of things');\n    for (var _i = 0, formats_1 = formats; _i < formats_1.length; _i++) {\n        var format = formats_1[_i];\n        var score = 0;\n        for (var _a = 0, DATE_TIME_PROPS_1 = utils_2.DATE_TIME_PROPS; _a < DATE_TIME_PROPS_1.length; _a++) {\n            var prop = DATE_TIME_PROPS_1[_a];\n            var optionsProp = options[prop];\n            var formatProp = format[prop];\n            if (optionsProp === undefined && formatProp !== undefined) {\n                score -= utils_2.additionPenalty;\n            }\n            else if (optionsProp !== undefined && formatProp === undefined) {\n                score -= utils_2.removalPenalty;\n            }\n            else if (optionsProp !== formatProp) {\n                var values = ['2-digit', 'numeric', 'narrow', 'short', 'long'];\n                var optionsPropIndex = values.indexOf(optionsProp);\n                var formatPropIndex = values.indexOf(formatProp);\n                var delta = Math.max(-2, Math.min(formatPropIndex - optionsPropIndex, 2));\n                if (delta === 2) {\n                    score -= utils_2.longMorePenalty;\n                }\n                else if (delta === 1) {\n                    score -= utils_2.shortMorePenalty;\n                }\n                else if (delta === -1) {\n                    score -= utils_2.shortLessPenalty;\n                }\n                else if (delta === -2) {\n                    score -= utils_2.longLessPenalty;\n                }\n            }\n        }\n        if (score > bestScore) {\n            bestScore = score;\n            bestFormat = format;\n        }\n    }\n    return tslib_1.__assign({}, bestFormat);\n}\nexports.BasicFormatMatcher = BasicFormatMatcher;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","BasicFormatMatcher","tslib_1","utils_1","utils_2","options","formats","bestScore","Infinity","bestFormat","invariant","Array","isArray","_i","length","format","score","_a","DATE_TIME_PROPS_1","DATE_TIME_PROPS","prop","optionsProp","formatProp","undefined","additionPenalty","removalPenalty","values","optionsPropIndex","indexOf","formatPropIndex","delta","Math","max","min","longMorePenalty","shortMorePenalty","shortLessPenalty","longLessPenalty","__assign"]
}
