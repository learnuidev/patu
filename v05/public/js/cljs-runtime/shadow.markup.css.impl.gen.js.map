{"version":3,"sources":["shadow/markup/css/impl/gen.cljc"],"mappings":"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","names":["shadow$markup$css$impl$gen$IElement$el_selector$dyn","x__4428__auto__","m__4429__auto__","shadow.markup.css.impl.gen/el-selector","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","shadow$markup$css$impl$gen$IElement$el_type$dyn","shadow.markup.css.impl.gen/el-type","shadow$markup$css$impl$gen$IElement$el_root$dyn","shadow.markup.css.impl.gen/el-root","shadow.markup.css.impl.gen/IElement","x","env","shadow$markup$css$impl$gen$IStyleGen$gen_css_rules$dyn","shadow.markup.css.impl.gen/gen-css-rules","shadow.markup.css.impl.gen/IStyleGen","tag","class","shadow.markup.css.impl.gen/gen-el-selector","ns","el-name","or__4126__auto__","cljs.core/meta","cljs.core/name","clojure.string/replace","cljs.core/constantly","shadow.markup.css.impl.gen/css-rules","root","cljs.core/map?","shadow.markup.css.impl.gen/map->root","shadow.markup.css.impl.gen/css-rules-for-el","el","shadow.markup.css.impl.gen/number-as-str-props","shadow.markup.css.impl.gen/css-value-to-str","key","value","cljs.core/contains?","cljs.core/vector?","p1__27417#","cljs.core.map","clojure.string.join","shadow.markup.css.impl.gen/gen-rule-attrs","attrs","cljs.core/reduce-kv","s","js/Error","shadow.markup.css.impl.gen/gen-rule","selector","cljs.core/seq","cljs.core/every?","cljs.core/keyword?","cljs.core/keys","shadow.markup.css.impl.gen/merge-selector","clojure.string/includes?","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","shadow.markup.css.impl.gen/Rule","shadow.markup.css.impl.gen/->Rule","type","nested-rules","this","G__27421","cljs.core/Keyword","self","p1__27418#","cljs.core.mapcat","cljs.core.into","p1__27419#","nested","p1__27420#","cljs.core/not","shadow.markup.css.impl.gen/rule?","shadow.markup.css.impl.gen/group*","query","rules","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","shadow.markup.css.impl.gen/media","seq27422","G__27423","cljs.core/first","cljs.core/next","G__27424","self__4723__auto__","shadow.markup.css.impl.gen/rule","cljs.core.ex_info","shadow.markup.css.impl.gen/nested-rule","parent","cljs.core/native-satisfies?","cljs.core._EQ_","cljs.core/count","G__27428","vec__27429","cljs.core.nth","suffix","shadow.markup.css.impl.gen/root*","shadow.markup.css.impl.gen/root","seq27433","G__27434","shadow.markup.css.impl.gen/attrs-from-map","m","k","v","cljs.core.assoc","shadow.markup.css.impl.gen/no-nested-rules!","shadow.markup.css.impl.gen/rules-from-map","cljs.core.filter","cljs.core/complement","cljs.core.get","sub-rules","clojure.string/starts-with?"],"sourcesContent":["(ns shadow.markup.css.impl.gen\n  (:require [clojure.string :as str]))\n\n(defprotocol IElement\n  (el-selector [x])\n  (el-type [x])\n  (el-root [x env]))\n\n(defprotocol IStyleGen\n  (gen-css-rules [x tag class] \"generate a sequence of strings (css-rules)\"))\n\n(declare map->root)\n\n(defn gen-el-selector\n  \"called from macro, assumes ns as clojure.lang.Namespace and el-name as a symbol\"\n  [ns el-name]\n  (let [ns\n        (or (-> ns meta :shadow.markup.css/alias)\n            (str ns))\n\n        el-name\n        (or (-> el-name meta :shadow.markup.css/alias)\n            (name el-name))]\n    (-> (str ns \"--\" el-name)\n        ;; FIXME: some more munging might be required?\n        ;; css selectors probably don't allow some chars that are otherwise ok in an ns/name ($!? come to mind)\n        (str/replace #\"\\.\" (constantly \"-\")))))\n\n(defn css-rules [root tag class]\n  (let [root\n        (if (map? root)\n          (map->root root)\n          root)]\n\n    (gen-css-rules root tag class)\n    ))\n\n(defn css-rules-for-el\n  [env el]\n  (let [root\n        (el-root el env)\n\n        tag\n        (el-type el)\n\n        class\n        (el-selector el)]\n\n    (css-rules root tag class)))\n\n(def number-as-str-props\n  #{:flex\n    :font-weight\n    :z-index\n    :opacity})\n\n(defn css-value-to-str [key value]\n  (cond\n    (string? value)\n    value\n\n    (number? value)\n    (cond\n      (zero? value)\n      \"0\"\n\n      (contains? number-as-str-props key)\n      (str value)\n\n      :else\n      (str value \"px\"))\n\n    (vector? value)\n    (->> value\n         (map #(css-value-to-str key %))\n         (str/join \" \"))\n    ))\n\n(defn gen-rule-attrs [attrs]\n  (reduce-kv\n    (fn [s key value]\n      (str s \"\\n  \" (name key) \": \" (css-value-to-str key value) \";\"))\n    \"\"\n    attrs))\n\n(defn gen-rule [selector attrs]\n  ;; safe-guard against invalid rules\n  {:pre [(seq attrs)\n         (string? selector)\n         (every? keyword? (keys attrs))]}\n\n  (str selector \" {\"\n       (gen-rule-attrs attrs)\n       \"\\n}\"))\n\n(defn merge-selector [selector tag class]\n  (cond\n    (str/includes? selector \"%\")\n    (-> selector\n        (str/replace #\"%\" tag)\n        (str/replace #\"&\" (str \".\" class)))\n\n    :else\n    (str/replace selector #\"&\" (str tag \".\" class))))\n\n(deftype Rule [type selector attrs nested-rules]\n  IStyleGen\n  (gen-css-rules [this tag class]\n    (case type\n      :root\n      (let [self\n            (if (seq attrs)\n              [(gen-rule (str tag \".\" class) attrs)]\n              [])]\n\n        (->> nested-rules\n             (mapcat #(gen-css-rules % tag class))\n             (into self)))\n\n      :rule\n      (let [self\n            (if (seq attrs)\n              (let [selector (merge-selector selector tag class)]\n                [(gen-rule selector attrs)])\n              [])]\n\n        (->> nested-rules\n             (mapcat #(gen-css-rules % tag class))\n             (into self)))\n\n      :group\n      (let [nested\n            (mapcat #(gen-css-rules % tag class) nested-rules)]\n\n        (if (and (not (seq attrs))\n                 (not (seq nested)))\n          ;; group has not attrs or nested rules, don't generate a rule\n          []\n          ;; generate one rule that combines all other rules\n          [(str selector \" {\\n\"\n                (when (seq attrs)\n                  (gen-rule (str tag \".\" class) attrs))\n                (when (seq nested)\n                  (str \"\\n\" (str/join \"\\n\" nested)))\n                \"\\n}\")])))))\n\n(defn rule? [x]\n  (instance? Rule x))\n\n(defn group* [query attrs rules]\n  {:pre [(string? query)\n         (map? attrs)\n         (every? rule? rules)]}\n  (Rule. :group query attrs rules))\n\n(defn media [query attrs & rules]\n  (group* (str \"@media\" query) attrs rules))\n\n(defn rule [selector attrs]\n  {:pre [(string? selector)\n         (map? attrs)]}\n  (when-not (str/includes? selector \"&\")\n    (throw (ex-info \"rules must contain & to place prefix (&:hover instead of :hover)\" {:selector selector :attrs attrs})))\n\n  (Rule. :rule selector attrs []))\n\n(defn nested-rule [parent attrs]\n  (let [selector\n        (cond\n          (satisfies? IElement parent)\n          (str \".\" (el-selector parent) \" &\")\n\n          (and (vector? parent)\n               (= 1 (count parent))\n               (and (satisfies? IElement (first parent))))\n          (str \".\" (el-selector (first parent)) \" &\")\n\n          (and (vector? parent)\n               (= 2 (count parent)))\n\n          (let [[el suffix] parent]\n            (when-not (satisfies? IElement el)\n              (throw (ex-info \"need to be nested in IElement\" {:parent parent :attrs attrs})))\n            (str \".\" (el-selector el) suffix \" &\")))]\n    (Rule. :rule selector attrs [])))\n\n(defn root* [attrs rules]\n  {:pre [(map? attrs)\n         (every? rule? rules)]}\n  (Rule. :root nil attrs rules))\n\n(defn root [attrs & rules]\n  (root* attrs rules))\n\n(defn attrs-from-map [m]\n  (reduce-kv\n    (fn [m k v]\n      (if-not (keyword? k)\n        m\n        (assoc m k v)))\n    {}\n    m))\n\n(defn- no-nested-rules!\n  [selector rules]\n  (when (seq rules)\n    (throw (ex-info \"selector cannot have nested rules\" {:selector selector :rules (map :selector rules)}))))\n\n(defn rules-from-map [m]\n  (->> m\n       (keys)\n       (filter (complement keyword?))\n       (map\n         (fn [selector]\n           (let [v (get m selector)\n\n                 sub-rules\n                 (rules-from-map v)\n\n                 attrs\n                 (attrs-from-map v)]\n             (cond\n               (and (string? selector)\n                    (str/starts-with? selector \"@\"))\n               (group* selector attrs sub-rules)\n\n               ;; FIXME: we could allow nesting but styles get messy at that point\n               (string? selector)\n               (do (no-nested-rules! selector sub-rules)\n                   (rule selector attrs))\n\n               (satisfies? IElement selector)\n               (do (no-nested-rules! selector sub-rules)\n                   (nested-rule selector attrs))\n\n               (vector? selector)\n               (do (no-nested-rules! selector sub-rules)\n                   (nested-rule selector attrs))\n\n               :else\n               (throw (ex-info \"invalid key in map\" {:key selector :value v}))\n               ))))\n       (into [])))\n\n(defn map->root [m]\n  (root* (attrs-from-map m) (rules-from-map m)))\n\n"]}