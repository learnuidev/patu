{
"version":3,
"file":"module$node_modules$Phaser$src$math$easing$sine$InOut.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiClHD,MAAAC,QAAA,CAhBYC,QAAS,CAACC,CAAD,CACrB,CACI,MAAU,EAAV,GAAIA,CAAJ,CAEW,CAFX,CAIe,CAAV,GAAIA,CAAJ,CAEM,CAFN,CAMM,EANN,EAMa,CANb,CAMiBC,IAAAC,IAAA,CAASD,IAAAE,GAAT,CAAmBH,CAAnB,CANjB,CALT,CAlBkH;",
"sources":["node_modules/Phaser/src/math/easing/sine/InOut.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$easing$sine$InOut\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Sinusoidal ease-in/out.\r\n *\r\n * @function Phaser.Math.Easing.Sine.InOut\r\n * @since 3.0.0\r\n *\r\n * @param {number} v - The value to be tweened.\r\n *\r\n * @return {number} The tweened value.\r\n */\r\nvar InOut = function (v)\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * (1 - Math.cos(Math.PI * v));\r\n    }\r\n};\r\n\r\nmodule.exports = InOut;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","InOut","v","Math","cos","PI"]
}
