{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$parsers$tiled$ParseTilesets.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/tilemaps/parsers/tiled/ParseTilesets.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$parsers$tiled$ParseTilesets\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Tileset = require('../../Tileset');\r\nvar ImageCollection = require('../../ImageCollection');\r\nvar ParseObject = require('./ParseObject');\r\n\r\n/**\r\n * Tilesets & Image Collections\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseTilesets\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - [description]\r\n *\r\n * @return {object} [description]\r\n */\r\nvar ParseTilesets = function (json)\r\n{\r\n    var tilesets = [];\r\n    var imageCollections = [];\r\n    var lastSet = null;\r\n    var stringID;\r\n\r\n    for (var i = 0; i < json.tilesets.length; i++)\r\n    {\r\n        //  name, firstgid, width, height, margin, spacing, properties\r\n        var set = json.tilesets[i];\r\n\r\n        if (set.source)\r\n        {\r\n            console.warn('Phaser can\\'t load external tilesets. Use the Embed Tileset button and then export the map again.');\r\n        }\r\n        else if (set.image)\r\n        {\r\n            var newSet = new Tileset(set.name, set.firstgid, set.tilewidth, set.tileheight, set.margin, set.spacing);\r\n\r\n            if (json.version > 1)\r\n            {\r\n                // Tiled 1.2+\r\n\r\n                if (Array.isArray(set.tiles))\r\n                {\r\n                    var tiles = {};\r\n                    var props = {};\r\n\r\n                    for (var t = 0; t < set.tiles.length; t++)\r\n                    {\r\n                        var tile = set.tiles[t];\r\n\r\n                        //  Convert tileproperties\r\n                        if (tile.properties)\r\n                        {\r\n                            var newPropData = {};\r\n\r\n                            tile.properties.forEach(function (propData)\r\n                            {\r\n                                newPropData[propData['name']] = propData['value'];\r\n                            });\r\n\r\n                            props[tile.id] = newPropData;\r\n                        }\r\n\r\n                        //  Convert objectgroup\r\n                        if (tile.objectgroup)\r\n                        {\r\n                            tiles[tile.id] = { objectgroup: tile.objectgroup };\r\n\r\n                            if (tile.objectgroup.objects)\r\n                            {\r\n                                var parsedObjects2 = tile.objectgroup.objects.map(\r\n                                    function (obj) { return ParseObject(obj); }\r\n                                );\r\n\r\n                                tiles[tile.id].objectgroup.objects = parsedObjects2;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    newSet.tileData = tiles;\r\n                    newSet.tileProperties = props;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // Tiled 1\r\n\r\n                // Properties stored per-tile in object with string indexes starting at \"0\"\r\n                if (set.tileproperties)\r\n                {\r\n                    newSet.tileProperties = set.tileproperties;\r\n                }\r\n\r\n                // Object & terrain shapes stored per-tile in object with string indexes starting at \"0\"\r\n                if (set.tiles)\r\n                {\r\n                    newSet.tileData = set.tiles;\r\n\r\n                    // Parse the objects into Phaser format to match handling of other Tiled objects\r\n                    for (stringID in newSet.tileData)\r\n                    {\r\n                        var objectGroup = newSet.tileData[stringID].objectgroup;\r\n                        if (objectGroup && objectGroup.objects)\r\n                        {\r\n                            var parsedObjects1 = objectGroup.objects.map(\r\n                                function (obj) { return ParseObject(obj); }\r\n                            );\r\n                            newSet.tileData[stringID].objectgroup.objects = parsedObjects1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // For a normal sliced tileset the row/count/size information is computed when updated.\r\n            // This is done (again) after the image is set.\r\n            newSet.updateTileData(set.imagewidth, set.imageheight);\r\n\r\n            tilesets.push(newSet);\r\n        }\r\n        else\r\n        {\r\n            var newCollection = new ImageCollection(set.name, set.firstgid, set.tilewidth,\r\n                set.tileheight, set.margin, set.spacing, set.properties);\r\n\r\n            for (stringID in set.tiles)\r\n            {\r\n                var image = set.tiles[stringID].image;\r\n                var gid = set.firstgid + parseInt(stringID, 10);\r\n                newCollection.addImage(gid, image);\r\n            }\r\n\r\n            imageCollections.push(newCollection);\r\n        }\r\n\r\n        //  We've got a new Tileset, so set the lastgid into the previous one\r\n        if (lastSet)\r\n        {\r\n            lastSet.lastgid = set.firstgid - 1;\r\n        }\r\n\r\n        lastSet = set;\r\n    }\r\n\r\n    return { tilesets: tilesets, imageCollections: imageCollections };\r\n};\r\n\r\nmodule.exports = ParseTilesets;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Tileset","ImageCollection","ParseObject","ParseTilesets","json","tilesets","imageCollections","lastSet","stringID","i","length","set","source","console","warn","image","newSet","name","firstgid","tilewidth","tileheight","margin","spacing","version","Array","isArray","tiles","props","t","tile","properties","newPropData","forEach","propData","id","objectgroup","objects","parsedObjects2","map","obj","tileData","tileProperties","tileproperties","objectGroup","parsedObjects1","updateTileData","imagewidth","imageheight","push","newCollection","gid","parseInt","addImage","lastgid"]
}
