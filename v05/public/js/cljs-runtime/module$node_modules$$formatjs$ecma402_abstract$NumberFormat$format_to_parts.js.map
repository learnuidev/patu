{
"version":3,
"file":"module$node_modules$$formatjs$ecma402_abstract$NumberFormat$format_to_parts.js",
"lineCount":17,
"mappings":"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",
"sources":["node_modules/@formatjs/ecma402-abstract/NumberFormat/format_to_parts.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$formatjs$ecma402_abstract$NumberFormat$format_to_parts\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar ToRawFixed_1 = require(\"./ToRawFixed\");\nvar digitMapping = tslib_1.__importStar(require(\"./digit-mapping.json\"));\n// This is from: unicode-12.1.0/General_Category/Symbol/regex.js\n// IE11 does not support unicode flag, otherwise this is just /\\p{S}/u.\nvar S_UNICODE_REGEX = /[\\$\\+<->\\^`\\|~\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u07FE\\u07FF\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u166D\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20BF\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BFF\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uFB29\\uFBB2-\\uFBC1\\uFDFC\\uFDFD\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD807[\\uDFD5-\\uDFF1]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD838[\\uDD4F\\uDEFF]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD6C\\uDD70-\\uDDAC\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED5\\uDEE0-\\uDEEC\\uDEF0-\\uDEFA\\uDF00-\\uDF73\\uDF80-\\uDFD8\\uDFE0-\\uDFEB]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD00-\\uDD0B\\uDD0D-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95]/;\n// /^\\p{S}/u\nvar CARET_S_UNICODE_REGEX = new RegExp(\"^\" + S_UNICODE_REGEX.source);\n// /\\p{S}$/u\nvar S_DOLLAR_UNICODE_REGEX = new RegExp(S_UNICODE_REGEX.source + \"$\");\nvar CLDR_NUMBER_PATTERN = /[#0](?:[\\.,][#0]+)*/g;\nfunction formatToParts(numberResult, data, pl, options) {\n    var sign = numberResult.sign, exponent = numberResult.exponent, magnitude = numberResult.magnitude;\n    var notation = options.notation, style = options.style, numberingSystem = options.numberingSystem;\n    var defaultNumberingSystem = data.numbers.nu[0];\n    // #region Part 1: partition and interpolate the CLDR number pattern.\n    // ----------------------------------------------------------\n    var compactNumberPattern = null;\n    if (notation === 'compact' && magnitude) {\n        compactNumberPattern = getCompactDisplayPattern(numberResult, pl, data, style, options.compactDisplay, options.currencyDisplay, numberingSystem);\n    }\n    // This is used multiple times\n    var nonNameCurrencyPart;\n    if (style === 'currency' && options.currencyDisplay !== 'name') {\n        var byCurrencyDisplay = data.currencies[options.currency];\n        if (byCurrencyDisplay) {\n            switch (options.currencyDisplay) {\n                case 'code':\n                    nonNameCurrencyPart = options.currency;\n                    break;\n                case 'symbol':\n                    nonNameCurrencyPart = byCurrencyDisplay.symbol;\n                    break;\n                default:\n                    nonNameCurrencyPart = byCurrencyDisplay.narrow;\n                    break;\n            }\n        }\n        else {\n            // Fallback for unknown currency\n            nonNameCurrencyPart = options.currency;\n        }\n    }\n    var numberPattern;\n    if (!compactNumberPattern) {\n        // Note: if the style is unit, or is currency and the currency display is name,\n        // its unit parts will be interpolated in part 2. So here we can fallback to decimal.\n        if (style === 'decimal' ||\n            style === 'unit' ||\n            (style === 'currency' && options.currencyDisplay === 'name')) {\n            // Shortcut for decimal\n            var decimalData = data.numbers.decimal[numberingSystem] ||\n                data.numbers.decimal[defaultNumberingSystem];\n            numberPattern = getPatternForSign(decimalData.standard, sign);\n        }\n        else if (style === 'currency') {\n            var currencyData = data.numbers.currency[numberingSystem] ||\n                data.numbers.currency[defaultNumberingSystem];\n            // We replace number pattern part with `0` for easier postprocessing.\n            numberPattern = getPatternForSign(currencyData[options.currencySign], sign);\n        }\n        else {\n            // percent\n            var percentPattern = data.numbers.percent[numberingSystem] ||\n                data.numbers.percent[defaultNumberingSystem];\n            numberPattern = getPatternForSign(percentPattern, sign);\n        }\n    }\n    else {\n        numberPattern = compactNumberPattern;\n    }\n    // Extract the decimal number pattern string. It looks like \"#,##0,00\", which will later be\n    // used to infer decimal group sizes.\n    var decimalNumberPattern = CLDR_NUMBER_PATTERN.exec(numberPattern)[0];\n    // Now we start to substitute patterns\n    // 1. replace strings like `0` and `#,##0.00` with `{0}`\n    // 2. unquote characters (invariant: the quoted characters does not contain the special tokens)\n    numberPattern = numberPattern\n        .replace(CLDR_NUMBER_PATTERN, '{0}')\n        .replace(/'(.)'/g, '$1');\n    // Handle currency spacing (both compact and non-compact).\n    if (style === 'currency' && options.currencyDisplay !== 'name') {\n        var currencyData = data.numbers.currency[numberingSystem] ||\n            data.numbers.currency[defaultNumberingSystem];\n        // See `currencySpacing` substitution rule in TR-35.\n        // Here we always assume the currencyMatch is \"[:^S:]\" and surroundingMatch is \"[:digit:]\".\n        //\n        // Example 1: for pattern \"#,##0.00\u00a4\" with symbol \"US$\", we replace \"\u00a4\" with the symbol,\n        // but insert an extra non-break space before the symbol, because \"[:^S:]\" matches \"U\" in\n        // \"US$\" and \"[:digit:]\" matches the latn numbering system digits.\n        //\n        // Example 2: for pattern \"\u00a4#,##0.00\" with symbol \"US$\", there is no spacing between symbol\n        // and number, because `$` does not match \"[:^S:]\".\n        //\n        // Implementation note: here we do the best effort to infer the insertion.\n        // We also assume that `beforeInsertBetween` and `afterInsertBetween` will never be `;`.\n        var afterCurrency = currencyData.currencySpacing.afterInsertBetween;\n        if (afterCurrency && !S_DOLLAR_UNICODE_REGEX.test(nonNameCurrencyPart)) {\n            numberPattern = numberPattern.replace('\u00a4{0}', \"\\u00A4\" + afterCurrency + \"{0}\");\n        }\n        var beforeCurrency = currencyData.currencySpacing.beforeInsertBetween;\n        if (beforeCurrency && !CARET_S_UNICODE_REGEX.test(nonNameCurrencyPart)) {\n            numberPattern = numberPattern.replace('{0}\u00a4', \"{0}\" + beforeCurrency + \"\\u00A4\");\n        }\n    }\n    // The following tokens are special: `{0}`, `\u00a4`, `%`, `-`, `+`, `{c:...}.\n    var numberPatternParts = numberPattern.split(/({c:[^}]+}|\\{0\\}|[\u00a4%\\-\\+])/g);\n    var numberParts = [];\n    var symbols = data.numbers.symbols[numberingSystem] ||\n        data.numbers.symbols[defaultNumberingSystem];\n    for (var _i = 0, numberPatternParts_1 = numberPatternParts; _i < numberPatternParts_1.length; _i++) {\n        var part = numberPatternParts_1[_i];\n        if (!part) {\n            continue;\n        }\n        switch (part) {\n            case '{0}': {\n                // We only need to handle scientific and engineering notation here.\n                numberParts.push.apply(numberParts, paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, \n                // If compact number pattern exists, do not insert group separators.\n                !compactNumberPattern && options.useGrouping, decimalNumberPattern));\n                break;\n            }\n            case '-':\n                numberParts.push({ type: 'minusSign', value: symbols.minusSign });\n                break;\n            case '+':\n                numberParts.push({ type: 'plusSign', value: symbols.plusSign });\n                break;\n            case '%':\n                numberParts.push({ type: 'percentSign', value: symbols.percentSign });\n                break;\n            case '\u00a4':\n                // Computed above when handling currency spacing.\n                numberParts.push({ type: 'currency', value: nonNameCurrencyPart });\n                break;\n            default:\n                if (/^\\{c:/.test(part)) {\n                    numberParts.push({\n                        type: 'compact',\n                        value: part.substring(3, part.length - 1),\n                    });\n                }\n                else {\n                    // literal\n                    numberParts.push({ type: 'literal', value: part });\n                }\n                break;\n        }\n    }\n    // #endregion\n    // #region Part 2: interpolate unit pattern if necessary.\n    // ----------------------------------------------\n    switch (style) {\n        case 'currency': {\n            // `currencyDisplay: 'name'` has similar pattern handling as units.\n            if (options.currencyDisplay === 'name') {\n                var unitPattern = (data.numbers.currency[numberingSystem] ||\n                    data.numbers.currency[defaultNumberingSystem]).unitPattern;\n                // Select plural\n                var unitName = void 0;\n                var currencyNameData = data.currencies[options.currency];\n                if (currencyNameData) {\n                    unitName = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), currencyNameData.displayName);\n                }\n                else {\n                    // Fallback for unknown currency\n                    unitName = options.currency;\n                }\n                // Do {0} and {1} substitution\n                var unitPatternParts = unitPattern.split(/(\\{[01]\\})/g);\n                var result = [];\n                for (var _a = 0, unitPatternParts_1 = unitPatternParts; _a < unitPatternParts_1.length; _a++) {\n                    var part = unitPatternParts_1[_a];\n                    switch (part) {\n                        case '{0}':\n                            result.push.apply(result, numberParts);\n                            break;\n                        case '{1}':\n                            result.push({ type: 'currency', value: unitName });\n                            break;\n                        default:\n                            if (part) {\n                                result.push({ type: 'literal', value: part });\n                            }\n                            break;\n                    }\n                }\n                return result;\n            }\n            else {\n                return numberParts;\n            }\n        }\n        case 'unit': {\n            var unit = options.unit, unitDisplay = options.unitDisplay;\n            var unitData = data.units.simple[unit];\n            var unitPattern = void 0;\n            if (unitData) {\n                // Simple unit pattern\n                unitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[unit][unitDisplay]);\n            }\n            else {\n                // See: http://unicode.org/reports/tr35/tr35-general.html#perUnitPatterns\n                // If cannot find unit in the simple pattern, it must be \"per\" compound pattern.\n                // Implementation note: we are not following TR-35 here because we need to format to parts!\n                var _b = unit.split('-per-'), numeratorUnit = _b[0], denominatorUnit = _b[1];\n                unitData = data.units.simple[numeratorUnit];\n                var numeratorUnitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[numeratorUnit][unitDisplay]);\n                var perUnitPattern = data.units.simple[denominatorUnit].perUnit[unitDisplay];\n                if (perUnitPattern) {\n                    // perUnitPattern exists, combine it with numeratorUnitPattern\n                    unitPattern = perUnitPattern.replace('{0}', numeratorUnitPattern);\n                }\n                else {\n                    // get compoundUnit pattern (e.g. \"{0} per {1}\"), repalce {0} with numerator pattern and {1} with\n                    // the denominator pattern in singular form.\n                    var perPattern = data.units.compound.per[unitDisplay];\n                    var denominatorPattern = selectPlural(pl, 1, data.units.simple[denominatorUnit][unitDisplay]);\n                    unitPattern = unitPattern = perPattern\n                        .replace('{0}', numeratorUnitPattern)\n                        .replace('{1}', denominatorPattern.replace('{0}', ''));\n                }\n            }\n            var result = [];\n            // We need spacing around \"{0}\" because they are not treated as \"unit\" parts, but \"literal\".\n            for (var _c = 0, _d = unitPattern.split(/(\\s*\\{0\\}\\s*)/); _c < _d.length; _c++) {\n                var part = _d[_c];\n                var interpolateMatch = /^(\\s*)\\{0\\}(\\s*)$/.exec(part);\n                if (interpolateMatch) {\n                    // Space before \"{0}\"\n                    if (interpolateMatch[1]) {\n                        result.push({ type: 'literal', value: interpolateMatch[1] });\n                    }\n                    // \"{0}\" itself\n                    result.push.apply(result, numberParts);\n                    // Space after \"{0}\"\n                    if (interpolateMatch[2]) {\n                        result.push({ type: 'literal', value: interpolateMatch[2] });\n                    }\n                }\n                else if (part) {\n                    result.push({ type: 'unit', value: part });\n                }\n            }\n            return result;\n        }\n        default:\n            return numberParts;\n    }\n    // #endregion\n}\nexports.default = formatToParts;\n// A subset of https://tc39.es/ecma402/#sec-partitionnotationsubpattern\n// Plus the exponent parts handling.\nfunction paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, useGrouping, \n/**\n * This is the decimal number pattern without signs or symbols.\n * It is used to infer the group size when `useGrouping` is true.\n *\n * A typical value looks like \"#,##0.00\" (primary group size is 3).\n * Some locales like Hindi has secondary group size of 2 (e.g. \"#,##,##0.00\").\n */\ndecimalNumberPattern) {\n    var result = [];\n    // eslint-disable-next-line prefer-const\n    var n = numberResult.formattedString, x = numberResult.roundedNumber;\n    if (isNaN(x)) {\n        return [{ type: 'nan', value: n }];\n    }\n    else if (!isFinite(x)) {\n        return [{ type: 'infinity', value: n }];\n    }\n    var digitReplacementTable = digitMapping[numberingSystem];\n    if (digitReplacementTable) {\n        n = n.replace(/\\d/g, function (digit) { return digitReplacementTable[+digit] || digit; });\n    }\n    // TODO: Else use an implementation dependent algorithm to map n to the appropriate\n    // representation of n in the given numbering system.\n    var decimalSepIndex = n.indexOf('.');\n    var integer;\n    var fraction;\n    if (decimalSepIndex > 0) {\n        integer = n.slice(0, decimalSepIndex);\n        fraction = n.slice(decimalSepIndex + 1);\n    }\n    else {\n        integer = n;\n    }\n    // #region Grouping integer digits\n    // The weird compact and x >= 10000 check is to ensure consistency with Node.js and Chrome.\n    // Note that `de` does not have compact form for thousands, but Node.js does not insert grouping separator\n    // unless the rounded number is greater than 10000:\n    //   NumberFormat('de', {notation: 'compact', compactDisplay: 'short'}).format(1234) //=> \"1234\"\n    //   NumberFormat('de').format(1234) //=> \"1.234\"\n    if (useGrouping && (notation !== 'compact' || x >= 10000)) {\n        var groupSepSymbol = symbols.group;\n        var groups = [];\n        // > There may be two different grouping sizes: The primary grouping size used for the least\n        // > significant integer group, and the secondary grouping size used for more significant groups.\n        // > If a pattern contains multiple grouping separators, the interval between the last one and the\n        // > end of the integer defines the primary grouping size, and the interval between the last two\n        // > defines the secondary grouping size. All others are ignored.\n        var integerNumberPattern = decimalNumberPattern.split('.')[0];\n        var patternGroups = integerNumberPattern.split(',');\n        var primaryGroupingSize = 3;\n        var secondaryGroupingSize = 3;\n        if (patternGroups.length > 1) {\n            primaryGroupingSize = patternGroups[patternGroups.length - 1].length;\n        }\n        if (patternGroups.length > 2) {\n            secondaryGroupingSize = patternGroups[patternGroups.length - 2].length;\n        }\n        var i = integer.length - primaryGroupingSize;\n        if (i > 0) {\n            // Slice the least significant integer group\n            groups.push(integer.slice(i, i + primaryGroupingSize));\n            // Then iteratively push the more signicant groups\n            // TODO: handle surrogate pairs in some numbering system digits\n            for (i -= secondaryGroupingSize; i > 0; i -= secondaryGroupingSize) {\n                groups.push(integer.slice(i, i + secondaryGroupingSize));\n            }\n            groups.push(integer.slice(0, i + secondaryGroupingSize));\n        }\n        else {\n            groups.push(integer);\n        }\n        while (groups.length > 0) {\n            var integerGroup = groups.pop();\n            result.push({ type: 'integer', value: integerGroup });\n            if (groups.length > 0) {\n                result.push({ type: 'group', value: groupSepSymbol });\n            }\n        }\n    }\n    else {\n        result.push({ type: 'integer', value: integer });\n    }\n    // #endregion\n    if (fraction !== undefined) {\n        result.push({ type: 'decimal', value: symbols.decimal }, { type: 'fraction', value: fraction });\n    }\n    if ((notation === 'scientific' || notation === 'engineering') &&\n        isFinite(x)) {\n        result.push({ type: 'exponentSeparator', value: symbols.exponential });\n        if (exponent < 0) {\n            result.push({ type: 'exponentMinusSign', value: symbols.minusSign });\n            exponent = -exponent;\n        }\n        var exponentResult = ToRawFixed_1.ToRawFixed(exponent, 0, 0);\n        result.push({\n            type: 'exponentInteger',\n            value: exponentResult.formattedString,\n        });\n    }\n    return result;\n}\nfunction getPatternForSign(pattern, sign) {\n    if (pattern.indexOf(';') < 0) {\n        pattern = pattern + \";-\" + pattern;\n    }\n    var _a = pattern.split(';'), zeroPattern = _a[0], negativePattern = _a[1];\n    switch (sign) {\n        case 0:\n            return zeroPattern;\n        case -1:\n            return negativePattern;\n        default:\n            return negativePattern.indexOf('-') >= 0\n                ? negativePattern.replace(/-/g, '+')\n                : \"+\" + zeroPattern;\n    }\n}\n// Find the CLDR pattern for compact notation based on the magnitude of data and style.\n//\n// Example return value: \"\u00a4\u00a0{c:laki}000;\u00a4{c:laki}\u00a0-0\" (`sw` locale):\n// - Notice the `{c:...}` token that wraps the compact literal.\n// - The consecutive zeros are normalized to single zero to match CLDR_NUMBER_PATTERN.\n//\n// Returning null means the compact display pattern cannot be found.\nfunction getCompactDisplayPattern(numberResult, pl, data, style, compactDisplay, currencyDisplay, numberingSystem) {\n    var _a;\n    var roundedNumber = numberResult.roundedNumber, sign = numberResult.sign, magnitude = numberResult.magnitude;\n    var magnitudeKey = String(Math.pow(10, magnitude));\n    var defaultNumberingSystem = data.numbers.nu[0];\n    var pattern;\n    if (style === 'currency' && currencyDisplay !== 'name') {\n        var byNumberingSystem = data.numbers.currency;\n        var currencyData = byNumberingSystem[numberingSystem] ||\n            byNumberingSystem[defaultNumberingSystem];\n        // NOTE: compact notation ignores currencySign!\n        var compactPluralRules = (_a = currencyData.short) === null || _a === void 0 ? void 0 : _a[magnitudeKey];\n        if (!compactPluralRules) {\n            return null;\n        }\n        pattern = selectPlural(pl, roundedNumber, compactPluralRules);\n    }\n    else {\n        var byNumberingSystem = data.numbers.decimal;\n        var byCompactDisplay = byNumberingSystem[numberingSystem] ||\n            byNumberingSystem[defaultNumberingSystem];\n        var compactPlaralRule = byCompactDisplay[compactDisplay][magnitudeKey];\n        if (!compactPlaralRule) {\n            return null;\n        }\n        pattern = selectPlural(pl, roundedNumber, compactPlaralRule);\n    }\n    // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats\n    // > If the value is precisely \u201c0\u201d, either explicit or defaulted, then the normal number format\n    // > pattern for that sort of object is supplied.\n    if (pattern === '0') {\n        return null;\n    }\n    pattern = getPatternForSign(pattern, sign)\n        // Extract compact literal from the pattern\n        .replace(/([^\\s;\\-\\+\\d\u00a4]+)/g, '{c:$1}')\n        // We replace one or more zeros with a single zero so it matches `CLDR_NUMBER_PATTERN`.\n        .replace(/0+/, '0');\n    return pattern;\n}\nfunction selectPlural(pl, x, rules) {\n    return rules[pl.select(x)] || rules.other;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","paritionNumberIntoParts","symbols","numberResult","notation","exponent","numberingSystem","useGrouping","decimalNumberPattern","result","n","formattedString","x","roundedNumber","isNaN","type","value","isFinite","digitReplacementTable","digitMapping","replace","digit","decimalSepIndex","indexOf","integer","slice","fraction","groupSepSymbol","group","groups","patternGroups","split","integerNumberPattern","secondaryGroupingSize","primaryGroupingSize","length","i","push","integerGroup","pop","undefined","decimal","exponential","minusSign","exponentResult","ToRawFixed_1","ToRawFixed","getPatternForSign","pattern","sign","_a","zeroPattern","negativePattern","selectPlural","pl","rules","select","other","Object","defineProperty","tslib_1","__importStar","S_UNICODE_REGEX","CARET_S_UNICODE_REGEX","RegExp","source","S_DOLLAR_UNICODE_REGEX","CLDR_NUMBER_PATTERN","default","formatToParts","data","options","magnitude","style","defaultNumberingSystem","numbers","nu","compactNumberPattern","compactDisplay","magnitudeKey","String","Math","pow","currencyDisplay","byNumberingSystem","currency","compactPluralRules","short","compactPlaralRule","nonNameCurrencyPart","byCurrencyDisplay","currencies","symbol","narrow","numberPattern","standard","currencyData","currencySign","percent","exec","afterCurrency","currencySpacing","afterInsertBetween","test","beforeCurrency","beforeInsertBetween","numberPatternParts","numberParts","_i","part","apply","plusSign","percentSign","substring","unitPattern","unitName","currencyNameData","displayName","unitPatternParts_1","unitPatternParts","unit","unitDisplay","units","simple","unitData","_b","denominatorUnit","numeratorUnitPattern","numeratorUnit","perUnitPattern","perUnit","perPattern","compound","per","denominatorPattern","_c","_d","interpolateMatch"]
}
