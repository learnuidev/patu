{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$PhysicsEditorParser.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/PhysicsEditorParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$PhysicsEditorParser\"] = function(global,require,module,exports) {\n/**\r\n * @author       Joachim Grill <joachim@codeandweb.com>\r\n * @copyright    2018 CodeAndWeb GmbH\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Bodies = require('./lib/factory/Bodies');\r\nvar Body = require('./lib/body/Body');\r\nvar Bounds = require('./lib/geometry/Bounds');\r\nvar Common = require('./lib/core/Common');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Vector = require('./lib/geometry/Vector');\r\nvar Vertices = require('./lib/geometry/Vertices');\r\n\r\n/**\r\n * Use PhysicsEditorParser.parseBody() to build a Matter body object, based on a physics data file\r\n * created and exported with PhysicsEditor (https://www.codeandweb.com/physicseditor).\r\n *\r\n * @namespace Phaser.Physics.Matter.PhysicsEditorParser\r\n * @since 3.10.0\r\n */\r\nvar PhysicsEditorParser = {\r\n\r\n    /**\r\n     * Parses a body element exported by PhysicsEditor.\r\n     *\r\n     * @function Phaser.Physics.Matter.PhysicsEditorParser.parseBody\r\n     * @since 3.10.0\r\n     *\r\n     * @param {number} x - x position.\r\n     * @param {number} y - y position.\r\n     * @param {number} w - width.\r\n     * @param {number} h - height.\r\n     * @param {object} config - body configuration and fixture (child body) definitions.\r\n     * \r\n     * @return {object} A matter body, consisting of several parts (child bodies)\r\n     */\r\n    parseBody: function (x, y, w, h, config)\r\n    {\r\n        var fixtureConfigs = GetFastValue(config, 'fixtures', []);\r\n        var fixtures = [];\r\n\r\n        for (var fc = 0; fc < fixtureConfigs.length; fc++)\r\n        {\r\n            var fixtureParts = this.parseFixture(fixtureConfigs[fc]);\r\n\r\n            for (var i = 0; i < fixtureParts.length; i++)\r\n            {\r\n                fixtures.push(fixtureParts[i]);\r\n            }\r\n        }\r\n\r\n        var matterConfig = Common.extend({}, false, config);\r\n\r\n        delete matterConfig.fixtures;\r\n        delete matterConfig.type;\r\n\r\n        var body = Body.create(matterConfig);\r\n\r\n        Body.setParts(body, fixtures);\r\n        body.render.sprite.xOffset = body.position.x / w;\r\n        body.render.sprite.yOffset = body.position.y / h;\r\n        Body.setPosition(body, { x: x, y: y });\r\n\r\n        return body;\r\n    },\r\n\r\n\r\n    /**\r\n     * Parses an element of the \"fixtures\" list exported by PhysicsEditor\r\n     *\r\n     * @function Phaser.Physics.Matter.PhysicsEditorParser.parseFixture\r\n     * @since 3.10.0\r\n     *\r\n     * @param {object} fixtureConfig - the fixture object to parse\r\n     * \r\n     * @return {object[]} - A list of matter bodies\r\n     */\r\n    parseFixture: function (fixtureConfig)\r\n    {\r\n        var matterConfig = Common.extend({}, false, fixtureConfig);\r\n\r\n        delete matterConfig.circle;\r\n        delete matterConfig.vertices;\r\n\r\n        var fixtures;\r\n\r\n        if (fixtureConfig.circle)\r\n        {\r\n            var x = GetFastValue(fixtureConfig.circle, 'x');\r\n            var y = GetFastValue(fixtureConfig.circle, 'y');\r\n            var r = GetFastValue(fixtureConfig.circle, 'radius');\r\n            fixtures = [ Bodies.circle(x, y, r, matterConfig) ];\r\n        }\r\n        else if (fixtureConfig.vertices)\r\n        {\r\n            fixtures = this.parseVertices(fixtureConfig.vertices, matterConfig);\r\n        }\r\n\r\n        return fixtures;\r\n    },\r\n\r\n    /**\r\n     * Parses the \"vertices\" lists exported by PhysicsEditor.\r\n     *\r\n     * @function Phaser.Physics.Matter.PhysicsEditorParser.parseVertices\r\n     * @since 3.10.0\r\n     *\r\n     * @param {object} vertexSets - The vertex lists to parse.\r\n     * @param {object} options - Matter body options.\r\n     * \r\n     * @return {object[]} - A list of matter bodies.\r\n     */\r\n    parseVertices: function (vertexSets, options)\r\n    {\r\n        var i, j, k, v, z;\r\n        var parts = [];\r\n\r\n        options = options || {};\r\n\r\n        for (v = 0; v < vertexSets.length; v += 1)\r\n        {\r\n            parts.push(Body.create(Common.extend({\r\n                position: Vertices.centre(vertexSets[v]),\r\n                vertices: vertexSets[v]\r\n            }, options)));\r\n        }\r\n\r\n        // flag coincident part edges\r\n        var coincidentMaxDist = 5;\r\n\r\n        for (i = 0; i < parts.length; i++)\r\n        {\r\n            var partA = parts[i];\r\n\r\n            for (j = i + 1; j < parts.length; j++)\r\n            {\r\n                var partB = parts[j];\r\n\r\n                if (Bounds.overlaps(partA.bounds, partB.bounds))\r\n                {\r\n                    var pav = partA.vertices,\r\n                        pbv = partB.vertices;\r\n\r\n                    // iterate vertices of both parts\r\n                    for (k = 0; k < partA.vertices.length; k++)\r\n                    {\r\n                        for (z = 0; z < partB.vertices.length; z++)\r\n                        {\r\n                            // find distances between the vertices\r\n                            var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\r\n                                db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\r\n\r\n                            // if both vertices are very close, consider the edge concident (internal)\r\n                            if (da < coincidentMaxDist && db < coincidentMaxDist)\r\n                            {\r\n                                pav[k].isInternal = true;\r\n                                pbv[z].isInternal = true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return parts;\r\n    }\r\n};\r\n\r\nmodule.exports = PhysicsEditorParser;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Bodies","Body","Bounds","Common","GetFastValue","Vector","Vertices","PhysicsEditorParser","parseBody","x","y","w","h","config","fixtureConfigs","fixtures","fc","length","fixtureParts","parseFixture","i","push","matterConfig","extend","type","body","create","setParts","render","sprite","xOffset","position","yOffset","setPosition","fixtureConfig","circle","vertices","r","parseVertices","vertexSets","options","k","z","parts","v","centre","partA","j","partB","overlaps","bounds","pav","pbv","da","magnitudeSquared","sub","db","coincidentMaxDist","isInternal"]
}
