{"version":3,"sources":["komponentit/mixins.cljs"],"mappings":";;;;;AAKA,AAAA,AAAMA,AAAcC;AAApB,AACMA,AAAEC,AAAK,AAAA,AAAA,AAAA,AAACC,AAA2B,AAAA,AAAA,AAACA;;AAE1C,AAAA,AAAOC,AAAkBC,AAAGC,AAAUC,AAAMC;AAA5C,AACE,AAACC,AAAMH,AACA,AAAKA;AAAL,AACE,AAAMI,AAAoB,AAACC,AAAI,AAACC,AAAKN;AAC/BO,AAAgB,AAACF,AAAI,AAACC,AAAKL;AADjC,AAEE,AAAMD,AAAUQ;AAAAA,AACd,AAACC,AAAO,AAAKT,AAAUL;AAAf,AACE,AAAMe,AAAE,AAAKC;AAAL,AAEE,AAAMD,AAAE,AAACE,AAAI,AAACC,AAAQX,AAAMP;AAA5B,AACE,AAACe,AAAAA,AAAAA,AAAEC,AAAAA;;AAHf,AAIE,AAAmBZ,AAAG,AAACL,AAAaC,AAAGe;;AACvC,AAACI,AAAMd,AAAUL,AAAEe;AACvBF,AAAE,AAACO,AAAeR,AAAgBH;AAR5C,AASE,AAACK,AAAO,AAAKT,AAAUL;AAAf,AACE,AAAsBI,AAAG,AAACL,AAAaC,AAAG,AAACiB,AAAIZ,AAAUL;;AACzD,AAACqB,AAAOhB,AAAUL;AACpBa,AAAE,AAACO,AAAeX,AAAoBG;;;AAE7D,AAAA,AAAMU,AACHC;AADH,AAEE,AAAMlB,AAAU,AAAA,AAACmB;AAAjB,AACE,AAAA,AAAA,AAAA,AAAA,AAACC,AAEuB,AAAKlB;AAAL,AAAW,AAACJ,AAAiBuB,AAAUrB,AAAU,AAACa,AAAQX,AAAMA;AAFxF,AAGyB,AAAKA;AAAL,AAAW,AAACJ,AAAiBuB,AAAUrB,AAAU,AAACa,AAAQX,AAAMA;AAHzF,AAI2B,AAAKA;AAAL,AAAW,AAAA,AAACJ,AAAiBuB,AAAUrB,AAAaE;AAJ/E,AAMG,AAAKD,AAAMqB;AAAX,AACEA","names":["komponentit.mixins/->event-type","k","cljs.core/name","clojure.string/replace","komponentit.mixins/update-listeners","el","listeners","props","this","cljs.core.swap_BANG_","current-event-types","cljs.core/set","cljs.core/keys","new-event-types","$","cljs.core.reduce","f","e","cljs.core.get","reagent.core/props","cljs.core.assoc","clojure.set.difference","cljs.core.dissoc","komponentit.mixins/window-event-listener","_","cljs.core.atom","reagent.core.create_class","js/window","child"],"sourcesContent":["(ns komponentit.mixins\n  (:require [reagent.core :as r]\n            [clojure.set :as set]\n            [clojure.string :as string]))\n\n(defn ->event-type [k]\n  (-> k name (string/replace #\"^on-\" \"\") (string/replace #\"-\" \"\")))\n\n(defn- update-listeners [el listeners props this]\n  (swap! listeners\n         (fn [listeners]\n           (let [current-event-types (set (keys listeners))\n                 new-event-types (set (keys props))]\n             (as-> listeners $\n               (reduce (fn [listeners k]\n                         (let [f (fn [e]\n                                   ;; Need to retrieve latest callback in case the props have been updated\n                                   (let [f (get (r/props this) k)]\n                                     (f e)))]\n                           (.addEventListener el (->event-type k) f)\n                           (assoc listeners k f)))\n                       $ (set/difference new-event-types current-event-types))\n               (reduce (fn [listeners k]\n                         (.removeEventListener el (->event-type k) (get listeners k))\n                         (dissoc listeners k))\n                       $ (set/difference current-event-types new-event-types)))))))\n\n(defn window-event-listener\n  [_]\n  (let [listeners (atom nil)]\n    (r/create-class\n      {:display-name \"komponentit.mixins.window_event_listener_class\"\n       :component-did-mount (fn [this] (update-listeners js/window listeners (r/props this) this))\n       :component-did-update (fn [this] (update-listeners js/window listeners (r/props this) this))\n       :component-will-unmount (fn [this] (update-listeners js/window listeners {} this))\n       :reagent-render\n       (fn [props child]\n         child)})))\n"]}