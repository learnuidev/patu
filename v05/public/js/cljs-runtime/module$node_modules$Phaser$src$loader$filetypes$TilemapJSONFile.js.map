{
"version":3,
"file":"module$node_modules$Phaser$src$loader$filetypes$TilemapJSONFile.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,gEAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOxHC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACRI,QAAAA,CAAmBJ,OAAA,CAAQ,wDAAR,CACvB,KAAIK,SAAWL,OAAA,CAAQ,0DAAR,CAAf,CACIM,gBAAkBN,OAAA,CAAQ,iDAAR,CADtB,CA+BIO,gBAAkB,IAAIJ,MAAJ,CAAU,CAE5BK,QAASH,QAFmB,CAI5BI,WAEAF,QAAyB,CAACG,MAAD,CAASC,GAAT,CAAcC,GAAd,CAAmBC,WAAnB,CACzB,CACIR,QAAAS,KAAA,CAAc,IAAd;AAAoBJ,MAApB,CAA4BC,GAA5B,CAAiCC,GAAjC,CAAsCC,WAAtC,CAEA,KAAAE,KAAA,CAAY,aAEZ,KAAAC,MAAA,CAAaN,MAAAO,aAAAC,QALjB,CAP4B,CAqB5BC,WAAYA,QAAS,EACrB,CACI,IAAIC,SAAW,CAAEC,OAAQf,eAAAgB,WAAV,CAAsCC,KAAM,IAAAA,KAA5C,CAEf,KAAAP,MAAAQ,IAAA,CAAe,IAAAb,IAAf,CAAyBS,QAAzB,CAEA,KAAAK,eAAA,CAAoBL,QAApB,CALJ,CAtB4B,CAAV,CAqGtBhB,QAAAsB,SAAA,CAA0B,kBAA1B,CAA8C,QAAS,CAACf,GAAD,CAAMC,GAAN,CAAWC,WAAX,CACvD,CACI,GAAIc,KAAAC,QAAA,CAAcjB,GAAd,CAAJ,CAEI,IAASkB,GAAT,CAAa,CAAb,CAAgBA,GAAhB,CAAoBlB,GAAAmB,OAApB,CAAgCD,GAAA,EAAhC,CAGI,IAAAE,QAAA,CAAa,IAAIxB,eAAJ,CAAoB,IAApB,CAA0BI,GAAA,CAAIkB,GAAJ,CAA1B,CAAb,CALR,KAUI,KAAAE,QAAA,CAAa,IAAIxB,eAAJ,CAAoB,IAApB,CAA0BI,GAA1B,CAA+BC,GAA/B,CAAoCC,WAApC,CAAb,CAGJ,OAAO,KAdX,CADA,CAkBAZ,OAAAC,QAAA;AAAiBK,eA/J2G;",
"sources":["node_modules/Phaser/src/loader/filetypes/TilemapJSONFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$filetypes$TilemapJSONFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar JSONFile = require('./JSONFile.js');\r\nvar TILEMAP_FORMATS = require('../../tilemaps/Formats');\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.TilemapJSONFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within both the Loader and the Tilemap Cache.\r\n * @property {string} [url] - The absolute or relative URL to load the file from.\r\n * @property {string} [extension='json'] - The default file extension to use if no url is provided.\r\n * @property {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A single Tiled Tilemap JSON File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#tilemapTiledJSON method and are not typically created directly.\r\n *\r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#tilemapTiledJSON.\r\n *\r\n * @class TilemapJSONFile\r\n * @extends Phaser.Loader.File\r\n * @memberOf Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.TilemapJSONFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\r\n * @param {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar TilemapJSONFile = new Class({\r\n\r\n    Extends: JSONFile,\r\n\r\n    initialize:\r\n\r\n    function TilemapJSONFile (loader, key, url, xhrSettings)\r\n    {\r\n        JSONFile.call(this, loader, key, url, xhrSettings);\r\n\r\n        this.type = 'tilemapJSON';\r\n\r\n        this.cache = loader.cacheManager.tilemap;\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.TilemapJSONFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        var tiledata = { format: TILEMAP_FORMATS.TILED_JSON, data: this.data };\r\n\r\n        this.cache.add(this.key, tiledata);\r\n\r\n        this.pendingDestroy(tiledata);\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds a Tiled JSON Tilemap file, or array of map files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n *\r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.tilemapTiledJSON('level1', 'maps/Level1.json');\r\n * }\r\n * ```\r\n *\r\n * The Tilemap data is created using the Tiled Map Editor and selecting JSON as the export format.\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Tilemap Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Tilemap Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Text Cache first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n *\r\n * ```javascript\r\n * this.load.tilemapTiledJSON({\r\n *     key: 'level1',\r\n *     url: 'maps/Level1.json'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.TilemapJSONFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can access it from its Cache using its key:\r\n *\r\n * ```javascript\r\n * this.load.tilemapTiledJSON('level1', 'maps/Level1.json');\r\n * // and later in your game ...\r\n * var map = this.make.tilemap({ key: 'level1' });\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `LEVEL1.` and the key was `Story` the final key will be `LEVEL1.Story` and\r\n * this is what you would use to retrieve the text from the Tilemap Cache.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"level\"\r\n * and no URL is given then the Loader will set the URL to be \"level.json\". It will always add `.json` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Tilemap JSON File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#tilemapTiledJSON\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.TilemapJSONFileConfig|Phaser.Loader.FileTypes.TilemapJSONFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\r\n * @param {XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('tilemapTiledJSON', function (key, url, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new TilemapJSONFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new TilemapJSONFile(this, key, url, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = TilemapJSONFile;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","FileTypesManager","JSONFile","TILEMAP_FORMATS","TilemapJSONFile","Extends","initialize","loader","key","url","xhrSettings","call","type","cache","cacheManager","tilemap","addToCache","tiledata","format","TILED_JSON","data","add","pendingDestroy","register","Array","isArray","i","length","addFile"]
}
