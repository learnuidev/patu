{
"version":3,
"file":"module$node_modules$Phaser$src$loader$filetypes$HTMLTextureFile.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/loader/filetypes/HTMLTextureFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$filetypes$HTMLTextureFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.HTMLTextureFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within both the Loader and the Texture Manager.\r\n * @property {string} [url] - The absolute or relative URL to load the file from.\r\n * @property {string} [extension='html'] - The default file extension to use if no url is provided.\r\n * @property {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n * @property {integer} [width=512] - The width of the texture the HTML will be rendered to.\r\n * @property {integer} [height=512] - The height of the texture the HTML will be rendered to.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A single HTML File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#htmlTexture method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#htmlTexture.\r\n *\r\n * @class HTMLTextureFile\r\n * @extends Phaser.Loader.File\r\n * @memberOf Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.12.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.HTMLTextureFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {integer} [width] - The width of the texture the HTML will be rendered to.\r\n * @param {integer} [height] - The height of the texture the HTML will be rendered to.\r\n * @param {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar HTMLTextureFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function HTMLTextureFile (loader, key, url, width, height, xhrSettings)\r\n    {\r\n        if (width === undefined) { width = 512; }\r\n        if (height === undefined) { height = 512; }\r\n\r\n        var extension = 'html';\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            url = GetFastValue(config, 'url');\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            extension = GetFastValue(config, 'extension', extension);\r\n            width = GetFastValue(config, 'width', width);\r\n            height = GetFastValue(config, 'height', height);\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'html',\r\n            cache: loader.textureManager,\r\n            extension: extension,\r\n            responseType: 'text',\r\n            key: key,\r\n            url: url,\r\n            xhrSettings: xhrSettings,\r\n            config: {\r\n                width: width,\r\n                height: height\r\n            }\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTMLTextureFile#onProcess\r\n     * @since 3.7.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        var w = this.config.width;\r\n        var h = this.config.height;\r\n\r\n        var data = [];\r\n\r\n        data.push('<svg width=\"' + w + 'px\" height=\"' + h + 'px\" viewBox=\"0 0 ' + w + ' ' + h + '\" xmlns=\"http://www.w3.org/2000/svg\">');\r\n        data.push('<foreignObject width=\"100%\" height=\"100%\">');\r\n        data.push('<body xmlns=\"http://www.w3.org/1999/xhtml\">');\r\n        data.push(this.xhrLoader.responseText);\r\n        data.push('</body>');\r\n        data.push('</foreignObject>');\r\n        data.push('</svg>');\r\n\r\n        var svg = [ data.join('\\n') ];\r\n        var _this = this;\r\n\r\n        try\r\n        {\r\n            var blob = new window.Blob(svg, { type: 'image/svg+xml;charset=utf-8' });\r\n        }\r\n        catch (e)\r\n        {\r\n            _this.state = CONST.FILE_ERRORED;\r\n\r\n            _this.onProcessComplete();\r\n\r\n            return;\r\n        }\r\n\r\n        this.data = new Image();\r\n\r\n        this.data.crossOrigin = this.crossOrigin;\r\n\r\n        this.data.onload = function ()\r\n        {\r\n            File.revokeObjectURL(_this.data);\r\n\r\n            _this.onProcessComplete();\r\n        };\r\n\r\n        this.data.onerror = function ()\r\n        {\r\n            File.revokeObjectURL(_this.data);\r\n\r\n            _this.onProcessError();\r\n        };\r\n\r\n        File.createObjectURL(this.data, blob, 'image/svg+xml');\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTMLTextureFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        var texture = this.cache.addImage(this.key, this.data);\r\n\r\n        this.pendingDestroy(texture);\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds an HTML File, or array of HTML Files, to the current load queue. When the files are loaded they\r\n * will be rendered to textures and stored in the Texture Manager.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.htmlTexture('instructions', 'content/intro.html', 256, 512);\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.htmlTexture({\r\n *     key: 'instructions',\r\n *     url: 'content/intro.html',\r\n *     width: 256,\r\n *     height: 512\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.HTMLTextureFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can use it as a texture for a Game Object by referencing its key:\r\n * \r\n * ```javascript\r\n * this.load.htmlTexture('instructions', 'content/intro.html', 256, 512);\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'instructions');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.html\". It will always add `.html` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * The width and height are the size of the texture to which the HTML will be rendered. It's not possible to determine these\r\n * automatically, so you will need to provide them, either as arguments or in the file config object.\r\n * When the HTML file has loaded a new SVG element is created with a size and viewbox set to the width and height given.\r\n * The SVG file has a body tag added to it, with the HTML file contents included. It then calls `window.Blob` on the SVG,\r\n * and if successful is added to the Texture Manager, otherwise it fails processing. The overall quality of the rendered\r\n * HTML depends on your browser, and some of them may not even support the svg / blob process used. Be aware that there are\r\n * limitations on what HTML can be inside an SVG. You can find out more details in this\r\n * [Mozilla MDN entry](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Drawing_DOM_objects_into_a_canvas).\r\n *\r\n * Note: The ability to load this type of file will only be available if the HTMLTextureFile File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#htmlTexture\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.12.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.HTMLTextureFileConfig|Phaser.Loader.FileTypes.HTMLTextureFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.html`, i.e. if `key` was \"alien\" then the URL will be \"alien.html\".\r\n * @param {integer} [width=512] - The width of the texture the HTML will be rendered to.\r\n * @param {integer} [height=512] - The height of the texture the HTML will be rendered to.\r\n * @param {XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('htmlTexture', function (key, url, width, height, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new HTMLTextureFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new HTMLTextureFile(this, key, url, width, height, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = HTMLTextureFile;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","CONST","File","FileTypesManager","GetFastValue","IsPlainObject","HTMLTextureFile","Extends","initialize","loader","key","url","width","height","xhrSettings","undefined","extension","config","call","fileConfig","type","cache","textureManager","responseType","onProcess","state","FILE_PROCESSING","w","h","data","push","xhrLoader","responseText","svg","join","_this","blob","window","Blob","e","FILE_ERRORED","onProcessComplete","Image","crossOrigin","onload","this.data.onload","revokeObjectURL","onerror","this.data.onerror","onProcessError","createObjectURL","addToCache","texture","addImage","pendingDestroy","register","Array","isArray","i","length","addFile"]
}
