{
"version":3,
"file":"module$node_modules$Phaser$src$physics$arcade$PhysicsGroup.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/arcade/PhysicsGroup.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$arcade$PhysicsGroup\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar ArcadeSprite = require('./ArcadeSprite');\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('./const');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Group = require('../../gameobjects/group/Group');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @typedef {object} PhysicsGroupConfig\r\n * @extends GroupConfig\r\n *\r\n * @property {boolean} [collideWorldBounds=false] - Sets {@link Phaser.Physics.Arcade.Body#collideWorldBounds}.\r\n * @property {number} [accelerationX=0] - Sets {@link Phaser.Physics.Arcade.Body#acceleration acceleration.x}.\r\n * @property {number} [accelerationY=0] - Sets {@link Phaser.Physics.Arcade.Body#acceleration acceleration.y}.\r\n * @property {boolean} [allowDrag=true] - Sets {@link Phaser.Physics.Arcade.Body#allowDrag}.\r\n * @property {boolean} [allowGravity=true] - Sets {@link Phaser.Physics.Arcade.Body#allowGravity}.\r\n * @property {boolean} [allowRotation=true] - Sets {@link Phaser.Physics.Arcade.Body#allowRotation}.\r\n * @property {number} [bounceX=0] - Sets {@link Phaser.Physics.Arcade.Body#bounce bounce.x}.\r\n * @property {number} [bounceY=0] - Sets {@link Phaser.Physics.Arcade.Body#bounce bounce.y}.\r\n * @property {number} [dragX=0] - Sets {@link Phaser.Physics.Arcade.Body#drag drag.x}.\r\n * @property {number} [dragY=0] - Sets {@link Phaser.Physics.Arcade.Body#drag drag.y}.\r\n * @property {number} [gravityX=0] - Sets {@link Phaser.Physics.Arcade.Body#gravity gravity.x}.\r\n * @property {number} [gravityY=0] - Sets {@link Phaser.Physics.Arcade.Body#gravity gravity.y}.\r\n * @property {number} [frictionX=0] - Sets {@link Phaser.Physics.Arcade.Body#friction friction.x}.\r\n * @property {number} [frictionY=0] - Sets {@link Phaser.Physics.Arcade.Body#friction friction.y}.\r\n * @property {number} [velocityX=0] - Sets {@link Phaser.Physics.Arcade.Body#velocity velocity.x}.\r\n * @property {number} [velocityY=0] - Sets {@link Phaser.Physics.Arcade.Body#velocity velocity.y}.\r\n * @property {number} [angularVelocity=0] - Sets {@link Phaser.Physics.Arcade.Body#angularVelocity}.\r\n * @property {number} [angularAcceleration=0] - Sets {@link Phaser.Physics.Arcade.Body#angularAcceleration}.\r\n * @property {number} [angularDrag=0] - Sets {@link Phaser.Physics.Arcade.Body#angularDrag}.\r\n * @property {number} [mass=0] - Sets {@link Phaser.Physics.Arcade.Body#mass}.\r\n * @property {boolean} [immovable=false] - Sets {@link Phaser.Physics.Arcade.Body#immovable}.\r\n */\r\n\r\n/**\r\n * @typedef {object} PhysicsGroupDefaults\r\n *\r\n * @property {boolean} setCollideWorldBounds - As {@link Phaser.Physics.Arcade.Body#setCollideWorldBounds}.\r\n * @property {number} setAccelerationX - As {@link Phaser.Physics.Arcade.Body#setAccelerationX}.\r\n * @property {number} setAccelerationY - As {@link Phaser.Physics.Arcade.Body#setAccelerationY}.\r\n * @property {boolean} setAllowDrag - As {@link Phaser.Physics.Arcade.Body#setAllowDrag}.\r\n * @property {boolean} setAllowGravity - As {@link Phaser.Physics.Arcade.Body#setAllowGravity}.\r\n * @property {boolean} setAllowRotation - As {@link Phaser.Physics.Arcade.Body#setAllowRotation}.\r\n * @property {number} setBounceX - As {@link Phaser.Physics.Arcade.Body#setBounceX}.\r\n * @property {number} setBounceY - As {@link Phaser.Physics.Arcade.Body#setBounceY}.\r\n * @property {number} setDragX - As {@link Phaser.Physics.Arcade.Body#setDragX}.\r\n * @property {number} setDragY - As {@link Phaser.Physics.Arcade.Body#setDragY}.\r\n * @property {number} setGravityX - As {@link Phaser.Physics.Arcade.Body#setGravityX}.\r\n * @property {number} setGravityY - As {@link Phaser.Physics.Arcade.Body#setGravityY}.\r\n * @property {number} setFrictionX - As {@link Phaser.Physics.Arcade.Body#setFrictionX}.\r\n * @property {number} setFrictionY - As {@link Phaser.Physics.Arcade.Body#setFrictionY}.\r\n * @property {number} setVelocityX - As {@link Phaser.Physics.Arcade.Body#setVelocityX}.\r\n * @property {number} setVelocityY - As {@link Phaser.Physics.Arcade.Body#setVelocityY}.\r\n * @property {number} setAngularVelocity - As {@link Phaser.Physics.Arcade.Body#setAngularVelocity}.\r\n * @property {number} setAngularAcceleration - As {@link Phaser.Physics.Arcade.Body#setAngularAcceleration}.\r\n * @property {number} setAngularDrag - As {@link Phaser.Physics.Arcade.Body#setAngularDrag}.\r\n * @property {number} setMass - As {@link Phaser.Physics.Arcade.Body#setMass}.\r\n * @property {boolean} setImmovable - As {@link Phaser.Physics.Arcade.Body#setImmovable}.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * An Arcade Physics Group object.\r\n *\r\n * All Game Objects created by this Group will automatically be given dynamic Arcade Physics bodies.\r\n *\r\n * Its static counterpart is {@link Phaser.Physics.Arcade.StaticGroup}.\r\n *\r\n * @class Group\r\n * @extends Phaser.GameObjects.Group\r\n * @memberOf Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The physics simulation.\r\n * @param {Phaser.Scene} scene - The scene this group belongs to.\r\n * @param {(Phaser.GameObjects.GameObject[]|PhysicsGroupConfig|GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n * @param {PhysicsGroupConfig|GroupCreateConfig} [config] - Settings for this group.\r\n */\r\nvar PhysicsGroup = new Class({\r\n\r\n    Extends: Group,\r\n\r\n    initialize:\r\n\r\n    function PhysicsGroup (world, scene, children, config)\r\n    {\r\n        if (!children && !config)\r\n        {\r\n            config = {\r\n                createCallback: this.createCallbackHandler,\r\n                removeCallback: this.removeCallbackHandler\r\n            };\r\n        }\r\n        else if (IsPlainObject(children))\r\n        {\r\n            //  children is a plain object, so swizzle them:\r\n            config = children;\r\n            children = null;\r\n\r\n            config.createCallback = this.createCallbackHandler;\r\n            config.removeCallback = this.removeCallbackHandler;\r\n        }\r\n        else if (Array.isArray(children) && IsPlainObject(children[0]))\r\n        {\r\n            //  children is an array of plain objects\r\n            config = children;\r\n            children = null;\r\n\r\n            config.forEach(function (singleConfig)\r\n            {\r\n                singleConfig.createCallback = this.createCallbackHandler;\r\n                singleConfig.removeCallback = this.removeCallbackHandler;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * The physics simulation.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Group#world\r\n         * @type {Phaser.Physics.Arcade.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * The class to create new group members from.\r\n         * This should be ArcadeImage, ArcadeSprite, or a class extending one of those.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Group#classType\r\n         * @type {(Phaser.Physics.Arcade.Image|Phaser.Physics.Arcade.Sprite)}\r\n         * @default ArcadeSprite\r\n         */\r\n        config.classType = GetFastValue(config, 'classType', ArcadeSprite);\r\n\r\n        /**\r\n         * The physics type of the Group's members.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Group#physicsType\r\n         * @type {integer}\r\n         * @default DYNAMIC_BODY\r\n         * @since 3.0.0\r\n         */\r\n        this.physicsType = CONST.DYNAMIC_BODY;\r\n\r\n        /**\r\n         * Default physics properties applied to Game Objects added to the Group or created by the Group. Derived from the `config` argument.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Group#defaults\r\n         * @type {PhysicsGroupDefaults}\r\n         * @since 3.0.0\r\n         */\r\n        this.defaults = {\r\n            setCollideWorldBounds: GetFastValue(config, 'collideWorldBounds', false),\r\n            setAccelerationX: GetFastValue(config, 'accelerationX', 0),\r\n            setAccelerationY: GetFastValue(config, 'accelerationY', 0),\r\n            setAllowDrag: GetFastValue(config, 'allowDrag', true),\r\n            setAllowGravity: GetFastValue(config, 'allowGravity', true),\r\n            setAllowRotation: GetFastValue(config, 'allowRotation', true),\r\n            setBounceX: GetFastValue(config, 'bounceX', 0),\r\n            setBounceY: GetFastValue(config, 'bounceY', 0),\r\n            setDragX: GetFastValue(config, 'dragX', 0),\r\n            setDragY: GetFastValue(config, 'dragY', 0),\r\n            setGravityX: GetFastValue(config, 'gravityX', 0),\r\n            setGravityY: GetFastValue(config, 'gravityY', 0),\r\n            setFrictionX: GetFastValue(config, 'frictionX', 0),\r\n            setFrictionY: GetFastValue(config, 'frictionY', 0),\r\n            setVelocityX: GetFastValue(config, 'velocityX', 0),\r\n            setVelocityY: GetFastValue(config, 'velocityY', 0),\r\n            setAngularVelocity: GetFastValue(config, 'angularVelocity', 0),\r\n            setAngularAcceleration: GetFastValue(config, 'angularAcceleration', 0),\r\n            setAngularDrag: GetFastValue(config, 'angularDrag', 0),\r\n            setMass: GetFastValue(config, 'mass', 1),\r\n            setImmovable: GetFastValue(config, 'immovable', false)\r\n        };\r\n\r\n        Group.call(this, scene, children, config);\r\n    },\r\n\r\n    /**\r\n     * Enables a Game Object's Body and assigns `defaults`. Called when a Group member is added or created.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Group#createCallbackHandler\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object being added.\r\n     */\r\n    createCallbackHandler: function (child)\r\n    {\r\n        if (!child.body)\r\n        {\r\n            this.world.enableBody(child, CONST.DYNAMIC_BODY);\r\n        }\r\n\r\n        var body = child.body;\r\n\r\n        for (var key in this.defaults)\r\n        {\r\n            body[key](this.defaults[key]);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Disables a Game Object's Body. Called when a Group member is removed.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Group#removeCallbackHandler\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object being removed.\r\n     */\r\n    removeCallbackHandler: function (child)\r\n    {\r\n        if (child.body)\r\n        {\r\n            this.world.disableBody(child);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the velocity of each Group member.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Group#setVelocity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal velocity.\r\n     * @param {number} y - The vertical velocity.\r\n     * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (x, y), the second (x + step, y + step), and so on.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\r\n     */\r\n    setVelocity: function (x, y, step)\r\n    {\r\n        if (step === undefined) { step = 0; }\r\n\r\n        var items = this.getChildren();\r\n\r\n        for (var i = 0; i < items.length; i++)\r\n        {\r\n            items[i].body.velocity.set(x + (i * step), y + (i * step));\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal velocity of each Group member.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Group#setVelocityX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The velocity value.\r\n     * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (x), the second (x + step), and so on.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\r\n     */\r\n    setVelocityX: function (value, step)\r\n    {\r\n        if (step === undefined) { step = 0; }\r\n\r\n        var items = this.getChildren();\r\n\r\n        for (var i = 0; i < items.length; i++)\r\n        {\r\n            items[i].body.velocity.x = value + (i * step);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the vertical velocity of each Group member.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Group#setVelocityY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The velocity value.\r\n     * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (y), the second (y + step), and so on.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\r\n     */\r\n    setVelocityY: function (value, step)\r\n    {\r\n        if (step === undefined) { step = 0; }\r\n\r\n        var items = this.getChildren();\r\n\r\n        for (var i = 0; i < items.length; i++)\r\n        {\r\n            items[i].body.velocity.y = value + (i * step);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = PhysicsGroup;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","ArcadeSprite","Class","CONST","GetFastValue","Group","IsPlainObject","PhysicsGroup","Extends","initialize","world","scene","children","config","createCallback","createCallbackHandler","removeCallback","removeCallbackHandler","Array","isArray","forEach","singleConfig","classType","physicsType","DYNAMIC_BODY","defaults","setCollideWorldBounds","setAccelerationX","setAccelerationY","setAllowDrag","setAllowGravity","setAllowRotation","setBounceX","setBounceY","setDragX","setDragY","setGravityX","setGravityY","setFrictionX","setFrictionY","setVelocityX","setVelocityY","setAngularVelocity","setAngularAcceleration","setAngularDrag","setMass","setImmovable","call","child","body","enableBody","key","disableBody","setVelocity","x","y","step","undefined","items","getChildren","i","length","velocity","set","value"]
}
