{
"version":3,
"file":"module$node_modules$Phaser$src$physics$impact$GetVelocity.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOtH,IAAIC,MAAQH,OAAA,CAAQ,2CAAR,CA2CZC,OAAAC,QAAA,CA3BkBE,QAAS,CAACC,KAAD,CAAQC,GAAR,CAAaC,KAAb,CAAoBC,QAApB,CAA8BC,GAA9B,CAC3B,CACI,MAAIF,MAAJ,CAEWJ,KAAA,CAAMG,GAAN,CAAYC,KAAZ,CAAoBF,KAApB,CAA2B,CAACI,GAA5B,CAAiCA,GAAjC,CAFX,CAISD,QAAJ,EAEGE,KAEJ,EAFoBF,QAEpB,CAA0B,CAA1B,CAAIF,GAAJ,CAAUI,KAAV,CAEWJ,GAFX,CAEiBI,KAFjB,CAI+B,CAA1B,CAAIJ,GAAJ,CAAUI,KAAV,CAEMJ,GAFN,CAEYI,KAFZ,CAMM,CAdV,EAkBEP,KAAA,CAAMG,GAAN,CAAW,CAACG,GAAZ,CAAiBA,GAAjB,CAvBX,CAxBsH;",
"sources":["node_modules/Phaser/src/physics/impact/GetVelocity.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$impact$GetVelocity\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../math/Clamp');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Physics.Impact.GetVelocity\r\n * @since 3.0.0\r\n *\r\n * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n * @param {number} vel - [description]\r\n * @param {number} accel - [description]\r\n * @param {number} friction - [description]\r\n * @param {number} max - [description]\r\n *\r\n * @return {number} [description]\r\n */\r\nvar GetVelocity = function (delta, vel, accel, friction, max)\r\n{\r\n    if (accel)\r\n    {\r\n        return Clamp(vel + accel * delta, -max, max);\r\n    }\r\n    else if (friction)\r\n    {\r\n        var frictionDelta = friction * delta;\r\n        \r\n        if (vel - frictionDelta > 0)\r\n        {\r\n            return vel - frictionDelta;\r\n        }\r\n        else if (vel + frictionDelta < 0)\r\n        {\r\n            return vel + frictionDelta;\r\n        }\r\n        else\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    return Clamp(vel, -max, max);\r\n};\r\n\r\nmodule.exports = GetVelocity;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Clamp","GetVelocity","delta","vel","accel","friction","max","frictionDelta"]
}
