{
"version":3,
"file":"module$node_modules$Phaser$src$sound$BaseSoundManager.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/sound/BaseSoundManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$sound$BaseSoundManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Clone = require('../utils/object/Clone');\r\nvar EventEmitter = require('eventemitter3');\r\nvar NOOP = require('../utils/NOOP');\r\n\r\n/**\r\n * @callback EachActiveSoundCallback\r\n *\r\n * @param {Phaser.Sound.BaseSoundManager} manager - The SoundManager\r\n * @param {Phaser.Sound.BaseSound} sound - The current active Sound\r\n * @param {number} index - The index of the current active Sound\r\n * @param {Phaser.Sound.BaseSound[]} sounds - All sounds\r\n */\r\n\r\n/**\r\n * Audio sprite sound type.\r\n *\r\n * @typedef {Phaser.Sound.BaseSound} Phaser.Sound.BaseSound.AudioSpriteSound\r\n *\r\n * @property {object} spritemap - Local reference to 'spritemap' object form json file generated by audiosprite tool.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The sound manager is responsible for playing back audio via Web Audio API or HTML Audio tag as fallback.\r\n * The audio file type and the encoding of those files are extremely important.\r\n *\r\n * Not all browsers can play all audio formats.\r\n *\r\n * There is a good guide to what's supported [here](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/Cross-browser_audio_basics#Audio_Codec_Support).\r\n *\r\n * @class BaseSoundManager\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberOf Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\r\nvar BaseSoundManager = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function BaseSoundManager (game)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * Local reference to game.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#game\r\n         * @type {Phaser.Game}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * Local reference to the JSON Cache, as used by Audio Sprites.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#jsonCache\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @readOnly\r\n         * @since 3.7.0\r\n         */\r\n        this.jsonCache = game.cache.json;\r\n\r\n        /**\r\n         * An array containing all added sounds.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#sounds\r\n         * @type {Phaser.Sound.BaseSound[]}\r\n         * @default []\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.sounds = [];\r\n\r\n        /**\r\n         * Global mute setting.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#mute\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.mute = false;\r\n\r\n        /**\r\n         * Global volume setting.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#volume\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.volume = 1;\r\n\r\n        /**\r\n         * Flag indicating if sounds should be paused when game looses focus,\r\n         * for instance when user switches to another tab/program/app.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#pauseOnBlur\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.pauseOnBlur = true;\r\n\r\n        /**\r\n         * Property that actually holds the value of global playback rate.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#_rate\r\n         * @type {number}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this._rate = 1;\r\n\r\n        /**\r\n         * Property that actually holds the value of global detune.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#_detune\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._detune = 0;\r\n\r\n        /**\r\n         * Mobile devices require sounds to be triggered from an explicit user action,\r\n         * such as a tap, before any sound can be loaded/played on a web page.\r\n         * Set to true if the audio system is currently locked awaiting user interaction.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#locked\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.locked = this.locked || false;\r\n\r\n        /**\r\n         * Flag used internally for handling when the audio system\r\n         * has been unlocked, if there ever was a need for it.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#unlocked\r\n         * @type {boolean}\r\n         * @default false\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.unlocked = false;\r\n\r\n        game.events.on('blur', function ()\r\n        {\r\n            if (this.pauseOnBlur)\r\n            {\r\n                this.onBlur();\r\n            }\r\n        }, this);\r\n\r\n        game.events.on('focus', function ()\r\n        {\r\n            if (this.pauseOnBlur)\r\n            {\r\n                this.onFocus();\r\n            }\r\n        }, this);\r\n\r\n        game.events.on('prestep', this.update, this);\r\n        game.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * Adds a new sound into the sound manager.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#add\r\n     * @override\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {Phaser.Sound.BaseSound} The new sound instance.\r\n     */\r\n    add: NOOP,\r\n\r\n    /**\r\n     * Adds a new audio sprite sound into the sound manager.\r\n     * Audio Sprites are a combination of audio files and a JSON configuration.\r\n     * The JSON follows the format of that created by https://github.com/tonistiigi/audiosprite\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#addAudioSprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {Phaser.Sound.BaseSound.AudioSpriteSound} The new audio sprite sound instance.\r\n     */\r\n    addAudioSprite: function (key, config)\r\n    {\r\n        if (config === undefined) { config = {}; }\r\n\r\n        var sound = this.add(key, config);\r\n\r\n        sound.spritemap = this.jsonCache.get(key).spritemap;\r\n\r\n        for (var markerName in sound.spritemap)\r\n        {\r\n            if (!sound.spritemap.hasOwnProperty(markerName))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var markerConfig = Clone(config);\r\n\r\n            var marker = sound.spritemap[markerName];\r\n\r\n            markerConfig.loop = (marker.hasOwnProperty('loop')) ? marker.loop : false;\r\n\r\n            sound.addMarker({\r\n                name: markerName,\r\n                start: marker.start,\r\n                duration: marker.end - marker.start,\r\n                config: markerConfig\r\n            });\r\n        }\r\n\r\n        return sound;\r\n    },\r\n\r\n    /**\r\n     * Enables playing sound on the fly without the need to keep a reference to it.\r\n     * Sound will auto destroy once its playback ends.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#play\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {(SoundConfig|SoundMarker)} [extra] - An optional additional object containing settings to be applied to the sound. It could be either config or marker object.\r\n     *\r\n     * @return {boolean} Whether the sound started playing successfully.\r\n     */\r\n    play: function (key, extra)\r\n    {\r\n        var sound = this.add(key);\r\n\r\n        sound.once('ended', sound.destroy, sound);\r\n\r\n        if (extra)\r\n        {\r\n            if (extra.name)\r\n            {\r\n                sound.addMarker(extra);\r\n\r\n                return sound.play(extra.name);\r\n            }\r\n            else\r\n            {\r\n                return sound.play(extra);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return sound.play();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Enables playing audio sprite sound on the fly without the need to keep a reference to it.\r\n     * Sound will auto destroy once its playback ends.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#playAudioSprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {string} spriteName - The name of the sound sprite to play.\r\n     * @param {SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {boolean} Whether the audio sprite sound started playing successfully.\r\n     */\r\n    playAudioSprite: function (key, spriteName, config)\r\n    {\r\n        var sound = this.addAudioSprite(key);\r\n\r\n        sound.once('ended', sound.destroy, sound);\r\n\r\n        return sound.play(spriteName, config);\r\n    },\r\n\r\n    /**\r\n     * Removes a sound from the sound manager.\r\n     * The removed sound is destroyed before removal.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Sound.BaseSound} sound - The sound object to remove.\r\n     *\r\n     * @return {boolean} True if the sound was removed successfully, otherwise false.\r\n     */\r\n    remove: function (sound)\r\n    {\r\n        var index = this.sounds.indexOf(sound);\r\n\r\n        if (index !== -1)\r\n        {\r\n            sound.destroy();\r\n\r\n            this.sounds.splice(index, 1);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Removes all sounds from the sound manager that have an asset key matching the given value.\r\n     * The removed sounds are destroyed before removal.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#removeByKey\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key to match when removing sound objects.\r\n     *\r\n     * @return {number} The number of matching sound objects that were removed.\r\n     */\r\n    removeByKey: function (key)\r\n    {\r\n        var removed = 0;\r\n\r\n        for (var i = this.sounds.length - 1; i >= 0; i--)\r\n        {\r\n            var sound = this.sounds[i];\r\n\r\n            if (sound.key === key)\r\n            {\r\n                sound.destroy();\r\n\r\n                this.sounds.splice(i, 1);\r\n\r\n                removed++;\r\n            }\r\n        }\r\n\r\n        return removed;\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.BaseSoundManager#pauseall\r\n     * @param {Phaser.Sound.BaseSoundManager} soundManager - Reference to the sound manager that emitted event.\r\n     */\r\n\r\n    /**\r\n     * Pauses all the sounds in the game.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#pauseAll\r\n     * @fires Phaser.Sound.BaseSoundManager#pauseall\r\n     * @since 3.0.0\r\n     */\r\n    pauseAll: function ()\r\n    {\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            sound.pause();\r\n        });\r\n\r\n        this.emit('pauseall', this);\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.BaseSoundManager#resumeall\r\n     * @param {Phaser.Sound.BaseSoundManager} soundManager - Reference to the sound manager that emitted event.\r\n     */\r\n\r\n    /**\r\n     * Resumes all the sounds in the game.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#resumeAll\r\n     * @fires Phaser.Sound.BaseSoundManager#resumeall\r\n     * @since 3.0.0\r\n     */\r\n    resumeAll: function ()\r\n    {\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            sound.resume();\r\n        });\r\n\r\n        this.emit('resumeall', this);\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.BaseSoundManager#stopall\r\n     * @param {Phaser.Sound.BaseSoundManager} soundManager - Reference to the sound manager that emitted event.\r\n     */\r\n\r\n    /**\r\n     * Stops all the sounds in the game.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#stopAll\r\n     * @fires Phaser.Sound.BaseSoundManager#stopall\r\n     * @since 3.0.0\r\n     */\r\n    stopAll: function ()\r\n    {\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            sound.stop();\r\n        });\r\n\r\n        this.emit('stopall', this);\r\n    },\r\n\r\n    /**\r\n     * Method used internally for unlocking audio playback on devices that\r\n     * require user interaction before any sound can be played on a web page.\r\n     *\r\n     * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#unlock\r\n     * @override\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    unlock: NOOP,\r\n\r\n    /**\r\n     * Method used internally for pausing sound manager if\r\n     * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#onBlur\r\n     * @override\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: NOOP,\r\n\r\n    /**\r\n     * Method used internally for resuming sound manager if\r\n     * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#onFocus\r\n     * @override\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: NOOP,\r\n\r\n    /**\r\n     * Update method called on every game step.\r\n     * Removes destroyed sounds and updates every active sound in the game.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#update\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (this.unlocked)\r\n        {\r\n            this.unlocked = false;\r\n            this.locked = false;\r\n\r\n            /**\r\n             * @event Phaser.Sound.BaseSoundManager#unlocked\r\n             * @param {Phaser.Sound.BaseSoundManager} soundManager - Reference to the sound manager that emitted event.\r\n             */\r\n            this.emit('unlocked', this);\r\n        }\r\n\r\n        for (var i = this.sounds.length - 1; i >= 0; i--)\r\n        {\r\n            if (this.sounds[i].pendingRemove)\r\n            {\r\n                this.sounds.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.sounds.forEach(function (sound)\r\n        {\r\n            sound.update(time, delta);\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Destroys all the sounds in the game and all associated events.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.removeAllListeners();\r\n\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            sound.destroy();\r\n        });\r\n\r\n        this.sounds.length = 0;\r\n        this.sounds = null;\r\n\r\n        this.game = null;\r\n    },\r\n\r\n    /**\r\n     * Method used internally for iterating only over active sounds and skipping sounds that are marked for removal.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#forEachActiveSound\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {EachActiveSoundCallback} callback - Callback function. (manager: Phaser.Sound.BaseSoundManager, sound: Phaser.Sound.BaseSound, index: number, sounds: Phaser.Manager.BaseSound[]) => void\r\n     * @param {*} [scope] - Callback context.\r\n     */\r\n    forEachActiveSound: function (callback, scope)\r\n    {\r\n        var _this = this;\r\n\r\n        this.sounds.forEach(function (sound, index)\r\n        {\r\n            if (!sound.pendingRemove)\r\n            {\r\n                callback.call(scope || _this, sound, index, _this.sounds);\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.BaseSoundManager#rate\r\n     * @param {Phaser.Sound.BaseSoundManager} soundManager - Reference to the sound manager that emitted event.\r\n     * @param {number} value - An updated value of Phaser.Sound.BaseSoundManager#rate property.\r\n     */\r\n\r\n    /**\r\n     * Sets the global playback rate at which all the sounds will be played.\r\n     *\r\n     * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n     * and 2.0 doubles the audios playback speed.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#setRate\r\n     * @fires Phaser.Sound.BaseSoundManager#rate\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - Global playback rate at which all the sounds will be played.\r\n     *\r\n     * @return {Phaser.Sound.BaseSoundManager} This Sound Manager.\r\n     */\r\n    setRate: function (value)\r\n    {\r\n        this.rate = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Global playback rate at which all the sounds will be played.\r\n     * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n     * and 2.0 doubles the audio's playback speed.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#rate\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    rate: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._rate;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._rate = value;\r\n\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                sound.calculateRate();\r\n            });\r\n\r\n            this.emit('rate', this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#setDetune\r\n     * @fires Phaser.Sound.BaseSoundManager#detune\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @return {Phaser.Sound.BaseSoundManager} This Sound Manager.\r\n     */\r\n    setDetune: function (value)\r\n    {\r\n        this.detune = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.BaseSoundManager#detune\r\n     * @param {Phaser.Sound.BaseSoundManager} soundManager - Reference to the sound manager that emitted event.\r\n     * @param {number} value - An updated value of Phaser.Sound.BaseSoundManager#detune property.\r\n     */\r\n\r\n    /**\r\n     * Global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#detune\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    detune: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._detune;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._detune = value;\r\n\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                sound.calculateRate();\r\n            });\r\n\r\n            this.emit('detune', this, value);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = BaseSoundManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Clone","EventEmitter","NOOP","BaseSoundManager","Extends","initialize","game","call","jsonCache","cache","json","sounds","mute","volume","pauseOnBlur","_rate","_detune","locked","unlocked","events","on","onBlur","onFocus","update","once","destroy","add","addAudioSprite","key","config","undefined","sound","spritemap","get","markerName","hasOwnProperty","markerConfig","marker","loop","addMarker","name","start","duration","end","play","extra","playAudioSprite","spriteName","remove","index","indexOf","splice","removeByKey","removed","i","length","pauseAll","forEachActiveSound","pause","emit","resumeAll","resume","stopAll","stop","unlock","time","delta","pendingRemove","forEach","removeAllListeners","callback","scope","_this","setRate","value","rate","set","calculateRate","setDetune","detune"]
}
