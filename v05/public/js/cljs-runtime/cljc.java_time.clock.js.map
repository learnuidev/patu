{"version":3,"sources":["cljc/java_time/clock.cljc"],"mappings":";;;;AACA,AAAA,AAAmBA,AAAwGC,AAAwCC;AAAnK,AAA2L,AAAGC,AAAqBF,AAAoBC;;AACvO,AAAA,AAAmBE,AAA0GC,AAAwCC;AAArK,AAA6L,AAAGH,AAAuBE,AAAoBC;;AAC3O,AAAA,AAAmBC;AAAnB,AAA4E,AAAGJ;;AAC/E,AAAA,AAAmBK;AAAnB,AAAqF,AAAGL;;AACxF,AAAA,AAAmBM,AAA2GC,AAAwCC;AAAtK,AAA4L,AAAGR,AAAsBO,AAAsBC;;AAC3O,AAAA,AAAmBC,AAA6FC;AAAhH,AAAsI,AAAGV,AAA4BU;;AACrK,AAAA,AAAmBC,AAA6FC;AAAhH,AAAsI,AAAGZ,AAA4BY;;AACrK,AAAA,AAAmBC,AAA0EC;AAA7F,AAAuG,AAASA;;AAChH,AAAA,AAAmBC,AAA2GC,AAA2BC;AAAzJ,AAA+K,AAAWD,AAASC;;AACnM,AAAA,AAAmBC,AAAwFC;AAA3G,AAAqH,AAAiBA;;AACtI,AAAA,AAAmBC,AAA0FC;AAA7G,AAAuH,AAAWA;;AAClI,AAAA,AAAmBC,AAAuFC;AAA1G,AAAgI,AAAGvB,AAAuBuB;;AAC1J,AAAA,AAAmBC,AAAwFC;AAA3G,AAAqH,AAAUA;;AAC/H,AAAA,AAAmBC,AAA0GC,AAA2BC;AAAxJ,AAA8K,AAASD,AAASC","names":["cljc.java-time.clock/tick","java-time-Clock4639","java-time-Duration4640","java.time/Clock","cljc.java-time.clock/offset","java-time-Clock4641","java-time-Duration4642","cljc.java-time.clock/system-utc","cljc.java-time.clock/system-default-zone","cljc.java-time.clock/fixed","java-time-Instant4643","java-time-ZoneId4644","cljc.java-time.clock/tick-minutes","java-time-ZoneId4645","cljc.java-time.clock/tick-seconds","java-time-ZoneId4646","cljc.java-time.clock/millis","this4647","cljc.java-time.clock/with-zone","this4648","java-time-ZoneId4649","cljc.java-time.clock/get-zone","this4650","cljc.java-time.clock/hash-code","this4651","cljc.java-time.clock/system","java-time-ZoneId4652","cljc.java-time.clock/instant","this4653","cljc.java-time.clock/equals","this4654","java-lang-Object4655"],"sourcesContent":["(ns cljc.java-time.clock (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Clock]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Clock])))\r\n(clojure.core/defn tick {:arglists (quote ([\"java.time.Clock\" \"java.time.Duration\"]))} (^java.time.Clock [^java.time.Clock java-time-Clock4639 ^java.time.Duration java-time-Duration4640] (. java.time.Clock tick java-time-Clock4639 java-time-Duration4640)))\r\n(clojure.core/defn offset {:arglists (quote ([\"java.time.Clock\" \"java.time.Duration\"]))} (^java.time.Clock [^java.time.Clock java-time-Clock4641 ^java.time.Duration java-time-Duration4642] (. java.time.Clock offset java-time-Clock4641 java-time-Duration4642)))\r\n(clojure.core/defn system-utc {:arglists (quote ([]))} (^java.time.Clock [] (. java.time.Clock systemUTC)))\r\n(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^java.time.Clock [] (. java.time.Clock systemDefaultZone)))\r\n(clojure.core/defn fixed {:arglists (quote ([\"java.time.Instant\" \"java.time.ZoneId\"]))} (^java.time.Clock [^java.time.Instant java-time-Instant4643 ^java.time.ZoneId java-time-ZoneId4644] (. java.time.Clock fixed java-time-Instant4643 java-time-ZoneId4644)))\r\n(clojure.core/defn tick-minutes {:arglists (quote ([\"java.time.ZoneId\"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId4645] (. java.time.Clock tickMinutes java-time-ZoneId4645)))\r\n(clojure.core/defn tick-seconds {:arglists (quote ([\"java.time.ZoneId\"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId4646] (. java.time.Clock tickSeconds java-time-ZoneId4646)))\r\n(clojure.core/defn millis {:arglists (quote ([\"java.time.Clock\"]))} (^long [^java.time.Clock this4647] (.millis this4647)))\r\n(clojure.core/defn with-zone {:arglists (quote ([\"java.time.Clock\" \"java.time.ZoneId\"]))} (^java.time.Clock [^java.time.Clock this4648 ^java.time.ZoneId java-time-ZoneId4649] (.withZone this4648 java-time-ZoneId4649)))\r\n(clojure.core/defn get-zone {:arglists (quote ([\"java.time.Clock\"]))} (^java.time.ZoneId [^java.time.Clock this4650] (jti/getter zone this4650)))\r\n(clojure.core/defn hash-code {:arglists (quote ([\"java.time.Clock\"]))} (^java.lang.Integer [^java.time.Clock this4651] (.hashCode this4651)))\r\n(clojure.core/defn system {:arglists (quote ([\"java.time.ZoneId\"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId4652] (. java.time.Clock system java-time-ZoneId4652)))\r\n(clojure.core/defn instant {:arglists (quote ([\"java.time.Clock\"]))} (^java.time.Instant [^java.time.Clock this4653] (.instant this4653)))\r\n(clojure.core/defn equals {:arglists (quote ([\"java.time.Clock\" \"java.lang.Object\"]))} (^java.lang.Boolean [^java.time.Clock this4654 ^java.lang.Object java-lang-Object4655] (.equals this4654 java-lang-Object4655)))\r\n"]}