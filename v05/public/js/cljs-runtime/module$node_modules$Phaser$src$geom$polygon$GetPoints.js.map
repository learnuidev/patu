{
"version":3,
"file":"module$node_modules$Phaser$src$geom$polygon$GetPoints.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOlH,IAAIC,OAASH,OAAA,CAAQ,iDAAR,CAAb,CACII,KAAOJ,OAAA,CAAQ,+CAAR,CADX,CAEIK,UAAYL,OAAA,CAAQ,uDAAR,CA8DhBC,OAAAC,QAAA,CA9CgBI,QAAS,CAACC,OAAD,CAAUC,QAAV,CAAoBC,QAApB,CAA8BC,GAA9B,CACzB,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,EAA/B,CAEA,KAAIE,OAASL,OAAAK,OACTC,QAAAA,CAAYR,SAAA,CAAUE,OAAV,CAGXC,SAAL,GAEIA,QAFJ,CAEeK,OAFf,CAE2BJ,QAF3B,CAKA,KAASK,QAAT,CAAa,CAAb,CAAgBA,QAAhB;AAAoBN,QAApB,CAA8BM,QAAA,EAA9B,CAKI,IAHA,IAAIC,SAAwBD,QAAxBC,CAA4BP,QAA5BO,CAAWF,OAAf,CACIG,qBAAuB,CAD3B,CAGSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBL,MAAAM,OAApB,CAAmCD,CAAA,EAAnC,CACA,CACI,IAAIE,OAASP,MAAA,CAAOK,CAAP,CAAb,CACIG,OAASR,MAAA,EAAQK,CAAR,CAAY,CAAZ,EAAiBL,MAAAM,OAAjB,CACTG,OAAAA,CAAO,IAAIjB,IAAJ,CACPe,MAAAG,EADO,CAEPH,MAAAI,EAFO,CAGPH,MAAAE,EAHO,CAIPF,MAAAG,EAJO,CAMPL,OAAAA,CAASf,MAAA,CAAOkB,MAAP,CAEb,IAAIN,QAAJ,CAAeC,oBAAf,EAAuCD,QAAvC,CAAkDC,oBAAlD,CAAyEE,MAAzE,CAEIF,oBAAA,EAAwBE,MAF5B,KAAA,CAMIM,QAAAA,CAAQH,MAAAI,SAAA,EAAeV,QAAf,CAA0BC,oBAA1B,EAAkDE,MAAlD,CACZR,IAAAgB,KAAA,CAASF,QAAT,CAEA,MATA,CAXJ,CAwBJ,MAAOd,IA1CX,CA1BkH;",
"sources":["node_modules/Phaser/src/geom/polygon/GetPoints.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$polygon$GetPoints\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Length = require('../line/Length');\r\nvar Line = require('../line/Line');\r\nvar Perimeter = require('./Perimeter');\r\n\r\n/**\r\n * Returns an array of Point objects containing the coordinates of the points around the perimeter of the Polygon,\r\n * based on the given quantity or stepRate values.\r\n *\r\n * @function Phaser.Geom.Polygon.GetPoints\r\n * @since 3.12.0\r\n *\r\n * @param {Phaser.Geom.Polygon} polygon - The Polygon to get the points from.\r\n * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n * @param {number} [stepRate] - Sets the quantity by getting the perimeter of the Polygon and dividing it by the stepRate.\r\n * @param {array} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n *\r\n * @return {Phaser.Geom.Point[]} An array of Point objects pertaining to the points around the perimeter of the Polygon.\r\n */\r\nvar GetPoints = function (polygon, quantity, stepRate, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    var points = polygon.points;\r\n    var perimeter = Perimeter(polygon);\r\n\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity)\r\n    {\r\n        quantity = perimeter / stepRate;\r\n    }\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        var position = perimeter * (i / quantity);\r\n        var accumulatedPerimeter = 0;\r\n\r\n        for (var j = 0; j < points.length; j++)\r\n        {\r\n            var pointA = points[j];\r\n            var pointB = points[(j + 1) % points.length];\r\n            var line = new Line(\r\n                pointA.x,\r\n                pointA.y,\r\n                pointB.x,\r\n                pointB.y\r\n            );\r\n            var length = Length(line);\r\n\r\n            if (position < accumulatedPerimeter || position > accumulatedPerimeter + length)\r\n            {\r\n                accumulatedPerimeter += length;\r\n                continue;\r\n            }\r\n\r\n            var point = line.getPoint((position - accumulatedPerimeter) / length);\r\n            out.push(point);\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoints;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Length","Line","Perimeter","GetPoints","polygon","quantity","stepRate","out","undefined","points","perimeter","i","position","accumulatedPerimeter","j","length","pointA","pointB","line","x","y","point","getPoint","push"]
}
