{
"version":3,
"file":"module$node_modules$Phaser$src$renderer$canvas$utils$GetBlendModes.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,mEAAA,CAAuF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO/H,IAAIC,MAAQH,OAAA,CAAQ,oDAAR,CAAZ,CACII,eAAiBJ,OAAA,CAAQ,sDAAR,CAqCrBC,OAAAC,QAAA,CA3BoBG,QAAS,EAC7B,CACI,IAAIC,OAAS,EAAb,CACIC,OAASH,cAAAI,qBAGbF,OAAA,CAAOH,KAAAM,OAAP,CAAA,CAFSC,aAGTJ,OAAA,CAAOH,KAAAQ,IAAP,CAAA,CAAoB,SACpBL,OAAA,CAAOH,KAAAS,SAAP,CAAA,CAA0BL,MAAD,CAAW,UAAX,CAJhBG,aAKTJ,OAAA,CAAOH,KAAAU,OAAP,CAAA,CAAwBN,MAAD;AAAW,QAAX,CALdG,aAMTJ,OAAA,CAAOH,KAAAW,QAAP,CAAA,CAAyBP,MAAD,CAAW,SAAX,CANfG,aAOTJ,OAAA,CAAOH,KAAAY,OAAP,CAAA,CAAwBR,MAAD,CAAW,QAAX,CAPdG,aAQTJ,OAAA,CAAOH,KAAAa,QAAP,CAAA,CAAyBT,MAAD,CAAW,SAAX,CARfG,aASTJ,OAAA,CAAOH,KAAAc,YAAP,CAAA,CAA6BV,MAAD,CAAW,aAAX,CATnBG,aAUTJ,OAAA,CAAOH,KAAAe,WAAP,CAAA,CAA4BX,MAAD,CAAW,YAAX,CAVlBG,aAWTJ,OAAA,CAAOH,KAAAgB,WAAP,CAAA,CAA4BZ,MAAD,CAAW,YAAX,CAXlBG,aAYTJ,OAAA,CAAOH,KAAAiB,WAAP,CAAA,CAA4Bb,MAAD,CAAW,YAAX,CAZlBG,aAaTJ,OAAA,CAAOH,KAAAkB,WAAP,CAAA,CAA4Bd,MAAD,CAAW,YAAX,CAblBG,aAcTJ,OAAA,CAAOH,KAAAmB,UAAP,CAAA;AAA2Bf,MAAD,CAAW,WAAX,CAdjBG,aAeTJ,OAAA,CAAOH,KAAAoB,IAAP,CAAA,CAAqBhB,MAAD,CAAW,KAAX,CAfXG,aAgBTJ,OAAA,CAAOH,KAAAqB,WAAP,CAAA,CAA4BjB,MAAD,CAAW,YAAX,CAhBlBG,aAiBTJ,OAAA,CAAOH,KAAAsB,MAAP,CAAA,CAAuBlB,MAAD,CAAW,OAAX,CAjBbG,aAkBTJ,OAAA,CAAOH,KAAAuB,WAAP,CAAA,CAA4BnB,MAAD,CAAW,YAAX,CAlBlBG,aAoBT,OAAOJ,OAvBX,CAnB+H;",
"sources":["node_modules/Phaser/src/renderer/canvas/utils/GetBlendModes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$renderer$canvas$utils$GetBlendModes\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar modes = require('../../BlendModes');\nvar CanvasFeatures = require('../../../device/CanvasFeatures');\n\n/**\n * [description]\n *\n * @function Phaser.Renderer.Canvas.GetBlendModes\n * @since 3.0.0\n *\n * @return {array} [description]\n */\nvar GetBlendModes = function ()\n{\n    var output = [];\n    var useNew = CanvasFeatures.supportNewBlendModes;\n    var so = 'source-over';\n\n    output[modes.NORMAL] = so;\n    output[modes.ADD] = 'lighter';\n    output[modes.MULTIPLY] = (useNew) ? 'multiply' : so;\n    output[modes.SCREEN] = (useNew) ? 'screen' : so;\n    output[modes.OVERLAY] = (useNew) ? 'overlay' : so;\n    output[modes.DARKEN] = (useNew) ? 'darken' : so;\n    output[modes.LIGHTEN] = (useNew) ? 'lighten' : so;\n    output[modes.COLOR_DODGE] = (useNew) ? 'color-dodge' : so;\n    output[modes.COLOR_BURN] = (useNew) ? 'color-burn' : so;\n    output[modes.HARD_LIGHT] = (useNew) ? 'hard-light' : so;\n    output[modes.SOFT_LIGHT] = (useNew) ? 'soft-light' : so;\n    output[modes.DIFFERENCE] = (useNew) ? 'difference' : so;\n    output[modes.EXCLUSION] = (useNew) ? 'exclusion' : so;\n    output[modes.HUE] = (useNew) ? 'hue' : so;\n    output[modes.SATURATION] = (useNew) ? 'saturation' : so;\n    output[modes.COLOR] = (useNew) ? 'color' : so;\n    output[modes.LUMINOSITY] = (useNew) ? 'luminosity' : so;\n\n    return output;\n};\n\nmodule.exports = GetBlendModes;\n\n};"],
"names":["shadow$provide","global","require","module","exports","modes","CanvasFeatures","GetBlendModes","output","useNew","supportNewBlendModes","NORMAL","so","ADD","MULTIPLY","SCREEN","OVERLAY","DARKEN","LIGHTEN","COLOR_DODGE","COLOR_BURN","HARD_LIGHT","SOFT_LIGHT","DIFFERENCE","EXCLUSION","HUE","SATURATION","COLOR","LUMINOSITY"]
}
