{"version":3,"sources":["shadow/cljs/devtools/client/websocket.cljs"],"mappings":";;;;;;AAOA,AAAA,AAAMA,AAAcC,AAAQC,AAAQC;AAApC,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAYH,AAENI,AACK,AAAA,AAACC,AAAQ,AAAA,AAACC,AAAkBL,AAErC,AAAAM;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAA0BK;AAA1B,AAAAD,AAAAJ,AAAA,AAAaP;AAAb,AACE,AAACC,AAAAA,AAAAA,AAASD,AAAAA;;;AAEjB,AAAA,AAAMa,AAAOC,AAAOC;AAApB,AACE,AAAAC,AAAA,AAAAC,AAA0BG;AAA1B,AAAA,AAAA,AAAAJ,AAAA;AAQE,AAAMM,AACA,AAAAC,AAAeT;AAEfU,AACA,AAAKZ;AAAL,AACE,AAAOU,AAAOV;;AAEhBa,AACI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAMX,AAGK,AAACY,AAAQC,AACVC,AACX,AAACC,AACD,AAACC;AAELhC,AACA,AAAAiC,AAAA,AACEP,AACAD;AAFF,AAGG,AAAQF;AAHX,AAAA,AAAA;AAjBN,AAsBE,AAACW,AAA0BlC;;AAE3B,AAAA,AAAmBuB,AACjB,AAAKY;AAAL,AAEE,AAACC,AAAepC,AAAQ,AAACqC,AAAyB,AAAQF;;;AAG9D,AAAA,AAAmBZ,AACjB,AAAKY;AAAL,AAAA;;;AAIF,AAAA,AAAmBZ,AACjB,AAAKY;AAAL,AAEE,AAACG,AAA0BH;;;AAE/B,AAAA,AAAmBZ,AACjB,AAAKY;AAAL,AACE,AAAA,AAACI,AAAwCJ;;;AAlDjD,AAAAhB,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAV,AAAA,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAAT,AAAAC,AAAAQ,AAAAA;AAAA,AAAAP,AAAAO,AAAA,AAAkBC;AAAlB,AAKE,AAAI,AAACA,AAAAA,AAAAA;;AACD,AAAA,AAACE;AAAD,AAAgB,AAACR,AAAAA,AAAAA,AAAMC,AAAAA,AAAOC,AAAAA;AAA9B","names":["shadow.cljs.devtools.client.websocket/load-sources","runtime","sources","callback","shadow.remote.runtime.shared.call","shadow.cljs.devtools.client.env/worker-client-id","cljs.core.into","cljs.core.map","p__35144","map__35145","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","msg","shadow.cljs.devtools.client.websocket/start","ws-url","client-info","temp__5737__auto__","cljs.core/deref","map__35155","stop","shadow.cljs.devtools.client.shared/runtime-ref","js/setTimeout","socket","js/WebSocket","send-fn","state-ref","cljs.core.assoc","cljs.core.keyword","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","shadow.remote.runtime.shared/init-state","cljs.core.atom","shadow.cljs.devtools.client.shared/Runtime","shadow.cljs.devtools.client.shared/init-runtime!","e","shadow.remote.runtime.shared/process","shadow.cljs.devtools.client.shared/transit-read","shadow.cljs.devtools.client.shared/stop-runtime!","js/console.log"],"sourcesContent":["(ns shadow.cljs.devtools.client.websocket\n  (:require\n    [shadow.cljs.devtools.client.shared :as cljs-shared]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.cljs.js-builtins]\n    [shadow.cljs.devtools.client.env :as env]))\n\n(defn load-sources [runtime sources callback]\n  (shared/call runtime\n    {:op :cljs-load-sources\n     :to env/worker-client-id\n     :sources (into [] (map :resource-id) sources)}\n    {:cljs-sources\n     (fn [{:keys [sources] :as msg}]\n       (callback sources))}))\n\n(defn start [ws-url client-info]\n  (if-some [{:keys [stop]} @cljs-shared/runtime-ref]\n    ;; if already connected. cleanup and call restart async\n    ;; need to give the websocket a chance to close\n    ;; only need this to support hot-reload this code\n    ;; can't use :dev/before-load-async hooks since they always run\n    (do (stop)\n        (js/setTimeout #(start ws-url client-info) 10))\n\n    (let [socket\n          (js/WebSocket. ws-url)\n\n          send-fn\n          (fn [msg]\n            (.send socket msg))\n\n          state-ref\n          (-> (assoc client-info\n                :type :runtime\n                :lang :cljs\n                :build-id (keyword env/build-id)\n                :proc-id env/proc-id)\n              (shared/init-state)\n              (atom))\n\n          runtime\n          (cljs-shared/Runtime.\n            state-ref\n            send-fn\n            #(.close socket))]\n\n      (cljs-shared/init-runtime! runtime)\n\n      (.addEventListener socket \"message\"\n        (fn [e]\n          ;; (js/console.log \"ws-message\" e)\n          (shared/process runtime (cljs-shared/transit-read (.-data e)))\n          ))\n\n      (.addEventListener socket \"open\"\n        (fn [e]\n          ;; (js/console.log \"ws-open\" e)\n          ))\n\n      (.addEventListener socket \"close\"\n        (fn [e]\n          ;; (js/console.log \"ws-close\" e)\n          (cljs-shared/stop-runtime! e)))\n\n      (.addEventListener socket \"error\"\n        (fn [e]\n          (js/console.log \"shadow-cljs - ws-error\" e))))))\n"]}