{
"version":3,
"file":"module$node_modules$Phaser$src$geom$triangle$ContainsArray.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,2DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiFvHD,MAAAC,QAAA,CAtDoBC,QAAS,CAACC,QAAD,CAAWC,MAAX,CAAmBC,WAAnB,CAAgCC,GAAhC,CAC7B,CACwBC,IAAAA,EAApB,GAAIF,WAAJ,GAAiCA,WAAjC,CAA+C,CAAA,CAA/C,CACYE,KAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,EAA/B,CAEA,KAAIE,IAAML,QAAAM,GAAND,CAAoBL,QAAAO,GAAxB,CACIC,IAAMR,QAAAS,GAAND,CAAoBR,QAAAU,GADxB,CAGIC,IAAMX,QAAAY,GAAND,CAAoBX,QAAAO,GAHxB,CAIIM,IAAMb,QAAAc,GAAND,CAAoBb,QAAAU,GAJxB,CAMIK,MAASV,GAATU,CAAeV,GAAfU,CAAuBP,GAAvBO,CAA6BP,GANjC,CAOIQ,MAASX,GAATW,CAAeL,GAAfK,CAAuBR,GAAvBQ,CAA6BH,GAPjC,CAQII,MAASN,GAATM,CAAeN,GAAfM,CAAuBJ,GAAvBI,CAA6BJ,GARjC,CAWIK,EAAMH,KAANG,CAAcD,KAAdC,CAAwBF,KAAxBE,CAAgCF,KAChCG,EAAAA,CAAa,CAAP,GAACD,CAAD,CAAY,CAAZ,CAAiB,CAAjB,CAAqBA,CAE/B,KAOIX,GAAKP,QAAAO,GACLG,SAAAA,CAAKV,QAAAU,GAET,KAAK,IAAIU;AAAI,CAAb,CAAgBA,CAAhB,CAAoBnB,MAAAoB,OAApB,CAAmCD,CAAA,EAAnC,CACA,CACI,IAAAE,EAAMrB,MAAA,CAAOmB,CAAP,CAAAG,EAAND,CAAoBf,EACpB,KAAAiB,IAAMvB,MAAA,CAAOmB,CAAP,CAAAK,EAAND,CAAoBd,QAEpB,KAAAgB,EAASrB,GAATqB,CAAeJ,CAAfI,CAAuBlB,GAAvBkB,CAA6BF,GAC7BG,IAAA,CAAShB,GAAT,CAAeW,CAAf,CAAuBT,GAAvB,CAA6BW,GAE7BI,EAAA,EAAMX,KAAN,CAAcS,CAAd,CAAwBV,KAAxB,CAAgCW,GAAhC,EAA0CR,CAC1CU,EAAA,EAAMd,KAAN,CAAcY,GAAd,CAAwBX,KAAxB,CAAgCU,CAAhC,EAA0CP,CAE1C,IAAS,CAAT,EAAIS,CAAJ,EAAmB,CAAnB,EAAcC,CAAd,EAAiC,CAAjC,CAAyBD,CAAzB,CAA6BC,CAA7B,GAEI1B,GAAA2B,KAAA,CAAS,CAAEP,EAAGtB,MAAA,CAAOmB,CAAP,CAAAG,EAAL,CAAkBE,EAAGxB,MAAA,CAAOmB,CAAP,CAAAK,EAArB,CAAT,CAEIvB,CAAAA,WAJR,EAMQ,KAhBZ,CAqBA,MAAOC,IAlDX,CA5BuH;",
"sources":["node_modules/Phaser/src/geom/triangle/ContainsArray.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$triangle$ContainsArray\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n//  http://www.blackpawn.com/texts/pointinpoly/\r\n\r\n//  points is an array of Point-like objects with public x/y properties\r\n//  returns an array containing all points that are within the triangle, or an empty array if none\r\n//  if 'returnFirst' is true it will return after the first point within the triangle is found\r\n\r\n/**\r\n * Filters an array of point-like objects to only those contained within a triangle.\r\n * If `returnFirst` is true, will return an array containing only the first point in the provided array that is within the triangle (or an empty array if there are no such points).\r\n *\r\n * @function Phaser.Geom.Triangle.ContainsArray\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The triangle that the points are being checked in.\r\n * @param {Phaser.Geom.Point[]} points - An array of point-like objects (objects that have an `x` and `y` property)\r\n * @param {boolean} [returnFirst=false] - If `true`, return an array containing only the first point found that is within the triangle.\r\n * @param {array} [out] - If provided, the points that are within the triangle will be appended to this array instead of being added to a new array. If `returnFirst` is true, only the first point found within the triangle will be appended. This array will also be returned by this function.\r\n *\r\n * @return {Phaser.Geom.Point[]} An array containing all the points from `points` that are within the triangle, if an array was provided as `out`, points will be appended to that array and it will also be returned here.\r\n */\r\nvar ContainsArray = function (triangle, points, returnFirst, out)\r\n{\r\n    if (returnFirst === undefined) { returnFirst = false; }\r\n    if (out === undefined) { out = []; }\r\n\r\n    var v0x = triangle.x3 - triangle.x1;\r\n    var v0y = triangle.y3 - triangle.y1;\r\n\r\n    var v1x = triangle.x2 - triangle.x1;\r\n    var v1y = triangle.y2 - triangle.y1;\r\n\r\n    var dot00 = (v0x * v0x) + (v0y * v0y);\r\n    var dot01 = (v0x * v1x) + (v0y * v1y);\r\n    var dot11 = (v1x * v1x) + (v1y * v1y);\r\n\r\n    // Compute barycentric coordinates\r\n    var b = ((dot00 * dot11) - (dot01 * dot01));\r\n    var inv = (b === 0) ? 0 : (1 / b);\r\n\r\n    var u;\r\n    var v;\r\n    var v2x;\r\n    var v2y;\r\n    var dot02;\r\n    var dot12;\r\n\r\n    var x1 = triangle.x1;\r\n    var y1 = triangle.y1;\r\n\r\n    for (var i = 0; i < points.length; i++)\r\n    {\r\n        v2x = points[i].x - x1;\r\n        v2y = points[i].y - y1;\r\n\r\n        dot02 = (v0x * v2x) + (v0y * v2y);\r\n        dot12 = (v1x * v2x) + (v1y * v2y);\r\n\r\n        u = ((dot11 * dot02) - (dot01 * dot12)) * inv;\r\n        v = ((dot00 * dot12) - (dot01 * dot02)) * inv;\r\n    \r\n        if (u >= 0 && v >= 0 && (u + v < 1))\r\n        {\r\n            out.push({ x: points[i].x, y: points[i].y });\r\n\r\n            if (returnFirst)\r\n            {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = ContainsArray;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","ContainsArray","triangle","points","returnFirst","out","undefined","v0x","x3","x1","v0y","y3","y1","v1x","x2","v1y","y2","dot00","dot01","dot11","b","inv","i","length","v2x","x","v2y","y","dot02","dot12","u","v","push"]
}
