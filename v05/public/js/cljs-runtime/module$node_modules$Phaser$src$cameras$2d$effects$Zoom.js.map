{
"version":3,
"file":"module$node_modules$Phaser$src$cameras$2d$effects$Zoom.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/cameras/2d/effects/Zoom.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$cameras$2d$effects$Zoom\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../../math/Clamp');\r\nvar Class = require('../../../utils/Class');\r\nvar EaseMap = require('../../../math/easing/EaseMap');\r\n\r\n/**\r\n * @classdesc\r\n * A Camera Zoom effect.\r\n *\r\n * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect if required.\r\n *\r\n * @class Zoom\r\n * @memberOf Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.11.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\r\nvar Zoom = new Class({\r\n\r\n    initialize:\r\n\r\n    function Zoom (camera)\r\n    {\r\n        /**\r\n         * The Camera this effect belongs to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @readOnly\r\n         * @since 3.11.0\r\n         */\r\n        this.camera = camera;\r\n\r\n        /**\r\n         * Is this effect actively running?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#isRunning\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @default false\r\n         * @since 3.11.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * The duration of the effect, in milliseconds.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#duration\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @default 0\r\n         * @since 3.11.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * The starting zoom value;\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#source\r\n         * @type {number}\r\n         * @since 3.11.0\r\n         */\r\n        this.source = 1;\r\n\r\n        /**\r\n         * The destination zoom value.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#destination\r\n         * @type {number}\r\n         * @since 3.11.0\r\n         */\r\n        this.destination = 1;\r\n\r\n        /**\r\n         * The ease function to use during the zoom.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#ease\r\n         * @type {function}\r\n         * @since 3.11.0\r\n         */\r\n        this.ease;\r\n\r\n        /**\r\n         * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#progress\r\n         * @type {number}\r\n         * @since 3.11.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Effect elapsed timer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#_elapsed\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._elapsed = 0;\r\n\r\n        /**\r\n         * @callback CameraZoomCallback\r\n         *\r\n         * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.\r\n         * @param {number} progress - The progress of the effect. A value between 0 and 1.\r\n         * @param {number} zoom - The Camera's new zoom value.\r\n         */\r\n\r\n        /**\r\n         * This callback is invoked every frame for the duration of the effect.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#_onUpdate\r\n         * @type {?CameraZoomCallback}\r\n         * @private\r\n         * @default null\r\n         * @since 3.11.0\r\n         */\r\n        this._onUpdate;\r\n\r\n        /**\r\n         * On Complete callback scope.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#_onUpdateScope\r\n         * @type {any}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._onUpdateScope;\r\n    },\r\n\r\n    /**\r\n     * This event is fired when the Zoom effect begins to run on a camera.\r\n     *\r\n     * @event CameraZoomStartEvent\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera that the effect began on.\r\n     * @param {Phaser.Cameras.Scene2D.Effects.Zoom} effect - A reference to the effect instance.\r\n     * @param {integer} duration - The duration of the effect.\r\n     * @param {number} zoom - The destination zoom value.\r\n     */\r\n\r\n    /**\r\n     * This event is fired when the Zoom effect completes.\r\n     *\r\n     * @event CameraZoomCompleteEvent\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera that the effect began on.\r\n     * @param {Phaser.Cameras.Scene2D.Effects.Zoom} effect - A reference to the effect instance.\r\n     */\r\n\r\n    /**\r\n     * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Zoom#start\r\n     * @fires CameraZoomStartEvent\r\n     * @fires CameraZoomCompleteEvent\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} zoom - The target Camera zoom value.\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {(string|function)} [ease='Linear'] - The ease to use for the Zoom. Can be any of the Phaser Easing constants or a custom function.\r\n     * @param {boolean} [force=false] - Force the shake effect to start immediately, even if already running.\r\n     * @param {CameraZoomCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent three arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n     * and the current camera zoom value.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n     */\r\n    start: function (zoom, duration, ease, force, callback, context)\r\n    {\r\n        if (duration === undefined) { duration = 1000; }\r\n        if (ease === undefined) { ease = EaseMap.Linear; }\r\n        if (force === undefined) { force = false; }\r\n        if (callback === undefined) { callback = null; }\r\n        if (context === undefined) { context = this.camera.scene; }\r\n\r\n        var cam = this.camera;\r\n\r\n        if (!force && this.isRunning)\r\n        {\r\n            return cam;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this.duration = duration;\r\n        this.progress = 0;\r\n\r\n        //  Starting from\r\n        this.source = cam.zoom;\r\n\r\n        //  Zooming to\r\n        this.destination = zoom;\r\n\r\n        //  Using this ease\r\n        if (typeof ease === 'string' && EaseMap.hasOwnProperty(ease))\r\n        {\r\n            this.ease = EaseMap[ease];\r\n        }\r\n        else if (typeof ease === 'function')\r\n        {\r\n            this.ease = ease;\r\n        }\r\n\r\n        this._elapsed = 0;\r\n\r\n        this._onUpdate = callback;\r\n        this._onUpdateScope = context;\r\n\r\n        this.camera.emit('camerazoomstart', this.camera, this, duration, zoom);\r\n\r\n        return cam;\r\n    },\r\n\r\n    /**\r\n     * The main update loop for this effect. Called automatically by the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Zoom#update\r\n     * @since 3.11.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._elapsed += delta;\r\n\r\n        this.progress = Clamp(this._elapsed / this.duration, 0, 1);\r\n\r\n        if (this._elapsed < this.duration)\r\n        {\r\n            this.camera.zoom = this.source + ((this.destination - this.source) * this.ease(this.progress));\r\n\r\n            if (this._onUpdate)\r\n            {\r\n                this._onUpdate.call(this._onUpdateScope, this.camera, this.progress, this.camera.zoom);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.camera.zoom = this.destination;\r\n\r\n            if (this._onUpdate)\r\n            {\r\n                this._onUpdate.call(this._onUpdateScope, this.camera, this.progress, this.destination);\r\n            }\r\n\r\n            this.effectComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called internally when the effect completes.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Zoom#effectComplete\r\n     * @since 3.11.0\r\n     */\r\n    effectComplete: function ()\r\n    {\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n\r\n        this.isRunning = false;\r\n\r\n        this.camera.emit('camerazoomcomplete', this.camera, this);\r\n    },\r\n\r\n    /**\r\n     * Resets this camera effect.\r\n     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Zoom#reset\r\n     * @since 3.11.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.isRunning = false;\r\n\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n    },\r\n\r\n    /**\r\n     * Destroys this effect, releasing it from the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Zoom#destroy\r\n     * @since 3.11.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.camera = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Zoom;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Clamp","Class","EaseMap","Zoom","initialize","camera","isRunning","duration","destination","source","_elapsed","progress","start","zoom","ease","force","callback","context","undefined","Linear","scene","cam","hasOwnProperty","_onUpdate","_onUpdateScope","emit","update","time","delta","call","effectComplete","reset","destroy"]
}
