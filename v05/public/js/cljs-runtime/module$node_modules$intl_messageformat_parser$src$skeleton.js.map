{
"version":3,
"file":"module$node_modules$intl_messageformat_parser$src$skeleton.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/intl-messageformat-parser/src/skeleton.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$intl_messageformat_parser$src$skeleton\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseNumberSkeleton = exports.parseDateTimeSkeleton = void 0;\nvar tslib_1 = require(\"tslib\");\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nfunction parseDateTimeSkeleton(skeleton) {\n    var result = {};\n    skeleton.replace(DATE_TIME_REGEX, function (match) {\n        var len = match.length;\n        switch (match[0]) {\n            // Era\n            case 'G':\n                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n                break;\n            // Year\n            case 'y':\n                result.year = len === 2 ? '2-digit' : 'numeric';\n                break;\n            case 'Y':\n            case 'u':\n            case 'U':\n            case 'r':\n                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n            // Quarter\n            case 'q':\n            case 'Q':\n                throw new RangeError('`q/Q` (quarter) patterns are not supported');\n            // Month\n            case 'M':\n            case 'L':\n                result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n                break;\n            // Week\n            case 'w':\n            case 'W':\n                throw new RangeError('`w/W` (week) patterns are not supported');\n            case 'd':\n                result.day = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'D':\n            case 'F':\n            case 'g':\n                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n            // Weekday\n            case 'E':\n                result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';\n                break;\n            case 'e':\n                if (len < 4) {\n                    throw new RangeError('`e..eee` (weekday) patterns are not supported');\n                }\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n                break;\n            case 'c':\n                if (len < 4) {\n                    throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n                }\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n                break;\n            // Period\n            case 'a': // AM, PM\n                result.hour12 = true;\n                break;\n            case 'b': // am, pm, noon, midnight\n            case 'B': // flexible day periods\n                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n            // Hour\n            case 'h':\n                result.hourCycle = 'h12';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'H':\n                result.hourCycle = 'h23';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'K':\n                result.hourCycle = 'h11';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'k':\n                result.hourCycle = 'h24';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'j':\n            case 'J':\n            case 'C':\n                throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n            // Minute\n            case 'm':\n                result.minute = ['numeric', '2-digit'][len - 1];\n                break;\n            // Second\n            case 's':\n                result.second = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'S':\n            case 'A':\n                throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');\n            // Zone\n            case 'z': // 1..3, 4: specific non-location format\n                result.timeZoneName = len < 4 ? 'short' : 'long';\n                break;\n            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n            case 'O': // 1, 4: miliseconds in day short, long\n            case 'v': // 1, 4: generic non-location format\n            case 'V': // 1, 2, 3, 4: time zone ID or city\n            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats\n                throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');\n        }\n        return '';\n    });\n    return result;\n}\nexports.parseDateTimeSkeleton = parseDateTimeSkeleton;\nfunction icuUnitToEcma(unit) {\n    return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\nfunction parseSignificantPrecision(str) {\n    var result = {};\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n        // @@@ case\n        if (typeof g2 !== 'string') {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length;\n        }\n        // @@@+ case\n        else if (g2 === '+') {\n            result.minimumSignificantDigits = g1.length;\n        }\n        // .### case\n        else if (g1[0] === '#') {\n            result.maximumSignificantDigits = g1.length;\n        }\n        // .@@## or .@@@ case\n        else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits =\n                g1.length + (typeof g2 === 'string' ? g2.length : 0);\n        }\n        return '';\n    });\n    return result;\n}\nfunction parseSign(str) {\n    switch (str) {\n        case 'sign-auto':\n            return {\n                signDisplay: 'auto',\n            };\n        case 'sign-accounting':\n            return {\n                currencySign: 'accounting',\n            };\n        case 'sign-always':\n            return {\n                signDisplay: 'always',\n            };\n        case 'sign-accounting-always':\n            return {\n                signDisplay: 'always',\n                currencySign: 'accounting',\n            };\n        case 'sign-except-zero':\n            return {\n                signDisplay: 'exceptZero',\n            };\n        case 'sign-accounting-except-zero':\n            return {\n                signDisplay: 'exceptZero',\n                currencySign: 'accounting',\n            };\n        case 'sign-never':\n            return {\n                signDisplay: 'never',\n            };\n    }\n}\nfunction parseNotationOptions(opt) {\n    var result = {};\n    var signOpts = parseSign(opt);\n    if (signOpts) {\n        return signOpts;\n    }\n    return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nfunction parseNumberSkeleton(tokens) {\n    var result = {};\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        switch (token.stem) {\n            case 'percent':\n                result.style = 'percent';\n                continue;\n            case 'currency':\n                result.style = 'currency';\n                result.currency = token.options[0];\n                continue;\n            case 'group-off':\n                result.useGrouping = false;\n                continue;\n            case 'precision-integer':\n            case '.':\n                result.maximumFractionDigits = 0;\n                continue;\n            case 'measure-unit':\n                result.style = 'unit';\n                result.unit = icuUnitToEcma(token.options[0]);\n                continue;\n            case 'compact-short':\n                result.notation = 'compact';\n                result.compactDisplay = 'short';\n                continue;\n            case 'compact-long':\n                result.notation = 'compact';\n                result.compactDisplay = 'long';\n                continue;\n            case 'scientific':\n                result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (tslib_1.__assign(tslib_1.__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'engineering':\n                result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (tslib_1.__assign(tslib_1.__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'notation-simple':\n                result.notation = 'standard';\n                continue;\n            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n            case 'unit-width-narrow':\n                result.currencyDisplay = 'narrowSymbol';\n                result.unitDisplay = 'narrow';\n                continue;\n            case 'unit-width-short':\n                result.currencyDisplay = 'code';\n                result.unitDisplay = 'short';\n                continue;\n            case 'unit-width-full-name':\n                result.currencyDisplay = 'name';\n                result.unitDisplay = 'long';\n                continue;\n            case 'unit-width-iso-code':\n                result.currencyDisplay = 'symbol';\n                continue;\n            case 'scale':\n                result.scale = parseFloat(token.options[0]);\n                continue;\n        }\n        // Precision\n        // https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision\n        // precision-integer case\n        if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n            if (token.options.length > 1) {\n                throw new RangeError('Fraction-precision stems only accept a single optional option');\n            }\n            token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n                // .000* case (before ICU67 it was .000+)\n                if (g2 === '*') {\n                    result.minimumFractionDigits = g1.length;\n                }\n                // .### case\n                else if (g3 && g3[0] === '#') {\n                    result.maximumFractionDigits = g3.length;\n                }\n                // .00## case\n                else if (g4 && g5) {\n                    result.minimumFractionDigits = g4.length;\n                    result.maximumFractionDigits = g4.length + g5.length;\n                }\n                else {\n                    result.minimumFractionDigits = g1.length;\n                    result.maximumFractionDigits = g1.length;\n                }\n                return '';\n            });\n            if (token.options.length) {\n                result = tslib_1.__assign(tslib_1.__assign({}, result), parseSignificantPrecision(token.options[0]));\n            }\n            continue;\n        }\n        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n            result = tslib_1.__assign(tslib_1.__assign({}, result), parseSignificantPrecision(token.stem));\n            continue;\n        }\n        var signOpts = parseSign(token.stem);\n        if (signOpts) {\n            result = tslib_1.__assign(tslib_1.__assign({}, result), signOpts);\n        }\n    }\n    return result;\n}\nexports.parseNumberSkeleton = parseNumberSkeleton;\n\n};"],
"names":["shadow$provide","global","require","module","exports","parseSignificantPrecision","str","result","replace","SIGNIFICANT_PRECISION_REGEX","_","g1","g2","minimumSignificantDigits","length","maximumSignificantDigits","parseSign","signDisplay","currencySign","parseNotationOptions","opt","signOpts","Object","defineProperty","value","parseNumberSkeleton","parseDateTimeSkeleton","tslib_1","DATE_TIME_REGEX","skeleton","match","len","era","year","RangeError","month","day","weekday","hour12","hourCycle","hour","minute","second","timeZoneName","FRACTION_PRECISION_REGEX","tokens","_i","token","stem","style","currency","options","useGrouping","maximumFractionDigits","unit","notation","compactDisplay","__assign","reduce","all","currencyDisplay","unitDisplay","scale","parseFloat","test","g3","g4","g5","minimumFractionDigits"]
}
