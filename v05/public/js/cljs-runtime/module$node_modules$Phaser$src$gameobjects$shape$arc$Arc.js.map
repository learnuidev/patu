{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$arc$Arc.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/shape/arc/Arc.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$arc$Arc\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar ArcRender = require('./ArcRender');\r\nvar Class = require('../../../utils/Class');\r\nvar DegToRad = require('../../../math/DegToRad');\r\nvar Earcut = require('../../../geom/polygon/Earcut');\r\nvar GeomCircle = require('../../../geom/circle/Circle');\r\nvar MATH_CONST = require('../../../math/const');\r\nvar Shape = require('../Shape');\r\n\r\n/**\r\n * @classdesc\r\n * The Arc Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * When it renders it displays an arc shape. You can control the start and end angles of the arc,\r\n * as well as if the angles are winding clockwise or anti-clockwise. With the default settings\r\n * it renders as a complete circle. By changing the angles you can create other arc shapes,\r\n * such as half-circles.\r\n * \r\n * Arcs also have an `iterations` property and corresponding `setIterations` method. This allows\r\n * you to control how smooth the shape renders in WebGL, by controlling the number of iterations\r\n * that take place during construction.\r\n *\r\n * @class Arc\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [radius=128] - The radius of the arc.\r\n * @param {integer} [startAngle=0] - The start angle of the arc, in degrees.\r\n * @param {integer} [endAngle=360] - The end angle of the arc, in degrees.\r\n * @param {boolean} [anticlockwise=false] - The winding order of the start and end angles.\r\n * @param {number} [fillColor] - The color the arc will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the arc will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\r\nvar Arc = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        ArcRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Arc (scene, x, y, radius, startAngle, endAngle, anticlockwise, fillColor, fillAlpha)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (radius === undefined) { radius = 128; }\r\n        if (startAngle === undefined) { startAngle = 0; }\r\n        if (endAngle === undefined) { endAngle = 360; }\r\n        if (anticlockwise === undefined) { anticlockwise = false; }\r\n\r\n        Shape.call(this, scene, 'Arc', new GeomCircle(0, 0, radius));\r\n\r\n        /**\r\n         * Private internal value. Holds the start angle in degrees.\r\n         *\r\n         * @name Phaser.GameObjects.Arc#_startAngle\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._startAngle = startAngle;\r\n\r\n        /**\r\n         * Private internal value. Holds the end angle in degrees.\r\n         *\r\n         * @name Phaser.GameObjects.Arc#_endAngle\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._endAngle = endAngle;\r\n\r\n        /**\r\n         * Private internal value. Holds the winding order of the start and end angles.\r\n         *\r\n         * @name Phaser.GameObjects.Arc#_anticlockwise\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._anticlockwise = anticlockwise;\r\n\r\n        /**\r\n         * Private internal value. Holds the number of iterations used when drawing the arc.\r\n         *\r\n         * @name Phaser.GameObjects.Arc#_iterations\r\n         * @type {number}\r\n         * @default 0.01\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._iterations = 0.01;\r\n\r\n        this.setPosition(x, y);\r\n        this.setSize(this.geom.radius, this.geom.radius);\r\n\r\n        if (fillColor !== undefined)\r\n        {\r\n            this.setFillStyle(fillColor, fillAlpha);\r\n        }\r\n\r\n        this.updateDisplayOrigin();\r\n        this.updateData();\r\n    },\r\n\r\n    /**\r\n     * The number of iterations used when drawing the arc.\r\n     * Increase this value for smoother arcs, at the cost of more polygons being rendered.\r\n     * Modify this value by small amounts, such as 0.01.\r\n     *\r\n     * @name Phaser.GameObjects.Arc#iterations\r\n     * @type {number}\r\n     * @default 0.01\r\n     * @since 3.13.0\r\n     */\r\n    iterations: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._iterations;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._iterations = value;\r\n\r\n            this.updateData();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The radius of the arc.\r\n     *\r\n     * @name Phaser.GameObjects.Arc#radius\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\r\n    radius: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.geom.radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.geom.radius = value;\r\n\r\n            this.updateData();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The start angle of the arc, in degrees.\r\n     *\r\n     * @name Phaser.GameObjects.Arc#startAngle\r\n     * @type {integer}\r\n     * @since 3.13.0\r\n     */\r\n    startAngle: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._startAngle;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._startAngle = value;\r\n\r\n            this.updateData();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The end angle of the arc, in degrees.\r\n     *\r\n     * @name Phaser.GameObjects.Arc#endAngle\r\n     * @type {integer}\r\n     * @since 3.13.0\r\n     */\r\n    endAngle: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._endAngle;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._endAngle = value;\r\n\r\n            this.updateData();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The winding order of the start and end angles.\r\n     *\r\n     * @name Phaser.GameObjects.Arc#anticlockwise\r\n     * @type {boolean}\r\n     * @since 3.13.0\r\n     */\r\n    anticlockwise: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._anticlockwise;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._anticlockwise = value;\r\n\r\n            this.updateData();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the radius of the arc.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Arc#setRadius\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} value - The value to set the radius to.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setRadius: function (value)\r\n    {\r\n        this.radius = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the number of iterations used when drawing the arc.\r\n     * Increase this value for smoother arcs, at the cost of more polygons being rendered.\r\n     * Modify this value by small amounts, such as 0.01.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Arc#setIterations\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} value - The value to set the iterations to.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setIterations: function (value)\r\n    {\r\n        if (value === undefined) { value = 0.01; }\r\n\r\n        this.iterations = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the starting angle of the arc, in degrees.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Arc#setStartAngle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} value - The value to set the starting angle to.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setStartAngle: function (angle, anticlockwise)\r\n    {\r\n        this._startAngle = angle;\r\n\r\n        if (anticlockwise !== undefined)\r\n        {\r\n            this._anticlockwise = anticlockwise;\r\n        }\r\n\r\n        return this.updateData();\r\n    },\r\n\r\n    /**\r\n     * Sets the ending angle of the arc, in degrees.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Arc#setEndAngle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} value - The value to set the ending angle to.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setEndAngle: function (angle, anticlockwise)\r\n    {\r\n        this._endAngle = angle;\r\n\r\n        if (anticlockwise !== undefined)\r\n        {\r\n            this._anticlockwise = anticlockwise;\r\n        }\r\n\r\n        return this.updateData();\r\n    },\r\n\r\n    /**\r\n     * Internal method that updates the data and path values.\r\n     *\r\n     * @method Phaser.GameObjects.Arc#updateData\r\n     * @private\r\n     * @since 3.13.0\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    updateData: function ()\r\n    {\r\n        var step = this._iterations;\r\n        var iteration = step;\r\n\r\n        var radius = this.geom.radius;\r\n        var startAngle = DegToRad(this._startAngle);\r\n        var endAngle = DegToRad(this._endAngle);\r\n        var anticlockwise = this._anticlockwise;\r\n\r\n        var x = radius / 2;\r\n        var y = radius / 2;\r\n\r\n        endAngle -= startAngle;\r\n\r\n        if (anticlockwise)\r\n        {\r\n            if (endAngle < -MATH_CONST.PI2)\r\n            {\r\n                endAngle = -MATH_CONST.PI2;\r\n            }\r\n            else if (endAngle > 0)\r\n            {\r\n                endAngle = -MATH_CONST.PI2 + endAngle % MATH_CONST.PI2;\r\n            }\r\n        }\r\n        else if (endAngle > MATH_CONST.PI2)\r\n        {\r\n            endAngle = MATH_CONST.PI2;\r\n        }\r\n        else if (endAngle < 0)\r\n        {\r\n            endAngle = MATH_CONST.PI2 + endAngle % MATH_CONST.PI2;\r\n        }\r\n\r\n        var path = [ x + Math.cos(startAngle) * radius, y + Math.sin(startAngle) * radius ];\r\n\r\n        var ta;\r\n\r\n        while (iteration < 1)\r\n        {\r\n            ta = endAngle * iteration + startAngle;\r\n\r\n            path.push(x + Math.cos(ta) * radius, y + Math.sin(ta) * radius);\r\n\r\n            iteration += step;\r\n        }\r\n\r\n        ta = endAngle + startAngle;\r\n\r\n        path.push(x + Math.cos(ta) * radius, y + Math.sin(ta) * radius);\r\n\r\n        path.push(x + Math.cos(startAngle) * radius, y + Math.sin(startAngle) * radius);\r\n\r\n        this.pathIndexes = Earcut(path);\r\n        this.pathData = path;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Arc;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","ArcRender","Class","DegToRad","Earcut","GeomCircle","MATH_CONST","Shape","Arc","Extends","Mixins","initialize","scene","x","y","radius","startAngle","endAngle","anticlockwise","fillColor","fillAlpha","undefined","call","_startAngle","_endAngle","_anticlockwise","_iterations","setPosition","setSize","geom","setFillStyle","updateDisplayOrigin","updateData","iterations","get","set","value","setRadius","setIterations","setStartAngle","angle","setEndAngle","step","iteration","PI2","path","Math","cos","sin","ta","push","pathIndexes","pathData"]
}
