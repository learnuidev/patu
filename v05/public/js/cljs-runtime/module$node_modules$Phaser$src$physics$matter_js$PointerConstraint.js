shadow$provide.module$node_modules$Phaser$src$physics$matter_js$PointerConstraint=function(global,require,module,exports){var Bounds=require("module$node_modules$Phaser$src$physics$matter_js$lib$geometry$Bounds");global=require("module$node_modules$Phaser$src$utils$Class");var Composite=require("module$node_modules$Phaser$src$physics$matter_js$lib$body$Composite"),Constraint=require("module$node_modules$Phaser$src$physics$matter_js$lib$constraint$Constraint"),Detector=require("module$node_modules$Phaser$src$physics$matter_js$lib$collision$Detector"),
GetFastValue=require("module$node_modules$Phaser$src$utils$object$GetFastValue"),Merge=require("module$node_modules$Phaser$src$utils$object$Merge"),Sleeping=require("module$node_modules$Phaser$src$physics$matter_js$lib$core$Sleeping"),Vector2=require("module$node_modules$Phaser$src$math$Vector2"),Vertices=require("module$node_modules$Phaser$src$physics$matter_js$lib$geometry$Vertices");require=new global({initialize:function(scene,world,options){void 0===options&&(options={});this.scene=scene;this.world=
world;(world=GetFastValue(options,"camera",null))?(this.camera=world,delete options.camera):this.camera=scene.sys.cameras.main;this.pointer=null;this.active=!0;this.position=new Vector2;this.constraint=Constraint.create(Merge(options,{label:"Pointer Constraint",pointA:{x:0,y:0},pointB:{x:0,y:0},damping:0,length:.01,stiffness:.1,angularStiffness:1,collisionFilter:{category:1,mask:4294967295,group:0}}));this.world.on("beforeupdate",this.update,this);scene.sys.input.on("pointerdown",this.onDown,this);
scene.sys.input.on("pointerup",this.onUp,this)},onDown:function(pointer){this.pointer=pointer},onUp:function(){this.pointer=null},getBodyPart:function(body,position){for(var constraint=this.constraint,i=1<body.parts.length?1:0;i<body.parts.length;i++)if(Vertices.contains(body.parts[i].vertices,position))return constraint.bodyB=body,constraint.pointA.x=position.x,constraint.pointA.y=position.y,constraint.pointB.x=position.x-body.position.x,constraint.pointB.y=position.y-body.position.y,constraint.angleB=
body.angle,Sleeping.set(body,!1),!0;return!1},update:function(){if(this.active){var pointer=this.pointer,constraint=this.constraint;if(pointer){var pos=this.position;this.camera.getWorldPoint(pointer.x,pointer.y,pos);if(constraint.bodyB)Sleeping.set(constraint.bodyB,!1),constraint.pointA.x=pos.x,constraint.pointA.y=pos.y;else{pointer=Composite.allBodies(this.world.localWorld);for(var i=0;i<pointer.length;i++){var body=pointer[i];if(!body.ignorePointer&&Bounds.contains(body.bounds,pos)&&Detector.canCollide(body.collisionFilter,
constraint.collisionFilter)&&this.getBodyPart(body,pos))break}}}else constraint.bodyB&&(constraint.bodyB=null)}},destroy:function(){this.world.removeConstraint(this.constraint);this.constraint=null;this.world.off("beforeupdate",this.update);this.scene.sys.input.off("pointerdown",this.onDown,this);this.scene.sys.input.off("pointerup",this.onUp,this)}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$physics$matter_js$PointerConstraint.js.map
