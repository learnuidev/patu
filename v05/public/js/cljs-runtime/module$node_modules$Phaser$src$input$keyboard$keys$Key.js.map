{
"version":3,
"file":"module$node_modules$Phaser$src$input$keyboard$keys$Key.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqB/GC,MAAAA,CAAM,KAdEH,OAAAI,CAAQ,4CAARA,CAcF,EAAU,CAEhBC,WAEAF,QAAa,CAACG,OAAD,CACb,CAQI,IAAAA,QAAA,CAAeA,OASf,KAAAC,cAAA,CAAqBC,IAAAA,EAoBrB,KAAAC,QAAA,CAVA,IAAAC,eAUA,CAVsB,CAAA,CAoBtB,KAAAC,OAAA,CAAc,CAAA,CAUd,KAAAC,KAAA,CAAY,CAAA,CA8BZ,KAAAC,SAAA,CAVA,IAAAC,QAUA,CApBA,IAAAC,OAoBA,CApBc,CAAA,CAsEd,KAAAC,QAAA,CAVA,IAAAC,OAUA,CApBA,IAAAC,SAoBA,CA9BA,IAAAC,SA8BA,CAxCA,IAAAC,SAwCA,CAxCgB,CA8DhB,KAAAC,QAAA,CAXA,IAAAC,UAWA,CAXiB,CAAA,CAqBjB,KAAAC,MAAA,CAAa,EAzKjB,CALgB,CAyLhBC,MAAOA,QAAS,EAChB,CAEI,IAAAf,QAAA;AADA,IAAAC,eACA,CADsB,CAAA,CAEtB,KAAAC,OAAA,CAAc,CAAA,CACd,KAAAC,KAAA,CAAY,CAAA,CAGZ,KAAAC,SAAA,CADA,IAAAC,QACA,CAFA,IAAAC,OAEA,CAFc,CAAA,CAMd,KAAAC,QAAA,CADA,IAAAC,OACA,CAFA,IAAAC,SAEA,CAHA,IAAAC,SAGA,CAHgB,CAKhB,KAAAE,QAAA,CADA,IAAAC,UACA,CADiB,CAAA,CAEjB,KAAAC,MAAA,CAAa,EAEb,OAAO,KAhBX,CA1LgB,CAAV,CA+MVtB,OAAAC,QAAA,CAAiBC,MApOkG;",
"sources":["node_modules/Phaser/src/input/keyboard/keys/Key.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$input$keyboard$keys$Key\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A generic Key object which can be passed to the Process functions (and so on)\r\n * keycode must be an integer\r\n *\r\n * @class Key\r\n * @memberOf Phaser.Input.Keyboard\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {integer} keyCode - The keycode of this key.\r\n */\r\nvar Key = new Class({\r\n\r\n    initialize:\r\n\r\n    function Key (keyCode)\r\n    {\r\n        /**\r\n         * The keycode of this key.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#keyCode\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.keyCode = keyCode;\r\n\r\n        /**\r\n         * The original DOM event.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#originalEvent\r\n         * @type {KeyboardEvent}\r\n         * @since 3.0.0\r\n         */\r\n        this.originalEvent = undefined;\r\n\r\n        /**\r\n         * Should this Key prevent event propagation?\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#preventDefault\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.preventDefault = true;\r\n\r\n        /**\r\n         * Can this Key be processed?\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * The \"down\" state of the key. This will remain `true` for as long as the keyboard thinks this key is held down.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#isDown\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.isDown = false;\r\n\r\n        /**\r\n         * The \"up\" state of the key. This will remain `true` for as long as the keyboard thinks this key is up.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#isUp\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.isUp = true;\r\n\r\n        /**\r\n         * The down state of the ALT key, if pressed at the same time as this key.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#altKey\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.altKey = false;\r\n\r\n        /**\r\n         * The down state of the CTRL key, if pressed at the same time as this key.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#ctrlKey\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.ctrlKey = false;\r\n\r\n        /**\r\n         * The down state of the SHIFT key, if pressed at the same time as this key.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#shiftKey\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.shiftKey = false;\r\n\r\n        /**\r\n         * The location of the modifier key. 0 for standard (or unknown), 1 for left, 2 for right, 3 for numpad.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#location\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.location = 0;\r\n\r\n        /**\r\n         * The timestamp when the key was last pressed down.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#timeDown\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.timeDown = 0;\r\n\r\n        /**\r\n         * The number of milliseconds this key was held down for in the previous down - up sequence.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#duration\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * The timestamp when the key was last released.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#timeUp\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.timeUp = 0;\r\n\r\n        /**\r\n         * If a key is held down this holds down the number of times the key has 'repeated'.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#repeats\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.repeats = 0;\r\n\r\n        /**\r\n         * True if the key has just been pressed (NOTE: requires to be reset, see justDown getter)\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#_justDown\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._justDown = false;\r\n\r\n        /**\r\n         * True if the key has just been pressed (NOTE: requires to be reset, see justDown getter)\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#_justUp\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._justUp = false;\r\n\r\n        /**\r\n         * Internal tick counter.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#_tick\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._tick = -1;\r\n    },\r\n\r\n    /**\r\n     * Resets this Key object back to its default un-pressed state.\r\n     *\r\n     * @method Phaser.Input.Keyboard.Key.reset\r\n     * @since 3.6.0\r\n     * \r\n     * @return {Phaser.Input.Keyboard.Key} This Key instance.\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.preventDefault = true;\r\n        this.enabled = true;\r\n        this.isDown = false;\r\n        this.isUp = true;\r\n        this.altKey = false;\r\n        this.ctrlKey = false;\r\n        this.shiftKey = false;\r\n        this.timeDown = 0;\r\n        this.duration = 0;\r\n        this.timeUp = 0;\r\n        this.repeats = 0;\r\n        this._justDown = false;\r\n        this._justUp = false;\r\n        this._tick = -1;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Key;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Key","Class","initialize","keyCode","originalEvent","undefined","enabled","preventDefault","isDown","isUp","shiftKey","ctrlKey","altKey","repeats","timeUp","duration","timeDown","location","_justUp","_justDown","_tick","reset"]
}
