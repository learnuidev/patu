{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$HasTileAtWorldXY.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,oEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOhI,IAAIC,UAAYH,OAAA,CAAQ,8DAAR,CAAhB,CACII,aAAeJ,OAAA,CAAQ,iEAAR,CADnB,CAEIK,aAAeL,OAAA,CAAQ,iEAAR,CAyBnBC,OAAAC,QAAA,CARuBI,QAAS,CAACC,MAAD,CAASC,MAAT,CAAiBC,MAAjB,CAAyBC,KAAzB,CAChC,CACQC,MAAAA,CAAQP,YAAA,CAAaG,MAAb,CAAqB,CAAA,CAArB,CAA2BE,MAA3B,CAAmCC,KAAnC,CACRE,OAAAA,CAAQP,YAAA,CAAaG,MAAb;AAAqB,CAAA,CAArB,CAA2BC,MAA3B,CAAmCC,KAAnC,CAEZ,OAAOP,UAAA,CAAUQ,MAAV,CAAiBC,MAAjB,CAAwBF,KAAxB,CAJX,CA3BgI;",
"sources":["node_modules/Phaser/src/tilemaps/components/HasTileAtWorldXY.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$HasTileAtWorldXY\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar HasTileAt = require('./HasTileAt');\r\nvar WorldToTileX = require('./WorldToTileX');\r\nvar WorldToTileY = require('./WorldToTileY');\r\n\r\n/**\r\n * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n * false if there is no tile or if the tile at that location has an index of -1.\r\n *\r\n * @function Phaser.Tilemaps.Components.HasTileAtWorldXY\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {number} worldX - The X coordinate of the world position.\r\n * @param {number} worldY - The Y coordinate of the world position.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {?boolean} Returns a boolean, or null if the layer given was invalid.\r\n */\r\nvar HasTileAtWorldXY = function (worldX, worldY, camera, layer)\r\n{\r\n    var tileX = WorldToTileX(worldX, true, camera, layer);\r\n    var tileY = WorldToTileY(worldY, true, camera, layer);\r\n\r\n    return HasTileAt(tileX, tileY, layer);\r\n};\r\n\r\nmodule.exports = HasTileAtWorldXY;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","HasTileAt","WorldToTileX","WorldToTileY","HasTileAtWorldXY","worldX","worldY","camera","layer","tileX","tileY"]
}
