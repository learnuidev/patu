{
"version":3,
"file":"module$node_modules$Phaser$src$geom$rectangle$Union.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,oDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOhH,IAAIC,UAAYH,OAAA,CAAQ,yDAAR,CA6BhBC,OAAAC,QAAA,CAbYE,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAeC,GAAf,CACrB,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,IAAIJ,SAAnC,CAGA,KAAIM,EAAIC,IAAAC,IAAA,CAASN,KAAAI,EAAT,CAAkBH,KAAAG,EAAlB,CAAR,CACIG,EAAIF,IAAAC,IAAA,CAASN,KAAAO,EAAT,CAAkBN,KAAAM,EAAlB,CAIR,OAAOL,IAAAM,MAAA,CAAUJ,CAAV,CAAaG,CAAb,CAHCF,IAAAI,IAAA,CAAST,KAAAU,MAAT,CAAsBT,KAAAS,MAAtB,CAGD,CAHsCN,CAGtC,CAFCC,IAAAI,IAAA,CAAST,KAAAW,OAAT,CAAuBV,KAAAU,OAAvB,CAED,CAFwCJ,CAExC,CATX,CAxBgH;",
"sources":["node_modules/Phaser/src/geom/rectangle/Union.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$rectangle$Union\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Rectangle = require('./Rectangle');\r\n\r\n/**\r\n * Creates a new Rectangle or repositions and/or resizes an existing Rectangle so that it encompasses the two given Rectangles, i.e. calculates their union.\r\n *\r\n * @function Phaser.Geom.Rectangle.Union\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectA - The first Rectangle to use.\r\n * @param {Phaser.Geom.Rectangle} rectB - The second Rectangle to use.\r\n * @param {Phaser.Geom.Rectangle} [out] - The Rectangle to store the union in.\r\n *\r\n * @return {Phaser.Geom.Rectangle} The modified `out` Rectangle, or a new Rectangle if none was provided.\r\n */\r\nvar Union = function (rectA, rectB, out)\r\n{\r\n    if (out === undefined) { out = new Rectangle(); }\r\n\r\n    //  Cache vars so we can use one of the input rects as the output rect\r\n    var x = Math.min(rectA.x, rectB.x);\r\n    var y = Math.min(rectA.y, rectB.y);\r\n    var w = Math.max(rectA.right, rectB.right) - x;\r\n    var h = Math.max(rectA.bottom, rectB.bottom) - y;\r\n\r\n    return out.setTo(x, y, w, h);\r\n};\r\n\r\nmodule.exports = Union;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Rectangle","Union","rectA","rectB","out","undefined","x","Math","min","y","setTo","max","right","bottom"]
}
