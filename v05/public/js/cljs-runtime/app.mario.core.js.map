{"version":3,"sources":["app/mario/core.cljs"],"mappings":"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","names":["app.mario.core/PLAYER_SPEED","app.mario.core/JUMP_SPEED","js/app","js/app.mario","js/app.mario.core","js/app.mario.core.Scene","app.mario.core/Scene","js/module$node_modules$Phaser$src$phaser","js/app.mario.core.Game","app.mario.core/Game","app.mario.core/load-image","this","name","property","app.mario.core/load-spritesheet","options","cljs.core/clj->js","p__26699","vec__26700","cljs.core.nth","app.mario.core/add-sprite","x","y","js/app.mario.core.scene","app.mario.core/scene","app.mario.core/init!","app.mario.core/preload!","app.mario.core/add-group","platforms","app.mario.core/add-ground","ground","app.mario.core/add-platform","platform","app.mario.core/add-player","player","app.mario.core/setup-collider","app.mario.core/constrain-player","app.mario.core/set-world-bounds","app.mario.core/animate-player","frames","app.mario.core/enable-cursor-keys","app.mario.core/create!","app.mario.core/set-player-velocity-x","value","app.mario.core/set-player-velocity-y","app.mario.core/flip-player","bool","app.mario.core/is-walking?","app.mario.core/start-walking","app.mario.core/stop-walking","app.mario.core/move-left","app.mario.core/move-right","app.mario.core/set-player-frame","app.mario.core/stop-player","app.mario.core/handle-movement","left-pressed?","right-pressed?","stopped?","cljs.core/not","app.mario.core/handle-jump","space?","up?","or__4126__auto__","app.mario.core/update!","app.mario.core/config","app.mario.core/init-game","app.mario.core/app"],"sourcesContent":["(ns app.mario.core\n  (:require [\"Phaser\" :as Phaser]))\n\n;; CONStANTS\n(def PLAYER_SPEED 150)\n(def JUMP_SPEED (* -1 600))\n\n;; === Destructing for easy access ===\n(defonce Scene (.-Scene Phaser))\n(defonce Game (.-Game Phaser))\n\n(defn load-image [this name property]\n  (.image (.-load this) name property))\n\n(defn load-spritesheet [this name property options]\n  (.spritesheet (.-load this) name property (clj->js options)))\n\n(defn add-sprite [this [x y name]]\n  (.sprite (.-add this) x y name))\n\n;; ==== GAME ===\n(defonce scene #js {})\n\n;; 1 Init\n(defn init! []\n  (this-as this))\n\n(set! scene -init init!)\n\n;; 2 Preload\n(defn preload! []\n  (this-as this\n           (load-image this \"ground\"   \"assets/mario/images/ground.png\")\n           (load-image this \"platform\" \"assets/mario/images/platform.png\")\n           (load-image this \"block\"    \"assets/mario/images/block.png\")\n           (load-image this \"goal\"     \"assets/mario/images/gorilla3.png\")\n           (load-image this \"barrel\"   \"assets/mario/images/barrel.png\")\n           (load-spritesheet this\n                             \"player\"\n                             \"assets/mario/images/player_spritesheet.png\"\n                             {:frameWidth 28\n                              :frameHeight 30\n                              :margin 1\n                              :spacing 1})\n           (load-spritesheet this\n                             \"fire\"\n                             \"assets/mario/images/fire_spritesheet.png\"\n                             {:frameWidth 20\n                              :frameHeight 21\n                              :margin 1\n                              :spacing 1})))\n(set! scene -preload preload!)\n\n;; === Create ===\n(defn add-group [this]\n  (let [platforms (.group (.-add this))]\n    (set! this -platforms platforms)))\n;; === Static Assets ===\n(defn add-ground [this]\n  (let [ground  (.sprite (.-add this) 180 604 \"ground\")]\n    (.existing (.. this -physics -add) ground true)\n    (.add (.-platforms this) ground)))\n\n(defn add-platform [this]\n  (let [platform (.tileSprite (.-add this) 180 500 (* 3 36) (* 1 30) \"block\")]\n    (.existing (.. this -physics -add) platform true)\n    (.add (.-platforms this) platform)))\n;; === Dynamic Assets ===\n(defn add-player [this]\n  (let [player (.sprite (.-add this) 180 400 \"player\" 3)]\n    (set! this -player player)\n    (.existing (.. this -physics -add) player false)))\n\n(defn setup-collider [this]\n  (.collider (.. this -physics -add)\n             (.-player this)\n             (.-platforms this)))\n\n;; Constrain player\n(defn constrain-player\n  \" - This function prevents the player from getting out of the screen\n      and falling off.\n    - This function constrains the player to the game bounds. So that it does not\n      leave the game world\n    - This is done by calling setCollideWorldBounds method:\n       this.player.body.setCollideWorldBounds(true)\"\n  [this]\n  (.setCollideWorldBounds (.. this -player -body) true))\n\n(defn set-world-bounds\n  \"Here we are setting the boundary of the game\"\n  [this]\n  (set! (.. this -physics -world -bounds -width) 360)\n  (set! (.. this -physics -world -bounds -height) 700))\n\n;; Animation ===\n(defn animate-player [this]\n  (let [frames (.generateFrameNames\n                (.-anims this)\n                \"player\"\n                (clj->js {:frames [0 1 2]}))]\n    (.create (.-anims this)\n             (clj->js {:key \"walking\"\n                       :frames frames\n                       :yoyo true\n                       :frameRate 12\n                       :repeat -1}))))\n;;\n(defn enable-cursor-keys [this]\n  (set! this -cursors (.createCursorKeys (.. this -input -keyboard))))\n;; 3. Create\n(defn create! []\n  \" === 1.2 Create a game ===\n     This function gets called after the preload! ends\"\n  (this-as this\n           (set-world-bounds this)\n           (add-group this)\n           (add-ground this)\n           (add-platform this)\n           (add-player this)\n           (setup-collider this)\n           (animate-player this)\n           (constrain-player this)\n           (enable-cursor-keys this)))\n(set! scene -create create!)\n\n;; 4 Update - gets executed on every frame\n(defn set-player-velocity-x [this value]\n  (.setVelocityX (.. this -player -body) value))\n\n(defn set-player-velocity-y [this value]\n  (.setVelocityY (.. this -player -body) value))\n\n(defn flip-player [this bool]\n  (set! (.. this -player -flipX) bool))\n\n(defn is-walking? [this]\n  (.. this -player -anims -isPlaying))\n\n(defn start-walking [this]\n  (.play (.. this -player -anims) \"walking\"))\n\n(defn stop-walking [this]\n  (.stop (.. this -player -anims) \"walking\"))\n\n(defn move-left [this]\n  (set-player-velocity-x this (* -1 PLAYER_SPEED))\n  (flip-player this false)\n  (when-not (is-walking? this)\n    (start-walking this)))\n\n(defn move-right [this]\n  (set-player-velocity-x this PLAYER_SPEED)\n  (flip-player this true)\n  (when-not (is-walking? this)\n    (start-walking this)))\n\n(defn set-player-frame [this value]\n  (.setFrame (.. this -player) value))\n\n(defn stop-player [this]\n  (set-player-velocity-x this 0)\n  (stop-walking this)\n  (set-player-frame this 3))\n\n;;\n(defn handle-movement [this]\n  (let [left-pressed?  (.. this -cursors -left -isDown)\n        right-pressed? (.. this -cursors -right -isDown)\n        stopped? (and (not left-pressed?) (not right-pressed?))]\n    (when left-pressed?\n      (move-left this))\n    (when right-pressed?\n      (move-right this))\n    (when stopped?\n      (stop-player this))))\n\n(defn handle-jump\n  \"If the user has pressed either spacebar or up key then we make the player\n  jump. But how do we achieve the 'jump'\n    - 1. We give the player a velocity in Y\n    - 2. We stop the walking animation\n    - 3. Change frame (we will use 2)\"\n  [this]\n  (let [space? (.. this -cursors -space -isDown)\n        up? (.. this -cursors -up -isDown)]\n    (when (or space? up?)\n      (set-player-velocity-y this JUMP_SPEED)\n      (stop-walking this)\n      (set-player-frame this 2))))\n\n(defn update! []\n  (this-as this\n           (handle-movement this)\n           (handle-jump this)))\n\n(set! scene -update update!)\n\n;;\n(def config (clj->js {:type (.-AUTO Phaser)\n                      :width 360\n                      :height 640\n                      :scene scene\n                      :title \"Mario Kong\"\n                      :pixelArt false\n                      :physics {:default \"arcade\"\n                                :arcade {:gravity {:y 1000}\n                                         :debug true}}}))\n\n;; Create a new game\n(defn init-game []\n  (Game. config))\n\n(defn app []\n  (init-game))\n"]}