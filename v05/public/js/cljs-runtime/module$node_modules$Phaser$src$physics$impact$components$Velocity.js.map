{
"version":3,
"file":"module$node_modules$Phaser$src$physics$impact$components$Velocity.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,kEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA8F9HD,MAAAC,QAAA,CAhFeC,CAYXC,aAAcA,QAAS,CAACC,CAAD,CACvB,CACI,IAAAC,IAAAD,EAAA,CAAaA,CAEb,OAAO,KAHX,CAbWF,CA6BXI,aAAcA,QAAS,CAACC,CAAD,CACvB,CACI,IAAAF,IAAAE,EAAA,CAAaA,CAEb,OAAO,KAHX,CA9BWL,CA+CXM,YAAaA,QAAS,CAACJ,CAAD,CAAIG,CAAJ,CACtB,CACcE,IAAAA,EAAV,GAAIF,CAAJ,GAAuBA,CAAvB,CAA2BH,CAA3B,CAEA,KAAAC,IAAAD,EAAA,CAAaA,CACb,KAAAC,IAAAE,EAAA,CAAaA,CAEb,OAAO,KANX,CAhDWL,CAoEXQ,eAAgBA,QAAS,CAACN,CAAD,CAAIG,CAAJ,CACzB,CACcE,IAAAA,EAAV,GAAIF,CAAJ,GAAuBA,CAAvB,CAA2BH,CAA3B,CAEA,KAAAO,OAAAP,EAAA,CAAgBA,CAChB,KAAAO,OAAAJ,EAAA,CAAgBA,CAEhB,OAAO,KANX,CArEWL,CAd+G;",
"sources":["node_modules/Phaser/src/physics/impact/components/Velocity.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$impact$components$Velocity\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * The Impact Velocity component.\r\n * Should be applied as a mixin.\r\n *\r\n * @name Phaser.Physics.Impact.Components.Velocity\r\n * @since 3.0.0\r\n */\r\nvar Velocity = {\r\n\r\n    /**\r\n     * Sets the horizontal velocity of the physics body.\r\n     *\r\n     * @method Phaser.Physics.Impact.Components.Velocity#setVelocityX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal velocity value.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setVelocityX: function (x)\r\n    {\r\n        this.vel.x = x;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the vertical velocity of the physics body.\r\n     *\r\n     * @method Phaser.Physics.Impact.Components.Velocity#setVelocityY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} y - The vertical velocity value.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setVelocityY: function (y)\r\n    {\r\n        this.vel.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal and vertical velocities of the physics body.\r\n     *\r\n     * @method Phaser.Physics.Impact.Components.Velocity#setVelocity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal velocity value.\r\n     * @param {number} [y=x] - The vertical velocity value. If not given, defaults to the horizontal value.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setVelocity: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.vel.x = x;\r\n        this.vel.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the maximum velocity this body can travel at.\r\n     *\r\n     * @method Phaser.Physics.Impact.Components.Velocity#setMaxVelocity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The maximum allowed horizontal velocity.\r\n     * @param {number} [y=x] - The maximum allowed vertical velocity. If not given, defaults to the horizontal value.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setMaxVelocity: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.maxVel.x = x;\r\n        this.maxVel.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Velocity;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Velocity","setVelocityX","x","vel","setVelocityY","y","setVelocity","undefined","setMaxVelocity","maxVel"]
}
