shadow$provide.module$node_modules$Phaser$src$physics$impact$CollisionMap=function(global,require,module,exports){global=require("module$node_modules$Phaser$src$utils$Class");var DefaultDefs=require("module$node_modules$Phaser$src$physics$impact$DefaultDefs");require=new global({initialize:function(tilesize,data){void 0===tilesize&&(tilesize=32);this.tilesize=tilesize;this.data=Array.isArray(data)?data:[];this.width=Array.isArray(data)?data[0].length:0;this.height=Array.isArray(data)?data.length:
0;this.lastSlope=55;this.tiledef=DefaultDefs},trace:function(x,y,vx,vy,objectWidth,objectHeight){var res={collision:{x:!1,y:!1,slope:!1},pos:{x:x+vx,y:y+vy},tile:{x:0,y:0}};if(!this.data)return res;var steps=Math.ceil(Math.max(Math.abs(vx),Math.abs(vy))/this.tilesize);if(1<steps)for(var sx=vx/steps,sy=vy/steps,i=0;i<steps&&(sx||sy)&&(this.step(res,x,y,sx,sy,objectWidth,objectHeight,vx,vy,i),x=res.pos.x,y=res.pos.y,res.collision.x&&(vx=sx=0),res.collision.y&&(vy=sy=0),!res.collision.slope);i++);else this.step(res,
x,y,vx,vy,objectWidth,objectHeight,vx,vy,0);return res},step:function(res,x,y,vx,vy,width,height,rvx,rvy,step){var tilesize=this.tilesize,mapWidth=this.width,mapHeight=this.height;if(vx){var pxOffsetX=0<vx?width:0,tileOffsetX=0>vx?tilesize:0;var tileY=Math.max(Math.floor(y/tilesize),0);var lastTileY=Math.min(Math.ceil((y+height)/tilesize),mapHeight);vx=Math.floor((res.pos.x+pxOffsetX)/tilesize);var prevTileX=Math.floor((x+pxOffsetX)/tilesize);if(0<step||vx===prevTileX||0>prevTileX||prevTileX>=mapWidth)prevTileX=
-1;if(0<=vx&&vx<mapWidth)for(;tileY<lastTileY;tileY++){if(-1!==prevTileX){var t=this.data[tileY][prevTileX];if(1<t&&t<=this.lastSlope&&this.checkDef(res,t,x,y,rvx,rvy,width,height,prevTileX,tileY))break}t=this.data[tileY][vx];if(1===t||t>this.lastSlope||1<t&&this.checkDef(res,t,x,y,rvx,rvy,width,height,vx,tileY)){if(1<t&&t<=this.lastSlope&&res.collision.slope)break;res.collision.x=!0;res.tile.x=t;res.pos.x=vx*tilesize-pxOffsetX+tileOffsetX;x=res.pos.x;rvx=0;break}}}if(vy){pxOffsetX=0<vy?height:0;
vy=0>vy?tilesize:0;vx=Math.max(Math.floor(res.pos.x/tilesize),0);mapWidth=Math.min(Math.ceil((res.pos.x+width)/tilesize),mapWidth);tileY=Math.floor((res.pos.y+pxOffsetX)/tilesize);tileOffsetX=Math.floor((y+pxOffsetX)/tilesize);if(0<step||tileY===tileOffsetX||0>tileOffsetX||tileOffsetX>=mapHeight)tileOffsetX=-1;if(0<=tileY&&tileY<mapHeight)for(;vx<mapWidth&&!(-1!==tileOffsetX&&(t=this.data[tileOffsetX][vx],1<t&&t<=this.lastSlope&&this.checkDef(res,t,x,y,rvx,rvy,width,height,vx,tileOffsetX)));vx++)if(t=
this.data[tileY][vx],1===t||t>this.lastSlope||1<t&&this.checkDef(res,t,x,y,rvx,rvy,width,height,vx,tileY)){if(1<t&&t<=this.lastSlope&&res.collision.slope)break;res.collision.y=!0;res.tile.y=t;res.pos.y=tileY*tilesize-pxOffsetX+vy;break}}},checkDef:function(res,t,x,y,vx,vy,width,height,tileX,tileY){var def=this.tiledef[t];if(!def)return!1;var tilesize=this.tilesize;t=(def[2]-def[0])*tilesize;var lvy=(def[3]-def[1])*tilesize,solid=def[4];width=x+vx+(0>lvy?width:0)-(tileX+def[0])*tilesize;height=y+vy+
(0<t?height:0)-(tileY+def[1])*tilesize;if(0<t*height-lvy*width){if(0>vx*-lvy+vy*t)return solid;tileX=Math.sqrt(t*t+lvy*lvy);tileY=lvy/tileX;tileX=-t/tileX;tilesize=width*tileY+height*tileX;def=tileY*tilesize;tilesize*=tileX;if(def*def+tilesize*tilesize>=vx*vx+vy*vy)return solid||.5>t*(height-vy)-lvy*(width-vx);res.pos.x=x+vx-def;res.pos.y=y+vy-tilesize;res.collision.slope={x:t,y:lvy,nx:tileY,ny:tileX};return!0}return!1}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$physics$impact$CollisionMap.js.map
