{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$body$Body.js",
"lineCount":22,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/body/Body.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$body$Body\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.Body` module contains methods for creating and manipulating body models.\r\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\r\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n\r\n* @class Body\r\n*/\r\n\r\nvar Body = {};\r\n\r\nmodule.exports = Body;\r\n\r\nvar Vertices = require('../geometry/Vertices');\r\nvar Vector = require('../geometry/Vector');\r\nvar Sleeping = require('../core/Sleeping');\r\nvar Common = require('../core/Common');\r\nvar Bounds = require('../geometry/Bounds');\r\nvar Axes = require('../geometry/Axes');\r\n\r\n(function() {\r\n\r\n    Body._inertiaScale = 4;\r\n    Body._nextCollidingGroupId = 1;\r\n    Body._nextNonCollidingGroupId = -1;\r\n    Body._nextCategory = 0x0001;\r\n\r\n    /**\r\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\r\n     * Vertices must be specified in clockwise order.\r\n     * See the properties section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @param {} options\r\n     * @return {body} body\r\n     */\r\n    Body.create = function(options) {\r\n        var defaults = {\r\n            id: Common.nextId(),\r\n            type: 'body',\r\n            label: 'Body',\r\n            gameObject: null,\r\n            parts: [],\r\n            plugin: {},\r\n            angle: 0,\r\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\r\n            position: { x: 0, y: 0 },\r\n            force: { x: 0, y: 0 },\r\n            torque: 0,\r\n            positionImpulse: { x: 0, y: 0 },\r\n            previousPositionImpulse: { x: 0, y: 0 },\r\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\r\n            totalContacts: 0,\r\n            speed: 0,\r\n            angularSpeed: 0,\r\n            velocity: { x: 0, y: 0 },\r\n            angularVelocity: 0,\r\n            isSensor: false,\r\n            isStatic: false,\r\n            isSleeping: false,\r\n            ignoreGravity: false,\r\n            ignorePointer: false,\r\n            motion: 0,\r\n            sleepThreshold: 60,\r\n            density: 0.001,\r\n            restitution: 0,\r\n            friction: 0.1,\r\n            frictionStatic: 0.5,\r\n            frictionAir: 0.01,\r\n            collisionFilter: {\r\n                category: 0x0001,\r\n                mask: 0xFFFFFFFF,\r\n                group: 0\r\n            },\r\n            slop: 0.05,\r\n            timeScale: 1,\r\n            render: {\r\n                visible: true,\r\n                opacity: 1,\r\n                sprite: {\r\n                    xScale: 1,\r\n                    yScale: 1,\r\n                    xOffset: 0,\r\n                    yOffset: 0\r\n                },\r\n                lineWidth: 0\r\n            },\r\n\r\n            events: null,\r\n            bounds: null,\r\n            chamfer: null,\r\n            circleRadius: 0,\r\n            positionPrev: null,\r\n            anglePrev: 0,\r\n            parent: null,\r\n\r\n            axes: null,\r\n            area: 0,\r\n            mass: 0,\r\n            inertia: 0,\r\n\r\n            _original: null\r\n        };\r\n\r\n        var body = Common.extend(defaults, options);\r\n\r\n        _initProperties(body, options);\r\n\r\n        return body;\r\n    };\r\n\r\n    /**\r\n     * Returns the next unique group index for which bodies will collide.\r\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\r\n     * See `body.collisionFilter` for more information.\r\n     * @method nextGroup\r\n     * @param {bool} [isNonColliding=false]\r\n     * @return {Number} Unique group index\r\n     */\r\n    Body.nextGroup = function(isNonColliding) {\r\n        if (isNonColliding)\r\n            return Body._nextNonCollidingGroupId--;\r\n\r\n        return Body._nextCollidingGroupId++;\r\n    };\r\n\r\n    /**\r\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\r\n     * There are 32 available. See `body.collisionFilter` for more information.\r\n     * @method nextCategory\r\n     * @return {Number} Unique category bitfield\r\n     */\r\n    Body.nextCategory = function() {\r\n        Body._nextCategory = Body._nextCategory << 1;\r\n        return Body._nextCategory;\r\n    };\r\n\r\n    /**\r\n     * Initialises body properties.\r\n     * @method _initProperties\r\n     * @private\r\n     * @param {body} body\r\n     * @param {} [options]\r\n     */\r\n    var _initProperties = function(body, options) {\r\n        options = options || {};\r\n\r\n        // init required properties (order is important)\r\n        Body.set(body, {\r\n            bounds: body.bounds || Bounds.create(body.vertices),\r\n            positionPrev: body.positionPrev || Vector.clone(body.position),\r\n            anglePrev: body.anglePrev || body.angle,\r\n            vertices: body.vertices,\r\n            parts: body.parts || [body],\r\n            isStatic: body.isStatic,\r\n            isSleeping: body.isSleeping,\r\n            parent: body.parent || body\r\n        });\r\n\r\n        Vertices.rotate(body.vertices, body.angle, body.position);\r\n        Axes.rotate(body.axes, body.angle);\r\n        Bounds.update(body.bounds, body.vertices, body.velocity);\r\n\r\n        // allow options to override the automatically calculated properties\r\n        Body.set(body, {\r\n            axes: options.axes || body.axes,\r\n            area: options.area || body.area,\r\n            mass: options.mass || body.mass,\r\n            inertia: options.inertia || body.inertia\r\n        });\r\n\r\n        // render properties\r\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\r\n            defaultStrokeStyle = '#000';\r\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\r\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\r\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\r\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\r\n    };\r\n\r\n    /**\r\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\r\n     * Prefer to use the actual setter functions in performance critical situations.\r\n     * @method set\r\n     * @param {body} body\r\n     * @param {} settings A property name (or map of properties and values) to set on the body.\r\n     * @param {} value The value to set if `settings` is a single property name.\r\n     */\r\n    Body.set = function(body, settings, value) {\r\n        var property;\r\n\r\n        if (typeof settings === 'string') {\r\n            property = settings;\r\n            settings = {};\r\n            settings[property] = value;\r\n        }\r\n\r\n        for (property in settings) {\r\n\r\n            if (!settings.hasOwnProperty(property))\r\n                continue;\r\n\r\n            value = settings[property];\r\n            switch (property) {\r\n\r\n            case 'isStatic':\r\n                Body.setStatic(body, value);\r\n                break;\r\n            case 'isSleeping':\r\n                Sleeping.set(body, value);\r\n                break;\r\n            case 'mass':\r\n                Body.setMass(body, value);\r\n                break;\r\n            case 'density':\r\n                Body.setDensity(body, value);\r\n                break;\r\n            case 'inertia':\r\n                Body.setInertia(body, value);\r\n                break;\r\n            case 'vertices':\r\n                Body.setVertices(body, value);\r\n                break;\r\n            case 'position':\r\n                Body.setPosition(body, value);\r\n                break;\r\n            case 'angle':\r\n                Body.setAngle(body, value);\r\n                break;\r\n            case 'velocity':\r\n                Body.setVelocity(body, value);\r\n                break;\r\n            case 'angularVelocity':\r\n                Body.setAngularVelocity(body, value);\r\n                break;\r\n            case 'parts':\r\n                Body.setParts(body, value);\r\n                break;\r\n            default:\r\n                body[property] = value;\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\r\n     * @method setStatic\r\n     * @param {body} body\r\n     * @param {bool} isStatic\r\n     */\r\n    Body.setStatic = function(body, isStatic) {\r\n        for (var i = 0; i < body.parts.length; i++) {\r\n            var part = body.parts[i];\r\n            part.isStatic = isStatic;\r\n\r\n            if (isStatic) {\r\n                part._original = {\r\n                    restitution: part.restitution,\r\n                    friction: part.friction,\r\n                    mass: part.mass,\r\n                    inertia: part.inertia,\r\n                    density: part.density,\r\n                    inverseMass: part.inverseMass,\r\n                    inverseInertia: part.inverseInertia\r\n                };\r\n\r\n                part.restitution = 0;\r\n                part.friction = 1;\r\n                part.mass = part.inertia = part.density = Infinity;\r\n                part.inverseMass = part.inverseInertia = 0;\r\n\r\n                part.positionPrev.x = part.position.x;\r\n                part.positionPrev.y = part.position.y;\r\n                part.anglePrev = part.angle;\r\n                part.angularVelocity = 0;\r\n                part.speed = 0;\r\n                part.angularSpeed = 0;\r\n                part.motion = 0;\r\n            } else if (part._original) {\r\n                part.restitution = part._original.restitution;\r\n                part.friction = part._original.friction;\r\n                part.mass = part._original.mass;\r\n                part.inertia = part._original.inertia;\r\n                part.density = part._original.density;\r\n                part.inverseMass = part._original.inverseMass;\r\n                part.inverseInertia = part._original.inverseInertia;\r\n\r\n                part._original = null;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\r\n     * @method setMass\r\n     * @param {body} body\r\n     * @param {number} mass\r\n     */\r\n    Body.setMass = function(body, mass) {\r\n        var moment = body.inertia / (body.mass / 6);\r\n        body.inertia = moment * (mass / 6);\r\n        body.inverseInertia = 1 / body.inertia;\r\n\r\n        body.mass = mass;\r\n        body.inverseMass = 1 / body.mass;\r\n        body.density = body.mass / body.area;\r\n    };\r\n\r\n    /**\r\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\r\n     * @method setDensity\r\n     * @param {body} body\r\n     * @param {number} density\r\n     */\r\n    Body.setDensity = function(body, density) {\r\n        Body.setMass(body, density * body.area);\r\n        body.density = density;\r\n    };\r\n\r\n    /**\r\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \r\n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\r\n     * @method setInertia\r\n     * @param {body} body\r\n     * @param {number} inertia\r\n     */\r\n    Body.setInertia = function(body, inertia) {\r\n        body.inertia = inertia;\r\n        body.inverseInertia = 1 / body.inertia;\r\n    };\r\n\r\n    /**\r\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\r\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\r\n     * They are then automatically translated to world space based on `body.position`.\r\n     *\r\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\r\n     * Vertices must form a convex hull, concave hulls are not supported.\r\n     *\r\n     * @method setVertices\r\n     * @param {body} body\r\n     * @param {vector[]} vertices\r\n     */\r\n    Body.setVertices = function(body, vertices) {\r\n        // change vertices\r\n        if (vertices[0].body === body) {\r\n            body.vertices = vertices;\r\n        } else {\r\n            body.vertices = Vertices.create(vertices, body);\r\n        }\r\n\r\n        // update properties\r\n        body.axes = Axes.fromVertices(body.vertices);\r\n        body.area = Vertices.area(body.vertices);\r\n        Body.setMass(body, body.density * body.area);\r\n\r\n        // orient vertices around the centre of mass at origin (0, 0)\r\n        var centre = Vertices.centre(body.vertices);\r\n        Vertices.translate(body.vertices, centre, -1);\r\n\r\n        // update inertia while vertices are at origin (0, 0)\r\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\r\n\r\n        // update geometry\r\n        Vertices.translate(body.vertices, body.position);\r\n        Bounds.update(body.bounds, body.vertices, body.velocity);\r\n    };\r\n\r\n    /**\r\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\r\n     * Each part will have its parent set to `body`.\r\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\r\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\r\n     * @method setParts\r\n     * @param {body} body\r\n     * @param [body] parts\r\n     * @param {bool} [autoHull=true]\r\n     */\r\n    Body.setParts = function(body, parts, autoHull) {\r\n        var i;\r\n\r\n        // add all the parts, ensuring that the first part is always the parent body\r\n        parts = parts.slice(0);\r\n        body.parts.length = 0;\r\n        body.parts.push(body);\r\n        body.parent = body;\r\n\r\n        for (i = 0; i < parts.length; i++) {\r\n            var part = parts[i];\r\n            if (part !== body) {\r\n                part.parent = body;\r\n                body.parts.push(part);\r\n            }\r\n        }\r\n\r\n        if (body.parts.length === 1)\r\n            return;\r\n\r\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\r\n\r\n        // find the convex hull of all parts to set on the parent body\r\n        if (autoHull) {\r\n            var vertices = [];\r\n            for (i = 0; i < parts.length; i++) {\r\n                vertices = vertices.concat(parts[i].vertices);\r\n            }\r\n\r\n            Vertices.clockwiseSort(vertices);\r\n\r\n            var hull = Vertices.hull(vertices),\r\n                hullCentre = Vertices.centre(hull);\r\n\r\n            Body.setVertices(body, hull);\r\n            Vertices.translate(body.vertices, hullCentre);\r\n        }\r\n\r\n        // sum the properties of all compound parts of the parent body\r\n        var total = Body._totalProperties(body);\r\n\r\n        body.area = total.area;\r\n        body.parent = body;\r\n        body.position.x = total.centre.x;\r\n        body.position.y = total.centre.y;\r\n        body.positionPrev.x = total.centre.x;\r\n        body.positionPrev.y = total.centre.y;\r\n\r\n        Body.setMass(body, total.mass);\r\n        Body.setInertia(body, total.inertia);\r\n        Body.setPosition(body, total.centre);\r\n    };\r\n\r\n    /**\r\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\r\n     * @method setPosition\r\n     * @param {body} body\r\n     * @param {vector} position\r\n     */\r\n    Body.setPosition = function(body, position) {\r\n        var delta = Vector.sub(position, body.position);\r\n        body.positionPrev.x += delta.x;\r\n        body.positionPrev.y += delta.y;\r\n\r\n        for (var i = 0; i < body.parts.length; i++) {\r\n            var part = body.parts[i];\r\n            part.position.x += delta.x;\r\n            part.position.y += delta.y;\r\n            Vertices.translate(part.vertices, delta);\r\n            Bounds.update(part.bounds, part.vertices, body.velocity);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\r\n     * @method setAngle\r\n     * @param {body} body\r\n     * @param {number} angle\r\n     */\r\n    Body.setAngle = function(body, angle) {\r\n        var delta = angle - body.angle;\r\n        body.anglePrev += delta;\r\n\r\n        for (var i = 0; i < body.parts.length; i++) {\r\n            var part = body.parts[i];\r\n            part.angle += delta;\r\n            Vertices.rotate(part.vertices, delta, body.position);\r\n            Axes.rotate(part.axes, delta);\r\n            Bounds.update(part.bounds, part.vertices, body.velocity);\r\n            if (i > 0) {\r\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\r\n     * @method setVelocity\r\n     * @param {body} body\r\n     * @param {vector} velocity\r\n     */\r\n    Body.setVelocity = function(body, velocity) {\r\n        body.positionPrev.x = body.position.x - velocity.x;\r\n        body.positionPrev.y = body.position.y - velocity.y;\r\n        body.velocity.x = velocity.x;\r\n        body.velocity.y = velocity.y;\r\n        body.speed = Vector.magnitude(body.velocity);\r\n    };\r\n\r\n    /**\r\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\r\n     * @method setAngularVelocity\r\n     * @param {body} body\r\n     * @param {number} velocity\r\n     */\r\n    Body.setAngularVelocity = function(body, velocity) {\r\n        body.anglePrev = body.angle - velocity;\r\n        body.angularVelocity = velocity;\r\n        body.angularSpeed = Math.abs(body.angularVelocity);\r\n    };\r\n\r\n    /**\r\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\r\n     * @method translate\r\n     * @param {body} body\r\n     * @param {vector} translation\r\n     */\r\n    Body.translate = function(body, translation) {\r\n        Body.setPosition(body, Vector.add(body.position, translation));\r\n    };\r\n\r\n    /**\r\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\r\n     * @method rotate\r\n     * @param {body} body\r\n     * @param {number} rotation\r\n     * @param {vector} [point]\r\n     */\r\n    Body.rotate = function(body, rotation, point) {\r\n        if (!point) {\r\n            Body.setAngle(body, body.angle + rotation);\r\n        } else {\r\n            var cos = Math.cos(rotation),\r\n                sin = Math.sin(rotation),\r\n                dx = body.position.x - point.x,\r\n                dy = body.position.y - point.y;\r\n                \r\n            Body.setPosition(body, {\r\n                x: point.x + (dx * cos - dy * sin),\r\n                y: point.y + (dx * sin + dy * cos)\r\n            });\r\n\r\n            Body.setAngle(body, body.angle + rotation);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\r\n     * @method scale\r\n     * @param {body} body\r\n     * @param {number} scaleX\r\n     * @param {number} scaleY\r\n     * @param {vector} [point]\r\n     */\r\n    Body.scale = function(body, scaleX, scaleY, point) {\r\n        var totalArea = 0,\r\n            totalInertia = 0;\r\n\r\n        point = point || body.position;\r\n\r\n        for (var i = 0; i < body.parts.length; i++) {\r\n            var part = body.parts[i];\r\n\r\n            // scale vertices\r\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\r\n\r\n            // update properties\r\n            part.axes = Axes.fromVertices(part.vertices);\r\n            part.area = Vertices.area(part.vertices);\r\n            Body.setMass(part, body.density * part.area);\r\n\r\n            // update inertia (requires vertices to be at origin)\r\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\r\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\r\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\r\n\r\n            if (i > 0) {\r\n                totalArea += part.area;\r\n                totalInertia += part.inertia;\r\n            }\r\n\r\n            // scale position\r\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\r\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\r\n\r\n            // update bounds\r\n            Bounds.update(part.bounds, part.vertices, body.velocity);\r\n        }\r\n\r\n        // handle parent body\r\n        if (body.parts.length > 1) {\r\n            body.area = totalArea;\r\n\r\n            if (!body.isStatic) {\r\n                Body.setMass(body, body.density * totalArea);\r\n                Body.setInertia(body, totalInertia);\r\n            }\r\n        }\r\n\r\n        // handle circles\r\n        if (body.circleRadius) { \r\n            if (scaleX === scaleY) {\r\n                body.circleRadius *= scaleX;\r\n            } else {\r\n                // body is no longer a circle\r\n                body.circleRadius = null;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\r\n     * @method update\r\n     * @param {body} body\r\n     * @param {number} deltaTime\r\n     * @param {number} timeScale\r\n     * @param {number} correction\r\n     */\r\n    Body.update = function(body, deltaTime, timeScale, correction) {\r\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\r\n\r\n        // from the previous step\r\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\r\n            velocityPrevX = body.position.x - body.positionPrev.x,\r\n            velocityPrevY = body.position.y - body.positionPrev.y;\r\n\r\n        // update velocity with Verlet integration\r\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\r\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\r\n\r\n        body.positionPrev.x = body.position.x;\r\n        body.positionPrev.y = body.position.y;\r\n        body.position.x += body.velocity.x;\r\n        body.position.y += body.velocity.y;\r\n\r\n        // update angular velocity with Verlet integration\r\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\r\n        body.anglePrev = body.angle;\r\n        body.angle += body.angularVelocity;\r\n\r\n        // track speed and acceleration\r\n        body.speed = Vector.magnitude(body.velocity);\r\n        body.angularSpeed = Math.abs(body.angularVelocity);\r\n\r\n        // transform the body geometry\r\n        for (var i = 0; i < body.parts.length; i++) {\r\n            var part = body.parts[i];\r\n\r\n            Vertices.translate(part.vertices, body.velocity);\r\n            \r\n            if (i > 0) {\r\n                part.position.x += body.velocity.x;\r\n                part.position.y += body.velocity.y;\r\n            }\r\n\r\n            if (body.angularVelocity !== 0) {\r\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\r\n                Axes.rotate(part.axes, body.angularVelocity);\r\n                if (i > 0) {\r\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\r\n                }\r\n            }\r\n\r\n            Bounds.update(part.bounds, part.vertices, body.velocity);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Applies a force to a body from a given world-space position, including resulting torque.\r\n     * @method applyForce\r\n     * @param {body} body\r\n     * @param {vector} position\r\n     * @param {vector} force\r\n     */\r\n    Body.applyForce = function(body, position, force) {\r\n        body.force.x += force.x;\r\n        body.force.y += force.y;\r\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\r\n        body.torque += offset.x * force.y - offset.y * force.x;\r\n    };\r\n\r\n    /**\r\n     * Returns the sums of the properties of all compound parts of the parent body.\r\n     * @method _totalProperties\r\n     * @private\r\n     * @param {body} body\r\n     * @return {}\r\n     */\r\n    Body._totalProperties = function(body) {\r\n        // from equations at:\r\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\r\n        // http://output.to/sideway/default.asp?qno=121100087\r\n\r\n        var properties = {\r\n            mass: 0,\r\n            area: 0,\r\n            inertia: 0,\r\n            centre: { x: 0, y: 0 }\r\n        };\r\n\r\n        // sum the properties of all compound parts of the parent body\r\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\r\n            var part = body.parts[i],\r\n                mass = part.mass !== Infinity ? part.mass : 1;\r\n\r\n            properties.mass += mass;\r\n            properties.area += part.area;\r\n            properties.inertia += part.inertia;\r\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\r\n        }\r\n\r\n        properties.centre = Vector.div(properties.centre, properties.mass);\r\n\r\n        return properties;\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Events Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n    * Fired when a body starts sleeping (where `this` is the body).\r\n    *\r\n    * @event sleepStart\r\n    * @this {body} The body that has started sleeping\r\n    * @param {} event An event object\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired when a body ends sleeping (where `this` is the body).\r\n    *\r\n    * @event sleepEnd\r\n    * @this {body} The body that has ended sleeping\r\n    * @param {} event An event object\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\r\n     *\r\n     * @property id\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * A `String` denoting the type of object.\r\n     *\r\n     * @property type\r\n     * @type string\r\n     * @default \"body\"\r\n     * @readOnly\r\n     */\r\n\r\n    /**\r\n     * An arbitrary `String` name to help the user identify and manage bodies.\r\n     *\r\n     * @property label\r\n     * @type string\r\n     * @default \"Body\"\r\n     */\r\n\r\n    /**\r\n     * An array of bodies that make up this body. \r\n     * The first body in the array must always be a self reference to the current body instance.\r\n     * All bodies in the `parts` array together form a single rigid compound body.\r\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\r\n     * Parts themselves should never be added to a `World`, only the parent body should be.\r\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\r\n     *\r\n     * @property parts\r\n     * @type body[]\r\n     */\r\n\r\n    /**\r\n     * An object reserved for storing plugin-specific properties.\r\n     *\r\n     * @property plugin\r\n     * @type {}\r\n     */\r\n\r\n    /**\r\n     * A self reference if the body is _not_ a part of another body.\r\n     * Otherwise this is a reference to the body that this is a part of.\r\n     * See `body.parts`.\r\n     *\r\n     * @property parent\r\n     * @type body\r\n     */\r\n\r\n    /**\r\n     * A `Number` specifying the angle of the body, in radians.\r\n     *\r\n     * @property angle\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\r\n     * These should be provided about the origin `(0, 0)`. E.g.\r\n     *\r\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\r\n     *\r\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\r\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \r\n     *\r\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\r\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\r\n     *\r\n     * @property vertices\r\n     * @type vector[]\r\n     */\r\n\r\n    /**\r\n     * A `Vector` that specifies the current world-space position of the body.\r\n     *\r\n     * @property position\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\r\n     *\r\n     * @property force\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\r\n     *\r\n     * @property torque\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\r\n     *\r\n     * @readOnly\r\n     * @property speed\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\r\n     *\r\n     * @readOnly\r\n     * @property angularSpeed\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \r\n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\r\n     *\r\n     * @readOnly\r\n     * @property velocity\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \r\n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\r\n     *\r\n     * @readOnly\r\n     * @property angularVelocity\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\r\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\r\n     *\r\n     * @property isStatic\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\r\n     *\r\n     * @property isSensor\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\r\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\r\n     *\r\n     * @property isSleeping\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\r\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\r\n     *\r\n     * @readOnly\r\n     * @property motion\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\r\n     *\r\n     * @property sleepThreshold\r\n     * @type number\r\n     * @default 60\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the density of the body, that is its mass per unit area.\r\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\r\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\r\n     *\r\n     * @property density\r\n     * @type number\r\n     * @default 0.001\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\r\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\r\n     *\r\n     * @property mass\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\r\n     * If you modify this value, you must also modify the `body.mass` property.\r\n     *\r\n     * @property inverseMass\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\r\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\r\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\r\n     *\r\n     * @property inertia\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\r\n     * If you modify this value, you must also modify the `body.inertia` property.\r\n     *\r\n     * @property inverseInertia\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\r\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \r\n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\r\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\r\n     *\r\n     *     Math.max(bodyA.restitution, bodyB.restitution)\r\n     *\r\n     * @property restitution\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\r\n     * A value of `0` means that the body may slide indefinitely.\r\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\r\n     *\r\n     * The effects of the value may be non-linear. \r\n     * High values may be unstable depending on the body.\r\n     * The engine uses a Coulomb friction model including static and kinetic friction.\r\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\r\n     *\r\n     *     Math.min(bodyA.friction, bodyB.friction)\r\n     *\r\n     * @property friction\r\n     * @type number\r\n     * @default 0.1\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \r\n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\r\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\r\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\r\n     *\r\n     * @property frictionStatic\r\n     * @type number\r\n     * @default 0.5\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the air friction of the body (air resistance). \r\n     * A value of `0` means the body will never slow as it moves through space.\r\n     * The higher the value, the faster a body slows when moving through space.\r\n     * The effects of the value are non-linear. \r\n     *\r\n     * @property frictionAir\r\n     * @type number\r\n     * @default 0.01\r\n     */\r\n\r\n    /**\r\n     * An `Object` that specifies the collision filtering properties of this body.\r\n     *\r\n     * Collisions between two bodies will obey the following rules:\r\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\r\n     *   they will always collide if the value is positive, and they will never collide\r\n     *   if the value is negative.\r\n     * - If the two bodies have different values of `collisionFilter.group` or if one\r\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\r\n     *\r\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\r\n     * value is used as a bit field and the category should have only one bit set, meaning that\r\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\r\n     * different collision categories available.\r\n     *\r\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\r\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\r\n     *\r\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\r\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\r\n     * are both true.\r\n     *\r\n     * @property collisionFilter\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * An Integer `Number`, that specifies the collision group this body belongs to.\r\n     * See `body.collisionFilter` for more information.\r\n     *\r\n     * @property collisionFilter.group\r\n     * @type object\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A bit field that specifies the collision category this body belongs to.\r\n     * The category value should have only one bit set, for example `0x0001`.\r\n     * This means there are up to 32 unique collision categories available.\r\n     * See `body.collisionFilter` for more information.\r\n     *\r\n     * @property collisionFilter.category\r\n     * @type object\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * A bit mask that specifies the collision categories this body may collide with.\r\n     * See `body.collisionFilter` for more information.\r\n     *\r\n     * @property collisionFilter.mask\r\n     * @type object\r\n     * @default -1\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\r\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\r\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\r\n     *\r\n     * @property slop\r\n     * @type number\r\n     * @default 0.05\r\n     */\r\n\r\n    /**\r\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\r\n     *\r\n     * @property timeScale\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\r\n     *\r\n     * @property render\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * A flag that indicates if the body should be rendered.\r\n     *\r\n     * @property render.visible\r\n     * @type boolean\r\n     * @default true\r\n     */\r\n\r\n    /**\r\n     * Sets the opacity to use when rendering.\r\n     *\r\n     * @property render.opacity\r\n     * @type number\r\n     * @default 1\r\n    */\r\n\r\n    /**\r\n     * An `Object` that defines the sprite properties to use when rendering, if any.\r\n     *\r\n     * @property render.sprite\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\r\n     *\r\n     * @property render.sprite.texture\r\n     * @type string\r\n     */\r\n     \r\n    /**\r\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\r\n     *\r\n     * @property render.sprite.xScale\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\r\n     *\r\n     * @property render.sprite.yScale\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n     /**\r\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\r\n      *\r\n      * @property render.sprite.xOffset\r\n      * @type number\r\n      * @default 0\r\n      */\r\n\r\n     /**\r\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\r\n      *\r\n      * @property render.sprite.yOffset\r\n      * @type number\r\n      * @default 0\r\n      */\r\n\r\n    /**\r\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\r\n     * A value of `0` means no outline will be rendered.\r\n     *\r\n     * @property render.lineWidth\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\r\n     * It is the same as when using a canvas, so it accepts CSS style property values.\r\n     *\r\n     * @property render.fillStyle\r\n     * @type string\r\n     * @default a random colour\r\n     */\r\n\r\n    /**\r\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\r\n     * It is the same as when using a canvas, so it accepts CSS style property values.\r\n     *\r\n     * @property render.strokeStyle\r\n     * @type string\r\n     * @default a random colour\r\n     */\r\n\r\n    /**\r\n     * An array of unique axis vectors (edge normals) used for collision detection.\r\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\r\n     * They are constantly updated by `Body.update` during the simulation.\r\n     *\r\n     * @property axes\r\n     * @type vector[]\r\n     */\r\n     \r\n    /**\r\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\r\n     *\r\n     * @property area\r\n     * @type string\r\n     * @default \r\n     */\r\n\r\n    /**\r\n     * A `Bounds` object that defines the AABB region for the body.\r\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\r\n     *\r\n     * @property bounds\r\n     * @type bounds\r\n     */\r\n\r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Body","Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","create","Body.create","options","defaults","id","nextId","type","label","gameObject","parts","plugin","angle","vertices","fromPath","position","x","y","force","torque","positionImpulse","previousPositionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isStatic","isSleeping","ignoreGravity","ignorePointer","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","events","bounds","chamfer","circleRadius","positionPrev","anglePrev","parent","axes","area","mass","inertia","_original","body","extend","set","clone","rotate","update","defaultFillStyle","choose","fillStyle","strokeStyle","defaultStrokeStyle","min","max","nextGroup","Body.nextGroup","isNonColliding","nextCategory","Body.nextCategory","Body.set","settings","value","property","hasOwnProperty","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","Body.setStatic","i","length","part","inverseMass","inverseInertia","Infinity","Body.setMass","Body.setDensity","Body.setInertia","Body.setVertices","fromVertices","centre","translate","Body.setParts","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","Body.setPosition","delta","sub","Body.setAngle","rotateAbout","Body.setVelocity","magnitude","Body.setAngularVelocity","Math","abs","Body.translate","translation","add","Body.rotate","rotation","point","cos","sin","dx","dy","scale","Body.scale","scaleX","scaleY","totalArea","totalInertia","Body.update","deltaTime","correction","deltaTimeSquared","pow","velocityPrevY","applyForce","Body.applyForce","Body._totalProperties","properties","mult","div"]
}
