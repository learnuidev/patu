{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$SetCollisionFromCollisionGroup.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,kFAAA,CAAsG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9I,IAAIC,iBAAmBH,OAAA,CAAQ,qEAAR,CAAvB,CACII,qBAAuBJ,OAAA,CAAQ,yEAAR,CA8C3BC,OAAAC,QAAA,CA9BqCG,QAAS,CAACC,QAAD,CAAWC,gBAAX,CAA6BC,KAA7B,CAC9C,CACqBC,IAAAA,EAAjB,GAAIH,QAAJ,GAA8BA,QAA9B,CAAyC,CAAA,CAAzC,CACyBG,KAAAA,EAAzB,GAAIF,gBAAJ,GAAsCA,gBAAtC,CAAyD,CAAA,CAAzD,CAEA,KAAK,IAAIG,GAAK,CAAd,CAAiBA,EAAjB,CAAsBF,KAAAG,OAAtB,CAAoCD,EAAA,EAApC,CAEI,IAAK,IAAIE;AAAK,CAAd,CAAiBA,EAAjB,CAAsBJ,KAAAK,MAAtB,CAAmCD,EAAA,EAAnC,CACA,CACI,IAAIE,KAAON,KAAAO,KAAA,CAAWL,EAAX,CAAA,CAAeE,EAAf,CAEX,IAAKE,IAAL,CAAA,CAEA,IAAIE,eAAiBF,IAAAG,kBAAA,EAIjBD,eAAJ,EAAsBA,cAAAE,QAAtB,EAAgF,CAAhF,CAAgDF,cAAAE,QAAAC,OAAhD,EAEIhB,gBAAA,CAAiBW,IAAjB,CAAuBR,QAAvB,CARJ,CAHJ,CAgBAC,gBAAJ,EAEIH,oBAAA,CAAqB,CAArB,CAAwB,CAAxB,CAA2BI,KAAAK,MAA3B,CAAwCL,KAAAG,OAAxC,CAAsDH,KAAtD,CAzBR,CAzB8I;",
"sources":["node_modules/Phaser/src/tilemaps/components/SetCollisionFromCollisionGroup.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$SetCollisionFromCollisionGroup\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar SetTileCollision = require('./SetTileCollision');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\n\r\n/**\r\n * Sets collision on the tiles within a layer by checking each tile's collision group data\r\n * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n * a tile's collision group, the tile's colliding information will be set. The `collides` parameter\r\n * controls if collision will be enabled (true) or disabled (false).\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionFromCollisionGroup\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar SetCollisionFromCollisionGroup = function (collides, recalculateFaces, layer)\r\n{\r\n    if (collides === undefined) { collides = true; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n\r\n    for (var ty = 0; ty < layer.height; ty++)\r\n    {\r\n        for (var tx = 0; tx < layer.width; tx++)\r\n        {\r\n            var tile = layer.data[ty][tx];\r\n\r\n            if (!tile) { continue; }\r\n\r\n            var collisionGroup = tile.getCollisionGroup();\r\n\r\n            // It's possible in Tiled to have a collision group without any shapes, e.g. create a\r\n            // shape and then delete the shape.\r\n            if (collisionGroup && collisionGroup.objects && collisionGroup.objects.length > 0)\r\n            {\r\n                SetTileCollision(tile, collides);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = SetCollisionFromCollisionGroup;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","SetTileCollision","CalculateFacesWithin","SetCollisionFromCollisionGroup","collides","recalculateFaces","layer","undefined","ty","height","tx","width","tile","data","collisionGroup","getCollisionGroup","objects","length"]
}
