{
"version":3,
"file":"module$node_modules$Phaser$src$boot$CreateRenderer.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,mDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO/G,IAAIC,oBAAsBH,OAAA,CAAQ,mEAAR,CAA1B,CACII,WAAaJ,OAAA,CAAQ,0DAAR,CADjB,CAEIK,MAAQL,OAAA,CAAQ,sCAAR,CAFZ,CAGIM,SAAWN,OAAA,CAAQ,gDAAR,CA+HfC,OAAAC,QAAA,CAnHqBK,QAAS,CAACC,IAAD,CAC9B,CACI,IAAIC,OAASD,IAAAC,OAKb,IAAIA,MAAAC,WAAJ,GAA0BL,KAAAM,SAA1B,CAEI,GAAIF,MAAAC,WAAJ;AAA0BL,KAAAO,OAA1B,EAA2CH,MAAAC,WAA3C,GAAiEL,KAAAO,OAAjE,EAAiF,CAACN,QAAAO,MAAlF,CAEI,GAAIP,QAAAQ,OAAJ,CAGIL,MAAAC,WAAA,CAAoBL,KAAAO,OAHxB,KAOI,MAAUG,MAAJ,CAAU,kDAAV,CAAN,CATR,IAeIN,OAAAC,WAAA,CAAoBL,KAAAW,MAKvBP,OAAAQ,UAAL,EAEIb,UAAAc,iBAAA,EAMAV,KAAAM,OAAA,CAFAL,MAAAK,OAAJ,CAEkBL,MAAAK,OAFlB,CAMkBV,UAAAe,OAAA,CAAkBX,IAAlB,CAAwBC,MAAAW,MAAxB,CAAuCX,MAAAY,WAAvC,CAA0DZ,MAAAa,OAA1D,CAA0Eb,MAAAY,WAA1E,CAA6FZ,MAAAC,WAA7F,CAIdD,OAAAc,YAAJ,GAEIf,IAAAM,OAAAU,MAFJ,CAEwBf,MAAAc,YAFxB,CAMKd,OAAAQ,UAAL,EAEId,mBAAAsB,SAAA,CAA6BjB,IAAAM,OAA7B,CAIJN;IAAAM,OAAAU,MAAAJ,MAAA,CAA0BM,CAACjB,MAAAW,MAADM,CAAgBjB,MAAAkB,KAAhBD,UAAA,EAA1B,CAAoE,IACpElB,KAAAM,OAAAU,MAAAF,OAAA,CAA2BI,CAACjB,MAAAa,OAADI,CAAiBjB,MAAAkB,KAAjBD,UAAA,EAA3B,CAAsE,IAEtE,IAAIjB,MAAAC,WAAJ,GAA0BL,KAAAM,SAA1B,CAAA,CASA,GAAI,MAAOiB,eAAX,EAA6B,MAAOC,gBAApC,CACA,CACI,IAAAC,eAAiB9B,OAAA,CAAQ,+DAAR,CACjB,KAAA+B,cAAgB/B,OAAA,CAAQ,6DAAR,CAGZS,OAAAC,WAAJ,GAA0BL,KAAAW,MAA1B,EAEIR,IAAAwB,SAGA,CAHgB,IAAID,aAAJ,CAAkBvB,IAAlB,CAGhB,CAAAA,IAAAyB,QAAA,CAAe,IALnB,GASIzB,IAAAwB,SACA;AADgB,IAAIF,cAAJ,CAAmBtB,IAAnB,CAChB,CAAAA,IAAAyB,QAAA,CAAezB,IAAAwB,SAAAE,YAVnB,CALJ,CAmBI,MAAON,eAAX,EAA6B,CAAC,MAAOC,gBAArC,GAEIE,aAQA,CARgB/B,OAAA,CAAQ,6DAAR,CAQhB,CALAS,MAAAC,WAKA,CALoBL,KAAAW,MAKpB,CAHAR,IAAAwB,SAGA,CAHgB,IAAID,aAAJ,CAAkBvB,IAAlB,CAGhB,CAAAA,IAAAyB,QAAA,CAAe,IAVnB,CAaI,EAAC,MAAOL,eAAZ,EAA8B,MAAOC,gBAArC,GAEIC,cAOA,CAPiB9B,OAAA,CAAQ,+DAAR,CAOjB,CAJAS,MAAAC,WAIA,CAJoBL,KAAAO,OAIpB,CAFAJ,IAAAwB,SAEA,CAFgB,IAAIF,cAAJ,CAAmBtB,IAAnB,CAEhB,CAAAA,IAAAyB,QAAA;AAAezB,IAAAwB,SAAAE,YATnB,CA1CA,CA3DJ,CAvB+G;",
"sources":["node_modules/Phaser/src/boot/CreateRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$boot$CreateRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar CanvasInterpolation = require('../display/canvas/CanvasInterpolation');\r\nvar CanvasPool = require('../display/canvas/CanvasPool');\r\nvar CONST = require('../const');\r\nvar Features = require('../device/Features');\r\n\r\n/**\r\n * Called automatically by Phaser.Game and responsible for creating the renderer it will use.\r\n *\r\n * Relies upon two webpack global flags to be defined: `WEBGL_RENDERER` and `CANVAS_RENDERER` during build time, but not at run-time.\r\n *\r\n * @function Phaser.Boot.CreateRenderer\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - The Phaser.Game instance on which the renderer will be set.\r\n */\r\nvar CreateRenderer = function (game)\r\n{\r\n    var config = game.config;\r\n\r\n    //  Game either requested Canvas,\r\n    //  or requested AUTO or WEBGL but the browser doesn't support it, so fall back to Canvas\r\n\r\n    if (config.renderType !== CONST.HEADLESS)\r\n    {\r\n        if (config.renderType === CONST.CANVAS || (config.renderType !== CONST.CANVAS && !Features.webGL))\r\n        {\r\n            if (Features.canvas)\r\n            {\r\n                //  They requested Canvas and their browser supports it\r\n                config.renderType = CONST.CANVAS;\r\n            }\r\n            else\r\n            {\r\n                throw new Error('Cannot create Canvas or WebGL context, aborting.');\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  Game requested WebGL and browser says it supports it\r\n            config.renderType = CONST.WEBGL;\r\n        }\r\n    }\r\n\r\n    //  Pixel Art mode?\r\n    if (!config.antialias)\r\n    {\r\n        CanvasPool.disableSmoothing();\r\n    }\r\n\r\n    //  Does the game config provide its own canvas element to use?\r\n    if (config.canvas)\r\n    {\r\n        game.canvas = config.canvas;\r\n    }\r\n    else\r\n    {\r\n        game.canvas = CanvasPool.create(game, config.width * config.resolution, config.height * config.resolution, config.renderType);\r\n    }\r\n\r\n    //  Does the game config provide some canvas css styles to use?\r\n    if (config.canvasStyle)\r\n    {\r\n        game.canvas.style = config.canvasStyle;\r\n    }\r\n\r\n    //  Pixel Art mode?\r\n    if (!config.antialias)\r\n    {\r\n        CanvasInterpolation.setCrisp(game.canvas);\r\n    }\r\n\r\n    //  Zoomed?\r\n    game.canvas.style.width = (config.width * config.zoom).toString() + 'px';\r\n    game.canvas.style.height = (config.height * config.zoom).toString() + 'px';\r\n\r\n    if (config.renderType === CONST.HEADLESS)\r\n    {\r\n        //  Nothing more to do here\r\n        return;\r\n    }\r\n\r\n    var CanvasRenderer;\r\n    var WebGLRenderer;\r\n\r\n    if (typeof WEBGL_RENDERER && typeof CANVAS_RENDERER)\r\n    {\r\n        CanvasRenderer = require('../renderer/canvas/CanvasRenderer');\r\n        WebGLRenderer = require('../renderer/webgl/WebGLRenderer');\r\n\r\n        //  Let the config pick the renderer type, as both are included\r\n        if (config.renderType === CONST.WEBGL)\r\n        {\r\n            game.renderer = new WebGLRenderer(game);\r\n\r\n            //  The WebGL Renderer sets this value during its init, not on construction\r\n            game.context = null;\r\n        }\r\n        else\r\n        {\r\n            game.renderer = new CanvasRenderer(game);\r\n            game.context = game.renderer.gameContext;\r\n        }\r\n    }\r\n\r\n    if (typeof WEBGL_RENDERER && !typeof CANVAS_RENDERER)\r\n    {\r\n        WebGLRenderer = require('../renderer/webgl/WebGLRenderer');\r\n\r\n        //  Force the type to WebGL, regardless what was requested\r\n        config.renderType = CONST.WEBGL;\r\n\r\n        game.renderer = new WebGLRenderer(game);\r\n\r\n        //  The WebGL Renderer sets this value during its init, not on construction\r\n        game.context = null;\r\n    }\r\n\r\n    if (!typeof WEBGL_RENDERER && typeof CANVAS_RENDERER)\r\n    {\r\n        CanvasRenderer = require('../renderer/canvas/CanvasRenderer');\r\n\r\n        //  Force the type to Canvas, regardless what was requested\r\n        config.renderType = CONST.CANVAS;\r\n\r\n        game.renderer = new CanvasRenderer(game);\r\n\r\n        game.context = game.renderer.gameContext;\r\n    }\r\n};\r\n\r\nmodule.exports = CreateRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","CanvasInterpolation","CanvasPool","CONST","Features","CreateRenderer","game","config","renderType","HEADLESS","CANVAS","webGL","canvas","Error","WEBGL","antialias","disableSmoothing","create","width","resolution","height","canvasStyle","style","setCrisp","toString","zoom","WEBGL_RENDERER","CANVAS_RENDERER","CanvasRenderer","WebGLRenderer","renderer","context","gameContext"]
}
