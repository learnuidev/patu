{
"version":3,
"file":"module$node_modules$Phaser$src$loader$filetypes$SVGFile.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/Phaser/src/loader/filetypes/SVGFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$filetypes$SVGFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.SVGSizeConfig\r\n *\r\n * @property {integer} [width] - An optional width. The SVG will be resized to this size before being rendered to a texture.\r\n * @property {integer} [height] - An optional height. The SVG will be resized to this size before being rendered to a texture.\r\n * @property {number} [scale] - An optional scale. If given it overrides the width / height properties. The SVG is scaled by the scale factor before being rendered to a texture.\r\n */\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.SVGFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within both the Loader and the Texture Manager.\r\n * @property {string} [url] - The absolute or relative URL to load the file from.\r\n * @property {string} [extension='svg'] - The default file extension to use if no url is provided.\r\n * @property {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n * @property {Phaser.Loader.FileTypes.SVGSizeConfig} [svgConfig] - The svg size configuration object.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A single SVG File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#svg method and are not typically created directly.\r\n *\r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#svg.\r\n *\r\n * @class SVGFile\r\n * @extends Phaser.Loader.File\r\n * @memberOf Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.SVGFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.svg`, i.e. if `key` was \"alien\" then the URL will be \"alien.svg\".\r\n * @param {Phaser.Loader.FileTypes.SVGSizeConfig} [svgConfig] - The svg size configuration object.\r\n * @param {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar SVGFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function SVGFile (loader, key, url, svgConfig, xhrSettings)\r\n    {\r\n        var extension = 'svg';\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            url = GetFastValue(config, 'url');\r\n            svgConfig = GetFastValue(config, 'svgConfig', {});\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            extension = GetFastValue(config, 'extension', extension);\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'svg',\r\n            cache: loader.textureManager,\r\n            extension: extension,\r\n            responseType: 'text',\r\n            key: key,\r\n            url: url,\r\n            xhrSettings: xhrSettings,\r\n            config: {\r\n                width: GetFastValue(svgConfig, 'width'),\r\n                height: GetFastValue(svgConfig, 'height'),\r\n                scale: GetFastValue(svgConfig, 'scale')\r\n            }\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.SVGFile#onProcess\r\n     * @since 3.7.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        var text = this.xhrLoader.responseText;\r\n        var svg = [ text ];\r\n        var width = this.config.width;\r\n        var height = this.config.height;\r\n        var scale = this.config.scale;\r\n\r\n        resize: if (width && height || scale)\r\n        {\r\n            var xml = null;\r\n            var parser = new DOMParser();\r\n            xml = parser.parseFromString(text, 'text/xml');\r\n            var svgXML = xml.getElementsByTagName('svg')[0];\r\n\r\n            var hasViewBox = svgXML.hasAttribute('viewBox');\r\n            var svgWidth = parseFloat(svgXML.getAttribute('width'));\r\n            var svgHeight = parseFloat(svgXML.getAttribute('height'));\r\n\r\n            if (!hasViewBox && svgWidth && svgHeight)\r\n            {\r\n                //  If there's no viewBox attribute, set one\r\n                svgXML.setAttribute('viewBox', '0  0 ' + svgWidth + ' ' + svgHeight);\r\n            }\r\n            else if (hasViewBox && !svgWidth && !svgHeight)\r\n            {\r\n                //  Get the w/h from the viewbox\r\n                var viewBox = svgXML.getAttribute('viewBox').split(/\\s+|,/);\r\n\r\n                svgWidth = viewBox[2];\r\n                svgHeight = viewBox[3];\r\n            }\r\n\r\n            if (scale)\r\n            {\r\n                if (svgWidth && svgHeight)\r\n                {\r\n                    width = svgWidth * scale;\r\n                    height = svgHeight * scale;\r\n                }\r\n                else\r\n                {\r\n                    break resize;\r\n                }\r\n            }\r\n\r\n            svgXML.setAttribute('width', width.toString() + 'px');\r\n            svgXML.setAttribute('height', height.toString() + 'px');\r\n\r\n            svg = [ (new XMLSerializer()).serializeToString(svgXML) ];\r\n        }\r\n\r\n        try\r\n        {\r\n            var blob = new window.Blob(svg, { type: 'image/svg+xml;charset=utf-8' });\r\n        }\r\n        catch (e)\r\n        {\r\n            this.onProcessError();\r\n\r\n            return;\r\n        }\r\n\r\n        this.data = new Image();\r\n\r\n        this.data.crossOrigin = this.crossOrigin;\r\n\r\n        var _this = this;\r\n        var retry = false;\r\n\r\n        this.data.onload = function ()\r\n        {\r\n            if (!retry)\r\n            {\r\n                File.revokeObjectURL(_this.data);\r\n            }\r\n\r\n            _this.onProcessComplete();\r\n        };\r\n\r\n        this.data.onerror = function ()\r\n        {\r\n            //  Safari 8 re-try\r\n            if (!retry)\r\n            {\r\n                retry = true;\r\n\r\n                File.revokeObjectURL(_this.data);\r\n\r\n                _this.data.src = 'data:image/svg+xml,' + encodeURIComponent(svg.join(''));\r\n            }\r\n            else\r\n            {\r\n                _this.onProcessError();\r\n            }\r\n        };\r\n\r\n        File.createObjectURL(this.data, blob, 'image/svg+xml');\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.SVGFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        var texture = this.cache.addImage(this.key, this.data);\r\n\r\n        this.pendingDestroy(texture);\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds an SVG File, or array of SVG Files, to the current load queue. When the files are loaded they\r\n * will be rendered to bitmap textures and stored in the Texture Manager.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n *\r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.svg('morty', 'images/Morty.svg');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n *\r\n * ```javascript\r\n * this.load.svg({\r\n *     key: 'morty',\r\n *     url: 'images/Morty.svg'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.SVGFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can use it as a texture for a Game Object by referencing its key:\r\n *\r\n * ```javascript\r\n * this.load.svg('morty', 'images/Morty.svg');\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'morty');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.html\". It will always add `.html` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n * \r\n * You can optionally pass an SVG Resize Configuration object when you load an SVG file. By default the SVG will be rendered to a texture\r\n * at the same size defined in the SVG file attributes. However, this isn't always desirable. You may wish to resize the SVG (either down\r\n * or up) to improve texture clarity, or reduce texture memory consumption. You can either specify an exact width and height to resize\r\n * the SVG to:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.svg('morty', 'images/Morty.svg', { width: 300, height: 600 });\r\n * }\r\n * ```\r\n * \r\n * Or when using a configuration object:\r\n * \r\n * ```javascript\r\n * this.load.svg({\r\n *     key: 'morty',\r\n *     url: 'images/Morty.svg',\r\n *     svgConfig: {\r\n *         width: 300,\r\n *         height: 600\r\n *     }\r\n * });\r\n * ```\r\n * \r\n * Alternatively, you can just provide a scale factor instead:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.svg('morty', 'images/Morty.svg', { scale: 2.5 });\r\n * }\r\n * ```\r\n * \r\n * Or when using a configuration object:\r\n * \r\n * ```javascript\r\n * this.load.svg({\r\n *     key: 'morty',\r\n *     url: 'images/Morty.svg',\r\n *     svgConfig: {\r\n *         scale: 2.5\r\n *     }\r\n * });\r\n * ```\r\n * \r\n * If scale, width and height values are all given, the scale has priority and the width and height values are ignored.\r\n *\r\n * Note: The ability to load this type of file will only be available if the SVG File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#svg\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.SVGFileConfig|Phaser.Loader.FileTypes.SVGFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.svg`, i.e. if `key` was \"alien\" then the URL will be \"alien.svg\".\r\n * @param {Phaser.Loader.FileTypes.SVGSizeConfig} [svgConfig] - The svg size configuration object.\r\n * @param {XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('svg', function (key, url, svgConfig, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new SVGFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new SVGFile(this, key, url, svgConfig, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = SVGFile;\r\n\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","CONST","File","FileTypesManager","GetFastValue","IsPlainObject","SVGFile","Extends","initialize","loader","key","url","svgConfig","xhrSettings","extension","config","fileConfig","type","cache","textureManager","responseType","width","height","scale","call","onProcess","state","FILE_PROCESSING","text","xhrLoader","responseText","svg","xml","parseFromString","parser","DOMParser","svgXML","getElementsByTagName","hasViewBox","hasAttribute","svgWidth","parseFloat","getAttribute","svgHeight","setAttribute","viewBox","split","toString","serializeToString","XMLSerializer","blob","window","Blob","e","onProcessError","data","Image","crossOrigin","_this","retry","onload","this.data.onload","revokeObjectURL","onProcessComplete","onerror","this.data.onerror","src","encodeURIComponent","join","createObjectURL","addToCache","texture","addImage","pendingDestroy","register","Array","isArray","i","length","addFile"]
}
