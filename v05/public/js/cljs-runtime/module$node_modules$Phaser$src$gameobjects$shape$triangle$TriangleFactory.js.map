{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$triangle$TriangleFactory.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,0EAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOlIC,MAAAA,CAAoBH,OAAA,CAAQ,8DAAR,CACxB,KAAII,SAAWJ,OAAA,CAAQ,oEAAR,CAkCfG,OAAAE,SAAA,CAA2B,UAA3B,CAAuC,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,EAAP,CAAWC,EAAX,CAAeC,EAAf,CAAmBC,EAAnB,CAAuBC,EAAvB,CAA2BC,EAA3B,CAA+BC,SAA/B,CAA0CC,SAA1C,CAChD,CACI,MAAO,KAAAC,YAAAC,IAAA,CAAqB,IAAIb,QAAJ,CAAa,IAAAc,MAAb,CAAyBZ,CAAzB,CAA4BC,CAA5B,CAA+BC,EAA/B,CAAmCC,EAAnC,CAAuCC,EAAvC,CAA2CC,EAA3C,CAA+CC,EAA/C,CAAmDC,EAAnD,CAAuDC,SAAvD,CAAkEC,SAAlE,CAArB,CADX,CADA,CA1CsI;",
"sources":["node_modules/Phaser/src/gameobjects/shape/triangle/TriangleFactory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$triangle$TriangleFactory\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GameObjectFactory = require('../../GameObjectFactory');\r\nvar Triangle = require('./Triangle');\r\n\r\n/**\r\n * Creates a new Triangle Shape Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the Triangle Game Object has been built into Phaser.\r\n * \r\n * The Triangle Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * The Triangle consists of 3 lines, joining up to form a triangular shape. You can control the\r\n * position of each point of these lines. The triangle is always closed and cannot have an open\r\n * face. If you require that, consider using a Polygon instead.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#triangle\r\n * @since 3.13.0\r\n *\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [x1=0] - The horizontal position of the first point in the triangle.\r\n * @param {number} [y1=128] - The vertical position of the first point in the triangle.\r\n * @param {number} [x2=64] - The horizontal position of the second point in the triangle.\r\n * @param {number} [y2=0] - The vertical position of the second point in the triangle.\r\n * @param {number} [x3=128] - The horizontal position of the third point in the triangle.\r\n * @param {number} [y3=128] - The vertical position of the third point in the triangle.\r\n * @param {number} [fillColor] - The color the triangle will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the triangle will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n *\r\n * @return {Phaser.GameObjects.Triangle} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('triangle', function (x, y, x1, y1, x2, y2, x3, y3, fillColor, fillAlpha)\r\n{\r\n    return this.displayList.add(new Triangle(this.scene, x, y, x1, y1, x2, y2, x3, y3, fillColor, fillAlpha));\r\n});\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GameObjectFactory","Triangle","register","x","y","x1","y1","x2","y2","x3","y3","fillColor","fillAlpha","displayList","add","scene"]
}
