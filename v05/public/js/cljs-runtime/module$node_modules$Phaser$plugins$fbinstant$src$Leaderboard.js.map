{
"version":3,
"file":"module$node_modules$Phaser$plugins$fbinstant$src$Leaderboard.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/plugins/fbinstant/src/Leaderboard.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$plugins$fbinstant$src$Leaderboard\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../src/utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar LeaderboardScore = require('./LeaderboardScore');\r\n\r\n/**\r\n * @classdesc\r\n * This class represents one single Leaderboard that belongs to a Facebook Instant Game.\r\n * \r\n * You do not need to instantiate this class directly, it will be created when you use the\r\n * `getLeaderboard()` method of the main plugin.\r\n *\r\n * @class Leaderboard\r\n * @memberOf Phaser.FacebookInstantGamesPlugin\r\n * @constructor\r\n * @since 3.13.0\r\n * \r\n * @param {Phaser.FacebookInstantGamesPlugin} plugin - A reference to the Facebook Instant Games Plugin.\r\n * @param {any} data - An Instant Game leaderboard instance.\r\n */\r\nvar Leaderboard = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function Leaderboard (plugin, data)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the Facebook Instant Games Plugin.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#plugin\r\n         * @type {Phaser.FacebookInstantGamesPlugin}\r\n         * @since 3.13.0\r\n         */\r\n        this.plugin = plugin;\r\n\r\n        /**\r\n         * An Instant Game leaderboard instance.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#ref\r\n         * @type {any}\r\n         * @since 3.13.0\r\n         */\r\n        this.ref = data;\r\n\r\n        /**\r\n         * The name of the leaderboard.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#name\r\n         * @type {string}\r\n         * @since 3.13.0\r\n         */\r\n        this.name = data.getName();\r\n\r\n        /**\r\n         * The ID of the context that the leaderboard is associated with, or null if the leaderboard is not tied to a particular context.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#contextID\r\n         * @type {string}\r\n         * @since 3.13.0\r\n         */\r\n        this.contextID = data.getContextID();\r\n\r\n        /**\r\n         * The total number of player entries in the leaderboard.\r\n         * This value defaults to zero. Populate it via the `getEntryCount()` method.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#entryCount\r\n         * @type {integer}\r\n         * @since 3.13.0\r\n         */\r\n        this.entryCount = 0;\r\n\r\n        /**\r\n         * The players score object.\r\n         * This value defaults to `null`. Populate it via the `getPlayerScore()` method.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#playerScore\r\n         * @type {LeaderboardScore}\r\n         * @since 3.13.0\r\n         */\r\n        this.playerScore = null;\r\n\r\n        /**\r\n         * The scores in the Leaderboard from the currently requested range.\r\n         * This value defaults to an empty array. Populate it via the `getScores()` method.\r\n         * The contents of this array are reset each time `getScores()` is called.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#scores\r\n         * @type {LeaderboardScore[]}\r\n         * @since 3.13.0\r\n         */\r\n        this.scores = [];\r\n\r\n        this.getEntryCount();\r\n    },\r\n\r\n    /**\r\n     * Fetches the total number of player entries in the leaderboard.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `getentrycount` event along with the count and name of the Leaderboard.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesPlugin.Leaderboard#getEntryCount\r\n     * @since 3.13.0\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    getEntryCount: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        this.ref.getEntryCountAsync().then(function (count)\r\n        {\r\n            _this.entryCount = count;\r\n\r\n            _this.emit('getentrycount', count, _this.name);\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Updates the player's score. If the player has an existing score, the old score will only be replaced if the new score is better than it.\r\n     * NOTE: If the leaderboard is associated with a specific context, the game must be in that context to set a score for the player.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `setscore` event along with the score, any extra data and the name of the Leaderboard.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesPlugin.Leaderboard#setScore\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} score - The new score for the player. Must be a 64-bit integer number.\r\n     * @param {string} [data] - Metadata to associate with the stored score. Must be less than 2KB in size.\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    setScore: function (score, data)\r\n    {\r\n        if (data === undefined) { data = ''; }\r\n\r\n        var _this = this;\r\n\r\n        this.ref.setScoreAsync(score, data).then(function (entry)\r\n        {\r\n            _this.emit('setscore', entry.getScore(), entry.getExtraData(), _this.name);\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the players leaderboard entry and stores it in the `playerScore` property.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `getplayerscore` event along with the score and the name of the Leaderboard.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesPlugin.Leaderboard#getPlayerScore\r\n     * @since 3.13.0\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    getPlayerScore: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        this.ref.getPlayerEntryAsync().then(function (entry)\r\n        {\r\n            var score = LeaderboardScore(entry);\r\n\r\n            _this.playerScore = score;\r\n\r\n            _this.emit('getplayerscore', score, _this.name);\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Retrieves a set of leaderboard entries, ordered by score ranking in the leaderboard.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `getplayerscore` event along with the score and the name of the Leaderboard.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesPlugin.Leaderboard#getScores\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} [count=10] - The number of entries to attempt to fetch from the leaderboard. Currently, up to a maximum of 100 entries may be fetched per query.\r\n     * @param {integer} [offset=0] - The offset from the top of the leaderboard that entries will be fetched from.\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    getScores: function (count, offset)\r\n    {\r\n        if (count === undefined) { count = 10; }\r\n        if (offset === undefined) { offset = 0; }\r\n\r\n        var _this = this;\r\n\r\n        this.ref.getEntriesAsync().then(function (entries)\r\n        {\r\n            _this.scores = [];\r\n\r\n            entries.forEach(function (entry)\r\n            {\r\n                _this.scores.push(LeaderboardScore(entry));\r\n            });\r\n\r\n            _this.emit('getscores', _this.scores, _this.name);\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Leaderboard;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","EventEmitter","LeaderboardScore","Leaderboard","Extends","initialize","plugin","data","call","ref","name","getName","contextID","getContextID","entryCount","playerScore","scores","getEntryCount","_this","getEntryCountAsync","then","count","emit","catch","e","console","warn","setScore","score","undefined","setScoreAsync","entry","getScore","getExtraData","getPlayerScore","getPlayerEntryAsync","getScores","offset","getEntriesAsync","entries","forEach","push"]
}
