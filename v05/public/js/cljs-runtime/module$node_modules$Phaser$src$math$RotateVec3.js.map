{
"version":3,
"file":"module$node_modules$Phaser$src$math$RotateVec3.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOvGC,MAAAA,CAAUH,OAAA,CAAQ,6CAAR,CACVI,QAAAA,CAAUJ,OAAA,CAAQ,6CAAR,CACVK,QAAAA,CAAaL,OAAA,CAAQ,gDAAR,CAEjB,KAAIM,QAAU,IAAIF,OAAlB,CACIG,QAAU,IAAIF,OADlB,CAEIG,QAAU,IAAIL,MA6BlBF,OAAAC,QAAA,CAZiBO,QAAS,CAACC,GAAD,CAAMC,IAAN,CAAYC,OAAZ,CAC1B,CAEIL,OAAAM,aAAA,CAAqBF,IAArB,CAA2BC,OAA3B,CAGAN,QAAAQ,wBAAA,CAAgCP,OAAhC,CAAyCC,OAAAO,IAAA,CAAY,CAAZ,CAAe,CAAf,CAAkB,CAAlB,CAAzC,CAGA,OAAOL,IAAAM,cAAA,CAAkBV,OAAlB,CARX,CA/B2G;",
"sources":["node_modules/Phaser/src/math/RotateVec3.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$RotateVec3\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Vector3 = require('../math/Vector3');\r\nvar Matrix4 = require('../math/Matrix4');\r\nvar Quaternion = require('../math/Quaternion');\r\n\r\nvar tmpMat4 = new Matrix4();\r\nvar tmpQuat = new Quaternion();\r\nvar tmpVec3 = new Vector3();\r\n\r\n/**\r\n * Rotates a vector in place by axis angle.\r\n *\r\n * This is the same as transforming a point by an\r\n * axis-angle quaternion, but it has higher precision.\r\n *\r\n * @function Phaser.Math.RotateVec3\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector3} vec - The vector to be rotated.\r\n * @param {Phaser.Math.Vector3} axis - The axis to rotate around.\r\n * @param {number} radians - The angle of rotation in radians.\r\n *\r\n * @return {Phaser.Math.Vector3} The given vector.\r\n */\r\nvar RotateVec3 = function (vec, axis, radians)\r\n{\r\n    //  Set the quaternion to our axis angle\r\n    tmpQuat.setAxisAngle(axis, radians);\r\n\r\n    //  Create a rotation matrix from the axis angle\r\n    tmpMat4.fromRotationTranslation(tmpQuat, tmpVec3.set(0, 0, 0));\r\n\r\n    //  Multiply our vector by the rotation matrix\r\n    return vec.transformMat4(tmpMat4);\r\n};\r\n\r\nmodule.exports = RotateVec3;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Vector3","Matrix4","Quaternion","tmpMat4","tmpQuat","tmpVec3","RotateVec3","vec","axis","radians","setAxisAngle","fromRotationTranslation","set","transformMat4"]
}
