{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$SetCollisionByProperty.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,0EAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOtI,IAAIC,iBAAmBH,OAAA,CAAQ,qEAAR,CAAvB,CACII,qBAAuBJ,OAAA,CAAQ,yEAAR,CAD3B,CAEIK,SAAWL,OAAA,CAAQ,sDAAR,CA4DfC,OAAAC,QAAA,CAxC6BI,QAAS,CAACC,UAAD,CAAaC,QAAb,CAAuBC,gBAAvB,CAAyCC,KAAzC,CACtC,CACqBC,IAAAA,EAAjB,GAAIH,QAAJ,GAA8BA,QAA9B;AAAyC,CAAA,CAAzC,CACyBG,KAAAA,EAAzB,GAAIF,gBAAJ,GAAsCA,gBAAtC,CAAyD,CAAA,CAAzD,CAEA,KAAK,IAAIG,GAAK,CAAd,CAAiBA,EAAjB,CAAsBF,KAAAG,OAAtB,CAAoCD,EAAA,EAApC,CAEI,IAAK,IAAIE,GAAK,CAAd,CAAiBA,EAAjB,CAAsBJ,KAAAK,MAAtB,CAAmCD,EAAA,EAAnC,CACA,CACI,IAAIE,KAAON,KAAAO,KAAA,CAAWL,EAAX,CAAA,CAAeE,EAAf,CAEX,IAAKE,IAAL,CAEA,IAAKE,IAAIA,QAAT,GAAqBX,WAArB,CAEI,GAAKF,QAAA,CAASW,IAAAT,WAAT,CAA0BW,QAA1B,CAAL,CAAA,CAEA,IAAIC,OAASZ,UAAA,CAAWW,QAAX,CACRE,MAAAC,QAAA,CAAcF,MAAd,CAAL,GAEIA,MAFJ,CAEa,CAAEA,MAAF,CAFb,CAKA,KAAK,IAAIG,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,MAAAI,OAApB,CAAmCD,CAAA,EAAnC,CAEQN,IAAAT,WAAA,CAAgBW,QAAhB,CAAJ,GAAkCC,MAAA,CAAOG,CAAP,CAAlC,EAEInB,gBAAA,CAAiBa,IAAjB,CAAuBR,QAAvB,CAZR,CAPR,CA0BAC,gBAAJ,EAEIL,oBAAA,CAAqB,CAArB,CAAwB,CAAxB,CAA2BM,KAAAK,MAA3B,CAAwCL,KAAAG,OAAxC,CAAsDH,KAAtD,CAnCR,CA9BsI;",
"sources":["node_modules/Phaser/src/tilemaps/components/SetCollisionByProperty.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$SetCollisionByProperty\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar SetTileCollision = require('./SetTileCollision');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\nvar HasValue = require('../../utils/object/HasValue');\r\n\r\n/**\r\n * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n * that matches the given properties object, its collision flag will be set. The `collides`\r\n * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n * \"types\" property that matches any of those values, its collision flag will be updated.\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionByProperty\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {object} properties - An object with tile properties and corresponding values that should be checked.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar SetCollisionByProperty = function (properties, collides, recalculateFaces, layer)\r\n{\r\n    if (collides === undefined) { collides = true; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n\r\n    for (var ty = 0; ty < layer.height; ty++)\r\n    {\r\n        for (var tx = 0; tx < layer.width; tx++)\r\n        {\r\n            var tile = layer.data[ty][tx];\r\n\r\n            if (!tile) { continue; }\r\n\r\n            for (var property in properties)\r\n            {\r\n                if (!HasValue(tile.properties, property)) { continue; }\r\n\r\n                var values = properties[property];\r\n                if (!Array.isArray(values))\r\n                {\r\n                    values = [ values ];\r\n                }\r\n\r\n                for (var i = 0; i < values.length; i++)\r\n                {\r\n                    if (tile.properties[property] === values[i])\r\n                    {\r\n                        SetTileCollision(tile, collides);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = SetCollisionByProperty;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","SetTileCollision","CalculateFacesWithin","HasValue","SetCollisionByProperty","properties","collides","recalculateFaces","layer","undefined","ty","height","tx","width","tile","data","property","values","Array","isArray","i","length"]
}
