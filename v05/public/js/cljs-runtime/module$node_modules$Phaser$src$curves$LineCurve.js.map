{
"version":3,
"file":"module$node_modules$Phaser$src$curves$LineCurve.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/curves/LineCurve.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$curves$LineCurve\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n//  Based on the three.js Curve classes created by [zz85](http://www.lab4games.net/zz85/blog)\r\n\r\nvar Class = require('../utils/Class');\r\nvar Curve = require('./Curve');\r\nvar FromPoints = require('../geom/rectangle/FromPoints');\r\nvar Rectangle = require('../geom/rectangle/Rectangle');\r\nvar Vector2 = require('../math/Vector2');\r\n\r\nvar tmpVec2 = new Vector2();\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class Line\r\n * @extends Phaser.Curves.Curve\r\n * @memberOf Phaser.Curves\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Math.Vector2|number[])} p0 - [description]\r\n * @param {Phaser.Math.Vector2} [p1] - [description]\r\n */\r\nvar LineCurve = new Class({\r\n\r\n    Extends: Curve,\r\n\r\n    initialize:\r\n\r\n    //  vec2s or array\r\n    function LineCurve (p0, p1)\r\n    {\r\n        Curve.call(this, 'LineCurve');\r\n\r\n        if (Array.isArray(p0))\r\n        {\r\n            p1 = new Vector2(p0[2], p0[3]);\r\n            p0 = new Vector2(p0[0], p0[1]);\r\n        }\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.Line#p0\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.p0 = p0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.Line#p1\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.p1 = p1;\r\n    },\r\n\r\n    /**\r\n     * Returns a Rectangle where the position and dimensions match the bounds of this Curve.\r\n     *\r\n     * @method Phaser.Curves.Line#getBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Rectangle} O - [out,$return]\r\n     *\r\n     * @param {Phaser.Geom.Rectangle} [out] - A Rectangle object to store the bounds in. If not given a new Rectangle will be created.\r\n     *\r\n     * @return {Phaser.Geom.Rectangle} A Rectangle object holding the bounds of this curve. If `out` was given it will be this object.\r\n     */\r\n    getBounds: function (out)\r\n    {\r\n        if (out === undefined) { out = new Rectangle(); }\r\n\r\n        return FromPoints([ this.p0, this.p1 ], out);\r\n    },\r\n\r\n    /**\r\n     * Gets the starting point on the curve.\r\n     *\r\n     * @method Phaser.Curves.Line#getStartPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getStartPoint: function (out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        return out.copy(this.p0);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Line#getResolution\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [divisions=1] - [description]\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getResolution: function (divisions)\r\n    {\r\n        if (divisions === undefined) { divisions = 1; }\r\n\r\n        return divisions;\r\n    },\r\n\r\n    /**\r\n     * Get point at relative position in curve according to length.\r\n     *\r\n     * @method Phaser.Curves.Line#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getPoint: function (t, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        if (t === 1)\r\n        {\r\n            return out.copy(this.p1);\r\n        }\r\n\r\n        out.copy(this.p1).subtract(this.p0).scale(t).add(this.p0);\r\n\r\n        return out;\r\n    },\r\n\r\n    // Line curve is linear, so we can overwrite default getPointAt\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Line#getPointAt\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} u - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getPointAt: function (u, out)\r\n    {\r\n        return this.getPoint(u, out);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Line#getTangent\r\n     * @since 3.0.0\r\n     * \r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @return {Phaser.Math.Vector2} [description]\r\n     */\r\n    getTangent: function ()\r\n    {\r\n        var tangent = tmpVec2.copy(this.p1).subtract(this.p0);\r\n\r\n        return tangent.normalize();\r\n    },\r\n\r\n    //  Override default Curve.draw because this is better than calling getPoints on a line!\r\n\r\n    /**\r\n     * Draws this curve on the given Graphics object.\r\n     *\r\n     * The curve is drawn using `Graphics.lineBetween` so will be drawn at whatever the present Graphics line color is.\r\n     * The Graphics object is not cleared before the draw, so the curve will appear on-top of anything else already rendered to it.\r\n     *\r\n     * @method Phaser.Curves.Line#draw\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.GameObjects.Graphics} G - [graphics,$return]\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The Graphics instance onto which this curve will be drawn.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} The Graphics object to which the curve was drawn.\r\n     */\r\n    draw: function (graphics)\r\n    {\r\n        graphics.lineBetween(this.p0.x, this.p0.y, this.p1.x, this.p1.y);\r\n\r\n        //  So you can chain graphics calls\r\n        return graphics;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Line#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {JSONCurve} The JSON object containing this curve data.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        return {\r\n            type: this.type,\r\n            points: [\r\n                this.p0.x, this.p0.y,\r\n                this.p1.x, this.p1.y\r\n            ]\r\n        };\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Curves.Line.fromJSON\r\n * @since 3.0.0\r\n *\r\n * @param {JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.Line} [description]\r\n */\r\nLineCurve.fromJSON = function (data)\r\n{\r\n    var points = data.points;\r\n\r\n    var p0 = new Vector2(points[0], points[1]);\r\n    var p1 = new Vector2(points[2], points[3]);\r\n\r\n    return new LineCurve(p0, p1);\r\n};\r\n\r\nmodule.exports = LineCurve;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Curve","FromPoints","Rectangle","Vector2","tmpVec2","LineCurve","Extends","initialize","p0","p1","call","Array","isArray","getBounds","out","undefined","getStartPoint","copy","getResolution","divisions","getPoint","t","subtract","scale","add","getPointAt","u","getTangent","tangent","normalize","draw","graphics","lineBetween","x","y","toJSON","type","points","fromJSON","LineCurve.fromJSON","data"]
}
