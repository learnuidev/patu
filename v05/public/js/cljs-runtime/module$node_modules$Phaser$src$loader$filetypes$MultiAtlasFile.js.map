{
"version":3,
"file":"module$node_modules$Phaser$src$loader$filetypes$MultiAtlasFile.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/loader/filetypes/MultiAtlasFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$filetypes$MultiAtlasFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar ImageFile = require('./ImageFile.js');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\nvar JSONFile = require('./JSONFile.js');\r\nvar MultiFile = require('../MultiFile.js');\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.MultiAtlasFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within both the Loader and the Texture Manager.\r\n * @property {string} [atlasURL] - The absolute or relative URL to load the multi atlas json file from. Or, a well formed JSON object.\r\n * @property {string} [atlasExtension='json'] - The default file extension to use for the atlas json if no url is provided.\r\n * @property {XHRSettingsObject} [atlasXhrSettings] - Extra XHR Settings specifically for the atlas json file.\r\n * @property {string} [path] - Optional path to use when loading the textures defined in the atlas data.\r\n * @property {string} [baseURL] - Optional Base URL to use when loading the textures defined in the atlas data.\r\n * @property {XHRSettingsObject} [textureXhrSettings] - Extra XHR Settings specifically for the texture files.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A single Multi Texture Atlas File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#multiatlas method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#multiatlas.\r\n *\r\n * @class MultiAtlasFile\r\n * @extends Phaser.Loader.MultiFile\r\n * @memberOf Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {string} key - The key of the file. Must be unique within both the Loader and the Texture Manager.\r\n * @param {string} [atlasURL] - The absolute or relative URL to load the multi atlas json file from.\r\n * @param {string} [path] - Optional path to use when loading the textures defined in the atlas data.\r\n * @param {string} [baseURL] - Optional Base URL to use when loading the textures defined in the atlas data.\r\n * @param {XHRSettingsObject} [atlasXhrSettings] - Extra XHR Settings specifically for the atlas json file.\r\n * @param {XHRSettingsObject} [textureXhrSettings] - Extra XHR Settings specifically for the texture files.\r\n */\r\nvar MultiAtlasFile = new Class({\r\n\r\n    Extends: MultiFile,\r\n\r\n    initialize:\r\n\r\n    function MultiAtlasFile (loader, key, atlasURL, path, baseURL, atlasXhrSettings, textureXhrSettings)\r\n    {\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            atlasURL = GetFastValue(config, 'url');\r\n            atlasXhrSettings = GetFastValue(config, 'xhrSettings');\r\n            path = GetFastValue(config, 'path');\r\n            baseURL = GetFastValue(config, 'baseURL');\r\n            textureXhrSettings = GetFastValue(config, 'textureXhrSettings');\r\n        }\r\n\r\n        var data = new JSONFile(loader, key, atlasURL, atlasXhrSettings);\r\n\r\n        MultiFile.call(this, loader, 'multiatlas', key, [ data ]);\r\n\r\n        this.config.path = path;\r\n        this.config.baseURL = baseURL;\r\n        this.config.textureXhrSettings = textureXhrSettings;\r\n    },\r\n\r\n    /**\r\n     * Called by each File when it finishes loading.\r\n     *\r\n     * @method Phaser.Loader.MultiFile#onFileComplete\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The File that has completed processing.\r\n     */\r\n    onFileComplete: function (file)\r\n    {\r\n        var index = this.files.indexOf(file);\r\n\r\n        if (index !== -1)\r\n        {\r\n            this.pending--;\r\n\r\n            if (file.type === 'json' && file.data.hasOwnProperty('textures'))\r\n            {\r\n                //  Inspect the data for the files to now load\r\n                var textures = file.data.textures;\r\n\r\n                var config = this.config;\r\n                var loader = this.loader;\r\n\r\n                var currentBaseURL = loader.baseURL;\r\n                var currentPath = loader.path;\r\n                var currentPrefix = loader.prefix;\r\n\r\n                var baseURL = GetFastValue(config, 'baseURL', currentBaseURL);\r\n                var path = GetFastValue(config, 'path', currentPath);\r\n                var prefix = GetFastValue(config, 'prefix', currentPrefix);\r\n                var textureXhrSettings = GetFastValue(config, 'textureXhrSettings');\r\n\r\n                loader.setBaseURL(baseURL);\r\n                loader.setPath(path);\r\n                loader.setPrefix(prefix);\r\n\r\n                for (var i = 0; i < textures.length; i++)\r\n                {\r\n                    //  \"image\": \"texture-packer-multi-atlas-0.png\",\r\n                    var textureURL = textures[i].image;\r\n\r\n                    var key = '_MA_' + textureURL;\r\n\r\n                    var image = new ImageFile(loader, key, textureURL, textureXhrSettings);\r\n\r\n                    this.addToMultiFile(image);\r\n\r\n                    loader.addFile(image);\r\n\r\n                    //  \"normalMap\": \"texture-packer-multi-atlas-0_n.png\",\r\n                    if (textures[i].normalMap)\r\n                    {\r\n                        var normalMap = new ImageFile(loader, key, textures[i].normalMap, textureXhrSettings);\r\n\r\n                        normalMap.type = 'normalMap';\r\n\r\n                        image.setLink(normalMap);\r\n\r\n                        this.addToMultiFile(normalMap);\r\n\r\n                        loader.addFile(normalMap);\r\n                    }\r\n                }\r\n\r\n                //  Reset the loader settings\r\n                loader.setBaseURL(currentBaseURL);\r\n                loader.setPath(currentPath);\r\n                loader.setPrefix(currentPrefix);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.MultiFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        if (this.isReadyToProcess())\r\n        {\r\n            var fileJSON = this.files[0];\r\n\r\n            fileJSON.addToCache();\r\n\r\n            var data = [];\r\n            var images = [];\r\n            var normalMaps = [];\r\n\r\n            for (var i = 1; i < this.files.length; i++)\r\n            {\r\n                var file = this.files[i];\r\n\r\n                if (file.type === 'normalMap')\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                var key = file.key.substr(4);\r\n                var image = file.data;\r\n\r\n                //  Now we need to find out which json entry this mapped to\r\n                for (var t = 0; t < fileJSON.data.textures.length; t++)\r\n                {\r\n                    var item = fileJSON.data.textures[t];\r\n\r\n                    if (item.image === key)\r\n                    {\r\n                        images.push(image);\r\n                        \r\n                        data.push(item);\r\n\r\n                        if (file.linkFile)\r\n                        {\r\n                            normalMaps.push(file.linkFile.data);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (normalMaps.length === 0)\r\n            {\r\n                normalMaps = undefined;\r\n            }\r\n\r\n            this.loader.textureManager.addAtlasJSONArray(this.key, images, data, normalMaps);\r\n\r\n            this.complete = true;\r\n\r\n            for (i = 0; i < this.files.length; i++)\r\n            {\r\n                this.files[i].pendingDestroy();\r\n            }\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds a Multi Texture Atlas, or array of multi atlases, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.multiatlas('level1', 'images/Level1.json');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\r\n * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\r\n *\r\n * Phaser expects the atlas data to be provided in a JSON file as exported from the application Texture Packer,\r\n * version 4.6.3 or above, where you have made sure to use the Phaser 3 Export option.\r\n *\r\n * The way it works internally is that you provide a URL to the JSON file. Phaser then loads this JSON, parses it and\r\n * extracts which texture files it also needs to load to complete the process. If the JSON also defines normal maps,\r\n * Phaser will load those as well.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.multiatlas({\r\n *     key: 'level1',\r\n *     atlasURL: 'images/Level1.json'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.MultiAtlasFileConfig` for more details.\r\n *\r\n * Instead of passing a URL for the atlas JSON data you can also pass in a well formed JSON object instead.\r\n *\r\n * Once the atlas has finished loading you can use frames from it as textures for a Game Object by referencing its key:\r\n * \r\n * ```javascript\r\n * this.load.multiatlas('level1', 'images/Level1.json');\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'level1', 'background');\r\n * ```\r\n *\r\n * To get a list of all available frames within an atlas please consult your Texture Atlas software.\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Multi Atlas File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#multiatlas\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.7.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.MultiAtlasFileConfig|Phaser.Loader.FileTypes.MultiAtlasFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [atlasURL] - The absolute or relative URL to load the texture atlas json data file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\r\n * @param {string} [path] - Optional path to use when loading the textures defined in the atlas data.\r\n * @param {string} [baseURL] - Optional Base URL to use when loading the textures defined in the atlas data.\r\n * @param {XHRSettingsObject} [atlasXhrSettings] - An XHR Settings configuration object for the atlas json file. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('multiatlas', function (key, atlasURL, path, baseURL, atlasXhrSettings)\r\n{\r\n    var multifile;\r\n\r\n    //  Supports an Object file definition in the key argument\r\n    //  Or an array of objects in the key argument\r\n    //  Or a single entry where all arguments have been defined\r\n\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            multifile = new MultiAtlasFile(this, key[i]);\r\n\r\n            this.addFile(multifile.files);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        multifile = new MultiAtlasFile(this, key, atlasURL, path, baseURL, atlasXhrSettings);\r\n\r\n        this.addFile(multifile.files);\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = MultiAtlasFile;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","FileTypesManager","GetFastValue","ImageFile","IsPlainObject","JSONFile","MultiFile","MultiAtlasFile","Extends","initialize","loader","key","atlasURL","path","baseURL","atlasXhrSettings","textureXhrSettings","config","data","call","onFileComplete","file","files","indexOf","index","pending","type","hasOwnProperty","textures","currentBaseURL","currentPath","currentPrefix","prefix","setBaseURL","setPath","setPrefix","i","length","textureURL","image","addToMultiFile","addFile","normalMap","setLink","addToCache","isReadyToProcess","fileJSON","images","normalMaps","substr","t","item","push","linkFile","undefined","textureManager","addAtlasJSONArray","complete","pendingDestroy","register","Array","isArray","multifile"]
}
