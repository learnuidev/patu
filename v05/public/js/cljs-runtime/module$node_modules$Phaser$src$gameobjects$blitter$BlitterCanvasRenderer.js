shadow$provide.module$node_modules$Phaser$src$gameobjects$blitter$BlitterCanvasRenderer=function(global,require,module,exports){module.exports=function(renderer,src,interpolationPercentage,camera,parentMatrix){interpolationPercentage=src.getRenderList();if(0!==interpolationPercentage.length){var ctx=renderer.currentContext,alpha=camera.alpha*src.alpha;if(0!==alpha){ctx.globalCompositeOperation=renderer.blendModes[src.blendMode];renderer=src.x-camera.scrollX*src.scrollFactorX;src=src.y-camera.scrollY*
src.scrollFactorY;ctx.save();parentMatrix&&parentMatrix.copyToContext(ctx);camera=camera.roundPixels;for(parentMatrix=0;parentMatrix<interpolationPercentage.length;parentMatrix++){var bob=interpolationPercentage[parentMatrix],flip=bob.flipX||bob.flipY,frame=bob.frame,cd=frame.canvasData,dx=frame.x,dy=frame.y,fx=1,fy=1,bobAlpha=bob.alpha*alpha;0!==bobAlpha&&(ctx.globalAlpha=bobAlpha,flip?(bob.flipX&&(fx=-1,dx-=cd.width),bob.flipY&&(fy=-1,dy-=cd.height),ctx.save(),ctx.translate(bob.x+renderer,bob.y+
src),ctx.scale(fx,fy),ctx.drawImage(frame.source.image,cd.x,cd.y,cd.width,cd.height,dx,dy,cd.width,cd.height),ctx.restore()):(camera&&(dx|=0,dy|=0),ctx.drawImage(frame.source.image,cd.x,cd.y,cd.width,cd.height,dx+bob.x+renderer,dy+bob.y+src,cd.width,cd.height)))}ctx.restore()}}}}
//# sourceMappingURL=module$node_modules$Phaser$src$gameobjects$blitter$BlitterCanvasRenderer.js.map
