{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$isobox$IsoBoxFactory.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,sEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9HC,MAAAA,CAAoBH,OAAA,CAAQ,8DAAR,CACxB,KAAII,OAASJ,OAAA,CAAQ,gEAAR,CAkCbG,OAAAE,SAAA,CAA2B,QAA3B,CAAqC,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,IAAP,CAAaC,MAAb,CAAqBC,OAArB,CAA8BC,QAA9B,CAAwCC,SAAxC,CAC9C,CACI,MAAO,KAAAC,YAAAC,IAAA,CAAqB,IAAIV,MAAJ,CAAW,IAAAW,MAAX,CAAuBT,CAAvB,CAA0BC,CAA1B,CAA6BC,IAA7B,CAAmCC,MAAnC,CAA2CC,OAA3C,CAAoDC,QAApD,CAA8DC,SAA9D,CAArB,CADX,CADA,CA1CkI;",
"sources":["node_modules/Phaser/src/gameobjects/shape/isobox/IsoBoxFactory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$isobox$IsoBoxFactory\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GameObjectFactory = require('../../GameObjectFactory');\r\nvar IsoBox = require('./IsoBox');\r\n\r\n/**\r\n * Creates a new IsoBox Shape Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the IsoBox Game Object has been built into Phaser.\r\n * \r\n * The IsoBox Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only fill colors and cannot be stroked.\r\n * \r\n * An IsoBox is an 'isometric' rectangle. Each face of it has a different fill color. You can set\r\n * the color of the top, left and right faces of the rectangle respectively. You can also choose\r\n * which of the faces are rendered via the `showTop`, `showLeft` and `showRight` properties.\r\n * \r\n * You cannot view an IsoBox from under-neath, however you can change the 'angle' by setting\r\n * the `projection` property.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#isobox\r\n * @since 3.13.0\r\n *\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [size=48] - The width of the iso box in pixels. The left and right faces will be exactly half this value.\r\n * @param {number} [height=32] - The height of the iso box. The left and right faces will be this tall. The overall height of the isobox will be this value plus half the `size` value.\r\n * @param {number} [fillTop=0xeeeeee] - The fill color of the top face of the iso box.\r\n * @param {number} [fillLeft=0x999999] - The fill color of the left face of the iso box.\r\n * @param {number} [fillRight=0xcccccc] - The fill color of the right face of the iso box.\r\n *\r\n * @return {Phaser.GameObjects.IsoBox} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('isobox', function (x, y, size, height, fillTop, fillLeft, fillRight)\r\n{\r\n    return this.displayList.add(new IsoBox(this.scene, x, y, size, height, fillTop, fillLeft, fillRight));\r\n});\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GameObjectFactory","IsoBox","register","x","y","size","height","fillTop","fillLeft","fillRight","displayList","add","scene"]
}
