shadow$provide.module$node_modules$Phaser$src$physics$impact$World=function(global,require,module,exports){var Body=require("module$node_modules$Phaser$src$physics$impact$Body");global=require("module$node_modules$Phaser$src$utils$Class");var COLLIDES=require("module$node_modules$Phaser$src$physics$impact$COLLIDES"),CollisionMap=require("module$node_modules$Phaser$src$physics$impact$CollisionMap"),EventEmitter=require("module$node_modules$eventemitter3$index"),GetFastValue=require("module$node_modules$Phaser$src$utils$object$GetFastValue"),
HasValue=require("module$node_modules$Phaser$src$utils$object$HasValue"),Set=require("module$node_modules$Phaser$src$structs$Set"),Solver=require("module$node_modules$Phaser$src$physics$impact$Solver"),TILEMAP_FORMATS=require("module$node_modules$Phaser$src$tilemaps$Formats"),TYPE=require("module$node_modules$Phaser$src$physics$impact$TYPE");require=new global({Extends:EventEmitter,initialize:function(scene,config){EventEmitter.call(this);this.scene=scene;this.bodies=new Set;this.gravity=GetFastValue(config,
"gravity",0);this.cellSize=GetFastValue(config,"cellSize",64);this.collisionMap=new CollisionMap;this.timeScale=GetFastValue(config,"timeScale",1);this.maxStep=GetFastValue(config,"maxStep",.05);this.enabled=!0;this.drawDebug=GetFastValue(config,"debug",!1);var _maxVelocity=GetFastValue(config,"maxVelocity",100);this.defaults={debugShowBody:GetFastValue(config,"debugShowBody",!0),debugShowVelocity:GetFastValue(config,"debugShowVelocity",!0),bodyDebugColor:GetFastValue(config,"debugBodyColor",16711935),
velocityDebugColor:GetFastValue(config,"debugVelocityColor",65280),maxVelocityX:GetFastValue(config,"maxVelocityX",_maxVelocity),maxVelocityY:GetFastValue(config,"maxVelocityY",_maxVelocity),minBounceVelocity:GetFastValue(config,"minBounceVelocity",40),gravityFactor:GetFastValue(config,"gravityFactor",1),bounciness:GetFastValue(config,"bounciness",0)};this.walls={left:null,right:null,top:null,bottom:null};this._lastId=this.delta=0;if(GetFastValue(config,"setBounds",!1)){var boundsConfig=config.setBounds;
if("boolean"===typeof boundsConfig)this.setBounds();else{config=GetFastValue(boundsConfig,"x",0);_maxVelocity=GetFastValue(boundsConfig,"y",0);var width=GetFastValue(boundsConfig,"width",scene.sys.game.config.width);scene=GetFastValue(boundsConfig,"height",scene.sys.game.config.height);var thickness=GetFastValue(boundsConfig,"thickness",64),left=GetFastValue(boundsConfig,"left",!0),right=GetFastValue(boundsConfig,"right",!0),top=GetFastValue(boundsConfig,"top",!0);boundsConfig=GetFastValue(boundsConfig,
"bottom",!0);this.setBounds(config,_maxVelocity,width,scene,thickness,left,right,top,boundsConfig)}}this.drawDebug&&this.createDebugGraphic()},setCollisionMap:function(key,tileSize){if("string"===typeof key){var tilemapData=this.scene.cache.tilemap.get(key);if(!tilemapData||tilemapData.format!==TILEMAP_FORMATS.WELTMEISTER)return console.warn("The specified key does not correspond to a Weltmeister tilemap: "+key),null;key=tilemapData.data.layer;for(tilemapData=0;tilemapData<key.length;tilemapData++)if("collision"===
key[tilemapData].name){var collisionLayer=key[tilemapData];break}void 0===tileSize&&(tileSize=collisionLayer.tilesize);this.collisionMap=new CollisionMap(tileSize,collisionLayer.data)}else Array.isArray(key)?this.collisionMap=new CollisionMap(tileSize,key):console.warn("Invalid Weltmeister collision map data: "+key);return this.collisionMap},setCollisionMapFromTilemapLayer:function(tilemapLayer,options){void 0===options&&(options={});var slopeProperty=GetFastValue(options,"slopeProperty",null),slopeMap=
GetFastValue(options,"slopeMap",null),collidingSlope=GetFastValue(options,"defaultCollidingSlope",null);options=GetFastValue(options,"defaultNonCollidingSlope",0);tilemapLayer=tilemapLayer.layer;for(var tileSize=tilemapLayer.baseTileWidth,collisionData=[],ty=0;ty<tilemapLayer.height;ty++){collisionData[ty]=[];for(var tx=0;tx<tilemapLayer.width;tx++){var tile=tilemapLayer.data[ty][tx];tile&&tile.collides?null!==slopeProperty&&HasValue(tile.properties,slopeProperty)?collisionData[ty][tx]=parseInt(tile.properties[slopeProperty],
10):null!==slopeMap&&HasValue(slopeMap,tile.index)?collisionData[ty][tx]=slopeMap[tile.index]:collisionData[ty][tx]=null!==collidingSlope?collidingSlope:tile.index:collisionData[ty][tx]=options}}return this.collisionMap=new CollisionMap(tileSize,collisionData)},setBounds:function(x,y,width,height,thickness,left,right,top,bottom){void 0===x&&(x=0);void 0===y&&(y=0);void 0===width&&(width=this.scene.sys.game.config.width);void 0===height&&(height=this.scene.sys.game.config.height);void 0===thickness&&
(thickness=64);void 0===left&&(left=!0);void 0===right&&(right=!0);void 0===top&&(top=!0);void 0===bottom&&(bottom=!0);this.updateWall(left,"left",x-thickness,y,thickness,height);this.updateWall(right,"right",x+width,y,thickness,height);this.updateWall(top,"top",x,y-thickness,width,thickness);this.updateWall(bottom,"bottom",x,y+height,width,thickness);return this},updateWall:function(add,position,x,y,width,height){var wall=this.walls[position];add?wall?wall.resetSize(x,y,width,height):(this.walls[position]=
this.create(x,y,width,height),this.walls[position].name=position,this.walls[position].gravityFactor=0,this.walls[position].collides=COLLIDES.FIXED):(wall&&this.bodies.remove(wall),this.walls[position]=null)},createDebugGraphic:function(){var graphic=this.scene.sys.add.graphics({x:0,y:0});graphic.setDepth(Number.MAX_VALUE);this.debugGraphic=graphic;this.drawDebug=!0;return graphic},getNextID:function(){return this._lastId++},create:function(x,y,sizeX,sizeY){x=new Body(this,x,y,sizeX,sizeY);this.bodies.set(x);
return x},remove:function(object){this.bodies.delete(object)},pause:function(){this.enabled=!1;this.emit("pause");return this},resume:function(){this.enabled=!0;this.emit("resume");return this},update:function(time,delta){if(this.enabled&&0!==this.bodies.size){var clampedDelta=Math.min(delta/1E3,this.maxStep)*this.timeScale;this.delta=clampedDelta;var bodies=this.bodies.entries,len=bodies.length,hash={},size=this.cellSize;for(time=0;time<len;time++)delta=bodies[time],delta.enabled&&delta.update(clampedDelta);
for(time=0;time<len;time++)(delta=bodies[time])&&!delta.skipHash()&&this.checkHash(delta,hash,size);if(this.drawDebug)for(clampedDelta=this.debugGraphic,clampedDelta.clear(),time=0;time<len;time++)(delta=bodies[time])&&delta.willDrawDebug()&&delta.drawDebug(clampedDelta)}},checkHash:function(body,hash,size){var checked={},ymin=Math.floor(body.pos.y/size),xmax=Math.floor((body.pos.x+body.size.x)/size)+1,ymax=Math.floor((body.pos.y+body.size.y)/size)+1;for(size=Math.floor(body.pos.x/size);size<xmax;size++)for(var y=
ymin;y<ymax;y++)if(hash[size])if(hash[size][y]){for(var cell=hash[size][y],c=0;c<cell.length;c++)body.touches(cell[c])&&!checked[cell[c].id]&&(checked[cell[c].id]=!0,this.checkBodies(body,cell[c]));cell.push(body)}else hash[size][y]=[body];else hash[size]={},hash[size][y]=[body]},checkBodies:function(bodyA,bodyB){if(bodyA.collides!==COLLIDES.FIXED||bodyB.collides!==COLLIDES.FIXED)bodyA.checkAgainst&bodyB.type&&bodyA.check(bodyB),bodyB.checkAgainst&bodyA.type&&bodyB.check(bodyA),bodyA.collides&&bodyB.collides&&
bodyA.collides+bodyB.collides>COLLIDES.ACTIVE&&Solver(this,bodyA,bodyB)},setCollidesNever:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].collides=COLLIDES.NEVER;return this},setLite:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].collides=COLLIDES.LITE;return this},setPassive:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].collides=COLLIDES.PASSIVE;return this},setActive:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].collides=COLLIDES.ACTIVE;return this},
setFixed:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].collides=COLLIDES.FIXED;return this},setTypeNone:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].type=TYPE.NONE;return this},setTypeA:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].type=TYPE.A;return this},setTypeB:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].type=TYPE.B;return this},setAvsB:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].type=TYPE.A,bodies[i].checkAgainst=TYPE.B;return this},
setBvsA:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].type=TYPE.B,bodies[i].checkAgainst=TYPE.A;return this},setCheckAgainstNone:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].checkAgainst=TYPE.NONE;return this},setCheckAgainstA:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].checkAgainst=TYPE.A;return this},setCheckAgainstB:function(bodies){for(var i=0;i<bodies.length;i++)bodies[i].checkAgainst=TYPE.B;return this},shutdown:function(){this.removeAllListeners()},
destroy:function(){this.removeAllListeners();this.scene=null;this.bodies.clear();this.collisionMap=this.bodies=null}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$physics$impact$World.js.map
