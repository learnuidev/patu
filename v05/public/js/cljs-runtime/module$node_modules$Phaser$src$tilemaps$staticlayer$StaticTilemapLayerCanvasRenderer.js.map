{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$staticlayer$StaticTilemapLayerCanvasRenderer.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,qFAAA,CAAyG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA4HjJD,MAAAC,QAAA,CAtGuCC,QAAS,CAACC,QAAD,CAAWC,GAAX,CAAgBC,uBAAhB,CAAyCC,MAAzC,CAAiDC,YAAjD,CAChD,CACIH,GAAAI,KAAA,CAASF,MAAT,CAEIG,wBAAAA,CAAcL,GAAAM,YAClB,KAAIC,UAAYF,uBAAAG,OAEhB,IAAkB,CAAlB,GAAID,SAAJ,CAAA,CAKA,IAAIE,UAAYV,QAAAW,aAAhB,CACIC,YAAcZ,QAAAa,aADlB,CAEIC,WAAad,QAAAe,aAEjBH,YAAAI,UAAA,CAAsBf,GAAAgB,EAAtB,CAA6BhB,GAAAiB,EAA7B,CAAoCjB,GAAAkB,SAApC,CAAkDlB,GAAAmB,OAAlD;AAA8DnB,GAAAoB,OAA9D,CAEAX,UAAAY,SAAA,CAAmBnB,MAAAoB,OAAnB,CAEInB,aAAJ,EAGIM,SAAAc,mBAAA,CAA6BpB,YAA7B,CAA2C,CAACD,MAAAsB,QAA5C,CAA6DxB,GAAAyB,cAA7D,CAAgF,CAACvB,MAAAwB,QAAjF,CAAkG1B,GAAA2B,cAAlG,CAIA,CADAhB,WAAAiB,EACA,CADgB5B,GAAAgB,EAChB,CAAAL,WAAAkB,EAAA,CAAgB7B,GAAAiB,EAPpB,GAcIN,WAAAiB,EACA,EADiB1B,MAAAsB,QACjB,CADkCxB,GAAAyB,cAClC,CAAAd,WAAAkB,EAAA,EAAiB3B,MAAAwB,QAAjB,CAAkC1B,GAAA2B,cAftC,CAUIlB,UAAAqB,SAAA,CAAmBnB,WAAnB,CAAgCE,UAAhC,CAWAkB,SAAAA,CAAMhC,QAAAiC,eACNC,aAAAA,CAASjC,GAAAiC,OAEbF,SAAAG,KAAA,EAEArB,WAAAsB,cAAA,CAAyBJ,QAAzB,CAEIK,WAAAA,CAAQlC,MAAAkC,MAARA,CAAuBpC,GAAAoC,MAE3BL,SAAAM,YAAA;AAAkBnC,MAAAkC,MAAlB,CAAiCpC,GAAAoC,MAEjC,KAASE,GAAT,CAAa,CAAb,CAAgBA,GAAhB,CAAoB/B,SAApB,CAA+B+B,GAAA,EAA/B,CAMI,GAJIC,MAEAC,CAFOnC,uBAAA,CAAYiC,GAAZ,CAEPE,CAAAA,WAAAA,CAAUP,YAAA,CAAOM,MAAAE,MAAP,CAEd,CAQA,GAHIC,SACAC,CADQH,WAAAE,MAAAE,eAAA,EACRD,CAAAA,WAAAA,CAAgBH,WAAAK,0BAAA,CAAkCN,MAAAE,MAAlC,CAEpB,CACA,CACI,IAAIK,UAAYP,MAAAQ,MAAZD,CAAyB,CAA7B,CACIE,WAAaT,MAAAU,OAAbD,CAA2B,CAE/BjB,SAAAG,KAAA,EAEAH,SAAAmB,UAAA,CAAcX,MAAAY,OAAd,CAA4BL,SAA5B,CAAuCP,MAAAa,OAAvC,CAAqDJ,UAArD,CAEsB,EAAtB,GAAIT,MAAArB,SAAJ,EAEIa,QAAAsB,OAAA,CAAWd,MAAArB,SAAX,CAGJ,EAAIqB,MAAAe,MAAJ,EAAkBf,MAAAgB,MAAlB,GAEIxB,QAAAyB,MAAA,CAAWjB,MAAAe,MAAD,CAAe,EAAf,CAAoB,CAA9B;AAAkCf,MAAAgB,MAAD,CAAe,EAAf,CAAoB,CAArD,CAGJxB,SAAAM,YAAA,CAAkBD,UAAlB,CAA0BG,MAAAH,MAE1BL,SAAA0B,UAAA,CACIf,SADJ,CAEIC,WAAA3B,EAFJ,CAEqB2B,WAAA1B,EAFrB,CAGIsB,MAAAQ,MAHJ,CAGgBR,MAAAU,OAHhB,CAII,CAACH,SAJL,CAIgB,CAACE,UAJjB,CAKIT,MAAAQ,MALJ,CAKgBR,MAAAU,OALhB,CAQAlB,SAAA2B,QAAA,EA5BJ,CAgCJ3B,QAAA2B,QAAA,EA5FA,CANJ,CAvBiJ;",
"sources":["node_modules/Phaser/src/tilemaps/staticlayer/StaticTilemapLayerCanvasRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$staticlayer$StaticTilemapLayerCanvasRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.Tilemaps.StaticTilemapLayer#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.Tilemaps.StaticTilemapLayer} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar StaticTilemapLayerCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    src.cull(camera);\r\n\r\n    var renderTiles = src.culledTiles;\r\n    var tileCount = renderTiles.length;\r\n\r\n    if (tileCount === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var camMatrix = renderer._tempMatrix1;\r\n    var layerMatrix = renderer._tempMatrix2;\r\n    var calcMatrix = renderer._tempMatrix3;\r\n\r\n    layerMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\r\n\r\n    camMatrix.copyFrom(camera.matrix);\r\n\r\n    if (parentMatrix)\r\n    {\r\n        //  Multiply the camera by the parent matrix\r\n        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);\r\n\r\n        //  Undo the camera scroll\r\n        layerMatrix.e = src.x;\r\n        layerMatrix.f = src.y;\r\n\r\n        //  Multiply by the Sprite matrix, store result in calcMatrix\r\n        camMatrix.multiply(layerMatrix, calcMatrix);\r\n    }\r\n    else\r\n    {\r\n        layerMatrix.e -= camera.scrollX * src.scrollFactorX;\r\n        layerMatrix.f -= camera.scrollY * src.scrollFactorY;\r\n\r\n        //  Multiply by the Sprite matrix, store result in calcMatrix\r\n        camMatrix.multiply(layerMatrix, calcMatrix);\r\n    }\r\n\r\n    var ctx = renderer.currentContext;\r\n    var gidMap = src.gidMap;\r\n\r\n    ctx.save();\r\n\r\n    calcMatrix.copyToContext(ctx);\r\n\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    ctx.globalAlpha = camera.alpha * src.alpha;\r\n\r\n    for (var i = 0; i < tileCount; i++)\r\n    {\r\n        var tile = renderTiles[i];\r\n\r\n        var tileset = gidMap[tile.index];\r\n\r\n        if (!tileset)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var image = tileset.image.getSourceImage();\r\n        var tileTexCoords = tileset.getTileTextureCoordinates(tile.index);\r\n\r\n        if (tileTexCoords)\r\n        {\r\n            var halfWidth = tile.width / 2;\r\n            var halfHeight = tile.height / 2;\r\n    \r\n            ctx.save();\r\n\r\n            ctx.translate(tile.pixelX + halfWidth, tile.pixelY + halfHeight);\r\n\r\n            if (tile.rotation !== 0)\r\n            {\r\n                ctx.rotate(tile.rotation);\r\n            }\r\n    \r\n            if (tile.flipX || tile.flipY)\r\n            {\r\n                ctx.scale((tile.flipX) ? -1 : 1, (tile.flipY) ? -1 : 1);\r\n            }\r\n\r\n            ctx.globalAlpha = alpha * tile.alpha;\r\n    \r\n            ctx.drawImage(\r\n                image,\r\n                tileTexCoords.x, tileTexCoords.y,\r\n                tile.width, tile.height,\r\n                -halfWidth, -halfHeight,\r\n                tile.width, tile.height\r\n            );\r\n    \r\n            ctx.restore();\r\n        }\r\n    }\r\n\r\n    ctx.restore();\r\n};\r\n\r\nmodule.exports = StaticTilemapLayerCanvasRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","StaticTilemapLayerCanvasRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","cull","renderTiles","culledTiles","tileCount","length","camMatrix","_tempMatrix1","layerMatrix","_tempMatrix2","calcMatrix","_tempMatrix3","applyITRS","x","y","rotation","scaleX","scaleY","copyFrom","matrix","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","multiply","ctx","currentContext","gidMap","save","copyToContext","alpha","globalAlpha","i","tile","tileset","index","image","tileTexCoords","getSourceImage","getTileTextureCoordinates","halfWidth","width","halfHeight","height","translate","pixelX","pixelY","rotate","flipX","flipY","scale","drawImage","restore"]
}
