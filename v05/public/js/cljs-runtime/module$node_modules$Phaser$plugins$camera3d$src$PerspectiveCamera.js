shadow$provide.module$node_modules$Phaser$plugins$camera3d$src$PerspectiveCamera=function(global,require,module,exports){var Camera=require("module$node_modules$Phaser$plugins$camera3d$src$Camera");global=require("module$node_modules$Phaser$src$utils$Class");var tmpVec3=new (require("module$node_modules$Phaser$src$math$Vector3"));require=new global({Extends:Camera,initialize:function(scene,fieldOfView,viewportWidth,viewportHeight){void 0===fieldOfView&&(fieldOfView=80);void 0===viewportWidth&&(viewportWidth=
0);void 0===viewportHeight&&(viewportHeight=0);Camera.call(this,scene);this.viewportWidth=viewportWidth;this.viewportHeight=viewportHeight;this.fieldOfView=fieldOfView*Math.PI/180;this.update()},setFOV:function(value){this.fieldOfView=value*Math.PI/180;return this},update:function(){this.projection.perspective(this.fieldOfView,this.viewportWidth/this.viewportHeight,Math.abs(this.near),Math.abs(this.far));tmpVec3.copy(this.position).add(this.direction);this.view.lookAt(this.position,tmpVec3,this.up);
this.combined.copy(this.projection).multiply(this.view);this.invProjectionView.copy(this.combined).invert();this.billboardMatrixDirty=!0;this.updateChildren();return this}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$plugins$camera3d$src$PerspectiveCamera.js.map
