{
"version":3,
"file":"module$node_modules$Phaser$src$loader$XHRLoader.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,gDAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO5G,IAAIC,iBAAmBH,OAAA,CAAQ,wDAAR,CAuDvBC,OAAAC,QAAA,CAxCgBE,QAAS,CAACC,IAAD,CAAOC,iBAAP,CACzB,CACQC,iBAAAA,CAASJ,gBAAA,CAAiBG,iBAAjB,CAAoCD,IAAAG,YAApC,CAEb,KAAIC,IAAM,IAAIC,cAEdD,IAAAE,KAAA,CAAS,KAAT,CAAgBN,IAAAO,IAAhB,CAA0BL,iBAAAM,MAA1B,CAAwCN,iBAAAO,KAAxC,CAAqDP,iBAAAQ,SAArD,CAEAN,IAAAO,aAAA,CAAmBX,IAAAG,YAAAQ,aACnBP,IAAAQ,QAAA,CAAcV,iBAAAU,QAEVV;iBAAAW,OAAJ,EAAqBX,iBAAAY,YAArB,EAEIV,GAAAW,iBAAA,CAAqBb,iBAAAW,OAArB,CAAoCX,iBAAAY,YAApC,CAGAZ,kBAAAc,cAAJ,EAEIZ,GAAAW,iBAAA,CAAqB,kBAArB,CAAyCb,iBAAAc,cAAzC,CAGAd,kBAAAe,iBAAJ,EAEIb,GAAAa,iBAAA,CAAqBf,iBAAAe,iBAArB,CAKJb,IAAAc,OAAA,CAAalB,IAAAmB,OAAAC,KAAA,CAAiBpB,IAAjB,CAAuBI,GAAvB,CACbA,IAAAiB,QAAA,CAAcrB,IAAAsB,QAAAF,KAAA,CAAkBpB,IAAlB,CACdI,IAAAmB,WAAA,CAAiBvB,IAAAwB,WAAAJ,KAAA,CAAqBpB,IAArB,CAKjBI,IAAAqB,KAAA,EAEA,OAAOrB,IApCX,CAvB4G;",
"sources":["node_modules/Phaser/src/loader/XHRLoader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$XHRLoader\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar MergeXHRSettings = require('./MergeXHRSettings');\r\n\r\n/**\r\n * Creates a new XMLHttpRequest (xhr) object based on the given File and XHRSettings\r\n * and starts the download of it. It uses the Files own XHRSettings and merges them\r\n * with the global XHRSettings object to set the xhr values before download.\r\n *\r\n * @function Phaser.Loader.XHRLoader\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.File} file - The File to download.\r\n * @param {XHRSettingsObject} globalXHRSettings - The global XHRSettings object.\r\n *\r\n * @return {XMLHttpRequest} The XHR object.\r\n */\r\nvar XHRLoader = function (file, globalXHRSettings)\r\n{\r\n    var config = MergeXHRSettings(globalXHRSettings, file.xhrSettings);\r\n\r\n    var xhr = new XMLHttpRequest();\r\n\r\n    xhr.open('GET', file.src, config.async, config.user, config.password);\r\n\r\n    xhr.responseType = file.xhrSettings.responseType;\r\n    xhr.timeout = config.timeout;\r\n\r\n    if (config.header && config.headerValue)\r\n    {\r\n        xhr.setRequestHeader(config.header, config.headerValue);\r\n    }\r\n\r\n    if (config.requestedWith)\r\n    {\r\n        xhr.setRequestHeader('X-Requested-With', config.requestedWith);\r\n    }\r\n\r\n    if (config.overrideMimeType)\r\n    {\r\n        xhr.overrideMimeType(config.overrideMimeType);\r\n    }\r\n\r\n    // After a successful request, the xhr.response property will contain the requested data as a DOMString, ArrayBuffer, Blob, or Document (depending on what was set for responseType.)\r\n\r\n    xhr.onload = file.onLoad.bind(file, xhr);\r\n    xhr.onerror = file.onError.bind(file);\r\n    xhr.onprogress = file.onProgress.bind(file);\r\n\r\n    //  This is the only standard method, the ones above are browser additions (maybe not universal?)\r\n    // xhr.onreadystatechange\r\n\r\n    xhr.send();\r\n\r\n    return xhr;\r\n};\r\n\r\nmodule.exports = XHRLoader;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","MergeXHRSettings","XHRLoader","file","globalXHRSettings","config","xhrSettings","xhr","XMLHttpRequest","open","src","async","user","password","responseType","timeout","header","headerValue","setRequestHeader","requestedWith","overrideMimeType","onload","onLoad","bind","onerror","onError","onprogress","onProgress","send"]
}
