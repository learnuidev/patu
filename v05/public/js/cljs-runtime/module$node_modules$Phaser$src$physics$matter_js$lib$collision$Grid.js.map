{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$collision$Grid.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/collision/Grid.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$collision$Grid\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\r\n*\r\n* @class Grid\r\n*/\r\n\r\nvar Grid = {};\r\n\r\nmodule.exports = Grid;\r\n\r\nvar Pair = require('./Pair');\r\nvar Detector = require('./Detector');\r\nvar Common = require('../core/Common');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new grid.\r\n     * @method create\r\n     * @param {} options\r\n     * @return {grid} A new grid\r\n     */\r\n    Grid.create = function(options) {\r\n        var defaults = {\r\n            controller: Grid,\r\n            detector: Detector.collisions,\r\n            buckets: {},\r\n            pairs: {},\r\n            pairsList: [],\r\n            bucketWidth: 48,\r\n            bucketHeight: 48\r\n        };\r\n\r\n        return Common.extend(defaults, options);\r\n    };\r\n\r\n    /**\r\n     * The width of a single grid bucket.\r\n     *\r\n     * @property bucketWidth\r\n     * @type number\r\n     * @default 48\r\n     */\r\n\r\n    /**\r\n     * The height of a single grid bucket.\r\n     *\r\n     * @property bucketHeight\r\n     * @type number\r\n     * @default 48\r\n     */\r\n\r\n    /**\r\n     * Updates the grid.\r\n     * @method update\r\n     * @param {grid} grid\r\n     * @param {body[]} bodies\r\n     * @param {engine} engine\r\n     * @param {boolean} forceUpdate\r\n     */\r\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\r\n        var i, col, row,\r\n            world = engine.world,\r\n            buckets = grid.buckets,\r\n            bucket,\r\n            bucketId,\r\n            gridChanged = false;\r\n\r\n        // @if DEBUG\r\n        var metrics = engine.metrics;\r\n        metrics.broadphaseTests = 0;\r\n        // @endif\r\n\r\n        for (i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n\r\n            if (body.isSleeping && !forceUpdate)\r\n                continue;\r\n\r\n            // don't update out of world bodies\r\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\r\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\r\n                continue;\r\n\r\n            var newRegion = Grid._getRegion(grid, body);\r\n\r\n            // if the body has changed grid region\r\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\r\n\r\n                // @if DEBUG\r\n                metrics.broadphaseTests += 1;\r\n                // @endif\r\n\r\n                if (!body.region || forceUpdate)\r\n                    body.region = newRegion;\r\n\r\n                var union = Grid._regionUnion(newRegion, body.region);\r\n\r\n                // update grid buckets affected by region change\r\n                // iterate over the union of both regions\r\n                for (col = union.startCol; col <= union.endCol; col++) {\r\n                    for (row = union.startRow; row <= union.endRow; row++) {\r\n                        bucketId = Grid._getBucketId(col, row);\r\n                        bucket = buckets[bucketId];\r\n\r\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\r\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\r\n\r\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\r\n                                                && row >= body.region.startRow && row <= body.region.endRow);\r\n\r\n                        // remove from old region buckets\r\n                        if (!isInsideNewRegion && isInsideOldRegion) {\r\n                            if (isInsideOldRegion) {\r\n                                if (bucket)\r\n                                    Grid._bucketRemoveBody(grid, bucket, body);\r\n                            }\r\n                        }\r\n\r\n                        // add to new region buckets\r\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\r\n                            if (!bucket)\r\n                                bucket = Grid._createBucket(buckets, bucketId);\r\n                            Grid._bucketAddBody(grid, bucket, body);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // set the new region\r\n                body.region = newRegion;\r\n\r\n                // flag changes so we can update pairs\r\n                gridChanged = true;\r\n            }\r\n        }\r\n\r\n        // update pairs list only if pairs changed (i.e. a body changed region)\r\n        if (gridChanged)\r\n            grid.pairsList = Grid._createActivePairsList(grid);\r\n    };\r\n\r\n    /**\r\n     * Clears the grid.\r\n     * @method clear\r\n     * @param {grid} grid\r\n     */\r\n    Grid.clear = function(grid) {\r\n        grid.buckets = {};\r\n        grid.pairs = {};\r\n        grid.pairsList = [];\r\n    };\r\n\r\n    /**\r\n     * Finds the union of two regions.\r\n     * @method _regionUnion\r\n     * @private\r\n     * @param {} regionA\r\n     * @param {} regionB\r\n     * @return {} region\r\n     */\r\n    Grid._regionUnion = function(regionA, regionB) {\r\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\r\n            endCol = Math.max(regionA.endCol, regionB.endCol),\r\n            startRow = Math.min(regionA.startRow, regionB.startRow),\r\n            endRow = Math.max(regionA.endRow, regionB.endRow);\r\n\r\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\r\n    };\r\n\r\n    /**\r\n     * Gets the region a given body falls in for a given grid.\r\n     * @method _getRegion\r\n     * @private\r\n     * @param {} grid\r\n     * @param {} body\r\n     * @return {} region\r\n     */\r\n    Grid._getRegion = function(grid, body) {\r\n        var bounds = body.bounds,\r\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\r\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\r\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\r\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\r\n\r\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\r\n    };\r\n\r\n    /**\r\n     * Creates a region.\r\n     * @method _createRegion\r\n     * @private\r\n     * @param {} startCol\r\n     * @param {} endCol\r\n     * @param {} startRow\r\n     * @param {} endRow\r\n     * @return {} region\r\n     */\r\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\r\n        return { \r\n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\r\n            startCol: startCol, \r\n            endCol: endCol, \r\n            startRow: startRow, \r\n            endRow: endRow \r\n        };\r\n    };\r\n\r\n    /**\r\n     * Gets the bucket id at the given position.\r\n     * @method _getBucketId\r\n     * @private\r\n     * @param {} column\r\n     * @param {} row\r\n     * @return {string} bucket id\r\n     */\r\n    Grid._getBucketId = function(column, row) {\r\n        return 'C' + column + 'R' + row;\r\n    };\r\n\r\n    /**\r\n     * Creates a bucket.\r\n     * @method _createBucket\r\n     * @private\r\n     * @param {} buckets\r\n     * @param {} bucketId\r\n     * @return {} bucket\r\n     */\r\n    Grid._createBucket = function(buckets, bucketId) {\r\n        var bucket = buckets[bucketId] = [];\r\n        return bucket;\r\n    };\r\n\r\n    /**\r\n     * Adds a body to a bucket.\r\n     * @method _bucketAddBody\r\n     * @private\r\n     * @param {} grid\r\n     * @param {} bucket\r\n     * @param {} body\r\n     */\r\n    Grid._bucketAddBody = function(grid, bucket, body) {\r\n        // add new pairs\r\n        for (var i = 0; i < bucket.length; i++) {\r\n            var bodyB = bucket[i];\r\n\r\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\r\n                continue;\r\n\r\n            // keep track of the number of buckets the pair exists in\r\n            // important for Grid.update to work\r\n            var pairId = Pair.id(body, bodyB),\r\n                pair = grid.pairs[pairId];\r\n\r\n            if (pair) {\r\n                pair[2] += 1;\r\n            } else {\r\n                grid.pairs[pairId] = [body, bodyB, 1];\r\n            }\r\n        }\r\n\r\n        // add to bodies (after pairs, otherwise pairs with self)\r\n        bucket.push(body);\r\n    };\r\n\r\n    /**\r\n     * Removes a body from a bucket.\r\n     * @method _bucketRemoveBody\r\n     * @private\r\n     * @param {} grid\r\n     * @param {} bucket\r\n     * @param {} body\r\n     */\r\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\r\n        // remove from bucket\r\n        bucket.splice(Common.indexOf(bucket, body), 1);\r\n\r\n        // update pair counts\r\n        for (var i = 0; i < bucket.length; i++) {\r\n            // keep track of the number of buckets the pair exists in\r\n            // important for _createActivePairsList to work\r\n            var bodyB = bucket[i],\r\n                pairId = Pair.id(body, bodyB),\r\n                pair = grid.pairs[pairId];\r\n\r\n            if (pair)\r\n                pair[2] -= 1;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Generates a list of the active pairs in the grid.\r\n     * @method _createActivePairsList\r\n     * @private\r\n     * @param {} grid\r\n     * @return [] pairs\r\n     */\r\n    Grid._createActivePairsList = function(grid) {\r\n        var pairKeys,\r\n            pair,\r\n            pairs = [];\r\n\r\n        // grid.pairs is used as a hashmap\r\n        pairKeys = Common.keys(grid.pairs);\r\n\r\n        // iterate over grid.pairs\r\n        for (var k = 0; k < pairKeys.length; k++) {\r\n            pair = grid.pairs[pairKeys[k]];\r\n\r\n            // if pair exists in at least one bucket\r\n            // it is a pair that needs further collision testing so push it\r\n            if (pair[2] > 0) {\r\n                pairs.push(pair);\r\n            } else {\r\n                delete grid.pairs[pairKeys[k]];\r\n            }\r\n        }\r\n\r\n        return pairs;\r\n    };\r\n    \r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Grid","Pair","Detector","Common","create","Grid.create","options","extend","defaults","controller","detector","collisions","buckets","pairs","pairsList","bucketWidth","bucketHeight","update","Grid.update","grid","bodies","engine","forceUpdate","row","world","gridChanged","metrics","i","broadphaseTests","length","body","isSleeping","bounds","max","x","min","y","newRegion","_getRegion","region","id","union","_regionUnion","col","startCol","endCol","startRow","endRow","bucketId","_getBucketId","bucket","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","clear","Grid.clear","Grid._regionUnion","regionA","regionB","_createRegion","Math","Grid._getRegion","floor","Grid._createRegion","Grid._getBucketId","column","Grid._createBucket","Grid._bucketAddBody","bodyB","isStatic","pairId","pair","push","Grid._bucketRemoveBody","splice","indexOf","Grid._createActivePairsList","pairKeys","keys","k"]
}
