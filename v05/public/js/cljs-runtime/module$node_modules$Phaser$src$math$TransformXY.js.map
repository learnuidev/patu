{
"version":3,
"file":"module$node_modules$Phaser$src$math$TransformXY.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,gDAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO5G,IAAIC,QAAUH,OAAA,CAAQ,6CAAR,CA0CdC,OAAAC,QAAA,CAtBkBE,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,SAAP,CAAkBC,SAAlB,CAA6BC,QAA7B,CAAuCC,MAAvC,CAA+CC,MAA/C,CAAuDC,MAAvD,CAC3B,CACmBC,IAAAA,EAAf,GAAID,MAAJ,GAA4BA,MAA5B,CAAqC,IAAIT,OAAzC,CAEA,KAAIW,UAAYC,IAAAC,IAAA,CAASP,QAAT,CAAhB,CACIQ,UAAYF,IAAAG,IAAA,CAAST,QAAT,CAGZU,SAAAA,CAAIF,SAAJE,CAAgBT,MAChBU,OAAAA,EAAIN,SACJO,UAAAA,CAAI,CAACP,SAALO,CAAiBV,MACjBW,OAAAA,EAAIL,SAGJM,UAAAA,CAAK,CAALA,EAAWJ,QAAXI,CAAeD,MAAfC,CAAqBF,SAArBE,CAAyB,CAACH,MAA1BG,CAEJX,OAAAP,EAAA,CAAYiB,MAAZ;AAAgBC,SAAhB,CAAqBlB,CAArB,CAA2B,CAACgB,SAA5B,CAAgCE,SAAhC,CAAqCjB,CAArC,EAA6CE,SAA7C,CAAyDa,SAAzD,CAA+Dd,SAA/D,CAA2Ee,MAA3E,EAAiFC,SACjFX,OAAAN,EAAA,CAAYa,QAAZ,CAAgBI,SAAhB,CAAqBjB,CAArB,CAA2B,CAACc,MAA5B,CAAgCG,SAAhC,CAAqClB,CAArC,EAA6C,CAACG,SAA9C,CAA0DW,QAA1D,CAAgEZ,SAAhE,CAA4Ea,MAA5E,EAAkFG,SAElF,OAAOX,OAlBX,CA5B4G;",
"sources":["node_modules/Phaser/src/math/TransformXY.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$TransformXY\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Vector2 = require('./Vector2');\r\n\r\n/**\r\n * Takes the `x` and `y` coordinates and transforms them into the same space as\r\n * defined by the position, rotation and scale values.\r\n *\r\n * @function Phaser.Math.TransformXY\r\n * @since 3.0.0\r\n *\r\n * @param {number} x - The x coordinate to be transformed.\r\n * @param {number} y - The y coordinate to be transformed.\r\n * @param {number} positionX - Horizontal position of the transform point.\r\n * @param {number} positionY - Vertical position of the transform point.\r\n * @param {number} rotation - Rotation of the transform point, in radians.\r\n * @param {number} scaleX - Horizontal scale of the transform point.\r\n * @param {number} scaleY - Vertical scale of the transform point.\r\n * @param {(Phaser.Math.Vector2|Phaser.Geom.Point|object)} [output] - The output vector, point or object for the translated coordinates.\r\n *\r\n * @return {(Phaser.Math.Vector2|Phaser.Geom.Point|object)} The translated point.\r\n */\r\nvar TransformXY = function (x, y, positionX, positionY, rotation, scaleX, scaleY, output)\r\n{\r\n    if (output === undefined) { output = new Vector2(); }\r\n\r\n    var radianSin = Math.sin(rotation);\r\n    var radianCos = Math.cos(rotation);\r\n\r\n    // Rotate and Scale\r\n    var a = radianCos * scaleX;\r\n    var b = radianSin * scaleX;\r\n    var c = -radianSin * scaleY;\r\n    var d = radianCos * scaleY;\r\n\r\n    //  Invert\r\n    var id = 1 / ((a * d) + (c * -b));\r\n\r\n    output.x = (d * id * x) + (-c * id * y) + (((positionY * c) - (positionX * d)) * id);\r\n    output.y = (a * id * y) + (-b * id * x) + (((-positionY * a) + (positionX * b)) * id);\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = TransformXY;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Vector2","TransformXY","x","y","positionX","positionY","rotation","scaleX","scaleY","output","undefined","radianSin","Math","sin","radianCos","cos","a","b","c","d","id"]
}
