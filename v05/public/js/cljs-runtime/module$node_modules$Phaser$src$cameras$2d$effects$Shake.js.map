{
"version":3,
"file":"module$node_modules$Phaser$src$cameras$2d$effects$Shake.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/cameras/2d/effects/Shake.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$cameras$2d$effects$Shake\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../../math/Clamp');\r\nvar Class = require('../../../utils/Class');\r\nvar Vector2 = require('../../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Camera Shake effect.\r\n *\r\n * This effect will shake the camera viewport by a random amount, bounded by the specified intensity, each frame.\r\n *\r\n * Only the camera viewport is moved. None of the objects it is displaying are impacted, i.e. their positions do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect if required.\r\n *\r\n * @class Shake\r\n * @memberOf Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.5.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\r\nvar Shake = new Class({\r\n\r\n    initialize:\r\n\r\n    function Shake (camera)\r\n    {\r\n        /**\r\n         * The Camera this effect belongs to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @readOnly\r\n         * @since 3.5.0\r\n         */\r\n        this.camera = camera;\r\n\r\n        /**\r\n         * Is this effect actively running?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#isRunning\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @default false\r\n         * @since 3.5.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * The duration of the effect, in milliseconds.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#duration\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @default 0\r\n         * @since 3.5.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * The intensity of the effect. Use small float values. The default when the effect starts is 0.05.\r\n         * This is a Vector2 object, allowing you to control the shake intensity independently across x and y.\r\n         * You can modify this value while the effect is active to create more varied shake effects.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#intensity\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.5.0\r\n         */\r\n        this.intensity = new Vector2();\r\n\r\n        /**\r\n         * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#progress\r\n         * @type {number}\r\n         * @since 3.5.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Effect elapsed timer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#_elapsed\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._elapsed = 0;\r\n\r\n        /**\r\n         * How much to offset the camera by horizontally.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#_offsetX\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._offsetX = 0;\r\n\r\n        /**\r\n         * How much to offset the camera by vertically.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#_offsetY\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._offsetY = 0;\r\n\r\n        /**\r\n         * @callback CameraShakeCallback\r\n         *\r\n         * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.\r\n         * @param {number} progress - The progress of the effect. A value between 0 and 1.\r\n         */\r\n\r\n        /**\r\n         * This callback is invoked every frame for the duration of the effect.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#_onUpdate\r\n         * @type {?CameraShakeCallback}\r\n         * @private\r\n         * @default null\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdate;\r\n\r\n        /**\r\n         * On Complete callback scope.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#_onUpdateScope\r\n         * @type {any}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdateScope;\r\n    },\r\n\r\n    /**\r\n     * This event is fired when the shake effect begins to run on a camera.\r\n     *\r\n     * @event CameraShakeStartEvent\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera that the effect began on.\r\n     * @param {Phaser.Cameras.Scene2D.Effects.Shake} effect - A reference to the effect instance.\r\n     * @param {integer} duration - The duration of the effect.\r\n     * @param {number} intensity - The intensity of the effect.\r\n     */\r\n\r\n    /**\r\n     * This event is fired when the shake effect completes.\r\n     *\r\n     * @event CameraShakeCompleteEvent\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera that the effect began on.\r\n     * @param {Phaser.Cameras.Scene2D.Effects.Shake} effect - A reference to the effect instance.\r\n     */\r\n\r\n    /**\r\n     * Shakes the Camera by the given intensity over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Shake#start\r\n     * @fires CameraShakeStartEvent\r\n     * @fires CameraShakeCompleteEvent\r\n     * @since 3.5.0\r\n     *\r\n     * @param {integer} [duration=100] - The duration of the effect in milliseconds.\r\n     * @param {number} [intensity=0.05] - The intensity of the shake.\r\n     * @param {boolean} [force=false] - Force the shake effect to start immediately, even if already running.\r\n     * @param {CameraShakeCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n     */\r\n    start: function (duration, intensity, force, callback, context)\r\n    {\r\n        if (duration === undefined) { duration = 100; }\r\n        if (intensity === undefined) { intensity = 0.05; }\r\n        if (force === undefined) { force = false; }\r\n        if (callback === undefined) { callback = null; }\r\n        if (context === undefined) { context = this.camera.scene; }\r\n\r\n        if (!force && this.isRunning)\r\n        {\r\n            return this.camera;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this.duration = duration;\r\n        this.progress = 0;\r\n\r\n        if (typeof intensity === 'number')\r\n        {\r\n            this.intensity.set(intensity);\r\n        }\r\n        else\r\n        {\r\n            this.intensity.set(intensity.x, intensity.y);\r\n        }\r\n\r\n        this._elapsed = 0;\r\n        this._offsetX = 0;\r\n        this._offsetY = 0;\r\n\r\n        this._onUpdate = callback;\r\n        this._onUpdateScope = context;\r\n\r\n        this.camera.emit('camerashakestart', this.camera, this, duration, intensity);\r\n\r\n        return this.camera;\r\n    },\r\n\r\n    /**\r\n     * The pre-render step for this effect. Called automatically by the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Shake#preRender\r\n     * @since 3.5.0\r\n     */\r\n    preRender: function ()\r\n    {\r\n        if (this.isRunning)\r\n        {\r\n            this.camera.matrix.translate(this._offsetX, this._offsetY);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The main update loop for this effect. Called automatically by the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Shake#update\r\n     * @since 3.5.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._elapsed += delta;\r\n\r\n        this.progress = Clamp(this._elapsed / this.duration, 0, 1);\r\n\r\n        if (this._onUpdate)\r\n        {\r\n            this._onUpdate.call(this._onUpdateScope, this.camera, this.progress);\r\n        }\r\n\r\n        if (this._elapsed < this.duration)\r\n        {\r\n            var intensity = this.intensity;\r\n            var width = this.camera._cw;\r\n            var height = this.camera._ch;\r\n            var zoom = this.camera.zoom;\r\n\r\n            this._offsetX = (Math.random() * intensity.x * width * 2 - intensity.x * width) * zoom;\r\n            this._offsetY = (Math.random() * intensity.y * height * 2 - intensity.y * height) * zoom;\r\n\r\n            if (this.camera.roundPixels)\r\n            {\r\n                this._offsetX |= 0;\r\n                this._offsetY |= 0;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.effectComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called internally when the effect completes.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Shake#effectComplete\r\n     * @since 3.5.0\r\n     */\r\n    effectComplete: function ()\r\n    {\r\n        this._offsetX = 0;\r\n        this._offsetY = 0;\r\n\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n\r\n        this.isRunning = false;\r\n\r\n        this.camera.emit('camerashakecomplete', this.camera, this);\r\n    },\r\n\r\n    /**\r\n     * Resets this camera effect.\r\n     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Shake#reset\r\n     * @since 3.5.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.isRunning = false;\r\n\r\n        this._offsetX = 0;\r\n        this._offsetY = 0;\r\n\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n    },\r\n\r\n    /**\r\n     * Destroys this effect, releasing it from the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Shake#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.camera = null;\r\n        this.intensity = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Shake;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Clamp","Class","Vector2","Shake","initialize","camera","isRunning","duration","intensity","_offsetY","_offsetX","_elapsed","progress","start","force","callback","context","undefined","scene","set","x","y","_onUpdate","_onUpdateScope","emit","preRender","matrix","translate","update","time","delta","call","width","_cw","height","_ch","zoom","Math","random","roundPixels","effectComplete","reset","destroy"]
}
