{
"version":3,
"file":"module$node_modules$Phaser$src$physics$arcade$GetOverlapY.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOtH,IAAIC,MAAQH,OAAA,CAAQ,qDAAR,CA8FZC,OAAAC,QAAA,CA/EkBE,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAeC,WAAf,CAA4BC,IAA5B,CAC3B,CACI,IAAIC,QAAU,CACVC,KAAAA,CAAaL,KAAAM,UAAA,EAAbD,CAAiCJ,KAAAK,UAAA,EAAjCD,CAAqDF,IAEvC,EAAlB,GAAIH,KAAAO,IAAJ,EAAqC,CAArC,GAAuBN,KAAAM,IAAvB,EAGIP,KAAAQ,SACA,CADiB,CAAA,CACjB,CAAAP,KAAAO,SAAA,CAAiB,CAAA,CAJrB,EAMSR,KAAAO,IAAJ,CAAgBN,KAAAM,IAAhB,EAGDH,OAEA,CAFUJ,KAAAS,OAEV,CAFyBR,KAAAS,EAEzB,CAAKN,OAAL,CAAeC,IAAf,EAA6B,CAACH,WAA9B,EAA4E,CAAA,CAA5E,GAA8CF,KAAAW,eAAAC,KAA9C,EAAiH,CAAA,CAAjH,GAAqFX,KAAAU,eAAAE,GAArF;AAEIT,OAFJ,CAEc,CAFd,EAMIJ,KAAAc,SAAAC,KAYA,CAZsB,CAAA,CAYtB,CAXAf,KAAAc,SAAAF,KAWA,CAXsB,CAAA,CAWtB,CATAX,KAAAa,SAAAC,KASA,CATsB,CAAA,CAStB,CARAd,KAAAa,SAAAD,GAQA,CARoB,CAAA,CAQpB,CANIZ,KAAAe,YAMJ,GAN0BlB,KAAAmB,YAM1B,GAJIjB,KAAAkB,QAAAH,KACA,CADqB,CAAA,CACrB,CAAAf,KAAAkB,QAAAN,KAAA,CAAqB,CAAA,CAGzB,EAAIZ,KAAAgB,YAAJ,GAA0BlB,KAAAmB,YAA1B,GAEIhB,KAAAiB,QAAAH,KACA,CADqB,CAAA,CACrB,CAAAd,KAAAiB,QAAAL,GAAA,CAAmB,CAAA,CAHvB,CAlBJ,CALC,EA8BIb,KAAAO,IA9BJ,CA8BgBN,KAAAM,IA9BhB,GAiCDH,OAEA,CAFUJ,KAAAU,EAEV,CAFoBT,KAAAQ,OAEpB,CAAK,CAACL,OAAN,CAAgBC,IAAhB,EAA8B,CAACH,WAA/B,EAA2E,CAAA,CAA3E,GAA+CF,KAAAW,eAAAE,GAA/C,EAAkH,CAAA,CAAlH,GAAoFZ,KAAAU,eAAAC,KAApF,CAEIR,OAFJ,CAEc,CAFd,EAMIJ,KAAAc,SAAAC,KAYA,CAZsB,CAAA,CAYtB,CAXAf,KAAAc,SAAAD,GAWA,CAXoB,CAAA,CAWpB,CATAZ,KAAAa,SAAAC,KASA,CATsB,CAAA,CAStB,CARAd,KAAAa,SAAAF,KAQA;AARsB,CAAA,CAQtB,CANIX,KAAAe,YAMJ,GAN0BlB,KAAAmB,YAM1B,GAJIjB,KAAAkB,QAAAH,KACA,CADqB,CAAA,CACrB,CAAAf,KAAAkB,QAAAL,GAAA,CAAmB,CAAA,CAGvB,EAAIb,KAAAgB,YAAJ,GAA0BlB,KAAAmB,YAA1B,GAEIhB,KAAAiB,QAAAH,KACA,CADqB,CAAA,CACrB,CAAAd,KAAAiB,QAAAN,KAAA,CAAqB,CAAA,CAHzB,CAlBJ,CAnCC,CA8DLZ,MAAAmB,SAAA,CAAiBf,OAGjB,OAFAH,MAAAkB,SAEA,CAFiBf,OAzErB,CAvBsH;",
"sources":["node_modules/Phaser/src/physics/arcade/GetOverlapY.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$arcade$GetOverlapY\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar CONST = require('./const');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Physics.Arcade.GetOverlapY\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.Body} body1 - [description]\r\n * @param {Phaser.Physics.Arcade.Body} body2 - [description]\r\n * @param {boolean} overlapOnly - [description]\r\n * @param {number} bias - [description]\r\n *\r\n * @return {number} [description]\r\n */\r\nvar GetOverlapY = function (body1, body2, overlapOnly, bias)\r\n{\r\n    var overlap = 0;\r\n    var maxOverlap = body1.deltaAbsY() + body2.deltaAbsY() + bias;\r\n\r\n    if (body1._dy === 0 && body2._dy === 0)\r\n    {\r\n        //  They overlap but neither of them are moving\r\n        body1.embedded = true;\r\n        body2.embedded = true;\r\n    }\r\n    else if (body1._dy > body2._dy)\r\n    {\r\n        //  Body1 is moving down and/or Body2 is moving up\r\n        overlap = body1.bottom - body2.y;\r\n\r\n        if ((overlap > maxOverlap && !overlapOnly) || body1.checkCollision.down === false || body2.checkCollision.up === false)\r\n        {\r\n            overlap = 0;\r\n        }\r\n        else\r\n        {\r\n            body1.touching.none = false;\r\n            body1.touching.down = true;\r\n\r\n            body2.touching.none = false;\r\n            body2.touching.up = true;\r\n\r\n            if (body2.physicsType === CONST.STATIC_BODY)\r\n            {\r\n                body1.blocked.none = false;\r\n                body1.blocked.down = true;\r\n            }\r\n\r\n            if (body1.physicsType === CONST.STATIC_BODY)\r\n            {\r\n                body2.blocked.none = false;\r\n                body2.blocked.up = true;\r\n            }\r\n        }\r\n    }\r\n    else if (body1._dy < body2._dy)\r\n    {\r\n        //  Body1 is moving up and/or Body2 is moving down\r\n        overlap = body1.y - body2.bottom;\r\n\r\n        if ((-overlap > maxOverlap && !overlapOnly) || body1.checkCollision.up === false || body2.checkCollision.down === false)\r\n        {\r\n            overlap = 0;\r\n        }\r\n        else\r\n        {\r\n            body1.touching.none = false;\r\n            body1.touching.up = true;\r\n\r\n            body2.touching.none = false;\r\n            body2.touching.down = true;\r\n\r\n            if (body2.physicsType === CONST.STATIC_BODY)\r\n            {\r\n                body1.blocked.none = false;\r\n                body1.blocked.up = true;\r\n            }\r\n\r\n            if (body1.physicsType === CONST.STATIC_BODY)\r\n            {\r\n                body2.blocked.none = false;\r\n                body2.blocked.down = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    //  Resets the overlapY to zero if there is no overlap, or to the actual pixel value if there is\r\n    body1.overlapY = overlap;\r\n    body2.overlapY = overlap;\r\n\r\n    return overlap;\r\n};\r\n\r\nmodule.exports = GetOverlapY;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","CONST","GetOverlapY","body1","body2","overlapOnly","bias","overlap","maxOverlap","deltaAbsY","_dy","embedded","bottom","y","checkCollision","down","up","touching","none","physicsType","STATIC_BODY","blocked","overlapY"]
}
