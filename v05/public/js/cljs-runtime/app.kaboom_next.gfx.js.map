{"version":3,"sources":["app/kaboom_next/gfx.cljs"],"mappings":"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","names":["app.kaboom-next.gfx/vert-template","app.kaboom-next.gfx/frag-template","app.kaboom-next.gfx/vert","app.kaboom-next.gfx/frag","app.kaboom-next.gfx/clear","js/console.clear","app.kaboom-next.gfx/log","val","js/console.log","cljs.spec.alpha/def-impl","cljs.core/number?","cljs.spec.alpha/map-spec-impl","G__61155","cljs.core/map?","cljs.core/contains?","G__61156","app.kaboom-next.gfx/canvas","goog.dom/createElement","app.kaboom-next.gfx/gl","cljs.core/clj->js","js/app","js/app.kaboom-next","js/app.kaboom-next.gfx","js/app.kaboom-next.gfx.tex-filter","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__61157","cljs.core/MultiFn","cljs.core.symbol","app.kaboom-next.gfx/tex-filter","_","filter","gl","js/app.kaboom-next.gfx.shader-type","fexpr__61158","app.kaboom-next.gfx/shader-type","type","js/app.kaboom-next.gfx.create-shader","fexpr__61159","app.kaboom-next.gfx/create-shader","app.kaboom-next.gfx/vert-shader","app.kaboom-next.gfx/frag-shader","app.kaboom-next.gfx/fcode","clojure.string/replace","app.kaboom-next.gfx/vcode","app.kaboom-next.gfx/id","app.kaboom-next.gfx/bind","id","app.kaboom-next.gfx/unbind","app.kaboom-next.gfx/bind-attribs","app.kaboom-next.gfx/send","uniform","app.kaboom-next.gfx/make-program","vert","frag","app.kaboom-next.gfx/gfx-init","gconf"],"sourcesContent":["(ns app.kaboom-next.gfx\n  (:require [goog.dom :as dom]\n            [clojure.string :as st]\n            [clojure.test.check.generators]\n            [clojure.spec.alpha :as s]))\n\n;; templates\n(def vert-template\n  \"\n  attribute vec3 a_pos;\n  attribute vec2 a_uv;\n  attribute vec4 a_color;\n\n  varying vec3 v_pos;\n  varying vec2 v_uv;\n  varying vec4 v_color;\n\n  vec4 def_vert() {\n  \treturn vec4(a_pos, 1.0);\n  }\n\n  {{user}}\n\n  void main() {\n  \tvec4 pos = vert(a_pos, a_uv, a_color);\n  \tv_pos = a_pos;\n  \tv_uv = a_uv;\n  \tv_color = a_color;\n  \tgl_Position = pos;\n  }\n  \")\n(def frag-template\n  \"\n  precision mediump float;\n\n  varying vec3 v_pos;\n  varying vec2 v_uv;\n  varying vec4 v_color;\n\n  uniform sampler2D u_tex;\n\n  vec4 def_frag() {\n  \treturn v_color * texture2D(u_tex, v_uv);\n  }\n\n  {{user}}\n\n  void main() {\n  \tgl_FragColor = frag(v_pos, v_uv, v_color, u_tex);\n  \tif (gl_FragColor.a == 0.0) {\n  \t\tdiscard;\n  \t}\n  }\n  \")\n\n(comment\n  (log (st/replace frag-template \"{{user}}\" \"john.doe@gmail.com\")))\n;; ===\n(def vert\n  \"vec4 vert(vec3 pos, vec2 uv, vec4 color) {\n\t    return def_vert();\n }\")\n(def frag\n  \"vec4 frag(vec3 pos, vec2 uv, vec4 color, sampler2D tex) {\n\t    return def_frag();\n   }\")\n\n(defn clear []\n  (js/console.clear))\n(defn log [val]\n  (clear)\n  (js/console.log val))\n\n;;\n(s/def :color/r number?)\n(s/def :color/g number?)\n(s/def :color/b number?)\n(s/def :color/a number?)\n(s/def ::color (s/keys :req-un [:color/r :color/g :color/b]\n                       :opt-un [:color/a]))\n\n(s/def :gfx/clearColor ::color)\n(s/def :gfx/scale number?)\n(s/def :gfx/texFilter #{:nearest \"nearest\" :linear \"linear\"})\n\n(s/def ::gfx (s/keys :req-un [:gfx/clearColor :gfx/scale :gfx/texFilter]))\n(comment\n  (s/valid? ::gfx {:clearColor {:r 1 :g 2 :b 1}\n                   :scale 1\n                   :texFilter :nearest}))\n\n(comment\n  (s/valid? :gfx/texFilter :nearest)\n  (s/valid? :gfx/texFilter \"linear\"))\n\n(def canvas (dom/createElement \"canvas\"))\n(def gl (.getContext canvas \"webgl\" (clj->js {:antialias true\n                                              :depth true\n                                              :stencil true\n                                              :alpha true\n                                              :preserveDrawingBuffer true})))\n\n;; 1. tex filter\n(comment\n  (log (.-NEAREST  gl))\n  (log (.-LINEAR  gl)))\n(defmulti tex-filter (fn [_ filter] filter))\n(defmethod tex-filter :nearest [gl _]\n  (.-NEAREST gl))\n\n(defmethod tex-filter :linear [gl _]\n  (.-LINEAR gl))\n\n(defmethod tex-filter :default [gl _]\n  (tex-filter gl :nearest))\n\n(comment\n  (tex-filter gl :nearest)\n  (tex-filter gl :linear)\n  (tex-filter gl))\n\n;; == 2. shader\n(defmulti shader-type (fn [_ type] type))\n(defmethod shader-type :vertex [gl _]\n  (.-VERTEX_SHADER gl))\n\n(defmethod shader-type :frag [gl _]\n  (.-FRAGMENT_SHADER gl))\n\n(defmethod shader-type :default [gl _]\n  (shader-type gl :vertex))\n(comment\n  (shader-type gl :frag)\n  (shader-type gl :vertex))\n\n;; 3. create shader\n(comment\n  (log (.createShader gl (.-VERTEX_SHADER gl)))\n  (log (.createShader gl (.-FRAGMENT_SHADER gl))))\n(defmulti create-shader (fn [_ type] type))\n\n(defmethod create-shader :vertex [gl _]\n  (.createShader gl (shader-type gl :vertex)))\n\n(defmethod create-shader :frag [gl _]\n  (.createShader gl (shader-type gl :frag)))\n\n(def vert-shader (create-shader gl :vertex))\n(def frag-shader (create-shader gl :frag))\n\n;; vcode / fcode\n(comment\n  (clear)\n  (log (st/replace frag-template \"{{user}}\" \"hello\"))\n  (log (st/replace frag-template \"{{user}}\" frag))\n  (log (st/replace vert-template \"{{user}}\" \"hello\"))\n  (log (st/replace vert-template \"{{user}}\" vert)))\n\n(def fcode  (st/replace frag-template \"{{user}}\" frag))\n(def vcode  (st/replace vert-template \"{{user}}\" vert))\n(comment\n  (log fcode)\n  (log vcode)\n  (log nil))\n\n;; 4. Shader source\n(comment\n  (.shaderSource gl vert-shader vcode)\n  (.shaderSource gl frag-shader fcode))\n;; 5. Compile Shader\n(comment\n  (.compileShader gl vert-shader)\n  (.compileShader gl frag-shader))\n\n;;\n(.shaderSource gl vert-shader vcode)\n(.shaderSource gl frag-shader fcode)\n;; Compile Shader\n\n(.compileShader gl vert-shader)\n(.compileShader gl frag-shader)\n;; 6. Shader log\n(comment\n  (let [msg (.getShaderInfoLog gl vert-shader)]\n    (when (seq msg)\n      (throw (js/Error. msg))))\n  (let [msg (.getShaderInfoLog gl frag-shader)]\n    (when (seq msg)\n      (throw (js/Error. msg)))))\n\n;; 7. id\n(def id (.createProgram gl))\n\n;; 8. Attach Shader\n(comment)\n(.attachShader gl id vert-shader)\n(.attachShader gl id frag-shader)\n\n;; 9. bindAttribLocation\n(comment)\n(.bindAttribLocation gl id 0 \"a_pos\")\n(.bindAttribLocation gl id 1 \"a_uv\")\n(.bindAttribLocation gl id 2 \"a_color\")\n\n;; 10. link program\n(comment)\n(.linkProgram gl id)\n;; return values\n;; 11. bind\n(defn bind [gl id]\n  (.useProgram gl id))\n(comment\n  (bind gl id))\n;; unbind\n(defn unbind [gl]\n  (.useProgram gl nil))\n\n;; bind attribs\n(defn bind-attribs [gl])\n\n;; send\n(defn send [gl uniform])\n(comment\n  (unbind gl))\n;; === MAKE PROGRAM\n(defn make-program [vert frag]\n  {:vert vert :frag frag})\n(comment\n  (make-program vert frag))\n\n(defn gfx-init [gl gconf])\n"]}