{
"version":3,
"file":"module$lib$audio.js",
"lineCount":112,
"mappings":"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",
"sources":["lib/audio.js"],
"sourcesContent":["import { clamp } from \"/lib/math.js\";\n\nconst MIN_GAIN = 0;\nconst MAX_GAIN = 3;\nconst MIN_SPEED = 0;\nconst MAX_SPEED = 3;\nconst MIN_DETUNE = -1200;\nconst MAX_DETUNE = 1200;\n\nfunction audioInit() {\n  const audio = (() => {\n    // @ts-ignore\n    const ctx = new (window.AudioContext || window.webkitAudioContext)();\n    const gainNode = ctx.createGain();\n    const masterNode = gainNode;\n\n    masterNode.connect(ctx.destination);\n\n    return {\n      ctx,\n      gainNode,\n      masterNode\n    };\n  })();\n\n  // get / set master volume\n  function volume(v) {\n    if (v !== undefined) {\n      audio.gainNode.gain.value = clamp(v, MIN_GAIN, MAX_GAIN);\n    }\n    return audio.gainNode.gain.value;\n  }\n\n  // plays a sound, returns a control handle\n  function play(\n    sound,\n    conf = {\n      loop: false,\n      volume: 1,\n      speed: 1,\n      detune: 0,\n      seek: 0\n    }\n  ) {\n    let stopped = false;\n    let srcNode = audio.ctx.createBufferSource();\n\n    srcNode.buffer = sound;\n    srcNode.loop = conf.loop ? true : false;\n\n    const gainNode = audio.ctx.createGain();\n\n    srcNode.connect(gainNode);\n    gainNode.connect(audio.masterNode);\n\n    const pos = conf.seek ? conf.seek : 0;\n\n    srcNode.start(0, pos);\n\n    let startTime = audio.ctx.currentTime - pos;\n    let stopTime = null;\n\n    const handle = {\n      stop() {\n        if (stopped) {\n          return;\n        }\n        this.pause();\n        startTime = audio.ctx.currentTime;\n      },\n\n      play(seek) {\n        if (!stopped) {\n          return;\n        }\n\n        const oldNode = srcNode;\n\n        srcNode = audio.ctx.createBufferSource();\n        srcNode.buffer = oldNode.buffer;\n        srcNode.loop = oldNode.loop;\n        srcNode.playbackRate.value = oldNode.playbackRate.value;\n\n        if (srcNode.detune) {\n          srcNode.detune.value = oldNode.detune.value;\n        }\n\n        srcNode.connect(gainNode);\n\n        const pos = seek ? seek : this.time();\n\n        srcNode.start(0, pos);\n        startTime = audio.ctx.currentTime - pos;\n        stopped = false;\n        stopTime = null;\n      },\n\n      pause() {\n        if (stopped) {\n          return;\n        }\n        srcNode.stop();\n        stopped = true;\n        stopTime = audio.ctx.currentTime;\n      },\n\n      paused() {\n        return stopped;\n      },\n\n      stopped() {\n        return stopped;\n      },\n\n      // TODO: affect time()\n      speed(val) {\n        if (val !== undefined) {\n          srcNode.playbackRate.value = clamp(val, MIN_SPEED, MAX_SPEED);\n        }\n        return srcNode.playbackRate.value;\n      },\n\n      detune(val) {\n        if (!srcNode.detune) {\n          return 0;\n        }\n        if (val !== undefined) {\n          srcNode.detune.value = clamp(val, MIN_DETUNE, MAX_DETUNE);\n        }\n        return srcNode.detune.value;\n      },\n\n      volume(val) {\n        if (val !== undefined) {\n          gainNode.gain.value = clamp(val, MIN_GAIN, MAX_GAIN);\n        }\n        return gainNode.gain.value;\n      },\n\n      loop() {\n        srcNode.loop = true;\n      },\n\n      unloop() {\n        srcNode.loop = false;\n      },\n\n      duration() {\n        return sound.duration;\n      },\n\n      time() {\n        if (stopped) {\n          return stopTime - startTime;\n        } else {\n          return audio.ctx.currentTime - startTime;\n        }\n      }\n    };\n\n    handle.speed(conf.speed);\n    handle.detune(conf.detune);\n    handle.volume(conf.volume);\n\n    return handle;\n  }\n\n  function ctx() {\n    return audio.ctx;\n  }\n\n  return {\n    ctx,\n    volume,\n    play\n  };\n}\n\nexport { audioInit };\n"],
"names":["MIN_GAIN","MAX_GAIN","MIN_SPEED","MAX_SPEED","MIN_DETUNE","MAX_DETUNE","audioInit","volume","v","undefined","audio","gainNode","gain","value","clamp","play","sound","conf","loop","speed","detune","seek","stopped","srcNode","ctx","createBufferSource","buffer","createGain","connect","masterNode","pos","start","startTime","currentTime","stopTime","handle","stop","pause","oldNode","playbackRate","time","paused","val","unloop","duration","window","AudioContext","webkitAudioContext","destination","$jscomp$tmp$exports$module$name"]
}
