{
"version":3,
"file":"module$node_modules$Phaser$src$dom$ParseXML.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,4CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmDxGD,MAAAC,QAAA,CAhCeC,QAAS,CAACC,IAAD,CACxB,CACI,IAAIC,IAAM,EAEV,IACA,CACQC,MAAA,UAAJ,CAGID,GAHJ,CAGUE,CADUC,IAAIC,SACdF,iBAAA,CAA0BH,IAA1B,CAAgC,UAAhC,CAHV,EAOIC,GACA,CADM,IAAIK,aAAJ,CAAkB,kBAAlB,CACN,CAAAL,GAAAM,QAAA,CAAYP,IAAZ,CARJ,CADJ,CAYA,MAAOQ,CAAP,CACA,CACIP,GAAA,CAAM,IADV,CAIA,MAAKA,IAAL,EAAaA,GAAAQ,gBAAb,EAAoCC,CAAAT,GAAAU,qBAAA,CAAyB,aAAzB,CAAAD,OAApC,CAMWT,GANX,CAEW,IAvBf,CApBwG;",
"sources":["node_modules/Phaser/src/dom/ParseXML.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$dom$ParseXML\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Takes the given data string and parses it as XML.\r\n * First tries to use the window.DOMParser and reverts to the Microsoft.XMLDOM if that fails.\r\n * The parsed XML object is returned, or `null` if there was an error while parsing the data.\r\n *\r\n * @function Phaser.DOM.ParseXML\r\n * @since 3.0.0\r\n *\r\n * @param {string} data - The XML source stored in a string.\r\n *\r\n * @return {?(DOMParser|ActiveXObject)} The parsed XML data, or `null` if the data could not be parsed.\r\n */\r\nvar ParseXML = function (data)\r\n{\r\n    var xml = '';\r\n\r\n    try\r\n    {\r\n        if (window['DOMParser'])\r\n        {\r\n            var domparser = new DOMParser();\r\n            xml = domparser.parseFromString(data, 'text/xml');\r\n        }\r\n        else\r\n        {\r\n            xml = new ActiveXObject('Microsoft.XMLDOM');\r\n            xml.loadXML(data);\r\n        }\r\n    }\r\n    catch (e)\r\n    {\r\n        xml = null;\r\n    }\r\n\r\n    if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length)\r\n    {\r\n        return null;\r\n    }\r\n    else\r\n    {\r\n        return xml;\r\n    }\r\n};\r\n\r\nmodule.exports = ParseXML;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","ParseXML","data","xml","window","parseFromString","domparser","DOMParser","ActiveXObject","loadXML","e","documentElement","length","getElementsByTagName"]
}
