{"version":3,"sources":["app/spec.cljs"],"mappings":";;;;;AAMA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAIL,AAACC,AAAqBD;AAEtB,AAACE;AAED,AAAA,AAAA,AAAA,AAAA,AAACC;AAGD,AAAA,AAAMC;AAAN,AACE,AAACC;;AAEH,AAACC,AAAY,AAACF;AAKd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKG,AAO0C,AAAKC;AAKpD,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA4BM;AAA5B,AAAAF,AAAAJ,AAAA,AAAkCO;AAAlC,AAAA,AAAA,AAAA,AAAA,AACO,AAACC,AACEF,AACDC","names":["app.spec/init-vals","app.ms.core.initialize_config","app.ms.core/get-config","app.ms.core.calculate","app.spec/now","tick.alpha.api.inst","tick.alpha.api.date_time","app.spec/app-db","js/Date","p__32655","map__32656","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.spec/create-topic","title","tags","cljs.core/random-uuid"],"sourcesContent":["(ns app.spec\n  (:require [cljs.spec.alpha :as s]\n            [tick.alpha.api :as t]\n            [app.ms.core :as ms]))\n\n;;\n(def init-vals\n  {:intervals [1 2 3 8 17 31]\n   :score-progress [-3 -1 1]})\n\n(ms/initialize-config init-vals)\n\n(ms/get-config)\n\n(ms/calculate 2 {:progress 3})\n\n;; ;; Tick\n(defn now []\n  (t/inst))\n\n(t/date-time (now))\n\n;; Quiz application\n;; - Topics - CRUD\n\n(def app-db\n  {:topics {:topic-1 {:id 1\n                      :title \"Learn Clojure\"\n                      :tags [\"clojurescript\", \"clojure\"]}}\n   :cards {:topic-1 {:card-1 {:id :card-1\n                              :front \"What is ClojureScript\"\n                              :answer \"Functional Programming Language\"\n                              :next-study-date (new js/Date)}\n                     :card-2 {:id :card-2\n                              :front \"What is a Map\"\n                              :answer \"Functional Programming Language\"}}}})\n\n(defn create-topic [{:keys [title tags]}]\n  {:id (random-uuid)\n   :title title\n   :tags tags})\n\n;; topic\n;; - title -> string\n;; - tags  -> [string]\n;; - cards -> {}\n"]}