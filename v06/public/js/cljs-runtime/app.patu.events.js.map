{"version":3,"sources":["app/patu/events.cljs"],"mappings":";;;;;;;;AASA,AAAKA,AAAW,AAAA,AAACC;AAEjB,AAAA,AAAMC,AAAWC,AAAGC;AAApB,AACE,AAACC,AAAML,AAAWM,AAAMH,AAAGC;;AAG7B,AAAA,AAAMG,AAAUC;AAAhB,AACE,AAAAC,AAAiB,AAAA,AAAAC,AAACC,AAAKX,AAAW,AAAA,AAACY,AAAIJ;AAAvC,AAAA,AAAAC;AAAA,AAAAA,AAASL;AAAT,AACE,AAAA,AAAA,AAACA,AAAAA,AAAAA,AAAYI,AAAAA;;AACb,AAACK,AAAe,AAAA,AAAyC,AAAA,AAACD,AAAIJ;;;AAElE,AAAA,AAAMM,AAAUX,AAAGC;AAAnB,AACE,AAACW,AAAa,AAAA,AAAA,AAAAL,AAAQM,AAAYb,AAAGC;;AAEvC,AAAA,AAAMa,AAAWd,AAAGC;AAApB,AACE,AAACc,AAAc,AAAA,AAAA,AAAAR,AAAQM,AAAYb,AAAGC;;AAExC,AAAA,AAAMe,AAAahB,AAAGC;AAAtB,AACE,AAACgB,AAAgB,AAAA,AAAA,AAAAV,AAAQM,AAAYb,AAAGC;;AAE1C,AAAA,AAAMiB,AAAaC;AAAnB,AACE,AAAI,AAACC,AAAQD;AACX,AAACE,AAAK,AAACC,AAAQC,AAAgB,AAAA,AAAA,AAAAhB,AAAQM,AAAaM;;AACpD,AAACI,AAAgB,AAAA,AAAA,AAAAhB,AAAQM,AAAYM;;;AAEzC","names":["app.patu.events/evts-store","cljs.core.atom","app.patu.events/reg-event","id","handler","cljs.core.swap_BANG_","cljs.core/assoc","app.patu.events/dispatch","props","temp__5733__auto__","cljs.core/deref","cljs.core.get","cljs.core.nth","js/console.log","app.patu.events/key-down","app.patu.lib/key-down","app.patu.state/game-state","app.patu.events/key-press","app.patu.lib/key-press","app.patu.events/key-release","app.patu.lib/key-release","app.patu.events/key-is-down","key","cljs.core/vector?","cljs.core/some","cljs.core.partial","app.patu.lib/key-is-down"],"sourcesContent":["(ns app.patu.events\n  (:require [app.patu.components :as c :refer [cis action]]\n            [app.patu.utils :refer [js-get]]\n            [app.patu.lib :as lib]\n            [goog.object :as obj]\n            [app.patu.cam :as cam]\n            [app.patu.state :refer [game-state]]))\n\n;;\n(def evts-store (atom {}))\n\n(defn reg-event [id handler]\n  (swap! evts-store assoc id handler))\n\n;;\n(defn dispatch [props]\n  (if-let [handler (get @evts-store (nth props 0))]\n    (handler nil props)\n    (js/console.log (str \"No event handler registered for: \" (nth props 0)))))\n\n(defn key-down [id handler]\n  (lib/key-down (:game @game-state) id handler))\n\n(defn key-press [id handler]\n  (lib/key-press (:game @game-state) id handler))\n\n(defn key-release [id handler]\n  (lib/key-release (:game @game-state) id handler))\n\n(defn key-is-down [key]\n  (if (vector? key)\n    (some (partial lib/key-is-down (:game @game-state)) key)\n    (lib/key-is-down (:game @game-state) key)))\n\n(comment\n  (some even? [1 4 6]))\n"]}