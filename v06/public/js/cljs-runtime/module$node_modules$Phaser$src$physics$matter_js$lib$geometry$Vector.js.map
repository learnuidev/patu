{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$geometry$Vector.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/geometry/Vector.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$geometry$Vector\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\r\n* Vectors are the basis of all the geometry related operations in the engine.\r\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Vector\r\n*/\r\n\r\n// TODO: consider params for reusing vector objects\r\n\r\nvar Vector = {};\r\n\r\nmodule.exports = Vector;\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new vector.\r\n     * @method create\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @return {vector} A new vector\r\n     */\r\n    Vector.create = function(x, y) {\r\n        return { x: x || 0, y: y || 0 };\r\n    };\r\n\r\n    /**\r\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\r\n     * @method clone\r\n     * @param {vector} vector\r\n     * @return {vector} A new cloned vector\r\n     */\r\n    Vector.clone = function(vector) {\r\n        return { x: vector.x, y: vector.y };\r\n    };\r\n\r\n    /**\r\n     * Returns the magnitude (length) of a vector.\r\n     * @method magnitude\r\n     * @param {vector} vector\r\n     * @return {number} The magnitude of the vector\r\n     */\r\n    Vector.magnitude = function(vector) {\r\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\r\n    };\r\n\r\n    /**\r\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\r\n     * @method magnitudeSquared\r\n     * @param {vector} vector\r\n     * @return {number} The squared magnitude of the vector\r\n     */\r\n    Vector.magnitudeSquared = function(vector) {\r\n        return (vector.x * vector.x) + (vector.y * vector.y);\r\n    };\r\n\r\n    /**\r\n     * Rotates the vector about (0, 0) by specified angle.\r\n     * @method rotate\r\n     * @param {vector} vector\r\n     * @param {number} angle\r\n     * @param {vector} [output]\r\n     * @return {vector} The vector rotated about (0, 0)\r\n     */\r\n    Vector.rotate = function(vector, angle, output) {\r\n        var cos = Math.cos(angle), sin = Math.sin(angle);\r\n        if (!output) output = {};\r\n        var x = vector.x * cos - vector.y * sin;\r\n        output.y = vector.x * sin + vector.y * cos;\r\n        output.x = x;\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Rotates the vector about a specified point by specified angle.\r\n     * @method rotateAbout\r\n     * @param {vector} vector\r\n     * @param {number} angle\r\n     * @param {vector} point\r\n     * @param {vector} [output]\r\n     * @return {vector} A new vector rotated about the point\r\n     */\r\n    Vector.rotateAbout = function(vector, angle, point, output) {\r\n        var cos = Math.cos(angle), sin = Math.sin(angle);\r\n        if (!output) output = {};\r\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\r\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\r\n        output.x = x;\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Normalises a vector (such that its magnitude is `1`).\r\n     * @method normalise\r\n     * @param {vector} vector\r\n     * @return {vector} A new vector normalised\r\n     */\r\n    Vector.normalise = function(vector) {\r\n        var magnitude = Vector.magnitude(vector);\r\n        if (magnitude === 0)\r\n            return { x: 0, y: 0 };\r\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\r\n    };\r\n\r\n    /**\r\n     * Returns the dot-product of two vectors.\r\n     * @method dot\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @return {number} The dot product of the two vectors\r\n     */\r\n    Vector.dot = function(vectorA, vectorB) {\r\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\r\n    };\r\n\r\n    /**\r\n     * Returns the cross-product of two vectors.\r\n     * @method cross\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @return {number} The cross product of the two vectors\r\n     */\r\n    Vector.cross = function(vectorA, vectorB) {\r\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\r\n    };\r\n\r\n    /**\r\n     * Returns the cross-product of three vectors.\r\n     * @method cross3\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @param {vector} vectorC\r\n     * @return {number} The cross product of the three vectors\r\n     */\r\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\r\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\r\n    };\r\n\r\n    /**\r\n     * Adds the two vectors.\r\n     * @method add\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @param {vector} [output]\r\n     * @return {vector} A new vector of vectorA and vectorB added\r\n     */\r\n    Vector.add = function(vectorA, vectorB, output) {\r\n        if (!output) output = {};\r\n        output.x = vectorA.x + vectorB.x;\r\n        output.y = vectorA.y + vectorB.y;\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Subtracts the two vectors.\r\n     * @method sub\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @param {vector} [output]\r\n     * @return {vector} A new vector of vectorA and vectorB subtracted\r\n     */\r\n    Vector.sub = function(vectorA, vectorB, output) {\r\n        if (!output) output = {};\r\n        output.x = vectorA.x - vectorB.x;\r\n        output.y = vectorA.y - vectorB.y;\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Multiplies a vector and a scalar.\r\n     * @method mult\r\n     * @param {vector} vector\r\n     * @param {number} scalar\r\n     * @return {vector} A new vector multiplied by scalar\r\n     */\r\n    Vector.mult = function(vector, scalar) {\r\n        return { x: vector.x * scalar, y: vector.y * scalar };\r\n    };\r\n\r\n    /**\r\n     * Divides a vector and a scalar.\r\n     * @method div\r\n     * @param {vector} vector\r\n     * @param {number} scalar\r\n     * @return {vector} A new vector divided by scalar\r\n     */\r\n    Vector.div = function(vector, scalar) {\r\n        return { x: vector.x / scalar, y: vector.y / scalar };\r\n    };\r\n\r\n    /**\r\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\r\n     * @method perp\r\n     * @param {vector} vector\r\n     * @param {bool} [negate=false]\r\n     * @return {vector} The perpendicular vector\r\n     */\r\n    Vector.perp = function(vector, negate) {\r\n        negate = negate === true ? -1 : 1;\r\n        return { x: negate * -vector.y, y: negate * vector.x };\r\n    };\r\n\r\n    /**\r\n     * Negates both components of a vector such that it points in the opposite direction.\r\n     * @method neg\r\n     * @param {vector} vector\r\n     * @return {vector} The negated vector\r\n     */\r\n    Vector.neg = function(vector) {\r\n        return { x: -vector.x, y: -vector.y };\r\n    };\r\n\r\n    /**\r\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\r\n     * @method angle\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @return {number} The angle in radians\r\n     */\r\n    Vector.angle = function(vectorA, vectorB) {\r\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\r\n    };\r\n\r\n    /**\r\n     * Temporary vector pool (not thread-safe).\r\n     * @property _temp\r\n     * @type {vector[]}\r\n     * @private\r\n     */\r\n    Vector._temp = [\r\n        Vector.create(), Vector.create(), \r\n        Vector.create(), Vector.create(), \r\n        Vector.create(), Vector.create()\r\n    ];\r\n\r\n})();\n};"],
"names":["shadow$provide","global","require","module","exports","Vector","create","Vector.create","x","y","clone","Vector.clone","vector","magnitude","Vector.magnitude","Math","sqrt","magnitudeSquared","Vector.magnitudeSquared","rotate","Vector.rotate","angle","output","cos","sin","rotateAbout","Vector.rotateAbout","point","normalise","Vector.normalise","dot","Vector.dot","vectorA","vectorB","cross","Vector.cross","cross3","Vector.cross3","vectorC","add","Vector.add","sub","Vector.sub","mult","Vector.mult","scalar","div","Vector.div","perp","Vector.perp","negate","neg","Vector.neg","Vector.angle","atan2","_temp"]
}
