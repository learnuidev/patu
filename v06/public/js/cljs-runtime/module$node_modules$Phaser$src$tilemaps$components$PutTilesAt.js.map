{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$PutTilesAt.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,8DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO1H,IAAIC,qBAAuBH,OAAA,CAAQ,yEAAR,CAA3B,CACII,UAAYJ,OAAA,CAAQ,8DAAR,CAiDhBC,OAAAC,QAAA,CA9BiBG,QAAS,CAACC,UAAD,CAAaC,KAAb,CAAoBC,KAApB,CAA2BC,gBAA3B,CAA6CC,KAA7C,CAC1B,CACI,GAAI,CAACC,KAAAC,QAAA,CAAcN,UAAd,CAAL,CAAkC,MAAO,KAChBO,KAAAA,EAAzB,GAAIJ,gBAAJ,GAAsCA,gBAAtC,CAAyD,CAAA,CAAzD,CAGKE,MAAAC,QAAA,CAAcN,UAAA,CAAW,CAAX,CAAd,CAAL,GAEIA,UAFJ;AAEiB,CAAEA,UAAF,CAFjB,CAQA,KAHA,IAAIQ,OAASR,UAAAS,OAAb,CACIC,MAAQV,UAAA,CAAW,CAAX,CAAAS,OADZ,CAGSE,GAAK,CAAd,CAAiBA,EAAjB,CAAsBH,MAAtB,CAA8BG,EAAA,EAA9B,CAEI,IAAK,IAAIC,GAAK,CAAd,CAAiBA,EAAjB,CAAsBF,KAAtB,CAA6BE,EAAA,EAA7B,CAGId,SAAA,CADWE,UAAA,CAAWW,EAAX,CAAAE,CAAeD,EAAfC,CACX,CAAgBZ,KAAhB,CAAwBW,EAAxB,CAA4BV,KAA5B,CAAoCS,EAApC,CAAwC,CAAA,CAAxC,CAA+CP,KAA/C,CAIJD,iBAAJ,EAGIN,oBAAA,CAAqBI,KAArB,CAA6B,CAA7B,CAAgCC,KAAhC,CAAwC,CAAxC,CAA2CQ,KAA3C,CAAmD,CAAnD,CAAsDF,MAAtD,CAA+D,CAA/D,CAAkEJ,KAAlE,CAzBR,CA5B0H;",
"sources":["node_modules/Phaser/src/tilemaps/components/PutTilesAt.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$PutTilesAt\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\nvar PutTileAt = require('./PutTileAt');\r\n\r\n/**\r\n * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n * index at the specified location will be changed. Collision information will be recalculated\r\n * within the region tiles were changed.\r\n *\r\n * @function Phaser.Tilemaps.Components.PutTilesAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar PutTilesAt = function (tilesArray, tileX, tileY, recalculateFaces, layer)\r\n{\r\n    if (!Array.isArray(tilesArray)) { return null; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n\r\n    // Force the input array to be a 2D array\r\n    if (!Array.isArray(tilesArray[0]))\r\n    {\r\n        tilesArray = [ tilesArray ];\r\n    }\r\n\r\n    var height = tilesArray.length;\r\n    var width = tilesArray[0].length;\r\n\r\n    for (var ty = 0; ty < height; ty++)\r\n    {\r\n        for (var tx = 0; tx < width; tx++)\r\n        {\r\n            var tile = tilesArray[ty][tx];\r\n            PutTileAt(tile, tileX + tx, tileY + ty, false, layer);\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        // Recalculate the faces within the destination area and neighboring tiles\r\n        CalculateFacesWithin(tileX - 1, tileY - 1, width + 2, height + 2, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = PutTilesAt;\r\n\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","CalculateFacesWithin","PutTileAt","PutTilesAt","tilesArray","tileX","tileY","recalculateFaces","layer","Array","isArray","undefined","height","length","width","ty","tx","tile"]
}
