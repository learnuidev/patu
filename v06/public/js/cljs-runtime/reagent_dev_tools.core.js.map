{"version":3,"sources":["reagent_dev_tools/core.cljs"],"mappings":"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","names":["reagent-dev-tools.core/storage-key","reagent-dev-tools.core/element-id","js/reagent-dev-tools","js/reagent-dev-tools.core","js/reagent-dev-tools.core.dev-state","reagent-dev-tools.core/dev-state","G__26404","reagent.core.atom","cljs.core.merge","e26405","cljs.reader.read_string","js/localStorage","_","cljs.core/add-watch","old","v","cljs.core.pr_str","cljs.core.dissoc","reagent-dev-tools.core/default-panels","reagent-dev-tools.state-tree/state-tree-panel","p__26426","map__26430","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","reagent-dev-tools.core/dev-tool","panels","cljs.core/deref","current-k","current-panel","or__4126__auto__","current-content","komponentit.mixins/window-event-listener","e","cljs.core.swap_BANG_","s","cljs.core.assoc","js/window","x__4214__auto__","y__4215__auto__","x__4217__auto__","y__4218__auto__","cljs.core/dissoc","cljs.core/assoc","iter__4529__auto__","s__26457","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__26459","cljs.core/chunk-buffer","i__26458","vec__26460","cljs.core/-nth","cljs.core.nth","map__26463","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26456","cljs.core/chunk-rest","vec__26465","cljs.core/first","map__26468","cljs.core/cons","cljs.core/rest","k","label","cljs.core/name","cljs.core/keyword-identical?","reagent-dev-tools.core/start!","opts","el","cljs.core/contains?","js/document","reagent-dev-tools.state-tree/register-state-atom","reagent.dom.render","fexpr__26474","cljs.core/chunk-first"],"sourcesContent":["(ns reagent-dev-tools.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [reagent-dev-tools.styles :as s]\n            [reagent-dev-tools.state-tree :as state-tree]\n            [komponentit.mixins :as mixins]\n            [cljs.reader :as reader]))\n\n;; Save the state (open, height, active panel) to local storage\n\n(def storage-key (str ::state))\n(def element-id (str ::dev-panel))\n\n(defonce dev-state (doto (r/atom (merge {:height 300}\n                                        (try\n                                          (reader/read-string (.getItem js/localStorage storage-key))\n                                          (catch :default _\n                                            nil))))\n                     (add-watch :local-storage\n                                (fn [_ _ old v]\n                                  (.setItem js/localStorage storage-key (pr-str (dissoc v :mouse)))))))\n\n(def default-panels\n  {:state-tree {:label \"State\"\n                :fn state-tree/state-tree-panel}})\n\n(defn dev-tool\n  [{:keys [panels]\n    :or {panels default-panels}}]\n  [:div\n   [:style (s/main-css)]\n   (if (:open? @dev-state)\n     (let [current-k       (:current @dev-state :state-tree)\n           current-panel   (or (get panels current-k) (:state-tree panels))\n           current-content (:fn current-panel)]\n       [mixins/window-event-listener\n        {:on-mouse-move (fn [e]\n                          (swap! dev-state (fn [s]\n                                             (if (:mouse s)\n                                               (do\n                                                 (.preventDefault e)\n                                                 (assoc s :height (-> (- (.-innerHeight js/window) (.-clientY e))\n                                                                      (max 50)\n                                                                      (min 1000))))\n                                               s))))\n         :on-mouse-up (fn [e]\n                        (swap! dev-state dissoc :mouse))}\n        [:div.reagent-dev-tools__panel\n         {:style {:height (str (:height @dev-state) \"px\")}}\n         [:div.reagent-dev-tools__sizer\n          {:on-mouse-down (fn [e]\n                            (swap! dev-state assoc :mouse true)\n                            (.preventDefault e))}]\n         [:div.reagent-dev-tools__nav\n          (for [[k {:keys [label]}] panels]\n            [:div.reagent-dev-tools__nav-li\n             {:key (name k)}\n             [:a.reagent-dev-tools__nav-li-a\n              {:class (if (keyword-identical? current-k k) \"reagent-dev-tools__nav-li-a--active\")\n               :on-click #(swap! dev-state assoc :current k)}\n              label]])\n          [:div.reagent-dev-tools__spacer]\n          [:button.reagent-dev-tools__nav-li-a.reagent-dev-tools__nav-li-a--close-button\n           {:on-click #(swap! dev-state assoc :open? false)}\n           [:span \"\u00d7\"]]]\n         [:div.reagent-dev-tools__panel-content\n          (if current-content [current-content])]]])\n     [:button.reagent-dev-tools__nav-li-a.reagent-dev-tools__toggle-btn\n      {:on-click (fn [_]\n                   (swap! dev-state assoc :open? true)\n                   nil)}\n      \"dev\"])])\n\n(defn start!\n  \"Start Reagent dev tool.\n\n  Options:\n\n  :el (optional) The element to render the dev-tool into. If the property is given,\n  but is nil, dev tool is not enabled. If not given, new div is created and\n  used.\n\n  :state-atom (optional) The Reagent atom to add to state-tree panel with \\\"App state\\\" name.\n\n  :panels-fn (optional) Function which returns map of additional panels to display.\"\n  [opts]\n  (when-let [el (if (contains? opts :el)\n                  (:el opts)\n                  (or (.getElementById js/document element-id)\n                      (let [el (.createElement js/document \"div\")]\n                        (set! (.-id el) element-id)\n                        (.appendChild (.-body js/document) el)\n                        el)))]\n\n    (when (:state-atom opts)\n      (state-tree/register-state-atom \"App state\" (:state-atom opts)))\n\n    (rdom/render\n      [dev-tool {:panels (merge default-panels\n                               (if (:panels-fn opts)\n                                 ((:panels-fn opts))))}]\n      el)))\n"]}