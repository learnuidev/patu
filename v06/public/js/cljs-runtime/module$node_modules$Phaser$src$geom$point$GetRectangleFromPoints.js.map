{
"version":3,
"file":"module$node_modules$Phaser$src$geom$point$GetRectangleFromPoints.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,iEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO7H,IAAIC,UAAYH,OAAA,CAAQ,yDAAR,CAyDhBC,OAAAC,QAAA,CA1C6BE,QAAS,CAACC,MAAD,CAASC,GAAT,CACtC,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,IAAIH,SAAnC,CAOA,KALA,IAAIK,KAAOC,MAAAC,kBAAX,CACIC,KAAOF,MAAAG,kBADX,CAEIC,KAAOJ,MAAAC,kBAFX,CAGII,KAAOL,MAAAG,kBAHX,CAKSG,EAAI,CAAb,CAAgBA,CAAhB,CAAoBV,MAAAW,OAApB,CAAmCD,CAAA,EAAnC,CACA,CACI,IAAIE,MAAQZ,MAAA,CAAOU,CAAP,CAERE,MAAAC,EAAJ,CAAcV,IAAd,GAEIA,IAFJ,CAEWS,KAAAC,EAFX,CAKID,MAAAC,EAAJ,CAAcP,IAAd,GAEIA,IAFJ,CAEWM,KAAAC,EAFX,CAKID;KAAAE,EAAJ,CAAcN,IAAd,GAEIA,IAFJ,CAEWI,KAAAE,EAFX,CAKIF,MAAAE,EAAJ,CAAcL,IAAd,GAEIA,IAFJ,CAEWG,KAAAE,EAFX,CAlBJ,CAwBAb,GAAAY,EAAA,CAAQP,IACRL,IAAAa,EAAA,CAAQL,IACRR,IAAAc,MAAA,CAAYZ,IAAZ,CAAmBG,IACnBL,IAAAe,OAAA,CAAaR,IAAb,CAAoBC,IAEpB,OAAOR,IAtCX,CAvB6H;",
"sources":["node_modules/Phaser/src/geom/point/GetRectangleFromPoints.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$point$GetRectangleFromPoints\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Rectangle = require('../rectangle/Rectangle');\r\n\r\n/**\r\n * Calculates the Axis Aligned Bounding Box (or aabb) from an array of points.\r\n *\r\n * @function Phaser.Geom.Point.GetRectangleFromPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Point[]} points - [description]\r\n * @param {Phaser.Geom.Rectangle} [out] - [description]\r\n *\r\n * @return {Phaser.Geom.Rectangle} [description]\r\n */\r\nvar GetRectangleFromPoints = function (points, out)\r\n{\r\n    if (out === undefined) { out = new Rectangle(); }\r\n\r\n    var xMax = Number.NEGATIVE_INFINITY;\r\n    var xMin = Number.POSITIVE_INFINITY;\r\n    var yMax = Number.NEGATIVE_INFINITY;\r\n    var yMin = Number.POSITIVE_INFINITY;\r\n\r\n    for (var i = 0; i < points.length; i++)\r\n    {\r\n        var point = points[i];\r\n\r\n        if (point.x > xMax)\r\n        {\r\n            xMax = point.x;\r\n        }\r\n\r\n        if (point.x < xMin)\r\n        {\r\n            xMin = point.x;\r\n        }\r\n\r\n        if (point.y > yMax)\r\n        {\r\n            yMax = point.y;\r\n        }\r\n\r\n        if (point.y < yMin)\r\n        {\r\n            yMin = point.y;\r\n        }\r\n    }\r\n\r\n    out.x = xMin;\r\n    out.y = yMin;\r\n    out.width = xMax - xMin;\r\n    out.height = yMax - yMin;\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetRectangleFromPoints;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Rectangle","GetRectangleFromPoints","points","out","undefined","xMax","Number","NEGATIVE_INFINITY","xMin","POSITIVE_INFINITY","yMax","yMin","i","length","point","x","y","width","height"]
}
