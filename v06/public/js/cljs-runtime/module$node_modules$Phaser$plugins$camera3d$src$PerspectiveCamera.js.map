{
"version":3,
"file":"module$node_modules$Phaser$plugins$camera3d$src$PerspectiveCamera.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,kEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9H,IAAIC,OAASH,OAAA,CAAQ,wDAAR,CACTI,OAAAA,CAAQJ,OAAA,CAAQ,4CAAR,CAIZ,KAAIK,QAAU,KAHAL,OAAAM,CAAQ,6CAARA,CAGA,CAiBVC,QAAAA,CAAoB,IAAIH,MAAJ,CAAU,CAE9BI,QAASL,MAFqB,CAK9BM,WAEAF,QAA2B,CAACG,KAAD,CAAQC,WAAR,CAAqBC,aAArB,CAAoCC,cAApC,CAC3B,CACwBC,IAAAA,EAApB,GAAIH,WAAJ,GAAiCA,WAAjC,CAA+C,EAA/C,CACsBG,KAAAA,EAAtB,GAAIF,aAAJ,GAAmCA,aAAnC;AAAmD,CAAnD,CACuBE,KAAAA,EAAvB,GAAID,cAAJ,GAAoCA,cAApC,CAAqD,CAArD,CAEAV,OAAAY,KAAA,CAAY,IAAZ,CAAkBL,KAAlB,CAUA,KAAAE,cAAA,CAAqBA,aAUrB,KAAAC,eAAA,CAAsBA,cAUtB,KAAAF,YAAA,CAAmBA,WAAnB,CAAiCK,IAAAC,GAAjC,CAA2C,GAE3C,KAAAC,OAAA,EArCJ,CAR8B,CA0D9BC,OAAQA,QAAS,CAACC,KAAD,CACjB,CACI,IAAAT,YAAA,CAAmBS,KAAnB,CAA2BJ,IAAAC,GAA3B,CAAqC,GAErC,OAAO,KAHX,CA3D8B,CAyE9BC,OAAQA,QAAS,EACjB,CAII,IAAAG,WAAAC,YAAA,CACI,IAAAX,YADJ,CAHa,IAAAC,cAGb,CAHkC,IAAAC,eAGlC,CAGIG,IAAAO,IAAA,CAAS,IAAAC,KAAT,CAHJ,CAIIR,IAAAO,IAAA,CAAS,IAAAE,IAAT,CAJJ,CAQApB,QAAAqB,KAAA,CAAa,IAAAC,SAAb,CAAAC,IAAA,CAAgC,IAAAC,UAAhC,CAEA,KAAAC,KAAAC,OAAA,CAAiB,IAAAJ,SAAjB,CAAgCtB,OAAhC,CAAyC,IAAA2B,GAAzC,CAGA;IAAAC,SAAAP,KAAA,CAAmB,IAAAL,WAAnB,CAAAa,SAAA,CAA6C,IAAAJ,KAA7C,CAGA,KAAAK,kBAAAT,KAAA,CAA4B,IAAAO,SAA5B,CAAAG,OAAA,EAEA,KAAAC,qBAAA,CAA4B,CAAA,CAE5B,KAAAC,eAAA,EAEA,OAAO,KA1BX,CA1E8B,CAAV,CAyGxBrC,OAAAC,QAAA,CAAiBK,OAtI6G;",
"sources":["node_modules/Phaser/plugins/camera3d/src/PerspectiveCamera.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$plugins$camera3d$src$PerspectiveCamera\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Camera = require('./Camera');\r\nvar Class = require('../../../src/utils/Class');\r\nvar Vector3 = require('../../../src/math/Vector3');\r\n\r\n//  Local cache vars\r\nvar tmpVec3 = new Vector3();\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class PerspectiveCamera\r\n * @extends Phaser.Cameras.Sprite3D.Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {integer} [fieldOfView=80] - [description]\r\n * @param {integer} [viewportWidth=0] - [description]\r\n * @param {integer} [viewportHeight=0] - [description]\r\n */\r\nvar PerspectiveCamera = new Class({\r\n\r\n    Extends: Camera,\r\n\r\n    //  FOV is converted to radians automatically\r\n    initialize:\r\n\r\n    function PerspectiveCamera (scene, fieldOfView, viewportWidth, viewportHeight)\r\n    {\r\n        if (fieldOfView === undefined) { fieldOfView = 80; }\r\n        if (viewportWidth === undefined) { viewportWidth = 0; }\r\n        if (viewportHeight === undefined) { viewportHeight = 0; }\r\n\r\n        Camera.call(this, scene);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.PerspectiveCamera#viewportWidth\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportWidth = viewportWidth;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.PerspectiveCamera#viewportHeight\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportHeight = viewportHeight;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.PerspectiveCamera#fieldOfView\r\n         * @type {integer}\r\n         * @default 80\r\n         * @since 3.0.0\r\n         */\r\n        this.fieldOfView = fieldOfView * Math.PI / 180;\r\n\r\n        this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.PerspectiveCamera#setFOV\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n     */\r\n    setFOV: function (value)\r\n    {\r\n        this.fieldOfView = value * Math.PI / 180;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.PerspectiveCamera#update\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n     */\r\n    update: function ()\r\n    {\r\n        var aspect = this.viewportWidth / this.viewportHeight;\r\n\r\n        //  Create a perspective matrix for our camera\r\n        this.projection.perspective(\r\n            this.fieldOfView,\r\n            aspect,\r\n            Math.abs(this.near),\r\n            Math.abs(this.far)\r\n        );\r\n\r\n        //  Build the view matrix\r\n        tmpVec3.copy(this.position).add(this.direction);\r\n\r\n        this.view.lookAt(this.position, tmpVec3, this.up);\r\n\r\n        //  Projection * view matrix\r\n        this.combined.copy(this.projection).multiply(this.view);\r\n\r\n        //  Invert combined matrix, used for unproject\r\n        this.invProjectionView.copy(this.combined).invert();\r\n\r\n        this.billboardMatrixDirty = true;\r\n\r\n        this.updateChildren();\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = PerspectiveCamera;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Camera","Class","tmpVec3","Vector3","PerspectiveCamera","Extends","initialize","scene","fieldOfView","viewportWidth","viewportHeight","undefined","call","Math","PI","update","setFOV","value","projection","perspective","abs","near","far","copy","position","add","direction","view","lookAt","up","combined","multiply","invProjectionView","invert","billboardMatrixDirty","updateChildren"]
}
