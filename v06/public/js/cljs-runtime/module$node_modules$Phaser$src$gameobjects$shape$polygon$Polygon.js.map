{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$polygon$Polygon.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,iEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOzHC,MAAAA,CAAgBH,OAAA,CAAQ,wEAAR,CAChBI,QAAAA,CAAQJ,OAAA,CAAQ,4CAAR,CACZ,KAAIK,OAASL,OAAA,CAAQ,oDAAR,CAAb,CACIM,QAAUN,OAAA,CAAQ,qDAAR,CADd,CAEIO,YAAcP,OAAA,CAAQ,qDAAR,CAFlB,CAGIQ,MAAQR,OAAA,CAAQ,wDAAR,CAHZ;AAIIS,OAAST,OAAA,CAAQ,oDAAR,CAoCTU,QAAAA,CAAU,IAAIN,OAAJ,CAAU,CAEpBO,QAASH,KAFW,CAIpBI,OAAQ,CACJT,MADI,CAJY,CAQpBU,WAEAH,QAAiB,CAACI,KAAD,CAAQC,CAAR,CAAWC,CAAX,CAAcC,MAAd,CAAsBC,SAAtB,CAAiCC,SAAjC,CACjB,CACcC,IAAAA,EAAV,GAAIL,CAAJ,GAAuBA,CAAvB,CAA2B,CAA3B,CACUK,KAAAA,EAAV,GAAIJ,CAAJ,GAAuBA,CAAvB,CAA2B,CAA3B,CAEAR,MAAAa,KAAA,CAAW,IAAX,CAAiBP,KAAjB,CAAwB,SAAxB,CAAmC,IAAIP,WAAJ,CAAgBU,MAAhB,CAAnC,CAEIK,MAAAA,CAAShB,OAAA,CAAQ,IAAAiB,KAAR,CAEb,KAAAC,YAAA,CAAiBT,CAAjB,CAAoBC,CAApB,CACA,KAAAS,QAAA,CAAaH,KAAAI,MAAb,CAA2BJ,KAAAK,OAA3B,CAEkBP,KAAAA,EAAlB,GAAIF,SAAJ,EAEI,IAAAU,aAAA,CAAkBV,SAAlB,CAA6BC,SAA7B,CAGJ,KAAAU,oBAAA,EACA,KAAAC,WAAA,EAjBJ,CAXoB,CA2CpBC,OAAQA,QAAS,CAACC,UAAD,CACjB,CACuBZ,IAAAA,EAAnB,GAAIY,UAAJ;CAAgCA,UAAhC,CAA6C,CAA7C,CAEA,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBD,UAApB,CAAgCC,CAAA,EAAhC,CAEIxB,MAAA,CAAO,IAAAc,KAAP,CAGJ,OAAO,KAAAO,WAAA,EARX,CA5CoB,CAgEpBA,WAAYA,QAAS,EACrB,CAII,IAHA,IAAII,KAAO,EAAX,CACIjB,OAAS,IAAAM,KAAAN,OADb,CAGSgB,EAAI,CAAb,CAAgBA,CAAhB,CAAoBhB,MAAAkB,OAApB,CAAmCF,CAAA,EAAnC,CAEIC,IAAAE,KAAA,CAAUnB,MAAA,CAAOgB,CAAP,CAAAlB,EAAV,CAAuBE,MAAA,CAAOgB,CAAP,CAAAjB,EAAvB,CAGJkB,KAAAE,KAAA,CAAUnB,MAAA,CAAO,CAAP,CAAAF,EAAV,CAAuBE,MAAA,CAAO,CAAP,CAAAD,EAAvB,CAEA,KAAAqB,YAAA,CAAmBhC,MAAA,CAAO6B,IAAP,CACnB,KAAAI,SAAA,CAAgBJ,IAEhB,OAAO,KAdX,CAjEoB,CAAV,CAoFdjC,OAAAC,QAAA,CAAiBQ,OArI4G;",
"sources":["node_modules/Phaser/src/gameobjects/shape/polygon/Polygon.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$polygon$Polygon\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar PolygonRender = require('./PolygonRender');\r\nvar Class = require('../../../utils/Class');\r\nvar Earcut = require('../../../geom/polygon/Earcut');\r\nvar GetAABB = require('../../../geom/polygon/GetAABB');\r\nvar GeomPolygon = require('../../../geom/polygon/Polygon');\r\nvar Shape = require('../Shape');\r\nvar Smooth = require('../../../geom/polygon/Smooth');\r\n\r\n/**\r\n * @classdesc\r\n * The Polygon Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * The Polygon Shape is created by providing a list of points, which are then used to create an\r\n * internal Polygon geometry object. The points can be set from a variety of formats:\r\n *\r\n * - A string containing paired values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\r\n * - An array of Point or Vector2 objects: `[new Phaser.Math.Vec2(x1, y1), ...]`\r\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\r\n * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\r\n * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\r\n * \r\n * By default the `x` and `y` coordinates of this Shape refer to the center of it. However, depending\r\n * on the coordinates of the points provided, the final shape may be rendered offset from its origin.\r\n *\r\n * @class Polygon\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {any} [points] - The points that make up the polygon.\r\n * @param {number} [fillColor] - The color the polygon will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the polygon will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\r\nvar Polygon = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        PolygonRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Polygon (scene, x, y, points, fillColor, fillAlpha)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n\r\n        Shape.call(this, scene, 'Polygon', new GeomPolygon(points));\r\n\r\n        var bounds = GetAABB(this.geom);\r\n\r\n        this.setPosition(x, y);\r\n        this.setSize(bounds.width, bounds.height);\r\n\r\n        if (fillColor !== undefined)\r\n        {\r\n            this.setFillStyle(fillColor, fillAlpha);\r\n        }\r\n\r\n        this.updateDisplayOrigin();\r\n        this.updateData();\r\n    },\r\n\r\n    /**\r\n     * Smooths the polygon over the number of iterations specified.\r\n     * The base polygon data will be updated and replaced with the smoothed values.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Polygon#smooth\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} [iterations=1] - The number of times to apply the polygon smoothing.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    smooth: function (iterations)\r\n    {\r\n        if (iterations === undefined) { iterations = 1; }\r\n\r\n        for (var i = 0; i < iterations; i++)\r\n        {\r\n            Smooth(this.geom);\r\n        }\r\n\r\n        return this.updateData();\r\n    },\r\n\r\n    /**\r\n     * Internal method that updates the data and path values.\r\n     *\r\n     * @method Phaser.GameObjects.Polygon#updateData\r\n     * @private\r\n     * @since 3.13.0\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    updateData: function ()\r\n    {\r\n        var path = [];\r\n        var points = this.geom.points;\r\n\r\n        for (var i = 0; i < points.length; i++)\r\n        {\r\n            path.push(points[i].x, points[i].y);\r\n        }\r\n\r\n        path.push(points[0].x, points[0].y);\r\n\r\n        this.pathIndexes = Earcut(path);\r\n        this.pathData = path;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Polygon;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","PolygonRender","Class","Earcut","GetAABB","GeomPolygon","Shape","Smooth","Polygon","Extends","Mixins","initialize","scene","x","y","points","fillColor","fillAlpha","undefined","call","bounds","geom","setPosition","setSize","width","height","setFillStyle","updateDisplayOrigin","updateData","smooth","iterations","i","path","length","push","pathIndexes","pathData"]
}
