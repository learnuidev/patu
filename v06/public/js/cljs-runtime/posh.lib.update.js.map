{"version":3,"sources":["posh/lib/update.cljc"],"mappings":"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","names":["p__47432","map__47433","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","posh.lib.update/update-pull","dcfg","retrieve","posh-tree","storage-key","vec__47435","cljs.core.nth","_","poshdb","pull-pattern","eid","analysis","posh.lib.pull-analyze/pull-analyze","cljs.core/cons","posh.lib.db/poshdb->analyze-db","cljs.core.dissoc","cljs.core.merge","p__47440","map__47441","posh.lib.update/update-filter-pull","vec__47443","cljs.core.concat","cljs.core/first","cljs.core/vals","p__47446","map__47447","posh.lib.update/update-pull-many","vec__47449","eids","posh.lib.pull-analyze/pull-many-analyze","p__47452","map__47453","posh.lib.update/update-q-with-dbvarmap","vec__47455","query","args","cljs.core.remove","qm","posh.lib.q-analyze/query-to-map","dbvarmap","posh.lib.q-analyze/make-dbarg-map","poshdbmap","cljs.core.map","p__47458","vec__47459","db-sym","cljs.core/merge","fixed-args","cljs.core/zipmap","p__47462","vec__47463","sym","arg","or__4126__auto__","posh.lib.q-analyze/q-analyze","posh.lib.update/update-q","posh.lib.update/reduce-entities","r","cljs.core.reduce","acc","xs","x","cljs.core.conj","posh.lib.update/filter-q-transform-analysis","posh.lib.update/update-filter-q","posh.lib.update/update-posh-item","G__47467","cljs.core/Keyword","js/Error"],"sourcesContent":["(ns posh.lib.update\n  (:require [posh.lib.util :as util]\n            [posh.lib.datom-matcher :as dm]\n            [posh.lib.pull-analyze :as pa]\n            [posh.lib.q-analyze :as qa]\n            [posh.lib.db :as db]))\n\n(defn update-pull [{:keys [dcfg retrieve] :as posh-tree} storage-key]\n  ;;(println \"updated pull: \" storage-key)\n  (let [[_ poshdb pull-pattern eid] storage-key]\n    (let [analysis (pa/pull-analyze dcfg\n                                    (cons :patterns retrieve)\n                                    (db/poshdb->analyze-db posh-tree poshdb)\n                                    pull-pattern\n                                    eid)]\n      (dissoc\n       (merge analysis\n              {:reload-patterns (:patterns analysis)\n               :reload-fn posh.lib.update/update-pull})\n       :patterns))))\n\n(defn update-filter-pull [{:keys [dcfg retrieve] :as posh-tree} storage-key]\n  ;;(println \"updated filter-pull: \" storage-key)\n  (let [[_ poshdb pull-pattern eid] storage-key]\n    (let [analysis (pa/pull-analyze dcfg\n                                    (concat [:patterns :ref-patterns] retrieve)\n                                    (db/poshdb->analyze-db posh-tree poshdb)\n                                    pull-pattern\n                                    eid)]\n      (dissoc\n       (merge analysis\n              {:pass-patterns (first (vals (:patterns analysis)))\n               :reload-patterns (:ref-patterns analysis)\n               :reload-fn posh.lib.update/update-filter-pull})\n       :patterns :ref-patterns))))\n\n(defn update-pull-many [{:keys [dcfg retrieve] :as posh-tree} storage-key]\n  ;;(println \"updated pull-many: \" storage-key)\n  (let [[_ poshdb pull-pattern eids] storage-key]\n    (let [analysis (pa/pull-many-analyze dcfg\n                                         (cons :patterns retrieve)\n                                         (db/poshdb->analyze-db posh-tree poshdb)\n                                         pull-pattern\n                                         eids)]\n      (dissoc\n       (merge analysis\n              {:reload-patterns (:patterns analysis)\n               :reload-fn posh.lib.update/update-pull-many})\n       :patterns))))\n\n(declare update-q)\n\n(defn update-q-with-dbvarmap [{:keys [dcfg retrieve] :as posh-tree} storage-key]\n  \"Returns {:dbvarmap .. :analysis ..}\"\n  (let [[_ query args] storage-key\n        retrieve       (concat [:results :simple-patterns] (remove #{:patterns} retrieve))\n        qm             (merge {:in '[$]} (qa/query-to-map query))\n        dbvarmap       (qa/make-dbarg-map (:in qm) args)\n        ;; no longer using\n        ;poshdbs        (vals dbvarmap)\n        poshdbmap      (->> dbvarmap\n                            (map (fn [[db-sym poshdb]]\n                                   {db-sym\n                                    (db/poshdb->analyze-db posh-tree poshdb)}))\n                            (apply merge))\n        fixed-args     (->> (zipmap (:in qm) args)\n                            (map (fn [[sym arg]]\n                                   (or (get poshdbmap sym) arg))))\n        analysis       (qa/q-analyze dcfg retrieve query fixed-args)]\n    {:dbvarmap dbvarmap\n     :analysis (dissoc\n                (merge analysis\n                       {:reload-patterns (:patterns analysis)\n                        :reload-fn posh.lib.update/update-q})\n                :patterns)}))\n\n(defn update-q [posh-tree storage-key]\n  ;;(println \"updated q: \" storage-key)\n  (:analysis (update-q-with-dbvarmap posh-tree storage-key)))\n\n(defn reduce-entities [r]\n    (reduce (fn [acc xs] (reduce (fn [acc x] (conj acc x)) acc xs)) #{} r))\n\n(declare update-filter-q)\n\n(defn filter-q-transform-analysis [analysis]\n  (dissoc\n   (merge analysis\n          {:pass-patterns [[(reduce-entities (:results analysis))]]\n           :reload-patterns (:patterns analysis)\n           :reload-fn posh.lib.update/update-filter-q})\n   :results :patterns))\n\n(defn update-filter-q [posh-tree storage-key]\n  ;;(println \"update-filter-q\" storage-key)\n  (filter-q-transform-analysis (:analysis (update-q-with-dbvarmap posh-tree storage-key))))\n\n(defn update-posh-item [posh-tree storage-key]\n  (case (first storage-key)\n    :pull (update-pull posh-tree storage-key)\n    :q    (:analysis (update-q posh-tree storage-key))\n    :filter-pull (update-filter-pull posh-tree storage-key)))\n"]}