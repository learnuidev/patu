{
"version":3,
"file":"module$node_modules$Phaser$src$textures$parsers$UnityYAML.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOtH,IAAIC,YAAc,CA6HlBF,OAAAC,QAAA,CA/EgBE,QAAS,CAACC,OAAD,CAAUC,WAAV,CAAuBC,IAAvB,CACzB,CAEI,IAAIC,OAASH,OAAAG,OAAA,CAAeF,WAAf,CAEbD,QAAAI,IAAA,CAAY,QAAZ,CAAsBH,WAAtB,CAAmC,CAAnC,CAAsC,CAAtC,CAAyCE,MAAAE,MAAzC,CAAuDF,MAAAG,OAAvD,CAEAR,YAAA,CAAcK,MAAAG,OAEVC,KAAAA,CAAOL,IAAAM,MAAA,CAAW,IAAX,CAEPC,OAAAA,CAAa,2BASjB,KAPA,IAAIC,WAAa,EAAjB,CACIC,cAAgB,EADpB,CAEIC,KAAO,CAAEC,EAAG,CAAL,CAAQC,EAAG,CAAX,CAAcT,MAAO,CAArB,CAAwBC,OAAQ,CAAhC,CAFX,CAOSS,EAAI,CAAb,CAAgBA,CAAhB,CAAoBR,IAAAS,OAApB,CAAiCD,CAAA,EAAjC,CACA,CACI,IAAIE,QAAUV,IAAA,CAAKQ,CAAL,CAAAG,MAAA,CAAcT,MAAd,CAEd,IAAKQ,OAAL,CAAA,CAMA,IAAIE;AAAMF,OAAA,CAAQ,CAAR,CAAV,CACIG,MAAQH,OAAA,CAAQ,CAAR,CAFiB,KAI7B,GAJcA,OAAA,CAAQ,CAAR,CAId,GAEQN,aAOJ,GAPsBD,UAOtB,GALaV,OAtErBI,IAAA,CAsE2CO,aAtE3C,CAsE8BV,WAtE9B,CAsE0DW,IAtE3BC,EAA/B,CAFQf,WAER,CAsE0Dc,IAxEpCE,EAEtB,CAsE0DF,IAxE1BN,OAEhC,CAsE0DM,IAtEfP,MAA3C,CAsE0DO,IAtEFN,OAAxD,CAwEY,CAAAI,UAAA,CAAaC,aAGjB,EAAAC,IAAA,CAAO,CAAEC,EAAG,CAAL,CAAQC,EAAG,CAAX,CAAcT,MAAO,CAArB,CAAwBC,OAAQ,CAAhC,CATX,CAYA,IAAY,MAAZ,GAAIa,GAAJ,CAGIR,aAAA,CAAgBS,KAHpB,KAOA,QAAQD,GAAR,EAEI,KAAK,GAAL,CACA,KAAK,GAAL,CACA,KAAK,OAAL,CACA,KAAK,QAAL,CACIP,IAAA,CAAKO,GAAL,CAAA,CAAYE,QAAA,CAASD,KAAT,CAAgB,EAAhB,CANpB,CA5BA,CAHJ,CAkDIT,aAAJ,GAAsBD,UAAtB,EAEaV,OA1GbI,IAAA,CA0GmCO,aA1GnC,CA0GsBV,WA1GtB,CA0GkDW,IA1GnBC,EAA/B,CAFQf,WAER,CA0GkDc,IA5G5BE,EAEtB,CA0GkDF,IA5GlBN,OAEhC,CA0GkDM,IA1GPP,MAA3C,CA0GkDO,IA1GMN,OAAxD,CA6GA,OAAON,QA3EX,CAtDsH;",
"sources":["node_modules/Phaser/src/textures/parsers/UnityYAML.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$textures$parsers$UnityYAML\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar imageHeight = 0;\r\n\r\n/**\r\n * @function addFrame\r\n * @private\r\n * @since 3.0.0\r\n */\r\nvar addFrame = function (texture, sourceIndex, name, frame)\r\n{\r\n    //  The frame values are the exact coordinates to cut the frame out of the atlas from\r\n\r\n    var y = imageHeight - frame.y - frame.height;\r\n\r\n    texture.add(name, sourceIndex, frame.x, y, frame.width, frame.height);\r\n\r\n    //  These are the original (non-trimmed) sprite values\r\n    /*\r\n    if (src.trimmed)\r\n    {\r\n        newFrame.setTrim(\r\n            src.sourceSize.w,\r\n            src.sourceSize.h,\r\n            src.spriteSourceSize.x,\r\n            src.spriteSourceSize.y,\r\n            src.spriteSourceSize.w,\r\n            src.spriteSourceSize.h\r\n        );\r\n    }\r\n    */\r\n};\r\n\r\n/**\r\n * Parses a Unity YAML File and creates Frames in the Texture.\r\n * For more details about Sprite Meta Data see https://docs.unity3d.com/ScriptReference/SpriteMetaData.html\r\n *\r\n * @function Phaser.Textures.Parsers.UnityYAML\r\n * @memberOf Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {integer} sourceIndex - The index of the TextureSource.\r\n * @param {object} yaml - The YAML data.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\r\nvar UnityYAML = function (texture, sourceIndex, yaml)\r\n{\r\n    //  Add in a __BASE entry (for the entire atlas)\r\n    var source = texture.source[sourceIndex];\r\n\r\n    texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height);\r\n\r\n    imageHeight = source.height;\r\n\r\n    var data = yaml.split('\\n');\r\n\r\n    var lineRegExp = /^[ ]*(- )*(\\w+)+[: ]+(.*)/;\r\n\r\n    var prevSprite = '';\r\n    var currentSprite = '';\r\n    var rect = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n    // var pivot = { x: 0, y: 0 };\r\n    // var border = { x: 0, y: 0, z: 0, w: 0 };\r\n\r\n    for (var i = 0; i < data.length; i++)\r\n    {\r\n        var results = data[i].match(lineRegExp);\r\n\r\n        if (!results)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var isList = (results[1] === '- ');\r\n        var key = results[2];\r\n        var value = results[3];\r\n\r\n        if (isList)\r\n        {\r\n            if (currentSprite !== prevSprite)\r\n            {\r\n                addFrame(texture, sourceIndex, currentSprite, rect);\r\n\r\n                prevSprite = currentSprite;\r\n            }\r\n\r\n            rect = { x: 0, y: 0, width: 0, height: 0 };\r\n        }\r\n\r\n        if (key === 'name')\r\n        {\r\n            //  Start new list\r\n            currentSprite = value;\r\n            continue;\r\n        }\r\n\r\n        switch (key)\r\n        {\r\n            case 'x':\r\n            case 'y':\r\n            case 'width':\r\n            case 'height':\r\n                rect[key] = parseInt(value, 10);\r\n                break;\r\n\r\n            // case 'pivot':\r\n            //     pivot = eval('var obj = ' + value);\r\n            //     break;\r\n\r\n            // case 'border':\r\n            //     border = eval('var obj = ' + value);\r\n            //     break;\r\n        }\r\n    }\r\n\r\n    if (currentSprite !== prevSprite)\r\n    {\r\n        addFrame(texture, sourceIndex, currentSprite, rect);\r\n    }\r\n\r\n    return texture;\r\n};\r\n\r\nmodule.exports = UnityYAML;\r\n\r\n/*\r\nExample data:\r\n\r\nTextureImporter:\r\n  spritePivot: {x: .5, y: .5}\r\n  spriteBorder: {x: 0, y: 0, z: 0, w: 0}\r\n  spritePixelsToUnits: 100\r\n  spriteSheet:\r\n    sprites:\r\n    - name: asteroids_0\r\n      rect:\r\n        serializedVersion: 2\r\n        x: 5\r\n        y: 328\r\n        width: 65\r\n        height: 82\r\n      alignment: 0\r\n      pivot: {x: 0, y: 0}\r\n      border: {x: 0, y: 0, z: 0, w: 0}\r\n    - name: asteroids_1\r\n      rect:\r\n        serializedVersion: 2\r\n        x: 80\r\n        y: 322\r\n        width: 53\r\n        height: 88\r\n      alignment: 0\r\n      pivot: {x: 0, y: 0}\r\n      border: {x: 0, y: 0, z: 0, w: 0}\r\n  spritePackingTag: Asteroids\r\n*/\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","imageHeight","UnityYAML","texture","sourceIndex","yaml","source","add","width","height","data","split","lineRegExp","prevSprite","currentSprite","rect","x","y","i","length","results","match","key","value","parseInt"]
}
