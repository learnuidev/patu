{
"version":3,
"file":"module$lib$assets.js",
"lineCount":170,
"mappings":"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",
"sources":["lib/assets.js"],
"sourcesContent":["import { quad } from \"/lib/math.js\";\n\n// @ts-ignore\n// import unsciiSrc from \"./fonts/unscii_8x8.png\";\n\nconst unsciiSrc =\n  \"https://raw.githubusercontent.com/replit/kaboom/master/src/assets/unscii_8x8.png\";\n\nconst ASCII_CHARS =\n  \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\nconst DEF_FONT = \"unscii\";\n\nfunction loadImg(src) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = \"anonymous\";\n  return new Promise((resolve, reject) => {\n    img.onload = () => {\n      resolve(img);\n    };\n    img.onerror = () => {\n      reject(`failed to load ${src}`);\n    };\n  });\n}\n\nfunction isDataUrl(src) {\n  return src.startsWith(\"data:\");\n}\n\nfunction assetsInit(gfx, audio, gconf) {\n  const assets = {\n    lastLoaderID: 0,\n    loadRoot: \"\",\n    loaders: {},\n    sprites: {},\n    sounds: {},\n    fonts: {},\n    shaders: {}\n  };\n\n  function addLoader(prom) {\n    const id = assets.lastLoaderID;\n    assets.loaders[id] = false;\n    assets.lastLoaderID++;\n    prom\n      .catch(gconf.errHandler ? gconf.errHandler : console.error)\n      .finally(() => {\n        assets.loaders[id] = true;\n      });\n  }\n\n  // get current load progress\n  function loadProgress() {\n    let total = 0;\n    let loaded = 0;\n\n    for (const id in assets.loaders) {\n      total += 1;\n      if (assets.loaders[id]) {\n        loaded += 1;\n      }\n    }\n\n    return loaded / total;\n  }\n\n  // global load path prefix\n  function loadRoot(path) {\n    if (path) {\n      assets.loadRoot = path;\n    }\n    return assets.loadRoot;\n  }\n\n  // load a bitmap font to asset manager\n  function loadFont(name, src, gw, gh, chars = ASCII_CHARS) {\n    const loader =\n      new Promise() <\n      FontData >\n      ((resolve, reject) => {\n        const path = isDataUrl(src) ? src : assets.loadRoot + src;\n\n        loadImg(path)\n          .then(img => {\n            const font = gfx.makeFont(gfx.makeTex(img), gw, gh, chars);\n            assets.fonts[name] = font;\n            resolve(font);\n          })\n          .catch(reject);\n      });\n\n    addLoader(loader);\n\n    return loader;\n  }\n\n  // TODO: use getSprite() functions for async settings\n  // load a sprite to asset manager\n  function loadSprite(\n    name,\n    src,\n    conf = {\n      sliceX: 1,\n      sliceY: 1,\n      anims: {}\n    }\n  ) {\n    // synchronously load sprite from local pixel data\n    function loadRawSprite(\n      name,\n      src,\n      conf = {\n        sliceX: 1,\n        sliceY: 1,\n        gridWidth: 0,\n        gridHeight: 0,\n        anims: {}\n      }\n    ) {\n      const frames = [];\n      const tex = gfx.makeTex(src);\n      const sliceX = conf.sliceX || tex.width / (conf.gridWidth || tex.width);\n      const sliceY =\n        conf.sliceY || tex.height / (conf.gridHeight || tex.height);\n      const qw = 1 / sliceX;\n      const qh = 1 / sliceY;\n\n      for (let j = 0; j < sliceY; j++) {\n        for (let i = 0; i < sliceX; i++) {\n          frames.push(quad(i * qw, j * qh, qw, qh));\n        }\n      }\n\n      const sprite = {\n        tex: tex,\n        frames: frames,\n        anims: conf.anims || {}\n      };\n\n      assets.sprites[name] = sprite;\n\n      return sprite;\n    }\n\n    const loader =\n      new Promise() <\n      SpriteData >\n      ((resolve, reject) => {\n        if (!src) {\n          return reject(`expected sprite src for \"${name}\"`);\n        }\n\n        // from url\n        if (typeof src === \"string\") {\n          const path = isDataUrl(src) ? src : assets.loadRoot + src;\n          loadImg(path)\n            .then(img => {\n              resolve(loadRawSprite(name, img, conf));\n            })\n            .catch(reject);\n        } else {\n          resolve(loadRawSprite(name, src, conf));\n        }\n      });\n\n    addLoader(loader);\n\n    return loader;\n  }\n\n  function loadShader(name, vert, frag, isUrl = false) {\n    function loadRawShader(name, vert, frag) {\n      const shader = gfx.makeProgram(vert, frag);\n      assets.shaders[name] = shader;\n      return shader;\n    }\n\n    const loader =\n      new Promise() <\n      ShaderData >\n      ((resolve, reject) => {\n        if (!vert && !frag) {\n          return reject(\"no shader\");\n        }\n\n        function resolveUrl(url) {\n          return url\n            ? fetch(assets.loadRoot + url)\n                .then(r => {\n                  if (r.ok) {\n                    return r.text();\n                  } else {\n                    throw new Error(`failed to load ${url}`);\n                  }\n                })\n                .catch(reject)\n            : new Promise(r => r(null));\n        }\n\n        if (isUrl) {\n          Promise.all([resolveUrl(vert), resolveUrl(frag)])\n            .then(([vcode, fcode]) => {\n              resolve(loadRawShader(name, vcode, fcode));\n            })\n            .catch(reject);\n        } else {\n          try {\n            resolve(loadRawShader(name, vert, frag));\n          } catch (err) {\n            reject(err);\n          }\n        }\n      });\n\n    addLoader(loader);\n\n    return loader;\n  }\n\n  // load a sound to asset manager\n  function loadSound(name, src) {\n    const url = assets.loadRoot + src;\n\n    const loader =\n      new Promise() <\n      SoundData >\n      ((resolve, reject) => {\n        if (!src) {\n          return reject(`expected sound src for \"${name}\"`);\n        }\n\n        // from url\n        if (typeof src === \"string\") {\n          fetch(url)\n            .then(res => {\n              if (res.ok) {\n                return res.arrayBuffer();\n              } else {\n                throw new Error(`failed to load ${url}`);\n              }\n            })\n            .then(data => {\n              return new Promise((resolve2, reject2) => {\n                audio.ctx().decodeAudioData(data, resolve2, reject2);\n              });\n            })\n            .then(buf => {\n              assets.sounds[name] = buf;\n              resolve(buf);\n            })\n            .catch(reject);\n        }\n      });\n\n    addLoader(loader);\n\n    return loader;\n  }\n\n  function defFont() {\n    return assets.fonts[DEF_FONT];\n  }\n\n  // default font unscii http://pelulamu.net/unscii/\n  loadFont(DEF_FONT, unsciiSrc, 8, 8);\n\n  return {\n    loadRoot,\n    loadSprite,\n    loadSound,\n    loadFont,\n    loadShader,\n    loadProgress,\n    addLoader,\n    defFont,\n    sprites: assets.sprites,\n    fonts: assets.fonts,\n    sounds: assets.sounds,\n    shaders: assets.shaders\n  };\n}\n\nexport { assetsInit, DEF_FONT };\n"],
"names":["unsciiSrc","ASCII_CHARS","DEF_FONT","loadImg","src","img","Image","crossOrigin","Promise","resolve","reject","onload","img.onload","onerror","img.onerror","isDataUrl","startsWith","assetsInit","gfx","audio","gconf","addLoader","prom","id","assets","lastLoaderID","loaders","catch","errHandler","console","error","finally","loadProgress","total","loaded","loadRoot","path","loadFont","name","gw","gh","chars","loader","FontData","then","font","makeFont","makeTex","fonts","loadSprite","conf","loadRawSprite","sliceX","sliceY","gridWidth","gridHeight","anims","frames","tex","width","height","qw","qh","j","i","push","quad","sprite","sprites","SpriteData","loadShader","vert","frag","isUrl","loadRawShader","shader","makeProgram","shaders","ShaderData","resolveUrl","url","fetch","r","ok","text","Error","all","vcode","fcode","err","loadSound","SoundData","res","arrayBuffer","data","resolve2","reject2","ctx","decodeAudioData","buf","sounds","defFont","$jscomp$tmp$exports$module$name"]
}
