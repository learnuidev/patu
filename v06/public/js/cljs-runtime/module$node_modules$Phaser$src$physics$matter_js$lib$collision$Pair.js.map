{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$collision$Pair.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/collision/Pair.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$collision$Pair\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\r\n*\r\n* @class Pair\r\n*/\r\n\r\nvar Pair = {};\r\n\r\nmodule.exports = Pair;\r\n\r\n(function() {\r\n    \r\n    /**\r\n     * Creates a pair.\r\n     * @method create\r\n     * @param {collision} collision\r\n     * @param {number} timestamp\r\n     * @return {pair} A new pair\r\n     */\r\n    Pair.create = function(collision, timestamp) {\r\n        var bodyA = collision.bodyA,\r\n            bodyB = collision.bodyB;\r\n\r\n        var pair = {\r\n            id: Pair.id(bodyA, bodyB),\r\n            bodyA: bodyA,\r\n            bodyB: bodyB,\r\n            activeContacts: [],\r\n            separation: 0,\r\n            isActive: true,\r\n            confirmedActive: true,\r\n            isSensor: bodyA.isSensor || bodyB.isSensor,\r\n            timeCreated: timestamp,\r\n            timeUpdated: timestamp,\r\n            collision: null,\r\n            inverseMass: 0,\r\n            friction: 0,\r\n            frictionStatic: 0,\r\n            restitution: 0,\r\n            slop: 0\r\n        };\r\n\r\n        Pair.update(pair, collision, timestamp);\r\n\r\n        return pair;\r\n    };\r\n\r\n    /**\r\n     * Updates a pair given a collision.\r\n     * @method update\r\n     * @param {pair} pair\r\n     * @param {collision} collision\r\n     * @param {number} timestamp\r\n     */\r\n    Pair.update = function(pair, collision, timestamp) {\r\n        pair.collision = collision;\r\n\r\n        if (collision.collided) {\r\n            var supports = collision.supports,\r\n                activeContacts = pair.activeContacts,\r\n                parentA = collision.parentA,\r\n                parentB = collision.parentB;\r\n\r\n            pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\r\n            pair.friction = Math.min(parentA.friction, parentB.friction);\r\n            pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\r\n            pair.restitution = Math.max(parentA.restitution, parentB.restitution);\r\n            pair.slop = Math.max(parentA.slop, parentB.slop);\r\n\r\n            for (var i = 0; i < supports.length; i++) {\r\n                activeContacts[i] = supports[i].contact;\r\n            }\r\n\r\n            // optimise array size\r\n            var supportCount = supports.length;\r\n            if (supportCount < activeContacts.length) {\r\n                activeContacts.length = supportCount;\r\n            }\r\n\r\n            pair.separation = collision.depth;\r\n            Pair.setActive(pair, true, timestamp);\r\n        } else {\r\n            if (pair.isActive === true)\r\n                Pair.setActive(pair, false, timestamp);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Set a pair as active or inactive.\r\n     * @method setActive\r\n     * @param {pair} pair\r\n     * @param {bool} isActive\r\n     * @param {number} timestamp\r\n     */\r\n    Pair.setActive = function(pair, isActive, timestamp) {\r\n        if (isActive) {\r\n            pair.isActive = true;\r\n            pair.timeUpdated = timestamp;\r\n        } else {\r\n            pair.isActive = false;\r\n            pair.activeContacts.length = 0;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the id for the given pair.\r\n     * @method id\r\n     * @param {body} bodyA\r\n     * @param {body} bodyB\r\n     * @return {string} Unique pairId\r\n     */\r\n    Pair.id = function(bodyA, bodyB) {\r\n        if (bodyA.id < bodyB.id) {\r\n            return 'A' + bodyA.id + 'B' + bodyB.id;\r\n        } else {\r\n            return 'A' + bodyB.id + 'B' + bodyA.id;\r\n        }\r\n    };\r\n\r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Pair","create","Pair.create","collision","timestamp","bodyA","bodyB","pair","id","activeContacts","separation","isActive","confirmedActive","isSensor","timeCreated","timeUpdated","inverseMass","friction","frictionStatic","restitution","slop","update","Pair.update","collided","supports","parentA","parentB","Math","min","max","i","length","contact","supportCount","depth","setActive","Pair.setActive","Pair.id"]
}
