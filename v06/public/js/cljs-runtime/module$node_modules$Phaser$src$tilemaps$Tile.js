shadow$provide.module$node_modules$Phaser$src$tilemaps$Tile=function(global,require,module,exports){global=require("module$node_modules$Phaser$src$utils$Class");exports=require("module$node_modules$Phaser$src$gameobjects$components$index");var Rectangle=require("module$node_modules$Phaser$src$geom$rectangle$index");require=new global({Mixins:[exports.Alpha,exports.Flip,exports.Visible],initialize:function(layer,index,x,y,width,height,baseWidth,baseHeight){this.layer=layer;this.index=index;this.x=
x;this.y=y;this.width=width;this.height=height;this.baseWidth=void 0!==baseWidth?baseWidth:width;this.baseHeight=void 0!==baseHeight?baseHeight:height;this.pixelY=this.pixelX=0;this.updatePixelXY();this.properties={};this.rotation=0;this.faceBottom=this.faceTop=this.faceRight=this.faceLeft=this.collideDown=this.collideUp=this.collideRight=this.collideLeft=!1;this.collisionCallback=null;this.collisionCallbackContext=this;this.tint=16777215;this.physics={}},containsPoint:function(x,y){return!(x<this.pixelX||
y<this.pixelY||x>this.right||y>this.bottom)},copy:function(tile){this.index=tile.index;this.alpha=tile.alpha;this.properties=tile.properties;this.visible=tile.visible;this.setFlip(tile.flipX,tile.flipY);this.tint=tile.tint;this.rotation=tile.rotation;this.collideUp=tile.collideUp;this.collideDown=tile.collideDown;this.collideLeft=tile.collideLeft;this.collideRight=tile.collideRight;this.collisionCallback=tile.collisionCallback;this.collisionCallbackContext=tile.collisionCallbackContext;return this},
getCollisionGroup:function(){return this.tileset?this.tileset.getTileCollisionGroup(this.index):null},getTileData:function(){return this.tileset?this.tileset.getTileData(this.index):null},getLeft:function(camera){var tilemapLayer=this.tilemapLayer;return tilemapLayer?tilemapLayer.tileToWorldX(this.x,camera):this.x*this.baseWidth},getRight:function(camera){var tilemapLayer=this.tilemapLayer;return tilemapLayer?this.getLeft(camera)+this.width*tilemapLayer.scaleX:this.getLeft(camera)+this.width},getTop:function(camera){var tilemapLayer=
this.tilemapLayer;return tilemapLayer?tilemapLayer.tileToWorldY(this.y,camera)-(this.height-this.baseHeight)*tilemapLayer.scaleY:this.y*this.baseHeight-(this.height-this.baseHeight)},getBottom:function(camera){var tilemapLayer=this.tilemapLayer;return tilemapLayer?this.getTop(camera)+this.height*tilemapLayer.scaleY:this.getTop(camera)+this.height},getBounds:function(camera,output){void 0===output&&(output=new Rectangle);output.x=this.getLeft();output.y=this.getTop();output.width=this.getRight()-output.x;
output.height=this.getBottom()-output.y;return output},getCenterX:function(camera){return this.getLeft(camera)+this.width/2},getCenterY:function(camera){return this.getTop(camera)+this.height/2},destroy:function(){this.properties=this.collisionCallbackContext=this.collisionCallback=void 0},intersects:function(x,y,right,bottom){return!(right<=this.pixelX||bottom<=this.pixelY||x>=this.right||y>=this.bottom)},isInteresting:function(collides,faces){return collides&&faces?this.canCollide||this.hasInterestingFace:
collides?this.collides:faces?this.hasInterestingFace:!1},resetCollision:function(recalculateFaces){void 0===recalculateFaces&&(recalculateFaces=!0);this.faceRight=this.faceLeft=this.faceBottom=this.faceTop=this.collideDown=this.collideUp=this.collideRight=this.collideLeft=!1;recalculateFaces&&this.tilemapLayer&&this.tilemapLayer.calculateFacesAt(this.x,this.y);return this},resetFaces:function(){this.faceRight=this.faceLeft=this.faceBottom=this.faceTop=!1;return this},setCollision:function(left,right,
up,down,recalculateFaces){void 0===right&&(right=left);void 0===up&&(up=left);void 0===down&&(down=left);void 0===recalculateFaces&&(recalculateFaces=!0);this.collideLeft=left;this.collideRight=right;this.collideUp=up;this.collideDown=down;this.faceLeft=left;this.faceRight=right;this.faceTop=up;this.faceBottom=down;recalculateFaces&&this.tilemapLayer&&this.tilemapLayer.calculateFacesAt(this.x,this.y);return this},setCollisionCallback:function(callback,context){null===callback?this.collisionCallbackContext=
this.collisionCallback=void 0:(this.collisionCallback=callback,this.collisionCallbackContext=context);return this},setSize:function(tileWidth,tileHeight,baseWidth,baseHeight){void 0!==tileWidth&&(this.width=tileWidth);void 0!==tileHeight&&(this.height=tileHeight);void 0!==baseWidth&&(this.baseWidth=baseWidth);void 0!==baseHeight&&(this.baseHeight=baseHeight);this.updatePixelXY();return this},updatePixelXY:function(){this.pixelX=this.x*this.baseWidth;this.pixelY=this.y*this.baseHeight-(this.height-
this.baseHeight);return this},canCollide:{get:function(){return this.collideLeft||this.collideRight||this.collideUp||this.collideDown||this.collisionCallback}},collides:{get:function(){return this.collideLeft||this.collideRight||this.collideUp||this.collideDown}},hasInterestingFace:{get:function(){return this.faceTop||this.faceBottom||this.faceLeft||this.faceRight}},tileset:{get:function(){var tilemapLayer=this.tilemapLayer;return tilemapLayer?tilemapLayer.tileset:null}},tilemapLayer:{get:function(){return this.layer.tilemapLayer}},
tilemap:{get:function(){var tilemapLayer=this.tilemapLayer;return tilemapLayer?tilemapLayer.tilemap:null}}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$tilemaps$Tile.js.map
