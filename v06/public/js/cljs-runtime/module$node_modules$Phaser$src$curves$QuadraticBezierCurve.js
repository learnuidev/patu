shadow$provide.module$node_modules$Phaser$src$curves$QuadraticBezierCurve=function(global,require,module,exports){global=require("module$node_modules$Phaser$src$utils$Class");var Curve=require("module$node_modules$Phaser$src$curves$Curve"),QuadraticBezierInterpolation=require("module$node_modules$Phaser$src$math$interpolation$QuadraticBezierInterpolation"),Vector2=require("module$node_modules$Phaser$src$math$Vector2"),QuadraticBezier=new global({Extends:Curve,initialize:function(p0,p1,p2){Curve.call(this,
"QuadraticBezier");Array.isArray(p0)&&(p2=new Vector2(p0[4],p0[5]),p1=new Vector2(p0[2],p0[3]),p0=new Vector2(p0[0],p0[1]));this.p0=p0;this.p1=p1;this.p2=p2},getStartPoint:function(out){void 0===out&&(out=new Vector2);return out.copy(this.p0)},getResolution:function(divisions){return divisions},getPoint:function(t,out){void 0===out&&(out=new Vector2);var p0=this.p0,p1=this.p1,p2=this.p2;return out.set(QuadraticBezierInterpolation(t,p0.x,p1.x,p2.x),QuadraticBezierInterpolation(t,p0.y,p1.y,p2.y))},
draw:function(graphics,pointsTotal){void 0===pointsTotal&&(pointsTotal=32);pointsTotal=this.getPoints(pointsTotal);graphics.beginPath();graphics.moveTo(this.p0.x,this.p0.y);for(var i=1;i<pointsTotal.length;i++)graphics.lineTo(pointsTotal[i].x,pointsTotal[i].y);graphics.strokePath();return graphics},toJSON:function(){return{type:this.type,points:[this.p0.x,this.p0.y,this.p1.x,this.p1.y,this.p2.x,this.p2.y]}}});QuadraticBezier.fromJSON=function(data){var points=data.points;data=new Vector2(points[0],
points[1]);var p1=new Vector2(points[2],points[3]);points=new Vector2(points[4],points[5]);return new QuadraticBezier(data,p1,points)};module.exports=QuadraticBezier}
//# sourceMappingURL=module$node_modules$Phaser$src$curves$QuadraticBezierCurve.js.map
