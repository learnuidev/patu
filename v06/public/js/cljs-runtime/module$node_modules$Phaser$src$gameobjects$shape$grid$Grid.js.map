{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$grid$Grid.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/shape/grid/Grid.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$grid$Grid\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\nvar Shape = require('../Shape');\r\nvar GridRender = require('./GridRender');\r\n\r\n/**\r\n * @classdesc\r\n * The Grid Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only fill colors and cannot be stroked.\r\n * \r\n * A Grid Shape allows you to display a grid in your game, where you can control the size of the\r\n * grid as well as the width and height of the grid cells. You can set a fill color for each grid\r\n * cell as well as an alternate fill color. When the alternate fill color is set then the grid\r\n * cells will alternate the fill colors as they render, creating a chess-board effect. You can\r\n * also optionally have an outline fill color. If set, this draws lines between the grid cells\r\n * in the given color. If you specify an outline color with an alpha of zero, then it will draw\r\n * the cells spaced out, but without the lines between them.\r\n *\r\n * @class Grid\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [width=128] - The width of the grid.\r\n * @param {number} [height=128] - The height of the grid.\r\n * @param {number} [cellWidth=32] - The width of one cell in the grid.\r\n * @param {number} [cellHeight=32] - The height of one cell in the grid.\r\n * @param {number} [fillColor] - The color the grid cells will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n * @param {number} [outlineFillColor] - The color of the lines between the grid cells. See the `setOutline` method.\r\n * @param {number} [outlineFillAlpha] - The alpha of the lines between the grid cells.\r\n */\r\nvar Grid = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        GridRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Grid (scene, x, y, width, height, cellWidth, cellHeight, fillColor, fillAlpha, outlineFillColor, outlineFillAlpha)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = 128; }\r\n        if (height === undefined) { height = 128; }\r\n        if (cellWidth === undefined) { cellWidth = 32; }\r\n        if (cellHeight === undefined) { cellHeight = 32; }\r\n\r\n        Shape.call(this, scene, 'Grid', null);\r\n\r\n        /**\r\n         * The width of each grid cell.\r\n         * Must be a positive value.\r\n         *\r\n         * @name Phaser.GameObjects.Grid#cellWidth\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.cellWidth = cellWidth;\r\n\r\n        /**\r\n         * The height of each grid cell.\r\n         * Must be a positive value.\r\n         *\r\n         * @name Phaser.GameObjects.Grid#cellHeight\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.cellHeight = cellHeight;\r\n\r\n        /**\r\n         * Will the grid render its cells in the `fillColor`?\r\n         *\r\n         * @name Phaser.GameObjects.Grid#showCells\r\n         * @type {boolean}\r\n         * @since 3.13.0\r\n         */\r\n        this.showCells = true;\r\n\r\n        /**\r\n         * The color of the lines between each grid cell.\r\n         *\r\n         * @name Phaser.GameObjects.Grid#outlineFillColor\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.outlineFillColor = 0;\r\n\r\n        /**\r\n         * The alpha value for the color of the lines between each grid cell.\r\n         *\r\n         * @name Phaser.GameObjects.Grid#outlineFillAlpha\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.outlineFillAlpha = 0;\r\n\r\n        /**\r\n         * Will the grid display the lines between each cell when it renders?\r\n         *\r\n         * @name Phaser.GameObjects.Grid#showOutline\r\n         * @type {boolean}\r\n         * @since 3.13.0\r\n         */\r\n        this.showOutline = true;\r\n\r\n        /**\r\n         * Will the grid render the alternating cells in the `altFillColor`?\r\n         *\r\n         * @name Phaser.GameObjects.Grid#showAltCells\r\n         * @type {boolean}\r\n         * @since 3.13.0\r\n         */\r\n        this.showAltCells = false;\r\n\r\n        /**\r\n         * The color the alternating grid cells will be filled with, i.e. 0xff0000 for red.\r\n         *\r\n         * @name Phaser.GameObjects.Grid#altFillColor\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.altFillColor;\r\n\r\n        /**\r\n         * The alpha the alternating grid cells will be filled with.\r\n         * You can also set the alpha of the overall Shape using its `alpha` property.\r\n         *\r\n         * @name Phaser.GameObjects.Grid#altFillAlpha\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.altFillAlpha;\r\n\r\n        this.setPosition(x, y);\r\n        this.setSize(width, height);\r\n\r\n        if (fillColor !== undefined)\r\n        {\r\n            this.setFillStyle(fillColor, fillAlpha);\r\n        }\r\n\r\n        if (outlineFillColor !== undefined)\r\n        {\r\n            this.setOutlineStyle(outlineFillColor, outlineFillAlpha);\r\n        }\r\n\r\n        this.updateDisplayOrigin();\r\n    },\r\n\r\n    /**\r\n     * Sets the fill color and alpha level the grid cells will use when rendering.\r\n     * \r\n     * If this method is called with no values then the grid cells will not be rendered, \r\n     * however the grid lines and alternating cells may still be.\r\n     * \r\n     * Also see the `setOutlineStyle` and `setAltFillStyle` methods.\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Grid#setFillStyle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} [fillColor] - The color the grid cells will be filled with, i.e. 0xff0000 for red.\r\n     * @param {number} [fillAlpha=1] - The alpha the grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setFillStyle: function (fillColor, fillAlpha)\r\n    {\r\n        if (fillAlpha === undefined) { fillAlpha = 1; }\r\n\r\n        if (fillColor === undefined)\r\n        {\r\n            this.showCells = false;\r\n        }\r\n        else\r\n        {\r\n            this.fillColor = fillColor;\r\n            this.fillAlpha = fillAlpha;\r\n            this.showCells = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the fill color and alpha level that the alternating grid cells will use.\r\n     * \r\n     * If this method is called with no values then alternating grid cells will not be rendered in a different color.\r\n     * \r\n     * Also see the `setOutlineStyle` and `setFillStyle` methods.\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Grid#setAltFillStyle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} [fillColor] - The color the alternating grid cells will be filled with, i.e. 0xff0000 for red.\r\n     * @param {number} [fillAlpha=1] - The alpha the alternating grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setAltFillStyle: function (fillColor, fillAlpha)\r\n    {\r\n        if (fillAlpha === undefined) { fillAlpha = 1; }\r\n\r\n        if (fillColor === undefined)\r\n        {\r\n            this.showAltCells = false;\r\n        }\r\n        else\r\n        {\r\n            this.altFillColor = fillColor;\r\n            this.altFillAlpha = fillAlpha;\r\n            this.showAltCells = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the fill color and alpha level that the lines between each grid cell will use.\r\n     * \r\n     * If this method is called with no values then the grid lines will not be rendered at all, however\r\n     * the cells themselves may still be if they have colors set.\r\n     * \r\n     * Also see the `setFillStyle` and `setAltFillStyle` methods.\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Grid#setOutlineStyle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} [fillColor] - The color the lines between the grid cells will be filled with, i.e. 0xff0000 for red.\r\n     * @param {number} [fillAlpha=1] - The alpha the lines between the grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setOutlineStyle: function (fillColor, fillAlpha)\r\n    {\r\n        if (fillAlpha === undefined) { fillAlpha = 1; }\r\n\r\n        if (fillColor === undefined)\r\n        {\r\n            this.showOutline = false;\r\n        }\r\n        else\r\n        {\r\n            this.outlineFillColor = fillColor;\r\n            this.outlineFillAlpha = fillAlpha;\r\n            this.showOutline = true;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Grid;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Shape","GridRender","Grid","Extends","Mixins","initialize","scene","x","y","width","height","cellWidth","cellHeight","fillColor","fillAlpha","outlineFillColor","outlineFillAlpha","undefined","call","showCells","showOutline","showAltCells","setPosition","setSize","setFillStyle","setOutlineStyle","updateDisplayOrigin","setAltFillStyle","altFillColor","altFillAlpha"]
}
