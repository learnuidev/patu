shadow$provide.module$node_modules$Phaser$src$physics$arcade$Body=function(global,require,module,exports){var CircleContains=require("module$node_modules$Phaser$src$geom$circle$Contains");global=require("module$node_modules$Phaser$src$utils$Class");var CONST=require("module$node_modules$Phaser$src$physics$arcade$const"),RadToDeg=require("module$node_modules$Phaser$src$math$RadToDeg"),Rectangle=require("module$node_modules$Phaser$src$geom$rectangle$Rectangle"),RectangleContains=require("module$node_modules$Phaser$src$geom$rectangle$Contains"),
Vector2=require("module$node_modules$Phaser$src$math$Vector2");require=new global({initialize:function(world,gameObject){var width=gameObject.width?gameObject.width:64,height=gameObject.height?gameObject.height:64;this.world=world;this.gameObject=gameObject;this.transform={x:gameObject.x,y:gameObject.y,rotation:gameObject.angle,scaleX:gameObject.scaleX,scaleY:gameObject.scaleY,displayOriginX:gameObject.displayOriginX,displayOriginY:gameObject.displayOriginY};this.debugShowBody=world.defaults.debugShowBody;
this.debugShowVelocity=world.defaults.debugShowVelocity;this.debugBodyColor=world.defaults.bodyDebugColor;this.enable=!0;this.isCircle=!1;this.radius=0;this.offset=new Vector2;this.position=new Vector2(gameObject.x,gameObject.y);this.prev=new Vector2(gameObject.x,gameObject.y);this.allowRotation=!0;this.preRotation=this.rotation=gameObject.angle;this.width=width;this.height=height;this.sourceWidth=width;this.sourceHeight=height;gameObject.frame&&(this.sourceWidth=gameObject.frame.realWidth,this.sourceHeight=
gameObject.frame.realHeight);this.halfWidth=Math.abs(width/2);this.halfHeight=Math.abs(height/2);this.center=new Vector2(gameObject.x+this.halfWidth,gameObject.y+this.halfHeight);this.velocity=new Vector2;this.newVelocity=new Vector2;this.deltaMax=new Vector2;this.acceleration=new Vector2;this.allowDrag=!0;this.drag=new Vector2;this.allowGravity=!0;this.gravity=new Vector2;this.bounce=new Vector2;this.worldBounce=null;this.onOverlap=this.onCollide=this.onWorldBounds=!1;this.maxVelocity=new Vector2(1E4,
1E4);this.friction=new Vector2(1,0);this.useDamping=!1;this.angularDrag=this.angularAcceleration=this.angularVelocity=0;this.maxAngular=1E3;this.mass=1;this.speed=this.angle=0;this.facing=CONST.FACING_NONE;this.immovable=!1;this.moves=!0;this.customSeparateY=this.customSeparateX=!1;this.overlapR=this.overlapY=this.overlapX=0;this.collideWorldBounds=this.embedded=!1;this.checkCollision={none:!1,up:!0,down:!0,left:!0,right:!0};this.touching={none:!0,up:!1,down:!1,left:!1,right:!1};this.wasTouching=
{none:!0,up:!1,down:!1,left:!1,right:!1};this.blocked={none:!0,up:!1,down:!1,left:!1,right:!1};this.isMoving=this.syncBounds=!1;this.stopVelocityOnCollide=!0;this.physicsType=CONST.DYNAMIC_BODY;this._reset=!0;this._sx=gameObject.scaleX;this._sy=gameObject.scaleY;this._dy=this._dx=0;this._bounds=new Rectangle},updateBounds:function(){var sprite=this.gameObject,transform=this.transform;if(sprite.parentContainer){var matrix=sprite.getWorldTransformMatrix(this.world._tempMatrix,this.world._tempMatrix2);
transform.x=matrix.tx;transform.y=matrix.ty;transform.rotation=RadToDeg(matrix.rotation);transform.scaleX=matrix.scaleX;transform.scaleY=matrix.scaleY}else transform.x=sprite.x,transform.y=sprite.y,transform.rotation=sprite.angle,transform.scaleX=sprite.scaleX,transform.scaleY=sprite.scaleY;transform.displayOriginX=sprite.displayOriginX;transform.displayOriginY=sprite.displayOriginY;matrix=!1;if(this.syncBounds)transform=sprite.getBounds(this._bounds),this.width=transform.width,this.height=transform.height,
matrix=!0;else if(sprite=Math.abs(transform.scaleX),transform=Math.abs(transform.scaleY),this._sx!==sprite||this._sy!==transform)this.width=this.sourceWidth*sprite,this.height=this.sourceHeight*transform,this._sx=sprite,this._sy=transform,matrix=!0;matrix&&(this.halfWidth=Math.floor(this.width/2),this.halfHeight=Math.floor(this.height/2),this.updateCenter())},updateCenter:function(){this.center.set(this.position.x+this.halfWidth,this.position.y+this.halfHeight)},update:function(delta){this.wasTouching.none=
this.touching.none;this.wasTouching.up=this.touching.up;this.wasTouching.down=this.touching.down;this.wasTouching.left=this.touching.left;this.wasTouching.right=this.touching.right;this.touching.none=!0;this.touching.up=!1;this.touching.down=!1;this.touching.left=!1;this.touching.right=!1;this.blocked.none=!0;this.blocked.up=!1;this.blocked.down=!1;this.blocked.left=!1;this.blocked.right=!1;this.overlapY=this.overlapX=this.overlapR=0;this.embedded=!1;this.updateBounds();var sprite=this.transform;
this.position.x=sprite.x+sprite.scaleX*(this.offset.x-sprite.displayOriginX);this.position.y=sprite.y+sprite.scaleY*(this.offset.y-sprite.displayOriginY);this.updateCenter();this.preRotation=this.rotation=sprite.rotation;this._reset&&(this.prev.x=this.position.x,this.prev.y=this.position.y);if(this.moves){this.world.updateMotion(this,delta);sprite=this.velocity.x;var vy=this.velocity.y;this.newVelocity.set(sprite*delta,vy*delta);this.position.add(this.newVelocity);this.updateCenter();this.angle=Math.atan2(vy,
sprite);this.speed=Math.sqrt(sprite*sprite+vy*vy);this.collideWorldBounds&&this.checkWorldBounds()&&this.onWorldBounds&&this.world.emit("worldbounds",this,this.blocked.up,this.blocked.down,this.blocked.left,this.blocked.right)}this._dx=this.position.x-this.prev.x;this._dy=this.position.y-this.prev.y},postUpdate:function(){this._dx=this.position.x-this.prev.x;this._dy=this.position.y-this.prev.y;this.moves&&(0!==this.deltaMax.x&&0!==this._dx&&(0>this._dx&&this._dx<-this.deltaMax.x?this._dx=-this.deltaMax.x:
0<this._dx&&this._dx>this.deltaMax.x&&(this._dx=this.deltaMax.x)),0!==this.deltaMax.y&&0!==this._dy&&(0>this._dy&&this._dy<-this.deltaMax.y?this._dy=-this.deltaMax.y:0<this._dy&&this._dy>this.deltaMax.y&&(this._dy=this.deltaMax.y)),this.gameObject.x+=this._dx,this.gameObject.y+=this._dy,this._reset=!0);0>this._dx?this.facing=CONST.FACING_LEFT:0<this._dx&&(this.facing=CONST.FACING_RIGHT);0>this._dy?this.facing=CONST.FACING_UP:0<this._dy&&(this.facing=CONST.FACING_DOWN);this.allowRotation&&(this.gameObject.angle+=
this.deltaZ());this.prev.x=this.position.x;this.prev.y=this.position.y},checkWorldBounds:function(){var pos=this.position,bounds=this.world.bounds,check=this.world.checkCollision,bx=this.worldBounce?-this.worldBounce.x:-this.bounce.x,by=this.worldBounce?-this.worldBounce.y:-this.bounce.y;pos.x<bounds.x&&check.left?(pos.x=bounds.x,this.velocity.x*=bx,this.blocked.left=!0,this.blocked.none=!1):this.right>bounds.right&&check.right&&(pos.x=bounds.right-this.width,this.velocity.x*=bx,this.blocked.right=
!0,this.blocked.none=!1);pos.y<bounds.y&&check.up?(pos.y=bounds.y,this.velocity.y*=by,this.blocked.up=!0,this.blocked.none=!1):this.bottom>bounds.bottom&&check.down&&(pos.y=bounds.bottom-this.height,this.velocity.y*=by,this.blocked.down=!0,this.blocked.none=!1);return!this.blocked.none},setOffset:function(x,y){void 0===y&&(y=x);this.offset.set(x,y);return this},setSize:function(width,height,center){void 0===center&&(center=!0);var gameObject=this.gameObject;!width&&gameObject.frame&&(width=gameObject.frame.realWidth);
!height&&gameObject.frame&&(height=gameObject.frame.realHeight);this.sourceWidth=width;this.sourceHeight=height;this.width=this.sourceWidth*this._sx;this.height=this.sourceHeight*this._sy;this.halfWidth=Math.floor(this.width/2);this.halfHeight=Math.floor(this.height/2);this.updateCenter();center&&gameObject.getCenter&&this.offset.set(gameObject.displayWidth/2-this.halfWidth,gameObject.displayHeight/2-this.halfHeight);this.isCircle=!1;this.radius=0;return this},setCircle:function(radius,offsetX,offsetY){void 0===
offsetX&&(offsetX=this.offset.x);void 0===offsetY&&(offsetY=this.offset.y);0<radius?(this.isCircle=!0,this.radius=radius,this.sourceWidth=2*radius,this.sourceHeight=2*radius,this.width=this.sourceWidth*this._sx,this.height=this.sourceHeight*this._sy,this.halfWidth=Math.floor(this.width/2),this.halfHeight=Math.floor(this.height/2),this.offset.set(offsetX,offsetY),this.updateCenter()):this.isCircle=!1;return this},reset:function(x,y){this.stop();var gameObject=this.gameObject;gameObject.setPosition(x,
y);gameObject.getTopLeft(this.position);this.prev.copy(this.position);this.preRotation=this.rotation=gameObject.angle;this.updateBounds();this.updateCenter()},stop:function(){this.velocity.set(0);this.acceleration.set(0);this.angularAcceleration=this.angularVelocity=this.speed=0;return this},getBounds:function(obj){obj.x=this.x;obj.y=this.y;obj.right=this.right;obj.bottom=this.bottom;return obj},hitTest:function(x,y){return this.isCircle?CircleContains(this,x,y):RectangleContains(this,x,y)},onFloor:function(){return this.blocked.down},
onCeiling:function(){return this.blocked.up},onWall:function(){return this.blocked.left||this.blocked.right},deltaAbsX:function(){return 0<this._dx?this._dx:-this._dx},deltaAbsY:function(){return 0<this._dy?this._dy:-this._dy},deltaX:function(){return this._dx},deltaY:function(){return this._dy},deltaZ:function(){return this.rotation-this.preRotation},destroy:function(){this.enable=!1;this.world.pendingDestroy.set(this)},drawDebug:function(graphic){var pos=this.position,x=pos.x+this.halfWidth,y=pos.y+
this.halfHeight;this.debugShowBody&&(graphic.lineStyle(1,this.debugBodyColor),this.isCircle?graphic.strokeCircle(x,y,this.width/2):graphic.strokeRect(pos.x,pos.y,this.width,this.height));this.debugShowVelocity&&(graphic.lineStyle(1,this.world.defaults.velocityDebugColor,1),graphic.lineBetween(x,y,x+this.velocity.x/2,y+this.velocity.y/2))},willDrawDebug:function(){return this.debugShowBody||this.debugShowVelocity},setCollideWorldBounds:function(value){void 0===value&&(value=!0);this.collideWorldBounds=
value;return this},setVelocity:function(x,y){this.velocity.set(x,y);this.speed=Math.sqrt(x*x+y*y);return this},setVelocityX:function(value){this.velocity.x=value;var vy=this.velocity.y;this.speed=Math.sqrt(value*value+vy*vy);return this},setVelocityY:function(value){this.velocity.y=value;var vx=this.velocity.x;this.speed=Math.sqrt(vx*vx+value*value);return this},setMaxVelocity:function(x,y){this.maxVelocity.set(x,y);return this},setBounce:function(x,y){this.bounce.set(x,y);return this},setBounceX:function(value){this.bounce.x=
value;return this},setBounceY:function(value){this.bounce.y=value;return this},setAcceleration:function(x,y){this.acceleration.set(x,y);return this},setAccelerationX:function(value){this.acceleration.x=value;return this},setAccelerationY:function(value){this.acceleration.y=value;return this},setAllowDrag:function(value){void 0===value&&(value=!0);this.allowDrag=value;return this},setAllowGravity:function(value){void 0===value&&(value=!0);this.allowGravity=value;return this},setAllowRotation:function(value){void 0===
value&&(value=!0);this.allowRotation=value;return this},setDrag:function(x,y){this.drag.set(x,y);return this},setDragX:function(value){this.drag.x=value;return this},setDragY:function(value){this.drag.y=value;return this},setGravity:function(x,y){this.gravity.set(x,y);return this},setGravityX:function(value){this.gravity.x=value;return this},setGravityY:function(value){this.gravity.y=value;return this},setFriction:function(x,y){this.friction.set(x,y);return this},setFrictionX:function(value){this.friction.x=
value;return this},setFrictionY:function(value){this.friction.y=value;return this},setAngularVelocity:function(value){this.angularVelocity=value;return this},setAngularAcceleration:function(value){this.angularAcceleration=value;return this},setAngularDrag:function(value){this.angularDrag=value;return this},setMass:function(value){this.mass=value;return this},setImmovable:function(value){void 0===value&&(value=!0);this.immovable=value;return this},x:{get:function(){return this.position.x},set:function(value){this.position.x=
value}},y:{get:function(){return this.position.y},set:function(value){this.position.y=value}},left:{get:function(){return this.position.x}},right:{get:function(){return this.position.x+this.width}},top:{get:function(){return this.position.y}},bottom:{get:function(){return this.position.y+this.height}}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$physics$arcade$Body.js.map
