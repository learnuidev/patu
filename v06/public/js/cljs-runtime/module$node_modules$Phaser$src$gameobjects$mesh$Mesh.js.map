{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$mesh$Mesh.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,qDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO7GC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACRI,QAAAA,CAAaJ,OAAA,CAAQ,6DAAR,CACjB,KAAIK,WAAaL,OAAA,CAAQ,uDAAR,CACbM,QAAAA,CAAaN,OAAA,CAAQ,4DAAR,CAsCbO,QAAAA,CAAO,IAAIJ,MAAJ,CAAU,CAEjBK,QAASH,UAFQ,CAIjBI,OAAQ,CACJL,OAAAM,MADI,CAEJN,OAAAO,UAFI,CAGJP,OAAAQ,MAHI,CAIJR,OAAAS,KAJI;AAKJT,OAAAU,UALI,CAMJV,OAAAW,KANI,CAOJX,OAAAY,OAPI,CAQJZ,OAAAa,SARI,CASJb,OAAAc,UATI,CAUJd,OAAAe,KAVI,CAWJf,OAAAgB,QAXI,CAYJhB,OAAAiB,UAZI,CAaJjB,OAAAkB,QAbI,CAcJlB,OAAAmB,aAdI,CAeJjB,OAfI,CAJS,CAsBjBkB,WAEAjB,QAAc,CAACkB,KAAD,CAAQC,CAAR,CAAWC,CAAX,CAAcC,QAAd,CAAwBC,EAAxB,CAA4BC,MAA5B,CAAoCC,MAApC,CAA4CC,OAA5C,CAAqDC,KAArD,CACd,CACI5B,UAAA6B,KAAA,CAAgB,IAAhB,CAAsBT,KAAtB,CAA6B,MAA7B,CAEA,IAAIG,QAAAO,OAAJ,GAAwBN,EAAAM,OAAxB,CAEI,KAAUC,MAAJ,CAAU,uCAAV,CAAN,CAGAC,KAAAA,CAAcT,QAAAO,OAAdE,CAAgC,CAAhCA,CAAqC,CAEzC,IAAoB,CAApB,CAAIP,MAAAK,OAAJ,EAAyBL,MAAAK,OAAzB,CAAyCE,KAAzC,CAEI,KAAUD,MAAJ,CAAU,0CAAV,CAAN,CAGJ,GAAoB,CAApB,CAAIL,MAAAI,OAAJ;AAAyBJ,MAAAI,OAAzB,CAAyCE,KAAzC,CAEI,KAAUD,MAAJ,CAAU,0CAAV,CAAN,CAGJ,IAAIE,CAEJ,IAAsB,CAAtB,GAAIR,MAAAK,OAAJ,CAEI,IAAKG,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBD,KAAhB,CAA4B,EAAEC,CAA9B,CAEIR,MAAA,CAAOQ,CAAP,CAAA,CAAY,QAIpB,IAAsB,CAAtB,GAAIP,MAAAI,OAAJ,CAEI,IAAKG,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBD,KAAhB,CAA4B,EAAEC,CAA9B,CAEIP,MAAA,CAAOO,CAAP,CAAA,CAAY,CAWpB,KAAAV,SAAA,CAAgB,IAAIW,YAAJ,CAAiBX,QAAjB,CAShB,KAAAC,GAAA,CAAU,IAAIU,YAAJ,CAAiBV,EAAjB,CASV,KAAAC,OAAA,CAAc,IAAIU,WAAJ,CAAgBV,MAAhB,CASd,KAAAC,OAAA,CAAc,IAAIQ,YAAJ,CAAiBR,MAAjB,CAUd,KAAAU,SAAA,CAAgB,CAAA,CAEhB,KAAAC,WAAA,CAAgBV,OAAhB,CAAyBC,KAAzB,CACA,KAAAU,YAAA,CAAiBjB,CAAjB,CAAoBC,CAApB,CACA,KAAAiB,eAAA,EACA,KAAAC,UAAA,EACA,KAAAC,aAAA,EAxFJ,CAzBiB,CAAV,CAsHX7C,OAAAC,QAAA,CAAiBK,OAtKgG;",
"sources":["node_modules/Phaser/src/gameobjects/mesh/Mesh.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$mesh$Mesh\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar GameObject = require('../GameObject');\r\nvar MeshRender = require('./MeshRender');\r\n\r\n/**\r\n * @classdesc\r\n * A Mesh Game Object.\r\n *\r\n * @class Mesh\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @webglOnly\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number[]} vertices - An array containing the vertices data for this Mesh.\r\n * @param {number[]} uv - An array containing the uv data for this Mesh.\r\n * @param {number[]} colors - An array containing the color data for this Mesh.\r\n * @param {number[]} alphas - An array containing the alpha data for this Mesh.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\r\nvar Mesh = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Mask,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.Size,\r\n        Components.Texture,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        MeshRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Mesh (scene, x, y, vertices, uv, colors, alphas, texture, frame)\r\n    {\r\n        GameObject.call(this, scene, 'Mesh');\r\n\r\n        if (vertices.length !== uv.length)\r\n        {\r\n            throw new Error('Mesh Vertex count must match UV count');\r\n        }\r\n\r\n        var verticesUB = (vertices.length / 2) | 0;\r\n\r\n        if (colors.length > 0 && colors.length < verticesUB)\r\n        {\r\n            throw new Error('Mesh Color count must match Vertex count');\r\n        }\r\n\r\n        if (alphas.length > 0 && alphas.length < verticesUB)\r\n        {\r\n            throw new Error('Mesh Alpha count must match Vertex count');\r\n        }\r\n\r\n        var i;\r\n\r\n        if (colors.length === 0)\r\n        {\r\n            for (i = 0; i < verticesUB; ++i)\r\n            {\r\n                colors[i] = 0xFFFFFF;\r\n            }\r\n        }\r\n\r\n        if (alphas.length === 0)\r\n        {\r\n            for (i = 0; i < verticesUB; ++i)\r\n            {\r\n                alphas[i] = 1.0;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * An array containing the vertices data for this Mesh.\r\n         *\r\n         * @name Phaser.GameObjects.Mesh#vertices\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertices = new Float32Array(vertices);\r\n\r\n        /**\r\n         * An array containing the uv data for this Mesh.\r\n         *\r\n         * @name Phaser.GameObjects.Mesh#uv\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.uv = new Float32Array(uv);\r\n\r\n        /**\r\n         * An array containing the color data for this Mesh.\r\n         *\r\n         * @name Phaser.GameObjects.Mesh#colors\r\n         * @type {Uint32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.colors = new Uint32Array(colors);\r\n\r\n        /**\r\n         * An array containing the alpha data for this Mesh.\r\n         *\r\n         * @name Phaser.GameObjects.Mesh#alphas\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.alphas = new Float32Array(alphas);\r\n\r\n        /**\r\n         * Fill or additive mode used when blending the color values?\r\n         * \r\n         * @name Phaser.GameObjects.Mesh#tintFill\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.11.0\r\n         */\r\n        this.tintFill = false;\r\n\r\n        this.setTexture(texture, frame);\r\n        this.setPosition(x, y);\r\n        this.setSizeToFrame();\r\n        this.setOrigin();\r\n        this.initPipeline();\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Mesh;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Components","GameObject","MeshRender","Mesh","Extends","Mixins","Alpha","BlendMode","Depth","Flip","GetBounds","Mask","Origin","Pipeline","ScaleMode","Size","Texture","Transform","Visible","ScrollFactor","initialize","scene","x","y","vertices","uv","colors","alphas","texture","frame","call","length","Error","verticesUB","i","Float32Array","Uint32Array","tintFill","setTexture","setPosition","setSizeToFrame","setOrigin","initPipeline"]
}
