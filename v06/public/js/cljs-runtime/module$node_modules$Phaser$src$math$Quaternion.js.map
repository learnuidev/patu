{
"version":3,
"file":"module$node_modules$Phaser$src$math$Quaternion.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/Phaser/src/math/Quaternion.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$Quaternion\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n\r\nvar Class = require('../utils/Class');\r\nvar Vector3 = require('./Vector3');\r\nvar Matrix3 = require('./Matrix3');\r\n\r\nvar EPSILON = 0.000001;\r\n\r\n//  Some shared 'private' arrays\r\nvar siNext = new Int8Array([ 1, 2, 0 ]);\r\nvar tmp = new Float32Array([ 0, 0, 0 ]);\r\n\r\nvar xUnitVec3 = new Vector3(1, 0, 0);\r\nvar yUnitVec3 = new Vector3(0, 1, 0);\r\n\r\nvar tmpvec = new Vector3();\r\nvar tmpMat3 = new Matrix3();\r\n\r\n/**\r\n * @classdesc\r\n * A quaternion.\r\n *\r\n * @class Quaternion\r\n * @memberOf Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n * @param {number} [w] - The w component.\r\n */\r\nvar Quaternion = new Class({\r\n\r\n    initialize:\r\n\r\n    function Quaternion (x, y, z, w)\r\n    {\r\n        /**\r\n         * The x component of this Quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n\r\n        /**\r\n         * The y component of this Quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n\r\n        /**\r\n         * The z component of this Quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#z\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n\r\n        /**\r\n         * The w component of this Quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#w\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n            this.w = x.w || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n            this.w = w || 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Copy the components of a given Quaternion or Vector into this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} src - The Quaternion or Vector to copy the components from.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        this.x = src.x;\r\n        this.y = src.y;\r\n        this.z = src.z;\r\n        this.w = src.w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the components of this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} [x=0] - The x component, or an object containing x, y, z, and w components.\r\n     * @param {number} [y=0] - The y component.\r\n     * @param {number} [z=0] - The z component.\r\n     * @param {number} [w=0] - The w component.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    set: function (x, y, z, w)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n            this.w = x.w || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n            this.w = w || 0;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add a given Quaternion or Vector to this Quaternion. Addition is component-wise.\r\n     *\r\n     * @method Phaser.Math.Quaternion#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to add to this Quaternion.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    add: function (v)\r\n    {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z;\r\n        this.w += v.w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Subtract a given Quaternion or Vector from this Quaternion. Subtraction is component-wise.\r\n     *\r\n     * @method Phaser.Math.Quaternion#subtract\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to subtract from this Quaternion.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    subtract: function (v)\r\n    {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z;\r\n        this.w -= v.w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale this Quaternion by the given value.\r\n     *\r\n     * @method Phaser.Math.Quaternion#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} scale - The value to scale this Quaternion by.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    scale: function (scale)\r\n    {\r\n        this.x *= scale;\r\n        this.y *= scale;\r\n        this.z *= scale;\r\n        this.w *= scale;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#length\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Quaternion.\r\n     */\r\n    length: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n\r\n        return Math.sqrt(x * x + y * y + z * z + w * w);\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Quaternion squared.\r\n     *\r\n     * @method Phaser.Math.Quaternion#lengthSq\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Quaternion, squared.\r\n     */\r\n    lengthSq: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n\r\n        return x * x + y * y + z * z + w * w;\r\n    },\r\n\r\n    /**\r\n     * Normalize this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#normalize\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    normalize: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n        var len = x * x + y * y + z * z + w * w;\r\n\r\n        if (len > 0)\r\n        {\r\n            len = 1 / Math.sqrt(len);\r\n\r\n            this.x = x * len;\r\n            this.y = y * len;\r\n            this.z = z * len;\r\n            this.w = w * len;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the dot product of this Quaternion and the given Quaternion or Vector.\r\n     *\r\n     * @method Phaser.Math.Quaternion#dot\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to dot product with this Quaternion.\r\n     *\r\n     * @return {number} The dot product of this Quaternion and the given Quaternion or Vector.\r\n     */\r\n    dot: function (v)\r\n    {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n    },\r\n\r\n    /**\r\n     * Linearly interpolate this Quaternion towards the given Quaternion or Vector.\r\n     *\r\n     * @method Phaser.Math.Quaternion#lerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to interpolate towards.\r\n     * @param {number} [t=0] - The percentage of interpolation.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    lerp: function (v, t)\r\n    {\r\n        if (t === undefined) { t = 0; }\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        this.x = ax + t * (v.x - ax);\r\n        this.y = ay + t * (v.y - ay);\r\n        this.z = az + t * (v.z - az);\r\n        this.w = aw + t * (v.w - aw);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Math.Quaternion#rotationTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} a - [description]\r\n     * @param {Phaser.Math.Vector3} b - [description]\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    rotationTo: function (a, b)\r\n    {\r\n        var dot = a.x * b.x + a.y * b.y + a.z * b.z;\r\n\r\n        if (dot < -0.999999)\r\n        {\r\n            if (tmpvec.copy(xUnitVec3).cross(a).length() < EPSILON)\r\n            {\r\n                tmpvec.copy(yUnitVec3).cross(a);\r\n            }\r\n\r\n            tmpvec.normalize();\r\n\r\n            return this.setAxisAngle(tmpvec, Math.PI);\r\n\r\n        }\r\n        else if (dot > 0.999999)\r\n        {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.z = 0;\r\n            this.w = 1;\r\n\r\n            return this;\r\n        }\r\n        else\r\n        {\r\n            tmpvec.copy(a).cross(b);\r\n\r\n            this.x = tmpvec.x;\r\n            this.y = tmpvec.y;\r\n            this.z = tmpvec.z;\r\n            this.w = 1 + dot;\r\n\r\n            return this.normalize();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set the axes of this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#setAxes\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} view - The view axis.\r\n     * @param {Phaser.Math.Vector3} right - The right axis.\r\n     * @param {Phaser.Math.Vector3} up - The upwards axis.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    setAxes: function (view, right, up)\r\n    {\r\n        var m = tmpMat3.val;\r\n\r\n        m[0] = right.x;\r\n        m[3] = right.y;\r\n        m[6] = right.z;\r\n\r\n        m[1] = up.x;\r\n        m[4] = up.y;\r\n        m[7] = up.z;\r\n\r\n        m[2] = -view.x;\r\n        m[5] = -view.y;\r\n        m[8] = -view.z;\r\n\r\n        return this.fromMat3(tmpMat3).normalize();\r\n    },\r\n\r\n    /**\r\n     * Reset this Matrix to an identity (default) Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#identity\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    identity: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n        this.w = 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the axis angle of this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#setAxisAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} axis - The axis.\r\n     * @param {number} rad - The angle in radians.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    setAxisAngle: function (axis, rad)\r\n    {\r\n        rad = rad * 0.5;\r\n\r\n        var s = Math.sin(rad);\r\n\r\n        this.x = s * axis.x;\r\n        this.y = s * axis.y;\r\n        this.z = s * axis.z;\r\n        this.w = Math.cos(rad);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Multiply this Quaternion by the given Quaternion or Vector.\r\n     *\r\n     * @method Phaser.Math.Quaternion#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} b - The Quaternion or Vector to multiply this Quaternion by.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    multiply: function (b)\r\n    {\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var bx = b.x;\r\n        var by = b.y;\r\n        var bz = b.z;\r\n        var bw = b.w;\r\n\r\n        this.x = ax * bw + aw * bx + ay * bz - az * by;\r\n        this.y = ay * bw + aw * by + az * bx - ax * bz;\r\n        this.z = az * bw + aw * bz + ax * by - ay * bx;\r\n        this.w = aw * bw - ax * bx - ay * by - az * bz;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Smoothly linearly interpolate this Quaternion towards the given Quaternion or Vector.\r\n     *\r\n     * @method Phaser.Math.Quaternion#slerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} b - The Quaternion or Vector to interpolate towards.\r\n     * @param {number} t - The percentage of interpolation.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    slerp: function (b, t)\r\n    {\r\n        // benchmarks: http://jsperf.com/quaternion-slerp-implementations\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var bx = b.x;\r\n        var by = b.y;\r\n        var bz = b.z;\r\n        var bw = b.w;\r\n\r\n        // calc cosine\r\n        var cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n\r\n        // adjust signs (if necessary)\r\n        if (cosom < 0)\r\n        {\r\n            cosom = -cosom;\r\n            bx = - bx;\r\n            by = - by;\r\n            bz = - bz;\r\n            bw = - bw;\r\n        }\r\n\r\n        // \"from\" and \"to\" quaternions are very close\r\n        //  ... so we can do a linear interpolation\r\n        var scale0 = 1 - t;\r\n        var scale1 = t;\r\n\r\n        // calculate coefficients\r\n        if ((1 - cosom) > EPSILON)\r\n        {\r\n            // standard case (slerp)\r\n            var omega = Math.acos(cosom);\r\n            var sinom = Math.sin(omega);\r\n\r\n            scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n            scale1 = Math.sin(t * omega) / sinom;\r\n        }\r\n\r\n        // calculate final values\r\n        this.x = scale0 * ax + scale1 * bx;\r\n        this.y = scale0 * ay + scale1 * by;\r\n        this.z = scale0 * az + scale1 * bz;\r\n        this.w = scale0 * aw + scale1 * bw;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Invert this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#invert\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    invert: function ()\r\n    {\r\n        var a0 = this.x;\r\n        var a1 = this.y;\r\n        var a2 = this.z;\r\n        var a3 = this.w;\r\n\r\n        var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n        var invDot = (dot) ? 1 / dot : 0;\r\n\r\n        // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n        this.x = -a0 * invDot;\r\n        this.y = -a1 * invDot;\r\n        this.z = -a2 * invDot;\r\n        this.w = a3 * invDot;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Convert this Quaternion into its conjugate.\r\n     *\r\n     * Sets the x, y and z components.\r\n     *\r\n     * @method Phaser.Math.Quaternion#conjugate\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    conjugate: function ()\r\n    {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate this Quaternion on the X axis.\r\n     *\r\n     * @method Phaser.Math.Quaternion#rotateX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The rotation angle in radians.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    rotateX: function (rad)\r\n    {\r\n        rad *= 0.5;\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var bx = Math.sin(rad);\r\n        var bw = Math.cos(rad);\r\n\r\n        this.x = ax * bw + aw * bx;\r\n        this.y = ay * bw + az * bx;\r\n        this.z = az * bw - ay * bx;\r\n        this.w = aw * bw - ax * bx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate this Quaternion on the Y axis.\r\n     *\r\n     * @method Phaser.Math.Quaternion#rotateY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The rotation angle in radians.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    rotateY: function (rad)\r\n    {\r\n        rad *= 0.5;\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var by = Math.sin(rad);\r\n        var bw = Math.cos(rad);\r\n\r\n        this.x = ax * bw - az * by;\r\n        this.y = ay * bw + aw * by;\r\n        this.z = az * bw + ax * by;\r\n        this.w = aw * bw - ay * by;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate this Quaternion on the Z axis.\r\n     *\r\n     * @method Phaser.Math.Quaternion#rotateZ\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The rotation angle in radians.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    rotateZ: function (rad)\r\n    {\r\n        rad *= 0.5;\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var bz = Math.sin(rad);\r\n        var bw = Math.cos(rad);\r\n\r\n        this.x = ax * bw + ay * bz;\r\n        this.y = ay * bw - ax * bz;\r\n        this.z = az * bw + aw * bz;\r\n        this.w = aw * bw - az * bz;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Create a unit (or rotation) Quaternion from its x, y, and z components.\r\n     *\r\n     * Sets the w component.\r\n     *\r\n     * @method Phaser.Math.Quaternion#calculateW\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    calculateW: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n\r\n        this.w = -Math.sqrt(1.0 - x * x - y * y - z * z);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Convert the given Matrix into this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#fromMat3\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} mat - The Matrix to convert from.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    fromMat3: function (mat)\r\n    {\r\n        // benchmarks:\r\n        //    http://jsperf.com/typed-array-access-speed\r\n        //    http://jsperf.com/conversion-of-3x3-matrix-to-quaternion\r\n\r\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n        // article \"Quaternion Calculus and Fast Animation\".\r\n        var m = mat.val;\r\n        var fTrace = m[0] + m[4] + m[8];\r\n        var fRoot;\r\n\r\n        if (fTrace > 0)\r\n        {\r\n            // |w| > 1/2, may as well choose w > 1/2\r\n            fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n\r\n            this.w = 0.5 * fRoot;\r\n\r\n            fRoot = 0.5 / fRoot; // 1/(4w)\r\n\r\n            this.x = (m[7] - m[5]) * fRoot;\r\n            this.y = (m[2] - m[6]) * fRoot;\r\n            this.z = (m[3] - m[1]) * fRoot;\r\n        }\r\n        else\r\n        {\r\n            // |w| <= 1/2\r\n            var i = 0;\r\n\r\n            if (m[4] > m[0])\r\n            {\r\n                i = 1;\r\n            }\r\n\r\n            if (m[8] > m[i * 3 + i])\r\n            {\r\n                i = 2;\r\n            }\r\n\r\n            var j = siNext[i];\r\n            var k = siNext[j];\r\n\r\n            //  This isn't quite as clean without array access\r\n            fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);\r\n            tmp[i] = 0.5 * fRoot;\r\n\r\n            fRoot = 0.5 / fRoot;\r\n\r\n            tmp[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n            tmp[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n\r\n            this.x = tmp[0];\r\n            this.y = tmp[1];\r\n            this.z = tmp[2];\r\n            this.w = (m[k * 3 + j] - m[j * 3 + k]) * fRoot;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Quaternion;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Vector3","Matrix3","siNext","Int8Array","tmp","Float32Array","xUnitVec3","yUnitVec3","tmpvec","tmpMat3","Quaternion","initialize","x","y","z","w","copy","src","set","add","v","subtract","scale","length","Math","sqrt","lengthSq","normalize","len","dot","lerp","t","undefined","ax","ay","az","aw","rotationTo","a","b","EPSILON","cross","setAxisAngle","PI","setAxes","view","right","up","m","val","fromMat3","identity","axis","rad","s","sin","cos","multiply","bx","by","bz","bw","slerp","cosom","scale0","scale1","omega","acos","sinom","invert","a0","a1","a2","a3","invDot","conjugate","rotateX","rotateY","rotateZ","calculateW","mat","fTrace","fRoot","i","j","k"]
}
