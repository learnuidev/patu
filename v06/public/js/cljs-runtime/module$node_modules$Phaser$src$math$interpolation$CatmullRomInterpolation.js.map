{
"version":3,
"file":"module$node_modules$Phaser$src$math$interpolation$CatmullRomInterpolation.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,0EAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOtI,IAAIC,WAAaH,OAAA,CAAQ,gDAAR,CA4CjBC,OAAAC,QAAA,CA/B8BE,QAAS,CAACC,CAAD,CAAIC,CAAJ,CACvC,CACI,IAAIC,EAAIF,CAAAG,OAAJD,CAAe,CAAnB,CACIE,EAAIF,CAAJE,CAAQH,CADZ,CAEII,EAAIC,IAAAC,MAAA,CAAWH,CAAX,CAER,OAAIJ,EAAA,CAAE,CAAF,CAAJ,GAAaA,CAAA,CAAEE,CAAF,CAAb,EAEY,CAKD,CALHD,CAKG,GAHHI,CAGG,CAHCC,IAAAC,MAAA,CAAWH,CAAX,CAAeF,CAAf,EAAoB,CAApB,CAAwBD,CAAxB,EAGD,EAAAH,UAAA,CAAWM,CAAX,CAAeC,CAAf,CAAkBL,CAAA,EAAGK,CAAH,CAAO,CAAP,CAAWH,CAAX,EAAgBA,CAAhB,CAAlB,CAAsCF,CAAA,CAAEK,CAAF,CAAtC,CAA4CL,CAAA,EAAGK,CAAH,CAAO,CAAP,EAAYH,CAAZ,CAA5C,CAA4DF,CAAA,EAAGK,CAAH,CAAO,CAAP,EAAYH,CAAZ,CAA5D,CAPX,EAWY,CAAR,CAAID,CAAJ,CAEWD,CAAA,CAAE,CAAF,CAFX,EAEmBF,UAAA,CAAW,CAACM,CAAZ,CAAeJ,CAAA,CAAE,CAAF,CAAf,CAAqBA,CAAA,CAAE,CAAF,CAArB,CAA2BA,CAAA,CAAE,CAAF,CAA3B,CAAiCA,CAAA,CAAE,CAAF,CAAjC,CAFnB,CAE4DA,CAAA,CAAE,CAAF,CAF5D,EAKQ,CAAR,CAAIC,CAAJ,CAEWD,CAAA,CAAEE,CAAF,CAFX,EAEmBJ,UAAA,CAAWM,CAAX,CAAeF,CAAf,CAAkBF,CAAA,CAAEE,CAAF,CAAlB,CAAwBF,CAAA,CAAEE,CAAF,CAAxB,CAA8BF,CAAA,CAAEE,CAAF,CAAM,CAAN,CAA9B,CAAwCF,CAAA,CAAEE,CAAF,CAAM,CAAN,CAAxC,CAFnB,CAEuEF,CAAA,CAAEE,CAAF,CAFvE,EAKOJ,UAAA,CAAWM,CAAX,CAAeC,CAAf,CAAkBL,CAAA,CAAEK,CAAA;AAAIA,CAAJ,CAAQ,CAAR,CAAY,CAAd,CAAlB,CAAoCL,CAAA,CAAEK,CAAF,CAApC,CAA0CL,CAAA,CAAEE,CAAA,CAAIG,CAAJ,CAAQ,CAAR,CAAYH,CAAZ,CAAgBG,CAAhB,CAAoB,CAAtB,CAA1C,CAAoEL,CAAA,CAAEE,CAAA,CAAIG,CAAJ,CAAQ,CAAR,CAAYH,CAAZ,CAAgBG,CAAhB,CAAoB,CAAtB,CAApE,CA1Bf,CArBsI;",
"sources":["node_modules/Phaser/src/math/interpolation/CatmullRomInterpolation.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$interpolation$CatmullRomInterpolation\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar CatmullRom = require('../CatmullRom');\r\n\r\n/**\r\n * A Catmull-Rom interpolation method.\r\n *\r\n * @function Phaser.Math.Interpolation.CatmullRom\r\n * @since 3.0.0\r\n *\r\n * @param {number[]} v - The input array of values to interpolate between.\r\n * @param {number} k - The percentage of interpolation, between 0 and 1.\r\n *\r\n * @return {number} The interpolated value.\r\n */\r\nvar CatmullRomInterpolation = function (v, k)\r\n{\r\n    var m = v.length - 1;\r\n    var f = m * k;\r\n    var i = Math.floor(f);\r\n\r\n    if (v[0] === v[m])\r\n    {\r\n        if (k < 0)\r\n        {\r\n            i = Math.floor(f = m * (1 + k));\r\n        }\r\n\r\n        return CatmullRom(f - i, v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m]);\r\n    }\r\n    else\r\n    {\r\n        if (k < 0)\r\n        {\r\n            return v[0] - (CatmullRom(-f, v[0], v[0], v[1], v[1]) - v[0]);\r\n        }\r\n\r\n        if (k > 1)\r\n        {\r\n            return v[m] - (CatmullRom(f - m, v[m], v[m], v[m - 1], v[m - 1]) - v[m]);\r\n        }\r\n\r\n        return CatmullRom(f - i, v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2]);\r\n    }\r\n};\r\n\r\nmodule.exports = CatmullRomInterpolation;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","CatmullRom","CatmullRomInterpolation","v","k","m","length","f","i","Math","floor"]
}
