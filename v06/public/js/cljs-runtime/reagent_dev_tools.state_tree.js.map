{"version":3,"sources":["reagent_dev_tools/state_tree.cljs"],"mappings":"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","names":["js/reagent-dev-tools","js/reagent-dev-tools.state-tree","js/reagent-dev-tools.state-tree.state-tree","reagent-dev-tools.state-tree/state-tree","reagent.core.atom","reagent-dev-tools.state-tree/toggle","v","ks","open?","or__4126__auto__","cljs.core/not","cljs.core.get_in","cljs.core/assoc-in","reagent-dev-tools.state-tree/key->string","k","cljs.core/Keyword","s","cljs.core/namespace","n","cljs.core/name","reagent-dev-tools.state-tree/type->class","reagent-dev-tools.state-tree/collection-name","cljs.core/map?","cljs.core/vector?","cljs.core/set?","cljs.core/list?","reagent-dev-tools.state-tree/tree","open","open-fn","cljs.core/coll?","iter__4529__auto__","s__24838","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__24843","cljs.core/chunk-buffer","i__24842","vec__24861","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__24837","cljs.core/chunk-rest","vec__24942","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/zipmap","cljs.core.range","cljs.core.get","cljs.core.conj","_","open-all?","cljs.core/some","cljs.core/nil?","cljs.core/vals","seq__24886","chunk__24887","count__24888","i__24889","vec__24910","c__4556__auto__","cljs.core/chunk-first","vec__24922","cljs.core/next","seq__24945","chunk__24946","count__24947","i__24948","vec__24965","vec__24977","G__24913","G__24914","G__24928","G__24929","G__24969","G__24970","G__24980","G__24981","cljs.core.pr_str","reagent-dev-tools.state-tree/state-tree-panel","cljs.core.doall","s__25005","b__25007","i__25006","vec__25018","map__25021","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core/deref","iter__25004","vec__25050","map__25053","name","state-atom","cljs.core.swap_BANG_","cljs.core/update-in","reagent-dev-tools.state-tree/register-state-atom","atom-name"],"sourcesContent":["(ns reagent-dev-tools.state-tree\n  (:require [reagent-dev-tools.styles :as s]\n            [reagent.core :as r]))\n\n;; TODO: Move to panel state, so open is saved\n(defonce state-tree (r/atom {}))\n\n(defn- toggle [v ks open?]\n  (if (or (not (get-in v ks))\n          open?)\n    (assoc-in v ks {})\n    (assoc-in v ks nil)))\n\n(defn- key->string [k]\n  (if (keyword? k)\n    (let [s (namespace k)\n          n (name k)]\n      (str \":\" (if s\n                 (str s \"/\" n)\n                 n)))\n    k))\n\n(defn type->class [v]\n  (cond\n    (keyword? v) \"reagent-dev-tools__keyword\"\n    (string? v) \"reagent-dev-tools__string\"\n    (number? v) \"reagent-dev-tools__number\"\n    (nil? v) \"reagent-dev-tools__nil\"))\n\n(defn collection-name [v]\n  (cond\n    (map? v) \"{}\"\n    (vector? v) \"[]\"\n    (set? v) \"#{}\"\n    (list? v) \"()\") )\n\n(defn- tree [open open-fn v ks]\n  (if (coll? v)\n    [:ul\n     (for [[k v] (if (map? v)\n                   v\n                   (zipmap (range) v))\n           :let [open (get open k)\n                 ks (conj ks k)]]\n       [:li.reagent-dev-tools__li\n        {:key (key->string k)}\n        [:span.reagent-dev-tools__li-toggle\n         {:on-click #(open-fn ks false)\n          :title \"Toggle this collection\"\n          :class (if (coll? v)\n                   \"reagent-dev-tools__li-toggle--active\")}\n         (if (coll? v)\n           [:span.reagent-dev-tools__li-toggle-icon\n            (if open \"-\" \"+\")])\n         [:strong\n          {:class (type->class k)}\n          (key->string k)]\n\n         \" \"]\n        (if (coll? v)\n          [:span.reagent-dev-tools__li-toggle.reagent-dev-tools__li-toggle--active.reagent-dev-tools__pre\n           {:title \"Toggle collection items\"\n            :on-click (fn [_]\n                        ;; if one is closed, open all\n                        ;; else close all\n                        (let [open-all? (some nil? (vals open))]\n                          (doseq [[k _] (if (map? v)\n                                          v\n                                          (zipmap (range) v))]\n                            (open-fn (conj ks k) open-all?))))}\n           (collection-name v)])\n        (if (or (not (coll? v)) open)\n          [tree open open-fn v ks])])]\n\n    [:pre.reagent-dev-tools__pre\n     {:class (type->class v)}\n     (pr-str v)]))\n\n(defn state-tree-panel []\n  [:div\n   (doall\n     (for [[name {:keys [state-atom open]}] @state-tree]\n       [:div {:key name}\n        [:strong name]\n        [tree\n         open\n         (fn [ks open?]\n           (swap! state-tree update-in [name :open] toggle ks open?))\n         @state-atom\n         []]]))])\n\n(defn register-state-atom [atom-name state-atom]\n  (swap! state-tree assoc-in [atom-name :state-atom] state-atom))\n"]}