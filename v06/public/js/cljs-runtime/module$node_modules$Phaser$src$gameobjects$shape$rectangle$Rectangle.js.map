{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$rectangle$Rectangle.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,qEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO7HC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,cAAgBJ,OAAA,CAAQ,yDAAR,CAApB,CACIK,MAAQL,OAAA,CAAQ,wDAAR,CACRM,QAAAA,CAAkBN,OAAA,CAAQ,4EAAR,CA2BlBO,QAAAA,CAAY,IAAIJ,MAAJ,CAAU,CAEtBK,QAASH,KAFa,CAItBI,OAAQ,CACJH,OADI,CAJc,CAQtBI,WAEAH,QAAmB,CAACI,KAAD;AAAQC,CAAR,CAAWC,CAAX,CAAcC,KAAd,CAAqBC,MAArB,CAA6BC,SAA7B,CAAwCC,SAAxC,CACnB,CACcC,IAAAA,EAAV,GAAIN,CAAJ,GAAuBA,CAAvB,CAA2B,CAA3B,CACUM,KAAAA,EAAV,GAAIL,CAAJ,GAAuBA,CAAvB,CAA2B,CAA3B,CACcK,KAAAA,EAAd,GAAIJ,KAAJ,GAA2BA,KAA3B,CAAmC,GAAnC,CACeI,KAAAA,EAAf,GAAIH,MAAJ,GAA4BA,MAA5B,CAAqC,GAArC,CAEAV,MAAAc,KAAA,CAAW,IAAX,CAAiBR,KAAjB,CAAwB,WAAxB,CAAqC,IAAIP,aAAJ,CAAkB,CAAlB,CAAqB,CAArB,CAAwBU,KAAxB,CAA+BC,MAA/B,CAArC,CAEA,KAAAK,YAAA,CAAiBR,CAAjB,CAAoBC,CAApB,CACA,KAAAQ,QAAA,CAAaP,KAAb,CAAoBC,MAApB,CAEkBG,KAAAA,EAAlB,GAAIF,SAAJ,EAEI,IAAAM,aAAA,CAAkBN,SAAlB,CAA6BC,SAA7B,CAGJ,KAAAM,oBAAA,EACA,KAAAC,WAAA,EAjBJ,CAXsB,CAwCtBA,WAAYA,QAAS,EACrB,CACI,IAAIC,KAAO,EAAX,CACIC,KAAO,IAAAC,KADX,CAEIC,KAAO,IAAAC,UAEXH,KAAAI,SAAA,CAAcF,IAAd,CAEAH,KAAAM,KAAA,CAAUH,IAAAI,GAAV,CAAmBJ,IAAAK,GAAnB,CAA4BL,IAAAM,GAA5B,CAAqCN,IAAAO,GAArC,CAEAT,KAAAU,SAAA,CAAcR,IAAd,CAEAH;IAAAM,KAAA,CAAUH,IAAAM,GAAV,CAAmBN,IAAAO,GAAnB,CAEAT,KAAAW,SAAA,CAAcT,IAAd,CAEAH,KAAAM,KAAA,CAAUH,IAAAM,GAAV,CAAmBN,IAAAO,GAAnB,CAEAT,KAAAY,SAAA,CAAcV,IAAd,CAEAH,KAAAM,KAAA,CAAUH,IAAAM,GAAV,CAAmBN,IAAAO,GAAnB,CAEA,KAAAI,SAAA,CAAgBd,IAEhB,OAAO,KAvBX,CAzCsB,CAAV,CAqEhBxB,OAAAC,QAAA,CAAiBK,OA1GgH;",
"sources":["node_modules/Phaser/src/gameobjects/shape/rectangle/Rectangle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$rectangle$Rectangle\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\nvar GeomRectangle = require('../../../geom/rectangle/Rectangle');\r\nvar Shape = require('../Shape');\r\nvar RectangleRender = require('./RectangleRender');\r\n\r\n/**\r\n * @classdesc\r\n * The Rectangle Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * You can change the size of the rectangle by changing the `width` and `height` properties.\r\n *\r\n * @class Rectangle\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number} [width=128] - The width of the rectangle.\r\n * @param {number} [height=128] - The height of the rectangle.\r\n * @param {number} [fillColor] - The color the rectangle will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the rectangle will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\r\nvar Rectangle = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        RectangleRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Rectangle (scene, x, y, width, height, fillColor, fillAlpha)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = 128; }\r\n        if (height === undefined) { height = 128; }\r\n\r\n        Shape.call(this, scene, 'Rectangle', new GeomRectangle(0, 0, width, height));\r\n\r\n        this.setPosition(x, y);\r\n        this.setSize(width, height);\r\n\r\n        if (fillColor !== undefined)\r\n        {\r\n            this.setFillStyle(fillColor, fillAlpha);\r\n        }\r\n\r\n        this.updateDisplayOrigin();\r\n        this.updateData();\r\n    },\r\n\r\n    /**\r\n     * Internal method that updates the data and path values.\r\n     *\r\n     * @method Phaser.GameObjects.Rectangle#updateData\r\n     * @private\r\n     * @since 3.13.0\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    updateData: function ()\r\n    {\r\n        var path = [];\r\n        var rect = this.geom;\r\n        var line = this._tempLine;\r\n\r\n        rect.getLineA(line);\r\n\r\n        path.push(line.x1, line.y1, line.x2, line.y2);\r\n\r\n        rect.getLineB(line);\r\n\r\n        path.push(line.x2, line.y2);\r\n\r\n        rect.getLineC(line);\r\n\r\n        path.push(line.x2, line.y2);\r\n\r\n        rect.getLineD(line);\r\n\r\n        path.push(line.x2, line.y2);\r\n\r\n        this.pathData = path;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Rectangle;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","GeomRectangle","Shape","RectangleRender","Rectangle","Extends","Mixins","initialize","scene","x","y","width","height","fillColor","fillAlpha","undefined","call","setPosition","setSize","setFillStyle","updateDisplayOrigin","updateData","path","rect","geom","line","_tempLine","getLineA","push","x1","y1","x2","y2","getLineB","getLineC","getLineD","pathData"]
}
