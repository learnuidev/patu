{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$parsers$tiled$ParseTileLayers.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/tilemaps/parsers/tiled/ParseTileLayers.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$parsers$tiled$ParseTileLayers\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar Base64Decode = require('./Base64Decode');\r\nvar GetFastValue = require('../../../utils/object/GetFastValue');\r\nvar LayerData = require('../../mapdata/LayerData');\r\nvar ParseGID = require('./ParseGID');\r\nvar Tile = require('../../Tile');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseTileLayers\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - [description]\r\n * @param {boolean} insertNull - [description]\r\n *\r\n * @return {array} [description]\r\n */\r\nvar ParseTileLayers = function (json, insertNull)\r\n{\r\n    var tileLayers = [];\r\n\r\n    for (var i = 0; i < json.layers.length; i++)\r\n    {\r\n        if (json.layers[i].type !== 'tilelayer')\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var curl = json.layers[i];\r\n\r\n        // Base64 decode data if necessary. NOTE: uncompressed base64 only.\r\n        if (curl.compression)\r\n        {\r\n            console.warn(\r\n                'TilemapParser.parseTiledJSON - Layer compression is unsupported, skipping layer \\''\r\n                + curl.name + '\\''\r\n            );\r\n            continue;\r\n        }\r\n        else if (curl.encoding && curl.encoding === 'base64')\r\n        {\r\n            curl.data = Base64Decode(curl.data);\r\n            delete curl.encoding; // Allow the same map to be parsed multiple times\r\n        }\r\n\r\n        var layerData = new LayerData({\r\n            name: curl.name,\r\n            x: GetFastValue(curl, 'offsetx', 0) + curl.x,\r\n            y: GetFastValue(curl, 'offsety', 0) + curl.y,\r\n            width: curl.width,\r\n            height: curl.height,\r\n            tileWidth: json.tilewidth,\r\n            tileHeight: json.tileheight,\r\n            alpha: curl.opacity,\r\n            visible: curl.visible,\r\n            properties: GetFastValue(curl, 'properties', {})\r\n        });\r\n\r\n        var x = 0;\r\n        var row = [];\r\n        var output = [];\r\n\r\n        //  Loop through the data field in the JSON.\r\n\r\n        //  This is an array containing the tile indexes, one after the other. -1 = no tile,\r\n        //  everything else = the tile index (starting at 1 for Tiled, 0 for CSV) If the map\r\n        //  contains multiple tilesets then the indexes are relative to that which the set starts\r\n        //  from. Need to set which tileset in the cache = which tileset in the JSON, if you do this\r\n        //  manually it means you can use the same map data but a new tileset.\r\n\r\n        for (var t = 0, len = curl.data.length; t < len; t++)\r\n        {\r\n            var gidInfo = ParseGID(curl.data[t]);\r\n\r\n            //  index, x, y, width, height\r\n            if (gidInfo.gid > 0)\r\n            {\r\n                var tile = new Tile(layerData, gidInfo.gid, x, output.length, json.tilewidth,\r\n                    json.tileheight);\r\n\r\n                // Turning Tiled's FlippedHorizontal, FlippedVertical and FlippedAntiDiagonal\r\n                // propeties into flipX, flipY and rotation\r\n                tile.rotation = gidInfo.rotation;\r\n                tile.flipX = gidInfo.flipped;\r\n\r\n                row.push(tile);\r\n            }\r\n            else\r\n            {\r\n                var blankTile = insertNull\r\n                    ? null\r\n                    : new Tile(layerData, -1, x, output.length, json.tilewidth, json.tileheight);\r\n                row.push(blankTile);\r\n            }\r\n\r\n            x++;\r\n\r\n            if (x === curl.width)\r\n            {\r\n                output.push(row);\r\n                x = 0;\r\n                row = [];\r\n            }\r\n        }\r\n\r\n        layerData.data = output;\r\n\r\n        tileLayers.push(layerData);\r\n    }\r\n\r\n    return tileLayers;\r\n};\r\n\r\nmodule.exports = ParseTileLayers;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Base64Decode","GetFastValue","LayerData","ParseGID","Tile","ParseTileLayers","json","insertNull","tileLayers","i","layers","length","type","curl","compression","console","warn","name","encoding","data","layerData","x","y","width","height","tileWidth","tilewidth","tileHeight","tileheight","alpha","opacity","visible","properties","row","output","t","len","gidInfo","gid","tile","rotation","flipX","flipped","push","blankTile"]
}
