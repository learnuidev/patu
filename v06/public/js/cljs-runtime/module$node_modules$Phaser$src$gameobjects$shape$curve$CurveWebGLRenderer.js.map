{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$curve$CurveWebGLRenderer.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0EAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOtI,IAAIC,cAAgBH,OAAA,CAAQ,gEAAR,CAApB,CACII,gBAAkBJ,OAAA,CAAQ,kEAAR,CAgEtBC,OAAAC,QAAA,CA/CyBG,QAAS,CAACC,QAAD,CAAWC,GAAX,CAAgBC,uBAAhB,CAAyCC,MAAzC,CAAiDC,YAAjD,CAClC,CACQC,uBAAAA,CAAW,IAAAA,SAEf,KAAIC,UAAYD,uBAAAE,aAAhB,CACIC,YAAcH,uBAAAI,aADlB;AAEIC,WAAaL,uBAAAM,aAEjBX,SAAAY,YAAA,CAAqBP,uBAArB,CAEAG,YAAAK,UAAA,CAAsBZ,GAAAa,EAAtB,CAA6Bb,GAAAc,EAA7B,CAAoCd,GAAAe,SAApC,CAAkDf,GAAAgB,OAAlD,CAA8DhB,GAAAiB,OAA9D,CAEAZ,UAAAa,SAAA,CAAmBhB,MAAAiB,OAAnB,CAEIhB,aAAJ,EAGIE,SAAAe,mBAAA,CAA6BjB,YAA7B,CAA2C,CAACD,MAAAmB,QAA5C,CAA6DrB,GAAAsB,cAA7D,CAAgF,CAACpB,MAAAqB,QAAjF,CAAkGvB,GAAAwB,cAAlG,CAIA,CADAjB,WAAAkB,EACA,CADgBzB,GAAAa,EAChB,CAAAN,WAAAmB,EAAA,CAAgB1B,GAAAc,EAPpB,GAWIP,WAAAkB,EACA,EADiBvB,MAAAmB,QACjB,CADkCrB,GAAAsB,cAClC,CAAAf,WAAAmB,EAAA,EAAiBxB,MAAAqB,QAAjB,CAAkCvB,GAAAwB,cAZtC,CAeAnB,UAAAsB,SAAA,CAAmBpB,WAAnB,CAAgCE,UAAhC,CAEImB;QAAAA,CAAK5B,GAAA6B,gBAALD,CAA2B5B,GAAA8B,aAAAjB,EAC3BkB,aAAAA,CAAK/B,GAAAgC,gBAALD,CAA2B/B,GAAA8B,aAAAhB,EAE3BmB,OAAAA,CAAQ/B,MAAA+B,MAARA,CAAuBjC,GAAAiC,MAEvBjC,IAAAkC,SAAJ,EAEItC,aAAA,CAAcQ,uBAAd,CAAwBK,UAAxB,CAAoCT,GAApC,CAAyCiC,MAAzC,CAAgDL,QAAhD,CAAoDG,YAApD,CAGA/B,IAAAmC,UAAJ,EAEItC,eAAA,CAAgBO,uBAAhB,CAA0BJ,GAA1B,CAA+BiC,MAA/B,CAAsCL,QAAtC,CAA0CG,YAA1C,CA1CR,CA1BsI;",
"sources":["node_modules/Phaser/src/gameobjects/shape/curve/CurveWebGLRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$curve$CurveWebGLRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar FillPathWebGL = require('../FillPathWebGL');\r\nvar StrokePathWebGL = require('../StrokePathWebGL');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Curve#renderWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Curve} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar CurveWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var pipeline = this.pipeline;\r\n\r\n    var camMatrix = pipeline._tempMatrix1;\r\n    var shapeMatrix = pipeline._tempMatrix2;\r\n    var calcMatrix = pipeline._tempMatrix3;\r\n\r\n    renderer.setPipeline(pipeline);\r\n\r\n    shapeMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\r\n\r\n    camMatrix.copyFrom(camera.matrix);\r\n\r\n    if (parentMatrix)\r\n    {\r\n        //  Multiply the camera by the parent matrix\r\n        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);\r\n\r\n        //  Undo the camera scroll\r\n        shapeMatrix.e = src.x;\r\n        shapeMatrix.f = src.y;\r\n    }\r\n    else\r\n    {\r\n        shapeMatrix.e -= camera.scrollX * src.scrollFactorX;\r\n        shapeMatrix.f -= camera.scrollY * src.scrollFactorY;\r\n    }\r\n\r\n    camMatrix.multiply(shapeMatrix, calcMatrix);\r\n\r\n    var dx = src._displayOriginX + src._curveBounds.x;\r\n    var dy = src._displayOriginY + src._curveBounds.y;\r\n\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    if (src.isFilled)\r\n    {\r\n        FillPathWebGL(pipeline, calcMatrix, src, alpha, dx, dy);\r\n    }\r\n\r\n    if (src.isStroked)\r\n    {\r\n        StrokePathWebGL(pipeline, src, alpha, dx, dy);\r\n    }\r\n};\r\n\r\nmodule.exports = CurveWebGLRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","FillPathWebGL","StrokePathWebGL","CurveWebGLRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","pipeline","camMatrix","_tempMatrix1","shapeMatrix","_tempMatrix2","calcMatrix","_tempMatrix3","setPipeline","applyITRS","x","y","rotation","scaleX","scaleY","copyFrom","matrix","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","multiply","dx","_displayOriginX","_curveBounds","dy","_displayOriginY","alpha","isFilled","isStroked"]
}
