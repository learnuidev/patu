{"version":3,"sources":["time_literals/read_write.cljc"],"mappings":"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","names":["time-literals.read-write/print-to-string","t","o","time-literals.read-write/print-period","cljs.core.partial","time-literals.read-write/print-date","time-literals.read-write/print-date-time","time-literals.read-write/print-zoned-date-time","time-literals.read-write/print-offset-time","time-literals.read-write/print-instant","time-literals.read-write/print-offset-date-time","time-literals.read-write/print-zone","time-literals.read-write/print-day-of-week","time-literals.read-write/print-time","time-literals.read-write/print-month","time-literals.read-write/print-month-day","time-literals.read-write/print-duration","time-literals.read-write/print-year","time-literals.read-write/print-year-month","time-literals.read-write/print-time-literals-cljs!","cljs.core/PROTOCOL_SENTINEL","java.time/Period","d","writer","opts","cljs.core/-write","java.time/LocalDate","java.time/LocalDateTime","java.time/ZonedDateTime","java.time/OffsetTime","java.time/Instant","java.time/ZoneId","java.time/DayOfWeek","java.time/LocalTime","java.time/Month","java.time/MonthDay","java.time/Duration","java.time/Year","java.time/YearMonth","time-literals.read-write/print-time-literals-clj!","time-literals.read-write/tags","java.time/OffsetDateTime","seq__27355","cljs.core/seq","chunk__27356","count__27357","i__27358","vec__27375","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__27378","cljs.core/first","cljs.core/next","tag","read-fn","cljs.reader/register-tag-parser!"],"sourcesContent":["(ns time-literals.read-write\n  #?@(:cljs\n      [(:require\n         [java.time :refer [Period\n                            LocalDate\n                            LocalDateTime\n                            ZonedDateTime\n                            OffsetTime\n                            Instant\n                            OffsetDateTime\n                            ZoneId\n                            DayOfWeek\n                            LocalTime\n                            Month\n                            Duration\n                            Year\n                            YearMonth\n                            MonthDay]]\n         [cljs.reader :as reader])]\n      :clj\n      [\n       (:import (java.io Writer)\n                [java.time Period\n                           LocalDate\n                           LocalDateTime\n                           ZonedDateTime\n                           OffsetTime\n                           Instant\n                           OffsetDateTime\n                           ZoneId\n                           DayOfWeek\n                           LocalTime\n                           Month\n                           Duration\n                           Year\n                           YearMonth\n                           MonthDay])]))\n\n(defn- print-to-string [t o]\n  (str \"#time/\" t \" \\\"\" (str o) \"\\\"\"))\n\n(def print-period (partial print-to-string \"period\"))\n(def print-date (partial print-to-string \"date\"))\n(def print-date-time (partial print-to-string \"date-time\"))\n(def print-zoned-date-time (partial print-to-string \"zoned-date-time\"))\n(def print-offset-time (partial print-to-string \"offset-time\"))\n(def print-instant (partial print-to-string \"instant\"))\n(def print-offset-date-time (partial print-to-string \"offset-date-time\"))\n(def print-zone (partial print-to-string \"zone\"))\n(def print-day-of-week (partial print-to-string \"day-of-week\"))\n(def print-time (partial print-to-string \"time\"))\n(def print-month (partial print-to-string \"month\"))\n(def print-month-day (partial print-to-string \"month-day\"))\n(def print-duration (partial print-to-string \"duration\"))\n(def print-year (partial print-to-string \"year\"))\n(def print-year-month (partial print-to-string \"year-month\"))\n\n(defn print-time-literals-cljs! []\n\n  #?(:cljs\n     (extend-protocol IPrintWithWriter\n       Period (-pr-writer [d writer opts] (-write writer (print-period d)))\n       LocalDate (-pr-writer [d writer opts] (-write writer (print-date d)))\n       LocalDateTime (-pr-writer [d writer opts] (-write writer (print-date-time d)))\n       ZonedDateTime (-pr-writer [d writer opts] (-write writer (print-zoned-date-time d)))\n       OffsetTime (-pr-writer [d writer opts] (-write writer (print-offset-time d)))\n       Instant (-pr-writer [d writer opts] (-write writer (print-instant d)))\n       ;OffsetDateTime      (-pr-writer [d writer opts]        (-write writer (print-offset-date-time d)))\n       ZoneId (-pr-writer [d writer opts] (-write writer (print-zone d)))\n       DayOfWeek (-pr-writer [d writer opts] (-write writer (print-day-of-week d)))\n       LocalTime (-pr-writer [d writer opts] (-write writer (print-time d)))\n       Month (-pr-writer [d writer opts] (-write writer (print-month d)))\n       MonthDay (-pr-writer [d writer opts] (-write writer (print-month-day d)))\n       Duration (-pr-writer [d writer opts] (-write writer (print-duration d)))\n       Year (-pr-writer [d writer opts] (-write writer (print-year d)))\n       YearMonth (-pr-writer [d writer opts] (-write writer (print-year-month d)))\n       )))\n\n(defn print-time-literals-clj! []\n  #?(:clj (defmethod print-method Period [c ^Writer w] (.write w ^String ^String (print-period c))))\n  #?(:clj (defmethod print-method LocalDate [c ^Writer w] (.write w ^String (print-date c))))\n  #?(:clj (defmethod print-method LocalDateTime [c ^Writer w] (.write w ^String (print-date-time c))))\n  #?(:clj (defmethod print-method ZonedDateTime [c ^Writer w] (.write w ^String (print-zoned-date-time c))))\n  #?(:clj (defmethod print-method OffsetTime [c ^Writer w] (.write w ^String (print-offset-time c))))\n  #?(:clj (defmethod print-method Instant [c ^Writer w] (.write w ^String (print-instant c))))\n  #?(:clj (defmethod print-method OffsetDateTime [c ^Writer w] (.write w ^String (print-offset-date-time c))))\n  #?(:clj (defmethod print-method ZoneId [c ^Writer w] (.write w ^String (print-zone c))))\n  #?(:clj (defmethod print-method DayOfWeek [c ^Writer w] (.write w ^String (print-day-of-week c))))\n  #?(:clj (defmethod print-method LocalTime [c ^Writer w] (.write w ^String (print-time c))))\n  #?(:clj (defmethod print-method Month [c ^Writer w] (.write w ^String (print-month c))))\n  #?(:clj (defmethod print-method MonthDay [c ^Writer w] (.write w ^String (print-month-day c))))\n  #?(:clj (defmethod print-method Duration [c ^Writer w] (.write w ^String (print-duration c))))\n  #?(:clj (defmethod print-method Year [c ^Writer w] (.write w ^String (print-year c))))\n  #?(:clj (defmethod print-method YearMonth [c ^Writer w] (.write w ^String (print-year-month c)))))\n\n#?(:clj (defmethod print-dup Period [c ^Writer w] (.write w ^String (print-period c))))\n#?(:clj (defmethod print-dup LocalDate [c ^Writer w] (.write w ^String (print-date c))))\n#?(:clj (defmethod print-dup LocalDateTime [c ^Writer w] (.write w ^String (print-date-time c))))\n#?(:clj (defmethod print-dup ZonedDateTime [c ^Writer w] (.write w ^String (print-zoned-date-time c))))\n#?(:clj (defmethod print-dup OffsetTime [c ^Writer w] (.write w ^String (print-offset-time c))))\n#?(:clj (defmethod print-dup Instant [c ^Writer w] (.write w ^String (print-instant c))))\n#?(:clj (defmethod print-dup OffsetDateTime [c ^Writer w] (.write w ^String (print-offset-date-time c))))\n#?(:clj (defmethod print-dup ZoneId [c ^Writer w] (.write w ^String (print-zone c))))\n#?(:clj (defmethod print-dup DayOfWeek [c ^Writer w] (.write w ^String (print-day-of-week c))))\n#?(:clj (defmethod print-dup LocalTime [c ^Writer w] (.write w ^String (print-time c))))\n#?(:clj (defmethod print-dup Month [c ^Writer w] (.write w ^String (print-month c))))\n#?(:clj (defmethod print-dup MonthDay [c ^Writer w] (.write w ^String (print-month-day c))))\n#?(:clj (defmethod print-dup Duration [c ^Writer w] (.write w ^String (print-duration c))))\n#?(:clj (defmethod print-dup Year [c ^Writer w] (.write w ^String (print-year c))))\n#?(:clj (defmethod print-dup YearMonth [c ^Writer w] (.write w ^String (print-year-month c))))\n\n\n(def tags {'time/period           (fn [t] (. Period parse t))\n           'time/date             (fn [t] (. LocalDate parse t))\n           'time/date-time        (fn [t] (. LocalDateTime parse t))\n           'time/zoned-date-time  (fn [t] (. ZonedDateTime parse t))\n           'time/offset-time      (fn [t] (. OffsetTime parse t))\n           'time/instant          (fn [t] (. Instant parse t))\n           'time/offset-date-time (fn [t] (. OffsetDateTime parse t))\n           'time/time             (fn [t] (. LocalTime parse t))\n           'time/duration         (fn [t] (. Duration parse t))\n           'time/year             (fn [t] (. Year parse t))\n           'time/year-month       (fn [t] (. YearMonth parse t))\n           'time/zone             (fn [t] (. ZoneId of t))\n           'time/day-of-week      (fn [t] (. DayOfWeek valueOf t))\n           'time/month            (fn [t] (. Month valueOf t))\n           'time/month-day        (fn [t] (. MonthDay parse t))\n           })\n\n#?(:cljs\n   (do\n     (doseq [[tag read-fn] tags]\n       (reader/register-tag-parser! tag read-fn))))\n\n\n"]}