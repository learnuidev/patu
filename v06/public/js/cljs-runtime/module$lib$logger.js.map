{
"version":3,
"file":"module$lib$logger.js",
"lineCount":42,
"mappings":"AAAA,cAEA,IAAMA,8BAAW,EAAjB;AAEAC,QAASA,8BAAU,CACjBC,GADiB,EAEjBC,MAFiB,EAGjBC,IAHiB,CAMjB;AAMAC,UAASA,KAAI,EAAG;AACd,QAAIC,IAAAC,OAAJ,GAAkBC,GAAlB;AACEF,UAAA,GAAOA,IAAAG,MAAA,CAAW,CAAX,EAAcD,GAAd,CAAP;AADF;AADc,kBAKd,IAAME,MAAMC,qBAAA,CAAK,CAAL,EAAQT,GAAAU,OAAA,EAAR,CAAZ;AAEAN,QAAAO,QAAA,CAAa,QAAA,CAACC,GAAD,EAAMC,CAAN,CAAY;oBACvB,IAAMC,WAAWC,oBAAA,CAAIF,CAAJ,EAAO,CAAP,EAAUP,GAAV,EAAe,CAAf,EAAkB,GAAlB,CAAjB;AADuB,oBAEvB,IAAMU,UAAUD,oBAAA,CAAIF,CAAJ,EAAO,CAAP,EAAUP,GAAV,EAAe,GAAf,EAAoB,GAApB,CAAhB;AAFuB,oBAIvB,IAAMW,MAAO,QAAA,EAAM;AACjB,eAAQL,GAAAM,KAAR;AACE,eAAK,MAAL;AACE,mBAAOC,qBAAA,CAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAcL,QAAd,CAAP;AACF,eAAK,OAAL;AACE,mBAAOK,qBAAA,CAAK,CAAL,EAAQ,CAAR,EAAW,GAAX,EAAgBL,QAAhB,CAAP;AAJJ;AADiB,OAAP,EAAZ;AAJuB,oBAavB,IAAMM,QAAQpB,GAAAqB,QAAA,CAAYT,GAAAU,IAAZ,EAAqBrB,MAAAsB,QAAA,EAArB,EAAuC,CACnDf,IAAKA,GAD8C,EAEnDgB,OAAQ,SAF2C,EAGnDC,MAAOR,GAH4C,EAInDS,KAAM5B,2BAAN4B,GAAiB1B,GAAA2B,MAAA,EAJkC,EAKnDC,MAAO5B,GAAA4B,MAAA,EAL4C,CAAvC,CAAd;AAQA5B,SAAA6B,SAAA,CAAarB,GAAb,EAAkBY,KAAAQ,MAAlB,EAA+BR,KAAAV,OAA/B,EAA6C,CAC3Cc,OAAQ,SADmC,EAE3CC,MAAON,qBAAA,CAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAcH,OAAd,CAFoC,CAA7C,CAAA;AAKAhB,SAAA8B,YAAA,CAAgBV,KAAhB,CAAA;AACAZ,SAAAuB,EAAA,IAASX,KAAAV,OAAT;AA3BuB,KAAzB,CAAA;AAPc;AAsChBsB,UAASA,MAAK,CAACV,GAAD,CAAM;AAClBW,WAAAD,MAAA,CAAcV,GAAd,CAAA;AACAlB,QAAA8B,QAAA,CAAa,CACXhB,KAAM,OADK,EAEXI,IAAKA,GAFM,CAAb,CAAA;AAFkB;AAQpBa,UAASA,KAAI,CAACb,GAAD,CAAM;AACjBlB,QAAA8B,QAAA,CAAa,CACXhB,KAAM,MADK,EAEXI,IAAKA,GAFM,CAAb,CAAA;AADiB;AAOnBc,UAASA,MAAK,EAAG;AACfhC,QAAA,GAAO,EAAP;AADe;AA9DjBF,MAAA,GAAAA,IAAA,KAAA,SAAA,GAAO,CACLI,IAAK,CADA,CAAP,GAAAJ,IAAA;AAIA,MAAIE,OAAO,EAAX;AADA,gBAEA,IAAME,MAAMJ,IAAAI,IAANA,IAAkB,CAAxB;AA6DA,SAAO,CACL6B,KAAAA,IADK,EAELH,MAAAA,KAFK,EAGL7B,KAAAA,IAHK,EAILiC,MAAAA,KAJK,CAAP;AA/DA;AAVF,cAAA,IAAAC,oBAAA,EAAA;AAiFStC,cAAAA,iBAAAA,WAAAA,GAAAA,6BAAAA;;",
"sources":["lib/logger.js"],
"sourcesContent":["import { vec2, rgba, map } from \"/lib/math.js\";\n\nconst LOG_SIZE = 16;\n\nfunction loggerInit(\n  gfx,\n  assets,\n  conf = {\n    max: 8\n  }\n) {\n  let logs = [];\n  const max = conf.max || 8;\n\n  // TODO: draw rects first to reduce draw calls\n  // TODO: make log and progress bar fixed size independent of global scale\n  function draw() {\n    if (logs.length > max) {\n      logs = logs.slice(0, max);\n    }\n\n    const pos = vec2(0, gfx.height());\n\n    logs.forEach((log, i) => {\n      const txtAlpha = map(i, 0, max, 1, 0.5);\n      const bgAlpha = map(i, 0, max, 0.8, 0.2);\n\n      const col = (() => {\n        switch (log.type) {\n          case \"info\":\n            return rgba(1, 1, 1, txtAlpha);\n          case \"error\":\n            return rgba(1, 0, 0.5, txtAlpha);\n        }\n      })();\n\n      const ftext = gfx.fmtText(log.msg, assets.defFont(), {\n        pos: pos,\n        origin: \"botleft\",\n        color: col,\n        size: LOG_SIZE / gfx.scale(),\n        width: gfx.width()\n      });\n\n      gfx.drawRect(pos, ftext.width, ftext.height, {\n        origin: \"botleft\",\n        color: rgba(0, 0, 0, bgAlpha)\n      });\n\n      gfx.drawFmtText(ftext);\n      pos.y -= ftext.height;\n    });\n  }\n\n  function error(msg) {\n    console.error(msg);\n    logs.unshift({\n      type: \"error\",\n      msg: msg\n    });\n  }\n\n  function info(msg) {\n    logs.unshift({\n      type: \"info\",\n      msg: msg\n    });\n  }\n\n  function clear() {\n    logs = [];\n  }\n\n  return {\n    info,\n    error,\n    draw,\n    clear\n  };\n}\n\nexport { loggerInit };\n"],
"names":["LOG_SIZE","loggerInit","gfx","assets","conf","draw","logs","length","max","slice","pos","vec2","height","forEach","log","i","txtAlpha","map","bgAlpha","col","type","rgba","ftext","fmtText","msg","defFont","origin","color","size","scale","width","drawRect","drawFmtText","y","error","console","unshift","info","clear","$jscomp$tmp$exports$module$name"]
}
