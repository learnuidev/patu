{
"version":3,
"file":"module$node_modules$Phaser$src$renderer$snapshot$WebGLSnapshot.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,+DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA+D3HD,MAAAC,QAAA,CA5CoBC,QAAS,CAACC,YAAD,CAAeC,IAAf,CAAqBC,cAArB,CAC7B,CACSD,IAAL,GAAaA,IAAb,CAAoB,WAApB,CACKC,eAAL,GAAuBA,cAAvB,CAAwC,GAAxC,CAEA,KAAIC,GAAKH,YAAAI,WAAA,CAAwB,oBAAxB,CACLC,aAAAA,CAAS,IAAIC,UAAJ,CAAeH,EAAAI,mBAAf,CAAuCJ,EAAAK,oBAAvC,CAAgE,CAAhE,CACbL,GAAAM,WAAA,CAAc,CAAd,CAAiB,CAAjB,CAAoBN,EAAAI,mBAApB,CAA2CJ,EAAAK,oBAA3C,CAAmEL,EAAAO,KAAnE,CAA4EP,EAAAQ,cAA5E,CAA8FN,YAA9F,CAGA,KAAIO,OAASC,QAAAC,cAAA,CAAuB,QAAvB,CAAb;AACIC,IAAMH,MAAAR,WAAA,CAAkB,IAAlB,CAGVQ,OAAAI,MAAA,CAAeb,EAAAI,mBACfK,OAAAK,OAAA,CAAgBd,EAAAK,oBAEhBU,GAAA,CAAYH,GAAAI,aAAA,CAAiB,CAAjB,CAAoB,CAApB,CAAuBP,MAAAI,MAAvB,CAAqCJ,MAAAK,OAArC,CAIZ,KAFA,IAAIG,KAAOF,EAAAE,KAAX,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBT,MAAAK,OAApB,CAAmCI,CAAnC,EAAwC,CAAxC,CAEI,IAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBV,MAAAI,MAApB,CAAkCM,CAAlC,EAAuC,CAAvC,CACA,CACI,IAAIC,GAAgD,CAAhDA,GAAOX,MAAAK,OAAPM,CAAuBF,CAAvBE,EAA4BX,MAAAI,MAA5BO,CAA2CD,CAA3CC,CAAJ,CACIC,GAA8B,CAA9BA,EAAMH,CAANG,CAAUZ,MAAAI,MAAVQ,CAAyBF,CAAzBE,CACJJ,KAAA,CAAKI,EAAL,CAAU,CAAV,CAAA,CAAenB,YAAA,CAAOkB,EAAP,CAAY,CAAZ,CACfH,KAAA,CAAKI,EAAL,CAAU,CAAV,CAAA,CAAenB,YAAA,CAAOkB,EAAP,CAAY,CAAZ,CACfH,KAAA,CAAKI,EAAL,CAAU,CAAV,CAAA,CAAenB,YAAA,CAAOkB,EAAP,CAAY,CAAZ,CACfH,KAAA,CAAKI,EAAL,CAAU,CAAV,CAAA,CAAenB,YAAA,CAAOkB,EAAP,CAAY,CAAZ,CANnB,CAUJR,GAAAU,aAAA,CAAiBP,EAAjB,CAA4B,CAA5B,CAA+B,CAA/B,CAEIQ,KAAAA,CAAMd,MAAAe,UAAA,CAAiB1B,IAAjB,CAAuBC,cAAvB,CACN0B,eAAAA;AAAQ,IAAIC,KAEhBD,eAAAF,IAAA,CAAYA,IAEZ,OAAOE,eAxCX,CApB2H;",
"sources":["node_modules/Phaser/src/renderer/snapshot/WebGLSnapshot.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$renderer$snapshot$WebGLSnapshot\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Takes a snapshot of the current frame displayed by a WebGL canvas.\r\n *\r\n * @function Phaser.Renderer.Snapshot.WebGL\r\n * @since 3.0.0\r\n *\r\n * @param {HTMLCanvasElement} sourceCanvas - The canvas to take a snapshot of.\r\n * @param {string} [type='image/png'] - The format of the returned image.\r\n * @param {number} [encoderOptions=0.92] - The image quality, between 0 and 1, for image formats which use lossy compression (such as `image/jpeg`).\r\n *\r\n * @return {HTMLImageElement} A new image which contains a snapshot of the canvas's contents.\r\n */\r\nvar WebGLSnapshot = function (sourceCanvas, type, encoderOptions)\r\n{\r\n    if (!type) { type = 'image/png'; }\r\n    if (!encoderOptions) { encoderOptions = 0.92; }\r\n\r\n    var gl = sourceCanvas.getContext('experimental-webgl');\r\n    var pixels = new Uint8Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4);\r\n    gl.readPixels(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n\r\n    //  CanvasPool?\r\n    var canvas = document.createElement('canvas');\r\n    var ctx = canvas.getContext('2d');\r\n    var imageData;\r\n\r\n    canvas.width = gl.drawingBufferWidth;\r\n    canvas.height = gl.drawingBufferHeight;\r\n\r\n    imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n    var data = imageData.data;\r\n\r\n    for (var y = 0; y < canvas.height; y += 1)\r\n    {\r\n        for (var x = 0; x < canvas.width; x += 1)\r\n        {\r\n            var si = ((canvas.height - y) * canvas.width + x) * 4;\r\n            var di = (y * canvas.width + x) * 4;\r\n            data[di + 0] = pixels[si + 0];\r\n            data[di + 1] = pixels[si + 1];\r\n            data[di + 2] = pixels[si + 2];\r\n            data[di + 3] = pixels[si + 3];\r\n        }\r\n    }\r\n\r\n    ctx.putImageData(imageData, 0, 0);\r\n\r\n    var src = canvas.toDataURL(type, encoderOptions);\r\n    var image = new Image();\r\n\r\n    image.src = src;\r\n\r\n    return image;\r\n};\r\n\r\nmodule.exports = WebGLSnapshot;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","WebGLSnapshot","sourceCanvas","type","encoderOptions","gl","getContext","pixels","Uint8Array","drawingBufferWidth","drawingBufferHeight","readPixels","RGBA","UNSIGNED_BYTE","canvas","document","createElement","ctx","width","height","imageData","getImageData","data","y","x","si","di","putImageData","src","toDataURL","image","Image"]
}
