{"version":3,"sources":["app/kaboom/mario/core.cljs"],"mappings":"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","names":["app.kaboom.patu.core.init","js/document.getElementById","app.kaboom.patu.loaders.load_root","app.kaboom.mario.assets/assets","seq__27983","cljs.core/seq","chunk__27984","count__27985","i__27986","map__27992","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__27994","cljs.core/first","cljs.core/next","title","url","app.kaboom.patu.loaders.load_sprite","app.kaboom.patu.core/reg-level","app.kaboom.mario.assets/level-handler","app.kaboom.mario.core/biggify-player","p1__27997#","p1__27998#","p1__27999#","state","cljs.core.atom","biggify","app.kaboom.patu.components/scale!","midify","smallify","update","_player","player","app.kaboom.mario.core/main-init","app.kaboom.mario.assets/main-map","app.kaboom.patu.events/reg-event","p__28000","vec__28001","cljs.core.nth","_","id","sid","comp","app.kaboom.patu.core/get-component","cljs.core/name","app.kaboom.mario.core/main-action","p1__28004#","score","level","app.kaboom.patu.core/get-level","pos","app.kaboom.patu.core/vec2","app.kaboom.patu.cam.cam_pos","js/console.log","app.kaboom.patu.events/dispatch","app.kaboom.patu.components/move!","app.kaboom.patu.cam.zoom_in","app.kaboom.patu.cam.zoom_out","app.kaboom.patu.components/jump!","app.kaboom.patu.core.go","app.kaboom.patu.utils.js_get","app.kaboom.patu.core/call","app.kaboom.patu.core/reg-scene","app.kaboom.patu.core/center","app.kaboom.mario.core/app","app.kaboom.patu.core/start"],"sourcesContent":["(ns app.kaboom.mario.core\n  (:require [app.kaboom.patu.core :as p]\n            [app.kaboom.patu.components :as c]\n            [app.kaboom.patu.loaders :as l]\n            [app.kaboom.patu.cam :as cam]\n            [app.kaboom.patu.utils :refer [js-get]]\n            [app.kaboom.patu.events :refer [reg-event dispatch]]\n            [app.kaboom.mario.assets :refer [assets main-map level-handler]]))\n\n; 1 === Init game ===\n(p/init {:canvas (js/document.getElementById \"app\")\n         :global true\n         :fullscreen false\n         :scale 1\n         :debug true\n         :clearColor [0,0,0, 0.9]})\n\n; 2 === Load Assets ===\n(l/load-root (:root-url assets))\n(doseq [{:keys [title url]} (:sprites assets)]\n  (l/load-sprite title url))\n\n;; 3 === Register level ===\n(p/reg-level :level/one level-handler)\n\n;; 4 === Define Scene Handlers (Asset Loader  + Event handler)\n;; Note: Asset Handlers must run before Event handlers!!!\n(defn biggify-player \"Custom component\" []\n  (let [state (atom {:pressed? false})\n        biggify #(c/scale! %  2)\n        midify #(c/scale! %  1.5)\n        smallify #(c/scale! % 1)\n        update (fn [_player])]\n\n    {:biggify #(this-as player (biggify player))\n     :smallify #(this-as player (smallify player))\n     :midify #(this-as player (midify player))\n     :update #(this-as player (update player))}))\n\n;;\n(comment\n  (c/scale! (p/get-component :player) (p/vec2 2))\n  (.biggify (p/get-component :player))\n  (p/call :player :biggify)\n  (p/call :player :smallify)\n  (p/call :player :midify))\n\n;;\n; type Origin =\n;   \"topleft\"\n;   | \"top\"\n;   | \"topright\"\n;   | \"left\"\n;   | \"center\"\n;   | \"right\"\n;   | \"botleft\"\n;   | \"bot\"\n;   | \"botright\"\n;   ;\n(comment\n  (cam/cam-pos [100 200])\n  (cam/zoom-out 10)\n  (cam/zoom-in 10))\n(defn main-init []\n  [[:game/gravity 980]\n   [:game/add-level main-map :level/one]\n   [:game/layers [:background :game, :ui] :game]\n   [:origin :botleft]\n   [:cam/ignore [:ui]]\n   [:comp/reg-n\n    [:player [[:sprite :mario]\n              [:solid]\n              [:pos 160 0]\n              [:body]\n              [:origin :botright]\n              [:prop (biggify-player)]]]\n    [:score [[:text 100]\n             [:pos 16 16]\n             [:layer :ui]\n             [:prop {:value \"You lose\"}]]]]])\n\n(reg-event\n :player/change-sprite\n (fn [_ [_ id sid]]\n   (let [comp (p/get-component id)]\n     (.changeSprite comp (name sid)))))\n\n(defn main-action []\n  (let [player (p/get-component :player)\n        score (p/get-component :score)\n        level (p/get-level :level/one)\n        pos (.sub (.-pos player) (p/vec2 [-200 (- (.-y (.-pos player)) 30)]))]\n    (cam/cam-pos pos)\n    (js/console.log \"YO\")\n    [[:evt/comp\n      [:player\n       ; [:action [:cam/follow :player]]\n       [:on\n        [:headbump\n         [:coin-surprise #(dispatch [:player/change-sprite :player :sprite/coin])]\n         [:mushroom-surprise #(dispatch [:player/change-sprite :player :sprite/coin])]]]]]\n     [:evt/on  [:player :headbump]   #(js/console.log %)]\n     [:evt/key-down  :left  #(when (< 110 (.-x (.-pos player)))\n                               (c/move! player [-230 0]))]\n     [:evt/key-down  :right #(c/move! player [230 0])]\n     [:evt/key-down [:right :left] #(let [pos (.sub (.-pos player) (p/vec2 [-200 (- (.-y (.-pos player)) 30)]))]\n                                      (cam/cam-pos pos))]\n     [:evt/key-down  :up    #(cam/zoom-in)]\n     [:evt/key-down  :down  #(cam/zoom-out)]\n     [:evt/key-press :space #(c/jump! player 400)]\n     [:evt/collides  [:player :evil-mushroom]  #(p/go :scene/lose (js-get score :value))]\n     [:evt/collides  [:player :evil-mushroom]  #(dispatch [:player/change-sprite :player :sprite/evil-mushroom])]\n     [:evt/collides  [:player :mushroom-surprise] (fn []\n                                                    ; (dispatch [:player/change-sprite :player :sprite/mushroom])\n                                                    (p/call :player :biggify))]\n     [:evt/key-press :b #(p/call :player :biggify)]\n     [:evt/key-press :s #(p/call :player :smallify)]\n     [:evt/key-press :m #(p/call :player :midify)]\n     [:evt/key-press :r #(p/go :scene/main)]\n     [:evt/key-press :o #(dispatch [:player/change-sprite :player :sprite/mario])]\n     [:evt/action  :player #(when (> (.. player -pos -y) 320)\n                              (p/go :scene/lose (js-get score :value)))]\n     #_[:evt/action  :player #(when (< 140 (.-x (.-pos player)))\n                                (let [pos (.sub (.-pos player) (p/vec2 [-200 (- (.-y (.-pos player)) 30)]))]\n                                  (cam/cam-pos pos)))]]))\n\n;;\n(comment\n  (.-x (.-pos (p/get-component :player))))\n;; 5 === Register a new scene by passing a scene id and a handler fn\n(p/reg-scene :scene/main {:init main-init :evt main-action})\n\n(p/reg-scene :scene/lose {:init (fn [score]\n                                  [[:comp/reg-n\n                                    [:dialog\n                                     [[:text score 40]\n                                      [:origin :center]\n                                      [:pos (p/center)]]]\n                                    [:dialog-2\n                                     [[:text \"Press space to restart\" 8]\n                                      [:origin :center]\n                                      [:pos [320 280]]]]]])\n                          :evt (fn []\n                                 [[:evt/key-press :space #(p/go :scene/main)]])})\n;; 6 Start app\n(defn app []\n  (p/start :scene/main))\n"]}