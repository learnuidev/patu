{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$dynamiclayer$DynamicTilemapLayer.js",
"lineCount":18,
"mappings":"AAAAA,cAAA,yEAAA,CAA6F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOjIC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACRI,QAAAA,CAAaJ,OAAA,CAAQ,6DAAR,CACjB,KAAIK,0BAA4BL,OAAA,CAAQ,gFAAR,CAAhC,CACIM,WAAaN,OAAA,CAAQ,uDAAR,CADjB,CAEIO,kBAAoBP,OAAA,CAAQ,0DAAR,CAuCpBQ;OAAAA,CAAsB,IAAIL,MAAJ,CAAU,CAEhCM,QAASH,UAFuB,CAIhCI,OAAQ,CACJN,OAAAO,MADI,CAEJP,OAAAQ,UAFI,CAGJR,OAAAS,aAHI,CAIJT,OAAAU,MAJI,CAKJV,OAAAW,KALI,CAMJX,OAAAY,UANI,CAOJZ,OAAAa,OAPI,CAQJb,OAAAc,SARI,CASJd,OAAAe,UATI,CAUJf,OAAAgB,UAVI,CAWJhB,OAAAiB,QAXI,CAYJjB,OAAAkB,aAZI,CAaJjB,yBAbI,CAJwB,CAoBhCkB,WAEAf,QAA6B,CAACgB,KAAD,CAAQC,OAAR,CAAiBC,UAAjB,CAA6BC,OAA7B,CAAsCC,CAAtC,CAAyCC,CAAzC,CAC7B,CACIvB,UAAAwB,KAAA,CAAgB,IAAhB,CAAsBN,KAAtB,CAA6B,qBAA7B,CAUA,KAAAO,UAAA,CAAiB,CAAA,CASjB,KAAAN,QAAA,CAAeA,OASf,KAAAC,WAAA,CAAkBA,UAUlB,KAAAM,MAAA,CAAaP,OAAAQ,OAAA,CAAeP,UAAf,CAGb,KAAAM,MAAAE,aAAA;AAA0B,IAW1B,KAAAP,QAAA,CAAe,EAUf,KAAAQ,YAAA,CAAmB,EAanB,KAAAC,SAAA,CAAgB,CAAA,CAUhB,KAAAC,WAAA,CAAkB,CAUlB,KAAAC,WAAA,CAAkB,IAAAN,MAAAO,MAAlB,CAAqC,IAAAP,MAAAQ,OAwBrC,KAAAC,aAAA,CAZA,IAAAC,aAYA,CAZoB,CA+BpB,KAAAC,aAAA,CAAoBpC,iBAAAqC,UAuBpB,KAAAC,aAAA,CAAoB,CASpB,KAAAC,OAAA,CAAc,EAEd,KAAAC,YAAA,CAAiBpB,OAAjB,CACA,KAAAqB,SAAA,CAAc,IAAAhB,MAAAiB,MAAd,CACA,KAAAC,YAAA,CAAiBtB,CAAjB,CAAoBC,CAApB,CACA,KAAAsB,UAAA,EACA,KAAAC,QAAA,CAAa,IAAApB,MAAAqB,UAAb,CAAoC,IAAArB,MAAAO,MAApC,CAAsD,IAAAP,MAAAsB,WAAtD,CAA8E,IAAAtB,MAAAQ,OAA9E,CAEA,KAAAe,aAAA,CAAkB,qBAAlB,CAnLJ,CAvBgC,CAsNhCR,YAAaA,QAAS,CAACS,QAAD,CACtB,CACI,IAAIV;AAAS,EAAb,CACIW,QAAU,EADd,CAEIC,IAAM,IAAAjC,QAELkC,MAAAC,QAAA,CAAcJ,QAAd,CAAL,GAEIA,QAFJ,CAEe,CAAEA,QAAF,CAFf,CAKA,KAAK,IAAIK,EAAI,CAAb,CAAgBA,CAAhB,CAAoBL,QAAAM,OAApB,CAAqCD,CAAA,EAArC,CACA,CACI,IAAIlC,QAAU6B,QAAA,CAASK,CAAT,CAES,SAAvB,GAAI,MAAOlC,QAAX,GAEIA,OAFJ,CAEc+B,GAAAK,WAAA,CAAepC,OAAf,CAFd,CAKA,IAAIA,OAAJ,CACA,CACI8B,OAAAO,KAAA,CAAarC,OAAb,CAIA,KAFA,IAAIsC,EAAItC,OAAAuC,SAAR,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBxC,OAAAyC,MAApB,CAAmCD,CAAA,EAAnC,CAEIrB,MAAA,CAAOmB,CAAP,CAAWE,CAAX,CAAA,CAAgBxC,OAPxB,CATJ,CAqBA,IAAAmB,OAAA,CAAcA,MACd,KAAAnB,QAAA,CAAe8B,OAjCnB,CAvNgC,CAoRhCY,eAAgBA,QAAS,CAACC,WAAD,CACzB,CACI,IAAIC,OAAS,CAAE,YAAF,CAAgB,WAAhB,CAA6B,UAA7B,CAAyC,SAAzC,CAEc,SAA3B,GAAI,MAAOD,YAAX,GAEIA,WAFJ,CAEkBC,MAAAC,QAAA,CAAeF,WAAf,CAFlB,CAKmB;CAAnB,EAAIA,WAAJ,EAAsC,CAAtC,CAAwBA,WAAxB,GAEI,IAAAzB,aAFJ,CAEwByB,WAFxB,CAKA,OAAO,KAbX,CArRgC,CAkThCG,iBAAkBA,QAAS,CAACC,KAAD,CAAQC,KAAR,CAC3B,CACIpE,iBAAAqE,iBAAA,CAAmCF,KAAnC,CAA0CC,KAA1C,CAAiD,IAAA3C,MAAjD,CAEA,OAAO,KAHX,CAnTgC,CAwUhC6C,qBAAsBA,QAAS,CAACH,KAAD,CAAQC,KAAR,CAAepC,KAAf,CAAsBC,MAAtB,CAC/B,CACIjC,iBAAAuE,qBAAA,CAAuCJ,KAAvC,CAA8CC,KAA9C,CAAqDpC,KAArD,CAA4DC,MAA5D,CAAoE,IAAAR,MAApE,CAEA,OAAO,KAHX,CAzUgC,CAmWhC+C,gBAAiBA,QAAS,CAACC,OAAD,CAAUC,YAAV,CAAwBC,YAAxB,CAAsC1D,KAAtC,CAA6C2D,MAA7C,CAC1B,CACI,MAAO5E,kBAAA6E,gBAAA,CAAkCJ,OAAlC,CAA2CC,YAA3C,CAAyDC,YAAzD,CAAuE1D,KAAvE,CAA8E2D,MAA9E,CAAsF,IAAAnD,MAAtF,CADX,CApWgC;AAmXhCqD,KAAMA,QAAS,CAACF,MAAD,CACf,CACI,MAAO,KAAAxC,aAAA,CAAkB,IAAAX,MAAlB,CAA8BmD,MAA9B,CAAsC,IAAAhD,YAAtC,CAAwD,IAAAU,aAAxD,CADX,CApXgC,CA0YhCyC,KAAMA,QAAS,CAACC,QAAD,CAAWC,QAAX,CAAqBjD,KAArB,CAA4BC,MAA5B,CAAoCiD,SAApC,CAA+CC,SAA/C,CAA0DC,gBAA1D,CACf,CACIpF,iBAAAqF,KAAA,CAAuBL,QAAvB,CAAiCC,QAAjC,CAA2CjD,KAA3C,CAAkDC,MAAlD,CAA0DiD,SAA1D,CAAqEC,SAArE,CAAgFC,gBAAhF,CAAkG,IAAA3D,MAAlG,CAEA,OAAO,KAHX,CA3YgC,CAuZhC6D,QAASA,QAAS,EAClB,CAEQ,IAAA7D,MAAAE,aAAJ,GAAgC,IAAhC,GAEI,IAAAF,MAAAE,aAFJ,CAE8B4D,IAAAA,EAF9B,CAMA,KAAA9D,MAAA,CADA,IAAAP,QACA,CADeqE,IAAAA,EAEf,KAAA3D,YAAA2B,OAAA,CAA0B,CAC1B,KAAAnB,aAAA,CAAoB,IAEpB,KAAAG,OAAA,CAAc,EACd,KAAAnB,QAAA,CAAe,EAEfrB,WAAAyF,UAAAF,QAAA/D,KAAA,CAAkC,IAAlC,CAfJ,CAxZgC;AA2bhCkE,KAAMA,QAAS,CAACC,KAAD,CAAQvB,KAAR,CAAeC,KAAf,CAAsBpC,KAAtB,CAA6BC,MAA7B,CAAqCmD,gBAArC,CACf,CACIpF,iBAAA2F,KAAA,CAAuBD,KAAvB,CAA8BvB,KAA9B,CAAqCC,KAArC,CAA4CpC,KAA5C,CAAmDC,MAAnD,CAA2DmD,gBAA3D,CAA6E,IAAA3D,MAA7E,CAEA,OAAO,KAHX,CA5bgC,CAydhCmE,YAAaA,QAAS,CAACC,QAAD,CAAWC,OAAX,CAAoB3B,KAApB,CAA2BC,KAA3B,CAAkCpC,KAAlC,CAAyCC,MAAzC,CAAiD8D,gBAAjD,CACtB,CACI,MAAO/F,kBAAAgG,YAAA,CAA8BH,QAA9B,CAAwCC,OAAxC,CAAiD3B,KAAjD,CAAwDC,KAAxD,CAA+DpC,KAA/D,CAAsEC,MAAtE,CAA8E8D,gBAA9E,CAAgG,IAAAtE,MAAhG,CADX,CA1dgC,CA+ehCwE,YAAaA,QAAS,CAACC,SAAD,CAAYC,IAAZ,CAAkBC,OAAlB,CACtB,CACI,MAAOpG,kBAAAqG,YAAA,CAA8BH,SAA9B,CAAyCC,IAAzC,CAA+CC,OAA/C,CAAwD,IAAA3E,MAAxD,CADX,CAhfgC,CAygBhC6E,SAAUA,QAAS,CAACT,QAAD,CAAWC,OAAX;AAAoB3B,KAApB,CAA2BC,KAA3B,CAAkCpC,KAAlC,CAAyCC,MAAzC,CAAiD8D,gBAAjD,CACnB,CACI,MAAO/F,kBAAAuG,SAAA,CAA2BV,QAA3B,CAAqCC,OAArC,CAA8C3B,KAA9C,CAAqDC,KAArD,CAA4DpC,KAA5D,CAAmEC,MAAnE,CAA2E8D,gBAA3E,CAA6F,IAAAtE,MAA7F,CADX,CA1gBgC,CAkiBhC+E,YAAaA,QAAS,CAACX,QAAD,CAAWC,OAAX,CAAoB3B,KAApB,CAA2BC,KAA3B,CAAkCpC,KAAlC,CAAyCC,MAAzC,CAAiD8D,gBAAjD,CACtB,CACI/F,iBAAAyG,YAAA,CAA8BZ,QAA9B,CAAwCC,OAAxC,CAAiD3B,KAAjD,CAAwDC,KAAxD,CAA+DpC,KAA/D,CAAsEC,MAAtE,CAA8E8D,gBAA9E,CAAgG,IAAAtE,MAAhG,CAEA,OAAO,KAHX,CAniBgC,CAqjBhCiF,UAAWA,QAAS,CAACvC,KAAD,CAAQC,KAAR,CAAeuC,OAAf,CACpB,CACI,MAAO3G,kBAAA4G,UAAA,CAA4BzC,KAA5B,CAAmCC,KAAnC,CAA0CuC,OAA1C,CAAmD,IAAAlF,MAAnD,CADX,CAtjBgC,CAwkBhCoF,iBAAkBA,QAAS,CAACC,MAAD,CAASC,MAAT,CAAiBJ,OAAjB,CAA0B/B,MAA1B,CAC3B,CACI,MAAO5E,kBAAAgH,iBAAA,CAAmCF,MAAnC;AAA2CC,MAA3C,CAAmDJ,OAAnD,CAA4D/B,MAA5D,CAAoE,IAAAnD,MAApE,CADX,CAzkBgC,CA8lBhCwF,eAAgBA,QAAS,CAAC9C,KAAD,CAAQC,KAAR,CAAepC,KAAf,CAAsBC,MAAtB,CAA8B8D,gBAA9B,CACzB,CACI,MAAO/F,kBAAAkH,eAAA,CAAiC/C,KAAjC,CAAwCC,KAAxC,CAA+CpC,KAA/C,CAAsDC,MAAtD,CAA8D8D,gBAA9D,CAAgF,IAAAtE,MAAhF,CADX,CA/lBgC,CAmnBhC0F,oBAAqBA,QAAS,CAACC,KAAD,CAAQrB,gBAAR,CAA0BnB,MAA1B,CAC9B,CACI,MAAO5E,kBAAAqH,oBAAA,CAAsCD,KAAtC,CAA6CrB,gBAA7C,CAA+DnB,MAA/D,CAAuE,IAAAnD,MAAvE,CADX,CApnBgC,CA0oBhC6F,sBAAuBA,QAAS,CAACR,MAAD,CAASC,MAAT,CAAiB/E,KAAjB,CAAwBC,MAAxB,CAAgC8D,gBAAhC,CAAkDnB,MAAlD,CAChC,CACI,MAAO5E,kBAAAuH,sBAAA,CAAwCT,MAAxC,CAAgDC,MAAhD,CAAwD/E,KAAxD,CAA+DC,MAA/D;AAAuE8D,gBAAvE,CAAyFnB,MAAzF,CAAiG,IAAAnD,MAAjG,CADX,CA3oBgC,CA2pBhC+F,UAAWA,QAAS,CAACrD,KAAD,CAAQC,KAAR,CACpB,CACI,MAAOpE,kBAAAyH,UAAA,CAA4BtD,KAA5B,CAAmCC,KAAnC,CAA0C,IAAA3C,MAA1C,CADX,CA5pBgC,CA6qBhCiG,iBAAkBA,QAAS,CAACZ,MAAD,CAASC,MAAT,CAAiBnC,MAAjB,CAC3B,CACI,MAAO5E,kBAAA2H,iBAAA,CAAmCb,MAAnC,CAA2CC,MAA3C,CAAmDnC,MAAnD,CAA2D,IAAAnD,MAA3D,CADX,CA9qBgC,CAksBhCmG,UAAWA,QAAS,CAACC,IAAD,CAAO1D,KAAP,CAAcC,KAAd,CAAqBgB,gBAArB,CACpB,CACI,MAAOpF,kBAAA8H,UAAA,CAA4BD,IAA5B,CAAkC1D,KAAlC,CAAyCC,KAAzC,CAAgDgB,gBAAhD,CAAkE,IAAA3D,MAAlE,CADX,CAnsBgC,CAwtBhCsG,iBAAkBA,QAAS,CAACF,IAAD,CAAOf,MAAP,CAAeC,MAAf,CAAuB3B,gBAAvB,CAAyCR,MAAzC,CAC3B,CACI,MAAO5E,kBAAAgI,iBAAA,CAAmCH,IAAnC;AAAyCf,MAAzC,CAAiDC,MAAjD,CAAyD3B,gBAAzD,CAA2ER,MAA3E,CAAmF,IAAAnD,MAAnF,CADX,CAztBgC,CA8uBhCwG,WAAYA,QAAS,CAACC,UAAD,CAAa/D,KAAb,CAAoBC,KAApB,CAA2BgB,gBAA3B,CACrB,CACIpF,iBAAAmI,WAAA,CAA6BD,UAA7B,CAAyC/D,KAAzC,CAAgDC,KAAhD,CAAuDgB,gBAAvD,CAAyE,IAAA3D,MAAzE,CAEA,OAAO,KAHX,CA/uBgC,CAuwBhC2G,UAAWA,QAAS,CAACjE,KAAD,CAAQC,KAAR,CAAepC,KAAf,CAAsBC,MAAtB,CAA8BwC,OAA9B,CACpB,CACIzE,iBAAAqI,UAAA,CAA4BlE,KAA5B,CAAmCC,KAAnC,CAA0CpC,KAA1C,CAAiDC,MAAjD,CAAyDwC,OAAzD,CAAkE,IAAAhD,MAAlE,CAEA,OAAO,KAHX,CAxwBgC,CA4xBhC6G,aAAcA,QAAS,CAACnE,KAAD,CAAQC,KAAR,CAAemE,eAAf,CAAgCnD,gBAAhC,CACvB,CACI,MAAOpF,kBAAAwI,aAAA,CAA+BrE,KAA/B,CAAsCC,KAAtC,CAA6CmE,eAA7C,CAA8DnD,gBAA9D,CAAgF,IAAA3D,MAAhF,CADX,CA7xBgC;AAgzBhCgH,oBAAqBA,QAAS,CAAC3B,MAAD,CAASC,MAAT,CAAiBwB,eAAjB,CAAkCnD,gBAAlC,CAAoDR,MAApD,CAC9B,CACI,MAAO5E,kBAAA0I,oBAAA,CAAsC5B,MAAtC,CAA8CC,MAA9C,CAAsDwB,eAAtD,CAAuEnD,gBAAvE,CAAyFR,MAAzF,CAAiG,IAAAnD,MAAjG,CADX,CAjzBgC,CAy0BhCkH,YAAaA,QAAS,CAACC,QAAD,CAAWC,WAAX,CACtB,CACI7I,iBAAA8I,YAAA,CAA8BF,QAA9B,CAAwCC,WAAxC,CAAqD,IAAApH,MAArD,CAEA,OAAO,KAHX,CA10BgC,CAi2BhCsH,eAAgBA,QAAS,CAAC7C,SAAD,CAAY8C,QAAZ,CAAsB7E,KAAtB,CAA6BC,KAA7B,CAAoCpC,KAApC,CAA2CC,MAA3C,CACzB,CACIjC,iBAAAiJ,eAAA,CAAiC/C,SAAjC,CAA4C8C,QAA5C,CAAsD7E,KAAtD,CAA6DC,KAA7D,CAAoEpC,KAApE,CAA2EC,MAA3E,CAAmF,IAAAR,MAAnF,CAEA,OAAO,KAHX,CAl2BgC,CAq3BhCyH,YAAaA,QAAS,CAACC,KAAD,CACtB,CACkB5D,IAAAA,EAAd;AAAI4D,KAAJ,GAA2BA,KAA3B,CAAmC,CAAA,CAAnC,CAEA,KAAAtH,SAAA,CAAgBsH,KAEhB,OAAO,KALX,CAt3BgC,CA64BhCC,eAAgBA,QAAS,CAACC,QAAD,CAAWC,QAAX,CACzB,CACqB/D,IAAAA,EAAjB,GAAI8D,QAAJ,GAA8BA,QAA9B,CAAyC,CAAzC,CACiB9D,KAAAA,EAAjB,GAAI+D,QAAJ,GAA8BA,QAA9B,CAAyC,CAAzC,CAEA,KAAAnH,aAAA,CAAoBkH,QACpB,KAAAnH,aAAA,CAAoBoH,QAEpB,OAAO,KAPX,CA94BgC,CAw6BhCC,aAAcA,QAAS,CAAC9E,OAAD,CAAU+E,QAAV,CAAoBpE,gBAApB,CACvB,CACIpF,iBAAAyJ,aAAA,CAA+BhF,OAA/B,CAAwC+E,QAAxC,CAAkDpE,gBAAlD,CAAoE,IAAA3D,MAApE,CAEA,OAAO,KAHX,CAz6BgC,CAi8BhCiI,oBAAqBA,QAAS,CAACC,KAAD,CAAQC,IAAR,CAAcJ,QAAd,CAAwBpE,gBAAxB,CAC9B,CACIpF,iBAAA6J,oBAAA,CAAsCF,KAAtC,CAA6CC,IAA7C,CAAmDJ,QAAnD,CAA6DpE,gBAA7D;AAA+E,IAAA3D,MAA/E,CAEA,OAAO,KAHX,CAl8BgC,CA69BhCqI,uBAAwBA,QAAS,CAACC,UAAD,CAAaP,QAAb,CAAuBpE,gBAAvB,CACjC,CACIpF,iBAAAgK,uBAAA,CAAyCD,UAAzC,CAAqDP,QAArD,CAA+DpE,gBAA/D,CAAiF,IAAA3D,MAAjF,CAEA,OAAO,KAHX,CA99BgC,CAo/BhCwI,wBAAyBA,QAAS,CAACxF,OAAD,CAAU+E,QAAV,CAAoBpE,gBAApB,CAClC,CACIpF,iBAAAkK,wBAAA,CAA0CzF,OAA1C,CAAmD+E,QAAnD,CAA6DpE,gBAA7D,CAA+E,IAAA3D,MAA/E,CAEA,OAAO,KAHX,CAr/BgC,CA2gChC0I,+BAAgCA,QAAS,CAACX,QAAD,CAAWpE,gBAAX,CACzC,CACIpF,iBAAAoK,+BAAA,CAAiDZ,QAAjD,CAA2DpE,gBAA3D;AAA6E,IAAA3D,MAA7E,CAEA,OAAO,KAHX,CA5gCgC,CAkiChC4I,qBAAsBA,QAAS,CAAC5F,OAAD,CAAUoB,QAAV,CAAoByE,eAApB,CAC/B,CACItK,iBAAAuK,qBAAA,CAAuC9F,OAAvC,CAAgDoB,QAAhD,CAA0DyE,eAA1D,CAA2E,IAAA7I,MAA3E,CAEA,OAAO,KAHX,CAniCgC,CA0jChC+I,wBAAyBA,QAAS,CAACrG,KAAD,CAAQC,KAAR,CAAepC,KAAf,CAAsBC,MAAtB,CAA8B4D,QAA9B,CAAwCyE,eAAxC,CAClC,CACItK,iBAAAyK,wBAAA,CAA0CtG,KAA1C,CAAiDC,KAAjD,CAAwDpC,KAAxD,CAA+DC,MAA/D,CAAuE4D,QAAvE,CAAiFyE,eAAjF,CAAkG,IAAA7I,MAAlG,CAEA,OAAO,KAHX,CA3jCgC,CAilChCiJ,QAASA,QAAS,CAACvG,KAAD,CAAQC,KAAR,CAAepC,KAAf,CAAsBC,MAAtB,CAClB,CACIjC,iBAAA2K,QAAA,CAA0BxG,KAA1B,CAAiCC,KAAjC,CAAwCpC,KAAxC,CAA+CC,MAA/C,CAAuD,IAAAR,MAAvD,CAEA,OAAO,KAHX,CAllCgC;AAymChCmJ,YAAaA,QAAS,CAACC,MAAD,CAASC,MAAT,CAAiB3G,KAAjB,CAAwBC,KAAxB,CAA+BpC,KAA/B,CAAsCC,MAAtC,CACtB,CACIjC,iBAAA+K,YAAA,CAA8BF,MAA9B,CAAsCC,MAAtC,CAA8C3G,KAA9C,CAAqDC,KAArD,CAA4DpC,KAA5D,CAAmEC,MAAnE,CAA2E,IAAAR,MAA3E,CAEA,OAAO,KAHX,CA1mCgC,CA4nChCuJ,aAAcA,QAAS,CAAC7G,KAAD,CAAQS,MAAR,CACvB,CACI,MAAO5E,kBAAAiL,aAAA,CAA+B9G,KAA/B,CAAsCS,MAAtC,CAA8C,IAAAnD,MAA9C,CADX,CA7nCgC,CA6oChCyJ,aAAcA,QAAS,CAAC9G,KAAD,CAAQQ,MAAR,CACvB,CACI,MAAO5E,kBAAAmL,aAAA,CAA+B/G,KAA/B,CAAsCQ,MAAtC,CAA8C,IAAAnD,MAA9C,CADX,CA9oCgC,CAiqChC2J,cAAeA,QAAS,CAACjH,KAAD,CAAQC,KAAR,CAAeiH,KAAf,CAAsBzG,MAAtB,CACxB,CACI,MAAO5E,kBAAAsL,cAAA,CAAgCnH,KAAhC,CAAuCC,KAAvC,CAA8CiH,KAA9C,CAAqDzG,MAArD,CAA6D,IAAAnD,MAA7D,CADX,CAlqCgC,CAksChC8J,kBAAmBA,QAAS,CAACpH,KAAD;AAAQC,KAAR,CAAepC,KAAf,CAAsBC,MAAtB,CAA8BuJ,eAA9B,CAC5B,CACIxL,iBAAAyL,kBAAA,CAAoCtH,KAApC,CAA2CC,KAA3C,CAAkDpC,KAAlD,CAAyDC,MAAzD,CAAiEuJ,eAAjE,CAAkF,IAAA/J,MAAlF,CAEA,OAAO,KAHX,CAnsCgC,CAstChCiK,aAAcA,QAAS,CAAC5E,MAAD,CAAS6E,WAAT,CAAsB/G,MAAtB,CACvB,CACI,MAAO5E,kBAAA4L,aAAA,CAA+B9E,MAA/B,CAAuC6E,WAAvC,CAAoD/G,MAApD,CAA4D,IAAAnD,MAA5D,CADX,CAvtCgC,CAwuChCoK,aAAcA,QAAS,CAAC9E,MAAD,CAAS4E,WAAT,CAAsB/G,MAAtB,CACvB,CACI,MAAO5E,kBAAA8L,aAAA,CAA+B/E,MAA/B,CAAuC4E,WAAvC,CAAoD/G,MAApD,CAA4D,IAAAnD,MAA5D,CADX,CAzuCgC,CA6vChCsK,cAAeA,QAAS,CAACjF,MAAD,CAASC,MAAT,CAAiB4E,WAAjB,CAA8BN,KAA9B,CAAqCzG,MAArC,CACxB,CACI,MAAO5E,kBAAAgM,cAAA,CAAgClF,MAAhC,CAAwCC,MAAxC;AAAgD4E,WAAhD,CAA6DN,KAA7D,CAAoEzG,MAApE,CAA4E,IAAAnD,MAA5E,CADX,CA9vCgC,CAAV,CAowC1B/B,OAAAC,QAAA,CAAiBM,OAtzCoH;",
"sources":["node_modules/Phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$dynamiclayer$DynamicTilemapLayer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar DynamicTilemapLayerRender = require('./DynamicTilemapLayerRender');\r\nvar GameObject = require('../../gameobjects/GameObject');\r\nvar TilemapComponents = require('../components');\r\n\r\n/**\r\n * @classdesc\r\n * A Dynamic Tilemap Layer is a Game Object that renders LayerData from a Tilemap when used in combination\r\n * with one, or more, Tilesets.\r\n *\r\n * A Dynamic Tilemap Layer trades some speed for being able to apply powerful effects. Unlike a\r\n * Static Tilemap Layer, you can apply per-tile effects like tint or alpha, and you can change the\r\n * tiles in a DynamicTilemapLayer.\r\n * \r\n * Use this over a Static Tilemap Layer when you need those features.\r\n *\r\n * @class DynamicTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\r\nvar DynamicTilemapLayer = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        DynamicTilemapLayerRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function DynamicTilemapLayer (scene, tilemap, layerIndex, tileset, x, y)\r\n    {\r\n        GameObject.call(this, scene, 'DynamicTilemapLayer');\r\n\r\n        /**\r\n         * Used internally by physics system to perform fast type checks.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#isTilemap\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.isTilemap = true;\r\n\r\n        /**\r\n         * The Tilemap that this layer is a part of.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilemap\r\n         * @type {Phaser.Tilemaps.Tilemap}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = tilemap;\r\n\r\n        /**\r\n         * The index of the LayerData associated with this layer.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#layerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.layerIndex = layerIndex;\r\n\r\n        /**\r\n         * The LayerData associated with this layer. LayerData can only be associated with one\r\n         * tilemap layer.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#layer\r\n         * @type {Phaser.Tilemaps.LayerData}\r\n         * @since 3.0.0\r\n         */\r\n        this.layer = tilemap.layers[layerIndex];\r\n\r\n        // Link the LayerData with this static tilemap layer\r\n        this.layer.tilemapLayer = this;\r\n\r\n        /**\r\n         * The Tileset/s associated with this layer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array of Tileset objects, previously it was a single reference.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tileset\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileset = [];\r\n\r\n        /**\r\n         * Used internally with the canvas render. This holds the tiles that are visible within the\r\n         * camera.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#culledTiles\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.culledTiles = [];\r\n\r\n        /**\r\n         * You can control if the Cameras should cull tiles before rendering them or not.\r\n         * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n         *\r\n         * However, there are some instances when you may wish to disable this, and toggling this flag allows\r\n         * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#skipCull\r\n         * @type {boolean}\r\n         * @since 3.11.0\r\n         */\r\n        this.skipCull = false;\r\n\r\n        /**\r\n         * The total number of tiles drawn by the renderer in the last frame.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesDrawn\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.11.0\r\n         */\r\n        this.tilesDrawn = 0;\r\n\r\n        /**\r\n         * The total number of tiles in this layer. Updated every frame.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesTotal\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.11.0\r\n         */\r\n        this.tilesTotal = this.layer.width * this.layer.height;\r\n\r\n        /**\r\n         * The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingX\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this.cullPaddingX = 1;\r\n\r\n        /**\r\n         * The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingY\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this.cullPaddingY = 1;\r\n\r\n        /**\r\n         * The callback that is invoked when the tiles are culled.\r\n         *\r\n         * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\r\n         *\r\n         * It will be sent 3 arguments:\r\n         *\r\n         * 1) The Phaser.Tilemaps.LayerData object for this Layer\r\n         * 2) The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\r\n         * 3) A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\r\n         *\r\n         * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullCallback\r\n         * @type {function}\r\n         * @since 3.11.0\r\n         */\r\n        this.cullCallback = TilemapComponents.CullTiles;\r\n\r\n        /**\r\n         * The rendering (draw) order of the tiles in this layer.\r\n         * \r\n         * The default is 0 which is 'right-down', meaning it will draw the tiles starting from the top-left,\r\n         * drawing to the right and then moving down to the next row.\r\n         * \r\n         * The draw orders are:\r\n         * \r\n         * 0 = right-down\r\n         * 1 = left-down\r\n         * 2 = right-up\r\n         * 3 = left-up\r\n         * \r\n         * This can be changed via the `setRenderOrder` method.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#_renderOrder\r\n         * @type {integer}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._renderOrder = 0;\r\n\r\n        /**\r\n         * An array holding the mapping between the tile indexes and the tileset they belong to.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#gidMap\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.14.0\r\n         */\r\n        this.gidMap = [];\r\n\r\n        this.setTilesets(tileset);\r\n        this.setAlpha(this.layer.alpha);\r\n        this.setPosition(x, y);\r\n        this.setOrigin();\r\n        this.setSize(this.layer.tileWidth * this.layer.width, this.layer.tileHeight * this.layer.height);\r\n\r\n        this.initPipeline('TextureTintPipeline');\r\n    },\r\n\r\n    /**\r\n     * Populates the internal `tileset` array with the Tileset references this Layer requires for rendering.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTilesets\r\n     * @private\r\n     * @since 3.14.0\r\n     * \r\n     * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n     */\r\n    setTilesets: function (tilesets)\r\n    {\r\n        var gidMap = [];\r\n        var setList = [];\r\n        var map = this.tilemap;\r\n\r\n        if (!Array.isArray(tilesets))\r\n        {\r\n            tilesets = [ tilesets ];\r\n        }\r\n\r\n        for (var i = 0; i < tilesets.length; i++)\r\n        {\r\n            var tileset = tilesets[i];\r\n\r\n            if (typeof tileset === 'string')\r\n            {\r\n                tileset = map.getTileset(tileset);\r\n            }\r\n\r\n            if (tileset)\r\n            {\r\n                setList.push(tileset);\r\n\r\n                var s = tileset.firstgid;\r\n\r\n                for (var t = 0; t < tileset.total; t++)\r\n                {\r\n                    gidMap[s + t] = tileset;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.gidMap = gidMap;\r\n        this.tileset = setList;\r\n    },\r\n\r\n    /**\r\n     * Sets the rendering (draw) order of the tiles in this layer.\r\n     * \r\n     * The default is 'right-down', meaning it will order the tiles starting from the top-left,\r\n     * drawing to the right and then moving down to the next row.\r\n     * \r\n     * The draw orders are:\r\n     * \r\n     * 0 = right-down\r\n     * 1 = left-down\r\n     * 2 = right-up\r\n     * 3 = left-up\r\n     * \r\n     * Setting the render order does not change the tiles or how they are stored in the layer,\r\n     * it purely impacts the order in which they are rendered.\r\n     * \r\n     * You can provide either an integer (0 to 3), or the string version of the order.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setRenderOrder\r\n     * @since 3.12.0\r\n     *\r\n     * @param {(integer|string)} renderOrder - The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setRenderOrder: function (renderOrder)\r\n    {\r\n        var orders = [ 'right-down', 'left-down', 'right-up', 'left-up' ];\r\n\r\n        if (typeof renderOrder === 'string')\r\n        {\r\n            renderOrder = orders.indexOf(renderOrder);\r\n        }\r\n\r\n        if (renderOrder >= 0 && renderOrder < 4)\r\n        {\r\n            this._renderOrder = renderOrder;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate.\r\n     * @param {integer} tileY - The y coordinate.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY)\r\n    {\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera)\r\n    {\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Returns the tiles in the given layer that are within the cameras viewport.\r\n     * This is used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        return this.cullCallback(this.layer, camera, this.culledTiles, this._renderOrder);\r\n    },\r\n\r\n    /**\r\n     * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n     * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n     * information in the destination region.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n     * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n     * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n     * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n     * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n     * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    copy: function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces)\r\n    {\r\n        TilemapComponents.Copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroys this DynamicTilemapLayer and removes its link to the associated LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        // Uninstall this layer only if it is still installed on the LayerData object\r\n        if (this.layer.tilemapLayer === this)\r\n        {\r\n            this.layer.tilemapLayer = undefined;\r\n        }\r\n\r\n        this.tilemap = undefined;\r\n        this.layer = undefined;\r\n        this.culledTiles.length = 0;\r\n        this.cullCallback = null;\r\n\r\n        this.gidMap = [];\r\n        this.tileset = [];\r\n\r\n        GameObject.prototype.destroy.call(this);\r\n    },\r\n\r\n    /**\r\n     * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n     * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n     * Collision information in the region will be recalculated.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#fill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index to fill the area with.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    fill: function (index, tileX, tileY, width, height, recalculateFaces)\r\n    {\r\n        TilemapComponents.Fill(index, tileX, tileY, width, height, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n     * bottom-right. Otherwise it scans from the top-left.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse)\r\n    {\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {FindTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile}\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {EachTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile object with an index of -1.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull)\r\n    {\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n     * were invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera)\r\n    {\r\n        return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n     * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n     * @param {number} width - The width of the area.\r\n     * @param {number} height - The height of the area.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     *\r\n     * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n     */\r\n    hasTileAt: function (tileX, tileY)\r\n    {\r\n        return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera)\r\n    {\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\r\n     * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\r\n     * location. If you pass in an index, only the index at the specified location will be changed.\r\n     * Collision information will be recalculated at the specified location.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    putTileAt: function (tile, tileX, tileY, recalculateFaces)\r\n    {\r\n        return TilemapComponents.PutTileAt(tile, tileX, tileY, recalculateFaces, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\r\n     * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\r\n     * specified location. If you pass in an index, only the index at the specified location will be\r\n     * changed. Collision information will be recalculated at the specified location.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    putTileAtWorldXY: function (tile, worldX, worldY, recalculateFaces, camera)\r\n    {\r\n        return TilemapComponents.PutTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n     * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n     * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n     * index at the specified location will be changed. Collision information will be recalculated\r\n     * within the region tiles were changed.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTilesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    putTilesAt: function (tilesArray, tileX, tileY, recalculateFaces)\r\n    {\r\n        TilemapComponents.PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will receive a new index. If an array of indexes is passed in, then\r\n     * those will be used for randomly assigning new tile indexes. If an array is not provided, the\r\n     * indexes found within the region (excluding -1) will be used for randomly assigning new tile\r\n     * indexes. This method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#randomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {integer[]} [indexes] - An array of indexes to randomly draw from during randomization.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    randomize: function (tileX, tileY, width, height, indexes)\r\n    {\r\n        TilemapComponents.Randomize(tileX, tileY, width, height, indexes, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    removeTileAt: function (tileX, tileY, replaceWithNull, recalculateFaces)\r\n    {\r\n        return TilemapComponents.RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given world coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    removeTileAtWorldXY: function (worldX, worldY, replaceWithNull, recalculateFaces, camera)\r\n    {\r\n        return TilemapComponents.RemoveTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     * @param {?Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n     * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n     * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n     * tile faces. If set to null, interesting tile faces will not be drawn.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    renderDebug: function (graphics, styleConfig)\r\n    {\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n     * not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#replaceByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} findIndex - The index of the tile to search for.\r\n     * @param {integer} newIndex - The index of the tile to replace it with.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    replaceByIndex: function (findIndex, newIndex, tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.ReplaceByIndex(findIndex, newIndex, tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * You can control if the Cameras should cull tiles before rendering them or not.\r\n     * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n     *\r\n     * However, there are some instances when you may wish to disable this.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setSkipCull\r\n     * @since 3.11.0\r\n     *\r\n     * @param {boolean} [value=true] - Set to `true` to stop culling tiles. Set to `false` to enable culling again.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setSkipCull: function (value)\r\n    {\r\n        if (value === undefined) { value = true; }\r\n\r\n        this.skipCull = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * When a Camera culls the tiles in this layer it does so using its view into the world, building up a\r\n     * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\r\n     * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\r\n     * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\r\n     * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCullPadding\r\n     * @since 3.11.0\r\n     *\r\n     * @param {integer} [paddingX=1] - The amount of extra horizontal tiles to add to the cull check padding.\r\n     * @param {integer} [paddingY=1] - The amount of extra vertical tiles to add to the cull check padding.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setCullPadding: function (paddingX, paddingY)\r\n    {\r\n        if (paddingX === undefined) { paddingX = 1; }\r\n        if (paddingY === undefined) { paddingY = 1; }\r\n\r\n        this.cullPaddingX = paddingX;\r\n        this.cullPaddingY = paddingY;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should\r\n     * be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes to have a\r\n     * collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} [callbackContext] - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n     * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n     * appear to have changed! This method only modifies tile indexes and does not change collision\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#shuffle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    shuffle: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.Shuffle(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#swapByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileA - First tile index.\r\n     * @param {integer} tileB - Second tile index.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    swapByIndex: function (indexA, indexB, tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.SwapByIndex(indexA, indexB, tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldX: function (tileX, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldY: function (tileY, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will recieve a new index. New indexes are drawn from the given\r\n     * weightedIndexes array. An example weighted array:\r\n     *\r\n     * [\r\n     *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n     *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n     *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n     *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n     * ]\r\n     *\r\n     * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n     * method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#weightedRandomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n     * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n     * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    weightedRandomize: function (tileX, tileY, width, height, weightedIndexes)\r\n    {\r\n        TilemapComponents.WeightedRandomize(tileX, tileY, width, height, weightedIndexes, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n     * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = DynamicTilemapLayer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Components","DynamicTilemapLayerRender","GameObject","TilemapComponents","DynamicTilemapLayer","Extends","Mixins","Alpha","BlendMode","ComputedSize","Depth","Flip","GetBounds","Origin","Pipeline","ScaleMode","Transform","Visible","ScrollFactor","initialize","scene","tilemap","layerIndex","tileset","x","y","call","isTilemap","layer","layers","tilemapLayer","culledTiles","skipCull","tilesDrawn","tilesTotal","width","height","cullPaddingY","cullPaddingX","cullCallback","CullTiles","_renderOrder","gidMap","setTilesets","setAlpha","alpha","setPosition","setOrigin","setSize","tileWidth","tileHeight","initPipeline","tilesets","setList","map","Array","isArray","i","length","getTileset","push","s","firstgid","t","total","setRenderOrder","renderOrder","orders","indexOf","calculateFacesAt","tileX","tileY","CalculateFacesAt","calculateFacesWithin","CalculateFacesWithin","createFromTiles","indexes","replacements","spriteConfig","camera","CreateFromTiles","cull","copy","srcTileX","srcTileY","destTileX","destTileY","recalculateFaces","Copy","destroy","undefined","prototype","fill","index","Fill","filterTiles","callback","context","filteringOptions","FilterTiles","findByIndex","findIndex","skip","reverse","FindByIndex","findTile","FindTile","forEachTile","ForEachTile","getTileAt","nonNull","GetTileAt","getTileAtWorldXY","worldX","worldY","GetTileAtWorldXY","getTilesWithin","GetTilesWithin","getTilesWithinShape","shape","GetTilesWithinShape","getTilesWithinWorldXY","GetTilesWithinWorldXY","hasTileAt","HasTileAt","hasTileAtWorldXY","HasTileAtWorldXY","putTileAt","tile","PutTileAt","putTileAtWorldXY","PutTileAtWorldXY","putTilesAt","tilesArray","PutTilesAt","randomize","Randomize","removeTileAt","replaceWithNull","RemoveTileAt","removeTileAtWorldXY","RemoveTileAtWorldXY","renderDebug","graphics","styleConfig","RenderDebug","replaceByIndex","newIndex","ReplaceByIndex","setSkipCull","value","setCullPadding","paddingX","paddingY","setCollision","collides","SetCollision","setCollisionBetween","start","stop","SetCollisionBetween","setCollisionByProperty","properties","SetCollisionByProperty","setCollisionByExclusion","SetCollisionByExclusion","setCollisionFromCollisionGroup","SetCollisionFromCollisionGroup","setTileIndexCallback","callbackContext","SetTileIndexCallback","setTileLocationCallback","SetTileLocationCallback","shuffle","Shuffle","swapByIndex","indexA","indexB","SwapByIndex","tileToWorldX","TileToWorldX","tileToWorldY","TileToWorldY","tileToWorldXY","point","TileToWorldXY","weightedRandomize","weightedIndexes","WeightedRandomize","worldToTileX","snapToFloor","WorldToTileX","worldToTileY","WorldToTileY","worldToTileXY","WorldToTileXY"]
}
