{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$parsers$tiled$AssignTileProperties.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,2EAAA,CAA+F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOvI,IAAIC,OAASH,OAAA,CAAQ,oDAAR,CA4DbC,OAAAC,QAAA,CAlD2BE,QAAS,CAACC,OAAD,CACpC,CAQI,IAPA,IAAIC,SAAJ,CACIC,IADJ,CAEIC,GAFJ,CAIIC,GAJJ,CAOSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBL,OAAAM,OAAAC,OAApB,CAA2CF,CAAA,EAA3C,CACA,CACIJ,SAAA,CAAYD,OAAAM,OAAA,CAAeD,CAAf,CAKZ,KAAK,IAAIG,EAAI,CAAb,CAAgBA,CAAhB,CAAoBP,SAAAQ,KAAAF,OAApB,CAA2CC,CAAA,EAA3C,CACA,CACIJ,GAAA,CAAMH,SAAAQ,KAAA,CAAeD,CAAf,CAGN,KAAK,IAAIE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBN,GAAAG,OAApB,CAAgCG,CAAA,EAAhC,CAEIR,IAEA,CAFOE,GAAA,CAAIM,CAAJ,CAEP,CAAa,IAAb,GAAIR,IAAJ,EAAkC,CAAlC,CAAqBA,IAAAS,MAArB,GAMAR,GAQA,CARMH,OAAAY,MAAA,CAAcV,IAAAS,MAAd,CAAA,CAA0B,CAA1B,CAQN,CAPAE,GAOA,CAPMb,OAAAc,SAAA,CAAiBX,GAAjB,CAON;AAJAD,IAAAa,MAIA,CAJaF,GAAAG,UAIb,CAHAd,IAAAe,OAGA,CAHcJ,GAAAK,WAGd,CAAIL,GAAAM,eAAJ,EAA0BN,GAAAM,eAAA,CAAmBjB,IAAAS,MAAnB,CAAgCE,GAAAO,SAAhC,CAA1B,GAEIlB,IAAAmB,WAFJ,CAEsBvB,MAAA,CACdI,IAAAmB,WADc,CACGR,GAAAM,eAAA,CAAmBjB,IAAAS,MAAnB,CAAgCE,GAAAO,SAAhC,CADH,CAFtB,CAdA,CARR,CAPJ,CATJ,CAlBuI;",
"sources":["node_modules/Phaser/src/tilemaps/parsers/tiled/AssignTileProperties.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$parsers$tiled$AssignTileProperties\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar Extend = require('../../../utils/object/Extend');\r\n\r\n/**\r\n * Copy properties from tileset to tiles.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.AssignTileProperties\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tilemaps.MapData} mapData - [description]\r\n */\r\nvar AssignTileProperties = function (mapData)\r\n{\r\n    var layerData;\r\n    var tile;\r\n    var sid;\r\n    var set;\r\n    var row;\r\n\r\n    // go through each of the map data layers\r\n    for (var i = 0; i < mapData.layers.length; i++)\r\n    {\r\n        layerData = mapData.layers[i];\r\n\r\n        set = null;\r\n\r\n        // rows of tiles\r\n        for (var j = 0; j < layerData.data.length; j++)\r\n        {\r\n            row = layerData.data[j];\r\n\r\n            // individual tiles\r\n            for (var k = 0; k < row.length; k++)\r\n            {\r\n                tile = row[k];\r\n\r\n                if (tile === null || tile.index < 0)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                // find the relevant tileset\r\n                sid = mapData.tiles[tile.index][2];\r\n                set = mapData.tilesets[sid];\r\n\r\n                // Ensure that a tile's size matches its tileset\r\n                tile.width = set.tileWidth;\r\n                tile.height = set.tileHeight;\r\n\r\n                // if that tile type has any properties, add them to the tile object\r\n                if (set.tileProperties && set.tileProperties[tile.index - set.firstgid])\r\n                {\r\n                    tile.properties = Extend(\r\n                        tile.properties, set.tileProperties[tile.index - set.firstgid]\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = AssignTileProperties;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extend","AssignTileProperties","mapData","layerData","tile","sid","row","i","layers","length","j","data","k","index","tiles","set","tilesets","width","tileWidth","height","tileHeight","tileProperties","firstgid","properties"]
}
