{
"version":3,
"file":"module$node_modules$Phaser$src$cameras$2d$CameraManager.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/Phaser/src/cameras/2d/CameraManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$cameras$2d$CameraManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Camera = require('./Camera');\r\nvar Class = require('../../utils/Class');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar PluginCache = require('../../plugins/PluginCache');\r\nvar RectangleContains = require('../../geom/rectangle/Contains');\r\n\r\n/**\r\n * @typedef {object} InputJSONCameraObject\r\n *\r\n * @property {string} [name=''] - The name of the Camera.\r\n * @property {integer} [x=0] - The horizontal position of the Camera viewport.\r\n * @property {integer} [y=0] - The vertical position of the Camera viewport.\r\n * @property {integer} [width] - The width of the Camera viewport.\r\n * @property {integer} [height] - The height of the Camera viewport.\r\n * @property {number} [zoom=1] - The default zoom level of the Camera.\r\n * @property {number} [rotation=0] - The rotation of the Camera, in radians.\r\n * @property {boolean} [roundPixels=false] - Should the Camera round pixels before rendering?\r\n * @property {number} [scrollX=0] - The horizontal scroll position of the Camera.\r\n * @property {number} [scrollY=0] - The vertical scroll position of the Camera.\r\n * @property {(false|string)} [backgroundColor=false] - A CSS color string controlling the Camera background color.\r\n * @property {?object} [bounds] - Defines the Camera bounds.\r\n * @property {number} [bounds.x=0] - The top-left extent of the Camera bounds.\r\n * @property {number} [bounds.y=0] - The top-left extent of the Camera bounds.\r\n * @property {number} [bounds.width] - The width of the Camera bounds.\r\n * @property {number} [bounds.height] - The height of the Camera bounds.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The Camera Manager is a plugin that belongs to a Scene and is responsible for managing all of the Scene Cameras.\r\n * \r\n * By default you can access the Camera Manager from within a Scene using `this.cameras`, although this can be changed\r\n * in your game config.\r\n * \r\n * Create new Cameras using the `add` method. Or extend the Camera class with your own addition code and then add\r\n * the new Camera in using the `addExisting` method.\r\n * \r\n * Cameras provide a view into your game world, and can be positioned, rotated, zoomed and scrolled accordingly.\r\n *\r\n * A Camera consists of two elements: The viewport and the scroll values.\r\n *\r\n * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\r\n * created the same size as your game, but their position and size can be set to anything. This means if you\r\n * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\r\n * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\r\n *\r\n * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\r\n * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\r\n * viewport, and changing the viewport has no impact on the scrolling.\r\n *\r\n * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\r\n * allowing you to filter Game Objects out on a per-Camera basis. The Camera Manager can manage up to 31 unique \r\n * 'Game Object ignore capable' Cameras. Any Cameras beyond 31 that you create will all be given a Camera ID of\r\n * zero, meaning that they cannot be used for Game Object exclusion. This means if you need your Camera to ignore\r\n * Game Objects, make sure it's one of the first 31 created.\r\n *\r\n * A Camera also has built-in special effects including Fade, Flash, Camera Shake, Pan and Zoom.\r\n *\r\n * @class CameraManager\r\n * @memberOf Phaser.Cameras.Scene2D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that owns the Camera Manager plugin.\r\n */\r\nvar CameraManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function CameraManager (scene)\r\n    {\r\n        /**\r\n         * The Scene that owns the Camera Manager plugin.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.CameraManager#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * A reference to the Scene.Systems handler for the Scene that owns the Camera Manager.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.CameraManager#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * All Cameras created by, or added to, this Camera Manager, will have their `roundPixels`\r\n         * property set to match this value. By default it is set to match the value set in the\r\n         * game configuration, but can be changed at any point. Equally, individual cameras can\r\n         * also be changed as needed.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.CameraManager#roundPixels\r\n         * @type {boolean}\r\n         * @since 3.11.0\r\n         */\r\n        this.roundPixels = scene.sys.game.config.roundPixels;\r\n\r\n        /**\r\n         * An Array of the Camera objects being managed by this Camera Manager.\r\n         * The Cameras are updated and rendered in the same order in which they appear in this array.\r\n         * Do not directly add or remove entries to this array. However, you can move the contents\r\n         * around the array should you wish to adjust the display order.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.CameraManager#cameras\r\n         * @type {Phaser.Cameras.Scene2D.Camera[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.cameras = [];\r\n\r\n        /**\r\n         * A handy reference to the 'main' camera. By default this is the first Camera the\r\n         * Camera Manager creates. You can also set it directly, or use the `makeMain` argument\r\n         * in the `add` and `addExisting` methods. It allows you to access it from your game:\r\n         * \r\n         * ```javascript\r\n         * var cam = this.cameras.main;\r\n         * ```\r\n         * \r\n         * Also see the properties `camera1`, `camera2` and so on.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.CameraManager#main\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @since 3.0.0\r\n         */\r\n        this.main;\r\n\r\n        /**\r\n         * This scale affects all cameras. It's used by the Scale Manager.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.CameraManager#baseScale\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.baseScale = 1;\r\n\r\n        scene.sys.events.once('boot', this.boot, this);\r\n        scene.sys.events.on('start', this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        var sys = this.systems;\r\n\r\n        if (sys.settings.cameras)\r\n        {\r\n            //  We have cameras to create\r\n            this.fromJSON(sys.settings.cameras);\r\n        }\r\n        else\r\n        {\r\n            //  Make one\r\n            this.add();\r\n        }\r\n\r\n        this.main = this.cameras[0];\r\n\r\n        this.systems.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (!this.main)\r\n        {\r\n            var sys = this.systems;\r\n\r\n            if (sys.settings.cameras)\r\n            {\r\n                //  We have cameras to create\r\n                this.fromJSON(sys.settings.cameras);\r\n            }\r\n            else\r\n            {\r\n                //  Make one\r\n                this.add();\r\n            }\r\n    \r\n            this.main = this.cameras[0];\r\n        }\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on('update', this.update, this);\r\n        eventEmitter.once('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Adds a new Camera into the Camera Manager. The Camera Manager can support up to 31 different Cameras.\r\n     * \r\n     * Each Camera has its own viewport, which controls the size of the Camera and its position within the canvas.\r\n     * \r\n     * Use the `Camera.scrollX` and `Camera.scrollY` properties to change where the Camera is looking, or the\r\n     * Camera methods such as `centerOn`. Cameras also have built in special effects, such as fade, flash, shake,\r\n     * pan and zoom.\r\n     * \r\n     * By default Cameras are transparent and will render anything that they can see based on their `scrollX`\r\n     * and `scrollY` values. Game Objects can be set to be ignored by a Camera by using the `Camera.ignore` method.\r\n     * \r\n     * The Camera will have its `roundPixels` propery set to whatever `CameraManager.roundPixels` is. You can change\r\n     * it after creation if required.\r\n     * \r\n     * See the Camera class documentation for more details.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [x=0] - The horizontal position of the Camera viewport.\r\n     * @param {integer} [y=0] - The vertical position of the Camera viewport.\r\n     * @param {integer} [width] - The width of the Camera viewport. If not given it'll be the game config size.\r\n     * @param {integer} [height] - The height of the Camera viewport. If not given it'll be the game config size.\r\n     * @param {boolean} [makeMain=false] - Set this Camera as being the 'main' camera. This just makes the property `main` a reference to it.\r\n     * @param {string} [name=''] - The name of the Camera.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The newly created Camera.\r\n     */\r\n    add: function (x, y, width, height, makeMain, name)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = this.scene.sys.game.config.width; }\r\n        if (height === undefined) { height = this.scene.sys.game.config.height; }\r\n        if (makeMain === undefined) { makeMain = false; }\r\n        if (name === undefined) { name = ''; }\r\n\r\n        var camera = new Camera(x, y, width, height);\r\n\r\n        camera.setName(name);\r\n        camera.setScene(this.scene);\r\n        camera.setRoundPixels(this.roundPixels);\r\n\r\n        camera.id = this.getNextID();\r\n\r\n        this.cameras.push(camera);\r\n\r\n        if (makeMain)\r\n        {\r\n            this.main = camera;\r\n        }\r\n\r\n        return camera;\r\n    },\r\n\r\n    /**\r\n     * Adds an existing Camera into the Camera Manager.\r\n     * \r\n     * The Camera should either be a `Phaser.Cameras.Scene2D.Camera` instance, or a class that extends from it.\r\n     * \r\n     * The Camera will have its `roundPixels` propery set to whatever `CameraManager.roundPixels` is. You can change\r\n     * it after addition if required.\r\n     * \r\n     * The Camera will be assigned an ID, which is used for Game Object exclusion and then added to the\r\n     * manager. As long as it doesn't already exist in the manager it will be added then returned.\r\n     * \r\n     * If this method returns `null` then the Camera already exists in this Camera Manager.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#addExisting\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to be added to the Camera Manager.\r\n     * @param {boolean} [makeMain=false] - Set this Camera as being the 'main' camera. This just makes the property `main` a reference to it.\r\n     *\r\n     * @return {?Phaser.Cameras.Scene2D.Camera} The Camera that was added to the Camera Manager, or `null` if it couldn't be added.\r\n     */\r\n    addExisting: function (camera, makeMain)\r\n    {\r\n        if (makeMain === undefined) { makeMain = false; }\r\n\r\n        var index = this.cameras.indexOf(camera);\r\n\r\n        if (index === -1)\r\n        {\r\n            camera.id = this.getNextID();\r\n\r\n            camera.setRoundPixels(this.roundPixels);\r\n\r\n            this.cameras.push(camera);\r\n\r\n            if (makeMain)\r\n            {\r\n                this.main = camera;\r\n            }\r\n    \r\n            return camera;\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Gets the next available Camera ID number.\r\n     * \r\n     * The Camera Manager supports up to 31 unique cameras, after which the ID returned will always be zero.\r\n     * You can create additional cameras beyond 31, but they cannot be used for Game Object exclusion.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#getNextID\r\n     * @private\r\n     * @since 3.11.0\r\n     *\r\n     * @return {number} The next available Camera ID, or 0 if they're all already in use.\r\n     */\r\n    getNextID: function ()\r\n    {\r\n        var cameras = this.cameras;\r\n\r\n        var testID = 1;\r\n\r\n        //  Find the first free camera ID we can use\r\n\r\n        for (var t = 0; t < 32; t++)\r\n        {\r\n            var found = false;\r\n\r\n            for (var i = 0; i < cameras.length; i++)\r\n            {\r\n                var camera = cameras[i];\r\n\r\n                if (camera && camera.id === testID)\r\n                {\r\n                    found = true;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            if (found)\r\n            {\r\n                testID = testID << 1;\r\n            }\r\n            else\r\n            {\r\n                return testID;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    },\r\n\r\n    /**\r\n     * Gets the total number of Cameras in this Camera Manager.\r\n     * \r\n     * If the optional `isVisible` argument is set it will only count Cameras that are currently visible.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#getTotal\r\n     * @since 3.11.0\r\n     * \r\n     * @param {boolean} [isVisible=false] - Set the `true` to only include visible Cameras in the total.\r\n     *\r\n     * @return {integer} The total number of Cameras in this Camera Manager.\r\n     */\r\n    getTotal: function (isVisible)\r\n    {\r\n        if (isVisible === undefined) { isVisible = false; }\r\n\r\n        var total = 0;\r\n\r\n        var cameras = this.cameras;\r\n\r\n        for (var i = 0; i < cameras.length; i++)\r\n        {\r\n            var camera = cameras[i];\r\n\r\n            if (!isVisible || (isVisible && camera.visible))\r\n            {\r\n                total++;\r\n            }\r\n        }\r\n\r\n        return total;\r\n    },\r\n\r\n    /**\r\n     * Populates this Camera Manager based on the given configuration object, or an array of config objects.\r\n     * \r\n     * See the `InputJSONCameraObject` documentation for details of the object structure.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#fromJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(InputJSONCameraObject|InputJSONCameraObject[])} config - A Camera configuration object, or an array of them, to be added to this Camera Manager.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.CameraManager} This Camera Manager instance.\r\n     */\r\n    fromJSON: function (config)\r\n    {\r\n        if (!Array.isArray(config))\r\n        {\r\n            config = [ config ];\r\n        }\r\n\r\n        var gameWidth = this.scene.sys.game.config.width;\r\n        var gameHeight = this.scene.sys.game.config.height;\r\n\r\n        for (var i = 0; i < config.length; i++)\r\n        {\r\n            var cameraConfig = config[i];\r\n\r\n            var x = GetFastValue(cameraConfig, 'x', 0);\r\n            var y = GetFastValue(cameraConfig, 'y', 0);\r\n            var width = GetFastValue(cameraConfig, 'width', gameWidth);\r\n            var height = GetFastValue(cameraConfig, 'height', gameHeight);\r\n\r\n            var camera = this.add(x, y, width, height);\r\n\r\n            //  Direct properties\r\n            camera.name = GetFastValue(cameraConfig, 'name', '');\r\n            camera.zoom = GetFastValue(cameraConfig, 'zoom', 1);\r\n            camera.rotation = GetFastValue(cameraConfig, 'rotation', 0);\r\n            camera.scrollX = GetFastValue(cameraConfig, 'scrollX', 0);\r\n            camera.scrollY = GetFastValue(cameraConfig, 'scrollY', 0);\r\n            camera.roundPixels = GetFastValue(cameraConfig, 'roundPixels', false);\r\n            camera.visible = GetFastValue(cameraConfig, 'visible', true);\r\n\r\n            // Background Color\r\n\r\n            var backgroundColor = GetFastValue(cameraConfig, 'backgroundColor', false);\r\n\r\n            if (backgroundColor)\r\n            {\r\n                camera.setBackgroundColor(backgroundColor);\r\n            }\r\n\r\n            //  Bounds\r\n\r\n            var boundsConfig = GetFastValue(cameraConfig, 'bounds', null);\r\n\r\n            if (boundsConfig)\r\n            {\r\n                var bx = GetFastValue(boundsConfig, 'x', 0);\r\n                var by = GetFastValue(boundsConfig, 'y', 0);\r\n                var bwidth = GetFastValue(boundsConfig, 'width', gameWidth);\r\n                var bheight = GetFastValue(boundsConfig, 'height', gameHeight);\r\n\r\n                camera.setBounds(bx, by, bwidth, bheight);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a Camera based on its name.\r\n     * \r\n     * Camera names are optional and don't have to be set, so this method is only of any use if you\r\n     * have given your Cameras unique names.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#getCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the Camera.\r\n     *\r\n     * @return {?Phaser.Cameras.Scene2D.Camera} The first Camera with a name matching the given string, otherwise `null`.\r\n     */\r\n    getCamera: function (name)\r\n    {\r\n        var cameras = this.cameras;\r\n\r\n        for (var i = 0; i < cameras.length; i++)\r\n        {\r\n            if (cameras[i].name === name)\r\n            {\r\n                return cameras[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of all cameras below the given Pointer.\r\n     * \r\n     * The first camera in the array is the top-most camera in the camera list.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#getCamerasBelowPointer\r\n     * @since 3.10.0\r\n     *\r\n     * @param {Phaser.Input.Pointer} pointer - The Pointer to check against.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera[]} An array of cameras below the Pointer.\r\n     */\r\n    getCamerasBelowPointer: function (pointer)\r\n    {\r\n        var cameras = this.cameras;\r\n\r\n        var x = pointer.x;\r\n        var y = pointer.y;\r\n\r\n        var output = [];\r\n\r\n        for (var i = 0; i < cameras.length; i++)\r\n        {\r\n            var camera = cameras[i];\r\n\r\n            if (camera.visible && camera.inputEnabled && RectangleContains(camera, x, y))\r\n            {\r\n                //  So the top-most camera is at the top of the search array\r\n                output.unshift(camera);\r\n            }\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Removes the given Camera, or an array of Cameras, from this Camera Manager.\r\n     * \r\n     * If found in the Camera Manager it will be immediately removed from the local cameras array.\r\n     * If also currently the 'main' camera, 'main' will be reset to be camera 0.\r\n     * \r\n     * The removed Camera is not destroyed. If you also wish to destroy the Camera, you should call\r\n     * `Camera.destroy` on it, so that it clears all references to the Camera Manager.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Cameras.Scene2D.Camera|Phaser.Cameras.Scene2D.Camera[])} camera - The Camera, or an array of Cameras, to be removed from this Camera Manager.\r\n     * \r\n     * @return {integer} The total number of Cameras removed.\r\n     */\r\n    remove: function (camera)\r\n    {\r\n        if (!Array.isArray(camera))\r\n        {\r\n            camera = [ camera ];\r\n        }\r\n\r\n        var total = 0;\r\n        var cameras = this.cameras;\r\n\r\n        for (var i = 0; i < camera.length; i++)\r\n        {\r\n            var index = cameras.indexOf(camera[i]);\r\n\r\n            if (index !== -1)\r\n            {\r\n                cameras.splice(index, 1);\r\n                total++;\r\n            }\r\n        }\r\n\r\n        if (!this.main)\r\n        {\r\n            this.main = cameras[0];\r\n        }\r\n\r\n        return total;\r\n    },\r\n\r\n    /**\r\n     * The internal render method. This is called automatically by the Scene and should not be invoked directly.\r\n     * \r\n     * It will iterate through all local cameras and render them in turn, as long as they're visible and have\r\n     * an alpha level > 0.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#render\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)} renderer - The Renderer that will render the children to this camera.\r\n     * @param {Phaser.GameObjects.GameObject[]} children - An array of renderable Game Objects.\r\n     * @param {number} interpolation - Interpolation value. Reserved for future use.\r\n     */\r\n    render: function (renderer, children, interpolation)\r\n    {\r\n        var scene = this.scene;\r\n        var cameras = this.cameras;\r\n        var baseScale = this.baseScale;\r\n        var resolution = renderer.config.resolution;\r\n\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            var camera = cameras[i];\r\n\r\n            if (camera.visible && camera.alpha > 0)\r\n            {\r\n                camera.preRender(baseScale, resolution);\r\n\r\n                renderer.render(scene, children, interpolation, camera);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Resets this Camera Manager.\r\n     * \r\n     * This will iterate through all current Cameras, destroying them all, then it will reset the\r\n     * cameras array, reset the ID counter and create 1 new single camera using the default values.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#resetAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The freshly created main Camera.\r\n     */\r\n    resetAll: function ()\r\n    {\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            this.cameras[i].destroy();\r\n        }\r\n\r\n        this.cameras = [];\r\n\r\n        this.main = this.add();\r\n\r\n        return this.main;\r\n    },\r\n\r\n    /**\r\n     * The main update loop. Called automatically when the Scene steps.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#update\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} timestep - The timestep value.\r\n     * @param {number} delta - The delta value since the last frame.\r\n     */\r\n    update: function (timestep, delta)\r\n    {\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            this.cameras[i].update(timestep, delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Resizes all cameras to the given dimensions.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#resize\r\n     * @since 3.2.0\r\n     *\r\n     * @param {number} width - The new width of the camera.\r\n     * @param {number} height - The new height of the camera.\r\n     */\r\n    resize: function (width, height)\r\n    {\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            this.cameras[i].setSize(width, height);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.main = undefined;\r\n\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            this.cameras[i].destroy();\r\n        }\r\n\r\n        this.cameras = [];\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off('update', this.update, this);\r\n        eventEmitter.off('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off('start', this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('CameraManager', CameraManager, 'cameras');\r\n\r\nmodule.exports = CameraManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Camera","Class","GetFastValue","PluginCache","RectangleContains","CameraManager","initialize","scene","systems","sys","roundPixels","game","config","cameras","baseScale","events","once","boot","on","start","settings","fromJSON","add","main","destroy","eventEmitter","update","shutdown","x","y","width","height","makeMain","name","undefined","camera","setName","setScene","setRoundPixels","id","getNextID","push","addExisting","indexOf","index","testID","t","found","i","length","getTotal","isVisible","total","visible","Array","isArray","gameWidth","gameHeight","cameraConfig","zoom","rotation","scrollX","scrollY","backgroundColor","setBackgroundColor","boundsConfig","bx","by","bwidth","bheight","setBounds","getCamera","getCamerasBelowPointer","pointer","output","inputEnabled","unshift","remove","splice","render","renderer","children","interpolation","resolution","alpha","preRender","resetAll","timestep","delta","resize","setSize","off","register"]
}
