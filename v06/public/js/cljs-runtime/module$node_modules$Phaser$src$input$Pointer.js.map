{
"version":3,
"file":"module$node_modules$Phaser$src$input$Pointer.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/Phaser/src/input/Pointer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$input$Pointer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Distance = require('../math/distance/DistanceBetween');\r\nvar SmoothStepInterpolation = require('../math/interpolation/SmoothStepInterpolation');\r\nvar Vector2 = require('../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Pointer object encapsulates both mouse and touch input within Phaser.\r\n *\r\n * By default, Phaser will create 2 pointers for your game to use. If you require more, i.e. for a multi-touch\r\n * game, then use the `InputPlugin.addPointer` method to do so, rather than instantiating this class directly,\r\n * otherwise it won't be managed by the input system.\r\n *\r\n * You can reference the current active pointer via `InputPlugin.activePointer`. You can also use the properties\r\n * `InputPlugin.pointer1` through to `pointer10`, for each pointer you have enabled in your game.\r\n *\r\n * The properties of this object are set by the Input Plugin during processing. This object is then sent in all\r\n * input related events that the Input Plugin emits, so you can reference properties from it directly in your\r\n * callbacks.\r\n *\r\n * @class Pointer\r\n * @memberOf Phaser.Input\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} manager - A reference to the Input Manager.\r\n * @param {integer} id - The internal ID of this Pointer.\r\n */\r\nvar Pointer = new Class({\r\n\r\n    initialize:\r\n\r\n    function Pointer (manager, id)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Pointer#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = manager;\r\n\r\n        /**\r\n         * The internal ID of this Pointer.\r\n         *\r\n         * @name Phaser.Input.Pointer#id\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.id = id;\r\n\r\n        /**\r\n         * The most recent native DOM Event this Pointer has processed.\r\n         *\r\n         * @name Phaser.Input.Pointer#event\r\n         * @type {(TouchEvent|MouseEvent)}\r\n         * @since 3.0.0\r\n         */\r\n        this.event;\r\n\r\n        /**\r\n         * The camera the Pointer interacted with during its last update.\r\n         * \r\n         * A Pointer can only ever interact with one camera at once, which will be the top-most camera\r\n         * in the list should multiple cameras be positioned on-top of each other.\r\n         *\r\n         * @name Phaser.Input.Pointer#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.camera = null;\r\n\r\n        /**\r\n         * 0: No button or un-initialized\r\n         * 1: Left button\r\n         * 2: Right button\r\n         * 4: Wheel button or middle button\r\n         * 8: 4th button (typically the \"Browser Back\" button)\r\n         * 16: 5th button (typically the \"Browser Forward\" button)\r\n         * \r\n         * For a mouse configured for left-handed use, the button actions are reversed.\r\n         * In this case, the values are read from right to left.\r\n         *\r\n         * @name Phaser.Input.Pointer#buttons\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.buttons = 0;\r\n\r\n        /**\r\n         * The position of the Pointer in screen space.\r\n         *\r\n         * @name Phaser.Input.Pointer#position\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.position = new Vector2();\r\n\r\n        /**\r\n         * The previous position of the Pointer in screen space.\r\n         * \r\n         * The old x and y values are stored in here during the InputManager.transformPointer call.\r\n         * \r\n         * You can use it to track how fast the pointer is moving, or to smoothly interpolate between the old and current position.\r\n         * See the `Pointer.getInterpolatedPosition` method to assist in this.\r\n         *\r\n         * @name Phaser.Input.Pointer#prevPosition\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.11.0\r\n         */\r\n        this.prevPosition = new Vector2();\r\n\r\n        /**\r\n         * The x position of this Pointer, translated into the coordinate space of the most recent Camera it interacted with.\r\n         *\r\n         * @name Phaser.Input.Pointer#worldX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.10.0\r\n         */\r\n        this.worldX = 0;\r\n\r\n        /**\r\n         * The y position of this Pointer, translated into the coordinate space of the most recent Camera it interacted with.\r\n         *\r\n         * @name Phaser.Input.Pointer#worldY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.10.0\r\n         */\r\n        this.worldY = 0;\r\n\r\n        /**\r\n         * X coordinate of the Pointer when Button 1 (left button), or Touch, was pressed, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#downX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.downX = 0;\r\n\r\n        /**\r\n         * Y coordinate of the Pointer when Button 1 (left button), or Touch, was pressed, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#downY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.downY = 0;\r\n\r\n        /**\r\n         * Time when Button 1 (left button), or Touch, was pressed, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#downTime\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.downTime = 0;\r\n\r\n        /**\r\n         * X coordinate of the Pointer when Button 1 (left button), or Touch, was released, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#upX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.upX = 0;\r\n\r\n        /**\r\n         * Y coordinate of the Pointer when Button 1 (left button), or Touch, was released, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#upY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.upY = 0;\r\n\r\n        /**\r\n         * Time when Button 1 (left button), or Touch, was released, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#upTime\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.upTime = 0;\r\n\r\n        /**\r\n         * Is the primary button down? (usually button 0, the left mouse button)\r\n         *\r\n         * @name Phaser.Input.Pointer#primaryDown\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.primaryDown = false;\r\n\r\n        /**\r\n         * The Drag State of the Pointer:\r\n         *\r\n         * 0 = Not dragging anything\r\n         * 1 = Being checked if dragging\r\n         * 2 = Dragging something\r\n         *\r\n         * @name Phaser.Input.Pointer#dragState\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.dragState = 0;\r\n\r\n        /**\r\n         * Is _any_ button on this pointer considered as being down?\r\n         *\r\n         * @name Phaser.Input.Pointer#isDown\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.isDown = false;\r\n\r\n        /**\r\n         * A dirty flag for this Pointer, used internally by the Input Plugin.\r\n         *\r\n         * @name Phaser.Input.Pointer#dirty\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.dirty = false;\r\n\r\n        /**\r\n         * Is this Pointer considered as being \"just down\" or not?\r\n         *\r\n         * @name Phaser.Input.Pointer#justDown\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.justDown = false;\r\n\r\n        /**\r\n         * Is this Pointer considered as being \"just up\" or not?\r\n         *\r\n         * @name Phaser.Input.Pointer#justUp\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.justUp = false;\r\n\r\n        /**\r\n         * Is this Pointer considered as being \"just moved\" or not?\r\n         *\r\n         * @name Phaser.Input.Pointer#justMoved\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.justMoved = false;\r\n\r\n        /**\r\n         * Did the previous input event come from a Touch input (true) or Mouse? (false)\r\n         *\r\n         * @name Phaser.Input.Pointer#wasTouch\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.wasTouch = false;\r\n\r\n        /**\r\n         * If the mouse is locked, the horizontal relative movement of the Pointer in pixels since last frame.\r\n         *\r\n         * @name Phaser.Input.Pointer#movementX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.movementX = 0;\r\n\r\n        /**\r\n         * If the mouse is locked, the vertical relative movement of the Pointer in pixels since last frame.\r\n         *\r\n         * @name Phaser.Input.Pointer#movementY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.movementY = 0;\r\n\r\n        /**\r\n         * The identifier property of the Pointer as set by the DOM event when this Pointer is started.\r\n         *\r\n         * @name Phaser.Input.Pointer#identifier\r\n         * @type {number}\r\n         * @since 3.10.0\r\n         */\r\n        this.identifier = 0;\r\n\r\n        /**\r\n         * The pointerId property of the Pointer as set by the DOM event when this Pointer is started.\r\n         * The browser can and will recycle this value.\r\n         *\r\n         * @name Phaser.Input.Pointer#pointerId\r\n         * @type {number}\r\n         * @since 3.10.0\r\n         */\r\n        this.pointerId = null;\r\n\r\n        /**\r\n         * An active Pointer is one that is currently pressed down on the display.\r\n         * A Mouse is always considered as active.\r\n         *\r\n         * @name Phaser.Input.Pointer#active\r\n         * @type {boolean}\r\n         * @since 3.10.0\r\n         */\r\n        this.active = (id === 0) ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Takes a Camera and returns a Vector2 containing the translated position of this Pointer\r\n     * within that Camera. This can be used to convert this Pointers position into camera space.\r\n     *\r\n     * @method Phaser.Input.Pointer#positionToCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to use for the translation.\r\n     * @param {(Phaser.Math.Vector2|object)} [output] - A Vector2-like object in which to store the translated position.\r\n     *\r\n     * @return {(Phaser.Math.Vector2|object)} A Vector2 containing the translated coordinates of this Pointer, based on the given camera.\r\n     */\r\n    positionToCamera: function (camera, output)\r\n    {\r\n        return camera.getWorldPoint(this.x, this.y, output);\r\n    },\r\n\r\n    /**\r\n     * Resets the temporal properties of this Pointer.\r\n     * Called automatically by the Input Plugin each update.\r\n     *\r\n     * @method Phaser.Input.Pointer#reset\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.dirty = false;\r\n\r\n        this.justDown = false;\r\n        this.justUp = false;\r\n        this.justMoved = false;\r\n\r\n        this.movementX = 0;\r\n        this.movementY = 0;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Mouse Up Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#up\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MouseEvent} event - The Mouse Event to process.\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     */\r\n    up: function (event, time)\r\n    {\r\n        if (event.buttons)\r\n        {\r\n            this.buttons = event.buttons;\r\n        }\r\n\r\n        this.event = event;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY);\r\n\r\n        //  0: Main button pressed, usually the left button or the un-initialized state\r\n        if (event.button === 0)\r\n        {\r\n            this.primaryDown = false;\r\n            this.upX = this.x;\r\n            this.upY = this.y;\r\n            this.upTime = time;\r\n        }\r\n\r\n        this.justUp = true;\r\n        this.isDown = false;\r\n\r\n        this.dirty = true;\r\n\r\n        this.wasTouch = false;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Mouse Down Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#down\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MouseEvent} event - The Mouse Event to process.\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     */\r\n    down: function (event, time)\r\n    {\r\n        if (event.buttons)\r\n        {\r\n            this.buttons = event.buttons;\r\n        }\r\n\r\n        this.event = event;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY);\r\n\r\n        //  0: Main button pressed, usually the left button or the un-initialized state\r\n        if (event.button === 0)\r\n        {\r\n            this.primaryDown = true;\r\n            this.downX = this.x;\r\n            this.downY = this.y;\r\n            this.downTime = time;\r\n        }\r\n\r\n        this.justDown = true;\r\n        this.isDown = true;\r\n\r\n        this.dirty = true;\r\n\r\n        this.wasTouch = false;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Mouse Move Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#move\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MouseEvent} event - The Mouse Event to process.\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     */\r\n    move: function (event)\r\n    {\r\n        if (event.buttons)\r\n        {\r\n            this.buttons = event.buttons;\r\n        }\r\n\r\n        this.event = event;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY);\r\n\r\n        if (this.manager.mouse.locked)\r\n        {\r\n            // Multiple DOM events may occur within one frame, but only one Phaser event will fire\r\n            this.movementX += event.movementX || event.mozMovementX || event.webkitMovementX || 0;\r\n            this.movementY += event.movementY || event.mozMovementY || event.webkitMovementY || 0;\r\n        }\r\n\r\n        this.justMoved = true;\r\n\r\n        this.dirty = true;\r\n\r\n        this.wasTouch = false;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Touch Start Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#touchstart\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {TouchEvent} event - The Touch Event to process.\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     */\r\n    touchstart: function (event, time)\r\n    {\r\n        if (event['pointerId'])\r\n        {\r\n            this.pointerId = event.pointerId;\r\n        }\r\n\r\n        this.identifier = event.identifier;\r\n        this.target = event.target;\r\n        this.active = true;\r\n\r\n        this.buttons = 1;\r\n\r\n        this.event = event;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY);\r\n\r\n        this.primaryDown = true;\r\n        this.downX = this.x;\r\n        this.downY = this.y;\r\n        this.downTime = time;\r\n\r\n        this.justDown = true;\r\n        this.isDown = true;\r\n\r\n        this.dirty = true;\r\n\r\n        this.wasTouch = true;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Touch Move Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#touchmove\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {TouchEvent} event - The Touch Event to process.\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     */\r\n    touchmove: function (event)\r\n    {\r\n        this.event = event;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY);\r\n\r\n        this.justMoved = true;\r\n\r\n        this.dirty = true;\r\n\r\n        this.wasTouch = true;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Touch End Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#touchend\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {TouchEvent} event - The Touch Event to process.\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     */\r\n    touchend: function (event, time)\r\n    {\r\n        this.buttons = 0;\r\n\r\n        this.event = event;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY);\r\n\r\n        this.primaryDown = false;\r\n        this.upX = this.x;\r\n        this.upY = this.y;\r\n        this.upTime = time;\r\n\r\n        this.justUp = true;\r\n        this.isDown = false;\r\n\r\n        this.dirty = true;\r\n\r\n        this.wasTouch = true;\r\n        \r\n        this.active = false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if any buttons are being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#noButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if no buttons are being held down.\r\n     */\r\n    noButtonDown: function ()\r\n    {\r\n        return (this.buttons === 0);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the left button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#leftButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the left button is being held down.\r\n     */\r\n    leftButtonDown: function ()\r\n    {\r\n        return (this.buttons & 1);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the right button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#rightButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the right button is being held down.\r\n     */\r\n    rightButtonDown: function ()\r\n    {\r\n        return (this.buttons & 2);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the middle button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#middleButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the middle button is being held down.\r\n     */\r\n    middleButtonDown: function ()\r\n    {\r\n        return (this.buttons & 4);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the back button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#backButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the back button is being held down.\r\n     */\r\n    backButtonDown: function ()\r\n    {\r\n        return (this.buttons & 8);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the forward button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#forwardButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the forward button is being held down.\r\n     */\r\n    forwardButtonDown: function ()\r\n    {\r\n        return (this.buttons & 16);\r\n    },\r\n\r\n    /**\r\n     * Returns the distance between the Pointer's current position and where it was\r\n     * first pressed down (the `downX` and `downY` properties)\r\n     *\r\n     * @method Phaser.Input.Pointer#getDistance\r\n     * @since 3.13.0\r\n     *\r\n     * @return {number} The distance the Pointer has moved since being pressed down.\r\n     */\r\n    getDistance: function ()\r\n    {\r\n        return Distance(this.downX, this.downY, this.x, this.y);\r\n    },\r\n\r\n    /**\r\n     * Takes the previous and current Pointer positions and then generates an array of interpolated values between\r\n     * the two. The array will be populated up to the size of the `steps` argument.\r\n     * \r\n     * ```javaScript\r\n     * var points = pointer.getInterpolatedPosition(4);\r\n     * \r\n     * // points[0] = { x: 0, y: 0 }\r\n     * // points[1] = { x: 2, y: 1 }\r\n     * // points[2] = { x: 3, y: 2 }\r\n     * // points[3] = { x: 6, y: 3 }\r\n     * ```\r\n     * \r\n     * Use this if you need to get smoothed values between the previous and current pointer positions. DOM pointer\r\n     * events can often fire faster than the main browser loop, and this will help you avoid janky movement\r\n     * especially if you have an object following a Pointer.\r\n     * \r\n     * Note that if you provide an output array it will only be populated up to the number of steps provided.\r\n     * It will not clear any previous data that may have existed beyond the range of the steps count.\r\n     * \r\n     * Internally it uses the Smooth Step interpolation calculation.\r\n     *\r\n     * @method Phaser.Input.Pointer#getInterpolatedPosition\r\n     * @since 3.11.0\r\n     * \r\n     * @param {integer} [steps=10] - The number of interpolation steps to use.\r\n     * @param {array} [out] - An array to store the results in. If not provided a new one will be created.\r\n     * \r\n     * @return {array} An array of interpolated values.\r\n     */\r\n    getInterpolatedPosition: function (steps, out)\r\n    {\r\n        if (steps === undefined) { steps = 10; }\r\n        if (out === undefined) { out = []; }\r\n\r\n        var prevX = this.prevPosition.x;\r\n        var prevY = this.prevPosition.y;\r\n\r\n        var curX = this.position.x;\r\n        var curY = this.position.y;\r\n\r\n        for (var i = 0; i < steps; i++)\r\n        {\r\n            var t = (1 / steps) * i;\r\n\r\n            out[i] = { x: SmoothStepInterpolation(t, prevX, curX), y: SmoothStepInterpolation(t, prevY, curY) };\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Pointer instance and resets its external references.\r\n     *\r\n     * @method Phaser.Input.Pointer#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.camera = null;\r\n        this.manager = null;\r\n        this.position = null;\r\n    },\r\n\r\n    /**\r\n     * The x position of this Pointer.\r\n     * The value is in screen space.\r\n     * See `worldX` to get a camera converted position.\r\n     *\r\n     * @name Phaser.Input.Pointer#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.x = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y position of this Pointer.\r\n     * The value is in screen space.\r\n     * See `worldY` to get a camera converted position.\r\n     *\r\n     * @name Phaser.Input.Pointer#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.y = value;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Pointer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Distance","SmoothStepInterpolation","Vector2","Pointer","initialize","manager","id","camera","buttons","position","prevPosition","upTime","upY","upX","downTime","downY","downX","worldY","worldX","primaryDown","dragState","wasTouch","justMoved","justUp","justDown","dirty","isDown","identifier","movementY","movementX","pointerId","active","positionToCamera","output","getWorldPoint","x","y","reset","up","event","time","transformPointer","pageX","pageY","button","down","move","mouse","locked","mozMovementX","webkitMovementX","mozMovementY","webkitMovementY","touchstart","target","touchmove","touchend","noButtonDown","leftButtonDown","rightButtonDown","middleButtonDown","backButtonDown","forwardButtonDown","getDistance","getInterpolatedPosition","steps","out","undefined","prevX","prevY","curX","curY","i","t","destroy","get","set","value"]
}
