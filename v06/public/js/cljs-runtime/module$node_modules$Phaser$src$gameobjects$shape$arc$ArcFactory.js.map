{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$arc$ArcFactory.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,gEAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO5H,IAAIC,IAAMH,OAAA,CAAQ,0DAAR,CACNI,OAAAA,CAAoBJ,OAAA,CAAQ,8DAAR,CAiCxBI,OAAAC,SAAA,CAA2B,KAA3B,CAAkC,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,MAAP,CAAeC,UAAf,CAA2BC,QAA3B,CAAqCC,aAArC,CAAoDC,SAApD,CAA+DC,SAA/D,CAC3C,CACI,MAAO,KAAAC,YAAAC,IAAA,CAAqB,IAAIZ,GAAJ,CAAQ,IAAAa,MAAR,CAAoBV,CAApB,CAAuBC,CAAvB,CAA0BC,MAA1B,CAAkCC,UAAlC,CAA8CC,QAA9C,CAAwDC,aAAxD,CAAuEC,SAAvE,CAAkFC,SAAlF,CAArB,CADX,CADA,CAuBAT,OAAAC,SAAA,CAA2B,QAA3B;AAAqC,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,MAAP,CAAeI,SAAf,CAA0BC,SAA1B,CAC9C,CACI,MAAO,KAAAC,YAAAC,IAAA,CAAqB,IAAIZ,GAAJ,CAAQ,IAAAa,MAAR,CAAoBV,CAApB,CAAuBC,CAAvB,CAA0BC,MAA1B,CAAkC,CAAlC,CAAqC,GAArC,CAA0C,CAAA,CAA1C,CAAiDI,SAAjD,CAA4DC,SAA5D,CAArB,CADX,CADA,CAhE4H;",
"sources":["node_modules/Phaser/src/gameobjects/shape/arc/ArcFactory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$arc$ArcFactory\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Arc = require('./Arc');\r\nvar GameObjectFactory = require('../../GameObjectFactory');\r\n\r\n/**\r\n * Creates a new Arc Shape Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the Arc Game Object has been built into Phaser.\r\n * \r\n * The Arc Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * When it renders it displays an arc shape. You can control the start and end angles of the arc,\r\n * as well as if the angles are winding clockwise or anti-clockwise. With the default settings\r\n * it renders as a complete circle. By changing the angles you can create other arc shapes,\r\n * such as half-circles.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#arc\r\n * @since 3.13.0\r\n *\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [radius=128] - The radius of the arc.\r\n * @param {integer} [startAngle=0] - The start angle of the arc, in degrees.\r\n * @param {integer} [endAngle=360] - The end angle of the arc, in degrees.\r\n * @param {boolean} [anticlockwise=false] - The winding order of the start and end angles.\r\n * @param {number} [fillColor] - The color the arc will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the arc will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n *\r\n * @return {Phaser.GameObjects.Arc} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('arc', function (x, y, radius, startAngle, endAngle, anticlockwise, fillColor, fillAlpha)\r\n{\r\n    return this.displayList.add(new Arc(this.scene, x, y, radius, startAngle, endAngle, anticlockwise, fillColor, fillAlpha));\r\n});\r\n\r\n/**\r\n * Creates a new Circle Shape Game Object and adds it to the Scene.\r\n * \r\n * A Circle is an Arc with no defined start and end angle, making it render as a complete circle.\r\n *\r\n * Note: This method will only be available if the Arc Game Object has been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#circle\r\n * @since 3.13.0\r\n *\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [radius=128] - The radius of the circle.\r\n * @param {number} [fillColor] - The color the circle will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the circle will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n *\r\n * @return {Phaser.GameObjects.Arc} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('circle', function (x, y, radius, fillColor, fillAlpha)\r\n{\r\n    return this.displayList.add(new Arc(this.scene, x, y, radius, 0, 360, false, fillColor, fillAlpha));\r\n});\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Arc","GameObjectFactory","register","x","y","radius","startAngle","endAngle","anticlockwise","fillColor","fillAlpha","displayList","add","scene"]
}
