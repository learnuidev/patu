{
"version":3,
"file":"module$node_modules$Phaser$src$display$color$Interpolate.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOrH,IAAIC,OAASH,OAAA,CAAQ,4CAAR,CAAb,CA0BII,WAAaA,QAAS,CAACC,EAAD,CAAKC,EAAL,CAASC,EAAT,CAAaC,EAAb,CAAiBC,EAAjB,CAAqBC,EAArB,CAAyBC,MAAzB,CAAiCC,KAAjC,CAC1B,CACmBC,IAAAA,EAAf,GAAIF,MAAJ,GAA4BA,MAA5B,CAAqC,GAArC,CACcE,KAAAA,EAAd,GAAID,KAAJ,GAA2BA,KAA3B,CAAmC,CAAnC,CAEIE,OAAAA,CAAIF,KAAJE,CAAYH,MAEhB,OAAO,CACHI,EAAGZ,MAAA,CAAOE,EAAP,CAAWG,EAAX,CAAeM,MAAf,CADA,CAEHE,EAAGb,MAAA,CAAOG,EAAP,CAAWG,EAAX,CAAeK,MAAf,CAFA,CAGHG,EAAGd,MAAA,CAAOI,EAAP,CAAWG,EAAX,CAAeI,MAAf,CAHA,CANX,CAyDAb,OAAAC,QAAA,CAAiB,CAEbE,WAAYA,UAFC,CAGbc,aAXeA,QAAS,CAACC,KAAD,CAAQJ,CAAR,CAAWC,CAAX,CAAcC,CAAd,CAAiBN,MAAjB,CAAyBC,KAAzB,CAC5B,CACmBC,IAAAA,EAAf,GAAIF,MAAJ,GAA4BA,MAA5B,CAAqC,GAArC,CACcE,KAAAA,EAAd;AAAID,KAAJ,GAA2BA,KAA3B,CAAmC,CAAnC,CAEA,OAAOR,WAAA,CAAWe,KAAAJ,EAAX,CAAoBI,KAAAH,EAApB,CAA6BG,KAAAF,EAA7B,CAAsCF,CAAtC,CAAyCC,CAAzC,CAA4CC,CAA5C,CAA+CN,MAA/C,CAAuDC,KAAvD,CAJX,CAOiB,CAIbQ,eAnCiBA,QAAS,CAACC,MAAD,CAASC,MAAT,CAAiBX,MAAjB,CAAyBC,KAAzB,CAC9B,CACmBC,IAAAA,EAAf,GAAIF,MAAJ,GAA4BA,MAA5B,CAAqC,GAArC,CACcE,KAAAA,EAAd,GAAID,KAAJ,GAA2BA,KAA3B,CAAmC,CAAnC,CAEA,OAAOR,WAAA,CAAWiB,MAAAN,EAAX,CAAqBM,MAAAL,EAArB,CAA+BK,MAAAJ,EAA/B,CAAyCK,MAAAP,EAAzC,CAAmDO,MAAAN,EAAnD,CAA6DM,MAAAL,EAA7D,CAAuEN,MAAvE,CAA+EC,KAA/E,CAJX,CA8BiB,CA3FoG;",
"sources":["node_modules/Phaser/src/display/color/Interpolate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$display$color$Interpolate\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Linear = require('../../math/Linear');\r\n\r\n/**\r\n * Interpolates color values\r\n *\r\n * @namespace Phaser.Display.Color.Interpolate\r\n * @since 3.0.0\r\n */\r\n\r\n/**\r\n * Interpolates between the two given color ranges over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.RGBWithRGB\r\n * @since 3.0.0\r\n *\r\n * @param {number} r1 - Red value.\r\n * @param {number} g1 - Blue value.\r\n * @param {number} b1 - Green value.\r\n * @param {number} r2 - Red value.\r\n * @param {number} g2 - Blue value.\r\n * @param {number} b2 - Green value.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {ColorObject} An object containing the interpolated color values.\r\n */\r\nvar RGBWithRGB = function (r1, g1, b1, r2, g2, b2, length, index)\r\n{\r\n    if (length === undefined) { length = 100; }\r\n    if (index === undefined) { index = 0; }\r\n\r\n    var t = index / length;\r\n\r\n    return {\r\n        r: Linear(r1, r2, t),\r\n        g: Linear(g1, g2, t),\r\n        b: Linear(b1, b2, t)\r\n    };\r\n};\r\n\r\n/**\r\n * Interpolates between the two given color objects over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.ColorWithColor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Display.Color} color1 - The first Color object.\r\n * @param {Phaser.Display.Color} color2 - The second Color object.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {ColorObject} An object containing the interpolated color values.\r\n */\r\nvar ColorWithColor = function (color1, color2, length, index)\r\n{\r\n    if (length === undefined) { length = 100; }\r\n    if (index === undefined) { index = 0; }\r\n\r\n    return RGBWithRGB(color1.r, color1.g, color1.b, color2.r, color2.g, color2.b, length, index);\r\n};\r\n\r\n/**\r\n * Interpolates between the Color object and color values over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.ColorWithRGB\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Display.Color} color1 - The first Color object.\r\n * @param {number} r - Red value.\r\n * @param {number} g - Blue value.\r\n * @param {number} b - Green value.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {ColorObject} An object containing the interpolated color values.\r\n */\r\nvar ColorWithRGB = function (color, r, g, b, length, index)\r\n{\r\n    if (length === undefined) { length = 100; }\r\n    if (index === undefined) { index = 0; }\r\n\r\n    return RGBWithRGB(color.r, color.g, color.b, r, g, b, length, index);\r\n};\r\n\r\nmodule.exports = {\r\n\r\n    RGBWithRGB: RGBWithRGB,\r\n    ColorWithRGB: ColorWithRGB,\r\n    ColorWithColor: ColorWithColor\r\n\r\n};\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Linear","RGBWithRGB","r1","g1","b1","r2","g2","b2","length","index","undefined","t","r","g","b","ColorWithRGB","color","ColorWithColor","color1","color2"]
}
