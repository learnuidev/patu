{
"version":3,
"file":"module$node_modules$Phaser$src$math$Linear.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwBvGD,MAAAC,QAAA,CALaC,QAAS,CAACC,EAAD,CAAKC,EAAL,CAASC,CAAT,CACtB,CACI,OAAQD,EAAR,CAAaD,EAAb,EAAmBE,CAAnB,CAAuBF,EAD3B,CApBuG;",
"sources":["node_modules/Phaser/src/math/Linear.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$Linear\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Calculates a linear (interpolation) value over t.\r\n *\r\n * @function Phaser.Math.Linear\r\n * @since 3.0.0\r\n *\r\n * @param {number} p0 - The first point.\r\n * @param {number} p1 - The second point.\r\n * @param {number} t - The percentage between p0 and p1 to return, represented as a number between 0 and 1.\r\n *\r\n * @return {number} The step t% of the way between p0 and p1.\r\n */\r\nvar Linear = function (p0, p1, t)\r\n{\r\n    return (p1 - p0) * t + p0;\r\n};\r\n\r\nmodule.exports = Linear;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Linear","p0","p1","t"]
}
