{
"version":3,
"file":"module$node_modules$Phaser$src$cameras$controls$FixedKeyControl.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/cameras/controls/FixedKeyControl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$cameras$controls$FixedKeyControl\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetValue = require('../../utils/object/GetValue');\r\n\r\n//  var camControl = new CameraControl({\r\n//      camera: this.cameras.main,\r\n//      left: cursors.left,\r\n//      right: cursors.right,\r\n//      speed: float OR { x: 0, y: 0 }\r\n//  })\r\n\r\n/**\r\n * @typedef {object} FixedKeyControlConfig\r\n *\r\n * @property {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera that this Control will update.\r\n * @property {Phaser.Input.Keyboard.Key} [left] - The Key to be pressed that will move the Camera left.\r\n * @property {Phaser.Input.Keyboard.Key} [right] - The Key to be pressed that will move the Camera right.\r\n * @property {Phaser.Input.Keyboard.Key} [up] - The Key to be pressed that will move the Camera up.\r\n * @property {Phaser.Input.Keyboard.Key} [down] - The Key to be pressed that will move the Camera down.\r\n * @property {Phaser.Input.Keyboard.Key} [zoomIn] - The Key to be pressed that will zoom the Camera in.\r\n * @property {Phaser.Input.Keyboard.Key} [zoomOut] - The Key to be pressed that will zoom the Camera out.\r\n * @property {number} [zoomSpeed=0.01] - The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.\r\n * @property {(number|{x:number,y:number})} [speed=0] - The horizontal and vertical speed the camera will move.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class FixedKeyControl\r\n * @memberOf Phaser.Cameras.Controls\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {FixedKeyControlConfig} config - [description]\r\n */\r\nvar FixedKeyControl = new Class({\r\n\r\n    initialize:\r\n\r\n    function FixedKeyControl (config)\r\n    {\r\n        /**\r\n         * The Camera that this Control will update.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#camera\r\n         * @type {?Phaser.Cameras.Scene2D.Camera}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.camera = GetValue(config, 'camera', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera left.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#left\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.left = GetValue(config, 'left', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera right.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#right\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.right = GetValue(config, 'right', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera up.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#up\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.up = GetValue(config, 'up', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera down.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#down\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.down = GetValue(config, 'down', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will zoom the Camera in.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#zoomIn\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.zoomIn = GetValue(config, 'zoomIn', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will zoom the Camera out.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#zoomOut\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.zoomOut = GetValue(config, 'zoomOut', null);\r\n\r\n        /**\r\n         * The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#zoomSpeed\r\n         * @type {number}\r\n         * @default 0.01\r\n         * @since 3.0.0\r\n         */\r\n        this.zoomSpeed = GetValue(config, 'zoomSpeed', 0.01);\r\n\r\n        /**\r\n         * The horizontal speed the camera will move.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#speedX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.speedX = 0;\r\n\r\n        /**\r\n         * The vertical speed the camera will move.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#speedY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.speedY = 0;\r\n\r\n        var speed = GetValue(config, 'speed', null);\r\n\r\n        if (typeof speed === 'number')\r\n        {\r\n            this.speedX = speed;\r\n            this.speedY = speed;\r\n        }\r\n        else\r\n        {\r\n            this.speedX = GetValue(config, 'speed.x', 0);\r\n            this.speedY = GetValue(config, 'speed.y', 0);\r\n        }\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#_zoom\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._zoom = 0;\r\n\r\n        /**\r\n         * A flag controlling if the Controls will update the Camera or not.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#active\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.active = (this.camera !== null);\r\n    },\r\n\r\n    /**\r\n     * Starts the Key Control running, providing it has been linked to a camera.\r\n     *\r\n     * @method Phaser.Cameras.Controls.FixedKeyControl#start\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Controls.FixedKeyControl} This Key Control instance.\r\n     */\r\n    start: function ()\r\n    {\r\n        this.active = (this.camera !== null);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stops this Key Control from running. Call `start` to start it again.\r\n     *\r\n     * @method Phaser.Cameras.Controls.FixedKeyControl#stop\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Controls.FixedKeyControl} This Key Control instance.\r\n     */\r\n    stop: function ()\r\n    {\r\n        this.active = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Binds this Key Control to a camera.\r\n     *\r\n     * @method Phaser.Cameras.Controls.FixedKeyControl#setCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera to bind this Key Control to.\r\n     *\r\n     * @return {Phaser.Cameras.Controls.FixedKeyControl} This Key Control instance.\r\n     */\r\n    setCamera: function (camera)\r\n    {\r\n        this.camera = camera;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Controls.FixedKeyControl#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    update: function (delta)\r\n    {\r\n        if (!this.active)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (delta === undefined) { delta = 1; }\r\n\r\n        var cam = this.camera;\r\n\r\n        if (this.up && this.up.isDown)\r\n        {\r\n            cam.scrollY -= ((this.speedY * delta) | 0);\r\n        }\r\n        else if (this.down && this.down.isDown)\r\n        {\r\n            cam.scrollY += ((this.speedY * delta) | 0);\r\n        }\r\n\r\n        if (this.left && this.left.isDown)\r\n        {\r\n            cam.scrollX -= ((this.speedX * delta) | 0);\r\n        }\r\n        else if (this.right && this.right.isDown)\r\n        {\r\n            cam.scrollX += ((this.speedX * delta) | 0);\r\n        }\r\n\r\n        //  Camera zoom\r\n\r\n        if (this.zoomIn && this.zoomIn.isDown)\r\n        {\r\n            cam.zoom -= this.zoomSpeed;\r\n\r\n            if (cam.zoom < 0.1)\r\n            {\r\n                cam.zoom = 0.1;\r\n            }\r\n        }\r\n        else if (this.zoomOut && this.zoomOut.isDown)\r\n        {\r\n            cam.zoom += this.zoomSpeed;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Key Control.\r\n     *\r\n     * @method Phaser.Cameras.Controls.FixedKeyControl#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.camera = null;\r\n\r\n        this.left = null;\r\n        this.right = null;\r\n        this.up = null;\r\n        this.down = null;\r\n\r\n        this.zoomIn = null;\r\n        this.zoomOut = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = FixedKeyControl;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","GetValue","FixedKeyControl","initialize","config","camera","left","right","up","down","zoomIn","zoomOut","zoomSpeed","speedY","speedX","speed","_zoom","active","start","stop","setCamera","update","delta","undefined","cam","isDown","scrollY","scrollX","zoom","destroy"]
}
