{
"version":3,
"file":"module$node_modules$Phaser$src$plugins$PluginManager.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/Phaser/src/plugins/PluginManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$plugins$PluginManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar FileTypesManager = require('../loader/FileTypesManager');\r\nvar GameObjectCreator = require('../gameobjects/GameObjectCreator');\r\nvar GameObjectFactory = require('../gameobjects/GameObjectFactory');\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\nvar PluginCache = require('./PluginCache');\r\nvar Remove = require('../utils/array/Remove');\r\n\r\n/**\r\n * @typedef {object} GlobalPlugin\r\n *\r\n * @property {string} key - The unique name of this plugin within the plugin cache.\r\n * @property {function} plugin - An instance of the plugin.\r\n * @property {boolean} [active] - Is the plugin active or not?\r\n * @property {string} [mapping] - If this plugin is to be injected into the Scene Systems, this is the property key map used.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The PluginManager is responsible for installing and adding plugins to Phaser.\r\n *\r\n * It is a global system and therefore belongs to the Game instance, not a specific Scene.\r\n *\r\n * It works in conjunction with the PluginCache. Core internal plugins automatically register themselves \r\n * with the Cache, but it's the Plugin Manager that is responsible for injecting them into the Scenes.\r\n *\r\n * There are two types of plugin:\r\n *\r\n * 1) A Global Plugin\r\n * 2) A Scene Plugin\r\n *\r\n * A Global Plugin is a plugin that lives within the Plugin Manager rather than a Scene. You can get\r\n * access to it by calling `PluginManager.get` and providing a key. Any Scene that requests a plugin in\r\n * this way will all get access to the same plugin instance, allowing you to use a single plugin across\r\n * multiple Scenes.\r\n *\r\n * A Scene Plugin is a plugin dedicated to running within a Scene. These are different to Global Plugins\r\n * in that their instances do not live within the Plugin Manager, but within the Scene Systems class instead.\r\n * And that every Scene created is given its own unique instance of a Scene Plugin. Examples of core Scene\r\n * Plugins include the Input Plugin, the Tween Plugin and the physics Plugins.\r\n *\r\n * You can add a plugin to Phaser in three different ways:\r\n *\r\n * 1) Preload it\r\n * 2) Include it in your source code and install it via the Game Config\r\n * 3) Include it in your source code and install it within a Scene\r\n *\r\n * For examples of all of these approaches please see the Phaser 3 Examples Repo `plugins` folder.\r\n *\r\n * For information on creating your own plugin please see the Phaser 3 Plugin Template.\r\n *\r\n * @class PluginManager\r\n * @memberOf Phaser.Plugins\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - The game instance that owns this Plugin Manager.\r\n */\r\nvar PluginManager = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function PluginManager (game)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * The game instance that owns this Plugin Manager.\r\n         *\r\n         * @name Phaser.Plugins.PluginManager#game\r\n         * @type {Phaser.Game}\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * The global plugins currently running and managed by this Plugin Manager.\r\n         * A plugin must have been started at least once in order to appear in this list.\r\n         *\r\n         * @name Phaser.Plugins.PluginManager#plugins\r\n         * @type {GlobalPlugin[]}\r\n         * @since 3.8.0\r\n         */\r\n        this.plugins = [];\r\n\r\n        /**\r\n         * A list of plugin keys that should be installed into Scenes as well as the Core Plugins.\r\n         *\r\n         * @name Phaser.Plugins.PluginManager#scenePlugins\r\n         * @type {string[]}\r\n         * @since 3.8.0\r\n         */\r\n        this.scenePlugins = [];\r\n\r\n        /**\r\n         * A temporary list of plugins to install when the game has booted.\r\n         *\r\n         * @name Phaser.Plugins.PluginManager#_pendingGlobal\r\n         * @private\r\n         * @type {array}\r\n         * @since 3.8.0\r\n         */\r\n        this._pendingGlobal = [];\r\n\r\n        /**\r\n         * A temporary list of scene plugins to install when the game has booted.\r\n         *\r\n         * @name Phaser.Plugins.PluginManager#_pendingScene\r\n         * @private\r\n         * @type {array}\r\n         * @since 3.8.0\r\n         */\r\n        this._pendingScene = [];\r\n\r\n        if (game.isBooted)\r\n        {\r\n            this.boot();\r\n        }\r\n        else\r\n        {\r\n            game.events.once('boot', this.boot, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Run once the game has booted and installs all of the plugins configured in the Game Config.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#boot\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var i;\r\n        var entry;\r\n        var key;\r\n        var plugin;\r\n        var start;\r\n        var mapping;\r\n        var data;\r\n        var config = this.game.config;\r\n\r\n        //  Any plugins to install?\r\n        var list = config.installGlobalPlugins;\r\n\r\n        //  Any plugins added outside of the game config, but before the game booted?\r\n        list = list.concat(this._pendingGlobal);\r\n\r\n        for (i = 0; i < list.length; i++)\r\n        {\r\n            entry = list[i];\r\n\r\n            // { key: 'TestPlugin', plugin: TestPlugin, start: true, mapping: 'test', data: { msg: 'The plugin is alive' } }\r\n\r\n            key = GetFastValue(entry, 'key', null);\r\n            plugin = GetFastValue(entry, 'plugin', null);\r\n            start = GetFastValue(entry, 'start', false);\r\n            mapping = GetFastValue(entry, 'mapping', null);\r\n            data = GetFastValue(entry, 'data', null);\r\n\r\n            if (key && plugin)\r\n            {\r\n                this.install(key, plugin, start, mapping, data);\r\n            }\r\n        }\r\n\r\n        //  Any scene plugins to install?\r\n        list = config.installScenePlugins;\r\n\r\n        //  Any plugins added outside of the game config, but before the game booted?\r\n        list = list.concat(this._pendingScene);\r\n\r\n        for (i = 0; i < list.length; i++)\r\n        {\r\n            entry = list[i];\r\n\r\n            // { key: 'moveSpritePlugin', plugin: MoveSpritePlugin, , mapping: 'move' }\r\n\r\n            key = GetFastValue(entry, 'key', null);\r\n            plugin = GetFastValue(entry, 'plugin', null);\r\n            mapping = GetFastValue(entry, 'mapping', null);\r\n\r\n            if (key && plugin)\r\n            {\r\n                this.installScenePlugin(key, plugin, mapping);\r\n            }\r\n        }\r\n\r\n        this._pendingGlobal = [];\r\n        this._pendingScene = [];\r\n\r\n        this.game.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * Called by the Scene Systems class. Tells the plugin manager to install all Scene plugins into it.\r\n     *\r\n     * First it will install global references, i.e. references from the Game systems into the Scene Systems (and Scene if mapped.)\r\n     * Then it will install Core Scene Plugins followed by Scene Plugins registered with the PluginManager.\r\n     * Finally it will install any references to Global Plugins that have a Scene mapping property into the Scene itself.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#addToScene\r\n     * @protected\r\n     * @since 3.8.0\r\n     *\r\n     * @param {Phaser.Scenes.Systems} sys - The Scene Systems class to install all the plugins in to.\r\n     * @param {array} globalPlugins - An array of global plugins to install.\r\n     * @param {array} scenePlugins - An array of scene plugins to install.\r\n     */\r\n    addToScene: function (sys, globalPlugins, scenePlugins)\r\n    {\r\n        var i;\r\n        var pluginKey;\r\n        var pluginList;\r\n        var game = this.game;\r\n        var scene = sys.scene;\r\n        var map = sys.settings.map;\r\n        var isBooted = sys.settings.isBooted;\r\n\r\n        //  Reference the GlobalPlugins from Game into Scene.Systems\r\n        for (i = 0; i < globalPlugins.length; i++)\r\n        {\r\n            pluginKey = globalPlugins[i];\r\n           \r\n            if (game[pluginKey])\r\n            {\r\n                sys[pluginKey] = game[pluginKey];\r\n\r\n                //  Scene level injection\r\n                if (map.hasOwnProperty(pluginKey))\r\n                {\r\n                    scene[map[pluginKey]] = sys[pluginKey];\r\n                }\r\n            }\r\n            else if (pluginKey === 'game' && map.hasOwnProperty(pluginKey))\r\n            {\r\n                scene[map[pluginKey]] = game;\r\n            }\r\n        }\r\n\r\n        for (var s = 0; s < scenePlugins.length; s++)\r\n        {\r\n            pluginList = scenePlugins[s];\r\n\r\n            for (i = 0; i < pluginList.length; i++)\r\n            {\r\n                pluginKey = pluginList[i];\r\n\r\n                if (!PluginCache.hasCore(pluginKey))\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                var source = PluginCache.getCore(pluginKey);\r\n\r\n                var plugin = new source.plugin(scene, this);\r\n                \r\n                sys[source.mapping] = plugin;\r\n\r\n                //  Scene level injection\r\n                if (source.custom)\r\n                {\r\n                    scene[source.mapping] = plugin;\r\n                }\r\n                else if (map.hasOwnProperty(source.mapping))\r\n                {\r\n                    scene[map[source.mapping]] = plugin;\r\n                }\r\n\r\n                //  Scene is already booted, usually because this method is being called at run-time, so boot the plugin\r\n                if (isBooted)\r\n                {\r\n                    plugin.boot();\r\n                }\r\n            }\r\n        }\r\n\r\n        //  And finally, inject any 'global scene plugins'\r\n        pluginList = this.plugins;\r\n\r\n        for (i = 0; i < pluginList.length; i++)\r\n        {\r\n            var entry = pluginList[i];\r\n           \r\n            if (entry.mapping)\r\n            {\r\n                scene[entry.mapping] = entry.plugin;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by the Scene Systems class. Returns a list of plugins to be installed.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#getDefaultScenePlugins\r\n     * @protected\r\n     * @since 3.8.0\r\n     *\r\n     * @return {string[]} A list keys of all the Scene Plugins to install.\r\n     */\r\n    getDefaultScenePlugins: function ()\r\n    {\r\n        var list = this.game.config.defaultPlugins;\r\n\r\n        //  Merge in custom Scene plugins\r\n        list = list.concat(this.scenePlugins);\r\n\r\n        return list;\r\n    },\r\n\r\n    /**\r\n     * Installs a new Scene Plugin into the Plugin Manager and optionally adds it\r\n     * to the given Scene as well. A Scene Plugin added to the manager in this way\r\n     * will be automatically installed into all new Scenes using the key and mapping given.\r\n     *\r\n     * The `key` property is what the plugin is injected into Scene.Systems as.\r\n     * The `mapping` property is optional, and if specified is what the plugin is installed into\r\n     * the Scene as. For example:\r\n     *\r\n     * ```javascript\r\n     * this.plugins.installScenePlugin('powerupsPlugin', pluginCode, 'powerups');\r\n     * \r\n     * // and from within the scene:\r\n     * this.sys.powerupsPlugin; // key value\r\n     * this.powerups; // mapping value\r\n     * ```\r\n     *\r\n     * This method is called automatically by Phaser if you install your plugins using either the\r\n     * Game Configuration object, or by preloading them via the Loader.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#installScenePlugin\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The property key that will be used to add this plugin to Scene.Systems.\r\n     * @param {function} plugin - The plugin code. This should be the non-instantiated version.\r\n     * @param {string} [mapping] - If this plugin is injected into the Phaser.Scene class, this is the property key to use.\r\n     * @param {Phaser.Scene} [addToScene] - Optionally automatically add this plugin to the given Scene.\r\n     */\r\n    installScenePlugin: function (key, plugin, mapping, addToScene)\r\n    {\r\n        if (typeof plugin !== 'function')\r\n        {\r\n            console.warn('Invalid Scene Plugin: ' + key);\r\n            return;\r\n        }\r\n\r\n        if (PluginCache.hasCore(key))\r\n        {\r\n            console.warn('Scene Plugin key in use: ' + key);\r\n            return;\r\n        }\r\n\r\n        PluginCache.register(key, plugin, mapping, true);\r\n\r\n        this.scenePlugins.push(key);\r\n\r\n        if (addToScene)\r\n        {\r\n            var instance = new plugin(addToScene, this);\r\n\r\n            addToScene.sys[key] = instance;\r\n\r\n            if (mapping && mapping !== '')\r\n            {\r\n                addToScene[mapping] = instance;\r\n            }\r\n\r\n            instance.boot();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Installs a new Global Plugin into the Plugin Manager and optionally starts it running.\r\n     * A global plugin belongs to the Plugin Manager, rather than a specific Scene, and can be accessed\r\n     * and used by all Scenes in your game.\r\n     *\r\n     * The `key` property is what you use to access this plugin from the Plugin Manager.\r\n     *\r\n     * ```javascript\r\n     * this.plugins.install('powerupsPlugin', pluginCode);\r\n     * \r\n     * // and from within the scene:\r\n     * this.plugins.get('powerupsPlugin');\r\n     * ```\r\n     *\r\n     * This method is called automatically by Phaser if you install your plugins using either the\r\n     * Game Configuration object, or by preloading them via the Loader.\r\n     *\r\n     * The same plugin can be installed multiple times into the Plugin Manager by simply giving each\r\n     * instance its own unique key.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#install\r\n     * @since 3.8.0\r\n     * \r\n     * @param {string} key - The unique handle given to this plugin within the Plugin Manager.\r\n     * @param {function} plugin - The plugin code. This should be the non-instantiated version.\r\n     * @param {boolean} [start=false] - Automatically start the plugin running? This is always `true` if you provide a mapping value.\r\n     * @param {string} [mapping] - If this plugin is injected into the Phaser.Scene class, this is the property key to use.\r\n     * @param {any} [data] - A value passed to the plugin's `init` method.\r\n     */\r\n    install: function (key, plugin, start, mapping, data)\r\n    {\r\n        if (start === undefined) { start = false; }\r\n        if (mapping === undefined) { mapping = null; }\r\n        if (data === undefined) { data = null; }\r\n\r\n        if (typeof plugin !== 'function')\r\n        {\r\n            console.warn('Invalid Plugin: ' + key);\r\n            return;\r\n        }\r\n\r\n        if (PluginCache.hasCustom(key))\r\n        {\r\n            console.warn('Plugin key in use: ' + key);\r\n            return;\r\n        }\r\n\r\n        if (mapping !== null)\r\n        {\r\n            start = true;\r\n        }\r\n\r\n        if (!this.game.isBooted)\r\n        {\r\n            this._pendingGlobal.push({ key: key, plugin: plugin, start: start, mapping: mapping, data: data });\r\n        }\r\n        else\r\n        {\r\n            //  Add it to the plugin store\r\n            PluginCache.registerCustom(key, plugin, mapping, data);\r\n\r\n            if (start)\r\n            {\r\n                return this.start(key);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Gets an index of a global plugin based on the given key.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#getIndex\r\n     * @protected\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The unique plugin key.\r\n     *\r\n     * @return {integer} The index of the plugin within the plugins array.\r\n     */\r\n    getIndex: function (key)\r\n    {\r\n        var list = this.plugins;\r\n\r\n        for (var i = 0; i < list.length; i++)\r\n        {\r\n            var entry = list[i];\r\n\r\n            if (entry.key === key)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    },\r\n\r\n    /**\r\n     * Gets a global plugin based on the given key.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#getEntry\r\n     * @protected\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The unique plugin key.\r\n     *\r\n     * @return {GlobalPlugin} The plugin entry.\r\n     */\r\n    getEntry: function (key)\r\n    {\r\n        var idx = this.getIndex(key);\r\n\r\n        if (idx !== -1)\r\n        {\r\n            return this.plugins[idx];\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Checks if the given global plugin, based on its key, is active or not.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#isActive\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The unique plugin key.\r\n     *\r\n     * @return {boolean} `true` if the plugin is active, otherwise `false`.\r\n     */\r\n    isActive: function (key)\r\n    {\r\n        var entry = this.getEntry(key);\r\n\r\n        return (entry && entry.active);\r\n    },\r\n\r\n    /**\r\n     * Starts a global plugin running.\r\n     *\r\n     * If the plugin was previously active then calling `start` will reset it to an active state and then\r\n     * call its `start` method.\r\n     *\r\n     * If the plugin has never been run before a new instance of it will be created within the Plugin Manager,\r\n     * its active state set and then both of its `init` and `start` methods called, in that order.\r\n     *\r\n     * If the plugin is already running under the given key then nothing happens.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#start\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the plugin to start.\r\n     * @param {string} [runAs] - Run the plugin under a new key. This allows you to run one plugin multiple times.\r\n     *\r\n     * @return {?Phaser.Plugins.BasePlugin} The plugin that was started, or `null` if invalid key given or plugin is already stopped.\r\n     */\r\n    start: function (key, runAs)\r\n    {\r\n        if (runAs === undefined) { runAs = key; }\r\n\r\n        var entry = this.getEntry(runAs);\r\n\r\n        //  Plugin already running under this key?\r\n        if (entry && !entry.active)\r\n        {\r\n            //  It exists, we just need to start it up again\r\n            entry.active = true;\r\n            entry.plugin.start();\r\n        }\r\n        else if (!entry)\r\n        {\r\n            entry = this.createEntry(key, runAs);\r\n        }\r\n\r\n        return (entry) ? entry.plugin : null;\r\n    },\r\n\r\n    /**\r\n     * Creates a new instance of a global plugin, adds an entry into the plugins array and returns it.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#createEntry\r\n     * @private\r\n     * @since 3.9.0\r\n     *\r\n     * @param {string} key - The key of the plugin to create an instance of.\r\n     * @param {string} [runAs] - Run the plugin under a new key. This allows you to run one plugin multiple times.\r\n     *\r\n     * @return {?Phaser.Plugins.BasePlugin} The plugin that was started, or `null` if invalid key given.\r\n     */\r\n    createEntry: function (key, runAs)\r\n    {\r\n        var entry = PluginCache.getCustom(key);\r\n\r\n        if (entry)\r\n        {\r\n            var instance = new entry.plugin(this);\r\n\r\n            entry = {\r\n                key: runAs,\r\n                plugin: instance,\r\n                active: true,\r\n                mapping: entry.mapping,\r\n                data: entry.data\r\n            };\r\n\r\n            this.plugins.push(entry);\r\n\r\n            instance.init(entry.data);\r\n            instance.start();\r\n        }\r\n\r\n        return entry;\r\n    },\r\n\r\n    /**\r\n     * Stops a global plugin from running.\r\n     *\r\n     * If the plugin is active then its active state will be set to false and the plugins `stop` method\r\n     * will be called.\r\n     *\r\n     * If the plugin is not already running, nothing will happen.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#stop\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the plugin to stop.\r\n     *\r\n     * @return {Phaser.Plugins.PluginManager} The Plugin Manager.\r\n     */\r\n    stop: function (key)\r\n    {\r\n        var entry = this.getEntry(key);\r\n\r\n        if (entry && entry.active)\r\n        {\r\n            entry.active = false;\r\n            entry.plugin.stop();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a global plugin from the Plugin Manager based on the given key and returns it.\r\n     *\r\n     * If it cannot find an active plugin based on the key, but there is one in the Plugin Cache with the same key,\r\n     * then it will create a new instance of the cached plugin and return that.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#get\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the plugin to get.\r\n     * @param {boolean} [autoStart=true] - Automatically start a new instance of the plugin if found in the cache, but not actively running.\r\n     *\r\n     * @return {?(Phaser.Plugins.BasePlugin|function)} The plugin, or `null` if no plugin was found matching the key.\r\n     */\r\n    get: function (key, autoStart)\r\n    {\r\n        if (autoStart === undefined) { autoStart = true; }\r\n\r\n        var entry = this.getEntry(key);\r\n\r\n        if (entry)\r\n        {\r\n            return entry.plugin;\r\n        }\r\n        else\r\n        {\r\n            var plugin = this.getClass(key);\r\n\r\n            if (plugin && autoStart)\r\n            {\r\n                entry = this.createEntry(key, key);\r\n\r\n                return (entry) ? entry.plugin : null;\r\n            }\r\n            else if (plugin)\r\n            {\r\n                return plugin;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Returns the plugin class from the cache.\r\n     * Used internally by the Plugin Manager.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#getClass\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the plugin to get.\r\n     *\r\n     * @return {Phaser.Plugins.BasePlugin} A Plugin object\r\n     */\r\n    getClass: function (key)\r\n    {\r\n        return PluginCache.getCustomClass(key);\r\n    },\r\n\r\n    /**\r\n     * Removes a global plugin from the Plugin Manager and Plugin Cache.\r\n     *\r\n     * It is up to you to remove all references to this plugin that you may hold within your game code.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#removeGlobalPlugin\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the plugin to remove.\r\n     */\r\n    removeGlobalPlugin: function (key)\r\n    {\r\n        var entry = this.getEntry(key);\r\n\r\n        if (entry)\r\n        {\r\n            Remove(this.plugins, entry);\r\n        }\r\n\r\n        PluginCache.removeCustom(key);\r\n    },\r\n\r\n    /**\r\n     * Removes a scene plugin from the Plugin Manager and Plugin Cache.\r\n     *\r\n     * This will not remove the plugin from any active Scenes that are already using it.\r\n     *\r\n     * It is up to you to remove all references to this plugin that you may hold within your game code.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#removeScenePlugin\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the plugin to remove.\r\n     */\r\n    removeScenePlugin: function (key)\r\n    {\r\n        Remove(this.scenePlugins, key);\r\n\r\n        PluginCache.remove(key);\r\n    },\r\n\r\n    /**\r\n     * Registers a new type of Game Object with the global Game Object Factory and / or Creator.\r\n     * This is usually called from within your Plugin code and is a helpful short-cut for creating\r\n     * new Game Objects.\r\n     *\r\n     * The key is the property that will be injected into the factories and used to create the\r\n     * Game Object. For example:\r\n     *\r\n     * ```javascript\r\n     * this.plugins.registerGameObject('clown', clownFactoryCallback, clownCreatorCallback);\r\n     * // later in your game code:\r\n     * this.add.clown();\r\n     * this.make.clown();\r\n     * ```\r\n     * \r\n     * The callbacks are what are called when the factories try to create a Game Object\r\n     * matching the given key. It's important to understand that the callbacks are invoked within\r\n     * the context of the GameObjectFactory. In this context there are several properties available\r\n     * to use:\r\n     * \r\n     * this.scene - A reference to the Scene that owns the GameObjectFactory.\r\n     * this.displayList - A reference to the Display List the Scene owns.\r\n     * this.updateList - A reference to the Update List the Scene owns.\r\n     * \r\n     * See the GameObjectFactory and GameObjectCreator classes for more details.\r\n     * Any public property or method listed is available from your callbacks under `this`.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#registerGameObject\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the Game Object that the given callbacks will create, i.e. `image`, `sprite`.\r\n     * @param {function} [factoryCallback] - The callback to invoke when the Game Object Factory is called.\r\n     * @param {function} [creatorCallback] - The callback to invoke when the Game Object Creator is called.\r\n     */\r\n    registerGameObject: function (key, factoryCallback, creatorCallback)\r\n    {\r\n        if (factoryCallback)\r\n        {\r\n            GameObjectFactory.register(key, factoryCallback);\r\n        }\r\n\r\n        if (creatorCallback)\r\n        {\r\n            GameObjectCreator.register(key, creatorCallback);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Registers a new file type with the global File Types Manager, making it available to all Loader\r\n     * Plugins created after this.\r\n     * \r\n     * This is usually called from within your Plugin code and is a helpful short-cut for creating\r\n     * new loader file types.\r\n     *\r\n     * The key is the property that will be injected into the Loader Plugin and used to load the\r\n     * files. For example:\r\n     *\r\n     * ```javascript\r\n     * this.plugins.registerFileType('wad', doomWadLoaderCallback);\r\n     * // later in your preload code:\r\n     * this.load.wad();\r\n     * ```\r\n     * \r\n     * The callback is what is called when the loader tries to load a file  matching the given key.\r\n     * It's important to understand that the callback is invoked within\r\n     * the context of the LoaderPlugin. In this context there are several properties / methods available\r\n     * to use:\r\n     * \r\n     * this.addFile - A method to add the new file to the load queue.\r\n     * this.scene - The Scene that owns the Loader Plugin instance.\r\n     *\r\n     * See the LoaderPlugin class for more details. Any public property or method listed is available from\r\n     * your callback under `this`.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#registerFileType\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the Game Object that the given callbacks will create, i.e. `image`, `sprite`.\r\n     * @param {function} callback - The callback to invoke when the Game Object Factory is called.\r\n     * @param {Phaser.Scene} [addToScene] - Optionally add this file type into the Loader Plugin owned by the given Scene.\r\n     */\r\n    registerFileType: function (key, callback, addToScene)\r\n    {\r\n        FileTypesManager.register(key, callback);\r\n\r\n        if (addToScene && addToScene.sys.load)\r\n        {\r\n            addToScene.sys.load[key] = callback;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Plugin Manager and all associated plugins.\r\n     * It will iterate all plugins found and call their `destroy` methods.\r\n     * \r\n     * The PluginCache will remove all custom plugins.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#destroy\r\n     * @since 3.8.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        for (var i = 0; i < this.plugins.length; i++)\r\n        {\r\n            this.plugins[i].plugin.destroy();\r\n        }\r\n\r\n        PluginCache.destroyCustomPlugins();\r\n\r\n        if (this.game.noReturn)\r\n        {\r\n            PluginCache.destroyCorePlugins();\r\n        }\r\n\r\n        this.game = null;\r\n        this.plugins = [];\r\n        this.scenePlugins = [];\r\n    }\r\n\r\n});\r\n\r\n/*\r\n * \"Sometimes, the elegant implementation is just a function.\r\n * Not a method. Not a class. Not a framework. Just a function.\"\r\n *  -- John Carmack\r\n */\r\n\r\nmodule.exports = PluginManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","EventEmitter","FileTypesManager","GameObjectCreator","GameObjectFactory","GetFastValue","PluginCache","Remove","PluginManager","Extends","initialize","game","call","plugins","scenePlugins","_pendingGlobal","_pendingScene","isBooted","boot","events","once","i","config","list","installGlobalPlugins","concat","length","entry","key","plugin","start","mapping","data","install","installScenePlugins","installScenePlugin","destroy","addToScene","sys","globalPlugins","scene","map","settings","pluginKey","hasOwnProperty","s","pluginList","hasCore","source","getCore","custom","getDefaultScenePlugins","defaultPlugins","console","warn","register","push","instance","undefined","hasCustom","registerCustom","getIndex","getEntry","idx","isActive","active","runAs","createEntry","getCustom","init","stop","get","autoStart","getClass","getCustomClass","removeGlobalPlugin","removeCustom","removeScenePlugin","remove","registerGameObject","factoryCallback","creatorCallback","registerFileType","callback","load","destroyCustomPlugins","noReturn","destroyCorePlugins"]
}
