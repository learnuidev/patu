{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$MatterPhysics.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/MatterPhysics.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$MatterPhysics\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Factory = require('./Factory');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar MatterAttractors = require('./lib/plugins/MatterAttractors');\r\nvar MatterLib = require('./lib/core/Matter');\r\nvar MatterWrap = require('./lib/plugins/MatterWrap');\r\nvar Merge = require('../../utils/object/Merge');\r\nvar Plugin = require('./lib/core/Plugin');\r\nvar PluginCache = require('../../plugins/PluginCache');\r\nvar World = require('./World');\r\nvar Vertices = require('./lib/geometry/Vertices');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class MatterPhysics\r\n * @memberOf Phaser.Physics.Matter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\r\nvar MatterPhysics = new Class({\r\n\r\n    initialize:\r\n\r\n    function MatterPhysics (scene)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#config\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = this.getConfig();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#world\r\n         * @type {Phaser.Physics.Matter.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#add\r\n         * @type {Phaser.Physics.Matter.Factory}\r\n         * @since 3.0.0\r\n         */\r\n        this.add;\r\n\r\n        /**\r\n         * A reference to the `Matter.Vertices` module which contains methods for creating and manipulating sets of vertices.\r\n         * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\r\n         * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#verts\r\n         * @type {MatterJS.Vertices}\r\n         * @since 3.14.0\r\n         */\r\n        this.verts = Vertices;\r\n\r\n        //  Matter plugins\r\n\r\n        if (GetValue(this.config, 'plugins.attractors', false))\r\n        {\r\n            Plugin.register(MatterAttractors);\r\n            Plugin.use(MatterLib, MatterAttractors);\r\n        }\r\n\r\n        if (GetValue(this.config, 'plugins.wrap', false))\r\n        {\r\n            Plugin.register(MatterWrap);\r\n            Plugin.use(MatterLib, MatterWrap);\r\n        }\r\n\r\n        scene.sys.events.once('boot', this.boot, this);\r\n        scene.sys.events.on('start', this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.world = new World(this.scene, this.config);\r\n        this.add = new Factory(this.world);\r\n\r\n        this.systems.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (!this.world)\r\n        {\r\n            this.world = new World(this.scene, this.config);\r\n            this.add = new Factory(this.world);\r\n        }\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on('update', this.world.update, this.world);\r\n        eventEmitter.on('postupdate', this.world.postUpdate, this.world);\r\n        eventEmitter.once('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#getConfig\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} [description]\r\n     */\r\n    getConfig: function ()\r\n    {\r\n        var gameConfig = this.systems.game.config.physics;\r\n        var sceneConfig = this.systems.settings.physics;\r\n\r\n        var config = Merge(\r\n            GetFastValue(sceneConfig, 'matter', {}),\r\n            GetFastValue(gameConfig, 'matter', {})\r\n        );\r\n\r\n        return config;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#enableAttractorPlugin\r\n     * @since 3.0.0\r\n     * \r\n     * @return {Phaser.Physics.Matter.MatterPhysics} This Matter Physics instance.\r\n     */\r\n    enableAttractorPlugin: function ()\r\n    {\r\n        Plugin.register(MatterAttractors);\r\n        Plugin.use(MatterLib, MatterAttractors);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#enableWrapPlugin\r\n     * @since 3.0.0\r\n     * \r\n     * @return {Phaser.Physics.Matter.MatterPhysics} This Matter Physics instance.\r\n     */\r\n    enableWrapPlugin: function ()\r\n    {\r\n        Plugin.register(MatterWrap);\r\n        Plugin.use(MatterLib, MatterWrap);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} The Matter World object.\r\n     */\r\n    pause: function ()\r\n    {\r\n        return this.world.pause();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} The Matter World object.\r\n     */\r\n    resume: function ()\r\n    {\r\n        return this.world.resume();\r\n    },\r\n\r\n    /**\r\n     * Sets the Matter Engine to run at fixed timestep of 60Hz and enables `autoUpdate`.\r\n     * If you have set a custom `getDelta` function then this will override it.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#set60Hz\r\n     * @since 3.4.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.MatterPhysics} This Matter Physics instance.\r\n     */\r\n    set60Hz: function ()\r\n    {\r\n        this.world.getDelta = this.world.update60Hz;\r\n        this.world.autoUpdate = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the Matter Engine to run at fixed timestep of 30Hz and enables `autoUpdate`.\r\n     * If you have set a custom `getDelta` function then this will override it.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#set30Hz\r\n     * @since 3.4.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.MatterPhysics} This Matter Physics instance.\r\n     */\r\n    set30Hz: function ()\r\n    {\r\n        this.world.getDelta = this.world.update30Hz;\r\n        this.world.autoUpdate = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Manually advances the physics simulation by one iteration.\r\n     * \r\n     * You can optionally pass in the `delta` and `correction` values to be used by Engine.update.\r\n     * If undefined they use the Matter defaults of 60Hz and no correction.\r\n     * \r\n     * Calling `step` directly bypasses any checks of `enabled` or `autoUpdate`.\r\n     * \r\n     * It also ignores any custom `getDelta` functions, as you should be passing the delta\r\n     * value in to this call.\r\n     *\r\n     * You can adjust the number of iterations that Engine.update performs internally.\r\n     * Use the Scene Matter Physics config object to set the following properties:\r\n     *\r\n     * positionIterations (defaults to 6)\r\n     * velocityIterations (defaults to 4)\r\n     * constraintIterations (defaults to 2)\r\n     *\r\n     * Adjusting these values can help performance in certain situations, depending on the physics requirements\r\n     * of your game.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#step\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} [delta=16.666] - [description]\r\n     * @param {number} [correction=1] - [description]\r\n     */\r\n    step: function (delta, correction)\r\n    {\r\n        this.world.step(delta, correction);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off('update', this.world.update, this.world);\r\n        eventEmitter.off('postupdate', this.world.postUpdate, this.world);\r\n        eventEmitter.off('shutdown', this.shutdown, this);\r\n\r\n        this.add.destroy();\r\n        this.world.destroy();\r\n\r\n        this.add = null;\r\n        this.world = null;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off('start', this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('MatterPhysics', MatterPhysics, 'matterPhysics');\r\n\r\nmodule.exports = MatterPhysics;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Factory","GetFastValue","GetValue","MatterAttractors","MatterLib","MatterWrap","Merge","Plugin","PluginCache","World","Vertices","MatterPhysics","initialize","scene","systems","sys","config","getConfig","verts","register","use","events","once","boot","on","start","world","add","destroy","eventEmitter","update","postUpdate","shutdown","gameConfig","game","physics","settings","enableAttractorPlugin","enableWrapPlugin","pause","resume","set60Hz","getDelta","update60Hz","autoUpdate","set30Hz","update30Hz","step","delta","correction","off"]
}
