{
"version":3,
"file":"module$node_modules$Phaser$src$sound$webaudio$WebAudioSoundManager.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/sound/webaudio/WebAudioSoundManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$sound$webaudio$WebAudioSoundManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar BaseSoundManager = require('../BaseSoundManager');\r\nvar Class = require('../../utils/Class');\r\nvar WebAudioSound = require('./WebAudioSound');\r\n\r\n/**\r\n * @classdesc\r\n * Web Audio API implementation of the sound manager.\r\n *\r\n * @class WebAudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberOf Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\r\nvar WebAudioSoundManager = new Class({\r\n\r\n    Extends: BaseSoundManager,\r\n\r\n    initialize:\r\n\r\n    function WebAudioSoundManager (game)\r\n    {\r\n        /**\r\n         * The AudioContext being used for playback.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSoundManager#context\r\n         * @type {AudioContext}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.context = this.createAudioContext(game);\r\n\r\n        /**\r\n         * Gain node responsible for controlling global muting.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSoundManager#masterMuteNode\r\n         * @type {GainNode}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.masterMuteNode = this.context.createGain();\r\n\r\n        /**\r\n         * Gain node responsible for controlling global volume.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSoundManager#masterVolumeNode\r\n         * @type {GainNode}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.masterVolumeNode = this.context.createGain();\r\n\r\n        this.masterMuteNode.connect(this.masterVolumeNode);\r\n\r\n        this.masterVolumeNode.connect(this.context.destination);\r\n\r\n        /**\r\n         * Destination node for connecting individual sounds to.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSoundManager#destination\r\n         * @type {AudioNode}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.destination = this.masterMuteNode;\r\n\r\n        this.locked = this.context.state === 'suspended' && ('ontouchstart' in window || 'onclick' in window);\r\n\r\n        BaseSoundManager.call(this, game);\r\n\r\n        if (this.locked)\r\n        {\r\n            this.unlock();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method responsible for instantiating and returning AudioContext instance.\r\n     * If an instance of an AudioContext class was provided through the game config,\r\n     * that instance will be returned instead. This can come in handy if you are reloading\r\n     * a Phaser game on a page that never properly refreshes (such as in an SPA project)\r\n     * and you want to reuse already instantiated AudioContext.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#createAudioContext\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Game} game - Reference to the current game instance.\r\n     *\r\n     * @return {AudioContext} The AudioContext instance to be used for playback.\r\n     */\r\n    createAudioContext: function (game)\r\n    {\r\n        var audioConfig = game.config.audio;\r\n\r\n        if (audioConfig && audioConfig.context)\r\n        {\r\n            audioConfig.context.resume();\r\n\r\n            return audioConfig.context;\r\n        }\r\n\r\n        return new AudioContext();\r\n    },\r\n\r\n    /**\r\n     * Adds a new sound into the sound manager.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {Phaser.Sound.WebAudioSound} The new sound instance.\r\n     */\r\n    add: function (key, config)\r\n    {\r\n        var sound = new WebAudioSound(this, key, config);\r\n\r\n        this.sounds.push(sound);\r\n\r\n        return sound;\r\n    },\r\n\r\n    /**\r\n     * Unlocks Web Audio API on the initial input event.\r\n     *\r\n     * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#unlock\r\n     * @since 3.0.0\r\n     */\r\n    unlock: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        var unlock = function ()\r\n        {\r\n            _this.context.resume().then(function ()\r\n            {\r\n                document.body.removeEventListener('touchstart', unlock);\r\n                document.body.removeEventListener('touchend', unlock);\r\n                document.body.removeEventListener('click', unlock);\r\n\r\n                _this.unlocked = true;\r\n            });\r\n        };\r\n\r\n        if (document.body)\r\n        {\r\n            document.body.addEventListener('touchstart', unlock, false);\r\n            document.body.addEventListener('touchend', unlock, false);\r\n            document.body.addEventListener('click', unlock, false);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally for pausing sound manager if\r\n     * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#onBlur\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: function ()\r\n    {\r\n        this.context.suspend();\r\n    },\r\n\r\n    /**\r\n     * Method used internally for resuming sound manager if\r\n     * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#onFocus\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: function ()\r\n    {\r\n        this.context.resume();\r\n    },\r\n\r\n    /**\r\n     * Calls Phaser.Sound.BaseSoundManager#destroy method\r\n     * and cleans up all Web Audio API related stuff.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.destination = null;\r\n        this.masterVolumeNode.disconnect();\r\n        this.masterVolumeNode = null;\r\n        this.masterMuteNode.disconnect();\r\n        this.masterMuteNode = null;\r\n\r\n        if (this.game.config.audio && this.game.config.audio.context)\r\n        {\r\n            this.context.suspend();\r\n        }\r\n        else\r\n        {\r\n            var _this = this;\r\n\r\n            this.context.close().then(function ()\r\n            {\r\n\r\n                _this.context = null;\r\n\r\n            });\r\n        }\r\n\r\n        BaseSoundManager.prototype.destroy.call(this);\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.WebAudioSoundManager#muteEvent\r\n     * @param {Phaser.Sound.WebAudioSoundManager} soundManager - Reference to the sound manager that emitted event.\r\n     * @param {boolean} value - An updated value of Phaser.Sound.WebAudioSoundManager#mute property.\r\n     */\r\n\r\n    /**\r\n     * Sets the muted state of all this Sound Manager.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#setMute\r\n     * @fires Phaser.Sound.WebAudioSoundManager#muteEvent\r\n     * @since 3.3.0\r\n     *\r\n     * @param {boolean} value - `true` to mute all sounds, `false` to unmute them.\r\n     *\r\n     * @return {Phaser.Sound.WebAudioSoundManager} This Sound Manager.\r\n     */\r\n    setMute: function (value)\r\n    {\r\n        this.mute = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @name Phaser.Sound.WebAudioSoundManager#mute\r\n     * @type {boolean}\r\n     * @fires Phaser.Sound.WebAudioSoundManager#MuteEvent\r\n     * @since 3.0.0\r\n     */\r\n    mute: {\r\n\r\n        get: function ()\r\n        {\r\n            return (this.masterMuteNode.gain.value === 0);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.masterMuteNode.gain.setValueAtTime(value ? 0 : 1, 0);\r\n\r\n            this.emit('mute', this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.WebAudioSoundManager#VolumeEvent\r\n     * @param {Phaser.Sound.WebAudioSoundManager} soundManager - Reference to the sound manager that emitted event.\r\n     * @param {number} value - An updated value of Phaser.Sound.WebAudioSoundManager#volume property.\r\n     */\r\n\r\n    /**\r\n     * Sets the volume of this Sound Manager.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#setVolume\r\n     * @fires Phaser.Sound.WebAudioSoundManager#VolumeEvent\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The global volume of this Sound Manager.\r\n     *\r\n     * @return {Phaser.Sound.WebAudioSoundManager} This Sound Manager.\r\n     */\r\n    setVolume: function (value)\r\n    {\r\n        this.volume = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @name Phaser.Sound.WebAudioSoundManager#volume\r\n     * @type {number}\r\n     * @fires Phaser.Sound.WebAudioSoundManager#VolumeEvent\r\n     * @since 3.0.0\r\n     */\r\n    volume: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.masterVolumeNode.gain.value;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.masterVolumeNode.gain.setValueAtTime(value, 0);\r\n\r\n            this.emit('volume', this, value);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = WebAudioSoundManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BaseSoundManager","Class","WebAudioSound","WebAudioSoundManager","Extends","initialize","game","context","createAudioContext","masterMuteNode","createGain","masterVolumeNode","connect","destination","locked","state","window","call","unlock","audioConfig","config","audio","resume","AudioContext","add","key","sound","sounds","push","_this","then","document","body","removeEventListener","unlocked","addEventListener","onBlur","suspend","onFocus","destroy","disconnect","close","prototype","setMute","value","mute","get","gain","set","setValueAtTime","emit","setVolume","volume"]
}
