{
"version":3,
"file":"module$node_modules$Phaser$src$utils$array$matrix$MatrixToString.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,iEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO7H,IAAIC,IAAMH,OAAA,CAAQ,iDAAR,CAAV,CACII,YAAcJ,OAAA,CAAQ,+DAAR,CAmElBC,OAAAC,QAAA,CApDqBG,QAAS,CAACC,MAAD,CAC9B,CACI,IAAIC,IAAM,EAEV,IAAI,CAACH,WAAA,CAAYE,MAAZ,CAAL,CAEI,MAAOC,IAGX,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBF,MAAAG,OAApB,CAAmCD,CAAA,EAAnC,CACA,CACI,IAAK,IAAIE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBJ,MAAA,CAAOE,CAAP,CAAAC,OAApB,CAAsCC,CAAA,EAAtC,CACA,CACI,IAAIC,KAAOL,MAAA,CAAOE,CAAP,CAAA,CAAUE,CAAV,CAAAE,SAAA,EAIPL,IAAA,CAFS,WAAb,GAAII,IAAJ,CAEIJ,GAFJ,CAEWJ,GAAA,CAAIQ,IAAJ,CAAU,CAAV,CAFX,CAMIJ,GANJ,CAMW,GAGPG,EAAJ;AAAQJ,MAAA,CAAOE,CAAP,CAAAC,OAAR,CAA2B,CAA3B,GAEIF,GAFJ,EAEW,IAFX,CAZJ,CAkBA,GAAIC,CAAJ,CAAQF,MAAAG,OAAR,CAAwB,CAAxB,CACA,CACIF,GAAA,EAAO,IAEP,KAASM,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoBP,MAAA,CAAOE,CAAP,CAAAC,OAApB,CAAsCI,CAAA,EAAtC,CAEIN,GAEA,EAFO,KAEP,CAAIM,CAAJ,CAAQP,MAAA,CAAOE,CAAP,CAAAC,OAAR,CAA2B,CAA3B,GAEIF,GAFJ,EAEW,GAFX,CAMJA,IAAA,EAAO,IAbX,CArBJ,CAuCA,MAAOA,IAhDX,CAxB6H;",
"sources":["node_modules/Phaser/src/utils/array/matrix/MatrixToString.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$array$matrix$MatrixToString\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Pad = require('../../string/Pad');\r\nvar CheckMatrix = require('./CheckMatrix');\r\n\r\n//  Generates a string (which you can pass to console.log) from the given\r\n//  Array Matrix.\r\n\r\n/**\r\n * Generates a string (which you can pass to console.log) from the given Array Matrix.\r\n *\r\n * @function Phaser.Utils.Array.Matrix.MatrixToString\r\n * @since 3.0.0\r\n *\r\n * @param {array} matrix - A 2-dimensional array.\r\n *\r\n * @return {string} A string representing the matrix.\r\n */\r\nvar MatrixToString = function (matrix)\r\n{\r\n    var str = '';\r\n\r\n    if (!CheckMatrix(matrix))\r\n    {\r\n        return str;\r\n    }\r\n\r\n    for (var r = 0; r < matrix.length; r++)\r\n    {\r\n        for (var c = 0; c < matrix[r].length; c++)\r\n        {\r\n            var cell = matrix[r][c].toString();\r\n\r\n            if (cell !== 'undefined')\r\n            {\r\n                str += Pad(cell, 2);\r\n            }\r\n            else\r\n            {\r\n                str += '?';\r\n            }\r\n\r\n            if (c < matrix[r].length - 1)\r\n            {\r\n                str += ' |';\r\n            }\r\n        }\r\n\r\n        if (r < matrix.length - 1)\r\n        {\r\n            str += '\\n';\r\n\r\n            for (var i = 0; i < matrix[r].length; i++)\r\n            {\r\n                str += '---';\r\n\r\n                if (i < matrix[r].length - 1)\r\n                {\r\n                    str += '+';\r\n                }\r\n            }\r\n\r\n            str += '\\n';\r\n        }\r\n\r\n    }\r\n\r\n    return str;\r\n};\r\n\r\nmodule.exports = MatrixToString;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Pad","CheckMatrix","MatrixToString","matrix","str","r","length","c","cell","toString","i"]
}
