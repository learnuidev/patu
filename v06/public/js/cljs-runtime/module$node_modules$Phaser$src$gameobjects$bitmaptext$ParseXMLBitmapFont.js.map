{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$bitmaptext$ParseXMLBitmapFont.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/bitmaptext/ParseXMLBitmapFont.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$bitmaptext$ParseXMLBitmapFont\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Read an integer value from an XML Node.\r\n *\r\n * @function getValue\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Node} node - The XML Node.\r\n * @param {string} attribute - The attribute to read.\r\n *\r\n * @return {integer} The parsed value.\r\n */\r\nfunction getValue (node, attribute)\r\n{\r\n    return parseInt(node.getAttribute(attribute), 10);\r\n}\r\n\r\n/**\r\n * Parse an XML font to Bitmap Font data for the Bitmap Font cache.\r\n *\r\n * @function ParseXMLBitmapFont\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {XMLDocument} xml - The XML Document to parse the font from.\r\n * @param {integer} [xSpacing=0] - The x-axis spacing to add between each letter.\r\n * @param {integer} [ySpacing=0] - The y-axis spacing to add to the line height.\r\n * @param {Phaser.Textures.Frame} [frame] - The texture frame to take into account while parsing.\r\n *\r\n * @return {BitmapFontData} The parsed Bitmap Font data.\r\n */\r\nvar ParseXMLBitmapFont = function (xml, xSpacing, ySpacing, frame)\r\n{\r\n    if (xSpacing === undefined) { xSpacing = 0; }\r\n    if (ySpacing === undefined) { ySpacing = 0; }\r\n\r\n    var data = {};\r\n    var info = xml.getElementsByTagName('info')[0];\r\n    var common = xml.getElementsByTagName('common')[0];\r\n\r\n    data.font = info.getAttribute('face');\r\n    data.size = getValue(info, 'size');\r\n    data.lineHeight = getValue(common, 'lineHeight') + ySpacing;\r\n    data.chars = {};\r\n\r\n    var letters = xml.getElementsByTagName('char');\r\n\r\n    var adjustForTrim = (frame !== undefined && frame.trimmed);\r\n\r\n    if (adjustForTrim)\r\n    {\r\n        var top = frame.height;\r\n        var left = frame.width;\r\n    }\r\n\r\n    for (var i = 0; i < letters.length; i++)\r\n    {\r\n        var node = letters[i];\r\n\r\n        var charCode = getValue(node, 'id');\r\n        var gx = getValue(node, 'x');\r\n        var gy = getValue(node, 'y');\r\n        var gw = getValue(node, 'width');\r\n        var gh = getValue(node, 'height');\r\n\r\n        //  Handle frame trim issues\r\n\r\n        if (adjustForTrim)\r\n        {\r\n            if (gx < left)\r\n            {\r\n                left = gx;\r\n            }\r\n\r\n            if (gy < top)\r\n            {\r\n                top = gy;\r\n            }\r\n        }\r\n\r\n        data.chars[charCode] =\r\n        {\r\n            x: gx,\r\n            y: gy,\r\n            width: gw,\r\n            height: gh,\r\n            centerX: Math.floor(gw / 2),\r\n            centerY: Math.floor(gh / 2),\r\n            xOffset: getValue(node, 'xoffset'),\r\n            yOffset: getValue(node, 'yoffset'),\r\n            xAdvance: getValue(node, 'xadvance') + xSpacing,\r\n            data: {},\r\n            kerning: {}\r\n        };\r\n    }\r\n\r\n    if (adjustForTrim && top !== 0 && left !== 0)\r\n    {\r\n        // console.log('top and left', top, left, frame.x, frame.y);\r\n\r\n        //  Now we know the top and left coordinates of the glyphs in the original data\r\n        //  so we can work out how much to adjust the glyphs by\r\n\r\n        for (var code in data.chars)\r\n        {\r\n            var glyph = data.chars[code];\r\n\r\n            glyph.x -= frame.x;\r\n            glyph.y -= frame.y;\r\n        }\r\n    }\r\n\r\n    var kernings = xml.getElementsByTagName('kerning');\r\n\r\n    for (i = 0; i < kernings.length; i++)\r\n    {\r\n        var kern = kernings[i];\r\n\r\n        var first = getValue(kern, 'first');\r\n        var second = getValue(kern, 'second');\r\n        var amount = getValue(kern, 'amount');\r\n\r\n        data.chars[second].kerning[first] = amount;\r\n    }\r\n\r\n    return data;\r\n};\r\n\r\nmodule.exports = ParseXMLBitmapFont;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","getValue","node","attribute","parseInt","getAttribute","ParseXMLBitmapFont","xml","xSpacing","ySpacing","frame","undefined","data","info","getElementsByTagName","common","font","size","lineHeight","chars","letters","adjustForTrim","trimmed","top","height","left","width","i","length","charCode","gx","gy","gw","gh","x","y","centerX","Math","floor","centerY","xOffset","yOffset","xAdvance","kerning","code","glyph","kernings","kern","first","second","amount"]
}
