{"version":3,"sources":["app/ms/core.cljs"],"mappings":";;;AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAIL,AAAKC,AAAO,AAACC,AAAKF;AAElB,AAAA,AAAMG;AAAN,AAEE,AAACC,AAAMH;;AAGT,AAAA;;;AAAA,AAAAI,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAEM,AAACE,AAAkBT;;;AAFzB,AAAA,AAAA,AAAMO,AAGFG;AAHJ,AAIG,AAACC,AAAOV,AAAOS;;;AAJlB,AAAA,AAAA,AAAMH;;AAAN,AAMA,AAAA,AAAMK;AAAN,AAEE,AAACC,AAAM,AAAA,AAAA,AAAAT,AAAaH;;AAEtB,AAAA,AAAMa;AAAN,AAEE,AAAA,AAAK,AAACD,AAAM,AAAA,AAAA,AAAAT,AAAkBH;;AAEhC,AAAA;;;;AAAA,AAAAI,AAAMW;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAR,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMQ;AAAN,AAGM,AAACC,AAAmB,AAACC;;;AAH3B,AAAA,AAAA,AAAMF,AAIFG;AAJJ,AAAA,AAAA,AAAA,AAAA,AAMaA;;;AANb,AAAA,AAAA,AAAMH;;AAAN,AAQA;;;;;;AAAA,AAAMI,AAKHC,AAAMC;AALT,AAME,AAAMC,AAAY,AAAGD,AAAS,AAACE,AAAI,AAAA,AAAA,AAAApB,AAAkBH,AAAQoB;AAA7D,AACE,AAAI,AAAA,AAAGE;AAAP;;AAAwBA;;;AAE5B;;;;;;;AAAA,AAAME,AAMHJ,AAAMC,AAASI;AANlB,AAOE,AAAMC,AAAS,AAACC,AAAEP,AAAM,AAACP;AAAzB,AACE,AAAI,AAAKa,AAAS,AAAGL,AAAS,AAACV;AAC7B,AAACiB,AAAeH,AAAK,AAAA,AAAK,AAACF,AAAI,AAAA,AAAA,AAAApB,AAAaH,AAAQqB;;AACpD,AAAA,AAACO,AAAeH;;;AAEtB,AAAA;;;;;;;;;;AAAA,AAAArB,AAAM0B;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAvB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMuB,AASFV,AAAMgB;AATV,AASsB,AAACC,AAAUjB,AAAMgB,AAAW,AAACnB;;;AATnD,AAAA,AAAA,AAAAc,AAAMD,AAUFV,AAAyBK;AAV7B,AAAA,AAAAO,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAT,AAAAS,AAAA,AAUkBX;AAVlB,AAWG,AAAMiB,AAAe,AAACC,AAAmBnB;AACnCE,AAAY,AAACH,AAAcmB,AAAejB;AAC1CmB,AAAQ,AAAChB,AAAUc,AAAejB,AAASI;AAFjD,AAAA,AAAA,AAAA,AAGaH,AACDkB;;;AAff,AAAA,AAAA,AAAMV;;AAAN","names":["app.ms.core/init-vals","app.ms.core/config","cljs.core.atom","app.ms.core/get-config","cljs.core/deref","var_args","G__32349","app.ms.core/initialize-config","js/Error","app.ms.core.initialize_config","init-values","cljs.core/reset!","app.ms.core/get-max-progress","cljs.core/count","app.ms.core/get-current-score","G__32351","app.ms.core/get-initial-record","app.ms.core.get_initial_record","app.ms.utils/get-now","now","app.ms.core/calc-progress","score","progress","newProgress","cljs.core.get","app.ms.core/calc-date","date","correct?","cljs.core._EQ_","app.ms.utils/add-days","G__32353","app.ms.core/calculate","p__32354","map__32355","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","prevRecord","app.ms.core.calculate","formattedScore","app.ms.utils/format-score","dueDate"],"sourcesContent":["(ns app.ms.core\n  (:require [app.ms.utils :as utils]))\n\n;; INITIAL CONFIGURATION\n(def init-vals\n  {:intervals [1 2 3 8 17]\n   :score-progress [-3 -1 1]})\n\n(def config (atom init-vals))\n\n(defn get-config\n  []\n  (deref config))\n\n;; Initialize configuration\n(defn initialize-config\n  \"Initialize configuration: sets the intervals and scoreProgress values\"\n  ([] (initialize-config init-vals))\n  ([init-values]\n   (reset! config init-values)))\n\n(defn get-max-progress\n  []\n  (count (:intervals @config)))\n\n(defn get-current-score\n  []\n  (dec (count (:score-progress @config))))\n\n(defn get-initial-record\n  \" Get the initial record of the card\n   e.g: (get-initial-record (helpers/now))\"\n  ([] (get-initial-record (utils/get-now)))\n  ([now]\n   {:progress 0\n    :dueDate now}))\n\n(defn calc-progress\n  \"calc-progress function takes three arguments:\n    - score(int): users score\n    - progress(int): How many times continuously the user has correctly answered this item.\n   returns the updated updated progress value\"\n  [score progress]\n  (let [newProgress (+ progress (get (:score-progress @config) score))]\n    (if (< newProgress 0) 0 newProgress)))\n\n(defn calc-date\n  \"calc-date takes three arguments:\n    - score(int): users score\n    - progress(int): How many times continuously the user has correctly answered this item.\n    - date(inst): the date of today\n   returns the updated date due with dates added\"\n  [score progress date]\n  (let [correct? (= score (get-current-score))]\n    (if (and correct? (< progress (get-max-progress)))\n      (utils/add-days date (+ 1 (get (:intervals @config) progress)))\n      (utils/add-days date 1))))\n\n(defn calculate\n  \"Calculate function takes the following arguments, and\n   returns the updated record of the item\n    - score(int): how confident the user is with this item.\n    - prevRecord(map): the previous record of this item\n    - date(inst): the date of today\n   e.g (calculate 1 {:progress 0\n                     :dueDate #inst \\\"2020-03-27T19:44:51.851-00:00\\\"}\n                  (utils/get-now))\"\n  ([score prevRecord] (calculate score prevRecord (utils/get-now)))\n  ([score {:keys [progress]} date]\n   (let [formattedScore (utils/format-score score)\n         newProgress (calc-progress formattedScore progress)\n         dueDate (calc-date formattedScore progress date)]\n     {:progress newProgress\n      :dueDate dueDate})))\n"]}