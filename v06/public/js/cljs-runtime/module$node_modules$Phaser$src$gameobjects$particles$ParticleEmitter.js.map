{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$particles$ParticleEmitter.js",
"lineCount":25,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/particles/ParticleEmitter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$particles$ParticleEmitter\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar BlendModes = require('../../renderer/BlendModes');\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar DeathZone = require('./zones/DeathZone');\r\nvar EdgeZone = require('./zones/EdgeZone');\r\nvar EmitterOp = require('./EmitterOp');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar GetRandom = require('../../utils/array/GetRandom');\r\nvar HasAny = require('../../utils/object/HasAny');\r\nvar HasValue = require('../../utils/object/HasValue');\r\nvar Particle = require('./Particle');\r\nvar RandomZone = require('./zones/RandomZone');\r\nvar Rectangle = require('../../geom/rectangle/Rectangle');\r\nvar StableSort = require('../../utils/array/StableSort');\r\nvar Vector2 = require('../../math/Vector2');\r\nvar Wrap = require('../../math/Wrap');\r\n\r\n/**\r\n * @callback ParticleEmitterCallback\r\n *\r\n * @param {Phaser.GameObjects.Particles.Particle} particle - The particle associated with the call.\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - This particle emitter associated with the call.\r\n */\r\n\r\n/**\r\n * @callback ParticleDeathCallback\r\n *\r\n * @param {Phaser.GameObjects.Particles.Particle} particle - The particle that died.\r\n*/\r\n\r\n/**\r\n * @typedef {object} ParticleEmitterBounds\r\n *\r\n * @property {number} x - The left edge of the rectangle.\r\n * @property {number} y - The top edge of the rectangle.\r\n * @property {number} width - The width of the rectangle.\r\n * @property {number} height - The height of the rectangle.\r\n *\r\n * @see Phaser.GameObjects.Particles.ParticleEmitter#setBounds\r\n */\r\n\r\n/**\r\n * @typedef {object} ParticleEmitterBoundsAlt\r\n *\r\n * @property {number} x - The left edge of the rectangle.\r\n * @property {number} y - The top edge of the rectangle.\r\n * @property {number} w - The width of the rectangle.\r\n * @property {number} h - The height of the rectangle.\r\n *\r\n * @see Phaser.GameObjects.Particles.ParticleEmitter#setBounds\r\n */\r\n\r\n/**\r\n * @typedef {object} ParticleEmitterDeathZoneConfig\r\n *\r\n * @property {DeathZoneSource} source - A shape representing the zone. See {@link Phaser.GameObjects.Particles.Zones.DeathZone#source}.\r\n * @property {string} [type='onEnter'] - 'onEnter' or 'onLeave'.\r\n */\r\n\r\n/**\r\n * @typedef {object} ParticleEmitterEdgeZoneConfig\r\n *\r\n * @property {EdgeZoneSource} source - A shape representing the zone. See {@link Phaser.GameObjects.Particles.Zones.EdgeZone#source}.\r\n * @property {string} type - 'edge'.\r\n * @property {integer} quantity - The number of particles to place on the source edge. Set to 0 to use `stepRate` instead.\r\n * @property {number} [stepRate] - The distance between each particle. When set, `quantity` is implied and should be set to 0.\r\n * @property {boolean} [yoyo=false] - Whether particles are placed from start to end and then end to start.\r\n * @property {boolean} [seamless=true] - Whether one endpoint will be removed if it's identical to the other.\r\n */\r\n\r\n/**\r\n * @typedef {object} ParticleEmitterRandomZoneConfig\r\n *\r\n * @property {RandomZoneSource} source - A shape representing the zone. See {@link Phaser.GameObjects.Particles.Zones.RandomZone#source}.\r\n * @property {string} [type] - 'random'.\r\n */\r\n\r\n/**\r\n * @typedef {object} ParticleEmitterConfig\r\n *\r\n * @property {boolean} [active] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#active}.\r\n * @property {integer} [blendMode] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#blendMode}.\r\n * @property {*} [callbackScope] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallbackScope} and {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallbackScope}.\r\n * @property {boolean} [collideBottom] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#collideBottom}.\r\n * @property {boolean} [collideLeft] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#collideLeft}.\r\n * @property {boolean} [collideRight] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#collideRight}.\r\n * @property {boolean} [collideTop] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#collideTop}.\r\n * @property {boolean} [deathCallback] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallback}.\r\n * @property {*} [deathCallbackScope] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallbackScope}.\r\n * @property {function} [emitCallback] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallback}.\r\n * @property {*} [emitCallbackScope] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallbackScope}.\r\n * @property {Phaser.GameObjects.GameObject} [follow] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#follow}.\r\n * @property {number} [frequency] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#frequency}.\r\n * @property {number} [gravityX] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#gravityX}.\r\n * @property {number} [gravityY] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#gravityY}.\r\n * @property {integer} [maxParticles] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#maxParticles}.\r\n * @property {string} [name] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#name}.\r\n * @property {boolean} [on] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#on}.\r\n * @property {boolean} [particleBringToTop] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#particleBringToTop}.\r\n * @property {Phaser.GameObjects.Particles.Particle} [particleClass] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#particleClass}.\r\n * @property {boolean} [radial] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#radial}.\r\n * @property {number} [timeScale] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#timeScale}.\r\n * @property {boolean} [trackVisible] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#trackVisible}.\r\n * @property {boolean} [visible] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#visible}.\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [accelerationX] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#accelerationX} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [accelerationY] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#accelerationY} (emit only).\r\n * @property {number|number[]|EmitterOpOnUpdateCallback|object} [alpha] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#alpha}.\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [angle] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#angle} (emit only)\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [bounce] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#bounce} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [delay] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#delay} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [lifespan] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#lifespan} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [maxVelocityX] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityX} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [maxVelocityY] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityY} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [moveToX] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#moveToX} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [moveToY] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#moveToY} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [quantity] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity} (emit only).\r\n * @property {number|number[]|EmitterOpOnUpdateCallback|object} [rotate] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#rotate}.\r\n * @property {number|number[]|EmitterOpOnUpdateCallback|object} [scale] - As {@link Phaser.GameObjects.Particles.ParticleEmitter#setScale}.\r\n * @property {number|number[]|EmitterOpOnUpdateCallback|object} [scaleX] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#scaleX}.\r\n * @property {number|number[]|EmitterOpOnUpdateCallback|object} [scaleY] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#scaleY}.\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [speed] - As {@link Phaser.GameObjects.Particles.ParticleEmitter#setSpeed} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [speedX] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#speedX} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [speedY] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#speedY} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [tint] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#tint}.\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [x] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#x} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [y] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#y} (emit only).\r\n * @property {object} [emitZone] - As {@link Phaser.GameObjects.Particles.ParticleEmitter#setEmitZone}.\r\n * @property {ParticleEmitterBounds|ParticleEmitterBoundsAlt} [bounds] - As {@link Phaser.GameObjects.Particles.ParticleEmitter#setBounds}.\r\n * @property {object} [followOffset] - Assigns to {@link Phaser.GameObjects.Particles.ParticleEmitter#followOffset}.\r\n * @property {number} [followOffset.x] - x-coordinate of the offset.\r\n * @property {number} [followOffset.y] - y-coordinate of the offset.\r\n * @property {number|number[]|string|string[]|Phaser.Textures.Frame|Phaser.Textures.Frame[]|ParticleEmitterFrameConfig} [frames] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.\r\n */\r\n\r\n/**\r\n * @typedef {object} ParticleEmitterFrameConfig\r\n *\r\n * @property {number|number[]|string|string[]|Phaser.Textures.Frame|Phaser.Textures.Frame[]} [frames] - One or more texture frames.\r\n * @property {boolean} [cycle] - Whether texture frames will be assigned consecutively (true) or at random (false).\r\n * @property {integer} [quantity] - The number of consecutive particles receiving each texture frame, when `cycle` is true.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A particle emitter represents a single particle stream.\r\n * It controls a pool of {@link Phaser.GameObjects.Particles.Particle Particles} and is controlled by a {@link Phaser.GameObjects.Particles.ParticleEmitterManager Particle Emitter Manager}.\r\n *\r\n * @class ParticleEmitter\r\n * @memberOf Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitterManager} manager - The Emitter Manager this Emitter belongs to.\r\n * @param {ParticleEmitterConfig} config - Settings for this emitter.\r\n */\r\nvar ParticleEmitter = new Class({\r\n\r\n    Mixins: [\r\n        Components.BlendMode,\r\n        Components.Mask,\r\n        Components.ScrollFactor,\r\n        Components.Visible\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function ParticleEmitter (manager, config)\r\n    {\r\n        /**\r\n         * The Emitter Manager this Emitter belongs to.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#manager\r\n         * @type {Phaser.GameObjects.Particles.ParticleEmitterManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = manager;\r\n\r\n        /**\r\n         * The texture assigned to particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#texture\r\n         * @type {Phaser.Textures.Texture}\r\n         * @since 3.0.0\r\n         */\r\n        this.texture = manager.texture;\r\n\r\n        /**\r\n         * The texture frames assigned to particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#frames\r\n         * @type {Phaser.Textures.Frame[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.frames = [ manager.defaultFrame ];\r\n\r\n        /**\r\n         * The default texture frame assigned to particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#defaultFrame\r\n         * @type {Phaser.Textures.Frame}\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultFrame = manager.defaultFrame;\r\n\r\n        /**\r\n         * Names of simple configuration properties.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#configFastMap\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.configFastMap = [\r\n            'active',\r\n            'blendMode',\r\n            'collideBottom',\r\n            'collideLeft',\r\n            'collideRight',\r\n            'collideTop',\r\n            'deathCallback',\r\n            'deathCallbackScope',\r\n            'emitCallback',\r\n            'emitCallbackScope',\r\n            'follow',\r\n            'frequency',\r\n            'gravityX',\r\n            'gravityY',\r\n            'maxParticles',\r\n            'name',\r\n            'on',\r\n            'particleBringToTop',\r\n            'particleClass',\r\n            'radial',\r\n            'timeScale',\r\n            'trackVisible',\r\n            'visible'\r\n        ];\r\n\r\n        /**\r\n         * Names of complex configuration properties.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#configOpMap\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.configOpMap = [\r\n            'accelerationX',\r\n            'accelerationY',\r\n            'angle',\r\n            'alpha',\r\n            'bounce',\r\n            'delay',\r\n            'lifespan',\r\n            'maxVelocityX',\r\n            'maxVelocityY',\r\n            'moveToX',\r\n            'moveToY',\r\n            'quantity',\r\n            'rotate',\r\n            'scaleX',\r\n            'scaleY',\r\n            'speedX',\r\n            'speedY',\r\n            'tint',\r\n            'x',\r\n            'y'\r\n        ];\r\n\r\n        /**\r\n         * The name of this Particle Emitter.\r\n         *\r\n         * Empty by default and never populated by Phaser, this is left for developers to use.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#name\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.name = '';\r\n\r\n        /**\r\n         * The Particle Class which will be emitted by this Emitter.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#particleClass\r\n         * @type {Phaser.GameObjects.Particles.Particle}\r\n         * @default Phaser.GameObjects.Particles.Particle\r\n         * @since 3.0.0\r\n         */\r\n        this.particleClass = Particle;\r\n\r\n        /**\r\n         * The x-coordinate of the particle origin (where particles will be emitted).\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#x\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setPosition\r\n         */\r\n        this.x = new EmitterOp(config, 'x', 0);\r\n\r\n        /**\r\n         * The y-coordinate of the particle origin (where particles will be emitted).\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#y\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setPosition\r\n         */\r\n        this.y = new EmitterOp(config, 'y', 0);\r\n\r\n        /**\r\n         * A radial emitter will emit particles in all directions between angle min and max,\r\n         * using {@link Phaser.GameObjects.Particles.ParticleEmitter#speed} as the value. If set to false then this acts as a point Emitter.\r\n         * A point emitter will emit particles only in the direction derived from the speedX and speedY values.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#radial\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setRadial\r\n         */\r\n        this.radial = true;\r\n\r\n        /**\r\n         * Horizontal acceleration applied to emitted particles, in pixels per second squared.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#gravityX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setGravity\r\n         */\r\n        this.gravityX = 0;\r\n\r\n        /**\r\n         * Vertical acceleration applied to emitted particles, in pixels per second squared.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#gravityY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setGravity\r\n         */\r\n        this.gravityY = 0;\r\n\r\n        /**\r\n         * Whether accelerationX and accelerationY are non-zero. Set automatically during configuration.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#acceleration\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.acceleration = false;\r\n\r\n        /**\r\n         * Horizontal acceleration applied to emitted particles, in pixels per second squared.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#accelerationX\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelerationX = new EmitterOp(config, 'accelerationX', 0, true);\r\n\r\n        /**\r\n         * Vertical acceleration applied to emitted particles, in pixels per second squared.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#accelerationY\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelerationY = new EmitterOp(config, 'accelerationY', 0, true);\r\n\r\n        /**\r\n         * The maximum horizontal velocity of emitted particles, in pixels per second squared.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityX\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 10000\r\n         * @since 3.0.0\r\n         */\r\n        this.maxVelocityX = new EmitterOp(config, 'maxVelocityX', 10000, true);\r\n\r\n        /**\r\n         * The maximum vertical velocity of emitted particles, in pixels per second squared.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityY\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 10000\r\n         * @since 3.0.0\r\n         */\r\n        this.maxVelocityY = new EmitterOp(config, 'maxVelocityY', 10000, true);\r\n\r\n        /**\r\n         * The initial horizontal speed of emitted particles, in pixels per second.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#speedX\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setSpeedX\r\n         */\r\n        this.speedX = new EmitterOp(config, 'speedX', 0, true);\r\n\r\n        /**\r\n         * The initial vertical speed of emitted particles, in pixels per second.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#speedY\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setSpeedY\r\n         */\r\n        this.speedY = new EmitterOp(config, 'speedY', 0, true);\r\n\r\n        /**\r\n         * Whether moveToX and moveToY are nonzero. Set automatically during configuration.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#moveTo\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.moveTo = false;\r\n\r\n        /**\r\n         * The x-coordinate emitted particles move toward, when {@link Phaser.GameObjects.Particles.ParticleEmitter#moveTo} is true.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#moveToX\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.moveToX = new EmitterOp(config, 'moveToX', 0, true);\r\n\r\n        /**\r\n         * The y-coordinate emitted particles move toward, when {@link Phaser.GameObjects.Particles.ParticleEmitter#moveTo} is true.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#moveToY\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.moveToY = new EmitterOp(config, 'moveToY', 0, true);\r\n\r\n        /**\r\n         * Whether particles will rebound when they meet the emitter bounds.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#bounce\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.bounce = new EmitterOp(config, 'bounce', 0, true);\r\n\r\n        /**\r\n         * The horizontal scale of emitted particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#scaleX\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setScale\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setScaleX\r\n         */\r\n        this.scaleX = new EmitterOp(config, 'scaleX', 1);\r\n\r\n        /**\r\n         * The vertical scale of emitted particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#scaleY\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setScale\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setScaleY\r\n         */\r\n        this.scaleY = new EmitterOp(config, 'scaleY', 1);\r\n\r\n        /**\r\n         * Color tint applied to emitted particles. Any alpha component (0xAA000000) is ignored.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#tint\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0xffffffff\r\n         * @since 3.0.0\r\n         */\r\n        this.tint = new EmitterOp(config, 'tint', 0xffffffff);\r\n\r\n        /**\r\n         * The alpha (transparency) of emitted particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#alpha\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setAlpha\r\n         */\r\n        this.alpha = new EmitterOp(config, 'alpha', 1);\r\n\r\n        /**\r\n         * The lifespan of emitted particles, in ms.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#lifespan\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 1000\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setLifespan\r\n         */\r\n        this.lifespan = new EmitterOp(config, 'lifespan', 1000);\r\n\r\n        /**\r\n         * The angle of the initial velocity of emitted particles, in degrees.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#angle\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default { min: 0, max: 360 }\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setAngle\r\n         */\r\n        this.angle = new EmitterOp(config, 'angle', { min: 0, max: 360 });\r\n\r\n        /**\r\n         * The rotation of emitted particles, in degrees.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#rotate\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.rotate = new EmitterOp(config, 'rotate', 0);\r\n\r\n        /**\r\n         * A function to call when a particle is emitted.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#emitCallback\r\n         * @type {?ParticleEmitterCallback}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.emitCallback = null;\r\n\r\n        /**\r\n         * The calling context for {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallback}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#emitCallbackScope\r\n         * @type {?*}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.emitCallbackScope = null;\r\n\r\n        /**\r\n         * A function to call when a particle dies.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#deathCallback\r\n         * @type {?ParticleDeathCallback}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.deathCallback = null;\r\n\r\n        /**\r\n         * The calling context for {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallback}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#deathCallbackScope\r\n         * @type {?*}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.deathCallbackScope = null;\r\n\r\n        /**\r\n         * Set to hard limit the amount of particle objects this emitter is allowed to create.\r\n         * 0 means unlimited.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#maxParticles\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.maxParticles = 0;\r\n\r\n        /**\r\n         * How many particles are emitted each time particles are emitted (one explosion or one flow cycle).\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#quantity\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrequency\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setQuantity\r\n         */\r\n        this.quantity = new EmitterOp(config, 'quantity', 1, true);\r\n\r\n        /**\r\n         * How many ms to wait after emission before the particles start updating.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#delay\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.delay = new EmitterOp(config, 'delay', 0, true);\r\n\r\n        /**\r\n         * For a flow emitter, the time interval (>= 0) between particle flow cycles in ms.\r\n         * A value of 0 means there is one particle flow cycle for each logic update (the maximum flow frequency). This is the default setting.\r\n         * For an exploding emitter, this value will be -1.\r\n         * Calling {@link Phaser.GameObjects.Particles.ParticleEmitter#flow} also puts the emitter in flow mode (frequency >= 0).\r\n         * Calling {@link Phaser.GameObjects.Particles.ParticleEmitter#explode} also puts the emitter in explode mode (frequency = -1).\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#frequency\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrequency\r\n         */\r\n        this.frequency = 0;\r\n\r\n        /**\r\n         * Controls if the emitter is currently emitting a particle flow (when frequency >= 0).\r\n         * Already alive particles will continue to update until they expire.\r\n         * Controlled by {@link Phaser.GameObjects.Particles.ParticleEmitter#start} and {@link Phaser.GameObjects.Particles.ParticleEmitter#stop}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#on\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.on = true;\r\n\r\n        /**\r\n         * Newly emitted particles are added to the top of the particle list, i.e. rendered above those already alive.\r\n         * Set to false to send them to the back.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#particleBringToTop\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.particleBringToTop = true;\r\n\r\n        /**\r\n         * The time rate applied to active particles, affecting lifespan, movement, and tweens. Values larger than 1 are faster than normal.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#timeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.timeScale = 1;\r\n\r\n        /**\r\n         * An object describing a shape to emit particles from.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#emitZone\r\n         * @type {?Phaser.GameObjects.Particles.Zones.EdgeZone|Phaser.GameObjects.Particles.Zones.RandomZone}\r\n         * @default null\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setEmitZone\r\n         */\r\n        this.emitZone = null;\r\n\r\n        /**\r\n         * An object describing a shape that deactivates particles when they interact with it.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#deathZone\r\n         * @type {?Phaser.GameObjects.Particles.Zones.DeathZone}\r\n         * @default null\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setDeathZone\r\n         */\r\n        this.deathZone = null;\r\n\r\n        /**\r\n         * A rectangular boundary constraining particle movement.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#bounds\r\n         * @type {?Phaser.Geom.Rectangle}\r\n         * @default null\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setBounds\r\n         */\r\n        this.bounds = null;\r\n\r\n        /**\r\n         * Whether particles interact with the left edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#collideLeft\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.collideLeft = true;\r\n\r\n        /**\r\n         * Whether particles interact with the right edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#collideRight\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.collideRight = true;\r\n\r\n        /**\r\n         * Whether particles interact with the top edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#collideTop\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.collideTop = true;\r\n\r\n        /**\r\n         * Whether particles interact with the bottom edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#collideBottom\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.collideBottom = true;\r\n\r\n        /**\r\n         * Whether this emitter updates itself and its particles.\r\n         *\r\n         * Controlled by {@link Phaser.GameObjects.Particles.ParticleEmitter#pause}\r\n         * and {@link Phaser.GameObjects.Particles.ParticleEmitter#resume}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#active\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.active = true;\r\n\r\n        /**\r\n         * Set this to false to hide any active particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#visible\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setVisible\r\n         */\r\n        this.visible = true;\r\n\r\n        /**\r\n         * The blend mode of this emitter's particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#blendMode\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setBlendMode\r\n         */\r\n        this.blendMode = BlendModes.NORMAL;\r\n\r\n        /**\r\n         * A Game Object whose position is used as the particle origin.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#follow\r\n         * @type {?Phaser.GameObjects.GameObject}\r\n         * @default null\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#stopFollow\r\n         */\r\n        this.follow = null;\r\n\r\n        /**\r\n         * The offset of the particle origin from the {@link Phaser.GameObjects.Particles.ParticleEmitter#follow} target.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#followOffset\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n         */\r\n        this.followOffset = new Vector2();\r\n\r\n        /**\r\n         * Whether the emitter's {@link Phaser.GameObjects.Particles.ParticleEmitter#visible} state will track\r\n         * the {@link Phaser.GameObjects.Particles.ParticleEmitter#follow} target's visibility state.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#trackVisible\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n         */\r\n        this.trackVisible = false;\r\n\r\n        /**\r\n         * The current texture frame, as an index of {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#currentFrame\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n         */\r\n        this.currentFrame = 0;\r\n\r\n        /**\r\n         * Whether texture {@link Phaser.GameObjects.Particles.ParticleEmitter#frames} are selected at random.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#randomFrame\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n         */\r\n        this.randomFrame = true;\r\n\r\n        /**\r\n         * The number of consecutive particles that receive a single texture frame (per frame cycle).\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#frameQuantity\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n         */\r\n        this.frameQuantity = 1;\r\n\r\n        /**\r\n         * Inactive particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#dead\r\n         * @type {Phaser.GameObjects.Particles.Particle[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.dead = [];\r\n\r\n        /**\r\n         * Active particles\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#alive\r\n         * @type {Phaser.GameObjects.Particles.Particle[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.alive = [];\r\n\r\n        /**\r\n         * The time until the next flow cycle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#_counter\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._counter = 0;\r\n\r\n        /**\r\n         * Counts up to {@link Phaser.GameObjects.Particles.ParticleEmitter#frameQuantity}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#_frameCounter\r\n         * @type {integer}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._frameCounter = 0;\r\n\r\n        if (config)\r\n        {\r\n            this.fromJSON(config);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Merges configuration settings into the emitter's current settings.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#fromJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ParticleEmitterConfig} config - Settings for this emitter.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    fromJSON: function (config)\r\n    {\r\n        if (!config)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        //  Only update properties from their current state if they exist in the given config\r\n\r\n        var i = 0;\r\n        var key = '';\r\n\r\n        for (i = 0; i < this.configFastMap.length; i++)\r\n        {\r\n            key = this.configFastMap[i];\r\n\r\n            if (HasValue(config, key))\r\n            {\r\n                this[key] = GetFastValue(config, key);\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < this.configOpMap.length; i++)\r\n        {\r\n            key = this.configOpMap[i];\r\n\r\n            if (HasValue(config, key))\r\n            {\r\n                this[key].loadConfig(config);\r\n            }\r\n        }\r\n\r\n        this.acceleration = (this.accelerationX.propertyValue !== 0 || this.accelerationY.propertyValue !== 0);\r\n\r\n        this.moveTo = (this.moveToX.propertyValue !== 0 || this.moveToY.propertyValue !== 0);\r\n\r\n        //  Special 'speed' override\r\n\r\n        if (HasValue(config, 'speed'))\r\n        {\r\n            this.speedX.loadConfig(config, 'speed');\r\n            this.speedY = null;\r\n        }\r\n\r\n        //  If you specify speedX, speedY or moveTo then it changes the emitter from radial to a point emitter\r\n        if (HasAny(config, [ 'speedX', 'speedY' ]) || this.moveTo)\r\n        {\r\n            this.radial = false;\r\n        }\r\n\r\n        //  Special 'scale' override\r\n\r\n        if (HasValue(config, 'scale'))\r\n        {\r\n            this.scaleX.loadConfig(config, 'scale');\r\n            this.scaleY = null;\r\n        }\r\n\r\n        if (HasValue(config, 'callbackScope'))\r\n        {\r\n            var callbackScope = GetFastValue(config, 'callbackScope', null);\r\n\r\n            this.emitCallbackScope = callbackScope;\r\n            this.deathCallbackScope = callbackScope;\r\n        }\r\n\r\n        if (HasValue(config, 'emitZone'))\r\n        {\r\n            this.setEmitZone(config.emitZone);\r\n        }\r\n\r\n        if (HasValue(config, 'deathZone'))\r\n        {\r\n            this.setDeathZone(config.deathZone);\r\n        }\r\n\r\n        if (HasValue(config, 'bounds'))\r\n        {\r\n            this.setBounds(config.bounds);\r\n        }\r\n\r\n        if (HasValue(config, 'followOffset'))\r\n        {\r\n            this.followOffset.setFromObject(GetFastValue(config, 'followOffset', 0));\r\n        }\r\n\r\n        if (HasValue(config, 'frame'))\r\n        {\r\n            this.setFrame(config.frame);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a description of this emitter suitable for JSON serialization.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} [output] - An object to copy output into.\r\n     *\r\n     * @return {object} - The output object.\r\n     */\r\n    toJSON: function (output)\r\n    {\r\n        if (output === undefined) { output = {}; }\r\n\r\n        var i = 0;\r\n        var key = '';\r\n\r\n        for (i = 0; i < this.configFastMap.length; i++)\r\n        {\r\n            key = this.configFastMap[i];\r\n\r\n            output[key] = this[key];\r\n        }\r\n\r\n        for (i = 0; i < this.configOpMap.length; i++)\r\n        {\r\n            key = this.configOpMap[i];\r\n\r\n            if (this[key])\r\n            {\r\n                output[key] = this[key].toJSON();\r\n            }\r\n        }\r\n\r\n        //  special handlers\r\n        if (!this.speedY)\r\n        {\r\n            delete output.speedX;\r\n            output.speed = this.speedX.toJSON();\r\n        }\r\n\r\n        if (!this.scaleY)\r\n        {\r\n            delete output.scaleX;\r\n            output.scale = this.scaleX.toJSON();\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Continuously moves the particle origin to follow a Game Object's position.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} target - The Game Object to follow.\r\n     * @param {number} [offsetX=0] - Horizontal offset of the particle origin from the Game Object.\r\n     * @param {number} [offsetY=0] - Vertical offset of the particle origin from the Game Object.\r\n     * @param {boolean} [trackVisible=false] - Whether the emitter's visible state will track the target's visible state.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    startFollow: function (target, offsetX, offsetY, trackVisible)\r\n    {\r\n        if (offsetX === undefined) { offsetX = 0; }\r\n        if (offsetY === undefined) { offsetY = 0; }\r\n        if (trackVisible === undefined) { trackVisible = false; }\r\n\r\n        this.follow = target;\r\n        this.followOffset.set(offsetX, offsetY);\r\n        this.trackVisible = trackVisible;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stops following a Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#stopFollow\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    stopFollow: function ()\r\n    {\r\n        this.follow = null;\r\n        this.followOffset.set(0, 0);\r\n        this.trackVisible = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Chooses a texture frame from {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#getFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Textures.Frame} The texture frame.\r\n     */\r\n    getFrame: function ()\r\n    {\r\n        if (this.frames.length === 1)\r\n        {\r\n            return this.defaultFrame;\r\n        }\r\n        else if (this.randomFrame)\r\n        {\r\n            return GetRandom(this.frames);\r\n        }\r\n        else\r\n        {\r\n            var frame = this.frames[this.currentFrame];\r\n\r\n            this._frameCounter++;\r\n\r\n            if (this._frameCounter === this.frameQuantity)\r\n            {\r\n                this._frameCounter = 0;\r\n                this.currentFrame = Wrap(this.currentFrame + 1, 0, this._frameLength);\r\n            }\r\n\r\n            return frame;\r\n        }\r\n    },\r\n\r\n    // frame: 0\r\n    // frame: 'red'\r\n    // frame: [ 0, 1, 2, 3 ]\r\n    // frame: [ 'red', 'green', 'blue', 'pink', 'white' ]\r\n    // frame: { frames: [ 'red', 'green', 'blue', 'pink', 'white' ], [cycle: bool], [quantity: int] }\r\n\r\n    /**\r\n     * Sets a pattern for assigning texture frames to emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(array|string|integer|ParticleEmitterFrameConfig)} frames - One or more texture frames, or a configuration object.\r\n     * @param {boolean} [pickRandom=true] - Whether frames should be assigned at random from `frames`.\r\n     * @param {integer} [quantity=1] - The number of consecutive particles that will receive each frame.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setFrame: function (frames, pickRandom, quantity)\r\n    {\r\n        if (pickRandom === undefined) { pickRandom = true; }\r\n        if (quantity === undefined) { quantity = 1; }\r\n\r\n        this.randomFrame = pickRandom;\r\n        this.frameQuantity = quantity;\r\n        this.currentFrame = 0;\r\n        this._frameCounter = 0;\r\n\r\n        var t = typeof (frames);\r\n\r\n        if (Array.isArray(frames) || t === 'string' || t === 'number')\r\n        {\r\n            this.manager.setEmitterFrames(frames, this);\r\n        }\r\n        else if (t === 'object')\r\n        {\r\n            var frameConfig = frames;\r\n\r\n            frames = GetFastValue(frameConfig, 'frames', null);\r\n\r\n            if (frames)\r\n            {\r\n                this.manager.setEmitterFrames(frames, this);\r\n            }\r\n\r\n            var isCycle = GetFastValue(frameConfig, 'cycle', false);\r\n\r\n            this.randomFrame = (isCycle) ? false : true;\r\n\r\n            this.frameQuantity = GetFastValue(frameConfig, 'quantity', quantity);\r\n        }\r\n\r\n        this._frameLength = this.frames.length;\r\n\r\n        if (this._frameLength === 1)\r\n        {\r\n            this.frameQuantity = 1;\r\n            this.randomFrame = false;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle movement on or off.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setRadial\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [value=true] - Radial mode (true) or point mode (true).\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setRadial: function (value)\r\n    {\r\n        if (value === undefined) { value = true; }\r\n\r\n        this.radial = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the position of the emitter's particle origin.\r\n     * New particles will be emitted here.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number|float[]|EmitterOpOnEmitCallback|object} x - The x-coordinate of the particle origin.\r\n     * @param {number|float[]|EmitterOpOnEmitCallback|object} y - The y-coordinate of the particle origin.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        this.x.onChange(x);\r\n        this.y.onChange(y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets or modifies a rectangular boundary constraining the particles.\r\n     *\r\n     * To remove the boundary, set {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds} to null.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|ParticleEmitterBounds|ParticleEmitterBoundsAlt)} x - The x-coordinate of the left edge of the boundary, or an object representing a rectangle.\r\n     * @param {number} y - The y-coordinate of the top edge of the boundary.\r\n     * @param {number} width - The width of the boundary.\r\n     * @param {number} height - The height of the boundary.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setBounds: function (x, y, width, height)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            var obj = x;\r\n\r\n            x = obj.x;\r\n            y = obj.y;\r\n            width = (HasValue(obj, 'w')) ? obj.w : obj.width;\r\n            height = (HasValue(obj, 'h')) ? obj.h : obj.height;\r\n        }\r\n\r\n        if (this.bounds)\r\n        {\r\n            this.bounds.setTo(x, y, width, height);\r\n        }\r\n        else\r\n        {\r\n            this.bounds = new Rectangle(x, y, width, height);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the initial horizontal speed of emitted particles.\r\n     * Changes the emitter to point mode.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setSpeedX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number|float[]|EmitterOpOnEmitCallback|object} value - The speed, in pixels per second.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setSpeedX: function (value)\r\n    {\r\n        this.speedX.onChange(value);\r\n\r\n        //  If you specify speedX and Y then it changes the emitter from radial to a point emitter\r\n        this.radial = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the initial vertical speed of emitted particles.\r\n     * Changes the emitter to point mode.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setSpeedY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number|float[]|EmitterOpOnEmitCallback|object} value - The speed, in pixels per second.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setSpeedY: function (value)\r\n    {\r\n        if (this.speedY)\r\n        {\r\n            this.speedY.onChange(value);\r\n\r\n            //  If you specify speedX and Y then it changes the emitter from radial to a point emitter\r\n            this.radial = false;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the initial radial speed of emitted particles.\r\n     * Changes the emitter to radial mode.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setSpeed\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number|float[]|EmitterOpOnEmitCallback|object} value - The speed, in pixels per second.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setSpeed: function (value)\r\n    {\r\n        this.speedX.onChange(value);\r\n        this.speedY = null;\r\n\r\n        //  If you specify speedX and Y then it changes the emitter from radial to a point emitter\r\n        this.radial = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal scale of emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setScaleX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number|float[]|EmitterOpOnUpdateCallback|object} value - The scale, relative to 1.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setScaleX: function (value)\r\n    {\r\n        this.scaleX.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the vertical scale of emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setScaleY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number|float[]|EmitterOpOnUpdateCallback|object} value - The scale, relative to 1.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setScaleY: function (value)\r\n    {\r\n        this.scaleY.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the scale of emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setScale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number|float[]|EmitterOpOnUpdateCallback|object} value - The scale, relative to 1.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setScale: function (value)\r\n    {\r\n        this.scaleX.onChange(value);\r\n        this.scaleY = null;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal gravity applied to emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setGravityX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - Acceleration due to gravity, in pixels per second squared.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setGravityX: function (value)\r\n    {\r\n        this.gravityX = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the vertical gravity applied to emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setGravityY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - Acceleration due to gravity, in pixels per second squared.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setGravityY: function (value)\r\n    {\r\n        this.gravityY = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the gravity applied to emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setGravity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - Horizontal acceleration due to gravity, in pixels per second squared.\r\n     * @param {number} y - Vertical acceleration due to gravity, in pixels per second squared.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setGravity: function (x, y)\r\n    {\r\n        this.gravityX = x;\r\n        this.gravityY = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the opacity of emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setAlpha\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number|float[]|EmitterOpOnUpdateCallback|object} value - A value between 0 (transparent) and 1 (opaque).\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setAlpha: function (value)\r\n    {\r\n        this.alpha.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the angle of a {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle stream.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setEmitterAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number|float[]|EmitterOpOnEmitCallback|object} value - The angle of the initial velocity of emitted particles.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setEmitterAngle: function (value)\r\n    {\r\n        this.angle.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the angle of a {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle stream.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number|float[]|EmitterOpOnEmitCallback|object} value - The angle of the initial velocity of emitted particles.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setAngle: function (value)\r\n    {\r\n        this.angle.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the lifespan of newly emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setLifespan\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number|float[]|EmitterOpOnEmitCallback|object} value - The particle lifespan, in ms.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setLifespan: function (value)\r\n    {\r\n        this.lifespan.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the number of particles released at each flow cycle or explosion.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setQuantity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number|float[]|EmitterOpOnEmitCallback|object} quantity - The number of particles to release at each flow cycle or explosion.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setQuantity: function (quantity)\r\n    {\r\n        this.quantity.onChange(quantity);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the emitter's {@link Phaser.GameObjects.Particles.ParticleEmitter#frequency}\r\n     * and {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setFrequency\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} frequency - The time interval (>= 0) of each flow cycle, in ms; or -1 to put the emitter in explosion mode.\r\n     * @param {number|float[]|EmitterOpOnEmitCallback|object} [quantity] - The number of particles to release at each flow cycle or explosion.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setFrequency: function (frequency, quantity)\r\n    {\r\n        this.frequency = frequency;\r\n\r\n        this._counter = 0;\r\n\r\n        if (quantity)\r\n        {\r\n            this.quantity.onChange(quantity);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets or removes the {@link Phaser.GameObjects.Particles.ParticleEmitter#emitZone}.\r\n     *\r\n     * An {@link ParticleEmitterEdgeZoneConfig EdgeZone} places particles on its edges. Its {@link EdgeZoneSource source} can be a Curve, Path, Circle, Ellipse, Line, Polygon, Rectangle, or Triangle; or any object with a suitable {@link EdgeZoneSourceCallback getPoints} method.\r\n     *\r\n     * A {@link ParticleEmitterRandomZoneConfig RandomZone} places randomly within its interior. Its {@link RandomZoneSource source} can be a Circle, Ellipse, Line, Polygon, Rectangle, or Triangle; or any object with a suitable {@link RandomZoneSourceCallback getRandomPoint} method.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setEmitZone\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ParticleEmitterEdgeZoneConfig|ParticleEmitterRandomZoneConfig} [zoneConfig] - An object describing the zone, or `undefined` to remove any current emit zone.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setEmitZone: function (zoneConfig)\r\n    {\r\n        if (zoneConfig === undefined)\r\n        {\r\n            this.emitZone = null;\r\n        }\r\n        else\r\n        {\r\n            //  Where source = Geom like Circle, or a Path or Curve\r\n            //  emitZone: { type: 'random', source: X }\r\n            //  emitZone: { type: 'edge', source: X, quantity: 32, [stepRate=0], [yoyo=false], [seamless=true] }\r\n\r\n            var type = GetFastValue(zoneConfig, 'type', 'random');\r\n            var source = GetFastValue(zoneConfig, 'source', null);\r\n\r\n            switch (type)\r\n            {\r\n                case 'random':\r\n\r\n                    this.emitZone = new RandomZone(source);\r\n\r\n                    break;\r\n\r\n                case 'edge':\r\n\r\n                    var quantity = GetFastValue(zoneConfig, 'quantity', 1);\r\n                    var stepRate = GetFastValue(zoneConfig, 'stepRate', 0);\r\n                    var yoyo = GetFastValue(zoneConfig, 'yoyo', false);\r\n                    var seamless = GetFastValue(zoneConfig, 'seamless', true);\r\n\r\n                    this.emitZone = new EdgeZone(source, quantity, stepRate, yoyo, seamless);\r\n\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets or removes the {@link Phaser.GameObjects.Particles.ParticleEmitter#deathZone}.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setDeathZone\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ParticleEmitterDeathZoneConfig} [zoneConfig] - An object describing the zone, or `undefined` to remove any current death zone.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setDeathZone: function (zoneConfig)\r\n    {\r\n        if (zoneConfig === undefined)\r\n        {\r\n            this.deathZone = null;\r\n        }\r\n        else\r\n        {\r\n            //  Where source = Geom like Circle or Rect that supports a 'contains' function\r\n            //  deathZone: { type: 'onEnter', source: X }\r\n            //  deathZone: { type: 'onLeave', source: X }\r\n\r\n            var type = GetFastValue(zoneConfig, 'type', 'onEnter');\r\n            var source = GetFastValue(zoneConfig, 'source', null);\r\n\r\n            if (source && typeof source.contains === 'function')\r\n            {\r\n                var killOnEnter = (type === 'onEnter') ? true : false;\r\n\r\n                this.deathZone = new DeathZone(source, killOnEnter);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates inactive particles and adds them to this emitter's pool.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#reserve\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} particleCount - The number of particles to create.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    reserve: function (particleCount)\r\n    {\r\n        var dead = this.dead;\r\n\r\n        for (var i = 0; i < particleCount; i++)\r\n        {\r\n            dead.push(new this.particleClass(this));\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the number of active (in-use) particles in this emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#getAliveParticleCount\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The number of particles with `active=true`.\r\n     */\r\n    getAliveParticleCount: function ()\r\n    {\r\n        return this.alive.length;\r\n    },\r\n\r\n    /**\r\n     * Gets the number of inactive (available) particles in this emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#getDeadParticleCount\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The number of particles with `active=false`.\r\n     */\r\n    getDeadParticleCount: function ()\r\n    {\r\n        return this.dead.length;\r\n    },\r\n\r\n    /**\r\n     * Gets the total number of particles in this emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#getParticleCount\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The number of particles, including both alive and dead.\r\n     */\r\n    getParticleCount: function ()\r\n    {\r\n        return this.getAliveParticleCount() + this.getDeadParticleCount();\r\n    },\r\n\r\n    /**\r\n     * Whether this emitter is at its limit (if set).\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#atLimit\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Returns `true` if this Emitter is at its limit, or `false` if no limit, or below the `maxParticles` level.\r\n     */\r\n    atLimit: function ()\r\n    {\r\n        return (this.maxParticles > 0 && this.getParticleCount() === this.maxParticles);\r\n    },\r\n\r\n    /**\r\n     * Sets a function to call for each newly emitted particle.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#onParticleEmit\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ParticleEmitterCallback} callback - The function.\r\n     * @param {*} [context] - The calling context.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    onParticleEmit: function (callback, context)\r\n    {\r\n        if (callback === undefined)\r\n        {\r\n            //  Clear any previously set callback\r\n            this.emitCallback = null;\r\n            this.emitCallbackScope = null;\r\n        }\r\n        else if (typeof callback === 'function')\r\n        {\r\n            this.emitCallback = callback;\r\n\r\n            if (context)\r\n            {\r\n                this.emitCallbackScope = context;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a function to call for each particle death.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#onParticleDeath\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ParticleDeathCallback} callback - The function.\r\n     * @param {*} [context] - The function's calling context.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    onParticleDeath: function (callback, context)\r\n    {\r\n        if (callback === undefined)\r\n        {\r\n            //  Clear any previously set callback\r\n            this.deathCallback = null;\r\n            this.deathCallbackScope = null;\r\n        }\r\n        else if (typeof callback === 'function')\r\n        {\r\n            this.deathCallback = callback;\r\n\r\n            if (context)\r\n            {\r\n                this.deathCallbackScope = context;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Deactivates every particle in this emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#killAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    killAll: function ()\r\n    {\r\n        var dead = this.dead;\r\n        var alive = this.alive;\r\n\r\n        while (alive.length > 0)\r\n        {\r\n            dead.push(alive.pop());\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calls a function for each active particle in this emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#forEachAlive\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ParticleEmitterCallback} callback - The function.\r\n     * @param {*} context - The function's calling context.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    forEachAlive: function (callback, context)\r\n    {\r\n        var alive = this.alive;\r\n        var length = alive.length;\r\n\r\n        for (var index = 0; index < length; ++index)\r\n        {\r\n            //  Sends the Particle and the Emitter\r\n            callback.call(context, alive[index], this);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calls a function for each inactive particle in this emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#forEachDead\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ParticleEmitterCallback} callback - The function.\r\n     * @param {*} context - The function's calling context.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    forEachDead: function (callback, context)\r\n    {\r\n        var dead = this.dead;\r\n        var length = dead.length;\r\n\r\n        for (var index = 0; index < length; ++index)\r\n        {\r\n            //  Sends the Particle and the Emitter\r\n            callback.call(context, dead[index], this);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#on} the emitter and resets the flow counter.\r\n     *\r\n     * If this emitter is in flow mode (frequency >= 0; the default), the particle flow will start (or restart).\r\n     *\r\n     * If this emitter is in explode mode (frequency = -1), nothing will happen.\r\n     * Use {@link Phaser.GameObjects.Particles.ParticleEmitter#explode} or {@link Phaser.GameObjects.Particles.ParticleEmitter#flow} instead.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#start\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    start: function ()\r\n    {\r\n        this.on = true;\r\n\r\n        this._counter = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#on off} the emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#stop\r\n     * @since 3.11.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    stop: function ()\r\n    {\r\n        this.on = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * {@link Phaser.GameObjects.Particles.ParticleEmitter#active Deactivates} the emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    pause: function ()\r\n    {\r\n        this.active = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * {@link Phaser.GameObjects.Particles.ParticleEmitter#active Activates} the emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    resume: function ()\r\n    {\r\n        this.active = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sorts active particles with {@link Phaser.GameObjects.Particles.ParticleEmitter#depthSortCallback}.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#depthSort\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    depthSort: function ()\r\n    {\r\n        StableSort.inplace(this.alive, this.depthSortCallback);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Puts the emitter in flow mode (frequency >= 0) and starts (or restarts) a particle flow.\r\n     *\r\n     * To resume a flow at the current frequency and quantity, use {@link Phaser.GameObjects.Particles.ParticleEmitter#start} instead.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#flow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} frequency - The time interval (>= 0) of each flow cycle, in ms.\r\n     * @param {number|float[]|EmitterOpOnEmitCallback|object} [count=1] - The number of particles to emit at each flow cycle.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    flow: function (frequency, count)\r\n    {\r\n        if (count === undefined) { count = 1; }\r\n\r\n        this.frequency = frequency;\r\n\r\n        this.quantity.onChange(count);\r\n\r\n        return this.start();\r\n    },\r\n\r\n    /**\r\n     * Puts the emitter in explode mode (frequency = -1), stopping any current particle flow, and emits several particles all at once.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#explode\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} count - The amount of Particles to emit.\r\n     * @param {number} x - The x coordinate to emit the Particles from.\r\n     * @param {number} y - The y coordinate to emit the Particles from.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.Particle} The most recently emitted Particle.\r\n     */\r\n    explode: function (count, x, y)\r\n    {\r\n        this.frequency = -1;\r\n\r\n        return this.emitParticle(count, x, y);\r\n    },\r\n\r\n    /**\r\n     * Emits particles at a given position (or the emitter's current position).\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#emitParticleAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=this.x] - The x coordinate to emit the Particles from.\r\n     * @param {number} [y=this.x] - The y coordinate to emit the Particles from.\r\n     * @param {integer} [count=this.quantity] - The number of Particles to emit.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.Particle} The most recently emitted Particle.\r\n     */\r\n    emitParticleAt: function (x, y, count)\r\n    {\r\n        return this.emitParticle(count, x, y);\r\n    },\r\n\r\n    /**\r\n     * Emits particles at a given position (or the emitter's current position).\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#emitParticle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [count=this.quantity] - The number of Particles to emit.\r\n     * @param {number} [x=this.x] - The x coordinate to emit the Particles from.\r\n     * @param {number} [y=this.x] - The y coordinate to emit the Particles from.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.Particle} The most recently emitted Particle.\r\n     *\r\n     * @see Phaser.GameObjects.Particles.Particle#fire\r\n     */\r\n    emitParticle: function (count, x, y)\r\n    {\r\n        if (this.atLimit())\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (count === undefined)\r\n        {\r\n            count = this.quantity.onEmit();\r\n        }\r\n\r\n        var dead = this.dead;\r\n\r\n        for (var i = 0; i < count; i++)\r\n        {\r\n            var particle;\r\n\r\n            if (dead.length > 0)\r\n            {\r\n                particle = dead.pop();\r\n            }\r\n            else\r\n            {\r\n                particle = new this.particleClass(this);\r\n            }\r\n\r\n            particle.fire(x, y);\r\n\r\n            if (this.particleBringToTop)\r\n            {\r\n                this.alive.push(particle);\r\n            }\r\n            else\r\n            {\r\n                this.alive.unshift(particle);\r\n            }\r\n\r\n            if (this.emitCallback)\r\n            {\r\n                this.emitCallback.call(this.emitCallbackScope, particle, this);\r\n            }\r\n\r\n            if (this.atLimit())\r\n            {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return particle;\r\n    },\r\n\r\n    /**\r\n     * Updates this emitter and its particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#preUpdate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    preUpdate: function (time, delta)\r\n    {\r\n        //  Scale the delta\r\n        delta *= this.timeScale;\r\n\r\n        var step = (delta / 1000);\r\n\r\n        if (this.trackVisible)\r\n        {\r\n            this.visible = this.follow.visible;\r\n        }\r\n\r\n        //  Any particle processors?\r\n        var processors = this.manager.getProcessors();\r\n\r\n        var particles = this.alive;\r\n        var length = particles.length;\r\n\r\n        for (var index = 0; index < length; index++)\r\n        {\r\n            var particle = particles[index];\r\n\r\n            //  update returns `true` if the particle is now dead (lifeStep < 0)\r\n            if (particle.update(delta, step, processors))\r\n            {\r\n                //  Moves the dead particle to the end of the particles array (ready for splicing out later)\r\n                var last = particles[length - 1];\r\n\r\n                particles[length - 1] = particle;\r\n                particles[index] = last;\r\n\r\n                index -= 1;\r\n                length -= 1;\r\n            }\r\n        }\r\n\r\n        //  Move dead particles to the dead array\r\n        var deadLength = particles.length - length;\r\n\r\n        if (deadLength > 0)\r\n        {\r\n            var rip = particles.splice(particles.length - deadLength, deadLength);\r\n\r\n            var deathCallback = this.deathCallback;\r\n            var deathCallbackScope = this.deathCallbackScope;\r\n\r\n            if (deathCallback)\r\n            {\r\n                for (var i = 0; i < rip.length; i++)\r\n                {\r\n                    deathCallback.call(deathCallbackScope, rip[i]);\r\n                }\r\n            }\r\n\r\n            this.dead.concat(rip);\r\n\r\n            StableSort.inplace(particles, this.indexSortCallback);\r\n        }\r\n\r\n        if (!this.on)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (this.frequency === 0)\r\n        {\r\n            this.emitParticle();\r\n        }\r\n        else if (this.frequency > 0)\r\n        {\r\n            this._counter -= delta;\r\n\r\n            if (this._counter <= 0)\r\n            {\r\n                this.emitParticle();\r\n\r\n                //  counter = frequency - remained from previous delta\r\n                this._counter = (this.frequency - Math.abs(this._counter));\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Calculates the difference of two particles, for sorting them by depth.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#depthSortCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} a - The first particle.\r\n     * @param {object} b - The second particle.\r\n     *\r\n     * @return {integer} The difference of a and b's y coordinates.\r\n     */\r\n    depthSortCallback: function (a, b)\r\n    {\r\n        return a.y - b.y;\r\n    },\r\n\r\n    /**\r\n     * Calculates the difference of two particles, for sorting them by index.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#indexSortCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} a - The first particle.\r\n     * @param {object} b - The second particle.\r\n     *\r\n     * @return {integer} The difference of a and b's `index` properties.\r\n     */\r\n    indexSortCallback: function (a, b)\r\n    {\r\n        return a.index - b.index;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = ParticleEmitter;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BlendModes","Class","Components","DeathZone","EdgeZone","EmitterOp","GetFastValue","GetRandom","HasAny","HasValue","Particle","RandomZone","Rectangle","StableSort","Vector2","Wrap","ParticleEmitter","Mixins","BlendMode","Mask","ScrollFactor","Visible","initialize","manager","config","texture","frames","defaultFrame","configFastMap","configOpMap","name","particleClass","x","y","radial","gravityY","gravityX","acceleration","accelerationX","accelerationY","maxVelocityX","maxVelocityY","speedX","speedY","moveTo","moveToX","moveToY","bounce","scaleX","scaleY","tint","alpha","lifespan","angle","min","max","rotate","deathCallbackScope","deathCallback","emitCallbackScope","emitCallback","maxParticles","quantity","delay","frequency","particleBringToTop","on","timeScale","bounds","deathZone","emitZone","visible","active","collideBottom","collideTop","collideRight","collideLeft","blendMode","NORMAL","follow","followOffset","trackVisible","currentFrame","randomFrame","frameQuantity","dead","alive","_frameCounter","_counter","fromJSON","i","length","key","loadConfig","propertyValue","callbackScope","setEmitZone","setDeathZone","setBounds","setFromObject","setFrame","frame","toJSON","output","undefined","speed","scale","startFollow","target","offsetX","offsetY","set","stopFollow","getFrame","_frameLength","pickRandom","t","Array","isArray","setEmitterFrames","frameConfig","isCycle","setRadial","value","setPosition","onChange","width","height","obj","w","h","setTo","setSpeedX","setSpeedY","setSpeed","setScaleX","setScaleY","setScale","setGravityX","setGravityY","setGravity","setAlpha","setEmitterAngle","setAngle","setLifespan","setQuantity","setFrequency","zoneConfig","type","source","stepRate","yoyo","seamless","contains","killOnEnter","reserve","particleCount","push","getAliveParticleCount","getDeadParticleCount","getParticleCount","atLimit","onParticleEmit","callback","context","onParticleDeath","killAll","pop","forEachAlive","index","call","forEachDead","start","stop","pause","resume","depthSort","inplace","depthSortCallback","flow","count","explode","emitParticle","emitParticleAt","onEmit","particle","fire","unshift","preUpdate","time","delta","step","processors","getProcessors","particles","update","last","deadLength","rip","splice","concat","indexSortCallback","Math","abs","a","b"]
}
