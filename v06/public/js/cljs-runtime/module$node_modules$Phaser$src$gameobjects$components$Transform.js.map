{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$components$Transform.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/components/Transform.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$components$Transform\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar MATH_CONST = require('../../math/const');\r\nvar TransformMatrix = require('./TransformMatrix');\r\nvar WrapAngle = require('../../math/angle/Wrap');\r\nvar WrapAngleDegrees = require('../../math/angle/WrapDegrees');\r\n\r\n//  global bitmask flag for GameObject.renderMask (used by Scale)\r\nvar _FLAG = 4; // 0100\r\n\r\n/**\r\n * Provides methods used for getting and setting the position, scale and rotation of a Game Object.\r\n *\r\n * @name Phaser.GameObjects.Components.Transform\r\n * @since 3.0.0\r\n */\r\n\r\nvar Transform = {\r\n\r\n    /**\r\n     * Private internal value. Holds the horizontal scale value.\r\n     * \r\n     * @name Phaser.GameObjects.Components.Transform#_scaleX\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    _scaleX: 1,\r\n\r\n    /**\r\n     * Private internal value. Holds the vertical scale value.\r\n     * \r\n     * @name Phaser.GameObjects.Components.Transform#_scaleY\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    _scaleY: 1,\r\n\r\n    /**\r\n     * Private internal value. Holds the rotation value in radians.\r\n     * \r\n     * @name Phaser.GameObjects.Components.Transform#_rotation\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    _rotation: 0,\r\n\r\n    /**\r\n     * The x position of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Transform#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    x: 0,\r\n\r\n    /**\r\n     * The y position of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Transform#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    y: 0,\r\n\r\n    /**\r\n     * The z position of this Game Object.\r\n     * Note: Do not use this value to set the z-index, instead see the `depth` property.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Transform#z\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    z: 0,\r\n\r\n    /**\r\n     * The w position of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Transform#w\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    w: 0,\r\n\r\n    /**\r\n     * The horizontal scale of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Transform#scaleX\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    scaleX: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._scaleX;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._scaleX = value;\r\n\r\n            if (this._scaleX === 0)\r\n            {\r\n                this.renderFlags &= ~_FLAG;\r\n            }\r\n            else\r\n            {\r\n                this.renderFlags |= _FLAG;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The vertical scale of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Transform#scaleY\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    scaleY: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._scaleY;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._scaleY = value;\r\n\r\n            if (this._scaleY === 0)\r\n            {\r\n                this.renderFlags &= ~_FLAG;\r\n            }\r\n            else\r\n            {\r\n                this.renderFlags |= _FLAG;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The angle of this Game Object as expressed in degrees.\r\n     *\r\n     * Where 0 is to the right, 90 is down, 180 is left.\r\n     *\r\n     * If you prefer to work in radians, see the `rotation` property instead.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Transform#angle\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    angle: {\r\n\r\n        get: function ()\r\n        {\r\n            return WrapAngleDegrees(this._rotation * MATH_CONST.RAD_TO_DEG);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            //  value is in degrees\r\n            this.rotation = WrapAngleDegrees(value) * MATH_CONST.DEG_TO_RAD;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The angle of this Game Object in radians.\r\n     *\r\n     * If you prefer to work in degrees, see the `angle` property instead.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Transform#rotation\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    rotation: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._rotation;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            //  value is in radians\r\n            this._rotation = WrapAngle(value);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the position of this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Transform#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The x position of this Game Object.\r\n     * @param {number} [y=x] - The y position of this Game Object. If not set it will use the `x` value.\r\n     * @param {number} [z=0] - The z position of this Game Object.\r\n     * @param {number} [w=0] - The w position of this Game Object.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setPosition: function (x, y, z, w)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = x; }\r\n        if (z === undefined) { z = 0; }\r\n        if (w === undefined) { w = 0; }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the position of this Game Object to be a random position within the confines of\r\n     * the given area.\r\n     * \r\n     * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\r\n     *\r\n     * The position does not factor in the size of this Game Object, meaning that only the origin is\r\n     * guaranteed to be within the area.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Transform#setRandomPosition\r\n     * @since 3.8.0\r\n     *\r\n     * @param {number} [x=0] - The x position of the top-left of the random area.\r\n     * @param {number} [y=0] - The y position of the top-left of the random area.\r\n     * @param {number} [width] - The width of the random area.\r\n     * @param {number} [height] - The height of the random area.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setRandomPosition: function (x, y, width, height)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = this.scene.sys.game.config.width; }\r\n        if (height === undefined) { height = this.scene.sys.game.config.height; }\r\n\r\n        this.x = x + (Math.random() * width);\r\n        this.y = y + (Math.random() * height);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the rotation of this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Transform#setRotation\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [radians=0] - The rotation of this Game Object, in radians.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setRotation: function (radians)\r\n    {\r\n        if (radians === undefined) { radians = 0; }\r\n\r\n        this.rotation = radians;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the angle of this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Transform#setAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [degrees=0] - The rotation of this Game Object, in degrees.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setAngle: function (degrees)\r\n    {\r\n        if (degrees === undefined) { degrees = 0; }\r\n\r\n        this.angle = degrees;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the scale of this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Transform#setScale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal scale of this Game Object.\r\n     * @param {number} [y=x] - The vertical scale of this Game Object. If not set it will use the `x` value.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setScale: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 1; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.scaleX = x;\r\n        this.scaleY = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the x position of this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Transform#setX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [value=0] - The x position of this Game Object.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setX: function (value)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n\r\n        this.x = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the y position of this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Transform#setY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [value=0] - The y position of this Game Object.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setY: function (value)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n\r\n        this.y = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the z position of this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Transform#setZ\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [value=0] - The z position of this Game Object.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setZ: function (value)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n\r\n        this.z = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the w position of this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Transform#setW\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [value=0] - The w position of this Game Object.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setW: function (value)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n\r\n        this.w = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the local transform matrix for this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Transform#getLocalTransformMatrix\r\n     * @since 3.4.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} [tempMatrix] - The matrix to populate with the values from this Game Object.\r\n     *\r\n     * @return {Phaser.GameObjects.Components.TransformMatrix} The populated Transform Matrix.\r\n     */\r\n    getLocalTransformMatrix: function (tempMatrix)\r\n    {\r\n        if (tempMatrix === undefined) { tempMatrix = new TransformMatrix(); }\r\n\r\n        return tempMatrix.applyITRS(this.x, this.y, this._rotation, this._scaleX, this._scaleY);\r\n    },\r\n\r\n    /**\r\n     * Gets the world transform matrix for this Game Object, factoring in any parent Containers.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Transform#getWorldTransformMatrix\r\n     * @since 3.4.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} [tempMatrix] - The matrix to populate with the values from this Game Object.\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} [parentMatrix] - A temporary matrix to hold parent values during the calculations.\r\n     *\r\n     * @return {Phaser.GameObjects.Components.TransformMatrix} The populated Transform Matrix.\r\n     */\r\n    getWorldTransformMatrix: function (tempMatrix, parentMatrix)\r\n    {\r\n        if (tempMatrix === undefined) { tempMatrix = new TransformMatrix(); }\r\n        if (parentMatrix === undefined) { parentMatrix = new TransformMatrix(); }\r\n\r\n        var parent = this.parentContainer;\r\n\r\n        if (!parent)\r\n        {\r\n            return this.getLocalTransformMatrix(tempMatrix);\r\n        }\r\n\r\n        tempMatrix.applyITRS(this.x, this.y, this._rotation, this._scaleX, this._scaleY);\r\n\r\n        while (parent)\r\n        {\r\n            parentMatrix.applyITRS(parent.x, parent.y, parent._rotation, parent._scaleX, parent._scaleY);\r\n\r\n            parentMatrix.multiply(tempMatrix, tempMatrix);\r\n\r\n            parent = parent.parentContainer;\r\n        }\r\n\r\n        return tempMatrix;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Transform;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","MATH_CONST","TransformMatrix","WrapAngle","WrapAngleDegrees","Transform","_scaleX","_scaleY","_rotation","x","y","z","w","scaleX","get","set","value","renderFlags","_FLAG","scaleY","angle","RAD_TO_DEG","rotation","DEG_TO_RAD","setPosition","undefined","setRandomPosition","width","height","scene","sys","game","config","Math","random","setRotation","radians","setAngle","degrees","setScale","setX","setY","setZ","setW","getLocalTransformMatrix","tempMatrix","applyITRS","getWorldTransformMatrix","parentMatrix","parent","parentContainer","multiply"]
}
