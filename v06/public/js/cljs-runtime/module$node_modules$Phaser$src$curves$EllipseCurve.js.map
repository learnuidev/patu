{
"version":3,
"file":"module$node_modules$Phaser$src$curves$EllipseCurve.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/Phaser/src/curves/EllipseCurve.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$curves$EllipseCurve\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n//  Based on the three.js Curve classes created by [zz85](http://www.lab4games.net/zz85/blog)\r\n\r\nvar Class = require('../utils/Class');\r\nvar Curve = require('./Curve');\r\nvar DegToRad = require('../math/DegToRad');\r\nvar GetValue = require('../utils/object/GetValue');\r\nvar RadToDeg = require('../math/RadToDeg');\r\nvar Vector2 = require('../math/Vector2');\r\n\r\n/**\r\n * @typedef {object} JSONEllipseCurve\r\n *\r\n * @property {string} type - The of the curve.\r\n * @property {number} x - The x coordinate of the ellipse.\r\n * @property {number} y - The y coordinate of the ellipse.\r\n * @property {number} xRadius - The horizontal radius of ellipse.\r\n * @property {number} yRadius - The vertical radius of ellipse.\r\n * @property {integer} startAngle - The start angle of the ellipse, in degrees.\r\n * @property {integer} endAngle - The end angle of the ellipse, in degrees.\r\n * @property {boolean} clockwise - Sets if the the ellipse rotation is clockwise (true) or anti-clockwise (false)\r\n * @property {integer} rotation - The rotation of ellipse, in degrees.\r\n */\r\n\r\n/**\r\n * @typedef {object} EllipseCurveConfig\r\n *\r\n * @property {number} [x=0] - The x coordinate of the ellipse.\r\n * @property {number} [y=0] - The y coordinate of the ellipse.\r\n * @property {number} [xRadius=0] - The horizontal radius of the ellipse.\r\n * @property {number} [yRadius=0] - The vertical radius of the ellipse.\r\n * @property {integer} [startAngle=0] - The start angle of the ellipse, in degrees.\r\n * @property {integer} [endAngle=360] - The end angle of the ellipse, in degrees.\r\n * @property {boolean} [clockwise=false] - Sets if the the ellipse rotation is clockwise (true) or anti-clockwise (false)\r\n * @property {integer} [rotation=0] - The rotation of the ellipse, in degrees.\r\n  */\r\n\r\n/**\r\n * @classdesc\r\n * An Elliptical Curve derived from the Base Curve class.\r\n * \r\n * See https://en.wikipedia.org/wiki/Elliptic_curve for more details.\r\n *\r\n * @class Ellipse\r\n * @extends Phaser.Curves.Curve\r\n * @memberOf Phaser.Curves\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(number|EllipseCurveConfig)} [x=0] - The x coordinate of the ellipse, or an Ellipse Curve configuration object.\r\n * @param {number} [y=0] - The y coordinate of the ellipse.\r\n * @param {number} [xRadius=0] - The horizontal radius of ellipse.\r\n * @param {number} [yRadius=0] - The vertical radius of ellipse.\r\n * @param {integer} [startAngle=0] - The start angle of the ellipse, in degrees.\r\n * @param {integer} [endAngle=360] - The end angle of the ellipse, in degrees.\r\n * @param {boolean} [clockwise=false] - Sets if the the ellipse rotation is clockwise (true) or anti-clockwise (false)\r\n * @param {integer} [rotation=0] - The rotation of the ellipse, in degrees.\r\n */\r\nvar EllipseCurve = new Class({\r\n\r\n    Extends: Curve,\r\n\r\n    initialize:\r\n\r\n    function EllipseCurve (x, y, xRadius, yRadius, startAngle, endAngle, clockwise, rotation)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            var config = x;\r\n\r\n            x = GetValue(config, 'x', 0);\r\n            y = GetValue(config, 'y', 0);\r\n            xRadius = GetValue(config, 'xRadius', 0);\r\n            yRadius = GetValue(config, 'yRadius', xRadius);\r\n            startAngle = GetValue(config, 'startAngle', 0);\r\n            endAngle = GetValue(config, 'endAngle', 360);\r\n            clockwise = GetValue(config, 'clockwise', false);\r\n            rotation = GetValue(config, 'rotation', 0);\r\n        }\r\n        else\r\n        {\r\n            if (yRadius === undefined) { yRadius = xRadius; }\r\n            if (startAngle === undefined) { startAngle = 0; }\r\n            if (endAngle === undefined) { endAngle = 360; }\r\n            if (clockwise === undefined) { clockwise = false; }\r\n            if (rotation === undefined) { rotation = 0; }\r\n        }\r\n\r\n        Curve.call(this, 'EllipseCurve');\r\n\r\n        //  Center point\r\n\r\n        /**\r\n         * The center point of the ellipse. Used for calculating rotation.\r\n         *\r\n         * @name Phaser.Curves.Ellipse#p0\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.p0 = new Vector2(x, y);\r\n\r\n        /**\r\n         * The horizontal radius of the ellipse.\r\n         *\r\n         * @name Phaser.Curves.Ellipse#_xRadius\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._xRadius = xRadius;\r\n\r\n        /**\r\n         * The vertical radius of the ellipse.\r\n         *\r\n         * @name Phaser.Curves.Ellipse#_yRadius\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._yRadius = yRadius;\r\n\r\n        //  Radians\r\n\r\n        /**\r\n         * The starting angle of the ellipse in radians.\r\n         *\r\n         * @name Phaser.Curves.Ellipse#_startAngle\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._startAngle = DegToRad(startAngle);\r\n\r\n        /**\r\n         * The end angle of the ellipse in radians.\r\n         *\r\n         * @name Phaser.Curves.Ellipse#_endAngle\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._endAngle = DegToRad(endAngle);\r\n\r\n        /**\r\n         * Anti-clockwise direction.\r\n         *\r\n         * @name Phaser.Curves.Ellipse#_clockwise\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._clockwise = clockwise;\r\n\r\n        /**\r\n         * The rotation of the arc.\r\n         *\r\n         * @name Phaser.Curves.Ellipse#_rotation\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._rotation = DegToRad(rotation);\r\n    },\r\n\r\n    /**\r\n     * Gets the starting point on the curve.\r\n     *\r\n     * @method Phaser.Curves.Ellipse#getStartPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getStartPoint: function (out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        return this.getPoint(0, out);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Ellipse#getResolution\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} divisions - [description]\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getResolution: function (divisions)\r\n    {\r\n        return divisions * 2;\r\n    },\r\n\r\n    /**\r\n     * Get point at relative position in curve according to length.\r\n     *\r\n     * @method Phaser.Curves.Ellipse#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getPoint: function (t, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        var twoPi = Math.PI * 2;\r\n        var deltaAngle = this._endAngle - this._startAngle;\r\n        var samePoints = Math.abs(deltaAngle) < Number.EPSILON;\r\n\r\n        // ensures that deltaAngle is 0 .. 2 PI\r\n        while (deltaAngle < 0)\r\n        {\r\n            deltaAngle += twoPi;\r\n        }\r\n\r\n        while (deltaAngle > twoPi)\r\n        {\r\n            deltaAngle -= twoPi;\r\n        }\r\n\r\n        if (deltaAngle < Number.EPSILON)\r\n        {\r\n            if (samePoints)\r\n            {\r\n                deltaAngle = 0;\r\n            }\r\n            else\r\n            {\r\n                deltaAngle = twoPi;\r\n            }\r\n        }\r\n\r\n        if (this._clockwise && !samePoints)\r\n        {\r\n            if (deltaAngle === twoPi)\r\n            {\r\n                deltaAngle = - twoPi;\r\n            }\r\n            else\r\n            {\r\n                deltaAngle = deltaAngle - twoPi;\r\n            }\r\n        }\r\n\r\n        var angle = this._startAngle + t * deltaAngle;\r\n        var x = this.p0.x + this._xRadius * Math.cos(angle);\r\n        var y = this.p0.y + this._yRadius * Math.sin(angle);\r\n\r\n        if (this._rotation !== 0)\r\n        {\r\n            var cos = Math.cos(this._rotation);\r\n            var sin = Math.sin(this._rotation);\r\n\r\n            var tx = x - this.p0.x;\r\n            var ty = y - this.p0.y;\r\n\r\n            // Rotate the point about the center of the ellipse.\r\n            x = tx * cos - ty * sin + this.p0.x;\r\n            y = tx * sin + ty * cos + this.p0.y;\r\n        }\r\n\r\n        return out.set(x, y);\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal radius of this curve.\r\n     *\r\n     * @method Phaser.Curves.Ellipse#setXRadius\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The horizontal radius of this curve.\r\n     *\r\n     * @return {Phaser.Curves.Ellipse} This curve object.\r\n     */\r\n    setXRadius: function (value)\r\n    {\r\n        this.xRadius = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the vertical radius of this curve.\r\n     *\r\n     * @method Phaser.Curves.Ellipse#setYRadius\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The vertical radius of this curve.\r\n     *\r\n     * @return {Phaser.Curves.Ellipse} This curve object.\r\n     */\r\n    setYRadius: function (value)\r\n    {\r\n        this.yRadius = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the width of this curve.\r\n     *\r\n     * @method Phaser.Curves.Ellipse#setWidth\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The width of this curve.\r\n     *\r\n     * @return {Phaser.Curves.Ellipse} This curve object.\r\n     */\r\n    setWidth: function (value)\r\n    {\r\n        this.xRadius = value * 2;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the height of this curve.\r\n     *\r\n     * @method Phaser.Curves.Ellipse#setHeight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The height of this curve.\r\n     *\r\n     * @return {Phaser.Curves.Ellipse} This curve object.\r\n     */\r\n    setHeight: function (value)\r\n    {\r\n        this.yRadius = value * 2;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the start angle of this curve.\r\n     *\r\n     * @method Phaser.Curves.Ellipse#setStartAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The start angle of this curve, in radians.\r\n     *\r\n     * @return {Phaser.Curves.Ellipse} This curve object.\r\n     */\r\n    setStartAngle: function (value)\r\n    {\r\n        this.startAngle = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the end angle of this curve.\r\n     *\r\n     * @method Phaser.Curves.Ellipse#setEndAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The end angle of this curve, in radians.\r\n     *\r\n     * @return {Phaser.Curves.Ellipse} This curve object.\r\n     */\r\n    setEndAngle: function (value)\r\n    {\r\n        this.endAngle = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets if this curve extends clockwise or anti-clockwise.\r\n     *\r\n     * @method Phaser.Curves.Ellipse#setClockwise\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - The clockwise state of this curve.\r\n     *\r\n     * @return {Phaser.Curves.Ellipse} This curve object.\r\n     */\r\n    setClockwise: function (value)\r\n    {\r\n        this.clockwise = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the rotation of this curve.\r\n     *\r\n     * @method Phaser.Curves.Ellipse#setRotation\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The rotation of this curve, in radians.\r\n     *\r\n     * @return {Phaser.Curves.Ellipse} This curve object.\r\n     */\r\n    setRotation: function (value)\r\n    {\r\n        this.rotation = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The x coordinate of the center of the ellipse.\r\n     *\r\n     * @name Phaser.Curves.Ellipse#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.p0.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.p0.x = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y coordinate of the center of the ellipse.\r\n     *\r\n     * @name Phaser.Curves.Ellipse#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.p0.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.p0.y = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The horizontal radius of the ellipse.\r\n     *\r\n     * @name Phaser.Curves.Ellipse#xRadius\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    xRadius: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._xRadius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._xRadius = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The vertical radius of the ellipse.\r\n     *\r\n     * @name Phaser.Curves.Ellipse#yRadius\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    yRadius: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._yRadius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._yRadius = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The start angle of the ellipse in degrees.\r\n     *\r\n     * @name Phaser.Curves.Ellipse#startAngle\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    startAngle: {\r\n\r\n        get: function ()\r\n        {\r\n            return RadToDeg(this._startAngle);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._startAngle = DegToRad(value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The end angle of the ellipse in degrees.\r\n     *\r\n     * @name Phaser.Curves.Ellipse#endAngle\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    endAngle: {\r\n\r\n        get: function ()\r\n        {\r\n            return RadToDeg(this._endAngle);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._endAngle = DegToRad(value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * `true` if the ellipse rotation is clockwise or `false` if anti-clockwise.\r\n     *\r\n     * @name Phaser.Curves.Ellipse#clockwise\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\r\n    clockwise: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._clockwise;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._clockwise = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The rotation of the ellipse, relative to the center, in degrees.\r\n     *\r\n     * @name Phaser.Curves.Ellipse#angle\r\n     * @type {number}\r\n     * @since 3.14.0\r\n     */\r\n    angle: {\r\n\r\n        get: function ()\r\n        {\r\n            return RadToDeg(this._rotation);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._rotation = DegToRad(value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The rotation of the ellipse, relative to the center, in radians.\r\n     *\r\n     * @name Phaser.Curves.Ellipse#rotation\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    rotation: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._rotation;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._rotation = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * JSON serialization of the curve.\r\n     *\r\n     * @method Phaser.Curves.Ellipse#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {JSONEllipseCurve} The JSON object containing this curve data.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        return {\r\n            type: this.type,\r\n            x: this.p0.x,\r\n            y: this.p0.y,\r\n            xRadius: this._xRadius,\r\n            yRadius: this._yRadius,\r\n            startAngle: RadToDeg(this._startAngle),\r\n            endAngle: RadToDeg(this._endAngle),\r\n            clockwise: this._clockwise,\r\n            rotation: RadToDeg(this._rotation)\r\n        };\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Creates a curve from the provided Ellipse Curve Configuration object.\r\n *\r\n * @function Phaser.Curves.Ellipse.fromJSON\r\n * @since 3.0.0\r\n *\r\n * @param {JSONEllipseCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.Ellipse} The ellipse curve constructed from the configuration object.\r\n */\r\nEllipseCurve.fromJSON = function (data)\r\n{\r\n    return new EllipseCurve(data);\r\n};\r\n\r\nmodule.exports = EllipseCurve;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Curve","DegToRad","GetValue","RadToDeg","Vector2","EllipseCurve","Extends","initialize","x","y","xRadius","yRadius","startAngle","endAngle","clockwise","rotation","config","undefined","call","p0","_xRadius","_yRadius","_startAngle","_endAngle","_clockwise","_rotation","getStartPoint","out","getPoint","getResolution","divisions","t","twoPi","Math","PI","deltaAngle","samePoints","abs","Number","EPSILON","angle","cos","sin","tx","ty","set","setXRadius","value","setYRadius","setWidth","setHeight","setStartAngle","setEndAngle","setClockwise","setRotation","get","toJSON","type","fromJSON","EllipseCurve.fromJSON","data"]
}
