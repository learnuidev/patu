{
"version":3,
"file":"module$node_modules$Phaser$src$scene$Settings.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO1G,IAAIC,MAAQH,OAAA,CAAQ,4CAAR,CAAZ,CACII,SAAWJ,OAAA,CAAQ,sDAAR,CADf,CAEIK,MAAQL,OAAA,CAAQ,mDAAR,CAFZ,CAGIM,aAAeN,OAAA,CAAQ,mDAAR,CAoHnBC,OAAAC,QAAA,CA1EeK,CAYXC,OAAQA,QAAS,CAACC,MAAD,CACjB,CAC0B,QAAtB,GAAI,MAAOA,OAAX,CAEIA,MAFJ,CAEa,CAAEC,IAAKD,MAAP,CAFb,CAIoBE,IAAAA,EAJpB,GAISF,MAJT,GAOIA,MAPJ,CAOa,EAPb,CAUA,OAAO,CAEHG,OAAQT,KAAAU,QAFL;AAIHH,IAAKN,QAAA,CAASK,MAAT,CAAiB,KAAjB,CAAwB,EAAxB,CAJF,CAKHK,OAAQV,QAAA,CAASK,MAAT,CAAiB,QAAjB,CAA2B,CAAA,CAA3B,CALL,CAMHM,QAASX,QAAA,CAASK,MAAT,CAAiB,SAAjB,CAA4B,CAAA,CAA5B,CANN,CAQHO,SAAU,CAAA,CARP,CAUHC,aAAc,CAAA,CAVX,CAWHC,eAAgB,IAXb,CAYHC,mBAAoB,CAZjB,CAaHC,qBAAsB,CAAA,CAbnB,CAiBHC,KAAM,EAjBH,CAmBHC,KAAMlB,QAAA,CAASK,MAAT,CAAiB,MAAjB,CAAyB,CAAA,CAAzB,CAnBH,CAuBHc,QAASnB,QAAA,CAASK,MAAT,CAAiB,SAAjB,CAA4B,IAA5B,CAvBN,CA2BHe,IAAKpB,QAAA,CAASK,MAAT,CAAiB,KAAjB,CAAwBJ,KAAA,CAAMC,YAAN,CAAoBF,QAAA,CAASK,MAAT,CAAiB,QAAjB,CAA2B,EAA3B,CAApB,CAAxB,CA3BF,CA+BHgB,QAASrB,QAAA,CAASK,MAAT,CAAiB,SAAjB,CAA4B,EAA5B,CA/BN,CAmCHiB,OAAQtB,QAAA,CAASK,MAAT,CAAiB,QAAjB,CAA2B,EAA3B,CAnCL,CAuCHkB,QAASvB,QAAA,CAASK,MAAT,CAAiB,SAAjB,CAA4B,CAAA,CAA5B,CAvCN,CA2CHmB,MAAOxB,QAAA,CAASK,MAAT,CAAiB,OAAjB,CAA0B,EAA1B,CA3CJ,CAXX,CAbWF,CApD2F;",
"sources":["node_modules/Phaser/src/scene/Settings.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$scene$Settings\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar CONST = require('./const');\r\nvar GetValue = require('../utils/object/GetValue');\r\nvar Merge = require('../utils/object/Merge');\r\nvar InjectionMap = require('./InjectionMap');\r\n\r\n/**\r\n * @namespace Phaser.Scenes.Settings\r\n */\r\n\r\n/**\r\n * @typedef {object} Phaser.Scenes.Settings.Config\r\n *\r\n * @property {string} [key] - [description]\r\n * @property {boolean} [active=false] - [description]\r\n * @property {boolean} [visible=true] - [description]\r\n * @property {(false|Phaser.Loader.FileTypes.PackFileConfig)} [pack=false] - [description]\r\n * @property {?(InputJSONCameraObject|InputJSONCameraObject[])} [cameras=null] - [description]\r\n * @property {Object.<string, string>} [map] - Overwrites the default injection map for a scene.\r\n * @property {Object.<string, string>} [mapAdd] - Extends the injection map for a scene.\r\n * @property {object} [physics={}] - [description]\r\n * @property {object} [loader={}] - [description]\r\n * @property {(false|*)} [plugins=false] - [description]\r\n */\r\n\r\n/**\r\n * @typedef {object} Phaser.Scenes.Settings.Object\r\n *\r\n * @property {number} status - [description]\r\n * @property {string} key - [description]\r\n * @property {boolean} active - [description]\r\n * @property {boolean} visible - [description]\r\n * @property {boolean} isBooted - [description]\r\n * @property {boolean} isTransition - [description]\r\n * @property {?Phaser.Scene} transitionFrom - [description]\r\n * @property {integer} transitionDuration - [description]\r\n * @property {boolean} transitionAllowInput - [description]\r\n * @property {object} data - [description]\r\n * @property {(false|Phaser.Loader.FileTypes.PackFileConfig)} pack - [description]\r\n * @property {?(InputJSONCameraObject|InputJSONCameraObject[])} cameras - [description]\r\n * @property {Object.<string, string>} map - [description]\r\n * @property {object} physics - [description]\r\n * @property {object} loader - [description]\r\n * @property {(false|*)} plugins - [description]\r\n */\r\n\r\nvar Settings = {\r\n\r\n    /**\r\n     * Takes a Scene configuration object and returns a fully formed Systems object.\r\n     *\r\n     * @function Phaser.Scenes.Settings.create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Scenes.Settings.Config)} config - [description]\r\n     *\r\n     * @return {Phaser.Scenes.Settings.Object} [description]\r\n     */\r\n    create: function (config)\r\n    {\r\n        if (typeof config === 'string')\r\n        {\r\n            config = { key: config };\r\n        }\r\n        else if (config === undefined)\r\n        {\r\n            //  Pass the 'hasOwnProperty' checks\r\n            config = {};\r\n        }\r\n\r\n        return {\r\n\r\n            status: CONST.PENDING,\r\n\r\n            key: GetValue(config, 'key', ''),\r\n            active: GetValue(config, 'active', false),\r\n            visible: GetValue(config, 'visible', true),\r\n\r\n            isBooted: false,\r\n\r\n            isTransition: false,\r\n            transitionFrom: null,\r\n            transitionDuration: 0,\r\n            transitionAllowInput: true,\r\n\r\n            //  Loader payload array\r\n\r\n            data: {},\r\n\r\n            pack: GetValue(config, 'pack', false),\r\n\r\n            //  Cameras\r\n\r\n            cameras: GetValue(config, 'cameras', null),\r\n\r\n            //  Scene Property Injection Map\r\n\r\n            map: GetValue(config, 'map', Merge(InjectionMap, GetValue(config, 'mapAdd', {}))),\r\n\r\n            //  Physics\r\n\r\n            physics: GetValue(config, 'physics', {}),\r\n\r\n            //  Loader\r\n\r\n            loader: GetValue(config, 'loader', {}),\r\n\r\n            //  Plugins\r\n\r\n            plugins: GetValue(config, 'plugins', false),\r\n\r\n            //  Input\r\n\r\n            input: GetValue(config, 'input', {})\r\n\r\n        };\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Settings;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","CONST","GetValue","Merge","InjectionMap","Settings","create","config","key","undefined","status","PENDING","active","visible","isBooted","isTransition","transitionFrom","transitionDuration","transitionAllowInput","data","pack","cameras","map","physics","loader","plugins","input"]
}
