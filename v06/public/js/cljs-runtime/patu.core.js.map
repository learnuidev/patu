{"version":3,"sources":["patu/core.cljs"],"mappings":"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","names":["patu.core/dispatch","patu.events/dispatch","patu.core/dispatch-sync","patu.events/dispatch-sync","patu.core/dispatch-n","patu.events/dispatch-n","patu.core/reg-event","patu.events/reg-event","patu.core/sub","patu.subs/sub","patu.core/reg-sub","patu.subs/reg-sub","patu.core/neg","num","patu.core/height","cljs.core/deref","patu.state/state","patu.core/width","patu.core/center","patu.core/randd","v1","v2","var_args","G__26677","patu.core/go","js/Error","id","cljs.core/name","opts","cljs.core/clj->js","G__26678","G__26679","p__26680","vec__26681","cljs.core.nth","_","patu.core.go","G__26685","patu.core/reg-comp","data","cljs.core/Keyword","patu.core/reg-comp-n","datas","seq__26686","cljs.core/seq","chunk__26687","count__26688","i__26689","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/map?","patu.core.reg_comp","vec__26696","vec__26699","props","patu.core/get-comp","G__26702","G__26703","p__26704","vec__26705","seq__26706","first__26707","patu.utils/jget-in","patu.core/data->fn","cljs.core._EQ_","js/Function","cljs.core/type","seq__26708","chunk__26709","count__26710","i__26711","vec__26750","vec__26769","cid","comp","seq__26753","chunk__26754","count__26755","i__26756","vec__26763","vec__26766","seq__26772","chunk__26773","count__26774","i__26775","vec__26782","vec__26785","k","v","patu.core/key-down","dir","handler","patu.core/action","G__26788","G__26789","p__26790","vec__26791","seq__26792","first__26793","comps","cljs.core/second","seq__26794","chunk__26795","count__26796","i__26797","vec__26804","vec__26807","G__26810","G__26811","p__26812","vec__26813","value","temp__5733__auto__","G__26816","patu.components/jump!","js/console.warn","G__26817","G__26818","p__26819","vec__26820","pid","aid","G__26823","G__26824","p__26825","vec__26826","patu.audio/play","G__26829","G__26830","p__26831","vec__26832","seq__26833","first__26834","seq__26835","chunk__26836","count__26837","i__26838","vec__26845","vec__26848","G__26851","G__26852","p__26853","vec__26854","G__26857","G__26858","p__26859","vec__26860","time","G__26863","G__26864","p__26865","vec__26866","layers","main-layer","G__26869","G__26870","p__26871","vec__26872","G__26875","G__26876","p__26877","vec__26878","vec__26881","target","patu.core/cam-ignore","game","val","G__26884","G__26885","p__26886","vec__26887","backgrounds","G__26890","G__26891","p__26892","vec__26893","seq__26894","first__26895","args","cljs.core.apply","G__26896","G__26897","p__26898","vec__26899","patu.core/scene","p__26902","map__26903","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","patu.core/reg-scene","init","evt","state","G__26905","G__26906","G__26907","G__26908","p__26909","vec__26910","G__26914","patu.core/kaboom","cljs.core.swap_BANG_","cljs.core/assoc","js/module$kaboom","G__26915","G__26916","cljs.core/rest"],"sourcesContent":["(ns patu.core\n  (:require  [\"/kaboom.js\" :as kaboom6]\n             [patu.events :as evt]\n             [patu.subs :as s]\n             [patu.utils :refer [jget-in]]\n             [patu.state :refer [state]]\n             [patu.loaders]\n             [patu.components :as c]\n             [patu.audio :as a]))\n\n;; Event\n(def dispatch evt/dispatch)\n(def dispatch-sync evt/dispatch-sync)\n(def dispatch-n evt/dispatch-n)\n(def reg-event evt/reg-event)\n\n;; Sub\n(def sub s/sub)\n(def reg-sub s/reg-sub)\n\n;; Math Helpers\n(defn neg [num]\n  (* -1 num))\n\n;; Dimensions\n(defn height []\n  (.height (:k @state)))\n\n(comment\n  (height))\n(defn width []\n  (.width (:k @state)))\n\n;;\n(defn center []\n  [(/ (width) 2) (/ (height) 2)])\n\n(defn randd [v1 v2]\n  (.rand (:k @state) v1 v2))\n\n;; === Scene API\n(defn go\n  ([id]\n   (.go (:k @state) (name id)))\n  ([id opts]\n   (.go (:k @state) (name id) (clj->js opts))))\n\n(reg-event\n :go\n (fn [_ [_ id opts]]\n   (if opts\n     (go id opts)\n     (go id))))\n\n;; == 1. Component API\n(defn reg-comp\n  ([data]\n   (if (keyword? (nth data 0))\n     (.reg_comp (:k @state) (name (nth data 0)) (clj->js (nth data 1)))\n     (.reg_comp (:k @state) (clj->js data))))\n  ([id data]\n   (.reg_comp (:k @state) (name id) (clj->js data))))\n\n(defn reg-comp-n\n  [datas]\n  (doseq [data datas]\n    (if (map? data)\n      (reg-comp data))\n    (let [[id props] data]\n      (if (keyword? id)\n        (reg-comp id props)\n        (reg-comp data)))))\n\n(defn get-comp [id]\n  (.get_comp (:k @state) (name id)))\n\n;;\n(reg-sub\n :comp\n (fn [_ [_ id & props]]\n   (if props\n     (jget-in (get-comp id) props)\n     (get-comp id))))\n(comment\n  (get-comp :birdy)\n  (get-comp :player))\n\n;; == 2. Event API\n;; TODO: Make it general\n(defn data->fn  [id data]\n  (fn []\n    (if (= js/Function (type data))\n      (data)\n      (doseq [[cid props] data]\n        (if (= :dispatch cid)\n          (dispatch props)\n          (when-let [comp (get-comp cid)]\n            (doseq [[k v] props]\n              (when (= k :x)\n                (set! (.. comp -pos -x) (+ (.. comp -pos -x) v)))\n              (when (= k :y)\n                (set! (.. comp -pos -y) (+ (.. comp -pos -y) v))))))))))\n\n(defn key-down [dir data]\n  ;; (println \"TYPE: \" data)\n  (let [handler (data->fn dir data)]\n    (.keyDown (:k @state) (name dir) handler)))\n\n;; ==== Event Registation ===\n;; 1. Action\n(defn action [id handler]\n  (when-let [comp (get-comp id)]\n    (if (.-action comp)\n      (.action comp handler)\n      (.action (:k @state) (name id) handler))))\n\n;;\n; (defmethod dispatch :evt/action [[_ id handler]]\n;   (when-let [comp (get-component id)]\n;     (if (.-action comp)\n;       (.action comp handler)\n;       (.action (:game @game-state) (name id) handler))))\n\n(reg-event\n :action\n (fn [_ [_ & comps]]\n   (if (keyword? (first comps))\n     (action (first comps) (second comps))\n     (doseq [[id handler] comps]\n       (action id handler)))))\n\n;; Components\n(reg-event\n :jump\n (fn [_ [_ id value]]\n   (if-let [comp (sub [:comp id])]\n     (c/jump! comp value)\n     (js/console.warn (str \"No component found for component ID: \" id)))))\n\n;; Audio Events ===\n; (defn play [id anim-id]\n;   (if (object? id)\n;     (.play id (name anim-id))\n;     (when-let [comp (get-comp id)]\n;       (try\n;         (.play comp (name anim-id))\n;         (catch js/Error err\n;           (js/console.warn err))))))\n\n(comment\n  (get-comp :player))\n\n(reg-event\n :anim/play\n (fn [_ [_ pid aid]]\n   (when-let [comp (get-comp pid)]\n     (.play comp (name aid)))))\n(reg-event\n :audio/play\n (fn [_ [_ id]]\n   (a/play id)))\n\n(reg-event\n :key-down\n (fn [_ [_ & comps]]\n   (doseq [[dir handler] comps]\n     (if (= js/Function (type handler))\n       (handler)\n       (key-down dir handler)))))\n\n(reg-event\n :key-press\n (fn [_ [_ id handler]]\n   (.keyPress (:k @state) (name id) handler)))\n\n(reg-event\n :loop\n (fn [_ [_ time handler]]\n\n   (.loop (:k @state) time handler)))\n\n(reg-event\n :layers\n (fn [_ [_ layers main-layer]]\n   (.layers (:k @state) (clj->js layers) (name main-layer))))\n\n(reg-event\n :gravity\n (fn [_ [_ value]]\n   (.gravity (:k @state) value)))\n\n;;\n(comment)\n  ; (get-comp :pipe))\n\n\n(reg-event\n :collides\n (fn [_ [_ [id target] handler]]\n   (.collides (get-comp :player) \"pipe\" handler)))\n\n;;\n(defn cam-ignore [game val]\n  (.camIgnore game (clj->js val)))\n\n(reg-event\n :cam/ignore\n (fn [_ [_ backgrounds]]\n   (.camIgnore (:k @state) (clj->js backgrounds))))\n\n(reg-event\n :comp/reg\n (fn [_ [_ & args]]\n   (apply reg-comp args)))\n\n(reg-event\n :comp/reg-n\n (fn [_ [_ datas]]\n   (reg-comp-n datas)))\n\n;; === Scene API\n(defn scene\n  \"Use scenes to define different parts of a game, e.g. Game Scene, Start Scene,\"\n  [game id handler]\n  (.scene game (name id) handler))\n\n(defn reg-scene\n  \"Registers a scene\"\n  [id {:keys [init evt]}]\n  (let [handler (fn [state]\n                  (dispatch-n (init state))\n                  (dispatch-n (evt state)))]\n    (scene (:k @state) id handler)))\n\n;; Scenes are just data\n(reg-event\n :reg-scene\n (fn [_ [_ id init evt]]\n   (reg-scene  id {:init init :evt evt})))\n\n;; ==== Core\n(defn kaboom\n  ([]\n   (let [game (.default kaboom 6)]\n     (swap! state assoc :k game)\n     game))\n  ([opts]\n   (let [game (.default kaboom6 (clj->js opts))]\n     (swap! state assoc :k game)\n     game)))\n\n(reg-event\n :kaboom\n (fn [_ args]\n   (apply kaboom (rest args))))\n"]}