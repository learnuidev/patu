{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$blitter$Blitter.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/blitter/Blitter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$blitter$Blitter\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar BlitterRender = require('./BlitterRender');\r\nvar Bob = require('./Bob');\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar Frame = require('../../textures/Frame');\r\nvar GameObject = require('../GameObject');\r\nvar List = require('../../structs/List');\r\n\r\n/**\r\n * @callback Phaser.GameObjects.Blitter.CreateCallback\r\n *\r\n * @param {Phaser.GameObjects.Blitter.Bob} bob - The Bob that was created by the Blitter.\r\n * @param {integer} index - The position of the Bob within the Blitter display list.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A Blitter Game Object.\r\n *\r\n * The Blitter Game Object is a special kind of container that creates, updates and manages Bob objects.\r\n * Bobs are designed for rendering speed rather than flexibility. They consist of a texture, or frame from a texture,\r\n * a position and an alpha value. You cannot scale or rotate them. They use a batched drawing method for speed\r\n * during rendering.\r\n *\r\n * A Blitter Game Object has one texture bound to it. Bobs created by the Blitter can use any Frame from this\r\n * Texture to render with, but they cannot use any other Texture. It is this single texture-bind that allows\r\n * them their speed.\r\n *\r\n * If you have a need to blast a large volume of frames around the screen then Blitter objects are well worth\r\n * investigating. They are especially useful for using as a base for your own special effects systems.\r\n *\r\n * @class Blitter\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. It can only belong to one Scene at any given time.\r\n * @param {number} [x=0] - The x coordinate of this Game Object in world space.\r\n * @param {number} [y=0] - The y coordinate of this Game Object in world space.\r\n * @param {string} [texture='__DEFAULT'] - The key of the texture this Game Object will use for rendering. The Texture must already exist in the Texture Manager.\r\n * @param {(string|integer)} [frame=0] - The Frame of the Texture that this Game Object will use. Only set if the Texture has multiple frames, such as a Texture Atlas or Sprite Sheet.\r\n */\r\nvar Blitter = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.Depth,\r\n        Components.Mask,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.ScrollFactor,\r\n        Components.Size,\r\n        Components.Texture,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        BlitterRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Blitter (scene, x, y, texture, frame)\r\n    {\r\n        GameObject.call(this, scene, 'Blitter');\r\n\r\n        this.setTexture(texture, frame);\r\n        this.setPosition(x, y);\r\n        this.initPipeline();\r\n\r\n        /**\r\n         * The children of this Blitter.\r\n         * This List contains all of the Bob objects created by the Blitter.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter#children\r\n         * @type {Phaser.Structs.List.<Phaser.GameObjects.Blitter.Bob>}\r\n         * @since 3.0.0\r\n         */\r\n        this.children = new List();\r\n\r\n        /**\r\n         * A transient array that holds all of the Bobs that will be rendered this frame.\r\n         * The array is re-populated whenever the dirty flag is set.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter#renderList\r\n         * @type {Phaser.GameObjects.Blitter.Bob[]}\r\n         * @default []\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.renderList = [];\r\n\r\n        /**\r\n         * Is the Blitter considered dirty?\r\n         * A 'dirty' Blitter has had its child count changed since the last frame.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter#dirty\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.dirty = false;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Bob in this Blitter.\r\n     *\r\n     * The Bob is created at the given coordinates, relative to the Blitter and uses the given frame.\r\n     * A Bob can use any frame belonging to the texture bound to the Blitter.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n     * @param {number} y - The y position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n     * @param {(string|integer|Phaser.Textures.Frame)} [frame] - The Frame the Bob will use. It _must_ be part of the Texture the parent Blitter object is using.\r\n     * @param {boolean} [visible=true] - Should the created Bob render or not?\r\n     * @param {integer} [index] - The position in the Blitters Display List to add the new Bob at. Defaults to the top of the list.\r\n     *\r\n     * @return {Phaser.GameObjects.Blitter.Bob} The newly created Bob object.\r\n     */\r\n    create: function (x, y, frame, visible, index)\r\n    {\r\n        if (visible === undefined) { visible = true; }\r\n        if (index === undefined) { index = this.children.length; }\r\n\r\n        if (frame === undefined)\r\n        {\r\n            frame = this.frame;\r\n        }\r\n        else if (!(frame instanceof Frame))\r\n        {\r\n            frame = this.texture.get(frame);\r\n        }\r\n\r\n        var bob = new Bob(this, x, y, frame, visible);\r\n\r\n        this.children.addAt(bob, index, false);\r\n\r\n        this.dirty = true;\r\n\r\n        return bob;\r\n    },\r\n\r\n    /**\r\n     * Creates multiple Bob objects within this Blitter and then passes each of them to the specified callback.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#createFromCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Blitter.CreateCallback} callback - The callback to invoke after creating a bob. It will be sent two arguments: The Bob and the index of the Bob.\r\n     * @param {integer} quantity - The quantity of Bob objects to create.\r\n     * @param {(string|integer|Phaser.Textures.Frame|string[]|integer[]|Phaser.Textures.Frame[])} [frame] - The Frame the Bobs will use. It must be part of the Blitter Texture.\r\n     * @param {boolean} [visible=true] - Should the created Bob render or not?\r\n     *\r\n     * @return {Phaser.GameObjects.Blitter.Bob[]} An array of Bob objects that were created.\r\n     */\r\n    createFromCallback: function (callback, quantity, frame, visible)\r\n    {\r\n        var bobs = this.createMultiple(quantity, frame, visible);\r\n\r\n        for (var i = 0; i < bobs.length; i++)\r\n        {\r\n            var bob = bobs[i];\r\n\r\n            callback.call(this, bob, i);\r\n        }\r\n\r\n        return bobs;\r\n    },\r\n\r\n    /**\r\n     * Creates multiple Bobs in one call.\r\n     *\r\n     * The amount created is controlled by a combination of the `quantity` argument and the number of frames provided.\r\n     *\r\n     * If the quantity is set to 10 and you provide 2 frames, then 20 Bobs will be created. 10 with the first\r\n     * frame and 10 with the second.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#createMultiple\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} quantity - The quantity of Bob objects to create.\r\n     * @param {(string|integer|Phaser.Textures.Frame|string[]|integer[]|Phaser.Textures.Frame[])} [frame] - The Frame the Bobs will use. It must be part of the Blitter Texture.\r\n     * @param {boolean} [visible=true] - Should the created Bob render or not?\r\n     *\r\n     * @return {Phaser.GameObjects.Blitter.Bob[]} An array of Bob objects that were created.\r\n     */\r\n    createMultiple: function (quantity, frame, visible)\r\n    {\r\n        if (frame === undefined) { frame = this.frame.name; }\r\n        if (visible === undefined) { visible = true; }\r\n\r\n        if (!Array.isArray(frame))\r\n        {\r\n            frame = [ frame ];\r\n        }\r\n\r\n        var bobs = [];\r\n        var _this = this;\r\n\r\n        frame.forEach(function (singleFrame)\r\n        {\r\n            for (var i = 0; i < quantity; i++)\r\n            {\r\n                bobs.push(_this.create(0, 0, singleFrame, visible));\r\n            }\r\n        });\r\n\r\n        return bobs;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given child can render or not, by checking its `visible` and `alpha` values.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#childCanRender\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Blitter.Bob} child - The Bob to check for rendering.\r\n     *\r\n     * @return {boolean} Returns `true` if the given child can render, otherwise `false`.\r\n     */\r\n    childCanRender: function (child)\r\n    {\r\n        return (child.visible && child.alpha > 0);\r\n    },\r\n\r\n    /**\r\n     * Returns an array of Bobs to be rendered.\r\n     * If the Blitter is dirty then a new list is generated and stored in `renderList`.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#getRenderList\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Blitter.Bob[]} An array of Bob objects that will be rendered this frame.\r\n     */\r\n    getRenderList: function ()\r\n    {\r\n        if (this.dirty)\r\n        {\r\n            this.renderList = this.children.list.filter(this.childCanRender, this);\r\n            this.dirty = false;\r\n        }\r\n\r\n        return this.renderList;\r\n    },\r\n\r\n    /**\r\n     * Removes all Bobs from the children List and clears the dirty flag.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#clear\r\n     * @since 3.0.0\r\n     */\r\n    clear: function ()\r\n    {\r\n        this.children.removeAll();\r\n        this.dirty = true;\r\n    },\r\n\r\n    /**\r\n     * Internal destroy handler, called as part of the destroy process.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#preDestroy\r\n     * @protected\r\n     * @since 3.9.0\r\n     */\r\n    preDestroy: function ()\r\n    {\r\n        this.children.destroy();\r\n\r\n        this.renderList = [];\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Blitter;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BlitterRender","Bob","Class","Components","Frame","GameObject","List","Blitter","Extends","Mixins","Alpha","BlendMode","Depth","Mask","Pipeline","ScaleMode","ScrollFactor","Size","Texture","Transform","Visible","initialize","scene","x","y","texture","frame","call","setTexture","setPosition","initPipeline","children","renderList","dirty","create","visible","index","undefined","length","get","bob","addAt","createFromCallback","callback","quantity","bobs","createMultiple","i","name","Array","isArray","_this","forEach","singleFrame","push","childCanRender","child","alpha","getRenderList","list","filter","clear","removeAll","preDestroy","destroy"]
}
