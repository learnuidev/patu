{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$text$TextStyle.js",
"lineCount":13,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/text/TextStyle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$text$TextStyle\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetAdvancedValue = require('../../utils/object/GetAdvancedValue');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar MeasureText = require('./MeasureText');\r\n\r\n//  Key: [ Object Key, Default Value ]\r\n\r\n/**\r\n * A custom function that will be responsible for wrapping the text.\r\n * @callback TextStyleWordWrapCallback\r\n *\r\n * @param {string} text - The string to wrap.\r\n * @param {Phaser.GameObjects.Text} textObject - The Text instance.\r\n *\r\n * @return {(string|string[])} Should return the wrapped lines either as an array of lines or as a string with\r\n * newline characters in place to indicate where breaks should happen.\r\n */\r\n\r\nvar propertyMap = {\r\n    fontFamily: [ 'fontFamily', 'Courier' ],\r\n    fontSize: [ 'fontSize', '16px' ],\r\n    fontStyle: [ 'fontStyle', '' ],\r\n    backgroundColor: [ 'backgroundColor', null ],\r\n    color: [ 'color', '#fff' ],\r\n    stroke: [ 'stroke', '#fff' ],\r\n    strokeThickness: [ 'strokeThickness', 0 ],\r\n    shadowOffsetX: [ 'shadow.offsetX', 0 ],\r\n    shadowOffsetY: [ 'shadow.offsetY', 0 ],\r\n    shadowColor: [ 'shadow.color', '#000' ],\r\n    shadowBlur: [ 'shadow.blur', 0 ],\r\n    shadowStroke: [ 'shadow.stroke', false ],\r\n    shadowFill: [ 'shadow.fill', false ],\r\n    align: [ 'align', 'left' ],\r\n    maxLines: [ 'maxLines', 0 ],\r\n    fixedWidth: [ 'fixedWidth', 0 ],\r\n    fixedHeight: [ 'fixedHeight', 0 ],\r\n    resolution: [ 'resolution', 0 ],\r\n    rtl: [ 'rtl', false ],\r\n    testString: [ 'testString', '|M\u00c3\u2030qgy' ],\r\n    baselineX: [ 'baselineX', 1.2 ],\r\n    baselineY: [ 'baselineY', 1.4 ],\r\n    wordWrapWidth: [ 'wordWrap.width', null ],\r\n    wordWrapCallback: [ 'wordWrap.callback', null ],\r\n    wordWrapCallbackScope: [ 'wordWrap.callbackScope', null ],\r\n    wordWrapUseAdvanced: [ 'wordWrap.useAdvancedWrap', false ]\r\n};\r\n\r\n/**\r\n * Font metrics for a Text Style object.\r\n *\r\n * @typedef {object} BitmapTextMetrics\r\n *\r\n * @property {number} ascent - The ascent of the font.\r\n * @property {number} descent - The descent of the font.\r\n * @property {number} fontSize - The size of the font.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Style settings for a Text object.\r\n *\r\n * @class TextStyle\r\n * @memberOf Phaser.GameObjects.Text\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Text} text - The Text object that this TextStyle is styling.\r\n * @param {object} style - The style settings to set.\r\n */\r\nvar TextStyle = new Class({\r\n\r\n    initialize:\r\n\r\n    function TextStyle (text, style)\r\n    {\r\n        /**\r\n         * The Text object that this TextStyle is styling.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#parent\r\n         * @type {Phaser.GameObjects.Text}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent = text;\r\n\r\n        /**\r\n         * The font family.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#fontFamily\r\n         * @type {string}\r\n         * @default 'Courier'\r\n         * @since 3.0.0\r\n         */\r\n        this.fontFamily;\r\n\r\n        /**\r\n         * The font size.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#fontSize\r\n         * @type {string}\r\n         * @default '16px'\r\n         * @since 3.0.0\r\n         */\r\n        this.fontSize;\r\n\r\n        /**\r\n         * The font style.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#fontStyle\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.fontStyle;\r\n\r\n        /**\r\n         * The background color.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#backgroundColor\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.backgroundColor;\r\n\r\n        /**\r\n         * The text fill color.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#color\r\n         * @type {string}\r\n         * @default '#fff'\r\n         * @since 3.0.0\r\n         */\r\n        this.color;\r\n\r\n        /**\r\n         * The text stroke color.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#stroke\r\n         * @type {string}\r\n         * @default '#fff'\r\n         * @since 3.0.0\r\n         */\r\n        this.stroke;\r\n\r\n        /**\r\n         * The text stroke thickness.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#strokeThickness\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.strokeThickness;\r\n\r\n        /**\r\n         * The horizontal shadow offset.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#shadowOffsetX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowOffsetX;\r\n\r\n        /**\r\n         * The vertical shadow offset.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#shadowOffsetY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowOffsetY;\r\n\r\n        /**\r\n         * The shadow color.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#shadowColor\r\n         * @type {string}\r\n         * @default '#000'\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowColor;\r\n\r\n        /**\r\n         * The shadow blur radius.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#shadowBlur\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowBlur;\r\n\r\n        /**\r\n         * Whether shadow stroke is enabled or not.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#shadowStroke\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowStroke;\r\n\r\n        /**\r\n         * Whether shadow fill is enabled or not.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#shadowFill\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowFill;\r\n\r\n        /**\r\n         * The text alignment.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#align\r\n         * @type {string}\r\n         * @default 'left'\r\n         * @since 3.0.0\r\n         */\r\n        this.align;\r\n\r\n        /**\r\n         * The maximum number of lines to draw.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#maxLines\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.maxLines;\r\n\r\n        /**\r\n         * The fixed width of the text.\r\n         *\r\n         * `0` means no fixed with.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#fixedWidth\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.fixedWidth;\r\n\r\n        /**\r\n         * The fixed height of the text.\r\n         *\r\n         * `0` means no fixed height.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#fixedHeight\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.fixedHeight;\r\n\r\n        /**\r\n         * The resolution the text is rendered to its internal canvas at.\r\n         * The default is 0, which means it will use the resolution set in the Game Config.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#resolution\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.12.0\r\n         */\r\n        this.resolution;\r\n\r\n        /**\r\n         * Whether the text should render right to left.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#rtl\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.rtl;\r\n\r\n        /**\r\n         * The test string to use when measuring the font.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#testString\r\n         * @type {string}\r\n         * @default '|M\u00c9qgy'\r\n         * @since 3.0.0\r\n         */\r\n        this.testString;\r\n\r\n        /**\r\n         * The amount of horizontal padding adding to the width of the text when calculating the font metrics.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#baselineX\r\n         * @type {number}\r\n         * @default 1.2\r\n         * @since 3.3.0\r\n         */\r\n        this.baselineX;\r\n\r\n        /**\r\n         * The amount of vertical padding adding to the width of the text when calculating the font metrics.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#baselineY\r\n         * @type {number}\r\n         * @default 1.4\r\n         * @since 3.3.0\r\n         */\r\n        this.baselineY;\r\n\r\n        /**\r\n         * The font style, size and family.\r\n         *\r\n         * @name Phaser.GameObjects.Text.TextStyle#_font\r\n         * @type {string}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._font;\r\n\r\n        //  Set to defaults + user style\r\n        this.setStyle(style, false, true);\r\n\r\n        var metrics = GetValue(style, 'metrics', false);\r\n\r\n        //  Provide optional TextMetrics in the style object to avoid the canvas look-up / scanning\r\n        //  Doing this is reset if you then change the font of this TextStyle after creation\r\n        if (metrics)\r\n        {\r\n            this.metrics = {\r\n                ascent: GetValue(metrics, 'ascent', 0),\r\n                descent: GetValue(metrics, 'descent', 0),\r\n                fontSize: GetValue(metrics, 'fontSize', 0)\r\n            };\r\n        }\r\n        else\r\n        {\r\n            this.metrics = MeasureText(this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set the text style.\r\n     *\r\n     * @example\r\n     * text.setStyle({\r\n     *     fontSize: '64px',\r\n     *     fontFamily: 'Arial',\r\n     *     color: '#ffffff',\r\n     *     align: 'center',\r\n     *     backgroundColor: '#ff00ff'\r\n     * });\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} style - The style settings to set.\r\n     * @param {boolean} [updateText=true] - Whether to update the text immediately.\r\n     * @param {boolean} [setDefaults=false] - Use the default values is not set, or the local values.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setStyle: function (style, updateText, setDefaults)\r\n    {\r\n        if (updateText === undefined) { updateText = true; }\r\n        if (setDefaults === undefined) { setDefaults = false; }\r\n\r\n        //  Avoid type mutation\r\n        if (style && style.hasOwnProperty('fontSize') && typeof style.fontSize === 'number')\r\n        {\r\n            style.fontSize = style.fontSize.toString() + 'px';\r\n        }\r\n\r\n        for (var key in propertyMap)\r\n        {\r\n            var value = (setDefaults) ? propertyMap[key][1] : this[key];\r\n\r\n            if (key === 'wordWrapCallback' || key === 'wordWrapCallbackScope')\r\n            {\r\n                // Callback & scope should be set without processing the values\r\n                this[key] = GetValue(style, propertyMap[key][0], value);\r\n            }\r\n            else\r\n            {\r\n                this[key] = GetAdvancedValue(style, propertyMap[key][0], value);\r\n            }\r\n        }\r\n\r\n        //  Allow for 'font' override\r\n        var font = GetValue(style, 'font', null);\r\n\r\n        if (font === null)\r\n        {\r\n            this._font = [ this.fontStyle, this.fontSize, this.fontFamily ].join(' ').trim();\r\n        }\r\n        else\r\n        {\r\n            this._font = font;\r\n        }\r\n\r\n        //  Allow for 'fill' to be used in place of 'color'\r\n        var fill = GetValue(style, 'fill', null);\r\n\r\n        if (fill !== null)\r\n        {\r\n            this.color = fill;\r\n        }\r\n\r\n        if (updateText)\r\n        {\r\n            return this.update(true);\r\n        }\r\n        else\r\n        {\r\n            return this.parent;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Synchronize the font settings to the given Canvas Rendering Context.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#syncFont\r\n     * @since 3.0.0\r\n     *\r\n     * @param {HTMLCanvasElement} canvas - The Canvas Element.\r\n     * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n     */\r\n    syncFont: function (canvas, context)\r\n    {\r\n        context.font = this._font;\r\n    },\r\n\r\n    /**\r\n     * Synchronize the text style settings to the given Canvas Rendering Context.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#syncStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {HTMLCanvasElement} canvas - The Canvas Element.\r\n     * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n     */\r\n    syncStyle: function (canvas, context)\r\n    {\r\n        context.textBaseline = 'alphabetic';\r\n\r\n        context.fillStyle = this.color;\r\n        context.strokeStyle = this.stroke;\r\n\r\n        context.lineWidth = this.strokeThickness;\r\n        context.lineCap = 'round';\r\n        context.lineJoin = 'round';\r\n    },\r\n\r\n    /**\r\n     * Synchronize the shadow settings to the given Canvas Rendering Context.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#syncShadow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n     * @param {boolean} enabled - Whether shadows are enabled or not.\r\n     */\r\n    syncShadow: function (context, enabled)\r\n    {\r\n        if (enabled)\r\n        {\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n        }\r\n        else\r\n        {\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n            context.shadowColor = 0;\r\n            context.shadowBlur = 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Update the style settings for the parent Text object.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} recalculateMetrics - Whether to recalculate font and text metrics.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    update: function (recalculateMetrics)\r\n    {\r\n        if (recalculateMetrics)\r\n        {\r\n            this._font = [ this.fontStyle, this.fontSize, this.fontFamily ].join(' ').trim();\r\n\r\n            this.metrics = MeasureText(this);\r\n        }\r\n\r\n        return this.parent.updateText();\r\n    },\r\n\r\n    /**\r\n     * Set the font.\r\n     *\r\n     * If a string is given, the font family is set.\r\n     *\r\n     * If an object is given, the `fontFamily`, `fontSize` and `fontStyle`\r\n     * properties of that object are set.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setFont\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|object)} font - The font family or font settings to set.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFont: function (font)\r\n    {\r\n        var fontFamily = font;\r\n        var fontSize = '';\r\n        var fontStyle = '';\r\n\r\n        if (typeof font !== 'string')\r\n        {\r\n            fontFamily = GetValue(font, 'fontFamily', 'Courier');\r\n            fontSize = GetValue(font, 'fontSize', '16px');\r\n            fontStyle = GetValue(font, 'fontStyle', '');\r\n        }\r\n\r\n        if (fontFamily !== this.fontFamily || fontSize !== this.fontSize || fontStyle !== this.fontStyle)\r\n        {\r\n            this.fontFamily = fontFamily;\r\n            this.fontSize = fontSize;\r\n            this.fontStyle = fontStyle;\r\n    \r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the font family.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setFontFamily\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} family - The font family.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFontFamily: function (family)\r\n    {\r\n        if (this.fontFamily !== family)\r\n        {\r\n            this.fontFamily = family;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the font style.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setFontStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} style - The font style.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFontStyle: function (style)\r\n    {\r\n        if (this.fontStyle !== style)\r\n        {\r\n            this.fontStyle = style;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the font size.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setFontSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|string)} size - The font size.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFontSize: function (size)\r\n    {\r\n        if (typeof size === 'number')\r\n        {\r\n            size = size.toString() + 'px';\r\n        }\r\n\r\n        if (this.fontSize !== size)\r\n        {\r\n            this.fontSize = size;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the test string to use when measuring the font.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setTestString\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} string - The test string to use when measuring the font.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setTestString: function (string)\r\n    {\r\n        this.testString = string;\r\n\r\n        return this.update(true);\r\n    },\r\n\r\n    /**\r\n     * Set a fixed width and height for the text.\r\n     *\r\n     * Pass in `0` for either of these parameters to disable fixed width or height respectively.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setFixedSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The fixed width to set.\r\n     * @param {number} height - The fixed height to set.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFixedSize: function (width, height)\r\n    {\r\n        this.fixedWidth = width;\r\n        this.fixedHeight = height;\r\n\r\n        if (width)\r\n        {\r\n            this.parent.width = width;\r\n        }\r\n\r\n        if (height)\r\n        {\r\n            this.parent.height = height;\r\n        }\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the background color.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setBackgroundColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The background color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setBackgroundColor: function (color)\r\n    {\r\n        this.backgroundColor = color;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the text fill color.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setFill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The text fill color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFill: function (color)\r\n    {\r\n        this.color = color;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the text fill color.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The text fill color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setColor: function (color)\r\n    {\r\n        this.color = color;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the resolution used by the Text object.\r\n     *\r\n     * By default it will be set to match the resolution set in the Game Config,\r\n     * but you can override it via this method. It allows for much clearer text on High DPI devices,\r\n     * at the cost of memory because it uses larger internal Canvas textures for the Text.\r\n     * \r\n     * Please use with caution, as the more high res Text you have, the more memory it uses up.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setResolution\r\n     * @since 3.12.0\r\n     *\r\n     * @param {number} value - The resolution for this Text object to use.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setResolution: function (value)\r\n    {\r\n        this.resolution = value;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the stroke settings.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setStroke\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The stroke color.\r\n     * @param {number} thickness - The stroke thickness.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setStroke: function (color, thickness)\r\n    {\r\n        if (thickness === undefined) { thickness = this.strokeThickness; }\r\n\r\n        if (color === undefined && this.strokeThickness !== 0)\r\n        {\r\n            //  Reset the stroke to zero (disabling it)\r\n            this.strokeThickness = 0;\r\n\r\n            this.update(true);\r\n        }\r\n        else if (this.stroke !== color || this.strokeThickness !== thickness)\r\n        {\r\n            this.stroke = color;\r\n            this.strokeThickness = thickness;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the shadow settings.\r\n     * \r\n     * Calling this method always re-measures the parent Text object,\r\n     * so only call it when you actually change the shadow settings.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setShadow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal shadow offset.\r\n     * @param {number} [y=0] - The vertical shadow offset.\r\n     * @param {string} [color='#000'] - The shadow color.\r\n     * @param {number} [blur=0] - The shadow blur radius.\r\n     * @param {boolean} [shadowStroke=false] - Whether to stroke the shadow.\r\n     * @param {boolean} [shadowFill=true] - Whether to fill the shadow.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadow: function (x, y, color, blur, shadowStroke, shadowFill)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (color === undefined) { color = '#000'; }\r\n        if (blur === undefined) { blur = 0; }\r\n        if (shadowStroke === undefined) { shadowStroke = false; }\r\n        if (shadowFill === undefined) { shadowFill = true; }\r\n\r\n        this.shadowOffsetX = x;\r\n        this.shadowOffsetY = y;\r\n        this.shadowColor = color;\r\n        this.shadowBlur = blur;\r\n        this.shadowStroke = shadowStroke;\r\n        this.shadowFill = shadowFill;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow offset.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setShadowOffset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal shadow offset.\r\n     * @param {number} [y=0] - The vertical shadow offset.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowOffset: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.shadowOffsetX = x;\r\n        this.shadowOffsetY = y;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow color.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setShadowColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [color='#000'] - The shadow color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowColor: function (color)\r\n    {\r\n        if (color === undefined) { color = '#000'; }\r\n\r\n        this.shadowColor = color;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow blur radius.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setShadowBlur\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [blur=0] - The shadow blur radius.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowBlur: function (blur)\r\n    {\r\n        if (blur === undefined) { blur = 0; }\r\n\r\n        this.shadowBlur = blur;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Enable or disable shadow stroke.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setShadowStroke\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} enabled - Whether shadow stroke is enabled or not.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowStroke: function (enabled)\r\n    {\r\n        this.shadowStroke = enabled;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Enable or disable shadow fill.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setShadowFill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} enabled - Whether shadow fill is enabled or not.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowFill: function (enabled)\r\n    {\r\n        this.shadowFill = enabled;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the width (in pixels) to use for wrapping lines.\r\n     *\r\n     * Pass in null to remove wrapping by width.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setWordWrapWidth\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The maximum width of a line in pixels. Set to null to remove wrapping.\r\n     * @param {boolean} [useAdvancedWrap=false] - Whether or not to use the advanced wrapping\r\n     * algorithm. If true, spaces are collapsed and whitespace is trimmed from lines. If false,\r\n     * spaces and whitespace are left as is.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setWordWrapWidth: function (width, useAdvancedWrap)\r\n    {\r\n        if (useAdvancedWrap === undefined) { useAdvancedWrap = false; }\r\n\r\n        this.wordWrapWidth = width;\r\n        this.wordWrapUseAdvanced = useAdvancedWrap;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set a custom callback for wrapping lines.\r\n     *\r\n     * Pass in null to remove wrapping by callback.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setWordWrapCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {TextStyleWordWrapCallback} callback - A custom function that will be responsible for wrapping the\r\n     * text. It will receive two arguments: text (the string to wrap), textObject (this Text\r\n     * instance). It should return the wrapped lines either as an array of lines or as a string with\r\n     * newline characters in place to indicate where breaks should happen.\r\n     * @param {object} [scope=null] - The scope that will be applied when the callback is invoked.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setWordWrapCallback: function (callback, scope)\r\n    {\r\n        if (scope === undefined) { scope = null; }\r\n\r\n        this.wordWrapCallback = callback;\r\n        this.wordWrapCallbackScope = scope;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the text alignment.\r\n     *\r\n     * Expects values like `'left'`, `'right'`, `'center'` or `'justified'`.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setAlign\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} align - The text alignment.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setAlign: function (align)\r\n    {\r\n        if (align === undefined) { align = 'left'; }\r\n\r\n        this.align = align;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the maximum number of lines to draw.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#setMaxLines\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [max=0] - The maximum number of lines to draw.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setMaxLines: function (max)\r\n    {\r\n        if (max === undefined) { max = 0; }\r\n\r\n        this.maxLines = max;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Get the current text metrics.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#getTextMetrics\r\n     * @since 3.0.0\r\n     *\r\n     * @return {BitmapTextMetrics} The text metrics.\r\n     */\r\n    getTextMetrics: function ()\r\n    {\r\n        var metrics = this.metrics;\r\n\r\n        return {\r\n            ascent: metrics.ascent,\r\n            descent: metrics.descent,\r\n            fontSize: metrics.fontSize\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Build a JSON representation of this Text Style.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} A JSON representation of this Text Style.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var output = {};\r\n\r\n        for (var key in propertyMap)\r\n        {\r\n            output[key] = this[key];\r\n        }\r\n\r\n        output.metrics = this.getTextMetrics();\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Destroy this Text Style.\r\n     *\r\n     * @method Phaser.GameObjects.Text.TextStyle#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.parent = undefined;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TextStyle;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","GetAdvancedValue","GetValue","MeasureText","propertyMap","fontFamily","fontSize","fontStyle","backgroundColor","color","stroke","strokeThickness","shadowOffsetX","shadowOffsetY","shadowColor","shadowBlur","shadowStroke","shadowFill","align","maxLines","fixedWidth","fixedHeight","resolution","rtl","testString","baselineX","baselineY","wordWrapWidth","wordWrapCallback","wordWrapCallbackScope","wordWrapUseAdvanced","TextStyle","initialize","text","style","parent","setStyle","metrics","ascent","descent","updateText","setDefaults","undefined","hasOwnProperty","toString","key","value","font","_font","join","trim","fill","update","syncFont","canvas","context","syncStyle","textBaseline","fillStyle","strokeStyle","lineWidth","lineCap","lineJoin","syncShadow","enabled","recalculateMetrics","setFont","setFontFamily","family","setFontStyle","setFontSize","size","setTestString","string","setFixedSize","width","height","setBackgroundColor","setFill","setColor","setResolution","setStroke","thickness","setShadow","x","y","blur","setShadowOffset","setShadowColor","setShadowBlur","setShadowStroke","setShadowFill","setWordWrapWidth","useAdvancedWrap","setWordWrapCallback","callback","scope","setAlign","setMaxLines","max","getTextMetrics","toJSON","output","destroy"]
}
