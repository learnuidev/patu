{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$bitmaptext$ParseFromAtlas.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,qEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOjI,IAAIC,mBAAqBH,OAAA,CAAQ,0EAAR,CAwCzBC,OAAAC,QAAA,CAnBqBE,QAAS,CAACC,KAAD,CAAQC,QAAR,CAAkBC,UAAlB,CAA8BC,QAA9B,CAAwCC,MAAxC,CAAgDC,QAAhD,CAA0DC,QAA1D,CAC9B,CACI,IAAIC,MAAQP,KAAAQ,IAAAC,SAAAC,SAAA,CAA4BR,UAA5B,CAAwCC,QAAxC,CACRQ,OAAAA,CAAMX,KAAAQ,IAAAI,MAAAD,IAAAE,IAAA,CAAwBT,MAAxB,CAEV,OAAIG,MAAJ,EAAaI,MAAb,EAEQG,QAIG,CAJIhB,kBAAA,CAAmBa,MAAnB,CAAwBN,QAAxB,CAAkCC,QAAlC,CAA4CC,KAA5C,CAIJ,CAFPP,KAAAQ,IAAAI,MAAAG,WAAAC,IAAA,CAA+Bf,QAA/B;AAAyC,CAAEa,KAAMA,QAAR,CAAcG,QAASf,UAAvB,CAAmCK,MAAOJ,QAA1C,CAAzC,CAEO,CAAA,CAAA,CANX,EAUW,CAAA,CAdf,CA7BiI;",
"sources":["node_modules/Phaser/src/gameobjects/bitmaptext/ParseFromAtlas.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$bitmaptext$ParseFromAtlas\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar ParseXMLBitmapFont = require('./ParseXMLBitmapFont');\r\n\r\n/**\r\n * Parse an XML Bitmap Font from an Atlas.\r\n *\r\n * Adds the parsed Bitmap Font data to the cache with the `fontName` key.\r\n *\r\n * @function ParseFromAtlas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to parse the Bitmap Font for.\r\n * @param {string} fontName - The key of the font to add to the Bitmap Font cache.\r\n * @param {string} textureKey - The key of the BitmapFont's texture.\r\n * @param {string} frameKey - The key of the BitmapFont texture's frame.\r\n * @param {string} xmlKey - The key of the XML data of the font to parse.\r\n * @param {integer} xSpacing - The x-axis spacing to add between each letter.\r\n * @param {integer} ySpacing - The y-axis spacing to add to the line height.\r\n *\r\n * @return {boolean} Whether the parsing was successful or not.\r\n */\r\nvar ParseFromAtlas = function (scene, fontName, textureKey, frameKey, xmlKey, xSpacing, ySpacing)\r\n{\r\n    var frame = scene.sys.textures.getFrame(textureKey, frameKey);\r\n    var xml = scene.sys.cache.xml.get(xmlKey);\r\n\r\n    if (frame && xml)\r\n    {\r\n        var data = ParseXMLBitmapFont(xml, xSpacing, ySpacing, frame);\r\n\r\n        scene.sys.cache.bitmapFont.add(fontName, { data: data, texture: textureKey, frame: frameKey });\r\n\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n};\r\n\r\nmodule.exports = ParseFromAtlas;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","ParseXMLBitmapFont","ParseFromAtlas","scene","fontName","textureKey","frameKey","xmlKey","xSpacing","ySpacing","frame","sys","textures","getFrame","xml","cache","get","data","bitmapFont","add","texture"]
}
