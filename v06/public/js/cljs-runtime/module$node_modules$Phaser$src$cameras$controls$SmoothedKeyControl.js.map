{
"version":3,
"file":"module$node_modules$Phaser$src$cameras$controls$SmoothedKeyControl.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/Phaser/src/cameras/controls/SmoothedKeyControl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$cameras$controls$SmoothedKeyControl\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetValue = require('../../utils/object/GetValue');\r\n\r\n// var controlConfig = {\r\n//     camera: this.cameras.main,\r\n//     left: cursors.left,\r\n//     right: cursors.right,\r\n//     up: cursors.up,\r\n//     down: cursors.down,\r\n//     zoomIn: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.Q),\r\n//     zoomOut: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E),\r\n//     zoomSpeed: 0.02,\r\n//     acceleration: 0.06,\r\n//     drag: 0.0005,\r\n//     maxSpeed: 1.0\r\n// };\r\n\r\n/**\r\n * @typedef {object} SmoothedKeyControlConfig\r\n *\r\n * @property {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera that this Control will update.\r\n * @property {Phaser.Input.Keyboard.Key} [left] - The Key to be pressed that will move the Camera left.\r\n * @property {Phaser.Input.Keyboard.Key} [right] - The Key to be pressed that will move the Camera right.\r\n * @property {Phaser.Input.Keyboard.Key} [up] - The Key to be pressed that will move the Camera up.\r\n * @property {Phaser.Input.Keyboard.Key} [zoomIn] - The Key to be pressed that will zoom the Camera in.\r\n * @property {Phaser.Input.Keyboard.Key} [zoomOut] - The Key to be pressed that will zoom the Camera out.\r\n * @property {number} [zoomSpeed=0.01] - The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.\r\n * @property {(number|{x:number,y:number})} [acceleration=0] - The horizontal and vertical acceleration the camera will move.\r\n * @property {(number|{x:number,y:number})} [drag=0] - The horizontal and vertical drag applied to the camera when it is moving.\r\n * @property {(number|{x:number,y:number})} [maxSpeed=0] - The maximum horizontal and vertical speed the camera will move.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class SmoothedKeyControl\r\n * @memberOf Phaser.Cameras.Controls\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {SmoothedKeyControlConfig} config - [description]\r\n */\r\nvar SmoothedKeyControl = new Class({\r\n\r\n    initialize:\r\n\r\n    function SmoothedKeyControl (config)\r\n    {\r\n        /**\r\n         * The Camera that this Control will update.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#camera\r\n         * @type {?Phaser.Cameras.Scene2D.Camera}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.camera = GetValue(config, 'camera', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera left.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#left\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.left = GetValue(config, 'left', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera right.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#right\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.right = GetValue(config, 'right', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera up.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#up\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.up = GetValue(config, 'up', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera down.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#down\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.down = GetValue(config, 'down', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will zoom the Camera in.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#zoomIn\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.zoomIn = GetValue(config, 'zoomIn', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will zoom the Camera out.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#zoomOut\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.zoomOut = GetValue(config, 'zoomOut', null);\r\n\r\n        /**\r\n         * The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#zoomSpeed\r\n         * @type {number}\r\n         * @default 0.01\r\n         * @since 3.0.0\r\n         */\r\n        this.zoomSpeed = GetValue(config, 'zoomSpeed', 0.01);\r\n\r\n        /**\r\n         * The horizontal acceleration the camera will move.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#accelX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelX = 0;\r\n\r\n        /**\r\n         * The vertical acceleration the camera will move.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#accelY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelY = 0;\r\n\r\n        var accel = GetValue(config, 'acceleration', null);\r\n\r\n        if (typeof accel === 'number')\r\n        {\r\n            this.accelX = accel;\r\n            this.accelY = accel;\r\n        }\r\n        else\r\n        {\r\n            this.accelX = GetValue(config, 'acceleration.x', 0);\r\n            this.accelY = GetValue(config, 'acceleration.y', 0);\r\n        }\r\n\r\n        /**\r\n         * The horizontal drag applied to the camera when it is moving.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#dragX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.dragX = 0;\r\n\r\n        /**\r\n         * The vertical drag applied to the camera when it is moving.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#dragY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.dragY = 0;\r\n\r\n        var drag = GetValue(config, 'drag', null);\r\n\r\n        if (typeof drag === 'number')\r\n        {\r\n            this.dragX = drag;\r\n            this.dragY = drag;\r\n        }\r\n        else\r\n        {\r\n            this.dragX = GetValue(config, 'drag.x', 0);\r\n            this.dragY = GetValue(config, 'drag.y', 0);\r\n        }\r\n\r\n        /**\r\n         * The maximum horizontal speed the camera will move.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#maxSpeedX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.maxSpeedX = 0;\r\n\r\n        /**\r\n         * The maximum vertical speed the camera will move.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#maxSpeedY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.maxSpeedY = 0;\r\n\r\n        var maxSpeed = GetValue(config, 'maxSpeed', null);\r\n\r\n        if (typeof maxSpeed === 'number')\r\n        {\r\n            this.maxSpeedX = maxSpeed;\r\n            this.maxSpeedY = maxSpeed;\r\n        }\r\n        else\r\n        {\r\n            this.maxSpeedX = GetValue(config, 'maxSpeed.x', 0);\r\n            this.maxSpeedY = GetValue(config, 'maxSpeed.y', 0);\r\n        }\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#_speedX\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._speedX = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#_speedY\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._speedY = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#_zoom\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._zoom = 0;\r\n\r\n        /**\r\n         * A flag controlling if the Controls will update the Camera or not.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#active\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.active = (this.camera !== null);\r\n    },\r\n\r\n    /**\r\n     * Starts the Key Control running, providing it has been linked to a camera.\r\n     *\r\n     * @method Phaser.Cameras.Controls.SmoothedKeyControl#start\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Controls.SmoothedKeyControl} This Key Control instance.\r\n     */\r\n    start: function ()\r\n    {\r\n        this.active = (this.camera !== null);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stops this Key Control from running. Call `start` to start it again.\r\n     *\r\n     * @method Phaser.Cameras.Controls.SmoothedKeyControl#stop\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Controls.SmoothedKeyControl} This Key Control instance.\r\n     */\r\n    stop: function ()\r\n    {\r\n        this.active = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Binds this Key Control to a camera.\r\n     *\r\n     * @method Phaser.Cameras.Controls.SmoothedKeyControl#setCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera to bind this Key Control to.\r\n     *\r\n     * @return {Phaser.Cameras.Controls.SmoothedKeyControl} This Key Control instance.\r\n     */\r\n    setCamera: function (camera)\r\n    {\r\n        this.camera = camera;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Controls.SmoothedKeyControl#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (delta)\r\n    {\r\n        if (!this.active)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (delta === undefined) { delta = 1; }\r\n\r\n        var cam = this.camera;\r\n\r\n        //  Apply Deceleration\r\n\r\n        if (this._speedX > 0)\r\n        {\r\n            this._speedX -= this.dragX * delta;\r\n\r\n            if (this._speedX < 0)\r\n            {\r\n                this._speedX = 0;\r\n            }\r\n        }\r\n        else if (this._speedX < 0)\r\n        {\r\n            this._speedX += this.dragX * delta;\r\n\r\n            if (this._speedX > 0)\r\n            {\r\n                this._speedX = 0;\r\n            }\r\n        }\r\n\r\n        if (this._speedY > 0)\r\n        {\r\n            this._speedY -= this.dragY * delta;\r\n\r\n            if (this._speedY < 0)\r\n            {\r\n                this._speedY = 0;\r\n            }\r\n        }\r\n        else if (this._speedY < 0)\r\n        {\r\n            this._speedY += this.dragY * delta;\r\n\r\n            if (this._speedY > 0)\r\n            {\r\n                this._speedY = 0;\r\n            }\r\n        }\r\n\r\n        //  Check for keys\r\n\r\n        if (this.up && this.up.isDown)\r\n        {\r\n            this._speedY += this.accelY;\r\n\r\n            if (this._speedY > this.maxSpeedY)\r\n            {\r\n                this._speedY = this.maxSpeedY;\r\n            }\r\n        }\r\n        else if (this.down && this.down.isDown)\r\n        {\r\n            this._speedY -= this.accelY;\r\n\r\n            if (this._speedY < -this.maxSpeedY)\r\n            {\r\n                this._speedY = -this.maxSpeedY;\r\n            }\r\n        }\r\n\r\n        if (this.left && this.left.isDown)\r\n        {\r\n            this._speedX += this.accelX;\r\n\r\n            if (this._speedX > this.maxSpeedX)\r\n            {\r\n                this._speedX = this.maxSpeedX;\r\n            }\r\n        }\r\n        else if (this.right && this.right.isDown)\r\n        {\r\n            this._speedX -= this.accelX;\r\n\r\n            if (this._speedX < -this.maxSpeedX)\r\n            {\r\n                this._speedX = -this.maxSpeedX;\r\n            }\r\n        }\r\n\r\n        //  Camera zoom\r\n\r\n        if (this.zoomIn && this.zoomIn.isDown)\r\n        {\r\n            this._zoom = -this.zoomSpeed;\r\n        }\r\n        else if (this.zoomOut && this.zoomOut.isDown)\r\n        {\r\n            this._zoom = this.zoomSpeed;\r\n        }\r\n        else\r\n        {\r\n            this._zoom = 0;\r\n        }\r\n\r\n        //  Apply to Camera\r\n\r\n        if (this._speedX !== 0)\r\n        {\r\n            cam.scrollX -= ((this._speedX * delta) | 0);\r\n        }\r\n\r\n        if (this._speedY !== 0)\r\n        {\r\n            cam.scrollY -= ((this._speedY * delta) | 0);\r\n        }\r\n\r\n        if (this._zoom !== 0)\r\n        {\r\n            cam.zoom += this._zoom;\r\n\r\n            if (cam.zoom < 0.1)\r\n            {\r\n                cam.zoom = 0.1;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Key Control.\r\n     *\r\n     * @method Phaser.Cameras.Controls.SmoothedKeyControl#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.camera = null;\r\n\r\n        this.left = null;\r\n        this.right = null;\r\n        this.up = null;\r\n        this.down = null;\r\n\r\n        this.zoomIn = null;\r\n        this.zoomOut = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = SmoothedKeyControl;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","GetValue","SmoothedKeyControl","initialize","config","camera","left","right","up","down","zoomIn","zoomOut","zoomSpeed","accelY","accelX","accel","dragY","dragX","drag","maxSpeedY","maxSpeedX","maxSpeed","_zoom","_speedY","_speedX","active","start","stop","setCamera","update","delta","undefined","cam","isDown","scrollX","scrollY","zoom","destroy"]
}
