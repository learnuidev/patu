{
"version":3,
"file":"module$node_modules$Phaser$src$data$DataManager.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/data/DataManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$data$DataManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @callback DataEachCallback\r\n *\r\n * @param {*} parent - The parent object of the DataManager.\r\n * @param {string} key - The key of the value.\r\n * @param {*} value - The value.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the game object, key, and data.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The Data Component features a means to store pieces of data specific to a Game Object, System or Plugin.\r\n * You can then search, query it, and retrieve the data. The parent must either extend EventEmitter,\r\n * or have a property called `events` that is an instance of it.\r\n *\r\n * @class DataManager\r\n * @memberOf Phaser.Data\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {object} parent - The object that this DataManager belongs to.\r\n * @param {Phaser.Events.EventEmitter} eventEmitter - The DataManager's event emitter.\r\n */\r\nvar DataManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function DataManager (parent, eventEmitter)\r\n    {\r\n        /**\r\n         * The object that this DataManager belongs to.\r\n         *\r\n         * @name Phaser.Data.DataManager#parent\r\n         * @type {*}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent = parent;\r\n\r\n        /**\r\n         * The DataManager's event emitter.\r\n         *\r\n         * @name Phaser.Data.DataManager#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events = eventEmitter;\r\n\r\n        if (!eventEmitter)\r\n        {\r\n            this.events = (parent.events) ? parent.events : parent;\r\n        }\r\n\r\n        /**\r\n         * The data list.\r\n         *\r\n         * @name Phaser.Data.DataManager#list\r\n         * @type {Object.<string, *>}\r\n         * @default {}\r\n         * @since 3.0.0\r\n         */\r\n        this.list = {};\r\n\r\n        /**\r\n         * The public values list. You can use this to access anything you have stored\r\n         * in this Data Manager. For example, if you set a value called `gold` you can\r\n         * access it via:\r\n         *\r\n         * ```javascript\r\n         * this.data.values.gold;\r\n         * ```\r\n         *\r\n         * You can also modify it directly:\r\n         * \r\n         * ```javascript\r\n         * this.data.values.gold += 1000;\r\n         * ```\r\n         *\r\n         * Doing so will emit a `setdata` event from the parent of this Data Manager.\r\n         *\r\n         * @name Phaser.Data.DataManager#values\r\n         * @type {Object.<string, *>}\r\n         * @default {}\r\n         * @since 3.10.0\r\n         */\r\n        this.values = {};\r\n\r\n        /**\r\n         * Whether setting data is frozen for this DataManager.\r\n         *\r\n         * @name Phaser.Data.DataManager#_frozen\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._frozen = false;\r\n\r\n        if (!parent.hasOwnProperty('sys') && this.events)\r\n        {\r\n            this.events.once('destroy', this.destroy, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Retrieves the value for the given key, or undefined if it doesn't exist.\r\n     *\r\n     * You can also access values via the `values` object. For example, if you had a key called `gold` you can do either:\r\n     * \r\n     * ```javascript\r\n     * this.data.get('gold');\r\n     * ```\r\n     *\r\n     * Or access the value directly:\r\n     * \r\n     * ```javascript\r\n     * this.data.values.gold;\r\n     * ```\r\n     *\r\n     * You can also pass in an array of keys, in which case an array of values will be returned:\r\n     * \r\n     * ```javascript\r\n     * this.data.get([ 'gold', 'armor', 'health' ]);\r\n     * ```\r\n     *\r\n     * This approach is useful for destructuring arrays in ES6.\r\n     *\r\n     * @method Phaser.Data.DataManager#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|string[])} key - The key of the value to retrieve, or an array of keys.\r\n     *\r\n     * @return {*} The value belonging to the given key, or an array of values, the order of which will match the input array.\r\n     */\r\n    get: function (key)\r\n    {\r\n        var list = this.list;\r\n\r\n        if (Array.isArray(key))\r\n        {\r\n            var output = [];\r\n\r\n            for (var i = 0; i < key.length; i++)\r\n            {\r\n                output.push(list[key[i]]);\r\n            }\r\n\r\n            return output;\r\n        }\r\n        else\r\n        {\r\n            return list[key];\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Retrieves all data values in a new object.\r\n     *\r\n     * @method Phaser.Data.DataManager#getAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Object.<string, *>} All data values.\r\n     */\r\n    getAll: function ()\r\n    {\r\n        var results = {};\r\n\r\n        for (var key in this.list)\r\n        {\r\n            if (this.list.hasOwnProperty(key))\r\n            {\r\n                results[key] = this.list[key];\r\n            }\r\n        }\r\n\r\n        return results;\r\n    },\r\n\r\n    /**\r\n     * Queries the DataManager for the values of keys matching the given regular expression.\r\n     *\r\n     * @method Phaser.Data.DataManager#query\r\n     * @since 3.0.0\r\n     *\r\n     * @param {RegExp} search - A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).\r\n     *\r\n     * @return {Object.<string, *>} The values of the keys matching the search string.\r\n     */\r\n    query: function (search)\r\n    {\r\n        var results = {};\r\n\r\n        for (var key in this.list)\r\n        {\r\n            if (this.list.hasOwnProperty(key) && key.match(search))\r\n            {\r\n                results[key] = this.list[key];\r\n            }\r\n        }\r\n\r\n        return results;\r\n    },\r\n\r\n    /**\r\n     * Sets a value for the given key. If the key doesn't already exist in the Data Manager then it is created.\r\n     * \r\n     * ```javascript\r\n     * data.set('name', 'Red Gem Stone');\r\n     * ```\r\n     *\r\n     * You can also pass in an object of key value pairs as the first argument:\r\n     *\r\n     * ```javascript\r\n     * data.set({ name: 'Red Gem Stone', level: 2, owner: 'Link', gold: 50 });\r\n     * ```\r\n     *\r\n     * To get a value back again you can call `get`:\r\n     * \r\n     * ```javascript\r\n     * data.get('gold');\r\n     * ```\r\n     * \r\n     * Or you can access the value directly via the `values` property, where it works like any other variable:\r\n     * \r\n     * ```javascript\r\n     * data.values.gold += 50;\r\n     * ```\r\n     *\r\n     * When the value is first set, a `setdata` event is emitted.\r\n     *\r\n     * If the key already exists, a `changedata` event is emitted instead, along an event named after the key.\r\n     * For example, if you updated an existing key called `PlayerLives` then it would emit the event `changedata_PlayerLives`.\r\n     * These events will be emitted regardless if you use this method to set the value, or the direct `values` setter.\r\n     *\r\n     * Please note that the data keys are case-sensitive and must be valid JavaScript Object property strings.\r\n     * This means the keys `gold` and `Gold` are treated as two unique values within the Data Manager.\r\n     *\r\n     * @method Phaser.Data.DataManager#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|object)} key - The key to set the value for. Or an object or key value pairs. If an object the `data` argument is ignored.\r\n     * @param {*} data - The value to set for the given key. If an object is provided as the key this argument is ignored.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    set: function (key, data)\r\n    {\r\n        if (this._frozen)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        if (typeof key === 'string')\r\n        {\r\n            return this.setValue(key, data);\r\n        }\r\n        else\r\n        {\r\n            for (var entry in key)\r\n            {\r\n                this.setValue(entry, key[entry]);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal value setter, called automatically by the `set` method.\r\n     *\r\n     * @method Phaser.Data.DataManager#setValue\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {string} key - The key to set the value for.\r\n     * @param {*} data - The value to set.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    setValue: function (key, data)\r\n    {\r\n        if (this._frozen)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        if (this.has(key))\r\n        {\r\n            //  Hit the key getter, which will in turn emit the events.\r\n            this.values[key] = data;\r\n        }\r\n        else\r\n        {\r\n            var _this = this;\r\n            var list = this.list;\r\n            var events = this.events;\r\n            var parent = this.parent;\r\n\r\n            Object.defineProperty(this.values, key, {\r\n\r\n                enumerable: true,\r\n                \r\n                configurable: true,\r\n\r\n                get: function ()\r\n                {\r\n                    return list[key];\r\n                },\r\n\r\n                set: function (value)\r\n                {\r\n                    if (!_this._frozen)\r\n                    {\r\n                        var previousValue = list[key];\r\n                        list[key] = value;\r\n\r\n                        events.emit('changedata', parent, key, value, previousValue);\r\n                        events.emit('changedata_' + key, parent, value, previousValue);\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n            list[key] = data;\r\n\r\n            events.emit('setdata', parent, key, data);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Passes all data entries to the given callback.\r\n     *\r\n     * @method Phaser.Data.DataManager#each\r\n     * @since 3.0.0\r\n     *\r\n     * @param {DataEachCallback} callback - The function to call.\r\n     * @param {*} [context] - Value to use as `this` when executing callback.\r\n     * @param {...*} [args] - Additional arguments that will be passed to the callback, after the game object, key, and data.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    each: function (callback, context)\r\n    {\r\n        var args = [ this.parent, null, undefined ];\r\n\r\n        for (var i = 1; i < arguments.length; i++)\r\n        {\r\n            args.push(arguments[i]);\r\n        }\r\n\r\n        for (var key in this.list)\r\n        {\r\n            args[1] = key;\r\n            args[2] = this.list[key];\r\n\r\n            callback.apply(context, args);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Merge the given object of key value pairs into this DataManager.\r\n     *\r\n     * Any newly created values will emit a `setdata` event. Any updated values (see the `overwrite` argument)\r\n     * will emit a `changedata` event.\r\n     *\r\n     * @method Phaser.Data.DataManager#merge\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Object.<string, *>} data - The data to merge.\r\n     * @param {boolean} [overwrite=true] - Whether to overwrite existing data. Defaults to true.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    merge: function (data, overwrite)\r\n    {\r\n        if (overwrite === undefined) { overwrite = true; }\r\n\r\n        //  Merge data from another component into this one\r\n        for (var key in data)\r\n        {\r\n            if (data.hasOwnProperty(key) && (overwrite || (!overwrite && !this.has(key))))\r\n            {\r\n                this.setValue(key, data[key]);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Remove the value for the given key.\r\n     *\r\n     * If the key is found in this Data Manager it is removed from the internal lists and a\r\n     * `removedata` event is emitted.\r\n     * \r\n     * You can also pass in an array of keys, in which case all keys in the array will be removed:\r\n     * \r\n     * ```javascript\r\n     * this.data.remove([ 'gold', 'armor', 'health' ]);\r\n     * ```\r\n     *\r\n     * @method Phaser.Data.DataManager#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|string[])} key - The key to remove, or an array of keys to remove.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    remove: function (key)\r\n    {\r\n        if (this._frozen)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        if (Array.isArray(key))\r\n        {\r\n            for (var i = 0; i < key.length; i++)\r\n            {\r\n                this.removeValue(key[i]);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return this.removeValue(key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal value remover, called automatically by the `remove` method.\r\n     *\r\n     * @method Phaser.Data.DataManager#removeValue\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {string} key - The key to set the value for.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    removeValue: function (key)\r\n    {\r\n        if (this.has(key))\r\n        {\r\n            var data = this.list[key];\r\n\r\n            delete this.list[key];\r\n            delete this.values[key];\r\n\r\n            this.events.emit('removedata', this.parent, key, data);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Retrieves the data associated with the given 'key', deletes it from this Data Manager, then returns it.\r\n     *\r\n     * @method Phaser.Data.DataManager#pop\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the value to retrieve and delete.\r\n     *\r\n     * @return {*} The value of the given key.\r\n     */\r\n    pop: function (key)\r\n    {\r\n        var data = undefined;\r\n\r\n        if (!this._frozen && this.has(key))\r\n        {\r\n            data = this.list[key];\r\n\r\n            delete this.list[key];\r\n            delete this.values[key];\r\n\r\n            this.events.emit('removedata', this, key, data);\r\n        }\r\n\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Determines whether the given key is set in this Data Manager.\r\n     * \r\n     * Please note that the keys are case-sensitive and must be valid JavaScript Object property strings.\r\n     * This means the keys `gold` and `Gold` are treated as two unique values within the Data Manager.\r\n     *\r\n     * @method Phaser.Data.DataManager#has\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key to check.\r\n     *\r\n     * @return {boolean} Returns `true` if the key exists, otherwise `false`.\r\n     */\r\n    has: function (key)\r\n    {\r\n        return this.list.hasOwnProperty(key);\r\n    },\r\n\r\n    /**\r\n     * Freeze or unfreeze this Data Manager. A frozen Data Manager will block all attempts\r\n     * to create new values or update existing ones.\r\n     *\r\n     * @method Phaser.Data.DataManager#setFreeze\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - Whether to freeze or unfreeze the Data Manager.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    setFreeze: function (value)\r\n    {\r\n        this._frozen = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Delete all data in this Data Manager and unfreeze it.\r\n     *\r\n     * @method Phaser.Data.DataManager#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    reset: function ()\r\n    {\r\n        for (var key in this.list)\r\n        {\r\n            delete this.list[key];\r\n            delete this.values[key];\r\n        }\r\n\r\n        this._frozen = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroy this data manager.\r\n     *\r\n     * @method Phaser.Data.DataManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.events.off('changedata');\r\n        this.events.off('setdata');\r\n        this.events.off('removedata');\r\n\r\n        this.parent = null;\r\n    },\r\n\r\n    /**\r\n     * Gets or sets the frozen state of this Data Manager.\r\n     * A frozen Data Manager will block all attempts to create new values or update existing ones.\r\n     *\r\n     * @name Phaser.Data.DataManager#freeze\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\r\n    freeze: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._frozen;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._frozen = (value) ? true : false;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Return the total number of entries in this Data Manager.\r\n     *\r\n     * @name Phaser.Data.DataManager#count\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\r\n    count: {\r\n\r\n        get: function ()\r\n        {\r\n            var i = 0;\r\n\r\n            for (var key in this.list)\r\n            {\r\n                if (this.list[key] !== undefined)\r\n                {\r\n                    i++;\r\n                }\r\n            }\r\n\r\n            return i;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = DataManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","DataManager","Class","initialize","parent","eventEmitter","events","list","values","_frozen","hasOwnProperty","once","destroy","get","key","Array","isArray","output","i","length","push","getAll","results","query","search","match","set","data","setValue","entry","has","_this","Object","defineProperty","enumerable","configurable","value","previousValue","emit","each","callback","context","args","undefined","arguments","apply","merge","overwrite","remove","removeValue","pop","setFreeze","reset","off","freeze","count"]
}
