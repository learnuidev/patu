{
"version":3,
"file":"module$node_modules$Phaser$src$loader$LoaderPlugin.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/Phaser/src/loader/LoaderPlugin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$LoaderPlugin\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar CONST = require('./const');\r\nvar CustomSet = require('../structs/Set');\r\nvar EventEmitter = require('eventemitter3');\r\nvar FileTypesManager = require('./FileTypesManager');\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar XHRSettings = require('./XHRSettings');\r\n\r\n/**\r\n * @classdesc\r\n * The Loader handles loading all external content such as Images, Sounds, Texture Atlases and data files.\r\n * You typically interact with it via `this.load` in your Scene. Scenes can have a `preload` method, which is always\r\n * called before the Scenes `create` method, allowing you to preload assets that the Scene may need.\r\n *\r\n * If you call any `this.load` methods from outside of `Scene.preload` then you need to start the Loader going\r\n * yourself by calling `Loader.start()`. It's only automatically started during the Scene preload.\r\n *\r\n * The Loader uses a combination of tag loading (eg. Audio elements) and XHR and provides progress and completion events.\r\n * Files are loaded in parallel by default. The amount of concurrent connections can be controlled in your Game Configuration.\r\n *\r\n * Once the Loader has started loading you are still able to add files to it. These can be injected as a result of a loader\r\n * event, the type of file being loaded (such as a pack file) or other external events. As long as the Loader hasn't finished\r\n * simply adding a new file to it, while running, will ensure it's added into the current queue.\r\n *\r\n * Every Scene has its own instance of the Loader and they are bound to the Scene in which they are created. However,\r\n * assets loaded by the Loader are placed into global game-level caches. For example, loading an XML file will place that\r\n * file inside `Game.cache.xml`, which is accessible from every Scene in your game, no matter who was responsible\r\n * for loading it. The same is true of Textures. A texture loaded in one Scene is instantly available to all other Scenes\r\n * in your game.\r\n *\r\n * The Loader works by using custom File Types. These are stored in the FileTypesManager, which injects them into the Loader\r\n * when it's instantiated. You can create your own custom file types by extending either the File or MultiFile classes.\r\n * See those files for more details.\r\n *\r\n * @class LoaderPlugin\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberOf Phaser.Loader\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene which owns this Loader instance.\r\n */\r\nvar LoaderPlugin = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function LoaderPlugin (scene)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        var gameConfig = scene.sys.game.config;\r\n        var sceneConfig = scene.sys.settings.loader;\r\n\r\n        /**\r\n         * The Scene which owns this Loader instance.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#scene\r\n         * @type {Phaser.Scene}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * A reference to the Scene Systems.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * A reference to the global Cache Manager.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#cacheManager\r\n         * @type {Phaser.Cache.CacheManager}\r\n         * @protected\r\n         * @since 3.7.0\r\n         */\r\n        this.cacheManager = scene.sys.cache;\r\n\r\n        /**\r\n         * A reference to the global Texture Manager.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#textureManager\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @protected\r\n         * @since 3.7.0\r\n         */\r\n        this.textureManager = scene.sys.textures;\r\n\r\n        //  Inject the available filetypes into the Loader\r\n        FileTypesManager.install(this);\r\n\r\n        /**\r\n         * An optional prefix that is automatically prepended to the start of every file key.\r\n         * If prefix was `MENU.` and you load an image with the key 'Background' the resulting key would be `MENU.Background`.\r\n         * You can set this directly, or call `Loader.setPrefix()`. It will then affect every file added to the Loader\r\n         * from that point on. It does _not_ change any file already in the load queue.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#prefix\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.7.0\r\n         */\r\n        this.prefix = '';\r\n\r\n        /**\r\n         * The value of `path`, if set, is placed before any _relative_ file path given. For example:\r\n         *\r\n         * ```javascript\r\n         * this.load.path = \"images/sprites/\";\r\n         * this.load.image(\"ball\", \"ball.png\");\r\n         * this.load.image(\"tree\", \"level1/oaktree.png\");\r\n         * this.load.image(\"boom\", \"http://server.com/explode.png\");\r\n         * ```\r\n         *\r\n         * Would load the `ball` file from `images/sprites/ball.png` and the tree from\r\n         * `images/sprites/level1/oaktree.png` but the file `boom` would load from the URL\r\n         * given as it's an absolute URL.\r\n         *\r\n         * Please note that the path is added before the filename but *after* the baseURL (if set.)\r\n         *\r\n         * If you set this property directly then it _must_ end with a \"/\". Alternatively, call `setPath()` and it'll do it for you.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#path\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.path = '';\r\n\r\n        /**\r\n         * If you want to append a URL before the path of any asset you can set this here.\r\n         * \r\n         * Useful if allowing the asset base url to be configured outside of the game code.\r\n         * \r\n         * If you set this property directly then it _must_ end with a \"/\". Alternatively, call `setBaseURL()` and it'll do it for you.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#baseURL\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.baseURL = '';\r\n\r\n        this.setBaseURL(GetFastValue(sceneConfig, 'baseURL', gameConfig.loaderBaseURL));\r\n\r\n        this.setPath(GetFastValue(sceneConfig, 'path', gameConfig.loaderPath));\r\n\r\n        this.setPrefix(GetFastValue(sceneConfig, 'prefix', gameConfig.loaderPrefix));\r\n\r\n        /**\r\n         * The number of concurrent / parallel resources to try and fetch at once.\r\n         *\r\n         * Old browsers limit 6 requests per domain; modern ones, especially those with HTTP/2 don't limit it at all.\r\n         *\r\n         * The default is 32 but you can change this in your Game Config, or by changing this property before the Loader starts.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#maxParallelDownloads\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.maxParallelDownloads = GetFastValue(sceneConfig, 'maxParallelDownloads', gameConfig.loaderMaxParallelDownloads);\r\n\r\n        /**\r\n         * xhr specific global settings (can be overridden on a per-file basis)\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#xhr\r\n         * @type {XHRSettingsObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.xhr = XHRSettings(\r\n            GetFastValue(sceneConfig, 'responseType', gameConfig.loaderResponseType),\r\n            GetFastValue(sceneConfig, 'async', gameConfig.loaderAsync),\r\n            GetFastValue(sceneConfig, 'user', gameConfig.loaderUser),\r\n            GetFastValue(sceneConfig, 'password', gameConfig.loaderPassword),\r\n            GetFastValue(sceneConfig, 'timeout', gameConfig.loaderTimeout)\r\n        );\r\n\r\n        /**\r\n         * The crossOrigin value applied to loaded images. Very often this needs to be set to 'anonymous'.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#crossOrigin\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.crossOrigin = GetFastValue(sceneConfig, 'crossOrigin', gameConfig.loaderCrossOrigin);\r\n\r\n        /**\r\n         * The total number of files to load. It may not always be accurate because you may add to the Loader during the process\r\n         * of loading, especially if you load a Pack File. Therefore this value can change, but in most cases remains static.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#totalToLoad\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.totalToLoad = 0;\r\n\r\n        /**\r\n         * The progress of the current load queue, as a float value between 0 and 1.\r\n         * This is updated automatically as files complete loading.\r\n         * Note that it is possible for this value to go down again if you add content to the current load queue during a load.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#progress\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Files are placed in this Set when they're added to the Loader via `addFile`.\r\n         * \r\n         * They are moved to the `inflight` Set when they start loading, and assuming a successful\r\n         * load, to the `queue` Set for further processing.\r\n         *\r\n         * By the end of the load process this Set will be empty.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#list\r\n         * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n         * @since 3.0.0\r\n         */\r\n        this.list = new CustomSet();\r\n\r\n        /**\r\n         * Files are stored in this Set while they're in the process of being loaded.\r\n         * \r\n         * Upon a successful load they are moved to the `queue` Set.\r\n         * \r\n         * By the end of the load process this Set will be empty.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#inflight\r\n         * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n         * @since 3.0.0\r\n         */\r\n        this.inflight = new CustomSet();\r\n\r\n        /**\r\n         * Files are stored in this Set while they're being processed.\r\n         * \r\n         * If the process is successful they are moved to their final destination, which could be\r\n         * a Cache or the Texture Manager.\r\n         * \r\n         * At the end of the load process this Set will be empty.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#queue\r\n         * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n         * @since 3.0.0\r\n         */\r\n        this.queue = new CustomSet();\r\n\r\n        /**\r\n         * A temporary Set in which files are stored after processing,\r\n         * awaiting destruction at the end of the load process.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#_deleteQueue\r\n         * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n         * @private\r\n         * @since 3.7.0\r\n         */\r\n        this._deleteQueue = new CustomSet();\r\n\r\n        /**\r\n         * The total number of files that failed to load during the most recent load.\r\n         * This value is reset when you call `Loader.start`.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#totalFailed\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.7.0\r\n         */\r\n        this.totalFailed = 0;\r\n\r\n        /**\r\n         * The total number of files that successfully loaded during the most recent load.\r\n         * This value is reset when you call `Loader.start`.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#totalComplete\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.7.0\r\n         */\r\n        this.totalComplete = 0;\r\n\r\n        /**\r\n         * The current state of the Loader.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#state\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.state = CONST.LOADER_IDLE;\r\n\r\n        scene.sys.events.once('boot', this.boot, this);\r\n        scene.sys.events.on('start', this.pluginStart, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.systems.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#pluginStart\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    pluginStart: function ()\r\n    {\r\n        this.systems.events.once('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * If you want to append a URL before the path of any asset you can set this here.\r\n     * \r\n     * Useful if allowing the asset base url to be configured outside of the game code.\r\n     * \r\n     * Once a base URL is set it will affect every file loaded by the Loader from that point on. It does _not_ change any\r\n     * file _already_ being loaded. To reset it, call this method with no arguments.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#setBaseURL\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [url] - The URL to use. Leave empty to reset.\r\n     *\r\n     * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n     */\r\n    setBaseURL: function (url)\r\n    {\r\n        if (url === undefined) { url = ''; }\r\n\r\n        if (url !== '' && url.substr(-1) !== '/')\r\n        {\r\n            url = url.concat('/');\r\n        }\r\n\r\n        this.baseURL = url;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The value of `path`, if set, is placed before any _relative_ file path given. For example:\r\n     *\r\n     * ```javascript\r\n     * this.load.setPath(\"images/sprites/\");\r\n     * this.load.image(\"ball\", \"ball.png\");\r\n     * this.load.image(\"tree\", \"level1/oaktree.png\");\r\n     * this.load.image(\"boom\", \"http://server.com/explode.png\");\r\n     * ```\r\n     *\r\n     * Would load the `ball` file from `images/sprites/ball.png` and the tree from\r\n     * `images/sprites/level1/oaktree.png` but the file `boom` would load from the URL\r\n     * given as it's an absolute URL.\r\n     *\r\n     * Please note that the path is added before the filename but *after* the baseURL (if set.)\r\n     * \r\n     * Once a path is set it will then affect every file added to the Loader from that point on. It does _not_ change any\r\n     * file _already_ in the load queue. To reset it, call this method with no arguments.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#setPath\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [path] - The path to use. Leave empty to reset.\r\n     *\r\n     * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n     */\r\n    setPath: function (path)\r\n    {\r\n        if (path === undefined) { path = ''; }\r\n\r\n        if (path !== '' && path.substr(-1) !== '/')\r\n        {\r\n            path = path.concat('/');\r\n        }\r\n\r\n        this.path = path;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * An optional prefix that is automatically prepended to the start of every file key.\r\n     * \r\n     * If prefix was `MENU.` and you load an image with the key 'Background' the resulting key would be `MENU.Background`.\r\n     * \r\n     * Once a prefix is set it will then affect every file added to the Loader from that point on. It does _not_ change any\r\n     * file _already_ in the load queue. To reset it, call this method with no arguments.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#setPrefix\r\n     * @since 3.7.0\r\n     *\r\n     * @param {string} [prefix] - The prefix to use. Leave empty to reset.\r\n     *\r\n     * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n     */\r\n    setPrefix: function (prefix)\r\n    {\r\n        if (prefix === undefined) { prefix = ''; }\r\n\r\n        this.prefix = prefix;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the Cross Origin Resource Sharing value used when loading files.\r\n     * \r\n     * Files can override this value on a per-file basis by specifying an alternative `crossOrigin` value in their file config.\r\n     * \r\n     * Once CORs is set it will then affect every file loaded by the Loader from that point on, as long as they don't have\r\n     * their own CORs setting. To reset it, call this method with no arguments.\r\n     *\r\n     * For more details about CORs see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#setCORS\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [crossOrigin] - The value to use for the `crossOrigin` property in the load request.\r\n     *\r\n     * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n     */\r\n    setCORS: function (crossOrigin)\r\n    {\r\n        this.crossOrigin = crossOrigin;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * This event is fired when a Loader successfully begins to load its queue.\r\n     * \r\n     * @event Phaser.Loader.LoaderPlugin#addFileEvent\r\n     * @param {string} key - The key of the file that was added.\r\n     * @param {string} type - The type of the file that was added.\r\n     * @param {Phaser.Loader.LoaderPlugin} loader - The Loader that had the file added to it.\r\n     * @param {Phaser.Loader.File} loader - The File object that was added to the Loader.\r\n     */\r\n\r\n    /**\r\n     * Adds a file, or array of files, into the load queue.\r\n     *\r\n     * The file must be an instance of `Phaser.Loader.File`, or a class that extends it. The Loader will check that the key\r\n     * used by the file won't conflict with any other key either in the loader, the inflight queue or the target cache.\r\n     * If allowed it will then add the file into the pending list, read for the load to start. Or, if the load has already\r\n     * started, ready for the next batch of files to be pulled from the list to the inflight queue.\r\n     *\r\n     * You should not normally call this method directly, but rather use one of the Loader methods like `image` or `atlas`,\r\n     * however you can call this as long as the file given to it is well formed.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#addFile\r\n     * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Loader.File|Phaser.Loader.File[])} file - The file, or array of files, to be added to the load queue.\r\n     */\r\n    addFile: function (file)\r\n    {\r\n        if (!Array.isArray(file))\r\n        {\r\n            file = [ file ];\r\n        }\r\n\r\n        for (var i = 0; i < file.length; i++)\r\n        {\r\n            var item = file[i];\r\n\r\n            //  Does the file already exist in the cache or texture manager?\r\n            //  Or will it conflict with a file already in the queue or inflight?\r\n            if (!this.keyExists(item))\r\n            {\r\n                this.list.set(item);\r\n\r\n                this.emit('addfile', item.key, item.type, this, item);\r\n\r\n                if (this.isLoading())\r\n                {\r\n                    this.totalToLoad++;\r\n                    this.updateProgress();\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Checks the key and type of the given file to see if it will conflict with anything already\r\n     * in a Cache, the Texture Manager, or the list or inflight queues.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#keyExists\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The file to check the key of.\r\n     *\r\n     * @return {boolean} `true` if adding this file will cause a cache or queue conflict, otherwise `false`.\r\n     */\r\n    keyExists: function (file)\r\n    {\r\n        var keyConflict = file.hasCacheConflict();\r\n\r\n        if (!keyConflict)\r\n        {\r\n            this.list.iterate(function (item)\r\n            {\r\n                if (item.type === file.type && item.key === file.key)\r\n                {\r\n                    keyConflict = true;\r\n\r\n                    return false;\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n        if (!keyConflict && this.isLoading())\r\n        {\r\n            this.inflight.iterate(function (item)\r\n            {\r\n                if (item.type === file.type && item.key === file.key)\r\n                {\r\n                    keyConflict = true;\r\n\r\n                    return false;\r\n                }\r\n\r\n            });\r\n\r\n            this.queue.iterate(function (item)\r\n            {\r\n                if (item.type === file.type && item.key === file.key)\r\n                {\r\n                    keyConflict = true;\r\n\r\n                    return false;\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n        return keyConflict;\r\n    },\r\n\r\n    /**\r\n     * Takes a well formed, fully parsed pack file object and adds its entries into the load queue. Usually you do not call\r\n     * this method directly, but instead use `Loader.pack` and supply a path to a JSON file that holds the\r\n     * pack data. However, if you've got the data prepared you can pass it to this method.\r\n     *\r\n     * You can also provide an optional key. If you do then it will only add the entries from that part of the pack into\r\n     * to the load queue. If not specified it will add all entries it finds. For more details about the pack file format\r\n     * see the `LoaderPlugin.pack` method.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#addPack\r\n     * @since 3.7.0\r\n     *\r\n     * @param {any} data - The Pack File data to be parsed and each entry of it to added to the load queue.\r\n     * @param {string} [packKey] - An optional key to use from the pack file data.\r\n     *\r\n     * @return {boolean} `true` if any files were added to the queue, otherwise `false`.\r\n     */\r\n    addPack: function (pack, packKey)\r\n    {\r\n        //  if no packKey provided we'll add everything to the queue\r\n        if (packKey && pack.hasOwnProperty(packKey))\r\n        {\r\n            pack = { packKey: pack[packKey] };\r\n        }\r\n\r\n        var total = 0;\r\n\r\n        //  Store the loader settings in case this pack replaces them\r\n        var currentBaseURL = this.baseURL;\r\n        var currentPath = this.path;\r\n        var currentPrefix = this.prefix;\r\n\r\n        //  Here we go ...\r\n        for (var key in pack)\r\n        {\r\n            var config = pack[key];\r\n\r\n            //  Any meta data to process?\r\n            var baseURL = GetFastValue(config, 'baseURL', currentBaseURL);\r\n            var path = GetFastValue(config, 'path', currentPath);\r\n            var prefix = GetFastValue(config, 'prefix', currentPrefix);\r\n            var files = GetFastValue(config, 'files', null);\r\n            var defaultType = GetFastValue(config, 'defaultType', 'void');\r\n\r\n            if (Array.isArray(files))\r\n            {\r\n                this.setBaseURL(baseURL);\r\n                this.setPath(path);\r\n                this.setPrefix(prefix);\r\n\r\n                for (var i = 0; i < files.length; i++)\r\n                {\r\n                    var file = files[i];\r\n                    var type = (file.hasOwnProperty('type')) ? file.type : defaultType;\r\n\r\n                    if (this[type])\r\n                    {\r\n                        this[type](file);\r\n                        total++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //  Reset the loader settings\r\n        this.setBaseURL(currentBaseURL);\r\n        this.setPath(currentPath);\r\n        this.setPrefix(currentPrefix);\r\n\r\n        return (total > 0);\r\n    },\r\n\r\n    /**\r\n     * Is the Loader actively loading, or processing loaded files?\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#isLoading\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the Loader is busy loading or processing, otherwise `false`.\r\n     */\r\n    isLoading: function ()\r\n    {\r\n        return (this.state === CONST.LOADER_LOADING || this.state === CONST.LOADER_PROCESSING);\r\n    },\r\n\r\n    /**\r\n     * Is the Loader ready to start a new load?\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#isReady\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the Loader is ready to start a new load, otherwise `false`.\r\n     */\r\n    isReady: function ()\r\n    {\r\n        return (this.state === CONST.LOADER_IDLE || this.state === CONST.LOADER_COMPLETE);\r\n    },\r\n\r\n    /**\r\n     * This event is fired when a Loader successfully begins to load its queue.\r\n     * \r\n     * @event Phaser.Loader.LoaderPlugin#startEvent\r\n     * @param {Phaser.Loader.LoaderPlugin} loader - The Loader instance that started.\r\n     */\r\n\r\n    /**\r\n     * Starts the Loader running. This will reset the progress and totals and then emit a `start` event.\r\n     * If there is nothing in the queue the Loader will immediately complete, otherwise it will start\r\n     * loading the first batch of files.\r\n     *\r\n     * The Loader is started automatically if the queue is populated within your Scenes `preload` method.\r\n     *\r\n     * However, outside of this, you need to call this method to start it.\r\n     *\r\n     * If the Loader is already running this method will simply return.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#start\r\n     * @fires Phaser.Loader.LoaderPlugin#startEvent\r\n     * @since 3.0.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (!this.isReady())\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.progress = 0;\r\n\r\n        this.totalFailed = 0;\r\n        this.totalComplete = 0;\r\n        this.totalToLoad = this.list.size;\r\n\r\n        this.emit('start', this);\r\n\r\n        if (this.list.size === 0)\r\n        {\r\n            this.loadComplete();\r\n        }\r\n        else\r\n        {\r\n            this.state = CONST.LOADER_LOADING;\r\n\r\n            this.inflight.clear();\r\n            this.queue.clear();\r\n\r\n            this.updateProgress();\r\n\r\n            this.checkLoadQueue();\r\n\r\n            this.systems.events.on('update', this.update, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * This event is fired when the Loader updates its progress, typically as a result of\r\n     * a file having completed loading.\r\n     * \r\n     * @event Phaser.Loader.LoaderPlugin#progressEvent\r\n     * @param {number} progress - The current progress of the load. A value between 0 and 1.\r\n     */\r\n\r\n    /**\r\n     * Called automatically during the load process.\r\n     * It updates the `progress` value and then emits a progress event, which you can use to\r\n     * display a loading bar in your game.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#updateProgress\r\n     * @fires Phaser.Loader.LoaderPlugin#progressEvent\r\n     * @since 3.0.0\r\n     */\r\n    updateProgress: function ()\r\n    {\r\n        this.progress = 1 - ((this.list.size + this.inflight.size) / this.totalToLoad);\r\n\r\n        this.emit('progress', this.progress);\r\n    },\r\n\r\n    /**\r\n     * Called automatically during the load process.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#update\r\n     * @since 3.10.0\r\n     */\r\n    update: function ()\r\n    {\r\n        if (this.state === CONST.LOADER_LOADING && this.list.size > 0 && this.inflight.size < this.maxParallelDownloads)\r\n        {\r\n            this.checkLoadQueue();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * An internal method called by the Loader.\r\n     * \r\n     * It will check to see if there are any more files in the pending list that need loading, and if so it will move\r\n     * them from the list Set into the inflight Set, set their CORs flag and start them loading.\r\n     * \r\n     * It will carrying on doing this for each file in the pending list until it runs out, or hits the max allowed parallel downloads.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#checkLoadQueue\r\n     * @private\r\n     * @since 3.7.0\r\n     */\r\n    checkLoadQueue: function ()\r\n    {\r\n        this.list.each(function (file)\r\n        {\r\n            if (file.state === CONST.FILE_POPULATED || (file.state === CONST.FILE_PENDING && this.inflight.size < this.maxParallelDownloads))\r\n            {\r\n                this.inflight.set(file);\r\n\r\n                this.list.delete(file);\r\n\r\n                //  If the file doesn't have its own crossOrigin set, we'll use the Loaders (which is undefined by default)\r\n                if (!file.crossOrigin)\r\n                {\r\n                    file.crossOrigin = this.crossOrigin;\r\n                }\r\n\r\n                file.load();\r\n            }\r\n\r\n            if (this.inflight.size === this.maxParallelDownloads)\r\n            {\r\n                //  Tells the Set iterator to abort\r\n                return false;\r\n            }\r\n\r\n        }, this);\r\n    },\r\n\r\n    /**\r\n     * This event is fired when the a file successfully completes loading, _before_ it is processed.\r\n     * \r\n     * @event Phaser.Loader.LoaderPlugin#loadEvent\r\n     * @param {Phaser.Loader.File} file - The file that has completed loading.\r\n     */\r\n\r\n    /**\r\n     * This event is fired when the a file errors during load.\r\n     * \r\n     * @event Phaser.Loader.LoaderPlugin#loadErrorEvent\r\n     * @param {Phaser.Loader.File} file - The file that has failed to load.\r\n     */\r\n\r\n    /**\r\n     * An internal method called automatically by the XHRLoader belong to a File.\r\n     * \r\n     * This method will remove the given file from the inflight Set and update the load progress.\r\n     * If the file was successful its `onProcess` method is called, otherwise it is added to the delete queue.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#nextFile\r\n     * @fires Phaser.Loader.LoaderPlugin#loadEvent\r\n     * @fires Phaser.Loader.LoaderPlugin#loadErrorEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The File that just finished loading, or errored during load.\r\n     * @param {boolean} success - `true` if the file loaded successfully, otherwise `false`.\r\n     */\r\n    nextFile: function (file, success)\r\n    {\r\n        //  Has the game been destroyed during load? If so, bail out now.\r\n        if (!this.inflight)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.inflight.delete(file);\r\n\r\n        this.updateProgress();\r\n\r\n        if (success)\r\n        {\r\n            this.totalComplete++;\r\n\r\n            this.queue.set(file);\r\n\r\n            this.emit('load', file);\r\n\r\n            file.onProcess();\r\n        }\r\n        else\r\n        {\r\n            this.totalFailed++;\r\n\r\n            this._deleteQueue.set(file);\r\n\r\n            this.emit('loaderror', file);\r\n\r\n            this.fileProcessComplete(file);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * An internal method that is called automatically by the File when it has finished processing.\r\n     *\r\n     * If the process was successful, and the File isn't part of a MultiFile, its `addToCache` method is called.\r\n     *\r\n     * It this then removed from the queue. If there are no more files to load `loadComplete` is called.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#fileProcessComplete\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The file that has finished processing.\r\n     */\r\n    fileProcessComplete: function (file)\r\n    {\r\n        //  Has the game been destroyed during load? If so, bail out now.\r\n        if (!this.scene || !this.systems || !this.systems.game || this.systems.game.pendingDestroy)\r\n        {\r\n            return;\r\n        }\r\n\r\n        //  This file has failed, so move it to the failed Set\r\n        if (file.state === CONST.FILE_ERRORED)\r\n        {\r\n            if (file.multiFile)\r\n            {\r\n                file.multiFile.onFileFailed(file);\r\n            }\r\n        }\r\n        else if (file.state === CONST.FILE_COMPLETE)\r\n        {\r\n            if (file.multiFile)\r\n            {\r\n                if (file.multiFile.isReadyToProcess())\r\n                {\r\n                    //  If we got here then all files the link file needs are ready to add to the cache\r\n                    file.multiFile.addToCache();\r\n                }\r\n            }\r\n            else\r\n            {\r\n                //  If we got here, then the file processed, so let it add itself to its cache\r\n                file.addToCache();\r\n            }\r\n        }\r\n\r\n        //  Remove it from the queue\r\n        this.queue.delete(file);\r\n\r\n        //  Nothing left to do?\r\n\r\n        if (this.list.size === 0 && this.inflight.size === 0 && this.queue.size === 0)\r\n        {\r\n            this.loadComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * This event is fired when the Loader has finished loading everything and the queue is empty.\r\n     * By this point every loaded file will now be in its associated cache and ready for use.\r\n     * \r\n     * @event Phaser.Loader.LoaderPlugin#completeEvent\r\n     * @param {Phaser.Loader.File} file - The file that has failed to load.\r\n     */\r\n\r\n    /**\r\n     * Called at the end when the load queue is exhausted and all files have either loaded or errored.\r\n     * By this point every loaded file will now be in its associated cache and ready for use.\r\n     *\r\n     * Also clears down the Sets, puts progress to 1 and clears the deletion queue.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#loadComplete\r\n     * @fires Phaser.Loader.LoaderPlugin#completeEvent\r\n     * @since 3.7.0\r\n     */\r\n    loadComplete: function ()\r\n    {\r\n        this.emit('loadcomplete', this);\r\n\r\n        this.list.clear();\r\n        this.inflight.clear();\r\n        this.queue.clear();\r\n\r\n        this.progress = 1;\r\n\r\n        this.state = CONST.LOADER_COMPLETE;\r\n\r\n        this.systems.events.off('update', this.update, this);\r\n\r\n        //  Call 'destroy' on each file ready for deletion\r\n        this._deleteQueue.iterateLocal('destroy');\r\n\r\n        this._deleteQueue.clear();\r\n\r\n        this.emit('complete', this, this.totalComplete, this.totalFailed);\r\n    },\r\n\r\n    /**\r\n     * Adds a File into the pending-deletion queue.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#flagForRemoval\r\n     * @since 3.7.0\r\n     * \r\n     * @param {Phaser.Loader.File} file - The File to be queued for deletion when the Loader completes.\r\n     */\r\n    flagForRemoval: function (file)\r\n    {\r\n        this._deleteQueue.set(file);\r\n    },\r\n\r\n    /**\r\n     * Converts the given JSON data into a file that the browser then prompts you to download so you can save it locally.\r\n     *\r\n     * The data must be well formed JSON and ready-parsed, not a JavaScript object.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#saveJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {*} data - The JSON data, ready parsed.\r\n     * @param {string} [filename=file.json] - The name to save the JSON file as.\r\n     *\r\n     * @return {Phaser.Loader.LoaderPlugin} This Loader plugin.\r\n     */\r\n    saveJSON: function (data, filename)\r\n    {\r\n        return this.save(JSON.stringify(data), filename);\r\n    },\r\n\r\n    /**\r\n     * Causes the browser to save the given data as a file to its default Downloads folder.\r\n     * \r\n     * Creates a DOM level anchor link, assigns it as being a `download` anchor, sets the href\r\n     * to be an ObjectURL based on the given data, and then invokes a click event.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#save\r\n     * @since 3.0.0\r\n     *\r\n     * @param {*} data - The data to be saved. Will be passed through URL.createObjectURL.\r\n     * @param {string} [filename=file.json] - The filename to save the file as.\r\n     * @param {string} [filetype=application/json] - The file type to use when saving the file. Defaults to JSON.\r\n     *\r\n     * @return {Phaser.Loader.LoaderPlugin} This Loader plugin.\r\n     */\r\n    save: function (data, filename, filetype)\r\n    {\r\n        if (filename === undefined) { filename = 'file.json'; }\r\n        if (filetype === undefined) { filetype = 'application/json'; }\r\n\r\n        var blob = new Blob([ data ], { type: filetype });\r\n\r\n        var url = URL.createObjectURL(blob);\r\n\r\n        var a = document.createElement('a');\r\n\r\n        a.download = filename;\r\n        a.textContent = 'Download ' + filename;\r\n        a.href = url;\r\n        a.click();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resets the Loader.\r\n     *\r\n     * This will clear all lists and reset the base URL, path and prefix.\r\n     *\r\n     * Warning: If the Loader is currently downloading files, or has files in its queue, they will be aborted.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#reset\r\n     * @since 3.0.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.list.clear();\r\n        this.inflight.clear();\r\n        this.queue.clear();\r\n\r\n        var gameConfig = this.systems.game.config;\r\n        var sceneConfig = this.systems.settings.loader;\r\n\r\n        this.setBaseURL(GetFastValue(sceneConfig, 'baseURL', gameConfig.loaderBaseURL));\r\n        this.setPath(GetFastValue(sceneConfig, 'path', gameConfig.loaderPath));\r\n        this.setPrefix(GetFastValue(sceneConfig, 'prefix', gameConfig.loaderPrefix));\r\n\r\n        this.state = CONST.LOADER_IDLE;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.state = CONST.LOADER_SHUTDOWN;\r\n\r\n        this.systems.events.off('update', this.update, this);\r\n        this.systems.events.off('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.state = CONST.LOADER_DESTROYED;\r\n\r\n        this.systems.events.off('update', this.update, this);\r\n        this.systems.events.off('start', this.pluginStart, this);\r\n\r\n        this.list = null;\r\n        this.inflight = null;\r\n        this.queue = null;\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n        this.textureManager = null;\r\n        this.cacheManager = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('Loader', LoaderPlugin, 'load');\r\n\r\nmodule.exports = LoaderPlugin;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","CONST","CustomSet","EventEmitter","FileTypesManager","GetFastValue","PluginCache","XHRSettings","LoaderPlugin","Extends","initialize","scene","call","gameConfig","sys","game","config","sceneConfig","settings","loader","systems","cacheManager","cache","textureManager","textures","install","baseURL","path","prefix","setBaseURL","loaderBaseURL","setPath","loaderPath","setPrefix","loaderPrefix","maxParallelDownloads","loaderMaxParallelDownloads","xhr","loaderResponseType","loaderAsync","loaderUser","loaderPassword","loaderTimeout","crossOrigin","loaderCrossOrigin","progress","totalToLoad","list","inflight","queue","_deleteQueue","totalComplete","totalFailed","state","LOADER_IDLE","events","once","boot","on","pluginStart","destroy","shutdown","url","undefined","substr","concat","setCORS","addFile","file","Array","isArray","i","length","item","keyExists","set","emit","key","type","isLoading","updateProgress","keyConflict","hasCacheConflict","iterate","addPack","pack","packKey","hasOwnProperty","total","currentBaseURL","currentPath","currentPrefix","files","defaultType","LOADER_LOADING","LOADER_PROCESSING","isReady","LOADER_COMPLETE","start","size","loadComplete","clear","checkLoadQueue","update","each","FILE_POPULATED","FILE_PENDING","delete","load","nextFile","success","onProcess","fileProcessComplete","pendingDestroy","FILE_ERRORED","multiFile","onFileFailed","FILE_COMPLETE","isReadyToProcess","addToCache","off","iterateLocal","flagForRemoval","saveJSON","data","filename","save","JSON","stringify","filetype","blob","Blob","URL","createObjectURL","a","document","createElement","download","textContent","href","click","reset","LOADER_SHUTDOWN","LOADER_DESTROYED","register"]
}
