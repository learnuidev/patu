{
"version":3,
"file":"module$node_modules$Phaser$src$display$color$ValueToColor.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOtH,IAAIC,iBAAmBH,OAAA,CAAQ,+DAAR,CAAvB,CACII,eAAiBJ,OAAA,CAAQ,6DAAR,CADrB,CAEIK,cAAgBL,OAAA,CAAQ,4DAAR,CAFpB,CAGIM,iBAAmBN,OAAA,CAAQ,+DAAR,CAwCvBC,OAAAC,QAAA,CA3BmBK,QAAS,CAACC,KAAD,CAC5B,CAGI,OAFQC,MAAOD,MAEf,EAEI,KAAK,QAAL,CAEI,MAAyC,KAAzC;AAAIA,KAAAE,OAAA,CAAa,CAAb,CAAgB,CAAhB,CAAAC,YAAA,EAAJ,CAEWL,gBAAA,CAAiBE,KAAjB,CAFX,CAMWL,gBAAA,CAAiBK,KAAjB,CAGf,MAAK,QAAL,CAEI,MAAOJ,eAAA,CAAeI,KAAf,CAEX,MAAK,QAAL,CAEI,MAAOH,cAAA,CAAcG,KAAd,CAnBf,CAHJ,CAxBsH;",
"sources":["node_modules/Phaser/src/display/color/ValueToColor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$display$color$ValueToColor\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar HexStringToColor = require('./HexStringToColor');\r\nvar IntegerToColor = require('./IntegerToColor');\r\nvar ObjectToColor = require('./ObjectToColor');\r\nvar RGBStringToColor = require('./RGBStringToColor');\r\n\r\n/**\r\n * Converts the given source color value into an instance of a Color class.\r\n * The value can be either a string, prefixed with `rgb` or a hex string, a number or an Object.\r\n *\r\n * @function Phaser.Display.Color.ValueToColor\r\n * @since 3.0.0\r\n *\r\n * @param {(string|number|InputColorObject)} input - The source color value to convert.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\r\nvar ValueToColor = function (input)\r\n{\r\n    var t = typeof input;\r\n\r\n    switch (t)\r\n    {\r\n        case 'string':\r\n\r\n            if (input.substr(0, 3).toLowerCase() === 'rgb')\r\n            {\r\n                return RGBStringToColor(input);\r\n            }\r\n            else\r\n            {\r\n                return HexStringToColor(input);\r\n            }\r\n\r\n        case 'number':\r\n\r\n            return IntegerToColor(input);\r\n\r\n        case 'object':\r\n\r\n            return ObjectToColor(input);\r\n    }\r\n};\r\n\r\nmodule.exports = ValueToColor;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","HexStringToColor","IntegerToColor","ObjectToColor","RGBStringToColor","ValueToColor","input","t","substr","toLowerCase"]
}
