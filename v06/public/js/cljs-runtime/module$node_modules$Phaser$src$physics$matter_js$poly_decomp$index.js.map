{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$poly_decomp$index.js",
"lineCount":19,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/poly-decomp/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$poly_decomp$index\"] = function(global,require,module,exports) {\n/**\r\n * @author       Stefan Hedman <schteppe@gmail.com> (http://steffe.se)\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n//  v0.3.0\r\n\r\nmodule.exports = {\r\n    decomp: polygonDecomp,\r\n    quickDecomp: polygonQuickDecomp,\r\n    isSimple: polygonIsSimple,\r\n    removeCollinearPoints: polygonRemoveCollinearPoints,\r\n    removeDuplicatePoints: polygonRemoveDuplicatePoints,\r\n    makeCCW: polygonMakeCCW\r\n};\r\n\r\n/**\r\n * Compute the intersection between two lines.\r\n * @static\r\n * @method lineInt\r\n * @param  {Array}  l1          Line vector 1\r\n * @param  {Array}  l2          Line vector 2\r\n * @param  {Number} precision   Precision to use when checking if the lines are parallel\r\n * @return {Array}              The intersection point.\r\n */\r\nfunction lineInt(l1,l2,precision){\r\n    precision = precision || 0;\r\n    var i = [0,0]; // point\r\n    var a1, b1, c1, a2, b2, c2, det; // scalars\r\n    a1 = l1[1][1] - l1[0][1];\r\n    b1 = l1[0][0] - l1[1][0];\r\n    c1 = a1 * l1[0][0] + b1 * l1[0][1];\r\n    a2 = l2[1][1] - l2[0][1];\r\n    b2 = l2[0][0] - l2[1][0];\r\n    c2 = a2 * l2[0][0] + b2 * l2[0][1];\r\n    det = a1 * b2 - a2*b1;\r\n    if (!scalar_eq(det, 0, precision)) { // lines are not parallel\r\n        i[0] = (b2 * c1 - b1 * c2) / det;\r\n        i[1] = (a1 * c2 - a2 * c1) / det;\r\n    }\r\n    return i;\r\n}\r\n\r\n/**\r\n * Checks if two line segments intersects.\r\n * @method segmentsIntersect\r\n * @param {Array} p1 The start vertex of the first line segment.\r\n * @param {Array} p2 The end vertex of the first line segment.\r\n * @param {Array} q1 The start vertex of the second line segment.\r\n * @param {Array} q2 The end vertex of the second line segment.\r\n * @return {Boolean} True if the two line segments intersect\r\n */\r\nfunction lineSegmentsIntersect(p1, p2, q1, q2){\r\n\tvar dx = p2[0] - p1[0];\r\n\tvar dy = p2[1] - p1[1];\r\n\tvar da = q2[0] - q1[0];\r\n\tvar db = q2[1] - q1[1];\r\n\r\n\t// segments are parallel\r\n\tif((da*dy - db*dx) === 0){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx);\r\n\tvar t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy);\r\n\r\n\treturn (s>=0 && s<=1 && t>=0 && t<=1);\r\n}\r\n\r\n/**\r\n * Get the area of a triangle spanned by the three given points. Note that the area will be negative if the points are not given in counter-clockwise order.\r\n * @static\r\n * @method area\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Array} c\r\n * @return {Number}\r\n */\r\nfunction triangleArea(a,b,c){\r\n    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1])));\r\n}\r\n\r\nfunction isLeft(a,b,c){\r\n    return triangleArea(a,b,c) > 0;\r\n}\r\n\r\nfunction isLeftOn(a,b,c) {\r\n    return triangleArea(a, b, c) >= 0;\r\n}\r\n\r\nfunction isRight(a,b,c) {\r\n    return triangleArea(a, b, c) < 0;\r\n}\r\n\r\nfunction isRightOn(a,b,c) {\r\n    return triangleArea(a, b, c) <= 0;\r\n}\r\n\r\nvar tmpPoint1 = [],\r\n    tmpPoint2 = [];\r\n\r\n/**\r\n * Check if three points are collinear\r\n * @method collinear\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Array} c\r\n * @param  {Number} [thresholdAngle=0] Threshold angle to use when comparing the vectors. The function will return true if the angle between the resulting vectors is less than this value. Use zero for max precision.\r\n * @return {Boolean}\r\n */\r\nfunction collinear(a,b,c,thresholdAngle) {\r\n    if(!thresholdAngle){\r\n        return triangleArea(a, b, c) === 0;\r\n    } else {\r\n        var ab = tmpPoint1,\r\n            bc = tmpPoint2;\r\n\r\n        ab[0] = b[0]-a[0];\r\n        ab[1] = b[1]-a[1];\r\n        bc[0] = c[0]-b[0];\r\n        bc[1] = c[1]-b[1];\r\n\r\n        var dot = ab[0]*bc[0] + ab[1]*bc[1],\r\n            magA = Math.sqrt(ab[0]*ab[0] + ab[1]*ab[1]),\r\n            magB = Math.sqrt(bc[0]*bc[0] + bc[1]*bc[1]),\r\n            angle = Math.acos(dot/(magA*magB));\r\n        return angle < thresholdAngle;\r\n    }\r\n}\r\n\r\nfunction sqdist(a,b){\r\n    var dx = b[0] - a[0];\r\n    var dy = b[1] - a[1];\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * Get a vertex at position i. It does not matter if i is out of bounds, this function will just cycle.\r\n * @method at\r\n * @param  {Number} i\r\n * @return {Array}\r\n */\r\nfunction polygonAt(polygon, i){\r\n    var s = polygon.length;\r\n    return polygon[i < 0 ? i % s + s : i % s];\r\n}\r\n\r\n/**\r\n * Clear the polygon data\r\n * @method clear\r\n * @return {Array}\r\n */\r\nfunction polygonClear(polygon){\r\n    polygon.length = 0;\r\n}\r\n\r\n/**\r\n * Append points \"from\" to \"to\"-1 from an other polygon \"poly\" onto this one.\r\n * @method append\r\n * @param {Polygon} poly The polygon to get points from.\r\n * @param {Number}  from The vertex index in \"poly\".\r\n * @param {Number}  to The end vertex index in \"poly\". Note that this vertex is NOT included when appending.\r\n * @return {Array}\r\n */\r\nfunction polygonAppend(polygon, poly, from, to){\r\n    for(var i=from; i<to; i++){\r\n        polygon.push(poly[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Make sure that the polygon vertices are ordered counter-clockwise.\r\n * @method makeCCW\r\n */\r\nfunction polygonMakeCCW(polygon){\r\n    var br = 0,\r\n        v = polygon;\r\n\r\n    // find bottom right point\r\n    for (var i = 1; i < polygon.length; ++i) {\r\n        if (v[i][1] < v[br][1] || (v[i][1] === v[br][1] && v[i][0] > v[br][0])) {\r\n            br = i;\r\n        }\r\n    }\r\n\r\n    // reverse poly if clockwise\r\n    if (!isLeft(polygonAt(polygon, br - 1), polygonAt(polygon, br), polygonAt(polygon, br + 1))) {\r\n        polygonReverse(polygon);\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Reverse the vertices in the polygon\r\n * @method reverse\r\n */\r\nfunction polygonReverse(polygon){\r\n    var tmp = [];\r\n    var N = polygon.length;\r\n    for(var i=0; i!==N; i++){\r\n        tmp.push(polygon.pop());\r\n    }\r\n    for(var i=0; i!==N; i++){\r\n\t\tpolygon[i] = tmp[i];\r\n    }\r\n}\r\n\r\n/**\r\n * Check if a point in the polygon is a reflex point\r\n * @method isReflex\r\n * @param  {Number}  i\r\n * @return {Boolean}\r\n */\r\nfunction polygonIsReflex(polygon, i){\r\n    return isRight(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1));\r\n}\r\n\r\nvar tmpLine1=[],\r\n    tmpLine2=[];\r\n\r\n/**\r\n * Check if two vertices in the polygon can see each other\r\n * @method canSee\r\n * @param  {Number} a Vertex index 1\r\n * @param  {Number} b Vertex index 2\r\n * @return {Boolean}\r\n */\r\nfunction polygonCanSee(polygon, a,b) {\r\n    var p, dist, l1=tmpLine1, l2=tmpLine2;\r\n\r\n    if (isLeftOn(polygonAt(polygon, a + 1), polygonAt(polygon, a), polygonAt(polygon, b)) && isRightOn(polygonAt(polygon, a - 1), polygonAt(polygon, a), polygonAt(polygon, b))) {\r\n        return false;\r\n    }\r\n    dist = sqdist(polygonAt(polygon, a), polygonAt(polygon, b));\r\n    for (var i = 0; i !== polygon.length; ++i) { // for each edge\r\n        if ((i + 1) % polygon.length === a || i === a){ // ignore incident edges\r\n            continue;\r\n        }\r\n        if (isLeftOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i + 1)) && isRightOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i))) { // if diag intersects an edge\r\n            l1[0] = polygonAt(polygon, a);\r\n            l1[1] = polygonAt(polygon, b);\r\n            l2[0] = polygonAt(polygon, i);\r\n            l2[1] = polygonAt(polygon, i + 1);\r\n            p = lineInt(l1,l2);\r\n            if (sqdist(polygonAt(polygon, a), p) < dist) { // if edge is blocking visibility to b\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Check if two vertices in the polygon can see each other\r\n * @method canSee2\r\n * @param  {Number} a Vertex index 1\r\n * @param  {Number} b Vertex index 2\r\n * @return {Boolean}\r\n */\r\nfunction polygonCanSee2(polygon, a,b) {\r\n    // for each edge\r\n    for (var i = 0; i !== polygon.length; ++i) {\r\n        // ignore incident edges\r\n        if (i === a || i === b || (i + 1) % polygon.length === a || (i + 1) % polygon.length === b){\r\n            continue;\r\n        }\r\n        if( lineSegmentsIntersect(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i), polygonAt(polygon, i+1)) ){\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Copy the polygon from vertex i to vertex j.\r\n * @method copy\r\n * @param  {Number} i\r\n * @param  {Number} j\r\n * @param  {Polygon} [targetPoly]   Optional target polygon to save in.\r\n * @return {Polygon}                The resulting copy.\r\n */\r\nfunction polygonCopy(polygon, i,j,targetPoly){\r\n    var p = targetPoly || [];\r\n    polygonClear(p);\r\n    if (i < j) {\r\n        // Insert all vertices from i to j\r\n        for(var k=i; k<=j; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n\r\n    } else {\r\n\r\n        // Insert vertices 0 to j\r\n        for(var k=0; k<=j; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n\r\n        // Insert vertices i to end\r\n        for(var k=i; k<polygon.length; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n    }\r\n\r\n    return p;\r\n}\r\n\r\n/**\r\n * Decomposes the polygon into convex pieces. Returns a list of edges [[p1,p2],[p2,p3],...] that cuts the polygon.\r\n * Note that this algorithm has complexity O(N^4) and will be very slow for polygons with many vertices.\r\n * @method getCutEdges\r\n * @return {Array}\r\n */\r\nfunction polygonGetCutEdges(polygon) {\r\n    var min=[], tmp1=[], tmp2=[], tmpPoly = [];\r\n    var nDiags = Number.MAX_VALUE;\r\n\r\n    for (var i = 0; i < polygon.length; ++i) {\r\n        if (polygonIsReflex(polygon, i)) {\r\n            for (var j = 0; j < polygon.length; ++j) {\r\n                if (polygonCanSee(polygon, i, j)) {\r\n                    tmp1 = polygonGetCutEdges(polygonCopy(polygon, i, j, tmpPoly));\r\n                    tmp2 = polygonGetCutEdges(polygonCopy(polygon, j, i, tmpPoly));\r\n\r\n                    for(var k=0; k<tmp2.length; k++){\r\n                        tmp1.push(tmp2[k]);\r\n                    }\r\n\r\n                    if (tmp1.length < nDiags) {\r\n                        min = tmp1;\r\n                        nDiags = tmp1.length;\r\n                        min.push([polygonAt(polygon, i), polygonAt(polygon, j)]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return min;\r\n}\r\n\r\n/**\r\n * Decomposes the polygon into one or more convex sub-Polygons.\r\n * @method decomp\r\n * @return {Array} An array or Polygon objects.\r\n */\r\nfunction polygonDecomp(polygon){\r\n    var edges = polygonGetCutEdges(polygon);\r\n    if(edges.length > 0){\r\n        return polygonSlice(polygon, edges);\r\n    } else {\r\n        return [polygon];\r\n    }\r\n}\r\n\r\n/**\r\n * Slices the polygon given one or more cut edges. If given one, this function will return two polygons (false on failure). If many, an array of polygons.\r\n * @method slice\r\n * @param {Array} cutEdges A list of edges, as returned by .getCutEdges()\r\n * @return {Array}\r\n */\r\nfunction polygonSlice(polygon, cutEdges){\r\n    if(cutEdges.length === 0){\r\n\t\treturn [polygon];\r\n    }\r\n    if(cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length===2 && cutEdges[0][0] instanceof Array){\r\n\r\n        var polys = [polygon];\r\n\r\n        for(var i=0; i<cutEdges.length; i++){\r\n            var cutEdge = cutEdges[i];\r\n            // Cut all polys\r\n            for(var j=0; j<polys.length; j++){\r\n                var poly = polys[j];\r\n                var result = polygonSlice(poly, cutEdge);\r\n                if(result){\r\n                    // Found poly! Cut and quit\r\n                    polys.splice(j,1);\r\n                    polys.push(result[0],result[1]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return polys;\r\n    } else {\r\n\r\n        // Was given one edge\r\n        var cutEdge = cutEdges;\r\n        var i = polygon.indexOf(cutEdge[0]);\r\n        var j = polygon.indexOf(cutEdge[1]);\r\n\r\n        if(i !== -1 && j !== -1){\r\n            return [polygonCopy(polygon, i,j),\r\n                    polygonCopy(polygon, j,i)];\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Checks that the line segments of this polygon do not intersect each other.\r\n * @method isSimple\r\n * @param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]\r\n * @return {Boolean}\r\n * @todo Should it check all segments with all others?\r\n */\r\nfunction polygonIsSimple(polygon){\r\n    var path = polygon, i;\r\n    // Check\r\n    for(i=0; i<path.length-1; i++){\r\n        for(var j=0; j<i-1; j++){\r\n            if(lineSegmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check the segment between the last and the first point to all others\r\n    for(i=1; i<path.length-2; i++){\r\n        if(lineSegmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction getIntersectionPoint(p1, p2, q1, q2, delta){\r\n\tdelta = delta || 0;\r\n\tvar a1 = p2[1] - p1[1];\r\n\tvar b1 = p1[0] - p2[0];\r\n\tvar c1 = (a1 * p1[0]) + (b1 * p1[1]);\r\n\tvar a2 = q2[1] - q1[1];\r\n\tvar b2 = q1[0] - q2[0];\r\n\tvar c2 = (a2 * q1[0]) + (b2 * q1[1]);\r\n\tvar det = (a1 * b2) - (a2 * b1);\r\n\r\n\tif(!scalar_eq(det,0,delta)){\r\n\t\treturn [((b2 * c1) - (b1 * c2)) / det, ((a1 * c2) - (a2 * c1)) / det];\r\n\t} else {\r\n\t\treturn [0,0];\r\n    }\r\n}\r\n\r\n/**\r\n * Quickly decompose the Polygon into convex sub-polygons.\r\n * @method quickDecomp\r\n * @param  {Array} result\r\n * @param  {Array} [reflexVertices]\r\n * @param  {Array} [steinerPoints]\r\n * @param  {Number} [delta]\r\n * @param  {Number} [maxlevel]\r\n * @param  {Number} [level]\r\n * @return {Array}\r\n */\r\nfunction polygonQuickDecomp(polygon, result,reflexVertices,steinerPoints,delta,maxlevel,level){\r\n    maxlevel = maxlevel || 100;\r\n    level = level || 0;\r\n    delta = delta || 25;\r\n    result = typeof(result)!==\"undefined\" ? result : [];\r\n    reflexVertices = reflexVertices || [];\r\n    steinerPoints = steinerPoints || [];\r\n\r\n    var upperInt=[0,0], lowerInt=[0,0], p=[0,0]; // Points\r\n    var upperDist=0, lowerDist=0, d=0, closestDist=0; // scalars\r\n    var upperIndex=0, lowerIndex=0, closestIndex=0; // Integers\r\n    var lowerPoly=[], upperPoly=[]; // polygons\r\n    var poly = polygon,\r\n        v = polygon;\r\n\r\n    if(v.length < 3){\r\n\t\treturn result;\r\n    }\r\n\r\n    level++;\r\n    if(level > maxlevel){\r\n        console.warn(\"quickDecomp: max level (\"+maxlevel+\") reached.\");\r\n        return result;\r\n    }\r\n\r\n    for (var i = 0; i < polygon.length; ++i) {\r\n        if (polygonIsReflex(poly, i)) {\r\n            reflexVertices.push(poly[i]);\r\n            upperDist = lowerDist = Number.MAX_VALUE;\r\n\r\n\r\n            for (var j = 0; j < polygon.length; ++j) {\r\n                if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j - 1))) { // if line intersects with an edge\r\n                    p = getIntersectionPoint(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j - 1)); // find the point of intersection\r\n                    if (isRight(polygonAt(poly, i + 1), polygonAt(poly, i), p)) { // make sure it's inside the poly\r\n                        d = sqdist(poly[i], p);\r\n                        if (d < lowerDist) { // keep only the closest intersection\r\n                            lowerDist = d;\r\n                            lowerInt = p;\r\n                            lowerIndex = j;\r\n                        }\r\n                    }\r\n                }\r\n                if (isLeft(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j + 1)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\r\n                    p = getIntersectionPoint(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j + 1));\r\n                    if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), p)) {\r\n                        d = sqdist(poly[i], p);\r\n                        if (d < upperDist) {\r\n                            upperDist = d;\r\n                            upperInt = p;\r\n                            upperIndex = j;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if there are no vertices to connect to, choose a point in the middle\r\n            if (lowerIndex === (upperIndex + 1) % polygon.length) {\r\n                //console.log(\"Case 1: Vertex(\"+i+\"), lowerIndex(\"+lowerIndex+\"), upperIndex(\"+upperIndex+\"), poly.size(\"+polygon.length+\")\");\r\n                p[0] = (lowerInt[0] + upperInt[0]) / 2;\r\n                p[1] = (lowerInt[1] + upperInt[1]) / 2;\r\n                steinerPoints.push(p);\r\n\r\n                if (i < upperIndex) {\r\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.begin() + upperIndex + 1);\r\n                    polygonAppend(lowerPoly, poly, i, upperIndex+1);\r\n                    lowerPoly.push(p);\r\n                    upperPoly.push(p);\r\n                    if (lowerIndex !== 0){\r\n                        //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.end());\r\n                        polygonAppend(upperPoly, poly,lowerIndex,poly.length);\r\n                    }\r\n                    //upperPoly.insert(upperPoly.end(), poly.begin(), poly.begin() + i + 1);\r\n                    polygonAppend(upperPoly, poly,0,i+1);\r\n                } else {\r\n                    if (i !== 0){\r\n                        //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.end());\r\n                        polygonAppend(lowerPoly, poly,i,poly.length);\r\n                    }\r\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin(), poly.begin() + upperIndex + 1);\r\n                    polygonAppend(lowerPoly, poly,0,upperIndex+1);\r\n                    lowerPoly.push(p);\r\n                    upperPoly.push(p);\r\n                    //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.begin() + i + 1);\r\n                    polygonAppend(upperPoly, poly,lowerIndex,i+1);\r\n                }\r\n            } else {\r\n                // connect to the closest point within the triangle\r\n                //console.log(\"Case 2: Vertex(\"+i+\"), closestIndex(\"+closestIndex+\"), poly.size(\"+polygon.length+\")\\n\");\r\n\r\n                if (lowerIndex > upperIndex) {\r\n                    upperIndex += polygon.length;\r\n                }\r\n                closestDist = Number.MAX_VALUE;\r\n\r\n                if(upperIndex < lowerIndex){\r\n                    return result;\r\n                }\r\n\r\n                for (var j = lowerIndex; j <= upperIndex; ++j) {\r\n                    if (\r\n                        isLeftOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) &&\r\n                        isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))\r\n                    ) {\r\n                        d = sqdist(polygonAt(poly, i), polygonAt(poly, j));\r\n                        if (d < closestDist && polygonCanSee2(poly, i, j)) {\r\n                            closestDist = d;\r\n                            closestIndex = j % polygon.length;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (i < closestIndex) {\r\n                    polygonAppend(lowerPoly, poly,i,closestIndex+1);\r\n                    if (closestIndex !== 0){\r\n                        polygonAppend(upperPoly, poly,closestIndex,v.length);\r\n                    }\r\n                    polygonAppend(upperPoly, poly,0,i+1);\r\n                } else {\r\n                    if (i !== 0){\r\n                        polygonAppend(lowerPoly, poly,i,v.length);\r\n                    }\r\n                    polygonAppend(lowerPoly, poly,0,closestIndex+1);\r\n                    polygonAppend(upperPoly, poly,closestIndex,i+1);\r\n                }\r\n            }\r\n\r\n            // solve smallest poly first\r\n            if (lowerPoly.length < upperPoly.length) {\r\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n            } else {\r\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n    result.push(polygon);\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Remove collinear points in the polygon.\r\n * @method removeCollinearPoints\r\n * @param  {Number} [precision] The threshold angle to use when determining whether two edges are collinear. Use zero for finest precision.\r\n * @return {Number}           The number of points removed\r\n */\r\nfunction polygonRemoveCollinearPoints(polygon, precision){\r\n    var num = 0;\r\n    for(var i=polygon.length-1; polygon.length>3 && i>=0; --i){\r\n        if(collinear(polygonAt(polygon, i-1),polygonAt(polygon, i),polygonAt(polygon, i+1),precision)){\r\n            // Remove the middle point\r\n            polygon.splice(i%polygon.length,1);\r\n            num++;\r\n        }\r\n    }\r\n    return num;\r\n}\r\n\r\n/**\r\n * Remove duplicate points in the polygon.\r\n * @method removeDuplicatePoints\r\n * @param  {Number} [precision] The threshold to use when determining whether two points are the same. Use zero for best precision.\r\n */\r\nfunction polygonRemoveDuplicatePoints(polygon, precision){\r\n    for(var i=polygon.length-1; i>=1; --i){\r\n        var pi = polygon[i];\r\n        for(var j=i-1; j>=0; --j){\r\n            if(points_eq(pi, polygon[j], precision)){\r\n                polygon.splice(i,1);\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Check if two scalars are equal\r\n * @static\r\n * @method eq\r\n * @param  {Number} a\r\n * @param  {Number} b\r\n * @param  {Number} [precision]\r\n * @return {Boolean}\r\n */\r\nfunction scalar_eq(a,b,precision){\r\n    precision = precision || 0;\r\n    return Math.abs(a-b) <= precision;\r\n}\r\n\r\n/**\r\n * Check if two points are equal\r\n * @static\r\n * @method points_eq\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Number} [precision]\r\n * @return {Boolean}\r\n */\r\nfunction points_eq(a,b,precision){\r\n    return scalar_eq(a[0],b[0],precision) && scalar_eq(a[1],b[1],precision);\r\n}\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","lineSegmentsIntersect","p1","p2","q1","q2","dx","dy","da","db","s","t","triangleArea","a","b","c","isLeft","isLeftOn","isRightOn","sqdist","polygonAt","polygon","i","length","polygonAppend","poly","from","to","push","polygonIsReflex","polygonCopy","j","targetPoly","p","k","polygonGetCutEdges","min","tmp1","tmp2","tmpPoly","nDiags","Number","MAX_VALUE","l1","tmpLine1","l2","tmpLine2","dist","a1","b1","c1","a2","b2","c2","det","precision","Math","abs","polygonSlice","cutEdges","Array","polys","cutEdge","result","splice","indexOf","getIntersectionPoint","delta","polygonQuickDecomp","reflexVertices","steinerPoints","maxlevel","level","upperInt","lowerInt","lowerDist","upperIndex","lowerIndex","closestIndex","lowerPoly","upperPoly","console","warn","upperDist","d","closestDist","decomp","polygonDecomp","edges","quickDecomp","isSimple","polygonIsSimple","removeCollinearPoints","polygonRemoveCollinearPoints","num","thresholdAngle","ab","tmpPoint1","bc","tmpPoint2","acos","angle","sqrt","magA","magB","removeDuplicatePoints","polygonRemoveDuplicatePoints","pi","makeCCW","polygonMakeCCW","br","tmp","N","pop"]
}
