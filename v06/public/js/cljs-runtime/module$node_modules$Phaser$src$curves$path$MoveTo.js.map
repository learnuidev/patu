{
"version":3,
"file":"module$node_modules$Phaser$src$curves$path$MoveTo.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO1GC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,QAAUJ,OAAA,CAAQ,6CAAR,CAcVK,QAAAA,CAAS,IAAIF,MAAJ,CAAU,CAEnBG,WAEAD,QAAgB,CAACE,CAAD,CAAIC,CAAJ,CAChB,CAWI,IAAAC,OAAA,CAAc,CAAA,CASd,KAAAC,GAAA,CAAU,IAAIN,OAAJ,CAAYG,CAAZ,CAAeC,CAAf,CApBd,CALmB,CAyCnBG,SAAUA,QAAS,CAACC,CAAD,CAAIC,GAAJ,CACnB,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,IAAIT,OAAnC,CAEA,OAAOS,IAAAE,KAAA,CAAS,IAAAL,GAAT,CAHX,CA1CmB,CA6DnBM,WAAYA,QAAS,CAACC,CAAD,CAAIJ,GAAJ,CACrB,CACI,MAAO,KAAAF,SAAA,CAAcM,CAAd,CAAiBJ,GAAjB,CADX,CA9DmB,CA0EnBK,cAAeA,QAAS,EACxB,CACI,MAAO,EADX,CA3EmB,CAuFnBC,UAAWA,QAAS,EACpB,CACI,MAAO,EADX,CAxFmB;AAoGnBC,OAAQA,QAAS,EACjB,CACI,MAAO,CACHC,KAAM,QADH,CAEHC,OAAQ,CACJ,IAAAZ,GAAAH,EADI,CACO,IAAAG,GAAAF,EADP,CAFL,CADX,CArGmB,CAAV,CAgHbP,OAAAC,QAAA,CAAiBG,OAtI6F;",
"sources":["node_modules/Phaser/src/curves/path/MoveTo.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$curves$path$MoveTo\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class MoveTo\r\n * @memberOf Phaser.Curves\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - [description]\r\n * @param {number} [y] - [description]\r\n */\r\nvar MoveTo = new Class({\r\n\r\n    initialize:\r\n\r\n    function MoveTo (x, y)\r\n    {\r\n        //  Skip length calcs in paths\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.MoveTo#active\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.active = false;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.MoveTo#p0\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.p0 = new Vector2(x, y);\r\n    },\r\n\r\n    /**\r\n     * Get point at relative position in curve according to length.\r\n     *\r\n     * @method Phaser.Curves.MoveTo#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getPoint: function (t, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        return out.copy(this.p0);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.MoveTo#getPointAt\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} u - [description]\r\n     * @param {Phaser.Math.Vector2} [out] - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector2} [description]\r\n     */\r\n    getPointAt: function (u, out)\r\n    {\r\n        return this.getPoint(u, out);\r\n    },\r\n\r\n    /**\r\n     * Gets the resolution of this curve.\r\n     *\r\n     * @method Phaser.Curves.MoveTo#getResolution\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The resolution of this curve. For a MoveTo the value is always 1.\r\n     */\r\n    getResolution: function ()\r\n    {\r\n        return 1;\r\n    },\r\n\r\n    /**\r\n     * Gets the length of this curve.\r\n     *\r\n     * @method Phaser.Curves.MoveTo#getLength\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this curve. For a MoveTo the value is always 0.\r\n     */\r\n    getLength: function ()\r\n    {\r\n        return 0;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.MoveTo#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {JSONCurve} [description]\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        return {\r\n            type: 'MoveTo',\r\n            points: [\r\n                this.p0.x, this.p0.y\r\n            ]\r\n        };\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = MoveTo;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Vector2","MoveTo","initialize","x","y","active","p0","getPoint","t","out","undefined","copy","getPointAt","u","getResolution","getLength","toJSON","type","points"]
}
