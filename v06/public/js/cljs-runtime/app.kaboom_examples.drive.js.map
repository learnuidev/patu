{"version":3,"sources":["app/kaboom_examples/drive.cljs"],"mappings":"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","names":["app.kaboom.patu.core.init","js/document.getElementById","app.kaboom.patu.loaders.load_root","app.kaboom.patu.loaders.load_sprite","app.kaboom-examples.drive/ubound","app.kaboom-examples.drive/lbound","app.kaboom.patu.core/height","app.kaboom-examples.drive/speed","app.kaboom-examples.drive/speed-mod","app.kaboom-examples.drive/main-init","app.kaboom.patu.core/width","app.kaboom.patu.events/reg-event","p__44112","vec__44113","cljs.core.nth","_","pid","player","app.kaboom.patu.core/get-component","app.kaboom.patu.components/move!","app.kaboom.patu.core/neg","app.kaboom.patu.components/speed","p__44116","vec__44117","p__44120","vec__44121","p__44124","vec__44125","comp","cljs.core/rand-nth","app.kaboom.patu.core/add-component!","cljs.core.range","p__44128","vec__44129","obj","app.kaboom.patu.core/destroy","p__44132","vec__44133","happiness","app.kaboom.patu.utils/js-set!","p__44136","vec__44137","p__44140","vec__44141","id","js/Math.floor","js/Math.min","app.kaboom-examples.drive/main-action","p1__44144#","p1__44145#","p1__44146#","score","app.kaboom.patu.events/dispatch","app.kaboom.patu.cam.zoom_in","app.kaboom.patu.cam.zoom_out","app.kaboom.patu.core/reg-scene","app.kaboom-examples.drive/app","app.kaboom.patu.core/start"],"sourcesContent":["(ns app.kaboom-examples.drive\n  (:require\n   [clojure.repl :refer [doc]]\n   ;; Main Libs ===\n   [app.kaboom.patu.core :as p]\n   [app.kaboom.patu.loaders :as l]\n   [app.kaboom.patu.cam :as cam]\n   [app.kaboom.patu.audio :as a]\n   [app.kaboom.patu.utils :refer [js-set! js-get]]\n   [app.kaboom.patu.components :as c]\n   ;; Event System\n   [app.kaboom.patu.events :refer [reg-event dispatch]]))\n\n(p/init {:canvas (js/document.getElementById \"app\")\n         :global true\n         :width 160\n         :height 120\n         :scale 4\n         :debug true\n         :clearColor [0 0 0 1]})\n\n;;\n(l/load-root \"https://kaboomjs.com/pub/examples/\")\n(l/load-sprite :sprite/car \"img/car.png\"\n               {:sliceX 3\n                :anims {:move {:from 0\n                               :to 1}\n                        :idle {:from 2\n                               :to 2}}})\n;\n(l/load-sprite :sprite/sky, \"img/sky.png\");\n(l/load-sprite :sprite/road, \"img/road.png\");\n(l/load-sprite :sprite/apple, \"img/apple.png\");\n(l/load-sprite :sprite/pineapple, \"img/pineapple.png\");\n\n\n;; Constants\n(def ubound 40)\n(def lbound (- (p/height) 12))\n(def speed 90)\n(def speed-mod 1)\n\n(defn main-init []\n  [[:game/layers [:bg :game, :ui] :game]\n   [:cam/ignore [:ui]]\n   [:comp/reg-n\n    [:layer/bg [[:sprite :sprite/sky]\n                [:layer :bg]]]\n    [:bg/road [[:sprite :sprite/road]\n               [:layer :bg]\n               [:pos 0 0]\n               [:prop :road]]]\n    [:bg/road2 [[:sprite :sprite/road]\n                [:layer :bg]\n                [:pos (* (p/width) 2) 0]\n                [:prop :road]]]\n    [:player [[:sprite :sprite/car]\n              [:pos 24 (/ (p/height) 2)]\n              [:scale 1]\n              [:origin :center]\n              [:area -12 -6 12 8]\n              [:prop {:speed 120}]]]\n    [:ui/happiness [[:text \"0\" 4]\n                    [:pos 4 4]\n                    [:layer :ui]\n                    [:prop {:value 0}]]]]])\n\n(reg-event\n :player/move-up\n (fn [_ [_ pid]]\n   (let [player (p/get-component pid)]\n     (when (> (.. player -pos -y) ubound)\n       (c/move! player [0 (p/neg (c/speed player))])))))\n\n(reg-event\n :player/move-down\n (fn [_ [_ pid]]\n   (let [player (p/get-component pid)]\n     (when (< (.. player -pos -y) lbound)\n       (c/move! player [0 (c/speed player)])))))\n\n(reg-event\n :player/move-left\n (fn [_ [_ pid]]\n   (let [player (p/get-component pid)]\n     (when (< (.. player -pos -y) lbound)\n       (c/move! player [(p/neg (c/speed player)) 0])))))\n(reg-event\n :player/move-right\n (fn [_ [_ pid]]\n   (let [player (p/get-component pid)]\n     (when (< (.. player -pos -y) lbound)\n       (c/move! player [(c/speed player) 0])))))\n\n(reg-event\n :game/handle-loop\n (fn [_ _]\n   (let [comp (rand-nth [:sprite/apple :sprite/pineapple])]\n     (p/add-component! [[:sprite comp]\n                        [:pos (p/width) (rand-nth (range ubound lbound))]\n                        [:prop :obj]\n                        [:prop comp]]))))\n\n(reg-event\n :obj/handle-lifecycle\n (fn [_ [_ obj]]\n   (.move obj (* -1 speed speed-mod) 0)\n   (if (<= (.. obj -pos -x) (- (p/width)))\n     (p/destroy obj))))\n\n(reg-event\n :handle/apple\n (fn [_ [_ obj]]\n   (let [happiness (p/get-component :ui/happiness)]\n     (js-set! happiness :value (+ (.-value happiness) 250))\n     (p/destroy obj))))\n(reg-event\n :handle/pineapple\n (fn [_ [_ obj]]\n   (let [happiness (p/get-component :ui/happiness)]\n     (js-set! happiness :value (+ (.-value happiness) 125))\n     (p/destroy obj))))\n(reg-event\n :happiness/set-score\n (fn [_ [_ id]]\n   (let [happiness (p/get-component id)]\n     (js-set! happiness :value (js/Math.floor (+ (.-value happiness) 1)))\n     (js-set! happiness :text (.-value happiness)))))\n     ; (p/destroy obj))))\n\n(js/Math.min 10 1)\n(defn main-action []\n  (let [player (p/get-component :player)\n        happiness (p/get-component :ui/happiness)\n        score 0]\n    ; (.play player \"move\")\n    [[:evt/key-down  :up     #(dispatch [:player/move-up :player])]\n     [:evt/key-down  :down   #(dispatch [:player/move-down :player])]\n     [:evt/key-down  :left   #(dispatch [:player/move-left :player])]\n     [:evt/key-down  :right   #(dispatch [:player/move-right :player])]\n     [:evt/key-down     :f   #(set! speed-mod 4)]\n     [:evt/key-release  :f  #(set! speed-mod  1)]\n     [:evt/key-down  :=     #(cam/zoom-in)]\n     [:evt/key-down  :-     #(cam/zoom-out)]\n     [:evt/action    :obj   #(dispatch [:obj/handle-lifecycle %])]\n     [:evt/action    :ui/happiness   #(dispatch [:happiness/set-score :ui/happiness])]\n     [:game/loop     0.6   #(dispatch [:game/handle-loop])]\n     [:comp/play     :player :move]\n     [:evt/collides  [:player :apple]    #(dispatch [:handle/apple %])]\n     [:evt/collides  [:player :pineapple]  #(dispatch [:handle/pineapple %])]]))\n;;\n\n(p/reg-scene :scene/main {:init main-init :evt main-action})\n\n(defn app []\n  (p/start :scene/main))\n"]}