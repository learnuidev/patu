{
"version":3,
"file":"module$node_modules$Phaser$src$utils$object$MergeRight.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOnH,IAAIC,MAAQH,OAAA,CAAQ,mDAAR,CA8BZC,OAAAC,QAAA,CAfiBE,QAAS,CAACC,IAAD,CAAOC,IAAP,CAC1B,CACQC,IAAAA,CAAQJ,KAAA,CAAME,IAAN,CAEZ,KAAKG,IAAIA,GAAT,GAAgBF,KAAhB,CAEQC,IAAAE,eAAA,CAAqBD,GAArB,CAAJ,GAEID,IAAA,CAAMC,GAAN,CAFJ,CAEiBF,IAAA,CAAKE,GAAL,CAFjB,CAMJ,OAAOD,KAXX,CAvBmH;",
"sources":["node_modules/Phaser/src/utils/object/MergeRight.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$object$MergeRight\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Clone = require('./Clone');\r\n\r\n/**\r\n * Creates a new Object using all values from obj1.\r\n * \r\n * Then scans obj2. If a property is found in obj2 that *also* exists in obj1, the value from obj2 is used, otherwise the property is skipped.\r\n *\r\n * @function Phaser.Utils.Objects.MergeRight\r\n * @since 3.0.0\r\n *\r\n * @param {object} obj1 - [description]\r\n * @param {object} obj2 - [description]\r\n *\r\n * @return {object} [description]\r\n */\r\nvar MergeRight = function (obj1, obj2)\r\n{\r\n    var clone = Clone(obj1);\r\n\r\n    for (var key in obj2)\r\n    {\r\n        if (clone.hasOwnProperty(key))\r\n        {\r\n            clone[key] = obj2[key];\r\n        }\r\n    }\r\n\r\n    return clone;\r\n};\r\n\r\nmodule.exports = MergeRight;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Clone","MergeRight","obj1","obj2","clone","key","hasOwnProperty"]
}
