{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$parsers$Parse.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOlH,IAAIC,QAAUH,OAAA,CAAQ,iDAAR,CAAd,CACII,aAAeJ,OAAA,CAAQ,8DAAR,CADnB,CAEIK,SAAWL,OAAA,CAAQ,0DAAR,CAFf,CAGIM,eAAiBN,OAAA,CAAQ,sEAAR,CAHrB,CAIIO,iBAAmBP,OAAA,CAAQ,yEAAR,CAqDvBC;MAAAC,QAAA,CA1BYM,QAAS,CAACC,IAAD,CAAOC,SAAP,CAAkBC,IAAlB,CAAwBC,SAAxB,CAAmCC,UAAnC,CAA+CC,UAA/C,CACrB,CAGI,OAAQJ,SAAR,EAEI,KAAMP,OAAAY,SAAN,CACIC,IAAA,CAASZ,YAAA,CAAaK,IAAb,CAAmBE,IAAnB,CAAyBC,SAAzB,CAAoCC,UAApC,CAAgDC,UAAhD,CACT,MACJ,MAAMX,OAAAc,IAAN,CACID,IAAA,CAASX,QAAA,CAASI,IAAT,CAAeE,IAAf,CAAqBC,SAArB,CAAgCC,UAAhC,CAA4CC,UAA5C,CACT,MACJ,MAAMX,OAAAe,WAAN,CACIF,IAAA,CAASV,cAAA,CAAeG,IAAf,CAAqBE,IAArB,CAA2BG,UAA3B,CACT,MACJ,MAAMX,OAAAgB,YAAN,CACIH,IAAA,CAAST,gBAAA,CAAiBE,IAAjB,CAAuBE,IAAvB,CAA6BG,UAA7B,CACT,MACJ,SACIM,OAAAC,KAAA,CAAa,oCAAb,CAAoDX,SAApD,CACA,CAAAM,IAAA,CAAS,IAhBjB,CAmBA,MAAOA,KAtBX,CAvCkH;",
"sources":["node_modules/Phaser/src/tilemaps/parsers/Parse.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$parsers$Parse\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Formats = require('../Formats');\r\nvar Parse2DArray = require('./Parse2DArray');\r\nvar ParseCSV = require('./ParseCSV');\r\nvar ParseJSONTiled = require('./tiled/ParseJSONTiled');\r\nvar ParseWeltmeister = require('./impact/ParseWeltmeister');\r\n\r\n/**\r\n * Parses raw data of a given Tilemap format into a new MapData object. If no recognized data format\r\n * is found, returns `null`. When loading from CSV or a 2D array, you should specify the tileWidth &\r\n * tileHeight. When parsing from a map from Tiled, the tileWidth & tileHeight will be pulled from\r\n * the map data.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Parse\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {integer} mapFormat - See ../Formats.js.\r\n * @param {(integer[][]|string|object)} data - 2D array, CSV string or Tiled JSON object.\r\n * @param {integer} tileWidth - The width of a tile in pixels. Required for 2D array and CSV, but\r\n * ignored for Tiled JSON.\r\n * @param {integer} tileHeight - The height of a tile in pixels. Required for 2D array and CSV, but\r\n * ignored for Tiled JSON.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {Phaser.Tilemaps.MapData} The created `MapData` object.\r\n */\r\nvar Parse = function (name, mapFormat, data, tileWidth, tileHeight, insertNull)\r\n{\r\n    var newMap;\r\n\r\n    switch (mapFormat)\r\n    {\r\n        case (Formats.ARRAY_2D):\r\n            newMap = Parse2DArray(name, data, tileWidth, tileHeight, insertNull);\r\n            break;\r\n        case (Formats.CSV):\r\n            newMap = ParseCSV(name, data, tileWidth, tileHeight, insertNull);\r\n            break;\r\n        case (Formats.TILED_JSON):\r\n            newMap = ParseJSONTiled(name, data, insertNull);\r\n            break;\r\n        case (Formats.WELTMEISTER):\r\n            newMap = ParseWeltmeister(name, data, insertNull);\r\n            break;\r\n        default:\r\n            console.warn('Unrecognized tilemap data format: ' + mapFormat);\r\n            newMap = null;\r\n    }\r\n\r\n    return newMap;\r\n};\r\n\r\nmodule.exports = Parse;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Formats","Parse2DArray","ParseCSV","ParseJSONTiled","ParseWeltmeister","Parse","name","mapFormat","data","tileWidth","tileHeight","insertNull","ARRAY_2D","newMap","CSV","TILED_JSON","WELTMEISTER","console","warn"]
}
