{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$WeightedRandomize.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,qEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOjI,IAAIC,eAAiBH,OAAA,CAAQ,mEAAR,CAmErBC,OAAAC,QAAA,CArCwBE,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAeC,KAAf,CAAsBC,MAAtB,CAA8BC,eAA9B,CAA+CC,KAA/C,CACjC,CACI,GAAwBC,IAAAA,EAAxB,GAAIF,eAAJ,CAAA,CAGIG,KAAAA,CAAQT,cAAA,CAAeE,KAAf,CAAsBC,KAAtB,CAA6BC,KAA7B,CAAoCC,MAApC,CAA4C,IAA5C,CAAkDE,KAAlD,CAGZ,KAAKG,KAAL,CADIC,KACJ,CADkB,CAClB,CAAYD,KAAZ,CAAgBJ,eAAAM,OAAhB,CAAwCF,KAAA,EAAxC,CAEIC,KAAA,EAAeL,eAAA,CAAgBI,KAAhB,CAAAG,OAGnB,IAAI,EAAe,CAAf,EAAAF,KAAA,CAAJ,CAEA,IAAKD,KAAL,CAAS,CAAT,CAAYA,KAAZ;AAAgBD,KAAAG,OAAhB,CAA8BF,KAAA,EAA9B,CACA,CACQI,MAAAA,CAAOC,IAAAC,OAAA,EAAPF,CAAuBH,KACvBM,MAAAA,CAAM,CAEV,KADA,IAAIC,YAAc,EAAlB,CACSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBb,eAAAM,OAApB,CAA4CO,CAAA,EAA5C,CAGI,GADAF,KACI,EADGX,eAAA,CAAgBa,CAAhB,CAAAN,OACH,CAAAC,MAAA,EAAQG,KAAZ,CACA,CACQG,MAAAA,CAASd,eAAA,CAAgBa,CAAhB,CAAAE,MACbH,YAAA,CAAcI,KAAAC,QAAA,CAAcH,MAAd,CAAA,CACRA,MAAA,CAAOL,IAAAS,MAAA,CAAWT,IAAAC,OAAA,EAAX,CAA2BI,MAAAR,OAA3B,CAAP,CADQ,CAERQ,MACN,MALJ,CASJX,KAAA,CAAMC,KAAN,CAAAW,MAAA,CAAiBH,WAjBrB,CAdA,CADJ,CAtCiI;",
"sources":["node_modules/Phaser/src/tilemaps/components/WeightedRandomize.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$WeightedRandomize\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\n\r\n/**\r\n * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n * specified layer. Each tile will receive a new index. New indexes are drawn from the given\r\n * weightedIndexes array. An example weighted array:\r\n *\r\n * [\r\n *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n * ]\r\n *\r\n * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n * method only modifies tile indexes and does not change collision information.\r\n *\r\n * @function Phaser.Tilemaps.Components.WeightedRandomize\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar WeightedRandomize = function (tileX, tileY, width, height, weightedIndexes, layer)\r\n{\r\n    if (weightedIndexes === undefined) { return; }\r\n\r\n    var i;\r\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\r\n\r\n    var weightTotal = 0;\r\n    for (i = 0; i < weightedIndexes.length; i++)\r\n    {\r\n        weightTotal += weightedIndexes[i].weight;\r\n    }\r\n\r\n    if (weightTotal <= 0) { return; }\r\n\r\n    for (i = 0; i < tiles.length; i++)\r\n    {\r\n        var rand = Math.random() * weightTotal;\r\n        var sum = 0;\r\n        var randomIndex = -1;\r\n        for (var j = 0; j < weightedIndexes.length; j++)\r\n        {\r\n            sum += weightedIndexes[j].weight;\r\n            if (rand <= sum)\r\n            {\r\n                var chosen = weightedIndexes[j].index;\r\n                randomIndex = Array.isArray(chosen)\r\n                    ? chosen[Math.floor(Math.random() * chosen.length)]\r\n                    : chosen;\r\n                break;\r\n            }\r\n        }\r\n\r\n        tiles[i].index = randomIndex;\r\n    }\r\n};\r\n\r\nmodule.exports = WeightedRandomize;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetTilesWithin","WeightedRandomize","tileX","tileY","width","height","weightedIndexes","layer","undefined","tiles","i","weightTotal","length","weight","rand","Math","random","sum","randomIndex","j","chosen","index","Array","isArray","floor"]
}
