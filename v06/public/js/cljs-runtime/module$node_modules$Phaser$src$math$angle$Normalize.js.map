{
"version":3,
"file":"module$node_modules$Phaser$src$math$angle$Normalize.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,oDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA+BhHD,MAAAC,QAAA,CAdgBC,QAAS,CAACC,KAAD,CACzB,CACYA,KAAR,EAAiB,CAAjB,CAAqBC,IAAAC,GAErB,OAAa,EAAb,EAAIF,KAAJ,CAEWA,KAFX,CAMWA,KANX,CAMmB,CANnB,CAMuBC,IAAAC,GAT3B,CAlBgH;",
"sources":["node_modules/Phaser/src/math/angle/Normalize.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$angle$Normalize\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Normalize an angle to the [0, 2pi] range.\r\n *\r\n * @function Phaser.Math.Angle.Normalize\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to normalize, in radians.\r\n *\r\n * @return {number} The normalized angle, in radians.\r\n */\r\nvar Normalize = function (angle)\r\n{\r\n    angle = angle % (2 * Math.PI);\r\n\r\n    if (angle >= 0)\r\n    {\r\n        return angle;\r\n    }\r\n    else\r\n    {\r\n        return angle + 2 * Math.PI;\r\n    }\r\n};\r\n\r\nmodule.exports = Normalize;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Normalize","angle","Math","PI"]
}
