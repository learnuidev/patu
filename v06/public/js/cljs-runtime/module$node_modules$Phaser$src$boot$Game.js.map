{
"version":3,
"file":"module$node_modules$Phaser$src$boot$Game.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/Phaser/src/boot/Game.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$boot$Game\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar AddToDOM = require('../dom/AddToDOM');\r\nvar AnimationManager = require('../animations/AnimationManager');\r\nvar CacheManager = require('../cache/CacheManager');\r\nvar CanvasPool = require('../display/canvas/CanvasPool');\r\nvar Class = require('../utils/Class');\r\nvar Config = require('./Config');\r\nvar CreateRenderer = require('./CreateRenderer');\r\nvar DataManager = require('../data/DataManager');\r\nvar DebugHeader = require('./DebugHeader');\r\nvar Device = require('../device');\r\nvar DOMContentLoaded = require('../dom/DOMContentLoaded');\r\nvar EventEmitter = require('eventemitter3');\r\nvar InputManager = require('../input/InputManager');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar PluginManager = require('../plugins/PluginManager');\r\nvar SceneManager = require('../scene/SceneManager');\r\nvar SoundManagerCreator = require('../sound/SoundManagerCreator');\r\nvar TextureManager = require('../textures/TextureManager');\r\nvar TimeStep = require('./TimeStep');\r\nvar VisibilityHandler = require('./VisibilityHandler');\r\n\r\nif (typeof EXPERIMENTAL)\r\n{\r\n    var CreateDOMContainer = require('./CreateDOMContainer');\r\n    var ScaleManager = require('./ScaleManager');\r\n}\r\n\r\nif (typeof PLUGIN_FBINSTANT)\r\n{\r\n    var FacebookInstantGamesPlugin = require('../../plugins/fbinstant/src/FacebookInstantGamesPlugin');\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * The Phaser.Game instance is the main controller for the entire Phaser game. It is responsible\r\n * for handling the boot process, parsing the configuration values, creating the renderer,\r\n * and setting-up all of the global Phaser systems, such as sound and input.\r\n * Once that is complete it will start the Scene Manager and then begin the main game loop.\r\n *\r\n * You should generally avoid accessing any of the systems created by Game, and instead use those\r\n * made available to you via the Phaser.Scene Systems class instead.\r\n *\r\n * @class Game\r\n * @memberOf Phaser\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {GameConfig} [GameConfig] - The configuration object for your Phaser Game instance.\r\n */\r\nvar Game = new Class({\r\n\r\n    initialize:\r\n\r\n    function Game (config)\r\n    {\r\n        /**\r\n         * The parsed Game Configuration object.\r\n         *\r\n         * The values stored within this object are read-only and should not be changed at run-time.\r\n         *\r\n         * @name Phaser.Game#config\r\n         * @type {Phaser.Boot.Config}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.config = new Config(config);\r\n\r\n        /**\r\n         * A reference to either the Canvas or WebGL Renderer that this Game is using.\r\n         *\r\n         * @name Phaser.Game#renderer\r\n         * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n         * @since 3.0.0\r\n         */\r\n        this.renderer = null;\r\n\r\n        if (typeof EXPERIMENTAL)\r\n        {\r\n            /**\r\n             * A reference to an HTML Div Element used as a DOM Element Container.\r\n             * \r\n             * Only set if `createDOMContainer` is `true` in the game config (by default it is `false`) and\r\n             * if you provide a parent element to insert the Phaser Game inside.\r\n             *\r\n             * See the DOM Element Game Object for more details.\r\n             *\r\n             * @name Phaser.Game#domContainer\r\n             * @type {HTMLDivElement}\r\n             * @since 3.12.0\r\n             */\r\n            this.domContainer = null;\r\n        }\r\n\r\n        /**\r\n         * A reference to the HTML Canvas Element that Phaser uses to render the game.\r\n         * This is created automatically by Phaser unless you provide a `canvas` property\r\n         * in your Game Config.\r\n         *\r\n         * @name Phaser.Game#canvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.0.0\r\n         */\r\n        this.canvas = null;\r\n\r\n        /**\r\n         * A reference to the Rendering Context belonging to the Canvas Element this game is rendering to.\r\n         * If the game is running under Canvas it will be a 2d Canvas Rendering Context.\r\n         * If the game is running under WebGL it will be a WebGL Rendering Context.\r\n         * This context is created automatically by Phaser unless you provide a `context` property\r\n         * in your Game Config.\r\n         *\r\n         * @name Phaser.Game#context\r\n         * @type {(CanvasRenderingContext2D|WebGLRenderingContext)}\r\n         * @since 3.0.0\r\n         */\r\n        this.context = null;\r\n\r\n        /**\r\n         * A flag indicating when this Game instance has finished its boot process.\r\n         *\r\n         * @name Phaser.Game#isBooted\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.isBooted = false;\r\n\r\n        /**\r\n         * A flag indicating if this Game is currently running its game step or not.\r\n         *\r\n         * @name Phaser.Game#isRunning\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * An Event Emitter which is used to broadcast game-level events from the global systems.\r\n         *\r\n         * @name Phaser.Game#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events = new EventEmitter();\r\n\r\n        /**\r\n         * An instance of the Animation Manager.\r\n         *\r\n         * The Animation Manager is a global system responsible for managing all animations used within your game.\r\n         *\r\n         * @name Phaser.Game#anims\r\n         * @type {Phaser.Animations.AnimationManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.anims = new AnimationManager(this);\r\n\r\n        /**\r\n         * An instance of the Texture Manager.\r\n         *\r\n         * The Texture Manager is a global system responsible for managing all textures being used by your game.\r\n         *\r\n         * @name Phaser.Game#textures\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.textures = new TextureManager(this);\r\n\r\n        /**\r\n         * An instance of the Cache Manager.\r\n         *\r\n         * The Cache Manager is a global system responsible for caching, accessing and releasing external game assets.\r\n         *\r\n         * @name Phaser.Game#cache\r\n         * @type {Phaser.Cache.CacheManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.cache = new CacheManager(this);\r\n\r\n        /**\r\n         * An instance of the Data Manager\r\n         *\r\n         * @name Phaser.Game#registry\r\n         * @type {Phaser.Data.DataManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.registry = new DataManager(this);\r\n\r\n        /**\r\n         * An instance of the Input Manager.\r\n         *\r\n         * The Input Manager is a global system responsible for the capture of browser-level input events.\r\n         *\r\n         * @name Phaser.Game#input\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.input = new InputManager(this, this.config);\r\n\r\n        /**\r\n         * An instance of the Scene Manager.\r\n         *\r\n         * The Scene Manager is a global system responsible for creating, modifying and updating the Scenes in your game.\r\n         *\r\n         * @name Phaser.Game#scene\r\n         * @type {Phaser.Scenes.SceneManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = new SceneManager(this, this.config.sceneConfig);\r\n\r\n        /**\r\n         * A reference to the Device inspector.\r\n         *\r\n         * Contains information about the device running this game, such as OS, browser vendor and feature support.\r\n         * Used by various systems to determine capabilities and code paths.\r\n         *\r\n         * @name Phaser.Game#device\r\n         * @type {Phaser.DeviceConf}\r\n         * @since 3.0.0\r\n         */\r\n        this.device = Device;\r\n\r\n        if (typeof EXPERIMENTAL)\r\n        {\r\n            /**\r\n             * An instance of the Scale Manager.\r\n             *\r\n             * The Scale Manager is a global system responsible for handling game scaling events.\r\n             *\r\n             * @name Phaser.Game#scaleManager\r\n             * @type {Phaser.Boot.ScaleManager}\r\n             * @since 3.12.0\r\n             */\r\n            this.scaleManager = new ScaleManager(this, this.config);\r\n        }\r\n\r\n        /**\r\n         * An instance of the base Sound Manager.\r\n         *\r\n         * The Sound Manager is a global system responsible for the playback and updating of all audio in your game.\r\n         *\r\n         * @name Phaser.Game#sound\r\n         * @type {Phaser.Sound.BaseSoundManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.sound = SoundManagerCreator.create(this);\r\n\r\n        /**\r\n         * An instance of the Time Step.\r\n         *\r\n         * The Time Step is a global system responsible for setting-up and responding to the browser frame events, processing\r\n         * them and calculating delta values. It then automatically calls the game step.\r\n         *\r\n         * @name Phaser.Game#loop\r\n         * @type {Phaser.Boot.TimeStep}\r\n         * @since 3.0.0\r\n         */\r\n        this.loop = new TimeStep(this, this.config.fps);\r\n\r\n        /**\r\n         * An instance of the Plugin Manager.\r\n         *\r\n         * The Plugin Manager is a global system that allows plugins to register themselves with it, and can then install\r\n         * those plugins into Scenes as required.\r\n         *\r\n         * @name Phaser.Game#plugins\r\n         * @type {Phaser.Plugins.PluginManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.plugins = new PluginManager(this, this.config);\r\n\r\n        if (typeof PLUGIN_FBINSTANT)\r\n        {\r\n            /**\r\n             * An instance of the Facebook Instant Games Plugin.\r\n             * \r\n             * This will only be available if the plugin has been built into Phaser,\r\n             * or you're using the special Facebook Instant Games custom build.\r\n             *\r\n             * @name Phaser.Game#facebook\r\n             * @type {Phaser.FacebookInstantGamesPlugin}\r\n             * @since 3.13.0\r\n             */\r\n            this.facebook = new FacebookInstantGamesPlugin(this);\r\n        }\r\n\r\n        /**\r\n         * Is this Game pending destruction at the start of the next frame?\r\n         *\r\n         * @name Phaser.Game#pendingDestroy\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.pendingDestroy = false;\r\n\r\n        /**\r\n         * Remove the Canvas once the destroy is over?\r\n         *\r\n         * @name Phaser.Game#removeCanvas\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.removeCanvas = false;\r\n\r\n        /**\r\n         * Remove everything when the game is destroyed.\r\n         * You cannot create a new Phaser instance on the same web page after doing this.\r\n         *\r\n         * @name Phaser.Game#noReturn\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this.noReturn = false;\r\n\r\n        /**\r\n         * Does the window the game is running in currently have focus or not?\r\n         * This is modified by the VisibilityHandler.\r\n         *\r\n         * @name Phaser.Game#hasFocus\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @since 3.9.0\r\n         */\r\n        this.hasFocus = false;\r\n\r\n        /**\r\n         * Is the mouse pointer currently over the game canvas or not?\r\n         * This is modified by the VisibilityHandler.\r\n         *\r\n         * @name Phaser.Game#isOver\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @since 3.10.0\r\n         */\r\n        this.isOver = true;\r\n\r\n        //  Wait for the DOM Ready event, then call boot.\r\n        DOMContentLoaded(this.boot.bind(this));\r\n    },\r\n\r\n    /**\r\n     * Game boot event.\r\n     *\r\n     * This is an internal event dispatched when the game has finished booting, but before it is ready to start running.\r\n     * The global systems use this event to know when to set themselves up, dispatching their own `ready` events as required.\r\n     *\r\n     * @event Phaser.Game#boot\r\n     */\r\n\r\n    /**\r\n     * This method is called automatically when the DOM is ready. It is responsible for creating the renderer,\r\n     * displaying the Debug Header, adding the game canvas to the DOM and emitting the 'boot' event.\r\n     * It listens for a 'ready' event from the base systems and once received it will call `Game.start`.\r\n     *\r\n     * @method Phaser.Game#boot\r\n     * @protected\r\n     * @fires Phaser.Game#boot\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        if (!PluginCache.hasCore('EventEmitter'))\r\n        {\r\n            console.warn('Core Phaser Plugins missing. Cannot start.');\r\n            return;\r\n        }\r\n\r\n        this.isBooted = true;\r\n\r\n        this.config.preBoot(this);\r\n\r\n        CreateRenderer(this);\r\n\r\n        if (typeof EXPERIMENTAL)\r\n        {\r\n            CreateDOMContainer(this);\r\n        }\r\n\r\n        DebugHeader(this);\r\n\r\n        AddToDOM(this.canvas, this.config.parent);\r\n\r\n        this.events.emit('boot');\r\n\r\n        //  The Texture Manager has to wait on a couple of non-blocking events before it's fully ready.\r\n        //  So it will emit this internal event when done:\r\n        this.events.once('texturesready', this.texturesReady, this);\r\n    },\r\n\r\n    /**\r\n     * Called automatically when the Texture Manager has finished setting up and preparing the\r\n     * default textures.\r\n     *\r\n     * @method Phaser.Game#texturesReady\r\n     * @private\r\n     * @fires Phaser.Game#ready\r\n     * @since 3.12.0\r\n     */\r\n    texturesReady: function ()\r\n    {\r\n        //  Start all the other systems\r\n        this.events.emit('ready');\r\n\r\n        this.start();\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Game.boot once all of the global systems have finished setting themselves up.\r\n     * By this point the Game is now ready to start the main loop running.\r\n     * It will also enable the Visibility Handler.\r\n     *\r\n     * @method Phaser.Game#start\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    start: function ()\r\n    {\r\n        this.isRunning = true;\r\n\r\n        this.config.postBoot(this);\r\n\r\n        if (this.renderer)\r\n        {\r\n            this.loop.start(this.step.bind(this));\r\n        }\r\n        else\r\n        {\r\n            this.loop.start(this.headlessStep.bind(this));\r\n        }\r\n\r\n        VisibilityHandler(this);\r\n\r\n        var eventEmitter = this.events;\r\n\r\n        eventEmitter.on('hidden', this.onHidden, this);\r\n        eventEmitter.on('visible', this.onVisible, this);\r\n        eventEmitter.on('blur', this.onBlur, this);\r\n        eventEmitter.on('focus', this.onFocus, this);\r\n    },\r\n\r\n    /**\r\n     * Game Pre-Step event.\r\n     * \r\n     * Listen for it using the event type `prestep`.\r\n     *\r\n     * This event is dispatched before the main Step starts.\r\n     * By this point none of the Scene updates have happened.\r\n     * Hook into it from plugins or systems that need to update before the Scene Manager does.\r\n     *\r\n     * @event Phaser.Game#prestepEvent\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n\r\n    /**\r\n     * Game Step event.\r\n     * \r\n     * Listen for it using the event type `step`.\r\n     *\r\n     * This event is dispatched after Pre-Step and before the Scene Manager steps.\r\n     * Hook into it from plugins or systems that need to update before the Scene Manager does, but after core Systems.\r\n     *\r\n     * @event Phaser.Game#stepEvent\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n\r\n    /**\r\n     * Game Post-Step event.\r\n     * \r\n     * Listen for it using the event type `poststep`.\r\n     *\r\n     * This event is dispatched after the Scene Manager has updated.\r\n     * Hook into it from plugins or systems that need to do things before the render starts.\r\n     *\r\n     * @event Phaser.Game#poststepEvent\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n\r\n    /**\r\n     * Game Pre-Render event.\r\n     * \r\n     * Listen for it using the event type `prerender`.\r\n     *\r\n     * This event is dispatched immediately before any of the Scenes have started to render.\r\n     * The renderer will already have been initialized this frame, clearing itself and preparing to receive\r\n     * the Scenes for rendering, but it won't have actually drawn anything yet.\r\n     *\r\n     * @event Phaser.Game#prerenderEvent\r\n     * @param {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)} renderer - A reference to the current renderer.\r\n     */\r\n\r\n    /**\r\n     * Game Post-Render event.\r\n     * \r\n     * Listen for it using the event type `postrender`.\r\n     *\r\n     * This event is dispatched right at the end of the render process.\r\n     * Every Scene will have rendered and drawn to the canvas.\r\n     *\r\n     * @event Phaser.Game#postrenderEvent\r\n     * @param {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)} renderer - A reference to the current renderer.\r\n     */\r\n\r\n    /**\r\n     * The main Game Step. Called automatically by the Time Step, once per browser frame (typically as a result of\r\n     * Request Animation Frame, or Set Timeout on very old browsers.)\r\n     *\r\n     * The step will update the global managers first, then proceed to update each Scene in turn, via the Scene Manager.\r\n     *\r\n     * It will then render each Scene in turn, via the Renderer. This process emits `prerender` and `postrender` events.\r\n     *\r\n     * @method Phaser.Game#step\r\n     * @fires Phaser.Game#prestepEvent\r\n     * @fires Phaser.Game#stepEvent\r\n     * @fires Phaser.Game#poststepEvent\r\n     * @fires Phaser.Game#prerenderEvent\r\n     * @fires Phaser.Game#postrenderEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    step: function (time, delta)\r\n    {\r\n        if (this.pendingDestroy)\r\n        {\r\n            return this.runDestroy();\r\n        }\r\n\r\n        var eventEmitter = this.events;\r\n\r\n        //  Global Managers like Input and Sound update in the prestep\r\n\r\n        eventEmitter.emit('prestep', time, delta);\r\n\r\n        //  This is mostly meant for user-land code and plugins\r\n\r\n        eventEmitter.emit('step', time, delta);\r\n\r\n        //  Update the Scene Manager and all active Scenes\r\n\r\n        this.scene.update(time, delta);\r\n\r\n        //  Our final event before rendering starts\r\n\r\n        eventEmitter.emit('poststep', time, delta);\r\n\r\n        var renderer = this.renderer;\r\n\r\n        //  Run the Pre-render (clearing the canvas, setting background colors, etc)\r\n\r\n        renderer.preRender();\r\n\r\n        eventEmitter.emit('prerender', renderer, time, delta);\r\n\r\n        //  The main render loop. Iterates all Scenes and all Cameras in those scenes, rendering to the renderer instance.\r\n\r\n        this.scene.render(renderer);\r\n\r\n        //  The Post-Render call. Tidies up loose end, takes snapshots, etc.\r\n\r\n        renderer.postRender();\r\n\r\n        //  The final event before the step repeats. Your last chance to do anything to the canvas before it all starts again.\r\n\r\n        eventEmitter.emit('postrender', renderer, time, delta);\r\n    },\r\n\r\n    /**\r\n     * A special version of the Game Step for the HEADLESS renderer only.\r\n     *\r\n     * The main Game Step. Called automatically by the Time Step, once per browser frame (typically as a result of\r\n     * Request Animation Frame, or Set Timeout on very old browsers.)\r\n     *\r\n     * The step will update the global managers first, then proceed to update each Scene in turn, via the Scene Manager.\r\n     *\r\n     * This process emits `prerender` and `postrender` events, even though nothing actually displays.\r\n     *\r\n     * @method Phaser.Game#headlessStep\r\n     * @fires Phaser.Game#prerenderEvent\r\n     * @fires Phaser.Game#postrenderEvent\r\n     * @since 3.2.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    headlessStep: function (time, delta)\r\n    {\r\n        var eventEmitter = this.events;\r\n\r\n        //  Global Managers\r\n\r\n        eventEmitter.emit('prestep', time, delta);\r\n\r\n        eventEmitter.emit('step', time, delta);\r\n\r\n        //  Scenes\r\n\r\n        this.scene.update(time, delta);\r\n\r\n        eventEmitter.emit('poststep', time, delta);\r\n\r\n        //  Render\r\n\r\n        eventEmitter.emit('prerender');\r\n\r\n        eventEmitter.emit('postrender');\r\n    },\r\n\r\n    /**\r\n     * Game Pause event.\r\n     * \r\n     * Listen for it using the event type `pause`.\r\n     *\r\n     * This event is dispatched when the game loop enters a paused state, usually as a result of the Visibility Handler.\r\n     *\r\n     * @event Phaser.Game#pauseEvent\r\n     */\r\n\r\n    /**\r\n     * Called automatically by the Visibility Handler.\r\n     * This will pause the main loop and then emit a pause event.\r\n     *\r\n     * @method Phaser.Game#onHidden\r\n     * @protected\r\n     * @fires Phaser.Game#pauseEvent\r\n     * @since 3.0.0\r\n     */\r\n    onHidden: function ()\r\n    {\r\n        this.loop.pause();\r\n\r\n        this.events.emit('pause');\r\n    },\r\n\r\n    /**\r\n     * Game Resume event.\r\n     * \r\n     * Listen for it using the event type `resume`.\r\n     *\r\n     * This event is dispatched when the game loop leaves a paused state and resumes running.\r\n     *\r\n     * @event Phaser.Game#resumeEvent\r\n     */\r\n\r\n    /**\r\n     * Called automatically by the Visibility Handler.\r\n     * This will resume the main loop and then emit a resume event.\r\n     *\r\n     * @method Phaser.Game#onVisible\r\n     * @protected\r\n     * @fires Phaser.Game#resumeEvent\r\n     * @since 3.0.0\r\n     */\r\n    onVisible: function ()\r\n    {\r\n        this.loop.resume();\r\n\r\n        this.events.emit('resume');\r\n    },\r\n\r\n    /**\r\n     * Called automatically by the Visibility Handler.\r\n     * This will set the main loop into a 'blurred' state, which pauses it.\r\n     *\r\n     * @method Phaser.Game#onBlur\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: function ()\r\n    {\r\n        this.hasFocus = false;\r\n\r\n        this.loop.blur();\r\n    },\r\n\r\n    /**\r\n     * Called automatically by the Visibility Handler.\r\n     * This will set the main loop into a 'focused' state, which resumes it.\r\n     *\r\n     * @method Phaser.Game#onFocus\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: function ()\r\n    {\r\n        this.hasFocus = true;\r\n\r\n        this.loop.focus();\r\n    },\r\n\r\n    /**\r\n     * Game Resize event.\r\n     * \r\n     * Listen for it using the event type `resize`.\r\n     *\r\n     * @event Phaser.Game#resizeEvent\r\n     * @param {number} width - The new width of the Game.\r\n     * @param {number} height - The new height of the Game.\r\n     */\r\n\r\n    /**\r\n     * Updates the Game Config with the new width and height values given.\r\n     * Then resizes the Renderer and Input Manager scale.\r\n     *\r\n     * @method Phaser.Game#resize\r\n     * @fires Phaser.Game#reiszeEvent\r\n     * @since 3.2.0\r\n     *\r\n     * @param {number} width - The new width of the game.\r\n     * @param {number} height - The new height of the game.\r\n     */\r\n    resize: function (width, height)\r\n    {\r\n        this.config.width = width;\r\n        this.config.height = height;\r\n\r\n        if (typeof EXPERIMENTAL)\r\n        {\r\n            if (this.domContainer)\r\n            {\r\n                this.domContainer.style.width = width + 'px';\r\n                this.domContainer.style.height = height + 'px';\r\n            }\r\n        }\r\n\r\n        this.renderer.resize(width, height);\r\n\r\n        this.input.resize();\r\n\r\n        this.scene.resize(width, height);\r\n\r\n        this.events.emit('resize', width, height);\r\n    },\r\n\r\n    /**\r\n     * Game Destroy event.\r\n     * \r\n     * Listen for it using the event type `destroy`.\r\n     *\r\n     * @event Phaser.Game#destroyEvent\r\n     */\r\n\r\n    /**\r\n     * Flags this Game instance as needing to be destroyed on the next frame.\r\n     * It will wait until the current frame has completed and then call `runDestroy` internally.\r\n     * \r\n     * If you **do not** need to run Phaser again on the same web page you can set the `noReturn` argument to `true` and it will free-up\r\n     * memory being held by the core Phaser plugins. If you do need to create another game instance on the same page, leave this as `false`.\r\n     *\r\n     * @method Phaser.Game#destroy\r\n     * @fires Phaser.Game#destroyEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} removeCanvas - Set to `true` if you would like the parent canvas element removed from the DOM, or `false` to leave it in place.\r\n     * @param {boolean} [noReturn=false] - If `true` all the core Phaser plugins are destroyed. You cannot create another instance of Phaser on the same web page if you do this.\r\n     */\r\n    destroy: function (removeCanvas, noReturn)\r\n    {\r\n        if (noReturn === undefined) { noReturn = false; }\r\n        \r\n        this.pendingDestroy = true;\r\n\r\n        this.removeCanvas = removeCanvas;\r\n        this.noReturn = noReturn;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Phaser.Game instance, all global systems, all sub-systems and all Scenes.\r\n     *\r\n     * @method Phaser.Game#runDestroy\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    runDestroy: function ()\r\n    {\r\n        this.events.emit('destroy');\r\n\r\n        this.events.removeAllListeners();\r\n\r\n        this.scene.destroy();\r\n\r\n        if (this.renderer)\r\n        {\r\n            this.renderer.destroy();\r\n        }\r\n\r\n        if (this.removeCanvas && this.canvas)\r\n        {\r\n            CanvasPool.remove(this.canvas);\r\n\r\n            if (this.canvas.parentNode)\r\n            {\r\n                this.canvas.parentNode.removeChild(this.canvas);\r\n            }\r\n        }\r\n\r\n        if (typeof EXPERIMENTAL)\r\n        {\r\n            if (this.domContainer)\r\n            {\r\n                this.domContainer.parentNode.removeChild(this.domContainer);\r\n            }\r\n        }\r\n\r\n        this.loop.destroy();\r\n        \r\n        this.pendingDestroy = false;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Game;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","AddToDOM","AnimationManager","CacheManager","CanvasPool","Class","Config","CreateRenderer","DataManager","DebugHeader","Device","DOMContentLoaded","EventEmitter","InputManager","PluginCache","PluginManager","SceneManager","SoundManagerCreator","TextureManager","TimeStep","VisibilityHandler","EXPERIMENTAL","CreateDOMContainer","ScaleManager","PLUGIN_FBINSTANT","FacebookInstantGamesPlugin","Game","initialize","config","renderer","domContainer","context","canvas","isRunning","isBooted","events","anims","textures","cache","registry","input","scene","sceneConfig","device","scaleManager","sound","create","loop","fps","plugins","facebook","hasFocus","noReturn","removeCanvas","pendingDestroy","isOver","boot","bind","hasCore","preBoot","parent","emit","once","texturesReady","console","warn","start","postBoot","step","headlessStep","eventEmitter","on","onHidden","onVisible","onBlur","onFocus","time","delta","runDestroy","update","preRender","render","postRender","pause","resume","blur","focus","resize","width","height","style","destroy","undefined","removeAllListeners","remove","parentNode","removeChild"]
}
