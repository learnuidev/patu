{
"version":3,
"file":"module$node_modules$Phaser$src$math$Clamp.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwBtGD,MAAAC,QAAA,CALYC,QAAS,CAACC,KAAD,CAAQC,GAAR,CAAaC,GAAb,CACrB,CACI,MAAOC,KAAAD,IAAA,CAASD,GAAT,CAAcE,IAAAF,IAAA,CAASC,GAAT,CAAcF,KAAd,CAAd,CADX,CApBsG;",
"sources":["node_modules/Phaser/src/math/Clamp.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$Clamp\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\n/**\r\n * Force a value within the boundaries by clamping it to the range `min`, `max`.\r\n *\r\n * @function Phaser.Math.Clamp\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to be clamped.\r\n * @param {number} min - The minimum bounds.\r\n * @param {number} max - The maximum bounds.\r\n *\r\n * @return {number} The clamped value.\r\n */\r\nvar Clamp = function (value, min, max)\r\n{\r\n    return Math.max(min, Math.min(max, value));\r\n};\r\n\r\nmodule.exports = Clamp;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Clamp","value","min","max","Math"]
}
