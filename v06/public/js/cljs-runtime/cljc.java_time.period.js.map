{"version":3,"sources":["cljc/java_time/period.cljc"],"mappings":";;;;AACA,AAAKA,AAAK,AAAGC;AACb,AAAA,AAAmBC,AAA6FC;AAAhH,AAA0H,AAAmBA;;AAC7I,AAAA,AAAmBC,AAA8EC;AAAjG,AAA0G,AAAGJ,AAAyBI;;AACtI,AAAA,AAAmBC,AAA6EC;AAAhG,AAAyG,AAAGN,AAAwBM;;AACpI,AAAA,AAAmBC,AAA8FC;AAAjH,AAA2H,AAAaA;;AACxI,AAAA,AAAmBC,AAAoFC,AAA2BC,AAA2BC;AAA7J,AAAsK,AAAGZ,AAAoBU,AAAQC,AAAQC;;AAC7M,AAAA,AAAmBC,AAA0FC;AAA7G,AAAuH,AAASA;;AAChI,AAAA,AAAmBC,AAA8GC,AAASC;AAA1I,AAA6J,AAAiCD,AAASC;;AACvM,AAAA,AAAmBC,AAAyFC;AAA5G,AAAsH,AAAkBA;;AACxI,AAAA,AAAmBC,AAAiGC,AAA4BC;AAAhJ,AAAyJ,AAAWD,AAASC;;AAC7K,AAAA,AAAmBC,AAAiKC,AAASC;AAA7L,AAAgN,AAAyBD,AAASC;;AAClP,AAAA,AAAmBC,AAA+EC;AAAlG,AAA2G,AAAG3B,AAA0B2B;;AACxI,AAAA,AAAmBC,AAA2FC;AAA9G,AAAwH,AAAWA;;AACnI,AAAA,AAAmBC,AAAoGC,AAAeC;AAAtI,AAAgJ,AAAaD,AAASC;;AACtK,AAAA,AAAmBC,AAAqGC,AAAeC;AAAvI,AAAiJ,AAAcD,AAASC;;AACxK,AAAA,AAAmBC,AAAkKC,AAASC;AAA9L,AAAiN,AAA0BD,AAASC;;AACpP,AAAA,AAAmBC,AAAiIC,AAAsCC;AAA1L,AAA2N,AAAQD,AAASC;;AAC5O,AAAA,AAAmBC,AAAqFC;AAAxG,AAAkH,AAAgBA;;AAClI,AAAA,AAAmBC,AAAkGC,AAAeC;AAApI,AAA8I,AAAWD,AAASC;;AAClK,AAAA,AAAmBC,AAA8EC;AAAjG,AAA0G,AAAGhD,AAAyBgD;;AACtI,AAAA,AAAmBC,AAA2FC;AAA9G,AAAwH,AAAiBA;;AACzI,AAAA,AAAmBC,AAA4FC;AAA/G,AAAmI,AAA4BA;;AAC/J,AAAA,AAAmBC,AAA4FC;AAA/G,AAAyH,AAAkBA;;AAC3I,AAAA,AAAmBC,AAAkGC,AAA4BC;AAAjJ,AAA0J,AAAYD,AAASC;;AAC/K,AAAA,AAAmBC,AAA+FC;AAAlH,AAAsI,AAA+BA;;AACrK,AAAA,AAAmBC,AAAmGC,AAA4BC;AAAlJ,AAA2J,AAAaD,AAASC;;AACjL,AAAA,AAAmBC,AAAqHC,AAA6CC;AAArL,AAA8M,AAAGjE,AAAyBgE,AAAwBC;;AAClQ,AAAA,AAAmBC,AAAwHC;AAA3I,AAAkL,AAAGnE,AAAsBmE;;AAC3M,AAAA,AAAmBC,AAAoGC,AAAeC;AAAtI,AAAgJ,AAAaD,AAASC;;AACtK,AAAA,AAAmBC,AAAmGC;AAAtH,AAA0I,AAAyCA;;AACnL,AAAA,AAAmBC,AAAmGC;AAAtH,AAAkJ,AAAG1E,AAAuB0E;;AAC5K,AAAA,AAAmBC,AAA4FC;AAA/G,AAAyH,AAAWA;;AACpI,AAAA,AAAmBC,AAAwIC,AAAsCC;AAAjM,AAAkO,AAAeD,AAASC;;AAC1P,AAAA,AAAmBC,AAA2GC,AAA0CC;AAAxK,AAA6M,AAAMD,AAASC;;AAC5N,AAAA,AAAmBC,AAA4GC,AAA2BC;AAA1J,AAAgL,AAASD,AAASC;;AAClM,AAAA,AAAmBC,AAAmGC,AAAeC;AAArI,AAA+I,AAAYD,AAASC;;AACpK,AAAA,AAAmBC,AAAmGC,AAAeC;AAArI,AAA+I,AAAYD,AAASC","names":["cljc.java-time.period/zero","java.time/Period","cljc.java-time.period/get-months","this3420","cljc.java-time.period/of-weeks","int3421","cljc.java-time.period/of-days","int3422","cljc.java-time.period/is-negative","this3423","cljc.java-time.period/of","int3424","int3425","int3426","cljc.java-time.period/is-zero","this3427","cljc.java-time.period/multiplied-by","this3428","G__3429","cljc.java-time.period/get-units","this3430","cljc.java-time.period/with-days","this3431","int3432","cljc.java-time.period/plus","this3433","G__3434","cljc.java-time.period/of-months","int3435","cljc.java-time.period/to-string","this3436","cljc.java-time.period/plus-months","this3437","long3438","cljc.java-time.period/minus-months","this3439","long3440","cljc.java-time.period/minus","this3441","G__3442","cljc.java-time.period/add-to","this3443","java-time-temporal-Temporal3444","cljc.java-time.period/to-total-months","this3445","cljc.java-time.period/plus-days","this3446","long3447","cljc.java-time.period/of-years","int3448","cljc.java-time.period/get-days","this3449","cljc.java-time.period/negated","this3450","cljc.java-time.period/get-years","this3451","cljc.java-time.period/with-years","this3452","int3453","cljc.java-time.period/normalized","this3454","cljc.java-time.period/with-months","this3455","int3456","cljc.java-time.period/between","java-time-LocalDate3457","java-time-LocalDate3458","cljc.java-time.period/from","java-time-temporal-TemporalAmount3459","cljc.java-time.period/minus-years","this3460","long3461","cljc.java-time.period/get-chronology","this3462","cljc.java-time.period/parse","java-lang-CharSequence3463","cljc.java-time.period/hash-code","this3464","cljc.java-time.period/subtract-from","this3465","java-time-temporal-Temporal3466","cljc.java-time.period/get","this3467","java-time-temporal-TemporalUnit3468","cljc.java-time.period/equals","this3469","java-lang-Object3470","cljc.java-time.period/plus-years","this3471","long3472","cljc.java-time.period/minus-days","this3473","long3474"],"sourcesContent":["(ns cljc.java-time.period (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Period]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Period])))\r\n(def zero (. java.time.Period -ZERO))\r\n(clojure.core/defn get-months {:arglists (quote ([\"java.time.Period\"]))} (^java.lang.Integer [^java.time.Period this3420] (jti/getter months this3420)))\r\n(clojure.core/defn of-weeks {:arglists (quote ([\"int\"]))} (^java.time.Period [^java.lang.Integer int3421] (. java.time.Period ofWeeks int3421)))\r\n(clojure.core/defn of-days {:arglists (quote ([\"int\"]))} (^java.time.Period [^java.lang.Integer int3422] (. java.time.Period ofDays int3422)))\r\n(clojure.core/defn is-negative {:arglists (quote ([\"java.time.Period\"]))} (^java.lang.Boolean [^java.time.Period this3423] (.isNegative this3423)))\r\n(clojure.core/defn of {:arglists (quote ([\"int\" \"int\" \"int\"]))} (^java.time.Period [^java.lang.Integer int3424 ^java.lang.Integer int3425 ^java.lang.Integer int3426] (. java.time.Period of int3424 int3425 int3426)))\r\n(clojure.core/defn is-zero {:arglists (quote ([\"java.time.Period\"]))} (^java.lang.Boolean [^java.time.Period this3427] (.isZero this3427)))\r\n(clojure.core/defn multiplied-by {:arglists (quote ([\"java.time.Period\" \"int\"] [\"java.time.Period\" \"int\"]))} (^java.lang.Object [this3428 G__3429] #? (:cljs (.multipliedBy ^java.time.Period this3428 G__3429) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Number\") G__3429)) (clojure.core/let [G__3429 (clojure.core/int G__3429)] (.multipliedBy ^java.time.Period this3428 G__3429)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Number\") G__3429)) (clojure.core/let [G__3429 (clojure.core/int G__3429)] (.multipliedBy ^java.time.Period this3428 G__3429)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn get-units {:arglists (quote ([\"java.time.Period\"]))} (^java.util.List [^java.time.Period this3430] (jti/getter units this3430)))\r\n(clojure.core/defn with-days {:arglists (quote ([\"java.time.Period\" \"int\"]))} (^java.time.Period [^java.time.Period this3431 ^java.lang.Integer int3432] (.withDays this3431 int3432)))\r\n(clojure.core/defn plus {:arglists (quote ([\"java.time.Period\" \"java.time.temporal.TemporalAmount\"] [\"java.time.Period\" \"java.time.temporal.TemporalAmount\"]))} (^java.lang.Object [this3433 G__3434] #? (:cljs (.plus ^java.time.Period this3433 G__3434) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__3434)) (clojure.core/let [G__3434 ^\"java.time.temporal.TemporalAmount\" G__3434] (.plus ^java.time.Period this3433 G__3434)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__3434)) (clojure.core/let [G__3434 ^\"java.time.temporal.TemporalAmount\" G__3434] (.plus ^java.time.Period this3433 G__3434)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn of-months {:arglists (quote ([\"int\"]))} (^java.time.Period [^java.lang.Integer int3435] (. java.time.Period ofMonths int3435)))\r\n(clojure.core/defn to-string {:arglists (quote ([\"java.time.Period\"]))} (^java.lang.String [^java.time.Period this3436] (.toString this3436)))\r\n(clojure.core/defn plus-months {:arglists (quote ([\"java.time.Period\" \"long\"]))} (^java.time.Period [^java.time.Period this3437 ^long long3438] (.plusMonths this3437 long3438)))\r\n(clojure.core/defn minus-months {:arglists (quote ([\"java.time.Period\" \"long\"]))} (^java.time.Period [^java.time.Period this3439 ^long long3440] (.minusMonths this3439 long3440)))\r\n(clojure.core/defn minus {:arglists (quote ([\"java.time.Period\" \"java.time.temporal.TemporalAmount\"] [\"java.time.Period\" \"java.time.temporal.TemporalAmount\"]))} (^java.lang.Object [this3441 G__3442] #? (:cljs (.minus ^java.time.Period this3441 G__3442) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__3442)) (clojure.core/let [G__3442 ^\"java.time.temporal.TemporalAmount\" G__3442] (.minus ^java.time.Period this3441 G__3442)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__3442)) (clojure.core/let [G__3442 ^\"java.time.temporal.TemporalAmount\" G__3442] (.minus ^java.time.Period this3441 G__3442)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn add-to {:arglists (quote ([\"java.time.Period\" \"java.time.temporal.Temporal\"]))} (^java.time.temporal.Temporal [^java.time.Period this3443 ^java.time.temporal.Temporal java-time-temporal-Temporal3444] (.addTo this3443 java-time-temporal-Temporal3444)))\r\n(clojure.core/defn to-total-months {:arglists (quote ([\"java.time.Period\"]))} (^long [^java.time.Period this3445] (.toTotalMonths this3445)))\r\n(clojure.core/defn plus-days {:arglists (quote ([\"java.time.Period\" \"long\"]))} (^java.time.Period [^java.time.Period this3446 ^long long3447] (.plusDays this3446 long3447)))\r\n(clojure.core/defn of-years {:arglists (quote ([\"int\"]))} (^java.time.Period [^java.lang.Integer int3448] (. java.time.Period ofYears int3448)))\r\n(clojure.core/defn get-days {:arglists (quote ([\"java.time.Period\"]))} (^java.lang.Integer [^java.time.Period this3449] (jti/getter days this3449)))\r\n(clojure.core/defn negated {:arglists (quote ([\"java.time.Period\"] [\"java.time.Period\"]))} (^java.lang.Object [this3450] #? (:cljs (.negated ^java.time.Period this3450) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this3450)) (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this3450)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn get-years {:arglists (quote ([\"java.time.Period\"]))} (^java.lang.Integer [^java.time.Period this3451] (jti/getter years this3451)))\r\n(clojure.core/defn with-years {:arglists (quote ([\"java.time.Period\" \"int\"]))} (^java.time.Period [^java.time.Period this3452 ^java.lang.Integer int3453] (.withYears this3452 int3453)))\r\n(clojure.core/defn normalized {:arglists (quote ([\"java.time.Period\"] [\"java.time.Period\"]))} (^java.lang.Object [this3454] #? (:cljs (.normalized ^java.time.Period this3454) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this3454)) (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this3454)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn with-months {:arglists (quote ([\"java.time.Period\" \"int\"]))} (^java.time.Period [^java.time.Period this3455 ^java.lang.Integer int3456] (.withMonths this3455 int3456)))\r\n(clojure.core/defn between {:arglists (quote ([\"java.time.LocalDate\" \"java.time.LocalDate\"]))} (^java.time.Period [^java.time.LocalDate java-time-LocalDate3457 ^java.time.LocalDate java-time-LocalDate3458] (. java.time.Period between java-time-LocalDate3457 java-time-LocalDate3458)))\r\n(clojure.core/defn from {:arglists (quote ([\"java.time.temporal.TemporalAmount\"]))} (^java.time.Period [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3459] (. java.time.Period from java-time-temporal-TemporalAmount3459)))\r\n(clojure.core/defn minus-years {:arglists (quote ([\"java.time.Period\" \"long\"]))} (^java.time.Period [^java.time.Period this3460 ^long long3461] (.minusYears this3460 long3461)))\r\n(clojure.core/defn get-chronology {:arglists (quote ([\"java.time.Period\"] [\"java.time.Period\"]))} (^java.lang.Object [this3462] #? (:cljs (jti/getter chronology ^java.time.Period this3462) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.Period this3462)) (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.Period this3462)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn parse {:arglists (quote ([\"java.lang.CharSequence\"]))} (^java.time.Period [^java.lang.CharSequence java-lang-CharSequence3463] (. java.time.Period parse java-lang-CharSequence3463)))\r\n(clojure.core/defn hash-code {:arglists (quote ([\"java.time.Period\"]))} (^java.lang.Integer [^java.time.Period this3464] (.hashCode this3464)))\r\n(clojure.core/defn subtract-from {:arglists (quote ([\"java.time.Period\" \"java.time.temporal.Temporal\"]))} (^java.time.temporal.Temporal [^java.time.Period this3465 ^java.time.temporal.Temporal java-time-temporal-Temporal3466] (.subtractFrom this3465 java-time-temporal-Temporal3466)))\r\n(clojure.core/defn get {:arglists (quote ([\"java.time.Period\" \"java.time.temporal.TemporalUnit\"]))} (^long [^java.time.Period this3467 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3468] (.get this3467 java-time-temporal-TemporalUnit3468)))\r\n(clojure.core/defn equals {:arglists (quote ([\"java.time.Period\" \"java.lang.Object\"]))} (^java.lang.Boolean [^java.time.Period this3469 ^java.lang.Object java-lang-Object3470] (.equals this3469 java-lang-Object3470)))\r\n(clojure.core/defn plus-years {:arglists (quote ([\"java.time.Period\" \"long\"]))} (^java.time.Period [^java.time.Period this3471 ^long long3472] (.plusYears this3471 long3472)))\r\n(clojure.core/defn minus-days {:arglists (quote ([\"java.time.Period\" \"long\"]))} (^java.time.Period [^java.time.Period this3473 ^long long3474] (.minusDays this3473 long3474)))\r\n"]}