{"version":3,"sources":["datascript/pull_api.cljc"],"mappings":"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","names":["datascript.pull-api/into!","transient-coll","items","cljs.core.reduce","cljs.core/conj!","datascript.pull-api/+default-limit+","datascript.pull-api/initial-frame","pattern","eids","multi?","cljs.core/seq","cljs.core/transient","datascript.pull-api/subpattern-frame","attr","cljs.core.assoc","datascript.pull-api/reset-frame","frame","kvps","G__30036","cljs.core.conj_BANG_","datascript.pull-api/push-recursion","rec","eid","map__30037","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","depth","seen","cljs.core.update","cljs.core.fnil","cljs.core/inc","cljs.core.conj","datascript.pull-api/seen-eid?","cljs.core.get_in","cljs.core/contains?","datascript.pull-api/pull-seen-eid","frames","datascript.pull-api/single-frame-result","key","G__30040","cljs.core/persistent!","datascript.pull-api/recursion-result","datascript.pull-api/recursion-frame","parent","p__30051","vec__30052","seq__30053","first__30054","cljs.core/first","cljs.core/next","datascript.pull-api/pull-recursion-frame","db","temp__5733__auto__","cljs.core/rest","or__4126__auto__","results","G__30057","datascript.pull-api/recurse-attr","map__30059","recursion","cljs.core._EQ_","datascript.pull-parser/PullSpec","datascript.pull-api/expand-frame","attr-key","p__30065","vec__30067","seq__30068","first__30069","datascript.pull-api/pull-attr-datoms","forward?","datoms","opts","limit","found","cljs.core/not-empty","G__30075","cljs.core.into","cljs.core.take","ref?","datascript.db/ref?","component?","datascript.db/component?","datascript.db/multival?","datom-val","d","cljs.core.mapv","as-value","G__30078","p1__30063#","cljs.core.comp","cljs.core/PersistentHashMap","single?","G__30079","cljs.core.map","cljs.core/assoc!","G__30087","datascript.pull-api/pull-attr","spec","vec__30089","cljs.core.nth","datascript.db/-datoms","datascript.pull-api/filter-reverse-attrs","cljs.core.filter","p__30092","vec__30093","k","v","cljs.core.not_EQ_","datascript.pull-api/expand-reverse-subpattern-frame","rattrs","datascript.pull-api/expand-result","p__30101","vec__30102","seq__30103","first__30104","datascript.pull-api/pull-expand-reverse-frame","p__30105","vec__30106","seq__30107","first__30108","datascript.pull-api/pull-expand-frame","datoms-by-attr","vec__30109","datascript.pull-api/pull-wildcard-expand","map__30115","cljs.core/group-by","G__30117","datascript.pull-api/pull-wildcard","map__30118","p__30120","vec__30121","seq__30122","first__30123","datascript.pull-api/pull-pattern-frame","specs","new-frames","datascript.pull-api/pull-pattern","G__30133","cljs.core/Keyword","js/Error","vec__30135","seq__30136","first__30137","f","remaining","result","G__30138","cljs.core/not","G__30139","datascript.pull-api/pull-spec","p1__30144#","datascript.db/entid-strict","cljs.core/List","datascript.pull-api/pull","selector","datascript.db/db?","datascript.pull-parser/parse-pull","datascript.pull-api/pull-many"],"sourcesContent":["(ns ^:no-doc datascript.pull-api\n  (:require\n    [datascript.db :as db]\n    [datascript.pull-parser :as dpp #?@(:cljs [:refer [PullSpec]])])\n    #?(:clj\n      (:import\n        [datascript.db Datom]\n        [datascript.pull_parser PullSpec])))\n\n(defn- into!\n  [transient-coll items]\n  (reduce conj! transient-coll items))\n\n(def ^:private ^:const +default-limit+ 1000)\n\n(defn- initial-frame\n  [pattern eids multi?]\n  {:state     :pattern\n   :pattern   pattern\n   :wildcard? (:wildcard? pattern)\n   :specs     (-> pattern :attrs seq)\n   :results   (transient [])\n   :kvps      (transient {})\n   :eids      eids\n   :multi?    multi?\n   :recursion {:depth {} :seen #{}}})\n\n(defn- subpattern-frame\n  [pattern eids multi? attr]\n  (assoc (initial-frame pattern eids multi?) :attr attr))\n\n(defn- reset-frame\n  [frame eids kvps]\n  (let [pattern (:pattern frame)]\n    (assoc frame\n           :eids      eids\n           :specs     (seq (:attrs pattern))\n           :wildcard? (:wildcard? pattern)\n           :kvps      (transient {})\n           :results   (cond-> (:results frame)\n                        (seq kvps) (conj! kvps)))))\n\n(defn- push-recursion\n  [rec attr eid]\n  (let [{:keys [depth seen]} rec]\n    (assoc rec\n           :depth (update depth attr (fnil inc 0))\n           :seen (conj seen eid))))\n\n(defn- seen-eid?\n  [frame eid]\n  (-> frame\n      (get-in [:recursion :seen] #{})\n      (contains? eid)))\n\n(defn- pull-seen-eid\n  [frame frames eid]\n  (when (seen-eid? frame eid)\n    (conj frames (update frame :results conj! {:db/id eid}))))\n\n(defn- single-frame-result\n  [key frame]\n  (some-> (:kvps frame) persistent! (get key)))\n\n(defn- recursion-result [frame]\n  (single-frame-result ::recursion frame))\n\n(defn- recursion-frame\n  [parent eid]\n  (let [attr (:attr parent)\n        rec  (push-recursion (:recursion parent) attr eid)]\n    (assoc (subpattern-frame (:pattern parent) [eid] false ::recursion)\n           :recursion rec)))\n\n(defn- pull-recursion-frame\n  [db [frame & frames]]\n  (if-let [eids (seq (:eids frame))]\n    (let [frame  (reset-frame frame (rest eids) (recursion-result frame))\n          eid    (first eids)]\n      (or (pull-seen-eid frame frames eid)\n          (conj frames frame (recursion-frame frame eid))))\n    (let [kvps    (recursion-result frame)\n          results (cond-> (:results frame)\n                    (seq kvps) (conj! kvps))]\n      (conj frames (assoc frame :state :done :results results)))))\n\n(defn- recurse-attr\n  [db attr multi? eids eid parent frames]\n  (let [{:keys [recursion pattern]} parent\n        depth  (-> recursion (get :depth) (get attr 0))]\n    (if (-> pattern :attrs (get attr) :recursion (= depth))\n      (conj frames parent)\n      (pull-recursion-frame\n       db\n       (conj frames parent\n             {:state :recursion :pattern pattern\n              :attr attr :multi? multi? :eids eids\n              :recursion recursion\n              :results (transient [])})))))\n\n(let [pattern (PullSpec. true {})]\n  (defn- expand-frame\n    [parent eid attr-key multi? eids]\n    (let [rec (push-recursion (:recursion parent) attr-key eid)]\n      (-> pattern\n          (subpattern-frame eids multi? attr-key)\n          (assoc :recursion rec)))))\n\n(defn- pull-attr-datoms\n  [db attr-key attr eid forward? datoms opts [parent & frames]]\n  (let [limit (get opts :limit +default-limit+)\n        attr-key (or (:as opts) attr-key)\n        found (not-empty\n               (cond->> datoms\n                 limit (into [] (take limit))))]\n    (if found\n      (let [ref?       (db/ref? db attr)\n            component? (and ref? (db/component? db attr))\n            multi?     (if forward? (db/multival? db attr) (not component?))\n            datom-val  (if forward? (fn [d] (.-v ^Datom d)) (fn [d] (.-e ^Datom d)))]\n        (cond\n          (contains? opts :subpattern)\n          (->> (subpattern-frame (:subpattern opts)\n                                 (mapv datom-val found)\n                                 multi? attr-key)\n               (conj frames parent))\n\n          (contains? opts :recursion)\n          (recurse-attr db attr-key multi?\n                        (mapv datom-val found)\n                        eid parent frames)\n\n          (and component? forward?)\n          (->> found\n               (mapv datom-val)\n               (expand-frame parent eid attr-key multi?)\n               (conj frames parent))\n          \n          :else \n          (let [as-value  (cond->> datom-val\n                            ref? (comp #(hash-map :db/id %)))\n                single?   (not multi?)]\n            (->> (cond-> (into [] (map as-value) found)\n                   single? first)\n                 (update parent :kvps assoc! attr-key)\n                 (conj frames)))))\n      (->> (cond-> parent\n             (contains? opts :default)\n             (update :kvps assoc! attr-key (:default opts)))\n           (conj frames)))))\n\n(defn- pull-attr\n  [db spec eid frames]\n  (let [[attr-key opts] spec]\n    (if (= :db/id attr-key)\n      (if (not-empty (db/-datoms db :eavt [eid]))\n        (conj (rest frames)\n              (update (first frames) :kvps assoc! :db/id eid))\n        frames)\n      (let [attr     (:attr opts)\n            forward? (= attr-key attr)\n            results  (if forward?\n                       (db/-datoms db :eavt [eid attr])\n                       (db/-datoms db :avet [attr eid]))]\n        (pull-attr-datoms db attr-key attr eid forward?\n                          results opts frames)))))\n\n(def ^:private filter-reverse-attrs\n  (filter (fn [[k v]] (not= k (:attr v)))))\n\n(defn- expand-reverse-subpattern-frame\n  [parent eid rattrs]\n  (-> (:pattern parent)\n      (assoc :attrs rattrs :wildcard? false)\n      (subpattern-frame [eid] false ::expand-rev)))\n\n(defn- expand-result\n  [frames kvps]\n  (->> kvps\n       (persistent!)\n       (update (first frames) :kvps into!)\n       (conj (rest frames))))\n\n(defn- pull-expand-reverse-frame\n  [db [frame & frames]]\n  (->> (or (single-frame-result ::expand-rev frame) {})\n       (into! (:expand-kvps frame))\n       (expand-result frames)))\n\n(defn- pull-expand-frame\n  [db [frame & frames]]\n  (if-let [datoms-by-attr (seq (:datoms frame))]\n    (let [[attr datoms] (first datoms-by-attr)\n          opts          (-> frame\n                            (get-in [:pattern :attrs])\n                            (get attr {}))]\n      (pull-attr-datoms db attr attr (:eid frame) true datoms opts\n                        (conj frames (update frame :datoms rest))))\n    (if-let [rattrs (->> (get-in frame [:pattern :attrs])\n                         (into {} filter-reverse-attrs)\n                         not-empty)]\n      (let [frame  (assoc frame\n                          :state       :expand-rev\n                          :expand-kvps (:kvps frame)\n                          :kvps        (transient {}))]\n        (->> rattrs\n             (expand-reverse-subpattern-frame frame (:eid frame))\n             (conj frames frame)))\n      (expand-result frames (:kvps frame)))))\n\n(defn- pull-wildcard-expand\n  [db frame frames eid pattern]\n  (let [datoms (group-by (fn [d] (.-a ^Datom d)) (db/-datoms db :eavt [eid]))\n        {:keys [attr recursion]} frame\n        rec (cond-> recursion\n              (some? attr) (push-recursion attr eid))]\n    (->> {:state :expand :kvps (transient {:db/id eid})\n          :eid eid :pattern pattern :datoms (seq datoms)\n          :recursion rec}\n         (conj frames frame)\n         (pull-expand-frame db))))\n\n(defn- pull-wildcard\n  [db frame frames]\n  (let [{:keys [eid pattern]} frame]\n    (or (pull-seen-eid frame frames eid)\n        (pull-wildcard-expand db frame frames eid pattern))))\n\n(defn- pull-pattern-frame\n  [db [frame & frames]]\n  (if-let [eids (seq (:eids frame))]\n    (if (:wildcard? frame)\n      (pull-wildcard db\n                     (assoc frame\n                            :specs []\n                            :eid (first eids)\n                            :wildcard? false)\n                     frames)\n      (if-let [specs (seq (:specs frame))]\n        (let [spec       (first specs)\n              pattern    (:pattern frame)\n              new-frames (conj frames (assoc frame :specs (rest specs)))]\n          (pull-attr db spec (first eids) new-frames))\n        (->> frame :kvps persistent! not-empty\n             (reset-frame frame (rest eids))\n             (conj frames)\n             (recur db))))\n    (conj frames (assoc frame :state :done))))\n\n(defn- pull-pattern\n  [db frames]\n  (case (:state (first frames))\n    :expand     (recur db (pull-expand-frame db frames))\n    :expand-rev (recur db (pull-expand-reverse-frame db frames))\n    :pattern    (recur db (pull-pattern-frame db frames))\n    :recursion  (recur db (pull-recursion-frame db frames))\n    :done       (let [[f & remaining] frames\n                      result (cond-> (persistent! (:results f))\n                               (not (:multi? f)) first)]\n                  (if (seq remaining)\n                    (->> (cond-> (first remaining)\n                           result (update :kvps assoc! (:attr f) result))\n                         (conj (rest remaining))\n                         (recur db))\n                    result))))\n\n(defn pull-spec\n  [db pattern eids multi?]\n  (let [eids (into [] (map #(db/entid-strict db %)) eids)]\n    (pull-pattern db (list (initial-frame pattern eids multi?)))))\n\n(defn pull [db selector eid]\n  {:pre [(db/db? db)]}\n  (pull-spec db (dpp/parse-pull selector) [eid] false))\n\n(defn pull-many [db selector eids]\n  {:pre [(db/db? db)]}\n  (pull-spec db (dpp/parse-pull selector) eids true))\n"]}