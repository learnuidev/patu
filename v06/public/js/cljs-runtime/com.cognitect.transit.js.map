{
"version":3,
"file":"com.cognitect.transit.js",
"lineCount":347,
"mappings":"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",
"sources":["com/cognitect/transit.js"],
"sourcesContent":["// Copyright 2014 Cognitect. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\"use strict\";\n\ngoog.provide(\"com.cognitect.transit\");\ngoog.require(\"com.cognitect.transit.util\");\ngoog.require(\"com.cognitect.transit.impl.reader\");\ngoog.require(\"com.cognitect.transit.impl.writer\");\ngoog.require(\"com.cognitect.transit.types\");\ngoog.require(\"com.cognitect.transit.eq\");\ngoog.require(\"com.cognitect.transit.impl.decoder\");\ngoog.require(\"com.cognitect.transit.caching\");\n\n/** @define {boolean} */\nvar TRANSIT_DEV = true;\n\n/** @define {boolean} */\nvar TRANSIT_NODE_TARGET = false;\n\n/** @define {boolean} */\nvar TRANSIT_BROWSER_TARGET = false;\n\n/** @define {boolean} */\nvar TRANSIT_BROWSER_AMD_TARGET = false;\n\ngoog.scope(function() {\n\n    /**\n     * @class transit\n     */\n    var transit = com.cognitect.transit;\n\n    var util    = com.cognitect.transit.util,\n        reader  = com.cognitect.transit.impl.reader,\n        writer  = com.cognitect.transit.impl.writer,\n        decoder = com.cognitect.transit.impl.decoder,\n        types   = com.cognitect.transit.types,\n        eq      = com.cognitect.transit.eq,\n        caching = com.cognitect.transit.caching;\n\n    /**\n     * @typedef {Map|com.cognitect.transit.types.TransitArrayMap|com.cognitect.transit.types.TransitMap}\n     */\n    transit.MapLike;\n\n    /**\n     * @typedef {Set|com.cognitect.transit.types.TransitSet}\n     */\n    transit.SetLike;\n\n    /**\n     * Create a transit reader instance.\n     * @method transit.reader\n     * @param {string=} type\n     *     type of reader to construct.  Default to \"json\". For verbose mode\n     *     supply \"json-verbose\".\n     * @param {Object=} opts\n     *     reader options. A JavaScript object to customize the writer Valid\n     *     entries include \"defaultHandler\", and \"handler\". \"defaultHandler\"\n     *     should be JavaScript function taking two arguments, the first is the\n     *     tag, the second the value. \"handlers\" should be an object of tags to\n     *     handle. The values are functions that will receive the value of matched\n     *     tag. \"preferBuffers\" may be supplied to customize binary\n     *     decoding. If available binary data will read as Node.js Buffers,\n     *     If Buffer is not available or \"prefersBuffers\" is set to false\n     *     data will be read as Uint8Array. If neither Buffer nor Uint8Array is\n     *     available - defaults to tagged value that simply wraps the\n     *     base64 encoded string.\n     * @return {com.cognitect.transit.impl.reader.Reader} A transit reader.\n     * @example\n     *     var r = transit.reader(\"json\", {\n     *         handlers: {\n     *            \"point\": function(v) { return new Point(v[0], v[1]); }\n     *         }\n     *     });\n     */\n    transit.reader = function(type, opts) {\n        if(type === \"json\" || type === \"json-verbose\" || type == null) {\n            type = \"json\";\n            var unmarshaller = new reader.JSONUnmarshaller(opts);\n            return new reader.Reader(unmarshaller, opts);\n        } else {\n            throw new Error(\"Cannot create reader of type \" + type);\n        }\n    };\n\n    /**\n     * Create a transit writer instance.\n     * @method transit.writer\n     * @param {string=} type\n     *     type of writer to construct. Defaults to \"json\". For verbose mode\n     *     supply \"json-verbose\".\n     * @param {Object=} opts\n     *     writer options. A JavaScript object to customize the writer.\n     *     \"handlers\" options, a transit.map of JavaScript constructor and\n     *     transit writer handler instance entries. \"handlerForForeign\" option,\n     *     for dealing with values from other JavaScript contexts. This function\n     *     will be passed the unmatchable value and the installed handlers. The\n     *     function should return the correct handler. Note if this function is\n     *     provided, special handling for Objects will also be\n     *     auto-installed to catch plain Objects from the foreign context.\n     * @return {com.cognitect.transit.impl.writer.Writer} A transit writer.\n     * @example\n     *     var r = transit.writer(\"json\", {\n     *         handlers: transit.map([\n     *            Point, PointHandler\n     *         ])\n     *     });\n     */\n    transit.writer = function(type, opts) {\n        if(type === \"json\" || type === \"json-verbose\" || type == null) {\n            if(type === \"json-verbose\") {\n                if(opts == null) opts = {};\n                opts[\"verbose\"] = true;\n            }\n            var marshaller = new writer.JSONMarshaller(opts);\n            return new writer.Writer(marshaller, opts);\n        } else {\n            var err = new Error(\"Type must be \\\"json\\\"\");\n            err.data = {type: type};\n            throw err;\n        }\n    };\n\n    /**\n     * Create a transit writer handler.\n     * @method transit.makeWriteHandler\n     * @param {Object} obj\n     *    An object containing 3 functions, tag, rep and stringRep. \"tag\" should\n     *    return a string representing the tag to be written on the wire. \"rep\"\n     *    should return the representation on the wire. \"stringRep\" is should\n     *    return the string representation of the value. Optional\n     *    \"getVerboseHandler\" should return a handler for writing verbose output.\n     * @return {Object} A transit write handler.\n     * @example\n     *     var PointHandler = transit.makeWriteHandler({\n     *          tag: function(p) { return \"point\"; },\n     *          rep: function(p) { return [p.x, p.y]; },\n     *          stringRep: function(p) { return null; }\n     *     });\n     */\n    transit.makeWriteHandler = function(obj) {\n        /** @constructor */\n        var Handler = function(){};\n        Handler.prototype.tag = obj[\"tag\"];\n        Handler.prototype.rep = obj[\"rep\"];\n        Handler.prototype.stringRep = obj[\"stringRep\"];\n        Handler.prototype.getVerboseHandler = obj[\"getVerboseHandler\"];\n        return new Handler();\n    };\n\n    transit.makeBuilder = function(obj) {\n        /** @constructor */\n        var Builder = function(){};\n        Builder.prototype.init = obj[\"init\"];\n        Builder.prototype.add = obj[\"add\"];\n        Builder.prototype.finalize = obj[\"finalize\"];\n        Builder.prototype.fromArray = obj[\"fromArray\"];\n        return new Builder();\n    };\n\n    /**\n     * Create a transit date.\n     * @method transit.date\n     * @param {number|string} x\n     *     A number or string representing milliseconds since epoch.\n     * @return {Date} A JavaScript Date.\n     */\n    transit.date = types.date;\n\n    /**\n     * Create an integer. If given a transit integer or a JavaScript\n     *     number will simply return that value. Given a string will\n     *     return a JavaScript number if the string represents an integer\n     *     value in the 53bit range and a transit integer otherwise.\n     * @method transit.integer\n     * @param {number|string} s\n     *     A value representing an integer.\n     * @return {number|goog.math.Long} A JavaScript number or transit integer.\n     */\n    transit.integer = types.intValue;\n\n    /**\n     * Test if an object is a transit integer. Will return true if argument\n     * is a 64 bit integer or a JavaScript number that has an interpretation as\n     * an integer value, i.e. parseFloat(n) === parseInt(n)\n     * @method transit.isInteger\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {boolean} true if the value is a transit integer, false otherwise.\n     */\n    transit.isInteger = types.isInteger;\n\n    /**\n     * Create transit UUID from a string\n     * @method transit.uuid\n     * @param {string} s\n     *     A string.\n     * @return {com.cognitect.transit.types.UUID} A transit UUID.\n     */\n    transit.uuid = types.uuid;\n\n    /**\n     * Test if an object is a transit UUID.\n     * @method transit.isUUID\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {boolean} true if the vlaue is a transit UUID instance, false otherwise.\n     */\n    transit.isUUID = types.isUUID;\n\n    /**\n     * Create a transit big integer.\n     * @method transit.bigInt\n     * @param {string} s\n     *     A string representing an arbitrary size integer value.\n     * @return {com.cognitect.transit.types.TaggedValue} A transit big integer.\n     */\n    transit.bigInt =  types.bigInteger;\n\n    /**\n     * Test if an object is a transit big integer.\n     * @method transit.isBigInt\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {boolean} true if x is a transit big integer, false otherwise.\n     */\n    transit.isBigInt = types.isBigInteger;\n\n    /**\n     * Create a transit big decimal.\n     * @method transit.bigDec\n     * @param {string} s\n     *     A string representing an arbitrary precisions decimal value.\n     * @return {com.cognitect.transit.types.TaggedValue} A transit big decimal.\n     */\n    transit.bigDec =  types.bigDecimalValue;\n\n    /**\n     * Test if an object is a transit big decimal.\n     * @method transit.isBigDec\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {boolean} true if x is a transit big decimal, false otherwise.\n     */\n    transit.isBigDec = types.isBigDecimal;\n\n    /**\n     * Create transit keyword.\n     * @method transit.keyword\n     * @param {string} name A string.\n     * @return {com.cognitect.transit.types.Keyword} A transit keyword.\n     * @example\n     *     transit.keyword(\"foo\");\n     */\n    transit.keyword = types.keyword;\n\n    /**\n     * Test if an object is a transit keyword.\n     * @method transit.isKeyword\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {boolean} true if x is a transit keyword, false otherwise.\n     */\n    transit.isKeyword = types.isKeyword;\n\n    /**\n     * Create a transit symbol.\n     * @method transit.symbol\n     * @param {string} name\n     *     A string.\n     * @return {com.cognitect.transit.types.Symbol} A transit symbol instance.\n     * @example\n     *     transit.symbol(\"foo\");\n     */\n    transit.symbol = types.symbol;\n\n    /**\n     * Test if an object is a transit symbol\n     * @method transit.isSymbol\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {boolean} true if x is a transit symbol, false otherwise.\n     */\n    transit.isSymbol = types.isSymbol;\n\n    /**\n     * Create transit binary blob.\n     * @method transit.binary\n     * @param {string} s\n     *     A base64 encoded string.\n     * @param {*=} decoder\n     *     A Transit compliant decoder\n     * @return {com.cognitect.transit.types.TaggedValue|Uint8Array} A transit binary blob instance.\n     */\n    transit.binary = types.binary;\n\n    /**\n     * Test if an object is a transit binary blob.\n     * @method transit.isBinary\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {Boolean} true if x is a binary value, false otheriwse.\n     */\n    transit.isBinary = types.isBinary;\n\n    /**\n     * Create a transit URI.\n     * @method transit.uri\n     * @param {string} s\n     *     A string representing a valid URI.\n     * @return {com.cognitect.transit.types.TaggedValue} A transit URI.\n     */\n    transit.uri = types.uri;\n\n    /**\n     * Test if an object is a transit URI.\n     * @method transit.isURI\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {Boolean} true if x is a transit symbol, false otherwise.\n     */\n    transit.isURI = types.isURI;\n\n    /**\n     * Create a transit hash map. Transit maps satisfy the current version\n     *     of the ECMAScript 6 Map specification.\n     * @method transit.map\n     * @param {Array=} xs\n     *     A JavaScript array of alternating key value pairs.\n     * @return {com.cognitect.transit.MapLike} A transit map.\n     * @example\n     *     transit.map([new Date(), \"foo\", [1,2], 3]);\n     */\n    transit.map = types.map;\n\n    /**\n     * Test if an object is a transit map.\n     * @method transit.isMap\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {boolean} true if x is a transit map, false otherwise.\n     */\n    transit.isMap = types.isMap;\n\n    /**\n     * Create a transit set. Transit sets satisfy the current version of the\n     *     of the ECMAScript 6 Set specification.\n     * @method transit.set\n     * @param {Array=} xs\n     *     A JavaScript array of values.\n     * @return {com.cognitect.transit.SetLike} A transit set.\n     * @example\n     *     transit.set([\"foo\", [1,2], 3, {bar: \"baz\"}]);\n     */\n    transit.set = types.set;\n\n    /**\n     * Test if an object is a transit set.\n     * @method transit.isSet\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {boolean} true if x is a transit set, false otherwise.\n     */\n    transit.isSet = types.isSet;\n\n    /**\n     * Create a transit list.\n     * @method transit.list\n     * @param {Array} xs\n     *     A JavaScript array.\n     * @return {com.cognitect.transit.types.TaggedValue} A transit list.\n     */\n    transit.list = types.list;\n\n    /**\n     * Test if an object is a transit list.\n     * @method transit.isList\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {boolean} true if x is a transit list, false otherwise.\n     */\n    transit.isList = types.isList;\n\n    /**\n     * Create a transit quoted value.\n     * @method transit.quoted\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {com.cognitect.transit.types.TaggedValue} A transit quoted value.\n     */\n    transit.quoted = types.quoted;\n\n    /**\n     * Test if an object is a transit quoted value.\n     * @method transit.isQuoted\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {boolean} true if x is a transit value, false otherwise.\n     */\n    transit.isQuoted = types.isQuoted;\n\n    /**\n     * Create a transit tagged value.\n     * @method transit.tagged\n     * @param {string} tag A tag.\n     * @param {*} value\n     *     A JavaScrpt array, object, or string.\n     * @return {com.cognitect.transit.types.TaggedValue} A transit tagged value.\n     * @example\n     *     transit.tagged(\"point\", new Point(1,2));\n     */\n    transit.tagged = types.taggedValue;\n\n    /**\n     * Test if an object is a transit tagged value.\n     * @method transit.isTaggedValue\n     * @param {*} x\n     *     Any JavaScript value.\n     * @return {boolean} true if x is a transit value, false otherwise.\n     */\n    transit.isTaggedValue =  types.isTaggedValue;\n\n    /**\n     * Create a transit link.\n     * @method transit.link\n     * @param {com.cognitect.transit.MapLike} m\n     *     A transit map which must contain at a minimum the following keys:\n     *     href, rel. It may optionally include name, render, and prompt. href\n     *     must be a transit.uri, all other values are strings, and render must\n     *     be either \"image\" or \"link\".\n     * @return {Object} A transit link.\n     */\n    transit.link = types.link;\n\n    /**\n     * Test if an object is a transit link.\n     * @method transit.isLink\n     * @param {*} x\n     *     Any JavaScript object.\n     * @return {boolean} true if x is a transit link, false otherwise.\n     */\n    transit.isLink = types.isLink;\n\n    /**\n     * Compute the hashCode for any JavaScript object that has been\n     *    extend to transit's equality and hashing protocol. JavaScript\n     *    primitives and transit value are already extended to this protocol.\n     *    Custom types may be extended to the protocol via transit.extenToEQ.\n     * @method transit.hash\n     * @param {*} x\n     *    Any JavaScript object that has been extended to transit's equality\n     *    and hashing protocol.\n     * @return {number} Returns JavaScript number - semantically a 32bit integer.\n     */\n    transit.hash = eq.hashCode;\n\n    /**\n     * Compute the hashCode for JavaScript map-like types - either a JavaScript\n     *    object or a JavaScript object that implements ES6 Map forEach.\n     * @method transit.hashMapLike\n     * @param {Object|com.cognitect.transit.MapLike} x\n     *    A plain JavaScript Object or Object that implements ES6 Map forEach.\n     * @return {number} Returns JavaScript number - semantically a 32bit integer.\n     */\n    transit.hashMapLike = eq.hashMapLike;\n\n    /**\n     * Compute the hashCode for JavaScript array-like types - either a JavaScript\n     *    array or a JavaScript object that implements Array forEach.\n     * @method transit.hashArrayLike\n     * @param {Object} x\n     *    A JavaScript Array or Object that implements Array forEach.\n     * @return {number} Returns JavaScript number - semantically a 32bit integer.\n     */\n    transit.hashArrayLike = eq.hashArrayLike;\n\n    /**\n     * Test whether two JavaScript objects represent equal values. The\n     *    objects to be tested should be extended to transit's equality\n     *    and hasing protocol. JavaScript natives and transit value have\n     *    already been extended to the protocol, including objects and\n     *    arrays.  Also transit maps and JavaScript objects may be\n     *    compared for equality. Custom types may be extended via\n     *    transit.extendToEQ.\n     * @param {*} x\n     *     A JavaScript object\n     * @param {*} y\n     *     A JavaScript object\n     * @return {Boolean} true if the x and y are equal, false otherwise.\n     */\n    transit.equals = eq.equals;\n\n    /**\n     * Extend an object to hashing and equality required by\n     *     transit maps and sets. Only required for custom\n     *     types, JavaScript primitive types and transit\n     *     types are handled.\n     * @method transit.extendToEQ\n     * @param {*} x\n     *     A JavaScript object, will be mutated.\n     * @param {{hashCode: function(), equals: function(*,*):boolean}}\n     *     A JavaScript object supplying `hashCode` and `equals`\n     *     implementations\n     * @return {*} x\n     * @example\n     *     transit.extendToEq(Point.protototype, {\n     *         hashCode: function() {\n     *             var bits = (this.x | 0) ^ ((this.y | 0) * 31);\n     *             return bits ^ (bits >>> 32);\n     *         },\n     *         equals: function(other) {\n     *             return this.x == other.x && this.y == other.y;\n     *         }\n     *     });\n     */\n    transit.extendToEQ = eq.extendToEQ;\n\n    /**\n     * Convert a transit map instance into a JavaScript Object.\n     * Throws if the map has keys which have no string representation.\n     * @method transit.mapToObject\n     * @param {com.cognitect.transit.MapLike} m\n     *     a transit map\n     * @return {Object} a JavaScript Object\n     */\n    transit.mapToObject = function(m) {\n        var ret = {};\n        m.forEach(function(v, k) {\n            if(typeof k !== \"string\") {\n                throw Error(\"Cannot convert map with non-string keys\");\n            } else {\n                ret[k] = v;\n            }\n        });\n        return ret;\n    };\n\n    /**\n     * Convert a POJO into a transit map.\n     * @method transit.objectToMap\n     * @param {Object} obj\n     *     a JavaScript Object\n     * @return {com.cognitect.transit.MapLike} a transit map\n     */\n    transit.objectToMap = function(obj) {\n        var ret = transit.map();\n        for(var p in obj) {\n            if(obj.hasOwnProperty(p)) {\n                ret.set(p, obj[p]);\n            }\n        }\n        return ret;\n    };\n\n    /**\n     * Construct a Transit JSON decoder.\n     * @method transit.decoder\n     * @param {Object} opts\n     *     options to the decoder. Can include map of\n     *     handlers.\n     * @return {com.cognitect.transit.impl.decoder.Decoder} a Transit JSON decoder\n     * @example\n     *     var decoder = transit.decoder();\n     *     var x = decoder.decode(json, transit.readCache());\n     */\n    transit.decoder = decoder.decoder;\n\n    /**\n     * Construct a Transit read cache\n     * @method transit.readCache\n     * @return {com.cognitect.transit.caching.ReadCache} a Transit read cache\n     */\n    transit.readCache = caching.readCache;\n\n    /**\n     * Construct a Transit write cache\n     * @method transit.writeCache\n     * @return {com.cognitect.transit.caching.WriteCache} a Transit write cache\n     */\n    transit.writeCache = caching.writeCache;\n\n    transit.UUIDfromString = types.UUIDfromString;\n    transit.randomUUID = util.randomUUID;\n    transit.stringableKeys = writer.stringableKeys;\n\n    if(TRANSIT_BROWSER_TARGET) {\n        goog.exportSymbol(\"transit.reader\",         transit.reader);\n        goog.exportSymbol(\"transit.writer\",         transit.writer);\n        goog.exportSymbol(\"transit.makeBuilder\",    transit.makeBuilder);\n        goog.exportSymbol(\"transit.makeWriteHandler\", transit.makeWriteHandler);\n        goog.exportSymbol(\"transit.date\",           types.date);\n        goog.exportSymbol(\"transit.integer\",        types.intValue);\n        goog.exportSymbol(\"transit.isInteger\",      types.isInteger);\n        goog.exportSymbol(\"transit.uuid\",           types.uuid);\n        goog.exportSymbol(\"transit.isUUID\",         types.isUUID);\n        goog.exportSymbol(\"transit.bigInt\",         types.bigInteger);\n        goog.exportSymbol(\"transit.isBigInt\",       types.isBigInteger);\n        goog.exportSymbol(\"transit.bigDec\",         types.bigDecimalValue);\n        goog.exportSymbol(\"transit.isBigDec\",       types.isBigDecimal);\n        goog.exportSymbol(\"transit.keyword\",        types.keyword);\n        goog.exportSymbol(\"transit.isKeyword\",      types.isKeyword);\n        goog.exportSymbol(\"transit.symbol\",         types.symbol);\n        goog.exportSymbol(\"transit.isSymbol\",       types.isSymbol);\n        goog.exportSymbol(\"transit.binary\",         types.binary);\n        goog.exportSymbol(\"transit.isBinary\",       types.isBinary);\n        goog.exportSymbol(\"transit.uri\",            types.uri);\n        goog.exportSymbol(\"transit.isURI\",          types.isURI);\n        goog.exportSymbol(\"transit.map\",            types.map);\n        goog.exportSymbol(\"transit.isMap\",          types.isMap);\n        goog.exportSymbol(\"transit.set\",            types.set);\n        goog.exportSymbol(\"transit.isSet\",          types.isSet);\n        goog.exportSymbol(\"transit.list\",           types.list);\n        goog.exportSymbol(\"transit.isList\",         types.isList);\n        goog.exportSymbol(\"transit.quoted\",         types.quoted);\n        goog.exportSymbol(\"transit.isQuoted\",       types.isQuoted);\n        goog.exportSymbol(\"transit.tagged\",         types.taggedValue);\n        goog.exportSymbol(\"transit.isTaggedValue\",  types.isTaggedValue);\n        goog.exportSymbol(\"transit.link\",           types.link);\n        goog.exportSymbol(\"transit.isLink\",         types.isLink);\n        goog.exportSymbol(\"transit.hash\",           eq.hashCode);\n        goog.exportSymbol(\"transit.hashMapLike\",    eq.hashMapLike);\n        goog.exportSymbol(\"transit.hashArrayLike\",  eq.hashArrayLike);\n        goog.exportSymbol(\"transit.equals\",         eq.equals);\n        goog.exportSymbol(\"transit.extendToEQ\",     eq.extendToEQ);\n        goog.exportSymbol(\"transit.mapToObject\",    transit.mapToObject);\n        goog.exportSymbol(\"transit.objectToMap\",    transit.objectToMap);\n        goog.exportSymbol(\"transit.decoder\",        decoder.decoder);\n        goog.exportSymbol(\"transit.UUIDfromString\", types.UUIDfromString);\n        goog.exportSymbol(\"transit.randomUUID\",     util.randomUUID);\n        goog.exportSymbol(\"transit.stringableKeys\", writer.stringableKeys);\n        goog.exportSymbol(\"transit.readCache\",      caching.readCache);\n        goog.exportSymbol(\"transit.writeCache\",     caching.writeCache);\n    }\n\n    if(TRANSIT_NODE_TARGET) {\n        module.exports = {\n            reader:         transit.reader,\n            writer:         transit.writer,\n            makeBuilder:    transit.makeBuilder,\n            makeWriteHandler: transit.makeWriteHandler,\n            date:           types.date,\n            integer:        types.intValue,\n            isInteger:      types.isInteger,\n            uuid:           types.uuid,\n            isUUID:         types.isUUID,\n            bigInt:         types.bigInteger,\n            isBigInt:       types.isBigInteger,\n            bigDec:         types.bigDecimalValue,\n            isBigDec:       types.isBigDecimal,\n            keyword:        types.keyword,\n            isKeyword:      types.isKeyword,\n            symbol:         types.symbol,\n            isSymbol:       types.isSymbol,\n            binary:         types.binary,\n            isBinary:       types.isBinary,\n            uri:            types.uri,\n            isURI:          types.isURI,\n            map:            types.map,\n            isMap:          types.isMap,\n            set:            types.set,\n            isSet:          types.isSet,\n            list:           types.list,\n            isList:         types.isList,\n            quoted:         types.quoted,\n            isQuoted:       types.isQuoted,\n            tagged:         types.taggedValue,\n            isTaggedValue:  types.isTaggedValue,\n            link:           types.link,\n            isLink:         types.isLink,\n            hash:           eq.hashCode,\n            hashArrayLike:  eq.hashArrayLike,\n            hashMapLike:    eq.hashMapLike,\n            equals:         eq.equals,\n            extendToEQ:     eq.extendToEQ,\n            mapToObject:    transit.mapToObject,\n            objectToMap:    transit.objectToMap,\n            decoder:        decoder.decoder,\n            UUIDfromString: types.UUIDfromString,\n            randomUUID:     util.randomUUID,\n            stringableKeys: writer.stringableKeys,\n            readCache:      caching.readCache,\n            writeCache:     caching.writeCache\n        };\n    }\n});\n"],
"names":["goog","provide","require","TRANSIT_DEV","TRANSIT_NODE_TARGET","TRANSIT_BROWSER_TARGET","TRANSIT_BROWSER_AMD_TARGET","scope","transit","com","cognitect","util","reader","impl","writer","decoder","types","eq","caching","MapLike","SetLike","transit.reader","type","opts","unmarshaller","JSONUnmarshaller","Reader","Error","transit.writer","marshaller","JSONMarshaller","Writer","err","data","makeWriteHandler","transit.makeWriteHandler","obj","Handler","prototype","tag","rep","stringRep","getVerboseHandler","makeBuilder","transit.makeBuilder","Builder","init","add","finalize","fromArray","date","integer","intValue","isInteger","uuid","isUUID","bigInt","bigInteger","isBigInt","isBigInteger","bigDec","bigDecimalValue","isBigDec","isBigDecimal","keyword","isKeyword","symbol","isSymbol","binary","isBinary","uri","isURI","map","isMap","set","isSet","list","isList","quoted","isQuoted","tagged","taggedValue","isTaggedValue","link","isLink","hash","hashCode","hashMapLike","hashArrayLike","equals","extendToEQ","mapToObject","transit.mapToObject","m","ret","forEach","v","k","objectToMap","transit.objectToMap","p","hasOwnProperty","readCache","writeCache","UUIDfromString","randomUUID","stringableKeys","exportSymbol","module","exports"]
}
