{"version":3,"sources":["app/ms/utils.cljs"],"mappings":";;;AAIA,AAAA,AAAKA;AACL,AAAA,AAAKC;AAGL;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAACC,AAAOD;;AAEV;;;AAAA,AAAME,AAEHC;AAFH,AAGE,AAACC,AAAYD;;AAEf;;;AAAA,AAAME;AAAN,AAGE,AAACJ;;AAEH,AAAA,AAAMK,AACHN,AAAKO;AADR,AAEE,AAACC,AAAIR,AAAK,AAAA,AAACS,AAAeF;;AAE5B;;;AAAA,AAAMG,AAEHP,AAAKI;AAFR,AAGE,AAAMP,AAAK,AAACE,AAAWC;AAAvB,AACE,AAACJ,AAAW,AAACO,AAAUN,AAAKO;;AAGhC;;;AAAA,AAAMI,AAEHC;AAFH,AAGE,AACE,AAAGA,AAAMf;AAAWA;;AADtB,AAEE,AAAGe,AAAMd;AAAWA;;AAFtB,AAGQc","names":["app.ms.utils/MIN_SCORE","app.ms.utils/MAX_SCORE","app.ms.utils/date->inst","date","tick.alpha.api.inst","app.ms.utils/inst->date","inst","tick.alpha.api.date_time","app.ms.utils/get-now","app.ms.utils/add-days!","total-days","tick.alpha.api._PLUS_","tick.alpha.api/new-duration","app.ms.utils/add-days","app.ms.utils/format-score","score"],"sourcesContent":["(ns app.ms.utils\n  (:require [tick.alpha.api :as t]))\n\n;; CONSTANTS ====================\n(def MIN_SCORE 0)\n(def MAX_SCORE 2)\n\n;; Time Helper functions ========\n(defn date->inst\n  \"Converts date to instant\"\n  [date]\n  (t/inst date))\n\n(defn inst->date\n  \"Converts inst to date\"\n  [inst]\n  (t/date-time inst))\n\n(defn get-now\n  \"Get the present date and time\"\n  []\n  (t/inst))\n\n(defn add-days!\n  [date total-days]\n  (t/+ date (t/new-duration total-days :days)))\n\n(defn add-days\n  \"Takes a an instant and total dat\"\n  [inst total-days]\n  (let [date (inst->date inst)]\n    (date->inst (add-days! date total-days))))\n\n;; Core helper function ================\n(defn format-score\n  \"Formats the score\"\n  [score]\n  (cond\n    (< score MIN_SCORE) MIN_SCORE\n    (> score MAX_SCORE) MAX_SCORE\n    :else score))\n"]}