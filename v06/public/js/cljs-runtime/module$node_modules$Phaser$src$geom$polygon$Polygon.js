shadow$provide.module$node_modules$Phaser$src$geom$polygon$Polygon=function(global,require,module,exports){global=require("module$node_modules$Phaser$src$utils$Class");var Contains=require("module$node_modules$Phaser$src$geom$polygon$Contains"),GetPoints=require("module$node_modules$Phaser$src$geom$polygon$GetPoints");require=new global({initialize:function(points){this.area=0;this.points=[];points&&this.setTo(points)},contains:function(x,y){return Contains(this,x,y)},setTo:function(points){this.area=
0;this.points=[];"string"===typeof points&&(points=points.split(" "));if(!Array.isArray(points))return this;for(var p,y0=Number.MAX_VALUE,i=0;i<points.length;i++)p={x:0,y:0},"number"===typeof points[i]||"string"===typeof points[i]?(p.x=parseFloat(points[i]),p.y=parseFloat(points[i+1]),i++):Array.isArray(points[i])?(p.x=points[i][0],p.y=points[i][1]):(p.x=points[i].x,p.y=points[i].y),this.points.push(p),p.y<y0&&(y0=p.y);this.calculateArea(y0);return this},calculateArea:function(){if(3>this.points.length)return this.area=
0;for(var sum=0,p1,p2,i=0;i<this.points.length-1;i++)p1=this.points[i],p2=this.points[i+1],sum+=(p2.x-p1.x)*(p1.y+p2.y);p1=this.points[0];p2=this.points[this.points.length-1];sum+=(p1.x-p2.x)*(p2.y+p1.y);return this.area=.5*-sum},getPoints:function(quantity,step,output){return GetPoints(this,quantity,step,output)}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$geom$polygon$Polygon.js.map
