{"version":3,"sources":["app/kaboomv5/game/scene.cljs"],"mappings":"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","names":["app.kaboomv5.game.scene/def-gravity","app.kaboomv5.game.scene/create-scene","id","cb","G__26720","app.kaboomv5.math.core/vec2","app.kaboomv5.gfx/center","app.kaboomv5.math.core/mat4","var_args","G__26722","app.kaboomv5.game.scene/fetch","js/Error","app.kaboomv5.game.scene.fetch","def-val","cljs.core/deref","cljs.core.get","app.kaboomv5.game.state/scene-state","app.kaboomv5.game.scene/add!","cljs.core/seq","js/console.warn","cljs.core.swap_BANG_","cljs.core/assoc","app.kaboomv5.game.scene/update!","cljs.core/not","cljs.core/update","app.kaboomv5.game.scene/process-comps","comps","p__26725","map__26726","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","app.kaboomv5.game.scene/add-component!","sid","cljs.core/assoc-in","app.kaboomv5.game.scene/use-comp","cid","G__26732","app.kaboomv5.game.scene/custom-comp","f","app.kaboomv5.game.scene.custom_comp","init-state","internal-state","cljs.core.atom","app.kaboomv5.game.scene/ex-comp","p1__26736#","state","app.kaboomv5.game.scene/call-attr","comp","attr"],"sourcesContent":["(ns app.kaboomv5.game.scene\n  (:require [app.kaboomv5.math.core :as math]\n            [app.kaboomv5.gfx :as gfx]\n            [app.kaboomv5.game.state :refer [scene-state]]\n            [app.kaboomv5.app.utils :refer [html-canvas? html-body?]]\n            [cljs.spec.alpha :as s]))\n\n(def def-gravity 980)\n\n(defn create-scene [id cb]\n  {:id id\n   :init cb\n   :events {:add []\n            :update []\n            :draw []\n            :destroy []\n            :key-down []\n            :key-press []\n            :key-press-rep []\n            :key-release []\n            :mouse-click []\n            :mouse-release []\n            :mouse-down []\n            :char-input []}\n   :action []\n   :render []\n   :objs {}\n   :components {}\n   :last-obj-id 0\n   :timers {}\n   :last-timer-id 0\n\n   :cam {:pos (math/vec2 (gfx/center))\n         :scale (math/vec2 1)\n         :angle 0\n         :shake 0}\n   :cam/mouse-pos (math/vec2 0)\n   :cam/matrix    (math/mat4)\n   ;; misc\n   :layers {}\n   :def-layer nil\n   :gravity def-gravity\n   :data {}\n   ;; travellers - net\n   :travellers {}\n   :visitors   {}})\n\n(comment\n  (gfx/width)\n  (math/vec2 [1 1])\n  (math/vec2 (gfx/center)))\n\n;;\n(comment\n  @scene-state)\n\n; (defn warn-if-exists [id]\n;   (if (seq (get @scene-state id))\n;     (js/console.warn (str \"Scene: \" id \" already exists\"))))\n(defn fetch\n  ([id] (fetch id nil))\n  ([id def-val]\n   (get @scene-state id def-val)))\n\n(defn add! [id cb]\n  (if (seq (fetch id))\n    (js/console.warn (str \"scene \" id \" already exists!\"))\n    (swap! scene-state assoc id (create-scene id cb))))\n\n(defn update! [id cb]\n  (if-not (seq (fetch id))\n    (js/console.warn (str \"scene \" id \" does not exist!\"))\n    (swap! scene-state update id cb)))\n;;\n(comment\n  (fetch :scene/main)\n  (add! :scene/main \"STOP!\")\n  (update! :scene/main (fn [scene]\n                         (-> scene\n                             (assoc :foo 1))))\n  (update! :scene/na (fn [scene]\n                       (-> scene\n                           (assoc :foo 1)))))\n\n;; Components api\n(defn process-comps [comps])\n(defn add-component! [sid {:keys [id comps]}]\n  (if-not (seq (fetch sid))\n    (js/console.warn (str \"scene \" sid \" does not exist!\"))\n    (swap! scene-state assoc-in [sid :components id] comps)))\n\n(comment\n  (add-component! :scene/main {:id :player :comps (process-comps [])}))\n\n;; APIS\n(defn use-comp [sid cid comps])\n  ;\n;; Testing\n(defn custom-comp\n  ([f] (custom-comp f nil))\n  ([f init-state]\n   (let [internal-state (atom init-state)]\n     (f internal-state))))\n\n(def ex-comp (custom-comp (fn [state]\n                            {:update-state #(swap! state %)\n                             :get-state #(deref state)\n                             :pos (math/vec2 0 0)})\n                          {:foo :bar})) ;; initial state\n\n(defn call-attr [comp attr]\n  (when (attr comp)\n    (.call (attr comp))))\n(comment\n  (:pos ex-comp)\n  (call-attr ex-comp :get-state)\n  (let [func (:update-state ex-comp)]\n    (func (fn [state]\n            (assoc state :foo \"bar\")))))\n"]}