{
"version":3,
"file":"module$node_modules$Phaser$src$display$color$HexStringToColor.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,8DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO1H,IAAIC,MAAQH,OAAA,CAAQ,oDAAR,CAwCZC,OAAAC,QAAA,CAxBuBE,QAAS,CAACC,GAAD,CAChC,CACI,IAAIC,MAAQ,IAAIH,KAGhBE,IAAA,CAAMA,GAAAE,QAAA,CAAY,yCAAZ,CAAuD,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CACtE,CACI,MAAOF,EAAP,CAAWA,CAAX,CAAeC,CAAf,CAAmBA,CAAnB,CAAuBC,CAAvB,CAA2BA,CAD/B,CADM,CAKN,KAAIC,OAAU,kDAADC,KAAA,CAA0DR,GAA1D,CAEb,IAAIO,MAAJ,CACA,CACQH,GAAAA,CAAIK,QAAA,CAASF,MAAA,CAAO,CAAP,CAAT,CAAoB,EAApB,CACR,KAAIF,WAAII,QAAA,CAASF,MAAA,CAAO,CAAP,CAAT,CAAoB,EAApB,CACJD,OAAAA,CAAIG,QAAA,CAASF,MAAA,CAAO,CAAP,CAAT;AAAoB,EAApB,CAERN,MAAAS,MAAA,CAAYN,GAAZ,CAAeC,UAAf,CAAkBC,MAAlB,CALJ,CAQA,MAAOL,MApBX,CAxB0H;",
"sources":["node_modules/Phaser/src/display/color/HexStringToColor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$display$color$HexStringToColor\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar Color = require('./Color');\r\n\r\n/**\r\n * Converts a hex string into a Phaser Color object.\r\n * \r\n * The hex string can supplied as `'#0033ff'` or the short-hand format of `'#03f'`; it can begin with an optional \"#\" or \"0x\", or be unprefixed.\r\n *\r\n * An alpha channel is _not_ supported.\r\n *\r\n * @function Phaser.Display.Color.HexStringToColor\r\n * @since 3.0.0\r\n *\r\n * @param {string} hex - The hex color value to convert, such as `#0033ff` or the short-hand format: `#03f`.\r\n *\r\n * @return {Phaser.Display.Color} A Color object populated by the values of the given string.\r\n */\r\nvar HexStringToColor = function (hex)\r\n{\r\n    var color = new Color();\r\n\r\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n    hex = hex.replace(/^(?:#|0x)?([a-f\\d])([a-f\\d])([a-f\\d])$/i, function (m, r, g, b)\r\n    {\r\n        return r + r + g + g + b + b;\r\n    });\r\n\r\n    var result = (/^(?:#|0x)?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i).exec(hex);\r\n\r\n    if (result)\r\n    {\r\n        var r = parseInt(result[1], 16);\r\n        var g = parseInt(result[2], 16);\r\n        var b = parseInt(result[3], 16);\r\n\r\n        color.setTo(r, g, b);\r\n    }\r\n\r\n    return color;\r\n};\r\n\r\nmodule.exports = HexStringToColor;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Color","HexStringToColor","hex","color","replace","m","r","g","b","result","exec","parseInt","setTo"]
}
