{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$FillPathWebGL.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,+DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO3H,IAAIC,MAAQH,OAAA,CAAQ,qDAAR,CAiDZC,OAAAC,QAAA,CAjCoBE,QAAS,CAACC,QAAD,CAAWC,UAAX,CAAuBC,GAAvB,CAA4BC,KAA5B,CAAmCC,EAAnC,CAAuCC,EAAvC,CAC7B,CACQC,KAAAA,CAAgBR,KAAAS,+BAAA,CAAqCL,GAAAM,UAArC,CAAoDN,GAAAO,UAApD,CAAoEN,KAApE,CAEpB,KAAIO,KAAOR,GAAAS,SACPC,IAAAA,CAAcV,GAAAU,YAElB,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBD,GAAAE,OAApB,CAAwCD,CAAxC,EAA6C,CAA7C,CACA,CACI,IAAIE,GAAsB,CAAtBA,CAAKH,GAAA,CAAYC,CAAZ,CAAT,CACIG,GAA0B,CAA1BA,CAAKJ,GAAA,CAAYC,CAAZ,CAAgB,CAAhB,CADT,CAEII,GAA0B,CAA1BA,CAAKL,GAAA,CAAYC,CAAZ,CAAgB,CAAhB,CAFT,CAIIK,GAAKR,IAAA,CAAKK,EAAL,CAAU,CAAV,CAALG,CAAoBd,EAJxB,CAKIe,GAAKT,IAAA,CAAKK,EAAL,CAAU,CAAV,CAALI,CAAoBd,EACpBe,GAAAA,CAAKV,IAAA,CAAKM,EAAL,CAAU,CAAV,CAALI,CAAoBhB,EACxB,KAAIiB;AAAKX,IAAA,CAAKM,EAAL,CAAU,CAAV,CAALK,CAAoBhB,EACpBiB,GAAAA,CAAKZ,IAAA,CAAKO,EAAL,CAAU,CAAV,CAALK,CAAoBlB,EACxB,KAAImB,GAAKb,IAAA,CAAKO,EAAL,CAAU,CAAV,CAALM,CAAoBlB,EAEpBmB,GAAAA,CAAMvB,UAAAwB,KAAA,CAAgBP,EAAhB,CAAoBC,EAApB,CACNO,GAAAA,CAAMzB,UAAA0B,KAAA,CAAgBT,EAAhB,CAAoBC,EAApB,CAENS,GAAAA,CAAM3B,UAAAwB,KAAA,CAAgBL,EAAhB,CAAoBC,EAApB,CACNQ,GAAAA,CAAM5B,UAAA0B,KAAA,CAAgBP,EAAhB,CAAoBC,EAApB,CAENS,GAAAA,CAAM7B,UAAAwB,KAAA,CAAgBH,EAAhB,CAAoBC,EAApB,CACNQ,GAAAA,CAAM9B,UAAA0B,KAAA,CAAgBL,EAAhB,CAAoBC,EAApB,CAEVvB,SAAAgC,SAAA,CAAkBR,EAAlB,CAAuBE,EAAvB,CAA4BE,EAA5B,CAAiCC,EAAjC,CAAsCC,EAAtC,CAA2CC,EAA3C,CAAgD,CAAhD,CAAmD,CAAnD,CAAsD,CAAtD,CAAyD,CAAzD,CAA4DzB,KAA5D,CAA2EA,KAA3E,CAA0FA,KAA1F,CAAyGN,QAAAiC,WAAzG,CArBJ,CAPJ,CAxB2H;",
"sources":["node_modules/Phaser/src/gameobjects/shape/FillPathWebGL.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$FillPathWebGL\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders a filled path for the given Shape.\r\n *\r\n * @method Phaser.GameObjects.Shape#FillPathWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLPipeline} pipeline - The WebGL Pipeline used to render this Shape.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} calcMatrix - The transform matrix used to get the position values.\r\n * @param {Phaser.GameObjects.Shape} src - The Game Object shape being rendered in this call.\r\n * @param {number} alpha - The base alpha value.\r\n * @param {number} dx - The source displayOriginX.\r\n * @param {number} dy - The source displayOriginY.\r\n */\r\nvar FillPathWebGL = function (pipeline, calcMatrix, src, alpha, dx, dy)\r\n{\r\n    var fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.fillColor, src.fillAlpha * alpha);\r\n\r\n    var path = src.pathData;\r\n    var pathIndexes = src.pathIndexes;\r\n\r\n    for (var i = 0; i < pathIndexes.length; i += 3)\r\n    {\r\n        var p0 = pathIndexes[i] * 2;\r\n        var p1 = pathIndexes[i + 1] * 2;\r\n        var p2 = pathIndexes[i + 2] * 2;\r\n\r\n        var x0 = path[p0 + 0] - dx;\r\n        var y0 = path[p0 + 1] - dy;\r\n        var x1 = path[p1 + 0] - dx;\r\n        var y1 = path[p1 + 1] - dy;\r\n        var x2 = path[p2 + 0] - dx;\r\n        var y2 = path[p2 + 1] - dy;\r\n\r\n        var tx0 = calcMatrix.getX(x0, y0);\r\n        var ty0 = calcMatrix.getY(x0, y0);\r\n\r\n        var tx1 = calcMatrix.getX(x1, y1);\r\n        var ty1 = calcMatrix.getY(x1, y1);\r\n\r\n        var tx2 = calcMatrix.getX(x2, y2);\r\n        var ty2 = calcMatrix.getY(x2, y2);\r\n    \r\n        pipeline.batchTri(tx0, ty0, tx1, ty1, tx2, ty2, 0, 0, 1, 1, fillTintColor, fillTintColor, fillTintColor, pipeline.tintEffect);\r\n    }\r\n};\r\n\r\nmodule.exports = FillPathWebGL;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Utils","FillPathWebGL","pipeline","calcMatrix","src","alpha","dx","dy","fillTintColor","getTintAppendFloatAlphaAndSwap","fillColor","fillAlpha","path","pathData","pathIndexes","i","length","p0","p1","p2","x0","y0","x1","y1","x2","y2","tx0","getX","ty0","getY","tx1","ty1","tx2","ty2","batchTri","tintEffect"]
}
