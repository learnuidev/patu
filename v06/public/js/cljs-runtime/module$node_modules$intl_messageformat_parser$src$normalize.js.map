{
"version":3,
"file":"module$node_modules$intl_messageformat_parser$src$normalize.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,4DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAcxHC,QAASA,yBAAwB,CAACC,GAAD,CAAM,CACnCA,GAAAC,QAAA,CAAY,QAAS,CAACC,EAAD,CAAK,CAEtB,CAAKC,OAAAC,gBAAA,CAAwBF,EAAxB,CAAL,EAAqCC,OAAAE,gBAAA,CAAwBH,EAAxB,CAArC,GAIAI,MAAAC,KAAA,CAAYL,EAAAM,QAAZ,CAAAP,QAAA,CAAgC,QAAS,CAACQ,EAAD,CAAK,CAC1C,IAAIC,EACAC,GAAAA,CAAMT,EAAAM,QAAA,CAAWC,EAAX,CAKV,KAFA,IAAIG,uBAAyB,EAA7B,CACIC,UAAYC,IAAAA,EADhB,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBJ,EAAAK,MAAAC,OAApB,CAAsCF,CAAA,EAAtC,CAA2C,CACvC,IAAIG,KAAOP,EAAAK,MAAA,CAAUD,CAAV,CACX,IAAIZ,OAAAgB,iBAAA,CAAyBD,IAAzB,CAAJ,EAAsCE,oBAAAC,KAAA,CAA0BH,IAAAF,MAA1B,CAAtC,CAA6E,CACzEJ,sBAAA;AAAyBG,CACzBF,UAAA,CAAYK,IACZ,MAHyE,CAFtC,CAQvCL,SAAJ,GACQS,SAEJ,CAFeT,SAAAG,MAAAO,QAAA,CAAwBH,oBAAxB,CAA8C,KAA9C,CAAsDlB,EAAAc,MAAtD,CAAiE,WAAjE,CAEf,CADIQ,SACJ,CADaC,QAAAC,SAAA,CAAkBJ,SAAlB,CACb,CAAAK,CAACjB,EAADiB,CAAMhB,EAAAK,MAANW,QAAAC,MAAA,CAA8BlB,EAA9B,CAAkCmB,OAAAC,eAAA,CAAuB,CAAClB,sBAAD,CAAyB,CAAzB,CAAvB,CAAoDY,SAApD,CAAlC,CAHJ,CAKAzB,yBAAA,CAAyBY,EAAAK,MAAzB,CApB0C,CAA9C,CANsB,CAA1B,CADmC,CAZvCV,MAAAyB,eAAA,CAAsBjC,OAAtB,CAA+B,YAA/B,CAA6C,CAAEkB,MAAO,CAAA,CAAT,CAA7C,CACAlB,QAAAC,yBAAA,CAAmC,IAAK,EACxC,KAAI8B,QAAUjC,OAAA,CAAQ,iCAAR,CAAd,CACIO,QAAUP,OAAA,CAAQ,yDAAR,CADd;AAEI6B,SAAW7B,OAAA,CAAQ,0DAAR,CAFf,CAGIwB,qBAAuB,aAsC3BtB,QAAAC,yBAAA,CAAmCA,wBA7CqF;",
"sources":["node_modules/intl-messageformat-parser/src/normalize.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$intl_messageformat_parser$src$normalize\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeHashtagInPlural = void 0;\nvar tslib_1 = require(\"tslib\");\nvar types_1 = require(\"./types\");\nvar parser_1 = require(\"./parser\");\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\n * Whether to convert `#` in plural rule options\n * to `{var, number}`\n * @param el AST Element\n * @param pluralStack current plural stack\n */\nfunction normalizeHashtagInPlural(els) {\n    els.forEach(function (el) {\n        // If we're encountering a plural el\n        if (!types_1.isPluralElement(el) && !types_1.isSelectElement(el)) {\n            return;\n        }\n        // Go down the options and search for # in any literal element\n        Object.keys(el.options).forEach(function (id) {\n            var _a;\n            var opt = el.options[id];\n            // If we got a match, we have to split this\n            // and inject a NumberElement in the middle\n            var matchingLiteralElIndex = -1;\n            var literalEl = undefined;\n            for (var i = 0; i < opt.value.length; i++) {\n                var el_1 = opt.value[i];\n                if (types_1.isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n                    matchingLiteralElIndex = i;\n                    literalEl = el_1;\n                    break;\n                }\n            }\n            if (literalEl) {\n                var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n                var newEls = parser_1.pegParse(newValue);\n                (_a = opt.value).splice.apply(_a, tslib_1.__spreadArrays([matchingLiteralElIndex, 1], newEls));\n            }\n            normalizeHashtagInPlural(opt.value);\n        });\n    });\n}\nexports.normalizeHashtagInPlural = normalizeHashtagInPlural;\n\n};"],
"names":["shadow$provide","global","require","module","exports","normalizeHashtagInPlural","els","forEach","el","types_1","isPluralElement","isSelectElement","Object","keys","options","id","_a","opt","matchingLiteralElIndex","literalEl","undefined","i","value","length","el_1","isLiteralElement","PLURAL_HASHTAG_REGEX","test","newValue","replace","newEls","parser_1","pegParse","splice","apply","tslib_1","__spreadArrays","defineProperty"]
}
