{"version":3,"sources":["tongue/core.cljc"],"mappings":"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","names":["tongue.core/inst-formatter","tongue.inst/formatter","tongue.core/format-inst-iso","G__28282","G__28283","tongue.core/number-formatter","tongue.number/formatter","tongue.core/parse-long","s","js/parseInt","js/tongue","js/tongue.core","js/tongue.core.tags-cache","tongue.core/tags-cache","cljs.core/volatile!","tongue.core/tags","locale","or__4126__auto__","fexpr__28286","cljs.core/deref","tags","subtags","clojure.string.split","cljs.core/name","last-tag","temp__5737__auto__","subtag","cljs.core/first","tag","cljs.core/next","cljs.core.conj","cljs.core.keyword","cljs.core.assoc","tongue.core/lookup-template-for-locale","dicts","key","temp__5739__auto__","cljs.core.get","tongue.core/lookup-template","tongue.core/escape-re-subst","str","clojure.string/replace","tongue.core/format-argument","x","formatter","cljs.core/str","cljs.core/inst?","var_args","G__28293","tongue.core/translate","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq28288","G__28289","G__28290","G__28291","G__28292","self__4723__auto__","t","cljs.core/ifn?","cljs.core/map?","p__28294","vec__28295","cljs.core.nth","_","k","rest","args","cljs.core/cons","cljs.core.apply","p__28298","vec__28299","n","idx","arg","tongue.core/append-ns","ns","segment","G__28303","tongue.core/build-dict","js/Error","dict","tongue.core.build_dict","cljs.core/reduce-kv","aggr","value","cljs.core._EQ_","cljs.core/namespace","cljs.core.merge","tongue.core/build-dicts","acc","lang","tongue.core/build-translate","compiled-dicts","tongue.core.translate"],"sourcesContent":["(ns tongue.core\n  (:require\n    [clojure.string :as str]\n    [tongue.inst :as inst]\n    [tongue.number :as number]\n    [tongue.macro :as macro]\n    #?(:clj [clojure.future :refer :all])\n    #?(:clj [clojure.spec.alpha :as spec])))\n\n\n(def inst-formatter inst/formatter)\n\n\n(def format-inst-iso (inst-formatter \"{year}-{month-numeric-padded}-{day-padded}T{hour24-padded}:{minutes-padded}:{seconds-padded}\" {}))\n\n\n(def number-formatter number/formatter)\n\n\n(defn- parse-long [s]\n  #?(:cljs (js/parseInt s)\n     :clj  (Long/parseLong s)))\n\n\n(defonce ^:private tags-cache (volatile! {}))\n\n\n(defn- tags\n  \":az-Arab-IR => (:az-Arab-IR :az-Arab :az), cached\"\n  [locale]\n  (or (@tags-cache locale)\n      (let [tags (loop [subtags  (str/split (name locale) #\"-\")\n                        last-tag nil\n                        tags     ()]\n                   (if-some [subtag (first subtags)]\n                     (let [tag (str last-tag (when last-tag \"-\") subtag)]\n                       (recur (next subtags) tag (conj tags (keyword tag))))\n                     tags))]\n        (vswap! tags-cache assoc locale tags)\n        tags)))\n\n\n(defn- lookup-template-for-locale [dicts locale key]\n  (when locale\n    (loop [tags (tags locale)]\n      (when-some [tag (first tags)]\n        (or (get (get dicts tag) key)\n            (recur (next tags)))))))\n\n\n(defn- lookup-template [dicts locale key]\n  (or (lookup-template-for-locale dicts locale key)\n      (lookup-template-for-locale dicts (:tongue/fallback dicts) key)\n      (str \"{Missing key \" key \"}\")))\n\n\n(defn- escape-re-subst [str]\n  #?(:clj (java.util.regex.Matcher/quoteReplacement str)\n     :cljs (str/replace str #\"\\$\" \"$$$$\")))\n\n\n(defn- format-argument [dicts locale x]\n  (cond\n    (number? x) (let [formatter (or (lookup-template-for-locale dicts locale :tongue/format-number)\n                                    str)]\n                  (formatter x))\n    (inst? x)   (let [formatter (or (lookup-template-for-locale dicts locale :tongue/format-inst)\n                                    format-inst-iso)]\n                  (formatter x))\n    :else       (str x)))\n\n\n(macro/with-spec\n  (spec/def ::locale simple-keyword?)\n  (spec/def ::key keyword?))\n\n\n(defn- translate\n  ([dicts locale key]\n    (macro/with-spec\n      (spec/assert ::locale locale)\n      (spec/assert ::key key))\n    (let [t (lookup-template dicts locale key)]\n      (if (ifn? t) (t) t)))\n  ([dicts locale key x]\n    (macro/with-spec\n      (spec/assert ::locale locale)\n      (spec/assert ::key key))\n    (let [t (lookup-template dicts locale key)\n          s (if (ifn? t) (t x) t)]\n      (if (map? x)\n        (str/replace s #?(:clj  #\"\\{([\\w*!_?$%&=<>'\\-+.#0-9]+|[\\w*!_?$%&=<>'\\-+.#0-9]+\\/[\\w*!_?$%&=<>'\\-+.#0-9:]+)\\}\"\n                          :cljs #\"\\{([\\w*!_?$%&=<>'\\-+.#0-9]+|[\\w*!_?$%&=<>'\\-+.#0-9]+/[\\w*!_?$%&=<>'\\-+.#0-9:]+)\\}\")\n                     (fn [[_ k]]\n                       (format-argument dicts locale (get x (keyword k)))))\n        (str/replace s #\"\\{1\\}\"\n                     (escape-re-subst (format-argument dicts locale x))))))\n  ([dicts locale key x & rest]\n    (macro/with-spec\n      (spec/assert ::locale locale)\n      (spec/assert ::key key))\n    (let [args (cons x rest)\n          t    (lookup-template dicts locale key)\n          s    (if (ifn? t) (apply t x rest) t)]\n      (str/replace s #\"\\{(\\d+)\\}\"\n                   (fn [[_ n]]\n                     (let [idx (parse-long n)\n                           arg (nth args (dec idx)\n                                    (str \"{Missing index \" idx \"}\"))]\n                       (format-argument dicts locale arg)))))))\n\n\n(defn- append-ns [ns segment]\n  (str (when ns (str ns \".\"))\n       segment))\n\n\n(defn- build-dict\n  \"Collapses nested maps into namespaced keywords:\n   { :ns { :key 1 }} => { :ns/key 1 }\n   { :animal { :flying { :bird 420 }}} => { :animal.flying/bird 420 }\"\n  ([dict] (build-dict nil dict))\n  ([ns dict]\n    (reduce-kv\n      (fn [aggr key value]\n        (cond\n          (= \"tongue\" (namespace key))\n          (do\n            (assert (nil? ns) \":tongue/... keys can only be specified at top level\")\n            (assoc aggr key value))\n\n          (map? value)\n          (merge aggr (build-dict (append-ns ns (name key)) value))\n\n          :else\n          (assoc aggr (keyword (or ns (namespace key)) (name key)) value)))\n      {} dict)))\n\n\n(defn build-dicts [dicts]\n  (reduce-kv\n    (fn [acc lang dict]\n      (assoc acc lang (if (map? dict) (build-dict dict) dict)))\n    {} dicts))\n\n\n(macro/with-spec\n  (spec/def ::template (spec/or :str string?\n                                :fn ifn?))\n\n  (spec/def :tongue/format-number ifn?)\n  (spec/def :tongue/format-inst ifn?)\n\n  (spec/def ::dict (spec/and\n                     (spec/keys :opt [:tongue/format-number :tongue/format-inst])\n                     (spec/map-of keyword? (spec/or :plain  ::template\n                                                    :nested (spec/map-of keyword? ::template)))))\n\n  (spec/def :tongue/fallback keyword?)\n  (spec/def ::dicts (spec/and\n                      (spec/keys :opt [:tongue/fallback])\n                      (spec/conformer #(dissoc % :tongue/fallback))\n                      (spec/map-of keyword? ::dict))))\n\n\n(defn build-translate\n  \"Given dicts, builds translate function closed over these dicts:\n\n       (build-translate dicts) => ( [locale key & args] => string )\"\n  [dicts]\n  (macro/with-spec\n    (spec/assert ::dicts dicts))\n  (let [compiled-dicts (build-dicts dicts)]\n    (fn\n      ([locale key]   (translate compiled-dicts locale key))\n      ([locale key x] (translate compiled-dicts locale key x))\n      ([locale key x & args]\n        (apply translate compiled-dicts locale key x args)))))\n"]}