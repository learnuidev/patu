shadow$provide.module$node_modules$Phaser$src$gameobjects$particles$ParticleManagerCanvasRenderer=function(global,require,module,exports){module.exports=function(renderer,emitterManager,interpolationPercentage,camera,parentMatrix){interpolationPercentage=emitterManager.emitters.list;var emittersLength=interpolationPercentage.length;if(0!==emittersLength){var camMatrix=renderer._tempMatrix1.copyFrom(camera.matrix),calcMatrix=renderer._tempMatrix2,particleMatrix=renderer._tempMatrix3;emitterManager=
renderer._tempMatrix4.applyITRS(emitterManager.x,emitterManager.y,emitterManager.rotation,emitterManager.scaleX,emitterManager.scaleY);camMatrix.multiply(emitterManager);emitterManager=camera.roundPixels;var ctx=renderer.currentContext;ctx.save();for(var e=0;e<emittersLength;e++){var emitter=interpolationPercentage[e],particles=emitter.alive,particleCount=particles.length;if(emitter.visible&&0!==particleCount){var scrollX=camera.scrollX*emitter.scrollFactorX,scrollY=camera.scrollY*emitter.scrollFactorY;
parentMatrix&&(camMatrix.multiplyWithOffset(parentMatrix,-scrollX,-scrollY),scrollY=scrollX=0);ctx.globalCompositeOperation=renderer.blendModes[emitter.blendMode];for(emitter=0;emitter<particleCount;emitter++){var particle=particles[emitter],alpha=particle.alpha*camera.alpha;if(!(0>=alpha)){var frame=particle.frame,cd=frame.canvasData,x=-frame.halfWidth,y=-frame.halfHeight;particleMatrix.applyITRS(0,0,particle.rotation,particle.scaleX,particle.scaleY);particleMatrix.e=particle.x-scrollX;particleMatrix.f=
particle.y-scrollY;camMatrix.multiply(particleMatrix,calcMatrix);ctx.globalAlpha=alpha;ctx.save();calcMatrix.copyToContext(ctx);emitterManager&&(x|=0,y|=0);ctx.drawImage(frame.source.image,cd.x,cd.y,cd.width,cd.height,x,y,cd.width,cd.height);ctx.restore()}}}}ctx.restore()}}}
//# sourceMappingURL=module$node_modules$Phaser$src$gameobjects$particles$ParticleManagerCanvasRenderer.js.map
