{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$SwapByIndex.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,+DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO3H,IAAIC,eAAiBH,OAAA,CAAQ,mEAAR,CAsCrBC,OAAAC,QAAA,CAnBkBE,QAAS,CAACC,MAAD,CAASC,MAAT,CAAiBC,KAAjB,CAAwBC,KAAxB,CAA+BC,KAA/B,CAAsCC,MAAtC,CAA8CC,KAA9C,CAC3B,CACQC,KAAAA,CAAQT,cAAA,CAAeI,KAAf,CAAsBC,KAAtB,CAA6BC,KAA7B,CAAoCC,MAApC,CAA4C,IAA5C,CAAkDC,KAAlD,CACZ,KAASE,KAAT,CAAa,CAAb,CAAgBA,KAAhB,CAAoBD,KAAAE,OAApB,CAAkCD,KAAA,EAAlC,CAEQD,KAAA,CAAMC,KAAN,CAAJ,GAEQD,KAAA,CAAMC,KAAN,CAAAE,MAAJ,GAAuBV,MAAvB,CAEIO,KAAA,CAAMC,KAAN,CAAAE,MAFJ,CAEqBT,MAFrB,CAISM,KAAA,CAAMC,KAAN,CAAAE,MAJT,GAI4BT,MAJ5B,GAMIM,KAAA,CAAMC,KAAN,CAAAE,MANJ,CAMqBV,MANrB,CAFJ,CAJR,CA3B2H;",
"sources":["node_modules/Phaser/src/tilemaps/components/SwapByIndex.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$SwapByIndex\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\n\r\n/**\r\n * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n * information.\r\n *\r\n * @function Phaser.Tilemaps.Components.SwapByIndex\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileA - First tile index.\r\n * @param {integer} tileB - Second tile index.\r\n * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar SwapByIndex = function (indexA, indexB, tileX, tileY, width, height, layer)\r\n{\r\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        if (tiles[i])\r\n        {\r\n            if (tiles[i].index === indexA)\r\n            {\r\n                tiles[i].index = indexB;\r\n            }\r\n            else if (tiles[i].index === indexB)\r\n            {\r\n                tiles[i].index = indexA;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = SwapByIndex;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetTilesWithin","SwapByIndex","indexA","indexB","tileX","tileY","width","height","layer","tiles","i","length","index"]
}
