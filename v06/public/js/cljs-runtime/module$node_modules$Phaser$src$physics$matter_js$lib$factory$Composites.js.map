{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$factory$Composites.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/factory/Composites.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$factory$Composites\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.Composites` module contains factory methods for creating composite bodies\r\n* with commonly used configurations (such as stacks and chains).\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Composites\r\n*/\r\n\r\nvar Composites = {};\r\n\r\nmodule.exports = Composites;\r\n\r\nvar Composite = require('../body/Composite');\r\nvar Constraint = require('../constraint/Constraint');\r\nvar Common = require('../core/Common');\r\nvar Body = require('../body/Body');\r\nvar Bodies = require('./Bodies');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\r\n     * This function uses the body's bounds to prevent overlaps.\r\n     * @method stack\r\n     * @param {number} xx\r\n     * @param {number} yy\r\n     * @param {number} columns\r\n     * @param {number} rows\r\n     * @param {number} columnGap\r\n     * @param {number} rowGap\r\n     * @param {function} callback\r\n     * @return {composite} A new composite containing objects created in the callback\r\n     */\r\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\r\n        var stack = Composite.create({ label: 'Stack' }),\r\n            x = xx,\r\n            y = yy,\r\n            lastBody,\r\n            i = 0;\r\n\r\n        for (var row = 0; row < rows; row++) {\r\n            var maxHeight = 0;\r\n            \r\n            for (var column = 0; column < columns; column++) {\r\n                var body = callback(x, y, column, row, lastBody, i);\r\n                    \r\n                if (body) {\r\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\r\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \r\n\r\n                    if (bodyHeight > maxHeight)\r\n                        maxHeight = bodyHeight;\r\n                    \r\n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\r\n\r\n                    x = body.bounds.max.x + columnGap;\r\n\r\n                    Composite.addBody(stack, body);\r\n                    \r\n                    lastBody = body;\r\n                    i += 1;\r\n                } else {\r\n                    x += columnGap;\r\n                }\r\n            }\r\n            \r\n            y += maxHeight + rowGap;\r\n            x = xx;\r\n        }\r\n\r\n        return stack;\r\n    };\r\n    \r\n    /**\r\n     * Chains all bodies in the given composite together using constraints.\r\n     * @method chain\r\n     * @param {composite} composite\r\n     * @param {number} xOffsetA\r\n     * @param {number} yOffsetA\r\n     * @param {number} xOffsetB\r\n     * @param {number} yOffsetB\r\n     * @param {object} options\r\n     * @return {composite} A new composite containing objects chained together with constraints\r\n     */\r\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\r\n        var bodies = composite.bodies;\r\n        \r\n        for (var i = 1; i < bodies.length; i++) {\r\n            var bodyA = bodies[i - 1],\r\n                bodyB = bodies[i],\r\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\r\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \r\n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\r\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\r\n        \r\n            var defaults = {\r\n                bodyA: bodyA,\r\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\r\n                bodyB: bodyB,\r\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\r\n            };\r\n            \r\n            var constraint = Common.extend(defaults, options);\r\n        \r\n            Composite.addConstraint(composite, Constraint.create(constraint));\r\n        }\r\n\r\n        composite.label += ' Chain';\r\n        \r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\r\n     * @method mesh\r\n     * @param {composite} composite\r\n     * @param {number} columns\r\n     * @param {number} rows\r\n     * @param {boolean} crossBrace\r\n     * @param {object} options\r\n     * @return {composite} The composite containing objects meshed together with constraints\r\n     */\r\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\r\n        var bodies = composite.bodies,\r\n            row,\r\n            col,\r\n            bodyA,\r\n            bodyB,\r\n            bodyC;\r\n        \r\n        for (row = 0; row < rows; row++) {\r\n            for (col = 1; col < columns; col++) {\r\n                bodyA = bodies[(col - 1) + (row * columns)];\r\n                bodyB = bodies[col + (row * columns)];\r\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\r\n            }\r\n\r\n            if (row > 0) {\r\n                for (col = 0; col < columns; col++) {\r\n                    bodyA = bodies[col + ((row - 1) * columns)];\r\n                    bodyB = bodies[col + (row * columns)];\r\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\r\n\r\n                    if (crossBrace && col > 0) {\r\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\r\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\r\n                    }\r\n\r\n                    if (crossBrace && col < columns - 1) {\r\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\r\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        composite.label += ' Mesh';\r\n        \r\n        return composite;\r\n    };\r\n    \r\n    /**\r\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\r\n     * This function uses the body's bounds to prevent overlaps.\r\n     * @method pyramid\r\n     * @param {number} xx\r\n     * @param {number} yy\r\n     * @param {number} columns\r\n     * @param {number} rows\r\n     * @param {number} columnGap\r\n     * @param {number} rowGap\r\n     * @param {function} callback\r\n     * @return {composite} A new composite containing objects created in the callback\r\n     */\r\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\r\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\r\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\r\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\r\n            \r\n            if (row > actualRows)\r\n                return;\r\n            \r\n            // reverse row order\r\n            row = actualRows - row;\r\n            \r\n            var start = row,\r\n                end = columns - 1 - row;\r\n\r\n            if (column < start || column > end)\r\n                return;\r\n            \r\n            // retroactively fix the first body's position, since width was unknown\r\n            if (i === 1) {\r\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\r\n            }\r\n\r\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\r\n            \r\n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\r\n     * @method newtonsCradle\r\n     * @param {number} xx\r\n     * @param {number} yy\r\n     * @param {number} number\r\n     * @param {number} size\r\n     * @param {number} length\r\n     * @return {composite} A new composite newtonsCradle body\r\n     */\r\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\r\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\r\n\r\n        for (var i = 0; i < number; i++) {\r\n            var separation = 1.9,\r\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \r\n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\r\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\r\n\r\n            Composite.addBody(newtonsCradle, circle);\r\n            Composite.addConstraint(newtonsCradle, constraint);\r\n        }\r\n\r\n        return newtonsCradle;\r\n    };\r\n    \r\n    /**\r\n     * Creates a composite with simple car setup of bodies and constraints.\r\n     * @method car\r\n     * @param {number} xx\r\n     * @param {number} yy\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @param {number} wheelSize\r\n     * @return {composite} A new composite car body\r\n     */\r\n    Composites.car = function(xx, yy, width, height, wheelSize) {\r\n        var group = Body.nextGroup(true),\r\n            wheelBase = 20,\r\n            wheelAOffset = -width * 0.5 + wheelBase,\r\n            wheelBOffset = width * 0.5 - wheelBase,\r\n            wheelYOffset = 0;\r\n    \r\n        var car = Composite.create({ label: 'Car' }),\r\n            body = Bodies.rectangle(xx, yy, width, height, { \r\n                collisionFilter: {\r\n                    group: group\r\n                },\r\n                chamfer: {\r\n                    radius: height * 0.5\r\n                },\r\n                density: 0.0002\r\n            });\r\n    \r\n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \r\n            collisionFilter: {\r\n                group: group\r\n            },\r\n            friction: 0.8\r\n        });\r\n                    \r\n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \r\n            collisionFilter: {\r\n                group: group\r\n            },\r\n            friction: 0.8\r\n        });\r\n                    \r\n        var axelA = Constraint.create({\r\n            bodyB: body,\r\n            pointB: { x: wheelAOffset, y: wheelYOffset },\r\n            bodyA: wheelA,\r\n            stiffness: 1,\r\n            length: 0\r\n        });\r\n                        \r\n        var axelB = Constraint.create({\r\n            bodyB: body,\r\n            pointB: { x: wheelBOffset, y: wheelYOffset },\r\n            bodyA: wheelB,\r\n            stiffness: 1,\r\n            length: 0\r\n        });\r\n        \r\n        Composite.addBody(car, body);\r\n        Composite.addBody(car, wheelA);\r\n        Composite.addBody(car, wheelB);\r\n        Composite.addConstraint(car, axelA);\r\n        Composite.addConstraint(car, axelB);\r\n\r\n        return car;\r\n    };\r\n\r\n    /**\r\n     * Creates a simple soft body like object.\r\n     * @method softBody\r\n     * @param {number} xx\r\n     * @param {number} yy\r\n     * @param {number} columns\r\n     * @param {number} rows\r\n     * @param {number} columnGap\r\n     * @param {number} rowGap\r\n     * @param {boolean} crossBrace\r\n     * @param {number} particleRadius\r\n     * @param {} particleOptions\r\n     * @param {} constraintOptions\r\n     * @return {composite} A new composite softBody\r\n     */\r\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\r\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\r\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\r\n\r\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\r\n            return Bodies.circle(x, y, particleRadius, particleOptions);\r\n        });\r\n\r\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\r\n\r\n        softBody.label = 'Soft Body';\r\n\r\n        return softBody;\r\n    };\r\n\r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Composites","Composite","Constraint","Common","Body","Bodies","stack","Composites.stack","xx","yy","columns","rows","columnGap","rowGap","callback","create","label","x","lastBody","i","row","maxHeight","column","body","y","bodyHeight","bounds","max","min","bodyWidth","translate","addBody","chain","Composites.chain","composite","xOffsetA","yOffsetA","xOffsetB","yOffsetB","options","bodies","length","bodyA","bodyB","constraint","extend","defaults","pointA","pointB","addConstraint","mesh","Composites.mesh","crossBrace","col","bodyC","pyramid","Composites.pyramid","actualRows","Math","ceil","lastBodyWidth","end","xOffset","newtonsCradle","Composites.newtonsCradle","number","size","circle","separation","inertia","Infinity","restitution","friction","frictionAir","slop","car","Composites.car","width","height","wheelSize","group","nextGroup","wheelAOffset","wheelBase","wheelBOffset","rectangle","collisionFilter","chamfer","radius","density","wheelA","wheelYOffset","wheelB","axelA","stiffness","axelB","softBody","Composites.softBody","particleRadius","particleOptions","constraintOptions","render","type","anchors"]
}
