{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$line$Line.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,2DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOnHC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,MAAQJ,OAAA,CAAQ,wDAAR,CAAZ,CACIK,SAAWL,OAAA,CAAQ,+CAAR,CACXM,QAAAA,CAAaN,OAAA,CAAQ,kEAAR,CAiCbO,QAAAA,CAAO,IAAIJ,MAAJ,CAAU,CAEjBK,QAASJ,KAFQ,CAIjBK,OAAQ,CACJH,OADI,CAJS,CAQjBI,WAEAH,QAAc,CAACI,KAAD,CAAQC,CAAR,CAAWC,CAAX,CAAcC,EAAd,CAAkBC,EAAlB,CAAsBC,EAAtB,CAA0BC,EAA1B,CAA8BC,WAA9B;AAA2CC,WAA3C,CACd,CACcC,IAAAA,EAAV,GAAIR,CAAJ,GAAuBA,CAAvB,CAA2B,CAA3B,CACUQ,KAAAA,EAAV,GAAIP,CAAJ,GAAuBA,CAAvB,CAA2B,CAA3B,CACWO,KAAAA,EAAX,GAAIN,EAAJ,GAAwBA,EAAxB,CAA6B,CAA7B,CACWM,KAAAA,EAAX,GAAIL,EAAJ,GAAwBA,EAAxB,CAA6B,CAA7B,CACWK,KAAAA,EAAX,GAAIJ,EAAJ,GAAwBA,EAAxB,CAA6B,GAA7B,CACWI,KAAAA,EAAX,GAAIH,EAAJ,GAAwBA,EAAxB,CAA6B,CAA7B,CAEAb,MAAAiB,KAAA,CAAW,IAAX,CAAiBV,KAAjB,CAAwB,MAAxB,CAAgC,IAAIN,QAAJ,CAAaS,EAAb,CAAiBC,EAAjB,CAAqBC,EAArB,CAAyBC,EAAzB,CAAhC,CAEIK,MAAAA,CAAQ,IAAAC,KAAAC,MAARF,CAA0B,IAAAC,KAAAE,KAC1BC,GAAAA,CAAS,IAAAH,KAAAI,OAATD,CAA4B,IAAAH,KAAAK,IA8BhC,KAAAC,UAAA,CAVA,IAAAC,YAUA,CApBA,IAAAC,UAoBA,CApBiB,CAsBjB,KAAAC,YAAA,CAAiBpB,CAAjB,CAAoBC,CAApB,CACA,KAAAoB,QAAA,CAAaX,KAAb,CAAoBI,EAApB,CAEoBN,KAAAA,EAApB,GAAIF,WAAJ,EAEI,IAAAgB,eAAA,CAAoB,CAApB,CAAuBhB,WAAvB,CAAoCC,WAApC,CAGJ,KAAAgB,oBAAA,EAnDJ,CAXiB,CAiFjBC,aAAcA,QAAS,CAACC,UAAD,CAAaC,QAAb,CACvB,CACqBlB,IAAAA,EAAjB;AAAIkB,QAAJ,GAA8BA,QAA9B,CAAyCD,UAAzC,CAEA,KAAAP,YAAA,CAAmBO,UACnB,KAAAR,UAAA,CAAiBS,QAEjB,KAAAP,UAAA,CAAiBM,UAEjB,OAAO,KARX,CAlFiB,CA0GjBE,MAAOA,QAAS,CAACzB,EAAD,CAAKC,EAAL,CAASC,EAAT,CAAaC,EAAb,CAChB,CACI,IAAAM,KAAAgB,MAAA,CAAgBzB,EAAhB,CAAoBC,EAApB,CAAwBC,EAAxB,CAA4BC,EAA5B,CAEA,OAAO,KAHX,CA3GiB,CAAV,CAmHXhB,OAAAC,QAAA,CAAiBK,OA9JsG;",
"sources":["node_modules/Phaser/src/gameobjects/shape/line/Line.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$line$Line\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\nvar Shape = require('../Shape');\r\nvar GeomLine = require('../../../geom/line/Line');\r\nvar LineRender = require('./LineRender');\r\n\r\n/**\r\n * @classdesc\r\n * The Line Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only stroke colors and cannot be filled.\r\n * \r\n * A Line Shape allows you to draw a line between two points in your game. You can control the\r\n * stroke color and thickness of the line. In WebGL only you can also specify a different\r\n * thickness for the start and end of the line, allowing you to render lines that taper-off.\r\n * \r\n * If you need to draw multiple lines in a sequence you may wish to use the Polygon Shape instead.\r\n *\r\n * @class Line\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [x1=0] - The horizontal position of the start of the line.\r\n * @param {number} [y1=0] - The vertical position of the start of the line.\r\n * @param {number} [x2=128] - The horizontal position of the end of the line.\r\n * @param {number} [y2=0] - The vertical position of the end of the line.\r\n * @param {number} [strokeColor] - The color the line will be drawn in, i.e. 0xff0000 for red.\r\n * @param {number} [strokeAlpha] - The alpha the line will be drawn in. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\r\nvar Line = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        LineRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Line (scene, x, y, x1, y1, x2, y2, strokeColor, strokeAlpha)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (x1 === undefined) { x1 = 0; }\r\n        if (y1 === undefined) { y1 = 0; }\r\n        if (x2 === undefined) { x2 = 128; }\r\n        if (y2 === undefined) { y2 = 0; }\r\n\r\n        Shape.call(this, scene, 'Line', new GeomLine(x1, y1, x2, y2));\r\n\r\n        var width = this.geom.right - this.geom.left;\r\n        var height = this.geom.bottom - this.geom.top;\r\n\r\n        /**\r\n         * The width (or thickness) of the line.\r\n         * See the setLineWidth method for extra details on changing this on WebGL.\r\n         *\r\n         * @name Phaser.GameObjects.Line#lineWidth\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.lineWidth = 1;\r\n\r\n        /**\r\n         * Private internal value. Holds the start width of the line.\r\n         *\r\n         * @name Phaser.GameObjects.Line#_startWidth\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._startWidth = 1;\r\n\r\n        /**\r\n         * Private internal value. Holds the end width of the line.\r\n         *\r\n         * @name Phaser.GameObjects.Line#_endWidth\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._endWidth = 1;\r\n\r\n        this.setPosition(x, y);\r\n        this.setSize(width, height);\r\n\r\n        if (strokeColor !== undefined)\r\n        {\r\n            this.setStrokeStyle(1, strokeColor, strokeAlpha);\r\n        }\r\n\r\n        this.updateDisplayOrigin();\r\n    },\r\n\r\n    /**\r\n     * Sets the width of the line.\r\n     * \r\n     * When using the WebGL renderer you can have different start and end widths.\r\n     * When using the Canvas renderer only the `startWidth` value is used. The `endWidth` is ignored.\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Line#setLineWidth\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} startWidth - The start width of the line.\r\n     * @param {number} [endWidth] - The end width of the line. Only used in WebGL.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setLineWidth: function (startWidth, endWidth)\r\n    {\r\n        if (endWidth === undefined) { endWidth = startWidth; }\r\n\r\n        this._startWidth = startWidth;\r\n        this._endWidth = endWidth;\r\n\r\n        this.lineWidth = startWidth;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the start and end coordinates of this Line.\r\n     *\r\n     * @method Phaser.GameObjects.Line#setTo\r\n     * @since 3.13.0\r\n     *\r\n     * @param {number} [x1=0] - The horizontal position of the start of the line.\r\n     * @param {number} [y1=0] - The vertical position of the start of the line.\r\n     * @param {number} [x2=0] - The horizontal position of the end of the line.\r\n     * @param {number} [y2=0] - The vertical position of the end of the line.\r\n     *\r\n     * @return {this} This Line object.\r\n     */\r\n    setTo: function (x1, y1, x2, y2)\r\n    {\r\n        this.geom.setTo(x1, y1, x2, y2);\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Line;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Shape","GeomLine","LineRender","Line","Extends","Mixins","initialize","scene","x","y","x1","y1","x2","y2","strokeColor","strokeAlpha","undefined","call","width","geom","right","left","height","bottom","top","_endWidth","_startWidth","lineWidth","setPosition","setSize","setStrokeStyle","updateDisplayOrigin","setLineWidth","startWidth","endWidth","setTo"]
}
