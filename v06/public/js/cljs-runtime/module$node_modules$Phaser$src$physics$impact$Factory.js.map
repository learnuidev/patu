{
"version":3,
"file":"module$node_modules$Phaser$src$physics$impact$Factory.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9GC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,WAAaJ,OAAA,CAAQ,0DAAR,CAAjB,CACIK,YAAcL,OAAA,CAAQ,2DAAR,CADlB,CAEIM,aAAeN,OAAA,CAAQ,4DAAR,CAcfO,QAAAA,CAAU,IAAIJ,MAAJ,CAAU,CAEpBK,WAEAD,QAAiB,CAACE,KAAD,CACjB,CAQI,IAAAA,MAAA,CAAaA,KASb,KAAAC,IAAA,CAAWD,KAAAE,MAAAD,IAjBf,CALoB;AAsCpBE,KAAMA,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,KAAP,CAAcC,MAAd,CACf,CACI,MAAO,KAAIZ,UAAJ,CAAe,IAAAK,MAAf,CAA2BI,CAA3B,CAA8BC,CAA9B,CAAiCC,KAAjC,CAAwCC,MAAxC,CADX,CAvCoB,CAqDpBC,SAAUA,QAAS,CAACC,UAAD,CACnB,CAMIA,UAAAN,KAAA,CAAkB,IAAAH,MAAAU,OAAA,CALVD,UAAAL,EAKU,CALKK,UAAAE,MAAAC,QAKL,CAJVH,UAAAJ,EAIU,CAJKI,UAAAE,MAAAE,QAIL,CAHVJ,UAAAH,MAGU,CAFVG,UAAAF,OAEU,CAElBE,WAAAN,KAAAW,OAAA,CAAyBL,UAGzB,OAFAA,WAAAN,KAAAM,WAEA,CAF6BA,UATjC,CAtDoB,CAiFpBM,MAAOA,QAAS,CAACX,CAAD,CAAIC,CAAJ,CAAOW,GAAP,CAAYL,KAAZ,CAChB,CACQI,CAAAA,CAAQ,IAAInB,WAAJ,CAAgB,IAAAI,MAAhB,CAA4BI,CAA5B,CAA+BC,CAA/B,CAAkCW,GAAlC,CAAuCL,KAAvC,CAEZ,KAAAV,IAAAgB,YAAAC,IAAA,CAAyBH,CAAzB,CAEA,OAAOA,EALX,CAlFoB,CAuGpBI,OAAQA,QAAS,CAACf,CAAD,CAAIC,CAAJ,CAAOW,GAAP,CAAYL,KAAZ,CACjB,CACQQ,CAAAA,CAAS,IAAItB,YAAJ,CAAiB,IAAAG,MAAjB;AAA6BI,CAA7B,CAAgCC,CAAhC,CAAmCW,GAAnC,CAAwCL,KAAxC,CAEb,KAAAV,IAAAgB,YAAAC,IAAA,CAAyBC,CAAzB,CACA,KAAAlB,IAAAmB,WAAAF,IAAA,CAAwBC,CAAxB,CAEA,OAAOA,EANX,CAxGoB,CAuHpBE,QAASA,QAAS,EAClB,CAEI,IAAApB,IAAA,CADA,IAAAD,MACA,CADa,IADjB,CAxHoB,CAAV,CA+HdR,OAAAC,QAAA,CAAiBK,OAvJiG;",
"sources":["node_modules/Phaser/src/physics/impact/Factory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$impact$Factory\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar ImpactBody = require('./ImpactBody');\r\nvar ImpactImage = require('./ImpactImage');\r\nvar ImpactSprite = require('./ImpactSprite');\r\n\r\n/**\r\n * @classdesc\r\n * The Impact Physics Factory allows you to easily create Impact Physics enabled Game Objects.\r\n * Objects that are created by this Factory are automatically added to the physics world.\r\n *\r\n * @class Factory\r\n * @memberOf Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - A reference to the Impact Physics world.\r\n */\r\nvar Factory = new Class({\r\n\r\n    initialize:\r\n\r\n    function Factory (world)\r\n    {\r\n        /**\r\n         * A reference to the Impact Physics world.\r\n         *\r\n         * @name Phaser.Physics.Impact.Factory#world\r\n         * @type {Phaser.Physics.Impact.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * A reference to the Scene.Systems this Impact Physics instance belongs to.\r\n         *\r\n         * @name Phaser.Physics.Impact.Factory#sys\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.sys = world.scene.sys;\r\n    },\r\n\r\n    /**\r\n     * Creates a new ImpactBody object and adds it to the physics simulation.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#body\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of the body in the physics world.\r\n     * @param {number} y - The vertical position of the body in the physics world.\r\n     * @param {number} width - The width of the body.\r\n     * @param {number} height - The height of the body.\r\n     *\r\n     * @return {Phaser.Physics.Impact.ImpactBody} The ImpactBody object that was created.\r\n     */\r\n    body: function (x, y, width, height)\r\n    {\r\n        return new ImpactBody(this.world, x, y, width, height);\r\n    },\r\n\r\n    /**\r\n     * Adds an Impact Physics Body to the given Game Object.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#existing\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to receive the physics body.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object.\r\n     */\r\n    existing: function (gameObject)\r\n    {\r\n        var x = gameObject.x - gameObject.frame.centerX;\r\n        var y = gameObject.y - gameObject.frame.centerY;\r\n        var w = gameObject.width;\r\n        var h = gameObject.height;\r\n\r\n        gameObject.body = this.world.create(x, y, w, h);\r\n\r\n        gameObject.body.parent = gameObject;\r\n        gameObject.body.gameObject = gameObject;\r\n\r\n        return gameObject;\r\n    },\r\n\r\n    /**\r\n     * Creates a new ImpactImage object and adds it to the physics world.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#image\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Impact.ImpactImage} The ImpactImage object that was created.\r\n     */\r\n    image: function (x, y, key, frame)\r\n    {\r\n        var image = new ImpactImage(this.world, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(image);\r\n\r\n        return image;\r\n    },\r\n\r\n    /**\r\n     * Creates a new ImpactSprite object and adds it to the physics world.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#sprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Impact.ImpactSprite} The ImpactSprite object that was created.\r\n     */\r\n    sprite: function (x, y, key, frame)\r\n    {\r\n        var sprite = new ImpactSprite(this.world, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(sprite);\r\n        this.sys.updateList.add(sprite);\r\n\r\n        return sprite;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Factory.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.world = null;\r\n        this.sys = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Factory;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","ImpactBody","ImpactImage","ImpactSprite","Factory","initialize","world","sys","scene","body","x","y","width","height","existing","gameObject","create","frame","centerX","centerY","parent","image","key","displayList","add","sprite","updateList","destroy"]
}
