{"version":3,"sources":["app/phaser/core.cljs"],"mappings":";;;AAKA,AAAA,AAAMA,AAAYC,AAAKC,AAAKC;AAA5B,AACE,AAAQ,AAAQF,AAAMC,AAAKC;;AAE7B,AAAA,AAAAC,AAAMG,AAAYN;AAAlB,AAAA,AAAAI,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAwBG;AAAxB,AAAAF,AAAAD,AAAA,AAAA,AAA0BI;AAA1B,AAAAH,AAAAD,AAAA,AAAA,AAA4BH;AAA5B,AACE,AAAS,AAAOD,AAAMO,AAAEC,AAAEP;;AAO5B,AAAA,AACA,AAAA,AAGA,AAAKQ,AAAM,AAAA,AAAKC;AAEhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAKL,AAAA,AAAMC;AAAN,AACE,AAAA,AAASZ;AAAT,AACS,AAAA,AAAA,AAACD,AAAWC;;AACZ,AAAA,AAAA,AAACD,AAAWC;;AACZ,AAAA,AAAA,AAACD,AAAWC;;AAEvB,AAAA,AAAMS,AAAeG;AAIrB,AAAA,AAAMC;AAAN,AACE,AAAA,AAASb;AAAT,AACS,AAAMc,AAAW,AAAA,AAAA,AAAA,AAAA,AAACR,AAAWN;AACvBe,AAAO,AAAA,AAAA,AAAA,AAAA,AAACT,AAAWN;AACnBgB,AAAM,AAAA,AAAA,AAAA,AAAA,AAACV,AAAWN;AAFxB,AAIE,AAAA,AAAMA,AAAiBc;;AACvB,AAAA,AAAMd,AAAae;;AACnB,AAAA,AAAMf,AAAYgB;;AAClB,AAAA,AAAA,AAAY,AAAchB;;AAUvC,AAAA,AAAMS,AAAcI;AAGpB,AAAA,AAAMI;AAAN,AACE,AAAA,AAASjB;AAAT,AACS,AAAMkB,AAAU,AAAA,AAAIlB;AAApB,AACE,AAAA,AAAM,AAAIA,AAAgB,AAAA,AAAGkB;;AAC7B,AAAA,AAAM,AAAIlB,AAAoB,AAAA,AAAGkB;;AAEjC,AAAM,AAAA,AAAG,AAAA,AAAIlB;AAAb,AACE,AAAA,AAAM,AAAIA,AAAsB,AAAA,AAAQ,AAAA,AAAIA;;AAC5C,AAAA,AAAM,AAAIA,AAAsB,AAAA,AAAQ,AAAA,AAAIA;;AAF9C;;;AAIb,AAAA,AAAMS,AAAcQ;AAEpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKE,AACI,AAAQC,AAKPX;AAGV,AAAA,AAAMY;AAAN,AACE,AAAKC,AAAe,AAACC,AAAQJ;;AAE/B,AAAA,AAAMK;AAAN,AAAA,AAAA,AAAA","names":["app.phaser.core/load-image","this","name","property","p__31636","vec__31637","cljs.core.nth","app.phaser.core/add-sprite","x","y","app.phaser.core/scene","js/Phaser.Scene","app.phaser.core/assets","app.phaser.core/preload!","app.phaser.core/create!","background","friend","enemy","app.phaser.core/update!","enemy-pos","app.phaser.core/config","js/Phaser","app.phaser.core/create-game","js/Phaser.Game","cljs.core/clj->js","app.phaser.core/app"],"sourcesContent":["(ns app.phaser.core\n  (:require [cljs.reader :as reader]))\n\n;; Utils\n\n(defn load-image [this name property]\n  (.image (.-load this) name property))\n\n(defn add-sprite [this [x y name]]\n  (.sprite (.-add this) x y name))\n\n;; ==================\n\n\n;; (swap! players-scale assoc :x 10)\n\n(declare preload)\n(declare create)\n\n;; step 1 - create a new game scene\n(def scene (new js/Phaser.Scene \"Game\"))\n\n(def assets [[\"background\"  \"assets/background.png\"]\n             [\"player\" \"assets/player.png\"]\n             [\"enemy\" \"assets/player.png\"]])\n\n;; step 3 - load assets\n(defn preload! []\n  (this-as this\n           (load-image this \"background\" \"assets/background.png\")\n           (load-image this \"player\" \"assets/player.png\")\n           (load-image this \"enemy\" \"assets/dragon.png\")))\n\n(set! scene -preload preload!)\n\n;; step 4 - called once the preload ends\n;;\n(defn create! []\n  (this-as this\n           (let [background (add-sprite this [0 0 \"background\"])\n                 friend (add-sprite this [70 180 \"player\"])\n                 enemy (add-sprite this [250 180 \"enemy\"])]\n                 ; enem2 (add-sprite this [450 180 \"enemy\"])]\n             (set! this -background background)\n             (set! this -friend friend)\n             (set! this -enemy enemy)\n             (.setOrigin (.-background this) 0 0))))\n             ; (.setScale enemy 2 2)\n             ; (.setScale (.-enemy this) 2))))\n             ; (.setAngle (.-enemy this) 45))))\n             ; (.setAngle (.-enemy this) - 45))))\n             ;; setAngle alternative rotates 90 deg\n             ; (.setRotation (.-enemy this) (/ js/Math.PI 2)))))\n             ; (set! enemy -flipX true)\n             ; (set! enemy -flipY true))))\n\n(set! scene -create create!)\n\n;; Update\n(defn update! []\n  (this-as this\n           (let [enemy-pos (.. this -enemy -x)]\n             (set! (.. this -enemy) -x (+ enemy-pos 1))\n             (set! (.. this -enemy) -angle (+ enemy-pos 1))\n             ;; make the player grow until it reaches double its size\n             (when (< (.. this -friend -scaleX) 2)\n               (set! (.. this -friend) -scaleY (+ 0.01 (.. this -friend  -scaleY)))\n               (set! (.. this -friend) -scaleX (+ 0.01 (.. this -friend  -scaleX)))))))\n;;\n(set! scene -update update!)\n;; step 2 - set the configuration of the game\n(def config\n  {:type (.-AUTO js/Phaser)\n   :width 640\n   :height 360\n   :physics {:default \"arcade\"\n             :arcade {:gravity {:y 200}}}\n   :scene scene})\n\n;; Step 5 - create a game\n(defn create-game []\n  (new js/Phaser.Game (clj->js config)))\n\n(defn app []\n  [:div \"Amazing Game\"])\n"]}