{
"version":3,
"file":"module$node_modules$Phaser$src$time$Clock.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/Phaser/src/time/Clock.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$time$Clock\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar TimerEvent = require('./TimerEvent');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class Clock\r\n * @memberOf Phaser.Time\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\r\nvar Clock = new Class({\r\n\r\n    initialize:\r\n\r\n    function Clock (scene)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Time.Clock#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Time.Clock#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Time.Clock#now\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.now = Date.now();\r\n\r\n        //  Scale the delta time coming into the Clock by this factor\r\n        //  which then influences anything using this Clock for calculations, like TimerEvents\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Time.Clock#timeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.timeScale = 1;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Time.Clock#paused\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.paused = false;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Time.Clock#_active\r\n         * @type {Phaser.Time.TimerEvent[]}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._active = [];\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Time.Clock#_pendingInsertion\r\n         * @type {Phaser.Time.TimerEvent[]}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._pendingInsertion = [];\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Time.Clock#_pendingRemoval\r\n         * @type {Phaser.Time.TimerEvent[]}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._pendingRemoval = [];\r\n\r\n        scene.sys.events.once('boot', this.boot, this);\r\n        scene.sys.events.on('start', this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Time.Clock#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.systems.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Time.Clock#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on('preupdate', this.preUpdate, this);\r\n        eventEmitter.on('update', this.update, this);\r\n        eventEmitter.once('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Time.Clock#addEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {TimerEventConfig} config - [description]\r\n     *\r\n     * @return {Phaser.Time.TimerEvent} [description]\r\n     */\r\n    addEvent: function (config)\r\n    {\r\n        var event = new TimerEvent(config);\r\n\r\n        this._pendingInsertion.push(event);\r\n\r\n        return event;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Time.Clock#delayedCall\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} delay - [description]\r\n     * @param {function} callback - [description]\r\n     * @param {Array.<*>} args - [description]\r\n     * @param {*} callbackScope - [description]\r\n     *\r\n     * @return {Phaser.Time.TimerEvent} [description]\r\n     */\r\n    delayedCall: function (delay, callback, args, callbackScope)\r\n    {\r\n        return this.addEvent({ delay: delay, callback: callback, args: args, callbackScope: callbackScope });\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Time.Clock#clearPendingEvents\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Time.Clock} [description]\r\n     */\r\n    clearPendingEvents: function ()\r\n    {\r\n        this._pendingInsertion = [];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Time.Clock#removeAllEvents\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Time.Clock} [description]\r\n     */\r\n    removeAllEvents: function ()\r\n    {\r\n        this._pendingRemoval = this._pendingRemoval.concat(this._active);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Time.Clock#preUpdate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    preUpdate: function ()\r\n    {\r\n        var toRemove = this._pendingRemoval.length;\r\n        var toInsert = this._pendingInsertion.length;\r\n\r\n        if (toRemove === 0 && toInsert === 0)\r\n        {\r\n            //  Quick bail\r\n            return;\r\n        }\r\n\r\n        var i;\r\n        var event;\r\n\r\n        //  Delete old events\r\n        for (i = 0; i < toRemove; i++)\r\n        {\r\n            event = this._pendingRemoval[i];\r\n\r\n            var index = this._active.indexOf(event);\r\n\r\n            if (index > -1)\r\n            {\r\n                this._active.splice(index, 1);\r\n            }\r\n\r\n            //  Pool them?\r\n            event.destroy();\r\n        }\r\n\r\n        for (i = 0; i < toInsert; i++)\r\n        {\r\n            event = this._pendingInsertion[i];\r\n\r\n            this._active.push(event);\r\n        }\r\n\r\n        //  Clear the lists\r\n        this._pendingRemoval.length = 0;\r\n        this._pendingInsertion.length = 0;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Time.Clock#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        this.now = time;\r\n\r\n        if (this.paused)\r\n        {\r\n            return;\r\n        }\r\n\r\n        delta *= this.timeScale;\r\n\r\n        for (var i = 0; i < this._active.length; i++)\r\n        {\r\n            var event = this._active[i];\r\n\r\n            if (event.paused)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            //  Use delta time to increase elapsed.\r\n            //  Avoids needing to adjust for pause / resume.\r\n            //  Automatically smoothed by TimeStep class.\r\n            //  In testing accurate to +- 1ms!\r\n            event.elapsed += delta * event.timeScale;\r\n\r\n            if (event.elapsed >= event.delay)\r\n            {\r\n                var remainder = event.elapsed - event.delay;\r\n\r\n                //  Limit it, in case it's checked in the callback\r\n                event.elapsed = event.delay;\r\n\r\n                //  Process the event\r\n                if (!event.hasDispatched && event.callback)\r\n                {\r\n                    event.hasDispatched = true;\r\n                    event.callback.apply(event.callbackScope, event.args);\r\n                }\r\n\r\n                if (event.repeatCount > 0)\r\n                {\r\n                    event.repeatCount--;\r\n\r\n                    event.elapsed = remainder;\r\n                    event.hasDispatched = false;\r\n                }\r\n                else\r\n                {\r\n                    this._pendingRemoval.push(event);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Time.Clock#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        var i;\r\n\r\n        for (i = 0; i < this._pendingInsertion.length; i++)\r\n        {\r\n            this._pendingInsertion[i].destroy();\r\n        }\r\n\r\n        for (i = 0; i < this._active.length; i++)\r\n        {\r\n            this._active[i].destroy();\r\n        }\r\n\r\n        for (i = 0; i < this._pendingRemoval.length; i++)\r\n        {\r\n            this._pendingRemoval[i].destroy();\r\n        }\r\n\r\n        this._active.length = 0;\r\n        this._pendingRemoval.length = 0;\r\n        this._pendingInsertion.length = 0;\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off('preupdate', this.preUpdate, this);\r\n        eventEmitter.off('update', this.update, this);\r\n        eventEmitter.off('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Time.Clock#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off('start', this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('Clock', Clock, 'time');\r\n\r\nmodule.exports = Clock;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","PluginCache","TimerEvent","Clock","initialize","scene","systems","sys","now","Date","timeScale","paused","_active","_pendingInsertion","_pendingRemoval","events","once","boot","on","start","destroy","eventEmitter","preUpdate","update","shutdown","addEvent","config","event","push","delayedCall","delay","callback","args","callbackScope","clearPendingEvents","removeAllEvents","concat","toRemove","length","toInsert","i","index","indexOf","splice","time","delta","elapsed","remainder","hasDispatched","apply","repeatCount","off","register"]
}
