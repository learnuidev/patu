{
"version":3,
"file":"module$node_modules$Phaser$src$loader$MergeXHRSettings.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,eAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOnH,IAAIC,OAASH,OAAA,CAAQ,oDAAR,CAAb,CACII,YAAcJ,OAAA,CAAQ,mDAAR,CAkClBC,OAAAC,QAAA,CAlBuBG,QAAS,CAACN,MAAD,CAASO,KAAT,CAChC,CACQC,MAAAA,CAAqBC,IAAAA,EAAZ,GAACT,MAAD,CAAyBK,WAAA,EAAzB,CAAyCD,MAAA,CAAO,EAAP,CAAWJ,MAAX,CAEtD,IAAIO,KAAJ,CAEI,IAAKG,IAAIA,OAAT,GAAoBH,MAApB,CAE2BE,IAAAA,EAAvB,GAAIF,KAAA,CAAMG,OAAN,CAAJ,GAEIF,MAAA,CAAOE,OAAP,CAFJ,CAEsBH,KAAA,CAAMG,OAAN,CAFtB,CAOR,OAAOF,OAdX,CAzBmH;",
"sources":["node_modules/Phaser/src/loader/MergeXHRSettings.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$MergeXHRSettings\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Extend = require('../utils/object/Extend');\r\nvar XHRSettings = require('./XHRSettings');\r\n\r\n/**\r\n * Takes two XHRSettings Objects and creates a new XHRSettings object from them.\r\n *\r\n * The new object is seeded by the values given in the global settings, but any setting in\r\n * the local object overrides the global ones.\r\n *\r\n * @function Phaser.Loader.MergeXHRSettings\r\n * @since 3.0.0\r\n *\r\n * @param {XHRSettingsObject} global - The global XHRSettings object.\r\n * @param {XHRSettingsObject} local - The local XHRSettings object.\r\n *\r\n * @return {XHRSettingsObject} A newly formed XHRSettings object.\r\n */\r\nvar MergeXHRSettings = function (global, local)\r\n{\r\n    var output = (global === undefined) ? XHRSettings() : Extend({}, global);\r\n\r\n    if (local)\r\n    {\r\n        for (var setting in local)\r\n        {\r\n            if (local[setting] !== undefined)\r\n            {\r\n                output[setting] = local[setting];\r\n            }\r\n        }\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = MergeXHRSettings;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Extend","XHRSettings","MergeXHRSettings","local","output","undefined","setting"]
}
