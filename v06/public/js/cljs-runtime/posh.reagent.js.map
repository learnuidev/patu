{"version":3,"sources":["posh/reagent.cljc"],"mappings":";;;;;;AAOA,AAAKA,AACH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMC,AAAqBC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AAESC,AAEAC;AAbpC,AAcE,AAAA,AAACC,AAAMb,AAAW,AAACc,AAAQC,AAAef;;AAE9C,AAAA,AAAAgB,AAAA,AAAAF,AAAAG,AAAiBlB;;AAAjB,AAAAmB,AAAA,AAAAJ,AAAAC,AAAiBhB;;AAAjB,AAAAoB,AAAA,AAAAL,AAAAM,AAAiBrB;;AAAjB,AAAAsB,AAAA,AAAAP,AAAAQ,AAAiBvB;;AAAjB,AAAAwB,AAAA,AAAAT,AAAAU,AAAiBzB;;AAAjB,AAAA0B,AAAA,AAAAX,AAAAY,AAAiB3B;;AAAjB,AAAA4B,AAAA,AAAAb,AAAAc,AAAiB7B;;AAAjB,AAAA8B,AAAA,AAAAf,AAAAgB,AAAiB/B;;AAAjB,AAAAgC,AAAA,AAAAjB,AAAAkB,AAAiBjC;;AAAjB,AAAAkC,AAAA,AAAAnB,AAAAoB,AAAiBnC;;AAAjB,AAAAoC,AAAA,AAAArB,AAAAsB,AAAiBrC;;AAAjB,AAAAsC,AAAA,AAAAvB,AAAAwB,AAAiBvC;;AAAjB,AAAAwC,AAAA,AAAAzB,AAAA0B,AAAiBzC;;AAAjB,AAAA0C,AAAA,AAAA3B,AAAA4B,AAAiB3C;;AAAjB,AAAA4C,AAAA,AAAA7B,AAAA8B,AAAiB7C;;AAAjB,AAAA8C,AAAA,AAAA/B,AAAAgC,AAAiB/C;;AAAjB,AAAAgD,AAAA,AAAAjC,AAAAkC,AAAiBjD;;AAAjB,AAAAkD,AAAA,AAAAnC,AAAAoC,AAAiBnD;;AAAjB,AAAAoD,AAAA,AAAArC,AAAAsC,AAAiBrD;;AAAjB,AAAAsD,AAAA,AAAAvC,AAAAwC,AAAiBvD;;AAAjB,AAAAwD,AAAA,AAAAzC,AAAA0C,AAAiBzD;;AAAjB,AAAA0D,AAAA,AAAA3C,AAAA4C,AAAiB3D","names":["posh.reagent/dcfg","dcfg","datascript.core/db","datascript.core/pull","datascript.core/pull-many","datascript.core/q","datascript.core/filter","datascript.core/with","datascript.core/entid","datascript.core/transact!","datascript.core/listen!","datascript.core/conn?","reagent.core/atom","reagent.ratom/make-reaction","cljs.core.assoc","cljs.core.partial","posh.plugin-base/safe-pull","posh.reagent/missing-pull-result","posh.plugin-base/missing-pull-result","posh.reagent/safe-pull","posh.reagent/set-conn-listener!","posh.plugin-base/set-conn-listener!","posh.reagent/posh!","posh.plugin-base/posh!","posh.reagent/get-conn-var","posh.plugin-base/get-conn-var","posh.reagent/get-posh-atom","posh.plugin-base/get-posh-atom","posh.reagent/get-db","posh.plugin-base/get-db","posh.reagent/rm-posh-item","posh.plugin-base/rm-posh-item","posh.reagent/make-query-reaction","posh.plugin-base/make-query-reaction","posh.reagent/pull","posh.plugin-base/pull","posh.reagent/pull-info","posh.plugin-base/pull-info","posh.reagent/pull-tx","posh.plugin-base/pull-tx","posh.reagent/pull-many","posh.plugin-base/pull-many","posh.reagent/parse-q-query","posh.plugin-base/parse-q-query","posh.reagent/q-args-count","posh.plugin-base/q-args-count","posh.reagent/q","posh.plugin-base/q","posh.reagent/q-info","posh.plugin-base/q-info","posh.reagent/q-tx","posh.plugin-base/q-tx","posh.reagent/filter-tx","posh.plugin-base/filter-tx","posh.reagent/filter-pull","posh.plugin-base/filter-pull","posh.reagent/filter-q","posh.plugin-base/filter-q","posh.reagent/transact!","posh.plugin-base/transact!"],"sourcesContent":["(ns posh.reagent\n  (:require #?(:clj  [posh.plugin-base :as base]\n               :cljs [posh.plugin-base :as base :include-macros true])\n            [datascript.core :as d]\n            [reagent.core :as r]\n            [reagent.ratom :as ra]))\n\n(def dcfg\n  (let [dcfg {:db            d/db\n              :pull*         d/pull\n              :pull-many     d/pull-many\n              :q             d/q\n              :filter        d/filter\n              :with          d/with\n              :entid         d/entid\n              :transact!     d/transact!\n              :listen!       d/listen!\n              :conn?         d/conn?\n              :ratom         #?(:clj  nil\n                                :cljs r/atom)\n              :make-reaction #?(:clj  nil\n                                :cljs ra/make-reaction)}]\n    (assoc dcfg :pull (partial base/safe-pull dcfg))))\n\n(base/add-plugin dcfg)\n"]}