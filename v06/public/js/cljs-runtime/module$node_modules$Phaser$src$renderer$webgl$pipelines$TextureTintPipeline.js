shadow$provide.module$node_modules$Phaser$src$renderer$webgl$pipelines$TextureTintPipeline=function(global,require,module,exports){global=require("module$node_modules$Phaser$src$utils$Class");var Earcut=require("module$node_modules$Phaser$src$geom$polygon$Earcut"),GetFastValue=require("module$node_modules$Phaser$src$utils$object$GetFastValue");exports=require("module$node_modules$Phaser$src$renderer$webgl$pipelines$components$ModelViewProjection");var ShaderSourceFS=require("module$node_modules$Phaser$src$renderer$webgl$shaders$TextureTint_frag"),
ShaderSourceVS=require("module$node_modules$Phaser$src$renderer$webgl$shaders$TextureTint_vert"),TransformMatrix=require("module$node_modules$Phaser$src$gameobjects$components$TransformMatrix"),Utils=require("module$node_modules$Phaser$src$renderer$webgl$Utils"),WebGLPipeline=require("module$node_modules$Phaser$src$renderer$webgl$WebGLPipeline");require=new global({Extends:WebGLPipeline,Mixins:[exports],initialize:function(config){var rendererConfig=config.renderer.config;WebGLPipeline.call(this,
{game:config.game,renderer:config.renderer,gl:config.renderer.gl,topology:GetFastValue(config,"topology",config.renderer.gl.TRIANGLES),vertShader:GetFastValue(config,"vertShader",ShaderSourceVS),fragShader:GetFastValue(config,"fragShader",ShaderSourceFS),vertexCapacity:GetFastValue(config,"vertexCapacity",6*rendererConfig.batchSize),vertexSize:GetFastValue(config,"vertexSize",5*Float32Array.BYTES_PER_ELEMENT+4*Uint8Array.BYTES_PER_ELEMENT),attributes:[{name:"inPosition",size:2,type:config.renderer.gl.FLOAT,
normalized:!1,offset:0},{name:"inTexCoord",size:2,type:config.renderer.gl.FLOAT,normalized:!1,offset:2*Float32Array.BYTES_PER_ELEMENT},{name:"inTintEffect",size:1,type:config.renderer.gl.FLOAT,normalized:!1,offset:4*Float32Array.BYTES_PER_ELEMENT},{name:"inTint",size:4,type:config.renderer.gl.UNSIGNED_BYTE,normalized:!0,offset:5*Float32Array.BYTES_PER_ELEMENT}]});this.vertexViewF32=new Float32Array(this.vertexData);this.vertexViewU32=new Uint32Array(this.vertexData);this.maxQuads=rendererConfig.batchSize;
this._tempMatrix1=new TransformMatrix;this._tempMatrix2=new TransformMatrix;this._tempMatrix3=new TransformMatrix;this._tempMatrix4=new TransformMatrix;this.tempTriangle=[{x:0,y:0,width:0},{x:0,y:0,width:0},{x:0,y:0,width:0},{x:0,y:0,width:0}];this.tintEffect=2;this.strokeTint={TL:0,TR:0,BL:0,BR:0};this.fillTint={TL:0,TR:0,BL:0,BR:0};this.currentFrame={u0:0,v0:0,u1:1,v1:1};this.firstQuad=[0,0,0,0,0];this.prevQuad=[0,0,0,0,0];this.polygonCache=[];this.mvpInit()},onBind:function(){WebGLPipeline.prototype.onBind.call(this);
this.mvpUpdate();return this},resize:function(width,height,resolution){WebGLPipeline.prototype.resize.call(this,width,height,resolution);this.projOrtho(0,this.width,this.height,0,-1E3,1E3);return this},setTexture2D:function(texture,unit){this.renderer.setTexture2D(texture,unit);return this},flush:function(){if(this.flushLocked)return this;this.flushLocked=!0;var gl=this.gl,vertexCount=this.vertexCount,topology=this.topology,vertexSize=this.vertexSize,renderer=this.renderer;if(0===vertexCount)this.flushLocked=
!1;else return renderer.setBlankTexture(),gl.bufferSubData(gl.ARRAY_BUFFER,0,this.bytes.subarray(0,vertexCount*vertexSize)),gl.drawArrays(topology,0,vertexCount),this.vertexCount=0,this.flushLocked=!1,this},batchSprite:function(sprite,camera,parentTransformMatrix){this.renderer.setPipeline(this);var camMatrix=this._tempMatrix1,spriteMatrix=this._tempMatrix2,calcMatrix=this._tempMatrix3,frame=sprite.frame,texture=frame.glTexture,u0=frame.u0,v0=frame.v0,u1=frame.u1,v1=frame.v1,frameX=frame.x,frameY=
frame.y,frameWidth=frame.cutWidth,frameHeight=frame.cutHeight,x=-sprite.displayOriginX+frameX;frameX=-sprite.displayOriginY+frameY;sprite.isCropped&&(x=sprite._crop,x.flipX===sprite.flipX&&x.flipY===sprite.flipY||frame.updateCropUVs(x,sprite.flipX,sprite.flipY),u0=x.u0,v0=x.v0,u1=x.u1,v1=x.v1,frameWidth=x.width,frameHeight=x.height,frameX=x.x,frameY=x.y,x=-sprite.displayOriginX+frameX,frameX=-sprite.displayOriginY+frameY);sprite.flipX&&(x+=frameWidth,frameWidth*=-1);sprite.flipY&&(frameX+=frameHeight,
frameHeight*=-1);frame=x+frameWidth;frameWidth=frameX+frameHeight;spriteMatrix.applyITRS(sprite.x,sprite.y,sprite.rotation,sprite.scaleX,sprite.scaleY);camMatrix.copyFrom(camera.matrix);parentTransformMatrix?(camMatrix.multiplyWithOffset(parentTransformMatrix,-camera.scrollX*sprite.scrollFactorX,-camera.scrollY*sprite.scrollFactorY),spriteMatrix.e=sprite.x,spriteMatrix.f=sprite.y):(spriteMatrix.e-=camera.scrollX*sprite.scrollFactorX,spriteMatrix.f-=camera.scrollY*sprite.scrollFactorY);camMatrix.multiply(spriteMatrix,
calcMatrix);parentTransformMatrix=calcMatrix.getX(x,frameX);camMatrix=calcMatrix.getY(x,frameX);spriteMatrix=calcMatrix.getX(x,frameWidth);x=calcMatrix.getY(x,frameWidth);frameHeight=calcMatrix.getX(frame,frameWidth);frameWidth=calcMatrix.getY(frame,frameWidth);frameY=calcMatrix.getX(frame,frameX);calcMatrix=calcMatrix.getY(frame,frameX);frameX=Utils.getTintAppendFloatAlpha(sprite._tintTL,camera.alpha*sprite._alphaTL);frame=Utils.getTintAppendFloatAlpha(sprite._tintTR,camera.alpha*sprite._alphaTR);
var tintBL=Utils.getTintAppendFloatAlpha(sprite._tintBL,camera.alpha*sprite._alphaBL),tintBR=Utils.getTintAppendFloatAlpha(sprite._tintBR,camera.alpha*sprite._alphaBR);camera.roundPixels&&(parentTransformMatrix|=0,camMatrix|=0,spriteMatrix|=0,x|=0,frameHeight|=0,frameWidth|=0,frameY|=0,calcMatrix|=0);this.setTexture2D(texture,0);this.batchQuad(parentTransformMatrix,camMatrix,spriteMatrix,x,frameHeight,frameWidth,frameY,calcMatrix,u0,v0,u1,v1,frameX,frame,tintBL,tintBR,sprite._isTinted&&sprite.tintFill)},
batchQuad:function(x0,y0,x1,y1,x2,y2,x3,y3,u0,v0,u1,v1,tintTL,tintTR,tintBL,tintBR,tintEffect){var hasFlushed=!1;this.vertexCount+6>this.vertexCapacity&&(this.flush(),hasFlushed=!0);var vertexViewF32=this.vertexViewF32,vertexViewU32=this.vertexViewU32,vertexOffset=this.vertexCount*this.vertexComponentCount-1;vertexViewF32[++vertexOffset]=x0;vertexViewF32[++vertexOffset]=y0;vertexViewF32[++vertexOffset]=u0;vertexViewF32[++vertexOffset]=v0;vertexViewF32[++vertexOffset]=tintEffect;vertexViewU32[++vertexOffset]=
tintTL;vertexViewF32[++vertexOffset]=x1;vertexViewF32[++vertexOffset]=y1;vertexViewF32[++vertexOffset]=u0;vertexViewF32[++vertexOffset]=v1;vertexViewF32[++vertexOffset]=tintEffect;vertexViewU32[++vertexOffset]=tintBL;vertexViewF32[++vertexOffset]=x2;vertexViewF32[++vertexOffset]=y2;vertexViewF32[++vertexOffset]=u1;vertexViewF32[++vertexOffset]=v1;vertexViewF32[++vertexOffset]=tintEffect;vertexViewU32[++vertexOffset]=tintBR;vertexViewF32[++vertexOffset]=x0;vertexViewF32[++vertexOffset]=y0;vertexViewF32[++vertexOffset]=
u0;vertexViewF32[++vertexOffset]=v0;vertexViewF32[++vertexOffset]=tintEffect;vertexViewU32[++vertexOffset]=tintTL;vertexViewF32[++vertexOffset]=x2;vertexViewF32[++vertexOffset]=y2;vertexViewF32[++vertexOffset]=u1;vertexViewF32[++vertexOffset]=v1;vertexViewF32[++vertexOffset]=tintEffect;vertexViewU32[++vertexOffset]=tintBR;vertexViewF32[++vertexOffset]=x3;vertexViewF32[++vertexOffset]=y3;vertexViewF32[++vertexOffset]=u1;vertexViewF32[++vertexOffset]=v0;vertexViewF32[++vertexOffset]=tintEffect;vertexViewU32[++vertexOffset]=
tintTR;this.vertexCount+=6;return hasFlushed},batchTri:function(x1,y1,x2,y2,x3,y3,u0,v0,u1,v1,tintTL,tintTR,tintBL,tintEffect){var hasFlushed=!1;this.vertexCount+3>this.vertexCapacity&&(this.flush(),hasFlushed=!0);var vertexViewF32=this.vertexViewF32,vertexViewU32=this.vertexViewU32,vertexOffset=this.vertexCount*this.vertexComponentCount-1;vertexViewF32[++vertexOffset]=x1;vertexViewF32[++vertexOffset]=y1;vertexViewF32[++vertexOffset]=u0;vertexViewF32[++vertexOffset]=v0;vertexViewF32[++vertexOffset]=
tintEffect;vertexViewU32[++vertexOffset]=tintTL;vertexViewF32[++vertexOffset]=x2;vertexViewF32[++vertexOffset]=y2;vertexViewF32[++vertexOffset]=u0;vertexViewF32[++vertexOffset]=v1;vertexViewF32[++vertexOffset]=tintEffect;vertexViewU32[++vertexOffset]=tintTR;vertexViewF32[++vertexOffset]=x3;vertexViewF32[++vertexOffset]=y3;vertexViewF32[++vertexOffset]=u1;vertexViewF32[++vertexOffset]=v1;vertexViewF32[++vertexOffset]=tintEffect;vertexViewU32[++vertexOffset]=tintBL;this.vertexCount+=3;return hasFlushed},
batchTexture:function(gameObject,texture,textureWidth,textureHeight,srcX,srcY,srcWidth,srcHeight,scaleX,scaleY,rotation,flipX,flipY,scrollFactorX,scrollFactorY,displayOriginX,displayOriginY,frameX,frameY,frameWidth,frameHeight,tintTL,tintTR,tintBL,tintBR,tintEffect,uOffset,vOffset,camera,parentTransformMatrix,skipFlip){this.renderer.setPipeline(this,gameObject);var camMatrix=this._tempMatrix1,spriteMatrix=this._tempMatrix2,calcMatrix=this._tempMatrix3,u0=frameX/textureWidth+uOffset,v0=frameY/textureHeight+
vOffset,u1=(frameX+frameWidth)/textureWidth+uOffset,v1=(frameY+frameHeight)/textureHeight+vOffset,width=srcWidth,height=srcHeight;frameX=-displayOriginX;frameY=-displayOriginY;gameObject.isCropped&&(v1=gameObject._crop,width=v1.width,height=v1.height,srcWidth=v1.width,srcHeight=v1.height,frameX=v1.x,frameY=v1.y,u1=frameX,gameObject=frameY,flipX&&(u1=frameWidth-v1.x-v1.width),flipY&&!texture.isRenderTexture&&(gameObject=frameHeight-v1.y-v1.height),u0=u1/textureWidth+uOffset,v0=gameObject/textureHeight+
vOffset,u1=(u1+v1.width)/textureWidth+uOffset,v1=(gameObject+v1.height)/textureHeight+vOffset,frameX=-displayOriginX+frameX,frameY=-displayOriginY+frameY);flipY^=!skipFlip&&texture.isRenderTexture?1:0;flipX&&(width*=-1,frameX+=srcWidth);flipY&&(height*=-1,frameY+=srcHeight);textureWidth=frameX+width;height=frameY+height;spriteMatrix.applyITRS(srcX,srcY,rotation,scaleX,scaleY);camMatrix.copyFrom(camera.matrix);parentTransformMatrix?(camMatrix.multiplyWithOffset(parentTransformMatrix,-camera.scrollX*
scrollFactorX,-camera.scrollY*scrollFactorY),spriteMatrix.e=srcX,spriteMatrix.f=srcY):(spriteMatrix.e-=camera.scrollX*scrollFactorX,spriteMatrix.f-=camera.scrollY*scrollFactorY);camMatrix.multiply(spriteMatrix,calcMatrix);srcX=calcMatrix.getX(frameX,frameY);srcY=calcMatrix.getY(frameX,frameY);scaleX=calcMatrix.getX(frameX,height);scaleY=calcMatrix.getY(frameX,height);rotation=calcMatrix.getX(textureWidth,height);scrollFactorX=calcMatrix.getY(textureWidth,height);scrollFactorY=calcMatrix.getX(textureWidth,
frameY);calcMatrix=calcMatrix.getY(textureWidth,frameY);camera.roundPixels&&(srcX|=0,srcY|=0,scaleX|=0,scaleY|=0,rotation|=0,scrollFactorX|=0,scrollFactorY|=0,calcMatrix|=0);this.setTexture2D(texture,0);this.batchQuad(srcX,srcY,scaleX,scaleY,rotation,scrollFactorX,scrollFactorY,calcMatrix,u0,v0,u1,v1,tintTL,tintTR,tintBL,tintBR,tintEffect)},batchTextureFrame:function(frame,x,y,tint,alpha,transformMatrix,parentTransformMatrix){this.renderer.setPipeline(this);var spriteMatrix=this._tempMatrix1.copyFrom(transformMatrix);
transformMatrix=this._tempMatrix2;var xw=x+frame.width,yh=y+frame.height;parentTransformMatrix?spriteMatrix.multiply(parentTransformMatrix,transformMatrix):transformMatrix=spriteMatrix;parentTransformMatrix=transformMatrix.getX(x,y);spriteMatrix=transformMatrix.getY(x,y);var tx1=transformMatrix.getX(x,yh);x=transformMatrix.getY(x,yh);var tx2=transformMatrix.getX(xw,yh);yh=transformMatrix.getY(xw,yh);var tx3=transformMatrix.getX(xw,y);y=transformMatrix.getY(xw,y);this.setTexture2D(frame.glTexture,
0);tint=Utils.getTintAppendFloatAlpha(tint,alpha);this.batchQuad(parentTransformMatrix,spriteMatrix,tx1,x,tx2,yh,tx3,y,frame.u0,frame.v0,frame.u1,frame.v1,tint,tint,tint,tint,0)},drawFillRect:function(x,y,width,height,color,alpha){width=x+width;height=y+height;color=Utils.getTintAppendFloatAlphaAndSwap(color,alpha);this.batchQuad(x,y,x,height,width,height,width,y,0,0,1,1,color,color,color,color,2)},batchFillRect:function(x,y,width,height,currentMatrix,parentMatrix){this.renderer.setPipeline(this);
var calcMatrix=this._tempMatrix3;parentMatrix&&parentMatrix.multiply(currentMatrix,calcMatrix);parentMatrix=x+width;var yh=y+height;height=calcMatrix.getX(x,y);width=calcMatrix.getY(x,y);currentMatrix=calcMatrix.getX(x,yh);x=calcMatrix.getY(x,yh);var x2=calcMatrix.getX(parentMatrix,yh);yh=calcMatrix.getY(parentMatrix,yh);var x3=calcMatrix.getX(parentMatrix,y);y=calcMatrix.getY(parentMatrix,y);calcMatrix=this.currentFrame;this.batchQuad(height,width,currentMatrix,x,x2,yh,x3,y,calcMatrix.u0,calcMatrix.v0,
calcMatrix.u1,calcMatrix.v1,this.fillTint.TL,this.fillTint.TR,this.fillTint.BL,this.fillTint.BR,this.tintEffect)},batchFillTriangle:function(x0,y0,x1,y1,x2,y2,currentMatrix,parentMatrix){this.renderer.setPipeline(this);var calcMatrix=this._tempMatrix3;parentMatrix&&parentMatrix.multiply(currentMatrix,calcMatrix);currentMatrix=calcMatrix.getX(x0,y0);x0=calcMatrix.getY(x0,y0);y0=calcMatrix.getX(x1,y1);x1=calcMatrix.getY(x1,y1);y1=calcMatrix.getX(x2,y2);x2=calcMatrix.getY(x2,y2);y2=this.currentFrame;
this.batchTri(currentMatrix,x0,y0,x1,y1,x2,y2.u0,y2.v0,y2.u1,y2.v1,this.fillTint.TL,this.fillTint.TR,this.fillTint.BL,this.tintEffect)},batchStrokeTriangle:function(x0,y0,x1,y1,x2,y2,lineWidth,currentMatrix,parentMatrix){var tempTriangle=this.tempTriangle;tempTriangle[0].x=x0;tempTriangle[0].y=y0;tempTriangle[0].width=lineWidth;tempTriangle[1].x=x1;tempTriangle[1].y=y1;tempTriangle[1].width=lineWidth;tempTriangle[2].x=x2;tempTriangle[2].y=y2;tempTriangle[2].width=lineWidth;tempTriangle[3].x=x0;tempTriangle[3].y=
y0;tempTriangle[3].width=lineWidth;this.batchStrokePath(tempTriangle,lineWidth,!1,currentMatrix,parentMatrix)},batchFillPath:function(path,currentMatrix,parentMatrix){this.renderer.setPipeline(this);var calcMatrix=this._tempMatrix3;parentMatrix&&parentMatrix.multiply(currentMatrix,calcMatrix);currentMatrix=path.length;parentMatrix=this.polygonCache;for(var point,tintTL=this.fillTint.TL,tintTR=this.fillTint.TR,tintBL=this.fillTint.BL,tintEffect=this.tintEffect,pathIndex=0;pathIndex<currentMatrix;++pathIndex)point=
path[pathIndex],parentMatrix.push(point.x,point.y);path=Earcut(parentMatrix);currentMatrix=path.length;point=this.currentFrame;for(pathIndex=0;pathIndex<currentMatrix;pathIndex+=3){var p0=2*path[pathIndex+0],p1=2*path[pathIndex+1],p2=2*path[pathIndex+2],x0=parentMatrix[p0+0],y0=parentMatrix[p0+1];p0=parentMatrix[p1+0];var y1=parentMatrix[p1+1];p1=parentMatrix[p2+0];var y2=parentMatrix[p2+1];p2=calcMatrix.getX(x0,y0);x0=calcMatrix.getY(x0,y0);y0=calcMatrix.getX(p0,y1);p0=calcMatrix.getY(p0,y1);y1=
calcMatrix.getX(p1,y2);p1=calcMatrix.getY(p1,y2);this.batchTri(p2,x0,y0,p0,y1,p1,point.u0,point.v0,point.u1,point.v1,tintTL,tintTR,tintBL,tintEffect)}parentMatrix.length=0},batchStrokePath:function(path,lineWidth,pathOpen,currentMatrix,parentMatrix){this.renderer.setPipeline(this);this.prevQuad[4]=0;this.firstQuad[4]=0;for(var pathLength=path.length-1,pathIndex=0;pathIndex<pathLength;pathIndex++){var point0=path[pathIndex],point1=path[pathIndex+1];this.batchLine(point0.x,point0.y,point1.x,point1.y,
point0.width/2,point1.width/2,lineWidth,pathIndex,!pathOpen&&pathIndex===pathLength-1,currentMatrix,parentMatrix)}},batchLine:function(ax,ay,bx,by,aLineWidth,bLineWidth,lineWidth,index,closePath,currentMatrix,parentMatrix){this.renderer.setPipeline(this);var calcMatrix=this._tempMatrix3;parentMatrix&&parentMatrix.multiply(currentMatrix,calcMatrix);currentMatrix=bx-ax;parentMatrix=by-ay;var len=Math.sqrt(currentMatrix*currentMatrix+parentMatrix*parentMatrix);parentMatrix=aLineWidth*(by-ay)/len;var al1=
aLineWidth*(ax-bx)/len;currentMatrix=bLineWidth*(by-ay)/len;var bl1=bLineWidth*(ax-bx)/len;len=bx-currentMatrix;var ly0=by-bl1;bLineWidth=ax-parentMatrix;aLineWidth=ay-al1;currentMatrix=bx+currentMatrix;bl1=by+bl1;parentMatrix=ax+parentMatrix;al1=ay+al1;ay=calcMatrix.getX(len,ly0);ax=calcMatrix.getY(len,ly0);by=calcMatrix.getX(bLineWidth,aLineWidth);bx=calcMatrix.getY(bLineWidth,aLineWidth);bLineWidth=calcMatrix.getX(currentMatrix,bl1);aLineWidth=calcMatrix.getY(currentMatrix,bl1);currentMatrix=calcMatrix.getX(parentMatrix,
al1);calcMatrix=calcMatrix.getY(parentMatrix,al1);bl1=this.strokeTint;parentMatrix=this.tintEffect;al1=bl1.TL;len=bl1.TR;ly0=bl1.BL;bl1=bl1.BR;var frame=this.currentFrame,u0=frame.u0,v0=frame.v0,u1=frame.u1;frame=frame.v1;this.batchQuad(currentMatrix,calcMatrix,by,bx,ay,ax,bLineWidth,aLineWidth,u0,v0,u1,frame,al1,len,ly0,bl1,parentMatrix);if(!(2>=lineWidth)){lineWidth=this.prevQuad;var first=this.firstQuad;0<index&&lineWidth[4]?this.batchQuad(currentMatrix,calcMatrix,by,bx,lineWidth[0],lineWidth[1],
lineWidth[2],lineWidth[3],u0,v0,u1,frame,al1,len,ly0,bl1,parentMatrix):(first[0]=currentMatrix,first[1]=calcMatrix,first[2]=by,first[3]=bx,first[4]=1);closePath&&first[4]?this.batchQuad(ay,ax,bLineWidth,aLineWidth,first[0],first[1],first[2],first[3],u0,v0,u1,frame,al1,len,ly0,bl1,parentMatrix):(lineWidth[0]=ay,lineWidth[1]=ax,lineWidth[2]=bLineWidth,lineWidth[3]=aLineWidth,lineWidth[4]=1)}}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$renderer$webgl$pipelines$TextureTintPipeline.js.map
