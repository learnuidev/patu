{"version":3,"sources":["posh/lib/pull_analyze.cljc"],"mappings":"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","names":["posh.lib.pull-analyze/reverse-lookup?","attr","cljs.core._EQ_","cljs.core/first","cljs.core/name","posh.lib.pull-analyze/reverse-lookup","cljs.core.keyword","cljs.core/namespace","cljs.core.reduce","cljs.core/str","cljs.core/rest","posh.lib.pull-analyze/dbid-into-vec","v","cljs.core/not","cljs.core/some","cljs.core/cons","posh.lib.pull-analyze/insert-dbid","pull-pattern","cljs.core/map?","cljs.core/zipmap","cljs.core/keys","cljs.core.map","cljs.core/vals","cljs.core/vector?","p1__47000#","cljs.core/coll?","cljs.core/vec","posh.lib.pull-analyze/pull-affected-datoms","pull-fn","db","eid","G__47001","G__47002","G__47003","posh.lib.pull-analyze/pull-ref-one?","posh.lib.pull-analyze/pull-ref-many?","posh.lib.pull-analyze/ref?","schema","cljs.core.get","posh.lib.pull-analyze/cardinality-one?","temp__5735__auto__","e","posh.lib.pull-analyze/cardinality-many?","posh.lib.pull-analyze/tx-datoms-for-pull-map","entity-id","pull-map","cljs.core/empty?","vec__47011","cljs.core.nth","k","r?","G__47015","G__47016","G__47017","cljs.core.concat","G__47021","G__47022","G__47023","or__4126__auto__","p1__47006#","cljs.core.mapcat","cljs.core/PersistentVector","p1__47007#","G__47027","G__47028","G__47029","cljs.core.merge","G__47033","G__47034","G__47035","p1__47008#","G__47036","G__47037","G__47038","posh.lib.pull-analyze/generate-affected-tx-datoms-for-pull","affected-pull","posh.lib.pull-analyze/limit-spec?","x","cljs.core/seq?","G__47047","fexpr__47046","posh.lib.pull-analyze/limit-attr","limit-spec","cljs.core/second","posh.lib.pull-analyze/remove-limits","cljs.core.partial","clojure.walk/postwalk","posh.lib.pull-analyze/recursive-val?","posh.lib.pull-analyze/tx-pattern-for-pull","refs-only?","entity-keys","p1__47051#","cljs.core.remove","val-keys","p1__47052#","ref-keys","cljs.core/set","starred?","pull-maps","cljs.core/merge","cljs.core.filter","p__47057","vec__47058","ref-key","ref-pull","unrev-key","p1__47054#","p1__47055#","G__47061","G__47062","G__47063","p__47064","map__47065","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","posh.lib.pull-analyze/pull-analyze","dcfg","retrieve","db-id","ent-id","and__4115__auto__","cljs.core/seq","affected-datoms","fexpr__47067","datoms","posh.lib.util/t-for-datoms","prepped-pull-pattern","posh.lib.datom-matcher/reduce-patterns","p__47071","map__47072","posh.lib.pull-analyze/pull-many-analyze","ent-ids","resolved-ent-ids","p1__47068#","fexpr__47074","p1__47069#","patterns","p1__47070#","cljs.core/ffirst","cljs.core/concat"],"sourcesContent":["(ns posh.lib.pull-analyze\n  (:require [posh.lib.util :as util]\n            [posh.lib.datom-matcher :as dm]))\n\n(defn reverse-lookup? [attr]\n  (= (first (name attr)) '\\_))\n\n(defn reverse-lookup [attr]\n  (when (= (first (name attr)) '\\_)\n    (keyword (str (namespace attr) \"/\" (reduce str (rest (name attr)))))))\n\n(defn dbid-into-vec [v]\n  (if (not (some #{'* :db/id} v))\n    (cons :db/id v)\n    v))\n\n(defn insert-dbid [pull-pattern]\n  (cond\n   (map? pull-pattern) (zipmap (keys pull-pattern)\n                               (map insert-dbid (vals pull-pattern)))\n\n   (vector? pull-pattern)\n   (->> (dbid-into-vec pull-pattern)\n        (map #(if (coll? %) (insert-dbid %) %))\n        vec)\n\n   :else pull-pattern))\n\n(defn pull-affected-datoms [pull-fn db pull-pattern eid]\n  (pull-fn db (insert-dbid pull-pattern) eid))\n\n(defn pull-ref-one? [v]\n  (and (map? v) (:db/id v)))\n\n(defn pull-ref-many? [v]\n  (and (vector? v) (pull-ref-one? (first v))))\n\n(defn ref? [schema attr]\n  (= (get (get schema attr) :db/valueType)\n     :db.type/ref))\n\n(defn cardinality-one? [schema attr]\n  (when-let [e (get schema attr)]\n    (not (= (:db/cardinality e) :db.cardinality/many))))\n\n(defn cardinality-many? [schema attr]\n  (when-let [e (get schema attr)]\n    (= (:db/cardinality e) :db.cardinality/many)))\n\n(defn tx-datoms-for-pull-map [schema entity-id pull-map]\n  (if (empty? pull-map)\n    []\n    (let [[k v] (first pull-map)\n          r?    (reverse-lookup? k)\n          k     (if r? (reverse-lookup k) k)]\n      (cond\n       (= k :db/id)\n       (tx-datoms-for-pull-map schema entity-id (rest pull-map))\n\n       (ref? schema k)\n       (concat\n        (cond\n         (and (not r?) (cardinality-one? schema k))\n         (concat\n          [[entity-id k (:db/id v)]]\n          (tx-datoms-for-pull-map schema (:db/id v) v))\n\n         (or r? (cardinality-many? schema k))\n         (concat\n          (when (not r?)\n            (mapcat #(vector [entity-id k (:db/id %)]) v))\n          (mapcat #(tx-datoms-for-pull-map\n                    schema\n                    (:db/id %)\n                    (merge (when r? {k {:db/id entity-id}}) %))\n                  v))\n\n         :else [[entity-id k v]])\n        (tx-datoms-for-pull-map schema entity-id (rest pull-map)))\n\n       :else\n       (concat\n        (if (cardinality-many? schema k)\n          (mapcat #(vector [entity-id k %]) v)\n          [[entity-id k v]])\n        (tx-datoms-for-pull-map schema entity-id (rest pull-map)))))))\n\n(defn generate-affected-tx-datoms-for-pull [schema affected-pull]\n  (tx-datoms-for-pull-map schema (:db/id affected-pull) affected-pull))\n\n\n;;;;; pull pattern generator ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(comment\n  ;; perhaps will use later to reduce the pull pattern verbosity\n  (defn count-avs [patterns]\n    (if (empty? patterns)\n      {}\n      (merge-with + {(let [[e a v] (first patterns)] [a v]) 1}\n                  (count-avs (rest patterns)))))\n\n  (defn count-eas [patterns]\n    (if (empty? patterns)\n      {}\n      (merge-with + {(let [[e a] (first patterns)] [e a]) 1}\n                  (count-eas (rest patterns)))))\n\n  (defn reducible-patterns [pattern-counts]\n    (remove nil? (map (fn [[k v]] (when (> v 1) v) k) pattern-counts)))\n\n  (defn combine-ents [patterns])\n\n  (defn combine-patterns [patterns]\n    (let [avs (reducible-patterns (count-avs patterns))\n          eas (reducible-patterns (count-eas patterns))])))\n\n\n(defn limit-spec? [x]\n  (and (seq? x) (#{'limit \"limit\"} (first x))))\n\n(defn limit-attr [limit-spec]\n  (second limit-spec))\n\n(def remove-limits\n  (partial\n   clojure.walk/postwalk (fn [x] (if (limit-spec? x) (limit-attr x) x))))\n\n(defn recursive-val? [v]\n  (or (number? v) (= v '...)))\n\n(defn tx-pattern-for-pull [schema pull-pattern affected-pull refs-only?]\n  (let [entity-keys (remove #(or (map? %) (= :db/id %)) pull-pattern)\n        val-keys    (remove #(or (reverse-lookup? %) (ref? schema %)) entity-keys)\n        ref-keys    (->> entity-keys\n                         (remove (set val-keys))\n                         (map (fn [k] {k [:db/id]})))\n        starred?    (some #{'*} val-keys)\n        pull-maps   (reduce merge (concat ref-keys (filter map? pull-pattern)))]\n    (when (:db/id affected-pull)\n      (concat\n       (when (not (or refs-only? (empty? val-keys)))\n         [[(:db/id affected-pull) (if starred? '_ (set val-keys)) '_]])\n       (mapcat (fn [[ref-key ref-pull]]\n                 (let [r? (reverse-lookup? ref-key)\n                       unrev-key (if r? (reverse-lookup ref-key) ref-key)]\n                   (concat\n                    (if r?\n                      [['_ unrev-key (:db/id affected-pull)]]\n                      [[(:db/id affected-pull) ref-key '_]])\n                    (cond\n                     (recursive-val? ref-pull)\n                     (when (ref-key affected-pull)\n                       (mapcat #(tx-pattern-for-pull schema pull-pattern % refs-only?)\n                               (ref-key affected-pull)))\n\n                     (or r? (cardinality-many? schema unrev-key))\n                     (mapcat #(tx-pattern-for-pull schema ref-pull % refs-only?)\n                             (ref-key affected-pull))\n                     :else\n                     (tx-pattern-for-pull schema ref-pull (ref-key affected-pull refs-only?))))))\n               pull-maps)))))\n\n\n;; retrieve :datoms, :patterns, or :results\n;; db should be {:db db :schema schema :db-id db-id}\n(defn pull-analyze [dcfg retrieve {:keys [db db-id schema]} pull-pattern ent-id]\n  (when (and ent-id (seq retrieve))\n    (let [affected-datoms\n          (pull-affected-datoms (:pull dcfg) db pull-pattern ((:entid dcfg) db ent-id))]\n      (merge\n       (when (some #{:results} retrieve)\n         {:results affected-datoms})\n       (when (some #{:datoms :datoms-t} retrieve)\n         (let [datoms (generate-affected-tx-datoms-for-pull schema affected-datoms)]\n           (merge\n            (when (some #{:datoms} retrieve)\n              {:datoms {db-id datoms}})\n            (when (some #{:datoms-t} retrieve)\n              {:datoms-t {db-id (util/t-for-datoms (:q dcfg) db datoms)}}))))\n       (when (some #{:patterns :ref-patterns} retrieve)\n         (let [prepped-pull-pattern (insert-dbid (remove-limits pull-pattern))]\n           (merge\n            (when (some #{:patterns} retrieve)\n              {:patterns\n               {db-id\n                (dm/reduce-patterns\n                 (concat\n                  (when (vector? ent-id)\n                    [['_ (first ent-id) (second ent-id)]])\n                  (tx-pattern-for-pull\n                   schema\n                   prepped-pull-pattern\n                   affected-datoms\n                   false)))}})\n            (when (some #{:ref-patterns} retrieve)\n              {:ref-patterns\n               {db-id\n                (dm/reduce-patterns\n                 (tx-pattern-for-pull\n                  schema\n                  prepped-pull-pattern\n                  affected-datoms\n                  true))}}))))))))\n\n(defn pull-many-analyze [dcfg retrieve {:keys [db schema db-id]} pull-pattern ent-ids]\n  (when-not (empty? retrieve)\n    (let [resolved-ent-ids (map #((:entid dcfg) db %) ent-ids)\n          affected-datoms (pull-affected-datoms (:pull-many dcfg) db pull-pattern ent-ids)]\n      (merge\n       (when (some #{:results} retrieve)\n         {:results affected-datoms})\n       (when (some #{:datoms :datoms-t} retrieve)\n         (let [datoms (mapcat #(generate-affected-tx-datoms-for-pull schema %)\n                              affected-datoms)]\n           (merge\n            (when (some #{:datoms} retrieve)\n              {:datoms {db-id datoms}})\n            (when (some #{:datoms-t} retrieve)\n              {:datoms-t {db-id (util/t-for-datoms (:q dcfg) db datoms)}}))))\n       (when (some #{:patterns} retrieve)\n         {:patterns\n          {db-id\n           (let [patterns\n                 (map\n                  #(tx-pattern-for-pull\n                    schema\n                    (insert-dbid (remove-limits pull-pattern)) %\n                    false)\n                  affected-datoms)]\n             (cons\n              (vec (cons (set resolved-ent-ids) (rest (ffirst patterns))))\n              (mapcat rest patterns))\n             (dm/reduce-patterns (apply concat patterns)))}})))))\n"]}