{
"version":3,
"file":"module$node_modules$Phaser$src$loader$XHRSettings.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwE9GD,MAAAC,QAAA,CArCkBC,QAAS,CAACC,YAAD,CAAeC,KAAf,CAAsBC,IAAtB,CAA4BC,QAA5B,CAAsCC,OAAtC,CAC3B,CACyBC,IAAAA,EAArB,GAAIL,YAAJ,GAAkCA,YAAlC,CAAiD,EAAjD,CACcK,KAAAA,EAAd,GAAIJ,KAAJ,GAA2BA,KAA3B,CAAmC,CAAA,CAAnC,CACaI,KAAAA,EAAb,GAAIH,IAAJ,GAA0BA,IAA1B,CAAiC,EAAjC,CACiBG,KAAAA,EAAjB,GAAIF,QAAJ,GAA8BA,QAA9B,CAAyC,EAAzC,CACgBE,KAAAA,EAAhB,GAAID,OAAJ,GAA6BA,OAA7B,CAAuC,CAAvC,CAMA,OAAO,CAGHJ,aAAcA,YAHX,CAKHC,MAAOA,KALJ,CAQHC,KAAMA,IARH,CASHC,SAAUA,QATP,CAYHC,QAASA,OAZN,CAeHE,OAAQD,IAAAA,EAfL,CAgBHE,YAAaF,IAAAA,EAhBV,CAiBHG,cAAe,CAAA,CAjBZ,CAoBHC,iBAAkBJ,IAAAA,EApBf,CAXX,CApC8G;",
"sources":["node_modules/Phaser/src/loader/XHRSettings.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$XHRSettings\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * @typedef {object} XHRSettingsObject\r\n *\r\n * @property {XMLHttpRequestResponseType} responseType - The response type of the XHR request, i.e. `blob`, `text`, etc.\r\n * @property {boolean} [async=true] - Should the XHR request use async or not?\r\n * @property {string} [user=''] - Optional username for the XHR request.\r\n * @property {string} [password=''] - Optional password for the XHR request.\r\n * @property {integer} [timeout=0] - Optional XHR timeout value.\r\n * @property {(string|undefined)} [header] - This value is used to populate the XHR `setRequestHeader` and is undefined by default.\r\n * @property {(string|undefined)} [headerValue] - This value is used to populate the XHR `setRequestHeader` and is undefined by default.\r\n * @property {(string|undefined)} [requestedWith] - This value is used to populate the XHR `setRequestHeader` and is undefined by default.\r\n * @property {(string|undefined)} [overrideMimeType] - Provide a custom mime-type to use instead of the default.\r\n */\r\n\r\n/**\r\n * Creates an XHRSettings Object with default values.\r\n *\r\n * @function Phaser.Loader.XHRSettings\r\n * @since 3.0.0\r\n *\r\n * @param {XMLHttpRequestResponseType} [responseType=''] - The responseType, such as 'text'.\r\n * @param {boolean} [async=true] - Should the XHR request use async or not?\r\n * @param {string} [user=''] - Optional username for the XHR request.\r\n * @param {string} [password=''] - Optional password for the XHR request.\r\n * @param {integer} [timeout=0] - Optional XHR timeout value.\r\n *\r\n * @return {XHRSettingsObject} The XHRSettings object as used by the Loader.\r\n */\r\nvar XHRSettings = function (responseType, async, user, password, timeout)\r\n{\r\n    if (responseType === undefined) { responseType = ''; }\r\n    if (async === undefined) { async = true; }\r\n    if (user === undefined) { user = ''; }\r\n    if (password === undefined) { password = ''; }\r\n    if (timeout === undefined) { timeout = 0; }\r\n\r\n    // Before sending a request, set the xhr.responseType to \"text\",\r\n    // \"arraybuffer\", \"blob\", or \"document\", depending on your data needs.\r\n    // Note, setting xhr.responseType = '' (or omitting) will default the response to \"text\".\r\n\r\n    return {\r\n\r\n        //  Ignored by the Loader, only used by File.\r\n        responseType: responseType,\r\n\r\n        async: async,\r\n\r\n        //  credentials\r\n        user: user,\r\n        password: password,\r\n\r\n        //  timeout in ms (0 = no timeout)\r\n        timeout: timeout,\r\n\r\n        //  setRequestHeader\r\n        header: undefined,\r\n        headerValue: undefined,\r\n        requestedWith: false,\r\n\r\n        //  overrideMimeType\r\n        overrideMimeType: undefined\r\n\r\n    };\r\n};\r\n\r\nmodule.exports = XHRSettings;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","XHRSettings","responseType","async","user","password","timeout","undefined","header","headerValue","requestedWith","overrideMimeType"]
}
