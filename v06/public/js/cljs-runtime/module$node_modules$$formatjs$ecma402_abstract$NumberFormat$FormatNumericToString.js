shadow$provide.module$node_modules$$formatjs$ecma402_abstract$NumberFormat$FormatNumericToString=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.FormatNumericToString=void 0;var _262_1=require("module$node_modules$$formatjs$ecma402_abstract$262"),ToRawPrecision_1=require("module$node_modules$$formatjs$ecma402_abstract$NumberFormat$ToRawPrecision"),utils_1=require("module$node_modules$$formatjs$ecma402_abstract$utils"),ToRawFixed_1=require("module$node_modules$$formatjs$ecma402_abstract$NumberFormat$ToRawFixed");
exports.FormatNumericToString=function(intlObject,x){var isNegative=0>x||_262_1.SameValue(x,-0);isNegative&&(x=-x);switch(intlObject.roundingType){case "significantDigits":var result=ToRawPrecision_1.ToRawPrecision(x,intlObject.minimumSignificantDigits,intlObject.maximumSignificantDigits);break;case "fractionDigits":result=ToRawFixed_1.ToRawFixed(x,intlObject.minimumFractionDigits,intlObject.maximumFractionDigits);break;default:result=ToRawPrecision_1.ToRawPrecision(x,1,2),1<result.integerDigitsCount&&
(result=ToRawFixed_1.ToRawFixed(x,0,0))}x=result.roundedNumber;var string=result.formattedString;result=result.integerDigitsCount;intlObject=intlObject.minimumIntegerDigits;result<intlObject&&(string=utils_1.repeat("0",intlObject-result)+string);isNegative&&(x=-x);return{roundedNumber:x,formattedString:string}}}
//# sourceMappingURL=module$node_modules$$formatjs$ecma402_abstract$NumberFormat$FormatNumericToString.js.map
