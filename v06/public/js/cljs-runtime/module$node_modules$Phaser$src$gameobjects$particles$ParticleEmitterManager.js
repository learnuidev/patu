shadow$provide.module$node_modules$Phaser$src$gameobjects$particles$ParticleEmitterManager=function(global,require,module,exports){global=require("module$node_modules$Phaser$src$utils$Class");exports=require("module$node_modules$Phaser$src$gameobjects$components$index");var GameObject=require("module$node_modules$Phaser$src$gameobjects$GameObject"),GravityWell=require("module$node_modules$Phaser$src$gameobjects$particles$GravityWell"),List=require("module$node_modules$Phaser$src$structs$List"),ParticleEmitter=
require("module$node_modules$Phaser$src$gameobjects$particles$ParticleEmitter");require=require("module$node_modules$Phaser$src$gameobjects$particles$ParticleManagerRender");require=new global({Extends:GameObject,Mixins:[exports.Depth,exports.Pipeline,exports.Transform,exports.Visible,require],initialize:function(scene,texture,frame,emitters){GameObject.call(this,scene,"ParticleEmitterManager");this.blendMode=-1;this.timeScale=1;this.frame=this.texture=null;this.frameNames=[];null===frame||"object"!==
typeof frame&&!Array.isArray(frame)||(emitters=frame,frame=null);this.setTexture(texture,frame);this.initPipeline();this.emitters=new List(this);this.wells=new List(this);if(emitters)for(Array.isArray(emitters)||(emitters=[emitters]),scene=0;scene<emitters.length;scene++)this.createEmitter(emitters[scene])},setTexture:function(key,frame){this.texture=this.scene.sys.textures.get(key);return this.setFrame(frame)},setFrame:function(frame){this.frame=this.texture.get(frame);var names=[];this.texture.getFramesFromTextureSource(this.frame.sourceIndex).forEach(function(sourceFrame){names.push(sourceFrame.name)});
this.frameNames=names;this.defaultFrame=this.frame;return this},setEmitterFrames:function(frames,emitter){Array.isArray(frames)||(frames=[frames]);for(var out=emitter.frames,i=out.length=0;i<frames.length;i++){var frame=frames[i];-1!==this.frameNames.indexOf(frame)&&out.push(this.texture.get(frame))}emitter.defaultFrame=0<out.length?out[0]:this.defaultFrame;return this},addEmitter:function(emitter){return this.emitters.add(emitter)},createEmitter:function(config){return this.addEmitter(new ParticleEmitter(this,
config))},addGravityWell:function(well){return this.wells.add(well)},createGravityWell:function(config){return this.addGravityWell(new GravityWell(config))},emitParticle:function(count,x,y){for(var emitters=this.emitters.list,i=0;i<emitters.length;i++){var emitter=emitters[i];emitter.active&&emitter.emitParticle(count,x,y)}return this},emitParticleAt:function(x,y,count){return this.emitParticle(count,x,y)},pause:function(){this.active=!1;return this},resume:function(){this.active=!0;return this},
getProcessors:function(){return this.wells.getAll("active",!0)},preUpdate:function(time,delta){delta*=this.timeScale;for(var emitters=this.emitters.list,i=0;i<emitters.length;i++){var emitter=emitters[i];emitter.active&&emitter.preUpdate(time,delta)}},setAlpha:function(){},setScrollFactor:function(){}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$gameobjects$particles$ParticleEmitterManager.js.map
