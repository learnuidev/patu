{
"version":3,
"file":"module$node_modules$Phaser$src$utils$string$UUID.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,iDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6B7GD,MAAAC,QAAA,CAXWC,QAAS,EACpB,CACI,MAAO,sCAAAC,QAAA,CAA+C,OAA/C,CAAwD,QAAS,CAACC,CAAD,CACxE,CACI,IAAIC,EAAoB,EAApBA,CAAIC,IAAAC,OAAA,EAAJF,CAAyB,CAG7B,OAAOG,CAFQ,GAAPC,GAACL,CAADK,CAAcJ,CAAdI,CAAmBJ,CAAnBI,CAAuB,CAAvBA,CAA6B,CAE9BD,UAAA,CAAW,EAAX,CAJX,CADO,CADX,CAnB6G;",
"sources":["node_modules/Phaser/src/utils/string/UUID.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$string$UUID\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Creates and returns an RFC4122 version 4 compliant UUID.\r\n * \r\n * The string is in the form: `xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx` where each `x` is replaced with a random\r\n * hexadecimal digit from 0 to f, and `y` is replaced with a random hexadecimal digit from 8 to b.\r\n *\r\n * @function Phaser.Utils.String.UUID\r\n * @since 3.12.0\r\n *\r\n * @return {string} The UUID string.\r\n */\r\nvar UUID = function ()\r\n{\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c)\r\n    {\r\n        var r = Math.random() * 16 | 0;\r\n        var v = (c === 'x') ? r : (r & 0x3 | 0x8);\r\n\r\n        return v.toString(16);\r\n    });\r\n};\r\n\r\nmodule.exports = UUID;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","UUID","replace","c","r","Math","random","toString","v"]
}
