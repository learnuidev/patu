shadow$provide.module$node_modules$Phaser$src$physics$impact$Body=function(global,require,module,exports){global=require("module$node_modules$Phaser$src$utils$Class");var COLLIDES=require("module$node_modules$Phaser$src$physics$impact$COLLIDES"),GetVelocity=require("module$node_modules$Phaser$src$physics$impact$GetVelocity"),TYPE=require("module$node_modules$Phaser$src$physics$impact$TYPE"),UpdateMotion=require("module$node_modules$Phaser$src$physics$impact$UpdateMotion");require=new global({initialize:function(world,
x,y,sx,sy){void 0===sx&&(sx=16);void 0===sy&&(sy=sx);this.world=world;this.gameObject=null;this.enabled=!0;this.id=world.getNextID();this.name="";this.size={x:sx,y:sy};this.offset={x:0,y:0};this.pos={x:x,y:y};this.last={x:x,y:y};this.vel={x:0,y:0};this.accel={x:0,y:0};this.friction={x:0,y:0};this.maxVel={x:world.defaults.maxVelocityX,y:world.defaults.maxVelocityY};this.standing=!1;this.gravityFactor=world.defaults.gravityFactor;this.bounciness=world.defaults.bounciness;this.minBounceVelocity=world.defaults.minBounceVelocity;
this.jumpSpeed=this.accelAir=this.accelGround=0;this.checkAgainst=this.type=TYPE.NONE;this.collides=COLLIDES.NEVER;this.debugShowBody=world.defaults.debugShowBody;this.debugShowVelocity=world.defaults.debugShowVelocity;this.debugBodyColor=world.defaults.bodyDebugColor;this.slopeStanding={min:.767944870877505,max:2.3736477827122884}},reset:function(x,y){this.pos={x:x,y:y};this.last={x:x,y:y};this.vel={x:0,y:0};this.accel={x:0,y:0};this.friction={x:0,y:0};this.maxVel={x:100,y:100};this.standing=!1;
this.gravityFactor=1;this.bounciness=0;this.minBounceVelocity=40;this.jumpSpeed=this.accelAir=this.accelGround=0;this.checkAgainst=this.type=TYPE.NONE;this.collides=COLLIDES.NEVER},update:function(delta){var pos=this.pos;this.last.x=pos.x;this.last.y=pos.y;this.vel.y+=this.world.gravity*delta*this.gravityFactor;this.vel.x=GetVelocity(delta,this.vel.x,this.accel.x,this.friction.x,this.maxVel.x);this.vel.y=GetVelocity(delta,this.vel.y,this.accel.y,this.friction.y,this.maxVel.y);delta=this.world.collisionMap.trace(pos.x,
pos.y,this.vel.x*delta,this.vel.y*delta,this.size.x,this.size.y);this.handleMovementTrace(delta)&&UpdateMotion(this,delta);if(delta=this.gameObject)delta.x=pos.x-this.offset.x+delta.displayOriginX*delta.scaleX,delta.y=pos.y-this.offset.y+delta.displayOriginY*delta.scaleY;this.updateCallback&&this.updateCallback(this)},drawDebug:function(graphic){var pos=this.pos;this.debugShowBody&&(graphic.lineStyle(1,this.debugBodyColor,1),graphic.strokeRect(pos.x,pos.y,this.size.x,this.size.y));if(this.debugShowVelocity){var x=
pos.x+this.size.x/2;pos=pos.y+this.size.y/2;graphic.lineStyle(1,this.world.defaults.velocityDebugColor,1);graphic.lineBetween(x,pos,x+this.vel.x,pos+this.vel.y)}},willDrawDebug:function(){return this.debugShowBody||this.debugShowVelocity},skipHash:function(){return!this.enabled||0===this.type&&0===this.checkAgainst&&0===this.collides},touches:function(other){return!(this.pos.x>=other.pos.x+other.size.x||this.pos.x+this.size.x<=other.pos.x||this.pos.y>=other.pos.y+other.size.y||this.pos.y+this.size.y<=
other.pos.y)},resetSize:function(x,y,width,height){this.pos.x=x;this.pos.y=y;this.size.x=width;this.size.y=height;return this},toJSON:function(){return{name:this.name,size:{x:this.size.x,y:this.size.y},pos:{x:this.pos.x,y:this.pos.y},vel:{x:this.vel.x,y:this.vel.y},accel:{x:this.accel.x,y:this.accel.y},friction:{x:this.friction.x,y:this.friction.y},maxVel:{x:this.maxVel.x,y:this.maxVel.y},gravityFactor:this.gravityFactor,bounciness:this.bounciness,minBounceVelocity:this.minBounceVelocity,type:this.type,
checkAgainst:this.checkAgainst,collides:this.collides}},fromJSON:function(){},check:function(){},collideWith:function(other,axis){this.parent&&this.parent._collideCallback&&this.parent._collideCallback.call(this.parent._callbackScope,this,other,axis)},handleMovementTrace:function(){return!0},destroy:function(){this.world.remove(this);this.enabled=!1;this.parent=this.gameObject=this.world=null}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$physics$impact$Body.js.map
