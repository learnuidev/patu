{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$components$Collision.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,sEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkFlID,MAAAC,QAAA,CArEgBC,CAYZC,qBAAsBA,QAAS,CAACC,KAAD,CAC/B,CACI,IAAAC,KAAAC,gBAAAC,SAAA,CAAqCH,KAErC,OAAO,KAHX,CAbYF,CA6BZM,kBAAmBA,QAAS,CAACJ,KAAD,CAC5B,CACI,IAAAC,KAAAC,gBAAAG,MAAA,CAAkCL,KAElC,OAAO,KAHX,CA9BYF,CA8CZQ,gBAAiBA,QAAS,CAACC,UAAD,CAC1B,CACI,IAAIC,MAAQ,CAEZ,IAAKC,KAAAC,QAAA,CAAcH,UAAd,CAAL,CAMI,IAAK,IAAII,EAAI,CAAb,CAAgBA,CAAhB,CAAoBJ,UAAAK,OAApB,CAAuCD,CAAA,EAAvC,CAEIH,KAAA,EAASD,UAAA,CAAWI,CAAX,CARjB,KAEIH,MAAA,CAAQD,UAUZ,KAAAN,KAAAC,gBAAAW,KAAA;AAAiCL,KAEjC,OAAO,KAjBX,CA/CYV,CAbkH;",
"sources":["node_modules/Phaser/src/physics/matter-js/components/Collision.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$components$Collision\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * [description]\r\n *\r\n * @name Phaser.Physics.Matter.Components.Collision\r\n * @since 3.0.0\r\n */\r\nvar Collision = {\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Collision#setCollisionCategory\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - Unique category bitfield.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setCollisionCategory: function (value)\r\n    {\r\n        this.body.collisionFilter.category = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Collision#setCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - Unique group index.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setCollisionGroup: function (value)\r\n    {\r\n        this.body.collisionFilter.group = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Collision#setCollidesWith\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|number[])} categories - A unique category bitfield, or an array of them.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setCollidesWith: function (categories)\r\n    {\r\n        var flags = 0;\r\n\r\n        if (!Array.isArray(categories))\r\n        {\r\n            flags = categories;\r\n        }\r\n        else\r\n        {\r\n            for (var i = 0; i < categories.length; i++)\r\n            {\r\n                flags |= categories[i];\r\n            }\r\n        }\r\n\r\n        this.body.collisionFilter.mask = flags;\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Collision;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Collision","setCollisionCategory","value","body","collisionFilter","category","setCollisionGroup","group","setCollidesWith","categories","flags","Array","isArray","i","length","mask"]
}
