{
"version":3,
"file":"module$node_modules$Phaser$src$geom$line$GetNormal.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,mDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO/G,IAAIC,WAAaH,OAAA,CAAQ,2CAAR,CAAjB,CACII,MAAQJ,OAAA,CAAQ,gDAAR,CADZ,CAEIK,MAAQL,OAAA,CAAQ,iDAAR,CA6BZC,OAAAC,QAAA,CAZgBI,QAAS,CAACC,IAAD,CAAOC,GAAP,CACzB,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,IAAIH,KAAnC,CAEIK,KAAAA,CAAIN,KAAA,CAAMG,IAAN,CAAJG,CAAkBP,UAAAQ,IAEtBH,IAAAI,EAAA,CAAQC,IAAAC,IAAA,CAASJ,IAAT,CACRF,IAAAO,EAAA,CAAQF,IAAAG,IAAA,CAASN,IAAT,CAER,OAAOF,IARX,CA3B+G;",
"sources":["node_modules/Phaser/src/geom/line/GetNormal.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$line$GetNormal\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar MATH_CONST = require('../../math/const');\r\nvar Angle = require('./Angle');\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Calculate the normal of the given line.\r\n *\r\n * The normal of a line is a vector that points perpendicular from it.\r\n *\r\n * @function Phaser.Geom.Line.GetNormal\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Line} line - The line to calculate the normal of.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An optional point object to store the normal in.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} The normal of the Line.\r\n */\r\nvar GetNormal = function (line, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var a = Angle(line) - MATH_CONST.TAU;\r\n\r\n    out.x = Math.cos(a);\r\n    out.y = Math.sin(a);\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetNormal;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","MATH_CONST","Angle","Point","GetNormal","line","out","undefined","a","TAU","x","Math","cos","y","sin"]
}
