{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$components$SetBody.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/components/SetBody.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$components$SetBody\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Bodies = require('../lib/factory/Bodies');\r\nvar Body = require('../lib/body/Body');\r\nvar GetFastValue = require('../../../utils/object/GetFastValue');\r\nvar PhysicsEditorParser = require('../PhysicsEditorParser');\r\nvar Vertices = require('../lib/geometry/Vertices');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @name Phaser.Physics.Matter.Components.SetBody\r\n * @since 3.0.0\r\n */\r\nvar SetBody = {\r\n\r\n    //  Calling any of these methods resets previous properties you may have set on the body, including plugins, mass, etc\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.SetBody#setRectangle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setRectangle: function (width, height, options)\r\n    {\r\n        return this.setBody({ type: 'rectangle', width: width, height: height }, options);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.SetBody#setCircle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radius - [description]\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setCircle: function (radius, options)\r\n    {\r\n        return this.setBody({ type: 'circle', radius: radius }, options);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.SetBody#setPolygon\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radius - [description]\r\n     * @param {number} sides - [description]\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setPolygon: function (radius, sides, options)\r\n    {\r\n        return this.setBody({ type: 'polygon', sides: sides, radius: radius }, options);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.SetBody#setTrapezoid\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {number} slope - [description]\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setTrapezoid: function (width, height, slope, options)\r\n    {\r\n        return this.setBody({ type: 'trapezoid', width: width, height: height, slope: slope }, options);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.SetBody#setExistingBody\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MatterJS.Body} body - [description]\r\n     * @param {boolean} [addToWorld=true] - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setExistingBody: function (body, addToWorld)\r\n    {\r\n        if (addToWorld === undefined)\r\n        {\r\n            addToWorld = true;\r\n        }\r\n\r\n        if (this.body)\r\n        {\r\n            this.world.remove(this.body);\r\n        }\r\n\r\n        this.body = body;\r\n\r\n        for (var i = 0; i < body.parts.length; i++)\r\n        {\r\n            body.parts[i].gameObject = this;\r\n        }\r\n\r\n        var _this = this;\r\n\r\n        body.destroy = function destroy ()\r\n        {\r\n            _this.world.remove(_this.body);\r\n            _this.body.gameObject = null;\r\n        };\r\n\r\n        if (addToWorld)\r\n        {\r\n            this.world.add(body);\r\n        }\r\n\r\n        if (this._originComponent)\r\n        {\r\n            this.setOrigin(body.render.sprite.xOffset, body.render.sprite.yOffset);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.SetBody#setBody\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} config - [description]\r\n     * @param {object} options - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setBody: function (config, options)\r\n    {\r\n        if (!config)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        var body;\r\n\r\n        //  Allow them to do: shape: 'circle' instead of shape: { type: 'circle' }\r\n        if (typeof config === 'string')\r\n        {\r\n            //  Using defaults\r\n            config = { type: config };\r\n        }\r\n\r\n        var shapeType = GetFastValue(config, 'type', 'rectangle');\r\n        var bodyX = GetFastValue(config, 'x', this._tempVec2.x);\r\n        var bodyY = GetFastValue(config, 'y', this._tempVec2.y);\r\n        var bodyWidth = GetFastValue(config, 'width', this.width);\r\n        var bodyHeight = GetFastValue(config, 'height', this.height);\r\n\r\n        switch (shapeType)\r\n        {\r\n            case 'rectangle':\r\n                body = Bodies.rectangle(bodyX, bodyY, bodyWidth, bodyHeight, options);\r\n                break;\r\n\r\n            case 'circle':\r\n                var radius = GetFastValue(config, 'radius', Math.max(bodyWidth, bodyHeight) / 2);\r\n                var maxSides = GetFastValue(config, 'maxSides', 25);\r\n                body = Bodies.circle(bodyX, bodyY, radius, options, maxSides);\r\n                break;\r\n\r\n            case 'trapezoid':\r\n                var slope = GetFastValue(config, 'slope', 0.5);\r\n                body = Bodies.trapezoid(bodyX, bodyY, bodyWidth, bodyHeight, slope, options);\r\n                break;\r\n\r\n            case 'polygon':\r\n                var sides = GetFastValue(config, 'sides', 5);\r\n                var pRadius = GetFastValue(config, 'radius', Math.max(bodyWidth, bodyHeight) / 2);\r\n                body = Bodies.polygon(bodyX, bodyY, sides, pRadius, options);\r\n                break;\r\n\r\n            case 'fromVertices':\r\n            case 'fromVerts':\r\n\r\n                var verts = GetFastValue(config, 'verts', null);\r\n\r\n                if (verts)\r\n                {\r\n                    //  Has the verts array come from Vertices.fromPath, or is it raw?\r\n                    if (typeof verts === 'string')\r\n                    {\r\n                        verts = Vertices.fromPath(verts);\r\n                    }\r\n\r\n                    if (this.body && !this.body.hasOwnProperty('temp'))\r\n                    {\r\n                        Body.setVertices(this.body, verts);\r\n\r\n                        body = this.body;\r\n                    }\r\n                    else\r\n                    {\r\n                        var flagInternal = GetFastValue(config, 'flagInternal', false);\r\n                        var removeCollinear = GetFastValue(config, 'removeCollinear', 0.01);\r\n                        var minimumArea = GetFastValue(config, 'minimumArea', 10);\r\n    \r\n                        body = Bodies.fromVertices(bodyX, bodyY, verts, options, flagInternal, removeCollinear, minimumArea);\r\n                    }\r\n                }\r\n\r\n                break;\r\n\r\n            case 'fromPhysicsEditor':\r\n                body = PhysicsEditorParser.parseBody(bodyX, bodyY, bodyWidth, bodyHeight, config);\r\n                break;\r\n        }\r\n\r\n        if (body)\r\n        {\r\n            this.setExistingBody(body, config.addToWorld);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = SetBody;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Bodies","Body","GetFastValue","PhysicsEditorParser","Vertices","SetBody","setRectangle","width","height","options","setBody","type","setCircle","radius","setPolygon","sides","setTrapezoid","slope","setExistingBody","body","addToWorld","undefined","world","remove","i","parts","length","gameObject","_this","destroy","body.destroy","add","_originComponent","setOrigin","render","sprite","xOffset","yOffset","config","shapeType","bodyX","_tempVec2","x","bodyY","y","bodyWidth","bodyHeight","rectangle","Math","max","maxSides","circle","trapezoid","pRadius","polygon","verts","fromPath","hasOwnProperty","setVertices","flagInternal","removeCollinear","minimumArea","fromVertices","parseBody"]
}
