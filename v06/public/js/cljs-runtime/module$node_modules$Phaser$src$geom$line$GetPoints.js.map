{
"version":3,
"file":"module$node_modules$Phaser$src$geom$line$GetPoints.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,mDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO/G,IAAIC,OAASH,OAAA,CAAQ,iDAAR,CAAb,CACII,MAAQJ,OAAA,CAAQ,iDAAR,CAmDZC,OAAAC,QAAA,CA7BgBG,QAAS,CAACC,IAAD,CAAOC,QAAP,CAAiBC,QAAjB,CAA2BC,GAA3B,CACzB,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,EAA/B,CAGKF,SAAL,GAEIA,QAFJ,CAEeJ,MAAA,CAAOG,IAAP,CAFf,CAE8BE,QAF9B,CAKIG,SAAAA,CAAKL,IAAAK,GACT,KAAIC,GAAKN,IAAAM,GAAT,CAEIC,GAAKP,IAAAO,GACLC,KAAAA,CAAKR,IAAAQ,GAET,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBR,QAApB,CAA8BQ,CAAA,EAA9B,CACA,CACI,IAAIC,SAAWD,CAAXC,CAAeT,QAKnBE,IAAAQ,KAAA,CAAS,IAAIb,KAAJ,CAHDO,QAGC,EAHKE,EAGL,CAHUF,QAGV;AAHgBK,QAGhB,CAFDJ,EAEC,EAFKE,IAEL,CAFUF,EAEV,EAFgBI,QAEhB,CAAT,CANJ,CASA,MAAOP,IAzBX,CA/B+G;",
"sources":["node_modules/Phaser/src/geom/line/GetPoints.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$line$GetPoints\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Length = require('./Length');\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Get a number of points along a line's length.\r\n *\r\n * Provide a `quantity` to get an exact number of points along the line.\r\n *\r\n * Provide a `stepRate` to ensure a specific distance between each point on the line. Set `quantity` to `0` when\r\n * providing a `stepRate`.\r\n *\r\n * @function Phaser.Geom.Line.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point[]} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Line} line - The line.\r\n * @param {integer} quantity - The number of points to place on the line. Set to `0` to use `stepRate` instead.\r\n * @param {number} [stepRate] - The distance between each point on the line. When set, `quantity` is implied and should be set to `0`.\r\n * @param {(array|Phaser.Geom.Point[])} [out] - An optional array of Points, or point-like objects, to store the coordinates of the points on the line.\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} An array of Points, or point-like objects, containing the coordinates of the points on the line.\r\n */\r\nvar GetPoints = function (line, quantity, stepRate, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity)\r\n    {\r\n        quantity = Length(line) / stepRate;\r\n    }\r\n\r\n    var x1 = line.x1;\r\n    var y1 = line.y1;\r\n\r\n    var x2 = line.x2;\r\n    var y2 = line.y2;\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        var position = i / quantity;\r\n\r\n        var x = x1 + (x2 - x1) * position;\r\n        var y = y1 + (y2 - y1) * position;\r\n\r\n        out.push(new Point(x, y));\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoints;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Length","Point","GetPoints","line","quantity","stepRate","out","undefined","x1","y1","x2","y2","i","position","push"]
}
