{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$pathfollower$PathFollower.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/pathfollower/PathFollower.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$pathfollower$PathFollower\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar DegToRad = require('../../math/DegToRad');\r\nvar GetBoolean = require('../../tweens/builders/GetBoolean');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar Sprite = require('../sprite/Sprite');\r\nvar TWEEN_CONST = require('../../tweens/tween/const');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * Settings for a PathFollower.\r\n *\r\n * @typedef {object} PathConfig\r\n *\r\n * @property {number} duration - The duration of the path follow.\r\n * @property {number} from - The start position of the path follow, between 0 and 1.\r\n * @property {number} to - The end position of the path follow, between 0 and 1.\r\n * @property {boolean} [positionOnPath=false] - Whether to position the PathFollower on the Path using its path offset.\r\n * @property {boolean} [rotateToPath=false] - Should the PathFollower automatically rotate to point in the direction of the Path?\r\n * @property {number} [rotationOffset=0] - If the PathFollower is rotating to match the Path, this value is added to the rotation value. This allows you to rotate objects to a path but control the angle of the rotation as well.\r\n * @property {boolean} [verticalAdjust=false] - [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A PathFollower Game Object.\r\n *\r\n * A PathFollower is a Sprite Game Object with some extra helpers to allow it to follow a Path automatically.\r\n *\r\n * Anything you can do with a standard Sprite can be done with this PathFollower, such as animate it, tint it,\r\n * scale it and so on.\r\n *\r\n * PathFollowers are bound to a single Path at any one time and can traverse the length of the Path, from start\r\n * to finish, forwards or backwards, or from any given point on the Path to its end. They can optionally rotate\r\n * to face the direction of the path, be offset from the path coordinates or rotate independently of the Path.\r\n *\r\n * @class PathFollower\r\n * @extends Phaser.GameObjects.Sprite\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this PathFollower belongs.\r\n * @param {Phaser.Curves.Path} path - The Path this PathFollower is following. It can only follow one Path at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\r\nvar PathFollower = new Class({\r\n\r\n    Extends: Sprite,\r\n\r\n    initialize:\r\n\r\n    function PathFollower (scene, path, x, y, texture, frame)\r\n    {\r\n        Sprite.call(this, scene, x, y, texture, frame);\r\n\r\n        /**\r\n         * The Path this PathFollower is following. It can only follow one Path at a time.\r\n         *\r\n         * @name Phaser.GameObjects.PathFollower#path\r\n         * @type {Phaser.Curves.Path}\r\n         * @since 3.0.0\r\n         */\r\n        this.path = path;\r\n\r\n        /**\r\n         * Should the PathFollower automatically rotate to point in the direction of the Path?\r\n         *\r\n         * @name Phaser.GameObjects.PathFollower#rotateToPath\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.rotateToPath = false;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.GameObjects.PathFollower#pathRotationVerticalAdjust\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.pathRotationVerticalAdjust = false;\r\n\r\n        /**\r\n         * If the PathFollower is rotating to match the Path (@see Phaser.GameObjects.PathFollower#rotateToPath)\r\n         * this value is added to the rotation value. This allows you to rotate objects to a path but control\r\n         * the angle of the rotation as well.\r\n         *\r\n         * @name Phaser.GameObjects.PathFollower#pathRotationOffset\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.pathRotationOffset = 0;\r\n\r\n        /**\r\n         * An additional vector to add to the PathFollowers position, allowing you to offset it from the\r\n         * Path coordinates.\r\n         *\r\n         * @name Phaser.GameObjects.PathFollower#pathOffset\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.pathOffset = new Vector2(x, y);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.GameObjects.PathFollower#pathVector\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.pathVector = new Vector2();\r\n\r\n        /**\r\n         * The Tween used for following the Path.\r\n         *\r\n         * @name Phaser.GameObjects.PathFollower#pathTween\r\n         * @type {Phaser.Tweens.Tween}\r\n         * @since 3.0.0\r\n         */\r\n        this.pathTween;\r\n\r\n        /**\r\n         * Settings for the PathFollower.\r\n         *\r\n         * @name Phaser.GameObjects.PathFollower#pathConfig\r\n         * @type {?PathConfig}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.pathConfig = null;\r\n\r\n        /**\r\n         * Records the direction of the follower so it can change direction.\r\n         *\r\n         * @name Phaser.GameObjects.PathFollower#_prevDirection\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._prevDirection = TWEEN_CONST.PLAYING_FORWARD;\r\n    },\r\n\r\n    /**\r\n     * Set the Path that this PathFollower should follow.\r\n     *\r\n     * Optionally accepts {@link PathConfig} settings.\r\n     *\r\n     * @method Phaser.GameObjects.PathFollower#setPath\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Curves.Path} path - The Path this PathFollower is following. It can only follow one Path at a time.\r\n     * @param {PathConfig} [config] - Settings for the PathFollower.\r\n     *\r\n     * @return {Phaser.GameObjects.PathFollower} This Game Object.\r\n     */\r\n    setPath: function (path, config)\r\n    {\r\n        if (config === undefined) { config = this.pathConfig; }\r\n\r\n        var tween = this.pathTween;\r\n\r\n        if (tween && tween.isPlaying())\r\n        {\r\n            tween.stop();\r\n        }\r\n\r\n        this.path = path;\r\n\r\n        if (config)\r\n        {\r\n            this.startFollow(config);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set whether the PathFollower should automatically rotate to point in the direction of the Path.\r\n     *\r\n     * @method Phaser.GameObjects.PathFollower#setRotateToPath\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - Whether the PathFollower should automatically rotate to point in the direction of the Path.\r\n     * @param {number} [offset=0] - Rotation offset in degrees.\r\n     * @param {boolean} [verticalAdjust=false] - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.PathFollower} This Game Object.\r\n     */\r\n    setRotateToPath: function (value, offset, verticalAdjust)\r\n    {\r\n        if (offset === undefined) { offset = 0; }\r\n        if (verticalAdjust === undefined) { verticalAdjust = false; }\r\n\r\n        this.rotateToPath = value;\r\n\r\n        this.pathRotationOffset = offset;\r\n        this.pathRotationVerticalAdjust = verticalAdjust;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Is this PathFollower actively following a Path or not?\r\n     *\r\n     * To be considered as `isFollowing` it must be currently moving on a Path, and not paused.\r\n     *\r\n     * @method Phaser.GameObjects.PathFollower#isFollowing\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` is this PathFollower is actively following a Path, otherwise `false`.\r\n     */\r\n    isFollowing: function ()\r\n    {\r\n        var tween = this.pathTween;\r\n\r\n        return (tween && tween.isPlaying());\r\n    },\r\n\r\n    /**\r\n     * Starts this PathFollower following its given Path.\r\n     *\r\n     * @method Phaser.GameObjects.PathFollower#startFollow\r\n     * @since 3.3.0\r\n     *\r\n     * @param {(number|PathConfig)} [config={}] - The duration of the follow, or a PathFollower config object.\r\n     * @param {number} [startAt=0] - Optional start position of the follow, between 0 and 1.\r\n     *\r\n     * @return {Phaser.GameObjects.PathFollower} This Game Object.\r\n     */\r\n    startFollow: function (config, startAt)\r\n    {\r\n        if (config === undefined) { config = {}; }\r\n        if (startAt === undefined) { startAt = 0; }\r\n\r\n        var tween = this.pathTween;\r\n\r\n        if (tween && tween.isPlaying())\r\n        {\r\n            tween.stop();\r\n        }\r\n\r\n        if (typeof config === 'number')\r\n        {\r\n            config = { duration: config };\r\n        }\r\n\r\n        //  Override in case they've been specified in the config\r\n        config.from = 0;\r\n        config.to = 1;\r\n\r\n        //  Can also read extra values out of the config:\r\n\r\n        var positionOnPath = GetBoolean(config, 'positionOnPath', false);\r\n\r\n        this.rotateToPath = GetBoolean(config, 'rotateToPath', false);\r\n        this.pathRotationOffset = GetValue(config, 'rotationOffset', 0);\r\n        this.pathRotationVerticalAdjust = GetBoolean(config, 'verticalAdjust', false);\r\n\r\n        this.pathTween = this.scene.sys.tweens.addCounter(config);\r\n\r\n        //  The starting point of the path, relative to this follower\r\n        this.path.getStartPoint(this.pathOffset);\r\n\r\n        if (positionOnPath)\r\n        {\r\n            this.x = this.pathOffset.x;\r\n            this.y = this.pathOffset.y;\r\n        }\r\n\r\n        this.pathOffset.x = this.x - this.pathOffset.x;\r\n        this.pathOffset.y = this.y - this.pathOffset.y;\r\n\r\n        this._prevDirection = TWEEN_CONST.PLAYING_FORWARD;\r\n\r\n        if (this.rotateToPath)\r\n        {\r\n            //  Set the rotation now (in case the tween has a delay on it, etc)\r\n            var nextPoint = this.path.getPoint(0.1);\r\n\r\n            this.rotation = Math.atan2(nextPoint.y - this.y, nextPoint.x - this.x) + DegToRad(this.pathRotationOffset);\r\n        }\r\n\r\n        this.pathConfig = config;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Pauses this PathFollower. It will still continue to render, but it will remain motionless at the\r\n     * point on the Path at which you paused it.\r\n     *\r\n     * @method Phaser.GameObjects.PathFollower#pauseFollow\r\n     * @since 3.3.0\r\n     *\r\n     * @return {Phaser.GameObjects.PathFollower} This Game Object.\r\n     */\r\n    pauseFollow: function ()\r\n    {\r\n        var tween = this.pathTween;\r\n\r\n        if (tween && tween.isPlaying())\r\n        {\r\n            tween.pause();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resumes a previously paused PathFollower.\r\n     *\r\n     * If the PathFollower was not paused this has no effect.\r\n     *\r\n     * @method Phaser.GameObjects.PathFollower#resumeFollow\r\n     * @since 3.3.0\r\n     *\r\n     * @return {Phaser.GameObjects.PathFollower} This Game Object.\r\n     */\r\n    resumeFollow: function ()\r\n    {\r\n        var tween = this.pathTween;\r\n\r\n        if (tween && tween.isPaused())\r\n        {\r\n            tween.resume();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stops this PathFollower from following the path any longer.\r\n     *\r\n     * This will invoke any 'stop' conditions that may exist on the Path, or for the follower.\r\n     *\r\n     * @method Phaser.GameObjects.PathFollower#stopFollow\r\n     * @since 3.3.0\r\n     *\r\n     * @return {Phaser.GameObjects.PathFollower} This Game Object.\r\n     */\r\n    stopFollow: function ()\r\n    {\r\n        var tween = this.pathTween;\r\n\r\n        if (tween && tween.isPlaying())\r\n        {\r\n            tween.stop();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal update handler that advances this PathFollower along the path.\r\n     *\r\n     * Called automatically by the Scene step, should not typically be called directly.\r\n     *\r\n     * @method Phaser.GameObjects.PathFollower#preUpdate\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    preUpdate: function (time, delta)\r\n    {\r\n        this.anims.update(time, delta);\r\n\r\n        var tween = this.pathTween;\r\n\r\n        if (tween)\r\n        {\r\n            var tweenData = tween.data[0];\r\n\r\n            if (tweenData.state !== TWEEN_CONST.PLAYING_FORWARD && tweenData.state !== TWEEN_CONST.PLAYING_BACKWARD)\r\n            {\r\n                //  If delayed, etc then bail out\r\n                return;\r\n            }\r\n\r\n            var pathVector = this.pathVector;\r\n\r\n            this.path.getPoint(tween.getValue(), pathVector);\r\n\r\n            pathVector.add(this.pathOffset);\r\n\r\n            var oldX = this.x;\r\n            var oldY = this.y;\r\n\r\n            this.setPosition(pathVector.x, pathVector.y);\r\n\r\n            var speedX = this.x - oldX;\r\n            var speedY = this.y - oldY;\r\n\r\n            if (speedX === 0 && speedY === 0)\r\n            {\r\n                //  Bail out early\r\n                return;\r\n            }\r\n\r\n            if (tweenData.state !== this._prevDirection)\r\n            {\r\n                //  We've changed direction, so don't do a rotate this frame\r\n                this._prevDirection = tweenData.state;\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.rotateToPath)\r\n            {\r\n                this.rotation = Math.atan2(speedY, speedX) + DegToRad(this.pathRotationOffset);\r\n\r\n                if (this.pathRotationVerticalAdjust)\r\n                {\r\n                    this.flipY = (this.rotation !== 0 && tweenData.state === TWEEN_CONST.PLAYING_BACKWARD);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = PathFollower;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","DegToRad","GetBoolean","GetValue","Sprite","TWEEN_CONST","Vector2","PathFollower","Extends","initialize","scene","path","x","y","texture","frame","call","pathRotationVerticalAdjust","rotateToPath","pathRotationOffset","pathOffset","pathVector","pathConfig","_prevDirection","PLAYING_FORWARD","setPath","config","undefined","tween","pathTween","isPlaying","stop","startFollow","setRotateToPath","value","offset","verticalAdjust","isFollowing","startAt","duration","from","to","positionOnPath","sys","tweens","addCounter","getStartPoint","nextPoint","getPoint","rotation","Math","atan2","pauseFollow","pause","resumeFollow","isPaused","resume","stopFollow","preUpdate","time","delta","anims","update","tweenData","data","state","PLAYING_BACKWARD","getValue","add","oldX","oldY","setPosition","speedX","speedY","flipY"]
}
