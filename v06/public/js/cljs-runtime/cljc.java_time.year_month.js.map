{"version":3,"sources":["cljc/java_time/year_month.cljc"],"mappings":"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","names":["cljc.java-time.year-month/length-of-year","this4565","cljc.java-time.year-month/range","this4566","java-time-temporal-TemporalField4567","cljc.java-time.year-month/is-valid-day","this4568","int4569","cljc.java-time.year-month/of","G__4571","G__4572","java.time/YearMonth","cljc.java-time.year-month/with-month","this4573","int4574","cljc.java-time.year-month/at-day","this4575","int4576","cljc.java-time.year-month/get-year","this4577","var_args","G__27467","cljc.java-time.year-month/plus","js/Error","this4578","G__4579","G__4580","this4581","G__4582","cljc.java-time.year-month/is-leap-year","this4583","cljc.java-time.year-month/query","this4584","java-time-temporal-TemporalQuery4585","cljc.java-time.year-month/to-string","this4586","cljc.java-time.year-month/plus-months","this4587","long4588","cljc.java-time.year-month/is-before","this4589","java-time-YearMonth4590","cljc.java-time.year-month/minus-months","this4591","long4592","G__27487","cljc.java-time.year-month/minus","this4593","G__4594","G__4595","this4596","G__4597","cljc.java-time.year-month/get-long","this4598","java-time-temporal-TemporalField4599","cljc.java-time.year-month/with-year","this4600","int4601","cljc.java-time.year-month/at-end-of-month","this4602","cljc.java-time.year-month/length-of-month","this4603","cljc.java-time.year-month/until","this4604","java-time-temporal-Temporal4605","java-time-temporal-TemporalUnit4606","cljc.java-time.year-month/from","java-time-temporal-TemporalAccessor4607","cljc.java-time.year-month/is-after","this4608","java-time-YearMonth4609","cljc.java-time.year-month/is-supported","this4610","G__4611","cljc.java-time.year-month/minus-years","this4612","long4613","G__27491","cljc.java-time.year-month/parse","java-lang-CharSequence4614","java-time-format-DateTimeFormatter4615","java-lang-CharSequence4616","cljc.java-time.year-month/hash-code","this4617","cljc.java-time.year-month/adjust-into","this4618","java-time-temporal-Temporal4619","G__27497","cljc.java-time.year-month/with","this4620","G__4621","G__4622","this4623","G__4624","G__27503","cljc.java-time.year-month/now","G__4626","cljc.java-time.year-month/get-month-value","this4627","cljc.java-time.year-month/compare-to","this4628","G__4629","cljc.java-time.year-month/get-month","this4630","cljc.java-time.year-month/get","this4631","java-time-temporal-TemporalField4632","cljc.java-time.year-month/equals","this4633","java-lang-Object4634","cljc.java-time.year-month/format","this4635","java-time-format-DateTimeFormatter4636","cljc.java-time.year-month/plus-years","this4637","long4638"],"sourcesContent":["(ns cljc.java-time.year-month (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [YearMonth]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time YearMonth])))\r\n(clojure.core/defn length-of-year {:arglists (quote ([\"java.time.YearMonth\"]))} (^java.lang.Integer [^java.time.YearMonth this4565] (.lengthOfYear this4565)))\r\n(clojure.core/defn range {:arglists (quote ([\"java.time.YearMonth\" \"java.time.temporal.TemporalField\"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this4566 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4567] (.range this4566 java-time-temporal-TemporalField4567)))\r\n(clojure.core/defn is-valid-day {:arglists (quote ([\"java.time.YearMonth\" \"int\"]))} (^java.lang.Boolean [^java.time.YearMonth this4568 ^java.lang.Integer int4569] (.isValidDay this4568 int4569)))\r\n(clojure.core/defn of {:arglists (quote ([\"int\" \"int\"] [\"int\" \"java.time.Month\"]))} (^java.time.YearMonth [G__4571 G__4572] #? (:cljs (. java.time.YearMonth of G__4571 G__4572) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Number\") G__4571) (clojure.core/instance? (java.lang.Class/forName \"java.lang.Number\") G__4572)) (clojure.core/let [G__4571 (clojure.core/int G__4571) G__4572 (clojure.core/int G__4572)] (. java.time.YearMonth of G__4571 G__4572)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Number\") G__4571) (clojure.core/instance? (java.lang.Class/forName \"java.time.Month\") G__4572)) (clojure.core/let [G__4571 (clojure.core/int G__4571) G__4572 ^\"java.time.Month\" G__4572] (. java.time.YearMonth of G__4571 G__4572)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn with-month {:arglists (quote ([\"java.time.YearMonth\" \"int\"]))} (^java.time.YearMonth [^java.time.YearMonth this4573 ^java.lang.Integer int4574] (.withMonth this4573 int4574)))\r\n(clojure.core/defn at-day {:arglists (quote ([\"java.time.YearMonth\" \"int\"]))} (^java.time.LocalDate [^java.time.YearMonth this4575 ^java.lang.Integer int4576] (.atDay this4575 int4576)))\r\n(clojure.core/defn get-year {:arglists (quote ([\"java.time.YearMonth\"]))} (^java.lang.Integer [^java.time.YearMonth this4577] (jti/getter year this4577)))\r\n(clojure.core/defn plus {:arglists (quote ([\"java.time.YearMonth\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.YearMonth\" \"java.time.temporal.TemporalAmount\"] [\"java.time.YearMonth\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.YearMonth\" \"java.time.temporal.TemporalAmount\"]))} (^java.lang.Object [this4578 G__4579 G__4580] #? (:cljs (.plus ^java.time.YearMonth this4578 G__4579 G__4580) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4579) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4580)) (clojure.core/let [G__4579 (clojure.core/long G__4579) G__4580 ^\"java.time.temporal.TemporalUnit\" G__4580] (.plus ^java.time.YearMonth this4578 G__4579 G__4580)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4579) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4580)) (clojure.core/let [G__4579 (clojure.core/long G__4579) G__4580 ^\"java.time.temporal.TemporalUnit\" G__4580] (.plus ^java.time.YearMonth this4578 G__4579 G__4580)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.lang.Object [this4581 G__4582] #? (:cljs (.plus ^java.time.YearMonth this4581 G__4582) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4582)) (clojure.core/let [G__4582 ^\"java.time.temporal.TemporalAmount\" G__4582] (.plus ^java.time.YearMonth this4581 G__4582)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4582)) (clojure.core/let [G__4582 ^\"java.time.temporal.TemporalAmount\" G__4582] (.plus ^java.time.YearMonth this4581 G__4582)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn is-leap-year {:arglists (quote ([\"java.time.YearMonth\"]))} (^java.lang.Boolean [^java.time.YearMonth this4583] (.isLeapYear this4583)))\r\n(clojure.core/defn query {:arglists (quote ([\"java.time.YearMonth\" \"java.time.temporal.TemporalQuery\"]))} (^java.lang.Object [^java.time.YearMonth this4584 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4585] (.query this4584 java-time-temporal-TemporalQuery4585)))\r\n(clojure.core/defn to-string {:arglists (quote ([\"java.time.YearMonth\"]))} (^java.lang.String [^java.time.YearMonth this4586] (.toString this4586)))\r\n(clojure.core/defn plus-months {:arglists (quote ([\"java.time.YearMonth\" \"long\"]))} (^java.time.YearMonth [^java.time.YearMonth this4587 ^long long4588] (.plusMonths this4587 long4588)))\r\n(clojure.core/defn is-before {:arglists (quote ([\"java.time.YearMonth\" \"java.time.YearMonth\"]))} (^java.lang.Boolean [^java.time.YearMonth this4589 ^java.time.YearMonth java-time-YearMonth4590] (.isBefore this4589 java-time-YearMonth4590)))\r\n(clojure.core/defn minus-months {:arglists (quote ([\"java.time.YearMonth\" \"long\"]))} (^java.time.YearMonth [^java.time.YearMonth this4591 ^long long4592] (.minusMonths this4591 long4592)))\r\n(clojure.core/defn minus {:arglists (quote ([\"java.time.YearMonth\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.YearMonth\" \"java.time.temporal.TemporalAmount\"] [\"java.time.YearMonth\" \"java.time.temporal.TemporalAmount\"] [\"java.time.YearMonth\" \"long\" \"java.time.temporal.TemporalUnit\"]))} (^java.lang.Object [this4593 G__4594 G__4595] #? (:cljs (.minus ^java.time.YearMonth this4593 G__4594 G__4595) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4594) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4595)) (clojure.core/let [G__4594 (clojure.core/long G__4594) G__4595 ^\"java.time.temporal.TemporalUnit\" G__4595] (.minus ^java.time.YearMonth this4593 G__4594 G__4595)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4594) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4595)) (clojure.core/let [G__4594 (clojure.core/long G__4594) G__4595 ^\"java.time.temporal.TemporalUnit\" G__4595] (.minus ^java.time.YearMonth this4593 G__4594 G__4595)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.lang.Object [this4596 G__4597] #? (:cljs (.minus ^java.time.YearMonth this4596 G__4597) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4597)) (clojure.core/let [G__4597 ^\"java.time.temporal.TemporalAmount\" G__4597] (.minus ^java.time.YearMonth this4596 G__4597)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4597)) (clojure.core/let [G__4597 ^\"java.time.temporal.TemporalAmount\" G__4597] (.minus ^java.time.YearMonth this4596 G__4597)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn get-long {:arglists (quote ([\"java.time.YearMonth\" \"java.time.temporal.TemporalField\"]))} (^long [^java.time.YearMonth this4598 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4599] (.getLong this4598 java-time-temporal-TemporalField4599)))\r\n(clojure.core/defn with-year {:arglists (quote ([\"java.time.YearMonth\" \"int\"]))} (^java.time.YearMonth [^java.time.YearMonth this4600 ^java.lang.Integer int4601] (.withYear this4600 int4601)))\r\n(clojure.core/defn at-end-of-month {:arglists (quote ([\"java.time.YearMonth\"]))} (^java.time.LocalDate [^java.time.YearMonth this4602] (.atEndOfMonth this4602)))\r\n(clojure.core/defn length-of-month {:arglists (quote ([\"java.time.YearMonth\"]))} (^java.lang.Integer [^java.time.YearMonth this4603] (.lengthOfMonth this4603)))\r\n(clojure.core/defn until {:arglists (quote ([\"java.time.YearMonth\" \"java.time.temporal.Temporal\" \"java.time.temporal.TemporalUnit\"]))} (^long [^java.time.YearMonth this4604 ^java.time.temporal.Temporal java-time-temporal-Temporal4605 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4606] (.until this4604 java-time-temporal-Temporal4605 java-time-temporal-TemporalUnit4606)))\r\n(clojure.core/defn from {:arglists (quote ([\"java.time.temporal.TemporalAccessor\"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4607] (. java.time.YearMonth from java-time-temporal-TemporalAccessor4607)))\r\n(clojure.core/defn is-after {:arglists (quote ([\"java.time.YearMonth\" \"java.time.YearMonth\"]))} (^java.lang.Boolean [^java.time.YearMonth this4608 ^java.time.YearMonth java-time-YearMonth4609] (.isAfter this4608 java-time-YearMonth4609)))\r\n(clojure.core/defn is-supported {:arglists (quote ([\"java.time.YearMonth\" \"java.time.temporal.TemporalField\"] [\"java.time.YearMonth\" \"java.time.temporal.TemporalUnit\"]))} (^java.lang.Boolean [this4610 G__4611] #? (:cljs (.isSupported ^java.time.YearMonth this4610 G__4611) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalField\") G__4611)) (clojure.core/let [G__4611 ^\"java.time.temporal.TemporalField\" G__4611] (.isSupported ^java.time.YearMonth this4610 G__4611)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4611)) (clojure.core/let [G__4611 ^\"java.time.temporal.TemporalUnit\" G__4611] (.isSupported ^java.time.YearMonth this4610 G__4611)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn minus-years {:arglists (quote ([\"java.time.YearMonth\" \"long\"]))} (^java.time.YearMonth [^java.time.YearMonth this4612 ^long long4613] (.minusYears this4612 long4613)))\r\n(clojure.core/defn parse {:arglists (quote ([\"java.lang.CharSequence\" \"java.time.format.DateTimeFormatter\"] [\"java.lang.CharSequence\"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence4614 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4615] (. java.time.YearMonth parse java-lang-CharSequence4614 java-time-format-DateTimeFormatter4615)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence4616] (. java.time.YearMonth parse java-lang-CharSequence4616)))\r\n(clojure.core/defn hash-code {:arglists (quote ([\"java.time.YearMonth\"]))} (^java.lang.Integer [^java.time.YearMonth this4617] (.hashCode this4617)))\r\n(clojure.core/defn adjust-into {:arglists (quote ([\"java.time.YearMonth\" \"java.time.temporal.Temporal\"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this4618 ^java.time.temporal.Temporal java-time-temporal-Temporal4619] (.adjustInto this4618 java-time-temporal-Temporal4619)))\r\n(clojure.core/defn with {:arglists (quote ([\"java.time.YearMonth\" \"java.time.temporal.TemporalField\" \"long\"] [\"java.time.YearMonth\" \"java.time.temporal.TemporalAdjuster\"] [\"java.time.YearMonth\" \"java.time.temporal.TemporalAdjuster\"] [\"java.time.YearMonth\" \"java.time.temporal.TemporalField\" \"long\"]))} (^java.lang.Object [this4620 G__4621 G__4622] #? (:cljs (.with ^java.time.YearMonth this4620 G__4621 G__4622) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalField\") G__4621) (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4622)) (clojure.core/let [G__4621 ^\"java.time.temporal.TemporalField\" G__4621 G__4622 (clojure.core/long G__4622)] (.with ^java.time.YearMonth this4620 G__4621 G__4622)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalField\") G__4621) (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4622)) (clojure.core/let [G__4621 ^\"java.time.temporal.TemporalField\" G__4621 G__4622 (clojure.core/long G__4622)] (.with ^java.time.YearMonth this4620 G__4621 G__4622)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.lang.Object [this4623 G__4624] #? (:cljs (.with ^java.time.YearMonth this4623 G__4624) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAdjuster\") G__4624)) (clojure.core/let [G__4624 ^\"java.time.temporal.TemporalAdjuster\" G__4624] (.with ^java.time.YearMonth this4623 G__4624)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAdjuster\") G__4624)) (clojure.core/let [G__4624 ^\"java.time.temporal.TemporalAdjuster\" G__4624] (.with ^java.time.YearMonth this4623 G__4624)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn now {:arglists (quote ([\"java.time.Clock\"] [] [\"java.time.ZoneId\"]))} (^java.time.YearMonth [G__4626] #? (:cljs (. java.time.YearMonth now G__4626) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.Clock\") G__4626)) (clojure.core/let [G__4626 ^\"java.time.Clock\" G__4626] (. java.time.YearMonth now G__4626)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.ZoneId\") G__4626)) (clojure.core/let [G__4626 ^\"java.time.ZoneId\" G__4626] (. java.time.YearMonth now G__4626)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.time.YearMonth [] (. java.time.YearMonth now)))\r\n(clojure.core/defn get-month-value {:arglists (quote ([\"java.time.YearMonth\"]))} (^java.lang.Integer [^java.time.YearMonth this4627] (jti/getter monthValue this4627)))\r\n(clojure.core/defn compare-to {:arglists (quote ([\"java.time.YearMonth\" \"java.time.YearMonth\"] [\"java.time.YearMonth\" \"java.lang.Object\"]))} (^java.lang.Integer [this4628 G__4629] #? (:cljs (.compareTo ^java.time.YearMonth this4628 G__4629) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.YearMonth\") G__4629)) (clojure.core/let [G__4629 ^\"java.time.YearMonth\" G__4629] (.compareTo ^java.time.YearMonth this4628 G__4629)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Object\") G__4629)) (clojure.core/let [G__4629 ^\"java.lang.Object\" G__4629] (.compareTo ^java.time.YearMonth this4628 G__4629)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn get-month {:arglists (quote ([\"java.time.YearMonth\"]))} (^java.time.Month [^java.time.YearMonth this4630] (jti/getter month this4630)))\r\n(clojure.core/defn get {:arglists (quote ([\"java.time.YearMonth\" \"java.time.temporal.TemporalField\"]))} (^java.lang.Integer [^java.time.YearMonth this4631 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4632] (.get this4631 java-time-temporal-TemporalField4632)))\r\n(clojure.core/defn equals {:arglists (quote ([\"java.time.YearMonth\" \"java.lang.Object\"]))} (^java.lang.Boolean [^java.time.YearMonth this4633 ^java.lang.Object java-lang-Object4634] (.equals this4633 java-lang-Object4634)))\r\n(clojure.core/defn format {:arglists (quote ([\"java.time.YearMonth\" \"java.time.format.DateTimeFormatter\"]))} (^java.lang.String [^java.time.YearMonth this4635 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4636] (.format this4635 java-time-format-DateTimeFormatter4636)))\r\n(clojure.core/defn plus-years {:arglists (quote ([\"java.time.YearMonth\" \"long\"]))} (^java.time.YearMonth [^java.time.YearMonth this4637 ^long long4638] (.plusYears this4637 long4638)))\r\n"]}