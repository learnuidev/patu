{"version":3,"sources":["cljc/java_time/local_time.cljc"],"mappings":"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","names":["cljc.java-time.local-time/max","java.time/LocalTime","cljc.java-time.local-time/noon","cljc.java-time.local-time/midnight","cljc.java-time.local-time/min","cljc.java-time.local-time/minus-minutes","this4240","long4241","cljc.java-time.local-time/truncated-to","this4242","java-time-temporal-TemporalUnit4243","cljc.java-time.local-time/range","this4244","java-time-temporal-TemporalField4245","cljc.java-time.local-time/get-hour","this4246","cljc.java-time.local-time/at-offset","this4247","java-time-ZoneOffset4248","cljc.java-time.local-time/minus-hours","this4249","long4250","var_args","G__27336","cljc.java-time.local-time/of","js/Error","int4251","int4252","int4253","int4254","int4255","int4256","int4257","int4258","int4259","cljc.java-time.local-time/get-nano","this4260","cljc.java-time.local-time/minus-seconds","this4261","long4262","cljc.java-time.local-time/get-second","this4263","cljc.java-time.local-time/plus-nanos","this4264","long4265","G__27345","cljc.java-time.local-time/plus","this4266","G__4267","this4268","G__4269","G__4270","cljc.java-time.local-time/with-hour","this4271","int4272","cljc.java-time.local-time/with-minute","this4273","int4274","cljc.java-time.local-time/plus-minutes","this4275","long4276","cljc.java-time.local-time/query","this4277","java-time-temporal-TemporalQuery4278","cljc.java-time.local-time/at-date","this4279","java-time-LocalDate4280","cljc.java-time.local-time/to-string","this4281","cljc.java-time.local-time/is-before","this4282","java-time-LocalTime4283","G__27354","cljc.java-time.local-time/minus","this4284","G__4285","this4286","G__4287","G__4288","cljc.java-time.local-time/plus-hours","this4289","long4290","cljc.java-time.local-time/to-second-of-day","this4291","cljc.java-time.local-time/get-long","this4292","java-time-temporal-TemporalField4293","cljc.java-time.local-time/with-nano","this4294","int4295","cljc.java-time.local-time/until","this4296","java-time-temporal-Temporal4297","java-time-temporal-TemporalUnit4298","cljc.java-time.local-time/of-nano-of-day","long4299","cljc.java-time.local-time/from","java-time-temporal-TemporalAccessor4300","cljc.java-time.local-time/is-after","this4301","java-time-LocalTime4302","cljc.java-time.local-time/minus-nanos","this4303","long4304","cljc.java-time.local-time/is-supported","this4305","G__4306","G__27374","cljc.java-time.local-time/parse","java-lang-CharSequence4307","java-time-format-DateTimeFormatter4308","java-lang-CharSequence4309","cljc.java-time.local-time/with-second","this4310","int4311","cljc.java-time.local-time/get-minute","this4312","cljc.java-time.local-time/hash-code","this4313","cljc.java-time.local-time/adjust-into","this4314","java-time-temporal-Temporal4315","G__27386","cljc.java-time.local-time/with","this4316","G__4317","this4318","G__4319","G__4320","G__27393","cljc.java-time.local-time/now","G__4322","cljc.java-time.local-time/compare-to","this4323","G__4324","cljc.java-time.local-time/to-nano-of-day","this4325","cljc.java-time.local-time/plus-seconds","this4326","long4327","cljc.java-time.local-time/get","this4328","java-time-temporal-TemporalField4329","cljc.java-time.local-time/of-second-of-day","long4330","cljc.java-time.local-time/equals","this4331","java-lang-Object4332","cljc.java-time.local-time/format","this4333","java-time-format-DateTimeFormatter4334"],"sourcesContent":["(ns cljc.java-time.local-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [LocalTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time LocalTime])))\r\n(def max (. java.time.LocalTime -MAX))\r\n(def noon (. java.time.LocalTime -NOON))\r\n(def midnight (. java.time.LocalTime -MIDNIGHT))\r\n(def min (. java.time.LocalTime -MIN))\r\n(clojure.core/defn minus-minutes {:arglists (quote ([\"java.time.LocalTime\" \"long\"]))} (^java.time.LocalTime [^java.time.LocalTime this4240 ^long long4241] (.minusMinutes this4240 long4241)))\r\n(clojure.core/defn truncated-to {:arglists (quote ([\"java.time.LocalTime\" \"java.time.temporal.TemporalUnit\"]))} (^java.time.LocalTime [^java.time.LocalTime this4242 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4243] (.truncatedTo this4242 java-time-temporal-TemporalUnit4243)))\r\n(clojure.core/defn range {:arglists (quote ([\"java.time.LocalTime\" \"java.time.temporal.TemporalField\"]))} (^java.time.temporal.ValueRange [^java.time.LocalTime this4244 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4245] (.range this4244 java-time-temporal-TemporalField4245)))\r\n(clojure.core/defn get-hour {:arglists (quote ([\"java.time.LocalTime\"]))} (^java.lang.Integer [^java.time.LocalTime this4246] (jti/getter hour this4246)))\r\n(clojure.core/defn at-offset {:arglists (quote ([\"java.time.LocalTime\" \"java.time.ZoneOffset\"]))} (^java.time.OffsetTime [^java.time.LocalTime this4247 ^java.time.ZoneOffset java-time-ZoneOffset4248] (.atOffset this4247 java-time-ZoneOffset4248)))\r\n(clojure.core/defn minus-hours {:arglists (quote ([\"java.time.LocalTime\" \"long\"]))} (^java.time.LocalTime [^java.time.LocalTime this4249 ^long long4250] (.minusHours this4249 long4250)))\r\n(clojure.core/defn of {:arglists (quote ([\"int\" \"int\" \"int\"] [\"int\" \"int\" \"int\" \"int\"] [\"int\" \"int\"]))} (^java.time.LocalTime [^java.lang.Integer int4251 ^java.lang.Integer int4252 ^java.lang.Integer int4253] (. java.time.LocalTime of int4251 int4252 int4253)) (^java.time.LocalTime [^java.lang.Integer int4254 ^java.lang.Integer int4255 ^java.lang.Integer int4256 ^java.lang.Integer int4257] (. java.time.LocalTime of int4254 int4255 int4256 int4257)) (^java.time.LocalTime [^java.lang.Integer int4258 ^java.lang.Integer int4259] (. java.time.LocalTime of int4258 int4259)))\r\n(clojure.core/defn get-nano {:arglists (quote ([\"java.time.LocalTime\"]))} (^java.lang.Integer [^java.time.LocalTime this4260] (jti/getter nano this4260)))\r\n(clojure.core/defn minus-seconds {:arglists (quote ([\"java.time.LocalTime\" \"long\"]))} (^java.time.LocalTime [^java.time.LocalTime this4261 ^long long4262] (.minusSeconds this4261 long4262)))\r\n(clojure.core/defn get-second {:arglists (quote ([\"java.time.LocalTime\"]))} (^java.lang.Integer [^java.time.LocalTime this4263] (jti/getter second this4263)))\r\n(clojure.core/defn plus-nanos {:arglists (quote ([\"java.time.LocalTime\" \"long\"]))} (^java.time.LocalTime [^java.time.LocalTime this4264 ^long long4265] (.plusNanos this4264 long4265)))\r\n(clojure.core/defn plus {:arglists (quote ([\"java.time.LocalTime\" \"java.time.temporal.TemporalAmount\"] [\"java.time.LocalTime\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.LocalTime\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.LocalTime\" \"java.time.temporal.TemporalAmount\"]))} (^java.lang.Object [this4266 G__4267] #? (:cljs (.plus ^java.time.LocalTime this4266 G__4267) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4267)) (clojure.core/let [G__4267 ^\"java.time.temporal.TemporalAmount\" G__4267] (.plus ^java.time.LocalTime this4266 G__4267)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4267)) (clojure.core/let [G__4267 ^\"java.time.temporal.TemporalAmount\" G__4267] (.plus ^java.time.LocalTime this4266 G__4267)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.lang.Object [this4268 G__4269 G__4270] #? (:cljs (.plus ^java.time.LocalTime this4268 G__4269 G__4270) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4269) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4270)) (clojure.core/let [G__4269 (clojure.core/long G__4269) G__4270 ^\"java.time.temporal.TemporalUnit\" G__4270] (.plus ^java.time.LocalTime this4268 G__4269 G__4270)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4269) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4270)) (clojure.core/let [G__4269 (clojure.core/long G__4269) G__4270 ^\"java.time.temporal.TemporalUnit\" G__4270] (.plus ^java.time.LocalTime this4268 G__4269 G__4270)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn with-hour {:arglists (quote ([\"java.time.LocalTime\" \"int\"]))} (^java.time.LocalTime [^java.time.LocalTime this4271 ^java.lang.Integer int4272] (.withHour this4271 int4272)))\r\n(clojure.core/defn with-minute {:arglists (quote ([\"java.time.LocalTime\" \"int\"]))} (^java.time.LocalTime [^java.time.LocalTime this4273 ^java.lang.Integer int4274] (.withMinute this4273 int4274)))\r\n(clojure.core/defn plus-minutes {:arglists (quote ([\"java.time.LocalTime\" \"long\"]))} (^java.time.LocalTime [^java.time.LocalTime this4275 ^long long4276] (.plusMinutes this4275 long4276)))\r\n(clojure.core/defn query {:arglists (quote ([\"java.time.LocalTime\" \"java.time.temporal.TemporalQuery\"]))} (^java.lang.Object [^java.time.LocalTime this4277 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4278] (.query this4277 java-time-temporal-TemporalQuery4278)))\r\n(clojure.core/defn at-date {:arglists (quote ([\"java.time.LocalTime\" \"java.time.LocalDate\"]))} (^java.time.LocalDateTime [^java.time.LocalTime this4279 ^java.time.LocalDate java-time-LocalDate4280] (.atDate this4279 java-time-LocalDate4280)))\r\n(clojure.core/defn to-string {:arglists (quote ([\"java.time.LocalTime\"]))} (^java.lang.String [^java.time.LocalTime this4281] (.toString this4281)))\r\n(clojure.core/defn is-before {:arglists (quote ([\"java.time.LocalTime\" \"java.time.LocalTime\"]))} (^java.lang.Boolean [^java.time.LocalTime this4282 ^java.time.LocalTime java-time-LocalTime4283] (.isBefore this4282 java-time-LocalTime4283)))\r\n(clojure.core/defn minus {:arglists (quote ([\"java.time.LocalTime\" \"java.time.temporal.TemporalAmount\"] [\"java.time.LocalTime\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.LocalTime\" \"java.time.temporal.TemporalAmount\"] [\"java.time.LocalTime\" \"long\" \"java.time.temporal.TemporalUnit\"]))} (^java.lang.Object [this4284 G__4285] #? (:cljs (.minus ^java.time.LocalTime this4284 G__4285) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4285)) (clojure.core/let [G__4285 ^\"java.time.temporal.TemporalAmount\" G__4285] (.minus ^java.time.LocalTime this4284 G__4285)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAmount\") G__4285)) (clojure.core/let [G__4285 ^\"java.time.temporal.TemporalAmount\" G__4285] (.minus ^java.time.LocalTime this4284 G__4285)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.lang.Object [this4286 G__4287 G__4288] #? (:cljs (.minus ^java.time.LocalTime this4286 G__4287 G__4288) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4287) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4288)) (clojure.core/let [G__4287 (clojure.core/long G__4287) G__4288 ^\"java.time.temporal.TemporalUnit\" G__4288] (.minus ^java.time.LocalTime this4286 G__4287 G__4288)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4287) (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4288)) (clojure.core/let [G__4287 (clojure.core/long G__4287) G__4288 ^\"java.time.temporal.TemporalUnit\" G__4288] (.minus ^java.time.LocalTime this4286 G__4287 G__4288)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn plus-hours {:arglists (quote ([\"java.time.LocalTime\" \"long\"]))} (^java.time.LocalTime [^java.time.LocalTime this4289 ^long long4290] (.plusHours this4289 long4290)))\r\n(clojure.core/defn to-second-of-day {:arglists (quote ([\"java.time.LocalTime\"]))} (^java.lang.Integer [^java.time.LocalTime this4291] (.toSecondOfDay this4291)))\r\n(clojure.core/defn get-long {:arglists (quote ([\"java.time.LocalTime\" \"java.time.temporal.TemporalField\"]))} (^long [^java.time.LocalTime this4292 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4293] (.getLong this4292 java-time-temporal-TemporalField4293)))\r\n(clojure.core/defn with-nano {:arglists (quote ([\"java.time.LocalTime\" \"int\"]))} (^java.time.LocalTime [^java.time.LocalTime this4294 ^java.lang.Integer int4295] (.withNano this4294 int4295)))\r\n(clojure.core/defn until {:arglists (quote ([\"java.time.LocalTime\" \"java.time.temporal.Temporal\" \"java.time.temporal.TemporalUnit\"]))} (^long [^java.time.LocalTime this4296 ^java.time.temporal.Temporal java-time-temporal-Temporal4297 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4298] (.until this4296 java-time-temporal-Temporal4297 java-time-temporal-TemporalUnit4298)))\r\n(clojure.core/defn of-nano-of-day {:arglists (quote ([\"long\"]))} (^java.time.LocalTime [^long long4299] (. java.time.LocalTime ofNanoOfDay long4299)))\r\n(clojure.core/defn from {:arglists (quote ([\"java.time.temporal.TemporalAccessor\"]))} (^java.time.LocalTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4300] (. java.time.LocalTime from java-time-temporal-TemporalAccessor4300)))\r\n(clojure.core/defn is-after {:arglists (quote ([\"java.time.LocalTime\" \"java.time.LocalTime\"]))} (^java.lang.Boolean [^java.time.LocalTime this4301 ^java.time.LocalTime java-time-LocalTime4302] (.isAfter this4301 java-time-LocalTime4302)))\r\n(clojure.core/defn minus-nanos {:arglists (quote ([\"java.time.LocalTime\" \"long\"]))} (^java.time.LocalTime [^java.time.LocalTime this4303 ^long long4304] (.minusNanos this4303 long4304)))\r\n(clojure.core/defn is-supported {:arglists (quote ([\"java.time.LocalTime\" \"java.time.temporal.TemporalUnit\"] [\"java.time.LocalTime\" \"java.time.temporal.TemporalField\"]))} (^java.lang.Boolean [this4305 G__4306] #? (:cljs (.isSupported ^java.time.LocalTime this4305 G__4306) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalUnit\") G__4306)) (clojure.core/let [G__4306 ^\"java.time.temporal.TemporalUnit\" G__4306] (.isSupported ^java.time.LocalTime this4305 G__4306)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalField\") G__4306)) (clojure.core/let [G__4306 ^\"java.time.temporal.TemporalField\" G__4306] (.isSupported ^java.time.LocalTime this4305 G__4306)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn parse {:arglists (quote ([\"java.lang.CharSequence\" \"java.time.format.DateTimeFormatter\"] [\"java.lang.CharSequence\"]))} (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence4307 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4308] (. java.time.LocalTime parse java-lang-CharSequence4307 java-time-format-DateTimeFormatter4308)) (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence4309] (. java.time.LocalTime parse java-lang-CharSequence4309)))\r\n(clojure.core/defn with-second {:arglists (quote ([\"java.time.LocalTime\" \"int\"]))} (^java.time.LocalTime [^java.time.LocalTime this4310 ^java.lang.Integer int4311] (.withSecond this4310 int4311)))\r\n(clojure.core/defn get-minute {:arglists (quote ([\"java.time.LocalTime\"]))} (^java.lang.Integer [^java.time.LocalTime this4312] (jti/getter minute this4312)))\r\n(clojure.core/defn hash-code {:arglists (quote ([\"java.time.LocalTime\"]))} (^java.lang.Integer [^java.time.LocalTime this4313] (.hashCode this4313)))\r\n(clojure.core/defn adjust-into {:arglists (quote ([\"java.time.LocalTime\" \"java.time.temporal.Temporal\"]))} (^java.time.temporal.Temporal [^java.time.LocalTime this4314 ^java.time.temporal.Temporal java-time-temporal-Temporal4315] (.adjustInto this4314 java-time-temporal-Temporal4315)))\r\n(clojure.core/defn with {:arglists (quote ([\"java.time.LocalTime\" \"java.time.temporal.TemporalAdjuster\"] [\"java.time.LocalTime\" \"java.time.temporal.TemporalAdjuster\"] [\"java.time.LocalTime\" \"java.time.temporal.TemporalField\" \"long\"] [\"java.time.LocalTime\" \"java.time.temporal.TemporalField\" \"long\"]))} (^java.lang.Object [this4316 G__4317] #? (:cljs (.with ^java.time.LocalTime this4316 G__4317) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAdjuster\") G__4317)) (clojure.core/let [G__4317 ^\"java.time.temporal.TemporalAdjuster\" G__4317] (.with ^java.time.LocalTime this4316 G__4317)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalAdjuster\") G__4317)) (clojure.core/let [G__4317 ^\"java.time.temporal.TemporalAdjuster\" G__4317] (.with ^java.time.LocalTime this4316 G__4317)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.lang.Object [this4318 G__4319 G__4320] #? (:cljs (.with ^java.time.LocalTime this4318 G__4319 G__4320) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalField\") G__4319) (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4320)) (clojure.core/let [G__4319 ^\"java.time.temporal.TemporalField\" G__4319 G__4320 (clojure.core/long G__4320)] (.with ^java.time.LocalTime this4318 G__4319 G__4320)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.temporal.TemporalField\") G__4319) (clojure.core/instance? (java.lang.Class/forName \"java.lang.Long\") G__4320)) (clojure.core/let [G__4319 ^\"java.time.temporal.TemporalField\" G__4319 G__4320 (clojure.core/long G__4320)] (.with ^java.time.LocalTime this4318 G__4319 G__4320)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn now {:arglists (quote ([\"java.time.Clock\"] [] [\"java.time.ZoneId\"]))} (^java.time.LocalTime [G__4322] #? (:cljs (. java.time.LocalTime now G__4322) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.Clock\") G__4322)) (clojure.core/let [G__4322 ^\"java.time.Clock\" G__4322] (. java.time.LocalTime now G__4322)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.ZoneId\") G__4322)) (clojure.core/let [G__4322 ^\"java.time.ZoneId\" G__4322] (. java.time.LocalTime now G__4322)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))) (^java.time.LocalTime [] (. java.time.LocalTime now)))\r\n(clojure.core/defn compare-to {:arglists (quote ([\"java.time.LocalTime\" \"java.lang.Object\"] [\"java.time.LocalTime\" \"java.time.LocalTime\"]))} (^java.lang.Integer [this4323 G__4324] #? (:cljs (.compareTo ^java.time.LocalTime this4323 G__4324) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.lang.Object\") G__4324)) (clojure.core/let [G__4324 ^\"java.lang.Object\" G__4324] (.compareTo ^java.time.LocalTime this4323 G__4324)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName \"java.time.LocalTime\") G__4324)) (clojure.core/let [G__4324 ^\"java.time.LocalTime\" G__4324] (.compareTo ^java.time.LocalTime this4323 G__4324)) :else (throw (java.lang.IllegalArgumentException. \"no corresponding java.time method with these args\"))))))\r\n(clojure.core/defn to-nano-of-day {:arglists (quote ([\"java.time.LocalTime\"]))} (^long [^java.time.LocalTime this4325] (.toNanoOfDay this4325)))\r\n(clojure.core/defn plus-seconds {:arglists (quote ([\"java.time.LocalTime\" \"long\"]))} (^java.time.LocalTime [^java.time.LocalTime this4326 ^long long4327] (.plusSeconds this4326 long4327)))\r\n(clojure.core/defn get {:arglists (quote ([\"java.time.LocalTime\" \"java.time.temporal.TemporalField\"]))} (^java.lang.Integer [^java.time.LocalTime this4328 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4329] (.get this4328 java-time-temporal-TemporalField4329)))\r\n(clojure.core/defn of-second-of-day {:arglists (quote ([\"long\"]))} (^java.time.LocalTime [^long long4330] (. java.time.LocalTime ofSecondOfDay long4330)))\r\n(clojure.core/defn equals {:arglists (quote ([\"java.time.LocalTime\" \"java.lang.Object\"]))} (^java.lang.Boolean [^java.time.LocalTime this4331 ^java.lang.Object java-lang-Object4332] (.equals this4331 java-lang-Object4332)))\r\n(clojure.core/defn format {:arglists (quote ([\"java.time.LocalTime\" \"java.time.format.DateTimeFormatter\"]))} (^java.lang.String [^java.time.LocalTime this4333 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4334] (.format this4333 java-time-format-DateTimeFormatter4334)))\r\n"]}