{"version":3,"sources":["shadow/cljs/devtools/client/shared.cljs"],"mappings":"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","names":["shadow$cljs$devtools$client$shared$IHostSpecific$do_repl_init$dyn","x__4428__auto__","m__4429__auto__","shadow.cljs.devtools.client.shared/do-repl-init","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","shadow$cljs$devtools$client$shared$IHostSpecific$do_repl_require$dyn","shadow.cljs.devtools.client.shared/do-repl-require","shadow$cljs$devtools$client$shared$IHostSpecific$do_invoke$dyn","shadow.cljs.devtools.client.shared/do-invoke","shadow.cljs.devtools.client.shared/IHostSpecific","this","action","done","error","require-msg","invoke-msg","js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.shared","js/shadow.cljs.devtools.client.shared.runtime-ref","shadow.cljs.devtools.client.shared/runtime-ref","cljs.core.atom","js/shadow.cljs.devtools.client.shared.extensions-ref","shadow.cljs.devtools.client.shared/extensions-ref","shadow.cljs.devtools.client.shared/start-all-extensions!","cljs.core/deref","started-set","cljs.core/set","cljs.core/keys","exts","ext-set","pending-set","clojure.set.difference","cljs.core/empty?","cljs.core.reduce","ext-id","map__35065","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","depends-on","init-fn","ext","cljs.core/some","started","G__35067","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.disj","shadow.cljs.devtools.client.shared/init-extension!","stop-fn","temp__5739__auto__","map__35068","old","cljs.core/dissoc","shadow.cljs.devtools.client.shared/transit-read","data","t","cognitect.transit.reader","cognitect.transit/read","shadow.cljs.devtools.client.shared/transit-str","obj","w","cognitect.transit.writer","cognitect.transit/write","shadow.cljs.devtools.client.shared/continue!","state","shadow.cljs.devtools.client.shared/interpret-actions","p__35070","map__35071","shadow.cljs.devtools.client.shared/abort!","callback","ex","cljs.core.assoc","cljs.core.dissoc","G__35073","shadow.cljs.devtools.client.shared/handle-invoke","runtime","res","cljs.core.update","cljs.core/conj","shadow.cljs.devtools.client.shared/handle-repl-invoke","e35074","ret","cljs.core/*3","cljs.core/*2","cljs.core/*1","e","cljs.core/*e","p__35075","p__35076","map__35077","map__35078","shadow.cljs.devtools.client.shared/interpret-action","type","G__35081","cljs.core/Keyword","map__35082","ns","map__35084","internal","sources","cljs.core/into","G__35086","cljs.core/not","e35087","repl","cljs.core.get_in","G__35088","cljs.core.ex_info","p__35089","map__35090","queue","warnings","map__35092","js/Date.now","G__35094","cljs.core/seq","map__35095","G__35097","cljs.core/first","cljs.core/rest","p__35098","map__35099","shadow.cljs.devtools.client.shared/setup-actions","input","actions","msg","cljs.core.mapcat","cljs.core/vec","this__4380__auto__","k__4381__auto__","this__4382__auto__","k35102","else__4383__auto__","G__35106","state-ref","send-fn","close-fn","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","ret__4402__auto__","p__35107","vec__35108","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__35101","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this35103","other35104","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__35117","cljs.core/keyword-identical?","expr__35118","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","shadow.cljs.devtools.client.shared/Runtime","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__35105","extmap__4419__auto__","G__35120","cljs.core/record?","shadow.cljs.devtools.client.shared/->Runtime","shadow.cljs.devtools.client.shared/map->Runtime","s","e35116","key","spec","shadow.remote.runtime.shared/add-extension","shadow.remote.runtime.shared/del-extension","shadow.remote.runtime.shared.call","shadow.cljs.devtools.client.env/worker-client-id","p__35111","map__35112","ex-oid","ex-client-id","report","G__35114","G__35115","js/shadow.cljs.devtools.client.shared.print-subs","shadow.cljs.devtools.client.shared/print-subs","p__35121","map__35122","shadow.cljs.devtools.client.shared/init-runtime!","shadow.remote.runtime.shared/add-defaults","obj-support","shadow.remote.runtime.obj-support/start","tap-support","shadow.remote.runtime.tap-support/start","eval-support","shadow.remote.runtime.eval-support/start","interval","js/setInterval","shadow.remote.runtime.shared/run-on-idle","stop","js/clearTimeout","shadow.remote.runtime.eval-support/stop","shadow.remote.runtime.tap-support/stop","shadow.remote.runtime.obj-support/stop","js/goog.global.cljs_eval","opts","cljs.core/map?","cljs.core/object?","cljs.core.symbol","goog.object/get","js/Promise","resolve","reject","shadow.remote.runtime.api/cljs-eval","p__35124","map__35125","result","results","info","G__35127","cljs.core/last","cljs.core/reset!","shadow.remote.runtime.api/add-extension","p__35128","map__35129","from","shadow.remote.runtime.shared/relay-msg","p__35131","map__35132","cljs.core/disj","p__35134","map__35135","event-op","client-id","p__35137","map__35138","shadow.cljs.devtools.client.env/reset-print-fns!","shadow.cljs.devtools.client.env/set-print-fns!","stream","text","subs","cljs.core.keyword","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.shared/stop-runtime!","shadow.remote.runtime.shared/trigger-on-disconnect!","map__35140"],"sourcesContent":["(ns shadow.cljs.devtools.client.shared\n  (:require\n    [goog.object :as gobj]\n    [cognitect.transit :as transit]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.remote.runtime.api :as api]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.cljs.js-builtins]\n    [shadow.remote.runtime.obj-support :as obj-support]\n    [shadow.remote.runtime.tap-support :as tap-support]\n    [shadow.remote.runtime.eval-support :as eval-support]\n    [clojure.set :as set]\n    [shadow.remote.runtime.api :as p]))\n\n(defprotocol IHostSpecific\n  (do-repl-init [this action done error])\n  (do-repl-require [this require-msg done error])\n  (do-invoke [this invoke-msg]))\n\n(defonce runtime-ref (atom nil))\n(defonce extensions-ref (atom {}))\n\n(defn start-all-extensions! []\n  (let [started-set (set (keys @runtime-ref))\n        exts @extensions-ref\n        ext-set (set (keys exts))\n        pending-set (set/difference ext-set started-set)]\n\n    ;; FIXME: this is dumb, should properly sort things in dependency order\n    ;; instead of looping over\n    (loop [pending-set pending-set]\n      (cond\n        (empty? pending-set)\n        ::done!\n\n        :else\n        (-> (reduce\n              (fn [pending-set ext-id]\n                (let [{:keys [depends-on init-fn] :as ext} (get exts ext-id)]\n                  (if (some pending-set depends-on)\n                    pending-set\n                    (let [started (init-fn @runtime-ref)]\n                      (swap! runtime-ref assoc ext-id started)\n                      (disj pending-set ext-id)))))\n              pending-set\n              pending-set)\n            (recur))))))\n\n;; generic extension mechanism for things that don't have access to the runtime\n;; and don't want to worry about the lifecycle\n(defn init-extension! [ext-id depends-on init-fn stop-fn]\n  (when-some [started (get @runtime-ref ext-id)]\n    (let [{:keys [stop-fn] :as old} (get @extensions-ref ext-id)]\n      (stop-fn started)\n      (swap! runtime-ref dissoc ext-id)))\n\n  (swap! extensions-ref assoc ext-id {:ext-id ext-id\n                                      :depends-on depends-on\n                                      :init-fn init-fn\n                                      :stop-fn stop-fn})\n\n  ;; in case runtime is already started\n  (when @runtime-ref\n    (start-all-extensions!)))\n\n\n(defn transit-read [data]\n  (let [t (transit/reader :json)]\n    (transit/read t data)))\n\n(defn transit-str [obj]\n  (let [w (transit/writer :json)]\n    (transit/write w obj)))\n\n(declare interpret-actions)\n\n(defn continue! [state]\n  (interpret-actions state))\n\n(defn abort! [{:keys [callback] :as state} action ex]\n  (-> state\n      (assoc :result :runtime-error\n             :ex ex\n             :ex-action action)\n      (dissoc :runtime :callback)\n      (callback)))\n\n(defn handle-invoke [state runtime action]\n  (let [res (do-invoke runtime action)]\n    (update state :results conj res)))\n\n(defn handle-repl-invoke [state runtime action]\n  (try\n    (let [ret (do-invoke runtime action)]\n\n      ;; FIXME: these are nonsense with multiple sessions. refactor this properly\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (if (:internal action)\n        state\n        (update state :results conj ret)))\n\n    (catch :default e\n      (set! *e e)\n      (throw e))))\n\n(defn interpret-action\n  [{:keys [runtime] :as state}\n   {:keys [type] :as action}]\n  (case type\n    :repl/init\n    (do-repl-init runtime action\n      (fn []\n        (swap! (:state-ref runtime) assoc :init-complete true)\n        (continue! state))\n      (fn [ex]\n        (abort! state action ex)))\n\n    :repl/set-ns\n    (let [{:keys [ns]} action]\n      (-> state\n          (assoc :ns ns)\n          (update :results conj nil)\n          (continue!)))\n\n    :repl/require\n    (let [{:keys [internal]} action]\n      (do-repl-require runtime action\n        (fn [sources]\n          (-> state\n              (update :loaded-sources into sources)\n              (cond->\n                ;; (require '...) has a result\n                ;; (ns foo.bar (:require ...)) does not since ns has the result\n                (not internal)\n                (update :results conj nil))\n              (continue!)))\n        (fn [ex]\n          (abort! state action ex))))\n\n    :repl/invoke\n    (try\n      (let [repl (get-in state [:input :repl])]\n        (-> state\n            (cond->\n              repl\n              (handle-repl-invoke runtime action)\n              (not repl)\n              (handle-invoke runtime action))\n            (continue!)))\n      (catch :default ex\n        (abort! state action ex)))\n\n    (throw (ex-info \"unhandled repl action\" {:state state :action action}))))\n\n(defn interpret-actions [{:keys [queue warnings] :as state}]\n  (cond\n    (empty? queue)\n    (let [{:keys [callback]} state]\n      (-> state\n          (dissoc :runtime :callback :queue)\n          (assoc :time-finish (js/Date.now))\n          (callback)))\n\n    ;; FIXME: let client input decide if eval should happen regardless of warnings\n    (seq warnings)\n    (let [{:keys [callback]} state]\n      (-> state\n          (dissoc :runtime :callback :queue)\n          (assoc :result :warnings\n                 :warnings warnings\n                 :time-finish (js/Date.now))\n          (callback)))\n\n    :else\n    (let [action (first queue)\n          state (update state :queue rest)]\n      (interpret-action state action))))\n\n(defn setup-actions [runtime input {:keys [actions] :as msg} callback]\n  {:runtime runtime\n   :callback callback\n   :input input\n   :msg msg\n   :time-start (js/Date.now) ;; time used for prepl\n   :queue actions\n   :result :ok\n   :results []\n   :ns (:ns input)\n   :warnings\n   (->> actions\n        (mapcat :warnings)\n        (vec))\n   :loaded-sources []})\n\n(defrecord Runtime [state-ref send-fn close-fn]\n  api/IRuntime\n  (relay-msg [this msg]\n    (let [s (try\n              (transit-str msg)\n              (catch :default e\n                (throw (ex-info \"failed to encode relay msg\" {:msg msg}))))]\n      (send-fn s)))\n\n  (add-extension [runtime key spec]\n    (shared/add-extension runtime key spec))\n  (del-extension [runtime key]\n    (shared/del-extension runtime key))\n\n  api/IEvalCLJS\n  (-cljs-eval [this input callback]\n    ;; FIXME: define what input is supposed to look like\n    ;; {:code \"(some-cljs)\" :ns foo.bar}\n    (shared/call this\n      {:op :cljs-compile\n       :to env/worker-client-id\n       :input input\n       :include-init (not (:init-complete @state-ref))}\n\n      {:cljs-compile-result\n       (fn [msg]\n         (-> (setup-actions this input msg callback)\n             (interpret-actions)))\n\n       ;; going from cljs specific error\n       :cljs-compile-error\n       (fn [{:keys [ex-oid ex-client-id report]}]\n         (callback\n           ;; to more generic error, that CLJ can also use\n           {:result :compile-error\n            :ex-oid ex-oid\n            :ex-client-id ex-client-id\n            :report report}))\n\n       :client-not-found\n       (fn [msg]\n         (callback\n           {:result :worker-not-found}))})))\n\n(defonce print-subs (atom #{}))\n\n(defn init-runtime! [{:keys [state-ref close-fn] :as runtime}]\n  (shared/add-defaults runtime)\n\n  (let [obj-support\n        (obj-support/start runtime)\n\n        tap-support\n        (tap-support/start runtime obj-support)\n\n        eval-support\n        (eval-support/start runtime obj-support)\n\n        interval\n        (js/setInterval #(shared/run-on-idle state-ref) 1000)\n\n        stop\n        (fn []\n          (js/clearTimeout interval)\n          (eval-support/stop eval-support)\n          (tap-support/stop tap-support)\n          (obj-support/stop obj-support)\n          (close-fn))]\n\n    ;; test exporting this into the global so potential consumers\n    ;; don't have to worry about importing a namespace that shouldn't be in release builds\n    ;; can't bind cljs.core/eval since that expects a CLJ form not a string\n    ;; which we could technically also support but I don't want to assume the user\n    ;; knows how to read properly. just accepting a string and optional ns is much easier\n    (set! js/goog.global.cljs_eval\n      (fn [input opts]\n        (let [input\n              (cond\n                ;; preferred when calling from CLJS\n                (map? input)\n                input\n\n                ;; just calling with code\n                (and (string? input) (not opts))\n                {:code input :ns 'cljs.user}\n\n                ;; when calling from JS {ns: \"cljs.user\"}\n                ;; FIXME: other opts?\n                (and (string? input) (object? opts))\n                {:code input :ns (symbol (gobj/get opts \"ns\"))}\n\n                :else\n                (throw (ex-info \"invalid arguments, call cljs_eval(string, opts-obj) or cljs_eval(map)\" {:input input :opts opts})))]\n\n          (js/Promise.\n            (fn [resolve reject]\n              (api/cljs-eval runtime input\n                (fn [{:keys [result results] :as info}]\n                  (if (= :ok result)\n                    ;; FIXME: option to not throw away multiple results?\n                    ;; user may do cljs_eval(\"1 2 3\") and will only get 3 but we have [1 2 3]\n                    (resolve (last results))\n                    (reject info)))))))))\n\n    (reset! runtime-ref\n      {:runtime runtime\n       :obj-support obj-support\n       :tap-support tap-support\n       :eval-support eval-support\n       :stop stop})\n\n    (p/add-extension runtime\n      ::print-support\n      {:ops\n       {:runtime-print-sub\n        (fn [{:keys [from] :as msg}]\n          (swap! print-subs conj from)\n          (shared/relay-msg runtime\n            {:op :request-notify\n             :notify-op ::runtime-print-disconnect\n             :query [:eq :client-id from]}))\n        :runtime-print-unsub\n        (fn [{:keys [from] :as msg}]\n          (swap! print-subs disj from))\n        ::runtime-print-disconnect\n        (fn [{:keys [event-op client-id]}]\n          (when (= :client-disconnect event-op)\n            (swap! print-subs disj client-id)))}\n\n       ;; just in case the disconnect notify comes after trying to send something\n       :on-client-not-found\n       (fn [{:keys [client-id]}]\n         (swap! print-subs disj client-id))})\n\n    ;; in case this was hot reloaded, restore previous state first\n    (env/reset-print-fns!)\n\n    (env/set-print-fns!\n      (fn [stream text]\n        (let [subs @print-subs]\n          ;; (js/console.log \"print\" stream text subs)\n          (when (seq subs)\n            (shared/relay-msg runtime\n              {:op :runtime-print\n               :to subs\n               :stream stream\n               :text text})))))\n\n    (p/add-extension runtime\n      ::shared\n      {:on-welcome\n       (fn []\n         (shared/relay-msg runtime\n           {:op :request-notify\n            :notify-op ::env/worker-notify\n            :query [:eq :shadow.cljs.model/worker-for (keyword env/build-id)]}))})\n\n    (when (seq @extensions-ref)\n      (start-all-extensions!))))\n\n(defn stop-runtime! [e]\n  (when-some [runtime @runtime-ref]\n    (shared/trigger-on-disconnect! (:runtime runtime) e)\n    (reset! runtime-ref nil)\n    (let [{:keys [stop]} runtime]\n      (stop))))\n\n"]}