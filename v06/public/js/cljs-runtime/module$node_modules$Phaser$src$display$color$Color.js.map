{
"version":3,
"file":"module$node_modules$Phaser$src$display$color$Color.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/Phaser/src/display/color/Color.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$display$color$Color\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetColor = require('./GetColor');\r\nvar GetColor32 = require('./GetColor32');\r\nvar HSVToRGB = require('./HSVToRGB');\r\nvar RGBToHSV = require('./RGBToHSV');\r\n\r\n/**\r\n * @classdesc\r\n * The Color class holds a single color value and allows for easy modification and reading of it.\r\n *\r\n * @class Color\r\n * @memberOf Phaser.Display\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {integer} [red=0] - The red color value. A number between 0 and 255.\r\n * @param {integer} [green=0] - The green color value. A number between 0 and 255.\r\n * @param {integer} [blue=0] - The blue color value. A number between 0 and 255.\r\n * @param {integer} [alpha=255] - The alpha value. A number between 0 and 255.\r\n */\r\nvar Color = new Class({\r\n\r\n    initialize:\r\n\r\n    function Color (red, green, blue, alpha)\r\n    {\r\n        if (red === undefined) { red = 0; }\r\n        if (green === undefined) { green = 0; }\r\n        if (blue === undefined) { blue = 0; }\r\n        if (alpha === undefined) { alpha = 255; }\r\n\r\n        /**\r\n         * The internal red color value.\r\n         *\r\n         * @name Phaser.Display.Color#r\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.r = 0;\r\n\r\n        /**\r\n         * The internal green color value.\r\n         *\r\n         * @name Phaser.Display.Color#g\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.g = 0;\r\n\r\n        /**\r\n         * The internal blue color value.\r\n         *\r\n         * @name Phaser.Display.Color#b\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.b = 0;\r\n\r\n        /**\r\n         * The internal alpha color value.\r\n         *\r\n         * @name Phaser.Display.Color#a\r\n         * @type {number}\r\n         * @private\r\n         * @default 255\r\n         * @since 3.0.0\r\n         */\r\n        this.a = 255;\r\n\r\n        /**\r\n         * The hue color value. A number between 0 and 1.\r\n         * This is the base color.\r\n         *\r\n         * @name Phaser.Display.Color#_h\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._h = 0;\r\n\r\n        /**\r\n         * The saturation color value. A number between 0 and 1.\r\n         * This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n         *\r\n         * @name Phaser.Display.Color#_s\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._s = 0;\r\n\r\n        /**\r\n         * The lightness color value. A number between 0 and 1.\r\n         * This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n         *\r\n         * @name Phaser.Display.Color#_v\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._v = 0;\r\n\r\n        /**\r\n         * Is this color update locked?\r\n         *\r\n         * @name Phaser.Display.Color#_locked\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._locked = false;\r\n\r\n        /**\r\n         * An array containing the calculated color values for WebGL use.\r\n         *\r\n         * @name Phaser.Display.Color#gl\r\n         * @type {number[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.gl = [ 0, 0, 0, 1 ];\r\n\r\n        /**\r\n         * Pre-calculated internal color value.\r\n         *\r\n         * @name Phaser.Display.Color#_color\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._color = 0;\r\n\r\n        /**\r\n         * Pre-calculated internal color32 value.\r\n         *\r\n         * @name Phaser.Display.Color#_color32\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._color32 = 0;\r\n\r\n        /**\r\n         * Pre-calculated internal color rgb string value.\r\n         *\r\n         * @name Phaser.Display.Color#_rgba\r\n         * @type {string}\r\n         * @private\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this._rgba = '';\r\n\r\n        this.setTo(red, green, blue, alpha);\r\n    },\r\n\r\n    /**\r\n     * Sets this color to be transparent. Sets all values to zero.\r\n     *\r\n     * @method Phaser.Display.Color#transparent\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    transparent: function ()\r\n    {\r\n        this._locked = true;\r\n\r\n        this.red = 0;\r\n        this.green = 0;\r\n        this.blue = 0;\r\n        this.alpha = 0;\r\n\r\n        this._locked = false;\r\n\r\n        return this.update(true);\r\n    },\r\n\r\n    /**\r\n     * Sets the color of this Color component.\r\n     *\r\n     * @method Phaser.Display.Color#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} red - The red color value. A number between 0 and 255.\r\n     * @param {integer} green - The green color value. A number between 0 and 255.\r\n     * @param {integer} blue - The blue color value. A number between 0 and 255.\r\n     * @param {integer} [alpha=255] - The alpha value. A number between 0 and 255.\r\n     * @param {boolean} [updateHSV=true] - Update the HSV values after setting the RGB values?\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    setTo: function (red, green, blue, alpha, updateHSV)\r\n    {\r\n        if (alpha === undefined) { alpha = 255; }\r\n        if (updateHSV === undefined) { updateHSV = true; }\r\n\r\n        this._locked = true;\r\n\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n        this.alpha = alpha;\r\n\r\n        this._locked = false;\r\n\r\n        return this.update(updateHSV);\r\n    },\r\n\r\n    /**\r\n     * Sets the red, green, blue and alpha GL values of this Color component.\r\n     *\r\n     * @method Phaser.Display.Color#setGLTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} red - The red color value. A number between 0 and 1.\r\n     * @param {number} green - The green color value. A number between 0 and 1.\r\n     * @param {number} blue - The blue color value. A number between 0 and 1.\r\n     * @param {number} [alpha=1] - The alpha value. A number between 0 and 1.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    setGLTo: function (red, green, blue, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        this._locked = true;\r\n\r\n        this.redGL = red;\r\n        this.greenGL = green;\r\n        this.blueGL = blue;\r\n        this.alphaGL = alpha;\r\n\r\n        this._locked = false;\r\n\r\n        return this.update(true);\r\n    },\r\n\r\n    /**\r\n     * Sets the color based on the color object given.\r\n     *\r\n     * @method Phaser.Display.Color#setFromRGB\r\n     * @since 3.0.0\r\n     *\r\n     * @param {InputColorObject} color - An object containing `r`, `g`, `b` and optionally `a` values in the range 0 to 255.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    setFromRGB: function (color)\r\n    {\r\n        this._locked = true;\r\n\r\n        this.red = color.r;\r\n        this.green = color.g;\r\n        this.blue = color.b;\r\n\r\n        if (color.hasOwnProperty('a'))\r\n        {\r\n            this.alpha = color.a;\r\n        }\r\n\r\n        this._locked = false;\r\n\r\n        return this.update(true);\r\n    },\r\n\r\n    /**\r\n     * Sets the color based on the hue, saturation and lightness values given.\r\n     *\r\n     * @method Phaser.Display.Color#setFromHSV\r\n     * @since 3.13.0\r\n     *\r\n     * @param {number} h - The hue, in the range 0 - 1. This is the base color.\r\n     * @param {number} s - The saturation, in the range 0 - 1. This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n     * @param {number} v - The value, in the range 0 - 1. This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    setFromHSV: function (h, s, v)\r\n    {\r\n        return HSVToRGB(h, s, v, this);\r\n    },\r\n\r\n    /**\r\n     * Updates the internal cache values.\r\n     *\r\n     * @method Phaser.Display.Color#update\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    update: function (updateHSV)\r\n    {\r\n        if (updateHSV === undefined) { updateHSV = false; }\r\n\r\n        if (this._locked)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        var r = this.r;\r\n        var g = this.g;\r\n        var b = this.b;\r\n        var a = this.a;\r\n\r\n        this._color = GetColor(r, g, b);\r\n        this._color32 = GetColor32(r, g, b, a);\r\n        this._rgba = 'rgba(' + r + ',' + g + ',' + b + ',' + (a / 255) + ')';\r\n\r\n        if (updateHSV)\r\n        {\r\n            RGBToHSV(r, g, b, this);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Updates the internal hsv cache values.\r\n     *\r\n     * @method Phaser.Display.Color#updateHSV\r\n     * @private\r\n     * @since 3.13.0\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    updateHSV: function ()\r\n    {\r\n        var r = this.r;\r\n        var g = this.g;\r\n        var b = this.b;\r\n\r\n        RGBToHSV(r, g, b, this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns a new Color component using the values from this one.\r\n     *\r\n     * @method Phaser.Display.Color#clone\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Display.Color} A new Color object.\r\n     */\r\n    clone: function ()\r\n    {\r\n        return new Color(this.r, this.g, this.b, this.a);\r\n    },\r\n\r\n    /**\r\n     * Sets this Color object to be grayscaled based on the shade value given.\r\n     *\r\n     * @method Phaser.Display.Color#gray\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} shade - A value between 0 and 255.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    gray: function (shade)\r\n    {\r\n        return this.setTo(shade, shade, shade);\r\n    },\r\n\r\n    /**\r\n     * Sets this Color object to be a random color between the `min` and `max` values given.\r\n     *\r\n     * @method Phaser.Display.Color#random\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} [min=0] - The minimum random color value. Between 0 and 255.\r\n     * @param {integer} [max=255] - The maximum random color value. Between 0 and 255.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    random: function (min, max)\r\n    {\r\n        if (min === undefined) { min = 0; }\r\n        if (max === undefined) { max = 255; }\r\n\r\n        var r = Math.floor(min + Math.random() * (max - min));\r\n        var g = Math.floor(min + Math.random() * (max - min));\r\n        var b = Math.floor(min + Math.random() * (max - min));\r\n\r\n        return this.setTo(r, g, b);\r\n    },\r\n\r\n    /**\r\n     * Sets this Color object to be a random grayscale color between the `min` and `max` values given.\r\n     *\r\n     * @method Phaser.Display.Color#randomGray\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} [min=0] - The minimum random color value. Between 0 and 255.\r\n     * @param {integer} [max=255] - The maximum random color value. Between 0 and 255.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    randomGray: function (min, max)\r\n    {\r\n        if (min === undefined) { min = 0; }\r\n        if (max === undefined) { max = 255; }\r\n\r\n        var s = Math.floor(min + Math.random() * (max - min));\r\n\r\n        return this.setTo(s, s, s);\r\n    },\r\n\r\n    /**\r\n     * Increase the saturation of this Color by the percentage amount given.\r\n     * The saturation is the amount of the base color in the hue.\r\n     *\r\n     * @method Phaser.Display.Color#saturate\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    saturate: function (amount)\r\n    {\r\n        this.s += amount / 100;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Decrease the saturation of this Color by the percentage amount given.\r\n     * The saturation is the amount of the base color in the hue.\r\n     *\r\n     * @method Phaser.Display.Color#desaturate\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    desaturate: function (amount)\r\n    {\r\n        this.s -= amount / 100;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Increase the lightness of this Color by the percentage amount given.\r\n     *\r\n     * @method Phaser.Display.Color#lighten\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    lighten: function (amount)\r\n    {\r\n        this.v += amount / 100;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Decrease the lightness of this Color by the percentage amount given.\r\n     *\r\n     * @method Phaser.Display.Color#darken\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    darken: function (amount)\r\n    {\r\n        this.v -= amount / 100;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Brighten this Color by the percentage amount given.\r\n     *\r\n     * @method Phaser.Display.Color#brighten\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    brighten: function (amount)\r\n    {\r\n        var r = this.r;\r\n        var g = this.g;\r\n        var b = this.b;\r\n\r\n        r = Math.max(0, Math.min(255, r - Math.round(255 * - (amount / 100))));\r\n        g = Math.max(0, Math.min(255, g - Math.round(255 * - (amount / 100))));\r\n        b = Math.max(0, Math.min(255, b - Math.round(255 * - (amount / 100))));\r\n\r\n        return this.setTo(r, g, b);\r\n    },\r\n\r\n    /**\r\n     * The color of this Color component, not including the alpha channel.\r\n     *\r\n     * @name Phaser.Display.Color#color\r\n     * @type {number}\r\n     * @readOnly\r\n     * @since 3.0.0\r\n     */\r\n    color: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._color;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The color of this Color component, including the alpha channel.\r\n     *\r\n     * @name Phaser.Display.Color#color32\r\n     * @type {number}\r\n     * @readOnly\r\n     * @since 3.0.0\r\n     */\r\n    color32: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._color32;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The color of this Color component as a string which can be used in CSS color values.\r\n     *\r\n     * @name Phaser.Display.Color#rgba\r\n     * @type {string}\r\n     * @readOnly\r\n     * @since 3.0.0\r\n     */\r\n    rgba: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._rgba;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The red color value, normalized to the range 0 to 1.\r\n     *\r\n     * @name Phaser.Display.Color#redGL\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    redGL: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.gl[0];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.gl[0] = Math.min(Math.abs(value), 1);\r\n\r\n            this.r = Math.floor(this.gl[0] * 255);\r\n\r\n            this.update(true);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The green color value, normalized to the range 0 to 1.\r\n     *\r\n     * @name Phaser.Display.Color#greenGL\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    greenGL: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.gl[1];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.gl[1] = Math.min(Math.abs(value), 1);\r\n\r\n            this.g = Math.floor(this.gl[1] * 255);\r\n\r\n            this.update(true);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The blue color value, normalized to the range 0 to 1.\r\n     *\r\n     * @name Phaser.Display.Color#blueGL\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    blueGL: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.gl[2];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.gl[2] = Math.min(Math.abs(value), 1);\r\n\r\n            this.b = Math.floor(this.gl[2] * 255);\r\n\r\n            this.update(true);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The alpha color value, normalized to the range 0 to 1.\r\n     *\r\n     * @name Phaser.Display.Color#alphaGL\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    alphaGL: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.gl[3];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.gl[3] = Math.min(Math.abs(value), 1);\r\n\r\n            this.a = Math.floor(this.gl[3] * 255);\r\n\r\n            this.update();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The red color value, normalized to the range 0 to 255.\r\n     *\r\n     * @name Phaser.Display.Color#red\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    red: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.r;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            value = Math.floor(Math.abs(value));\r\n\r\n            this.r = Math.min(value, 255);\r\n\r\n            this.gl[0] = value / 255;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The green color value, normalized to the range 0 to 255.\r\n     *\r\n     * @name Phaser.Display.Color#green\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    green: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.g;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            value = Math.floor(Math.abs(value));\r\n\r\n            this.g = Math.min(value, 255);\r\n\r\n            this.gl[1] = value / 255;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The blue color value, normalized to the range 0 to 255.\r\n     *\r\n     * @name Phaser.Display.Color#blue\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    blue: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.b;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            value = Math.floor(Math.abs(value));\r\n\r\n            this.b = Math.min(value, 255);\r\n\r\n            this.gl[2] = value / 255;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The alpha color value, normalized to the range 0 to 255.\r\n     *\r\n     * @name Phaser.Display.Color#alpha\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    alpha: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.a;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            value = Math.floor(Math.abs(value));\r\n\r\n            this.a = Math.min(value, 255);\r\n\r\n            this.gl[3] = value / 255;\r\n\r\n            this.update();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The hue color value. A number between 0 and 1.\r\n     * This is the base color.\r\n     *\r\n     * @name Phaser.Display.Color#h\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\r\n    h: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._h;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._h = value;\r\n\r\n            HSVToRGB(value, this._s, this._v, this);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The saturation color value. A number between 0 and 1.\r\n     * This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n     *\r\n     * @name Phaser.Display.Color#s\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\r\n    s: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._s;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._s = value;\r\n\r\n            HSVToRGB(this._h, value, this._v, this);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The lightness color value. A number between 0 and 1.\r\n     * This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n     *\r\n     * @name Phaser.Display.Color#v\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\r\n    v: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._v;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._v = value;\r\n\r\n            HSVToRGB(this._h, this._s, value, this);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Color;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","GetColor","GetColor32","HSVToRGB","RGBToHSV","Color","initialize","red","green","blue","alpha","undefined","b","g","r","a","_v","_s","_h","_locked","gl","_color32","_color","_rgba","setTo","transparent","update","updateHSV","setGLTo","redGL","greenGL","blueGL","alphaGL","setFromRGB","color","hasOwnProperty","setFromHSV","h","s","v","clone","gray","shade","random","min","max","Math","floor","randomGray","saturate","amount","desaturate","lighten","darken","brighten","round","get","color32","rgba","set","value","abs"]
}
