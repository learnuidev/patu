shadow$provide.module$node_modules$Phaser$src$curves$Curve=function(global,require,module,exports){global=require("module$node_modules$Phaser$src$utils$Class");var FromPoints=require("module$node_modules$Phaser$src$geom$rectangle$FromPoints"),Rectangle=require("module$node_modules$Phaser$src$geom$rectangle$Rectangle"),Vector2=require("module$node_modules$Phaser$src$math$Vector2");require=new global({initialize:function(type){this.type=type;this.defaultDivisions=5;this.arcLengthDivisions=100;this.cacheArcLengths=
[];this.active=this.needsUpdate=!0;this._tmpVec2A=new Vector2;this._tmpVec2B=new Vector2},draw:function(graphics,pointsTotal){void 0===pointsTotal&&(pointsTotal=32);return graphics.strokePoints(this.getPoints(pointsTotal))},getBounds:function(out,accuracy){out||(out=new Rectangle);void 0===accuracy&&(accuracy=16);var len=this.getLength();accuracy>len&&(accuracy=len/2);return FromPoints(this.getSpacedPoints(Math.max(1,Math.round(len/accuracy))),out)},getDistancePoints:function(distance){var len=this.getLength();
return this.getSpacedPoints(Math.max(1,len/distance))},getEndPoint:function(out){void 0===out&&(out=new Vector2);return this.getPointAt(1,out)},getLength:function(){var lengths=this.getLengths();return lengths[lengths.length-1]},getLengths:function(divisions){void 0===divisions&&(divisions=this.arcLengthDivisions);if(this.cacheArcLengths.length===divisions+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var cache=[],last=this.getPoint(0,this._tmpVec2A),sum=0;cache.push(0);for(var p=
1;p<=divisions;p++){var current=this.getPoint(p/divisions,this._tmpVec2B);sum+=current.distance(last);cache.push(sum);last.copy(current)}return this.cacheArcLengths=cache},getPointAt:function(u,out){u=this.getUtoTmapping(u);return this.getPoint(u,out)},getPoints:function(divisions){void 0===divisions&&(divisions=this.defaultDivisions);for(var points=[],d=0;d<=divisions;d++)points.push(this.getPoint(d/divisions));return points},getRandomPoint:function(out){void 0===out&&(out=new Vector2);return this.getPoint(Math.random(),
out)},getSpacedPoints:function(divisions){void 0===divisions&&(divisions=this.defaultDivisions);for(var points=[],d=0;d<=divisions;d++){var t=this.getUtoTmapping(d/divisions,null,divisions);points.push(this.getPoint(t))}return points},getStartPoint:function(out){void 0===out&&(out=new Vector2);return this.getPointAt(0,out)},getTangent:function(t,out){void 0===out&&(out=new Vector2);var t1=t-1E-4;t+=1E-4;0>t1&&(t1=0);1<t&&(t=1);this.getPoint(t1,this._tmpVec2A);this.getPoint(t,out);return out.subtract(this._tmpVec2A).normalize()},
getTangentAt:function(u,out){u=this.getUtoTmapping(u);return this.getTangent(u,out)},getTFromDistance:function(distance,divisions){return 0>=distance?0:this.getUtoTmapping(0,distance,divisions)},getUtoTmapping:function(u,distance,divisions){divisions=this.getLengths(divisions);var il=divisions.length;distance=distance?Math.min(distance,divisions[il-1]):u*divisions[il-1];for(var low=0,high=il-1,comparison;low<=high;)if(u=Math.floor(low+(high-low)/2),comparison=divisions[u]-distance,0>comparison)low=
u+1;else if(0<comparison)high=u-1;else{high=u;break}u=high;if(divisions[u]===distance)return u/(il-1);low=divisions[u];return(u+(distance-low)/(divisions[u+1]-low))/(il-1)},updateArcLengths:function(){this.needsUpdate=!0;this.getLengths()}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$curves$Curve.js.map
