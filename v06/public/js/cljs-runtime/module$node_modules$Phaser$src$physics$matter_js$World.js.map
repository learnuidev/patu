{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$World.js",
"lineCount":24,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/World.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$World\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Bodies = require('./lib/factory/Bodies');\r\nvar Class = require('../../utils/Class');\r\nvar Common = require('./lib/core/Common');\r\nvar Composite = require('./lib/body/Composite');\r\nvar Engine = require('./lib/core/Engine');\r\nvar EventEmitter = require('eventemitter3');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar MatterBody = require('./lib/body/Body');\r\nvar MatterEvents = require('./lib/core/Events');\r\nvar MatterTileBody = require('./MatterTileBody');\r\nvar MatterWorld = require('./lib/body/World');\r\nvar Vector = require('./lib/geometry/Vector');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class World\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberOf Phaser.Physics.Matter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Matter World instance belongs.\r\n * @param {object} config - [description]\r\n */\r\nvar World = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function World (scene, config)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * The Scene to which this Matter World instance belongs.\r\n         *\r\n         * @name Phaser.Physics.Matter.World#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * An instance of the MatterJS Engine.\r\n         *\r\n         * @name Phaser.Physics.Matter.World#engine\r\n         * @type {MatterJS.Engine}\r\n         * @since 3.0.0\r\n         */\r\n        this.engine = Engine.create(config);\r\n\r\n        /**\r\n         * A `World` composite object that will contain all simulated bodies and constraints.\r\n         *\r\n         * @name Phaser.Physics.Matter.World#localWorld\r\n         * @type {MatterJS.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.localWorld = this.engine.world;\r\n\r\n        var gravity = GetValue(config, 'gravity', null);\r\n\r\n        if (gravity)\r\n        {\r\n            this.setGravity(gravity.x, gravity.y, gravity.scale);\r\n        }\r\n\r\n        /**\r\n         * An object containing the 4 wall bodies that bound the physics world.\r\n         *\r\n         * @name Phaser.Physics.Matter.World#walls\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.walls = { left: null, right: null, top: null, bottom: null };\r\n\r\n        if (GetFastValue(config, 'setBounds', false))\r\n        {\r\n            var boundsConfig = config['setBounds'];\r\n\r\n            if (typeof boundsConfig === 'boolean')\r\n            {\r\n                this.setBounds();\r\n            }\r\n            else\r\n            {\r\n                var x = GetFastValue(boundsConfig, 'x', 0);\r\n                var y = GetFastValue(boundsConfig, 'y', 0);\r\n                var width = GetFastValue(boundsConfig, 'width', scene.sys.game.config.width);\r\n                var height = GetFastValue(boundsConfig, 'height', scene.sys.game.config.height);\r\n                var thickness = GetFastValue(boundsConfig, 'thickness', 64);\r\n                var left = GetFastValue(boundsConfig, 'left', true);\r\n                var right = GetFastValue(boundsConfig, 'right', true);\r\n                var top = GetFastValue(boundsConfig, 'top', true);\r\n                var bottom = GetFastValue(boundsConfig, 'bottom', true);\r\n\r\n                this.setBounds(x, y, width, height, thickness, left, right, top, bottom);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * A flag that toggles if the world is enabled or not.\r\n         *\r\n         * @name Phaser.Physics.Matter.World#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = GetValue(config, 'enabled', true);\r\n\r\n        /**\r\n         * The correction argument is an optional Number that specifies the time correction factor to apply to the update.\r\n         * This can help improve the accuracy of the simulation in cases where delta is changing between updates.\r\n         * The value of correction is defined as delta / lastDelta, i.e. the percentage change of delta over the last step.\r\n         * Therefore the value is always 1 (no correction) when delta constant (or when no correction is desired, which is the default).\r\n         * See the paper on Time Corrected Verlet for more information.\r\n         *\r\n         * @name Phaser.Physics.Matter.World#correction\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.4.0\r\n         */\r\n        this.correction = GetValue(config, 'correction', 1);\r\n\r\n        /**\r\n         * This function is called every time the core game loop steps, which is bound to the\r\n         * Request Animation Frame frequency unless otherwise modified.\r\n         * \r\n         * The function is passed two values: `time` and `delta`, both of which come from the game step values.\r\n         * \r\n         * It must return a number. This number is used as the delta value passed to Matter.Engine.update.\r\n         * \r\n         * You can override this function with your own to define your own timestep.\r\n         * \r\n         * If you need to update the Engine multiple times in a single game step then call\r\n         * `World.update` as many times as required. Each call will trigger the `getDelta` function.\r\n         * If you wish to have full control over when the Engine updates then see the property `autoUpdate`.\r\n         *\r\n         * You can also adjust the number of iterations that Engine.update performs.\r\n         * Use the Scene Matter Physics config object to set the following properties:\r\n         *\r\n         * positionIterations (defaults to 6)\r\n         * velocityIterations (defaults to 4)\r\n         * constraintIterations (defaults to 2)\r\n         *\r\n         * Adjusting these values can help performance in certain situations, depending on the physics requirements\r\n         * of your game.\r\n         *\r\n         * @name Phaser.Physics.Matter.World#getDelta\r\n         * @type {function}\r\n         * @since 3.4.0\r\n         */\r\n        this.getDelta = GetValue(config, 'getDelta', this.update60Hz);\r\n\r\n        /**\r\n         * Automatically call Engine.update every time the game steps.\r\n         * If you disable this then you are responsible for calling `World.step` directly from your game.\r\n         * If you call `set60Hz` or `set30Hz` then `autoUpdate` is reset to `true`.\r\n         *\r\n         * @name Phaser.Physics.Matter.World#autoUpdate\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.4.0\r\n         */\r\n        this.autoUpdate = GetValue(config, 'autoUpdate', true);\r\n\r\n        /**\r\n         * A flag that controls if the debug graphics will be drawn to or not.\r\n         *\r\n         * @name Phaser.Physics.Matter.World#drawDebug\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.drawDebug = GetValue(config, 'debug', false);\r\n\r\n        /**\r\n         * An instance of the Graphics object the debug bodies are drawn to, if enabled.\r\n         *\r\n         * @name Phaser.Physics.Matter.World#debugGraphic\r\n         * @type {Phaser.GameObjects.Graphics}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugGraphic;\r\n\r\n        /**\r\n         * The default configuration values.\r\n         *\r\n         * @name Phaser.Physics.Matter.World#defaults\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.defaults = {\r\n            debugShowBody: GetFastValue(config, 'debugShowBody', true),\r\n            debugShowStaticBody: GetFastValue(config, 'debugShowStaticBody', true),\r\n            debugShowVelocity: GetFastValue(config, 'debugShowVelocity', true),\r\n            bodyDebugColor: GetFastValue(config, 'debugBodyColor', 0xff00ff),\r\n            bodyDebugFillColor: GetFastValue(config, 'bodyDebugFillColor', 0xe3a7e3),\r\n            staticBodyDebugColor: GetFastValue(config, 'debugBodyColor', 0x0000ff),\r\n            velocityDebugColor: GetFastValue(config, 'debugVelocityColor', 0x00ff00),\r\n            debugShowJoint: GetFastValue(config, 'debugShowJoint', true),\r\n            jointDebugColor: GetFastValue(config, 'debugJointColor', 0x000000),\r\n            debugWireframes: GetFastValue(config, 'debugWireframes', true),\r\n            debugShowInternalEdges: GetFastValue(config, 'debugShowInternalEdges', false),\r\n            debugShowConvexHulls: GetFastValue(config, 'debugShowConvexHulls', false),\r\n            debugConvexHullColor: GetFastValue(config, 'debugConvexHullColor', 0xaaaaaa),\r\n            debugShowSleeping: GetFastValue(config, 'debugShowSleeping', false)\r\n        };\r\n\r\n        if (this.drawDebug)\r\n        {\r\n            this.createDebugGraphic();\r\n        }\r\n\r\n        this.setEventsProxy();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#setEventsProxy\r\n     * @since 3.0.0\r\n     */\r\n    setEventsProxy: function ()\r\n    {\r\n        var _this = this;\r\n        var engine = this.engine;\r\n\r\n        MatterEvents.on(engine, 'beforeUpdate', function (event)\r\n        {\r\n            _this.emit('beforeupdate', event);\r\n        });\r\n\r\n        MatterEvents.on(engine, 'afterUpdate', function (event)\r\n        {\r\n            _this.emit('afterupdate', event);\r\n        });\r\n\r\n        MatterEvents.on(engine, 'collisionStart', function (event)\r\n        {\r\n            var pairs = event.pairs;\r\n            var bodyA;\r\n            var bodyB;\r\n\r\n            if (pairs.length > 0)\r\n            {\r\n                bodyA = pairs[0].bodyA;\r\n                bodyB = pairs[0].bodyB;\r\n            }\r\n\r\n            _this.emit('collisionstart', event, bodyA, bodyB);\r\n        });\r\n\r\n        MatterEvents.on(engine, 'collisionActive', function (event)\r\n        {\r\n            var pairs = event.pairs;\r\n            var bodyA;\r\n            var bodyB;\r\n\r\n            if (pairs.length > 0)\r\n            {\r\n                bodyA = pairs[0].bodyA;\r\n                bodyB = pairs[0].bodyB;\r\n            }\r\n\r\n            _this.emit('collisionactive', event, bodyA, bodyB);\r\n        });\r\n\r\n        MatterEvents.on(engine, 'collisionEnd', function (event)\r\n        {\r\n            var pairs = event.pairs;\r\n            var bodyA;\r\n            var bodyB;\r\n\r\n            if (pairs.length > 0)\r\n            {\r\n                bodyA = pairs[0].bodyA;\r\n                bodyB = pairs[0].bodyB;\r\n            }\r\n\r\n            _this.emit('collisionend', event, bodyA, bodyB);\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Sets the bounds of the Physics world to match the given world pixel dimensions.\r\n     * You can optionally set which 'walls' to create: left, right, top or bottom.\r\n     * If none of the walls are given it will default to use the walls settings it had previously.\r\n     * I.e. if you previously told it to not have the left or right walls, and you then adjust the world size\r\n     * the newly created bounds will also not have the left and right walls.\r\n     * Explicitly state them in the parameters to override this.\r\n     *\r\n     * @method Phaser.Physics.Matter.World#setBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The x coordinate of the top-left corner of the bounds.\r\n     * @param {number} [y=0] - The y coordinate of the top-left corner of the bounds.\r\n     * @param {number} [width] - The width of the bounds.\r\n     * @param {number} [height] - The height of the bounds.\r\n     * @param {number} [thickness=128] - The thickness of each wall, in pixels.\r\n     * @param {boolean} [left=true] - If true will create the left bounds wall.\r\n     * @param {boolean} [right=true] - If true will create the right bounds wall.\r\n     * @param {boolean} [top=true] - If true will create the top bounds wall.\r\n     * @param {boolean} [bottom=true] - If true will create the bottom bounds wall.\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} This Matter World object.\r\n     */\r\n    setBounds: function (x, y, width, height, thickness, left, right, top, bottom)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = this.scene.sys.game.config.width; }\r\n        if (height === undefined) { height = this.scene.sys.game.config.height; }\r\n        if (thickness === undefined) { thickness = 128; }\r\n        if (left === undefined) { left = true; }\r\n        if (right === undefined) { right = true; }\r\n        if (top === undefined) { top = true; }\r\n        if (bottom === undefined) { bottom = true; }\r\n\r\n        this.updateWall(left, 'left', x - thickness, y, thickness, height);\r\n        this.updateWall(right, 'right', x + width, y, thickness, height);\r\n        this.updateWall(top, 'top', x, y - thickness, width, thickness);\r\n        this.updateWall(bottom, 'bottom', x, y + height, width, thickness);\r\n\r\n        return this;\r\n    },\r\n\r\n    //  position = 'left', 'right', 'top' or 'bottom'\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#updateWall\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} add - [description]\r\n     * @param {string} position - [description]\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     */\r\n    updateWall: function (add, position, x, y, width, height)\r\n    {\r\n        var wall = this.walls[position];\r\n\r\n        if (add)\r\n        {\r\n            if (wall)\r\n            {\r\n                MatterWorld.remove(this.localWorld, wall);\r\n            }\r\n\r\n            //  adjust center\r\n            x += (width / 2);\r\n            y += (height / 2);\r\n\r\n            this.walls[position] = this.create(x, y, width, height, { isStatic: true, friction: 0, frictionStatic: 0 });\r\n        }\r\n        else\r\n        {\r\n            if (wall)\r\n            {\r\n                MatterWorld.remove(this.localWorld, wall);\r\n            }\r\n\r\n            this.walls[position] = null;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#createDebugGraphic\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} [description]\r\n     */\r\n    createDebugGraphic: function ()\r\n    {\r\n        var graphic = this.scene.sys.add.graphics({ x: 0, y: 0 });\r\n\r\n        graphic.setDepth(Number.MAX_VALUE);\r\n\r\n        this.debugGraphic = graphic;\r\n\r\n        this.drawDebug = true;\r\n\r\n        return graphic;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#disableGravity\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} This Matter World object.\r\n     */\r\n    disableGravity: function ()\r\n    {\r\n        this.localWorld.gravity.x = 0;\r\n        this.localWorld.gravity.y = 0;\r\n        this.localWorld.gravity.scale = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#setGravity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - [description]\r\n     * @param {number} [y=1] - [description]\r\n     * @param {number} [scale] - [description]\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} This Matter World object.\r\n     */\r\n    setGravity: function (x, y, scale)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 1; }\r\n\r\n        this.localWorld.gravity.x = x;\r\n        this.localWorld.gravity.y = y;\r\n\r\n        if (scale !== undefined)\r\n        {\r\n            this.localWorld.gravity.scale = scale;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a rectangle Matter body and adds it to the world.\r\n     *\r\n     * @method Phaser.Physics.Matter.World#create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of the body in the world.\r\n     * @param {number} y - The vertical position of the body in the world.\r\n     * @param {number} width - The width of the body.\r\n     * @param {number} height - The height of the body.\r\n     * @param {object} options - Optional Matter configuration object.\r\n     *\r\n     * @return {MatterJS.Body} The Matter.js body that was created.\r\n     */\r\n    create: function (x, y, width, height, options)\r\n    {\r\n        var body = Bodies.rectangle(x, y, width, height, options);\r\n\r\n        MatterWorld.add(this.localWorld, body);\r\n\r\n        return body;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(object|object[])} object - Can be single or an array, and can be a body, composite or constraint\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} This Matter World object.\r\n     */\r\n    add: function (object)\r\n    {\r\n        MatterWorld.add(this.localWorld, object);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} object - The object to be removed from the world.\r\n     * @param {boolean} deep - [description]\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} This Matter World object.\r\n     */\r\n    remove: function (object, deep)\r\n    {\r\n        var body = (object.body) ? object.body : object;\r\n\r\n        Composite.removeBody(this.localWorld, body, deep);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#removeConstraint\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MatterJS.Constraint} constraint - [description]\r\n     * @param {boolean} deep - [description]\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} This Matter World object.\r\n     */\r\n    removeConstraint: function (constraint, deep)\r\n    {\r\n        Composite.remove(this.localWorld, constraint, deep);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds MatterTileBody instances for all the colliding tiles within the given tilemap layer. Set\r\n     * the appropriate tiles in your layer to collide before calling this method!\r\n     *\r\n     * @method Phaser.Physics.Matter.World#convertTilemapLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} tilemapLayer -\r\n     * An array of tiles.\r\n     * @param {object} [options] - Options to be passed to the MatterTileBody constructor. {@ee Phaser.Physics.Matter.TileBody}\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} This Matter World object.\r\n     */\r\n    convertTilemapLayer: function (tilemapLayer, options)\r\n    {\r\n        var layerData = tilemapLayer.layer;\r\n        var tiles = tilemapLayer.getTilesWithin(0, 0, layerData.width, layerData.height, {isColliding: true});\r\n\r\n        this.convertTiles(tiles, options);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds MatterTileBody instances for the given tiles. This adds bodies regardless of whether the\r\n     * tiles are set to collide or not.\r\n     *\r\n     * @method Phaser.Physics.Matter.World#convertTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Tilemaps.Tile[]} tiles - An array of tiles.\r\n     * @param {object} [options] - Options to be passed to the MatterTileBody constructor. {@see Phaser.Physics.Matter.TileBody}\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} This Matter World object.\r\n     */\r\n    convertTiles: function (tiles, options)\r\n    {\r\n        if (tiles.length === 0)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        for (var i = 0; i < tiles.length; i++)\r\n        {\r\n            new MatterTileBody(this, tiles[i], options);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#nextGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} isNonColliding - [description]\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    nextGroup: function (isNonColliding)\r\n    {\r\n        return MatterBody.nextGroup(isNonColliding);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#nextCategory\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    nextCategory: function ()\r\n    {\r\n        return MatterBody.nextCategory();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} This Matter World object.\r\n     */\r\n    pause: function ()\r\n    {\r\n        this.enabled = false;\r\n\r\n        this.emit('pause');\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} This Matter World object.\r\n     */\r\n    resume: function ()\r\n    {\r\n        this.enabled = true;\r\n\r\n        this.emit('resume');\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (this.enabled && this.autoUpdate)\r\n        {\r\n            Engine.update(this.engine, this.getDelta(time, delta), this.correction);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Manually advances the physics simulation by one iteration.\r\n     * \r\n     * You can optionally pass in the `delta` and `correction` values to be used by Engine.update.\r\n     * If undefined they use the Matter defaults of 60Hz and no correction.\r\n     * \r\n     * Calling `step` directly bypasses any checks of `enabled` or `autoUpdate`.\r\n     * \r\n     * It also ignores any custom `getDelta` functions, as you should be passing the delta\r\n     * value in to this call.\r\n     *\r\n     * You can adjust the number of iterations that Engine.update performs internally.\r\n     * Use the Scene Matter Physics config object to set the following properties:\r\n     *\r\n     * positionIterations (defaults to 6)\r\n     * velocityIterations (defaults to 4)\r\n     * constraintIterations (defaults to 2)\r\n     *\r\n     * Adjusting these values can help performance in certain situations, depending on the physics requirements\r\n     * of your game.\r\n     *\r\n     * @method Phaser.Physics.Matter.World#step\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} [delta=16.666] - [description]\r\n     * @param {number} [correction=1] - [description]\r\n     */\r\n    step: function (delta, correction)\r\n    {\r\n        Engine.update(this.engine, delta, correction);\r\n    },\r\n\r\n    /**\r\n     * Runs the Matter Engine.update at a fixed timestep of 60Hz.\r\n     *\r\n     * @method Phaser.Physics.Matter.World#update60Hz\r\n     * @since 3.4.0\r\n     *\r\n     * @return {number} The delta value to be passed to Engine.update.\r\n     */\r\n    update60Hz: function ()\r\n    {\r\n        return 1000 / 60;\r\n    },\r\n\r\n    /**\r\n     * Runs the Matter Engine.update at a fixed timestep of 30Hz.\r\n     *\r\n     * @method Phaser.Physics.Matter.World#update30Hz\r\n     * @since 3.4.0\r\n     *\r\n     * @return {number} The delta value to be passed to Engine.update.\r\n     */\r\n    update30Hz: function ()\r\n    {\r\n        return 1000 / 30;\r\n    },\r\n\r\n    /**\r\n     * Handles the rendering of bodies and debug information to the debug Graphics object, if enabled.\r\n     *\r\n     * @method Phaser.Physics.Matter.World#postUpdate\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    postUpdate: function ()\r\n    {\r\n        if (!this.drawDebug)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.debugGraphic.clear();\r\n\r\n        var bodies = Composite.allBodies(this.localWorld);\r\n\r\n        if (this.defaults.debugWireframes)\r\n        {\r\n            if (this.defaults.debugShowConvexHulls)\r\n            {\r\n                this.renderConvexHulls(bodies);\r\n            }\r\n\r\n            this.renderWireframes(bodies);\r\n        }\r\n        else\r\n        {\r\n            this.renderBodies(bodies);\r\n        }\r\n\r\n        if (this.defaults.debugShowJoint)\r\n        {\r\n            this.renderJoints();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Renders the debug convex hulls from the given array of bodies.\r\n     *\r\n     * @method Phaser.Physics.Matter.World#renderConvexHulls\r\n     * @private\r\n     * @since 3.14.0\r\n     * \r\n     * @param {array} bodies - An array of bodies from the localWorld.\r\n     */\r\n    renderConvexHulls: function (bodies)\r\n    {\r\n        var graphics = this.debugGraphic;\r\n\r\n        graphics.lineStyle(1, this.defaults.debugConvexHullColor);\r\n\r\n        graphics.beginPath();\r\n\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            var body = bodies[i];\r\n\r\n            if (!body.render.visible || body.parts.length === 1)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            graphics.moveTo(body.vertices[0].x, body.vertices[0].y);\r\n\r\n            for (var j = 1; j < body.vertices.length; j++)\r\n            {\r\n                graphics.lineTo(body.vertices[j].x, body.vertices[j].y);\r\n            }\r\n            \r\n            graphics.lineTo(body.vertices[0].x, body.vertices[0].y);\r\n        }\r\n\r\n        graphics.strokePath();\r\n    },\r\n\r\n    /**\r\n     * Renders the wireframes of the given array of bodies.\r\n     *\r\n     * @method Phaser.Physics.Matter.World#renderWireframes\r\n     * @private\r\n     * @since 3.14.0\r\n     * \r\n     * @param {array} bodies - An array of bodies from the localWorld.\r\n     */\r\n    renderWireframes: function (bodies)\r\n    {\r\n        var graphics = this.debugGraphic;\r\n        var showInternalEdges = this.defaults.debugShowInternalEdges;\r\n\r\n        graphics.lineStyle(1, this.defaults.bodyDebugColor);\r\n\r\n        graphics.beginPath();\r\n\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            var body = bodies[i];\r\n\r\n            if (!body.render.visible)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            for (var k = (body.parts.length > 1) ? 1 : 0; k < body.parts.length; k++)\r\n            {\r\n                var part = body.parts[k];\r\n\r\n                var vertLength = part.vertices.length;\r\n\r\n                graphics.moveTo(part.vertices[0].x, part.vertices[0].y);\r\n\r\n                for (var j = 1; j < vertLength; j++)\r\n                {\r\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges)\r\n                    {\r\n                        graphics.lineTo(part.vertices[j].x, part.vertices[j].y);\r\n                    }\r\n                    else\r\n                    {\r\n                        graphics.moveTo(part.vertices[j].x, part.vertices[j].y);\r\n                    }\r\n\r\n                    if (part.vertices[j].isInternal && !showInternalEdges)\r\n                    {\r\n                        graphics.moveTo(part.vertices[(j + 1) % vertLength].x, part.vertices[(j + 1) % vertLength].y);\r\n                    }\r\n                }\r\n                \r\n                graphics.lineTo(part.vertices[0].x, part.vertices[0].y);\r\n            }\r\n        }\r\n\r\n        graphics.strokePath();\r\n    },\r\n\r\n    /**\r\n     * Renders the array of bodies.\r\n     *\r\n     * @method Phaser.Physics.Matter.World#renderBodies\r\n     * @private\r\n     * @since 3.14.0\r\n     * \r\n     * @param {array} bodies - An array of bodies from the localWorld.\r\n     */\r\n    renderBodies: function (bodies)\r\n    {\r\n        var graphics = this.debugGraphic;\r\n\r\n        var showInternalEdges = this.defaults.debugShowInternalEdges || !this.defaults.debugWireframes;\r\n        var showSleeping = this.defaults.debugShowSleeping;\r\n        var wireframes = this.defaults.debugWireframes;\r\n\r\n        var body;\r\n        var part;\r\n        var i;\r\n        var k;\r\n\r\n        for (i = 0; i < bodies.length; i++)\r\n        {\r\n            body = bodies[i];\r\n\r\n            if (!body.render.visible)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            //  Handle compound parts\r\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++)\r\n            {\r\n                part = body.parts[k];\r\n\r\n                if (!part.render.visible)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                if (showSleeping && body.isSleeping)\r\n                {\r\n                    graphics.lineStyle(1, this.defaults.bodyDebugColor, 0.5 * part.render.opacity);\r\n                    graphics.fillStyle(this.defaults.bodyDebugColor, 0.5 * part.render.opacity);\r\n                }\r\n                else\r\n                {\r\n                    graphics.lineStyle(1, this.defaults.bodyDebugColor, part.render.opacity);\r\n                    graphics.fillStyle(this.defaults.bodyDebugColor, part.render.opacity);\r\n                }\r\n\r\n                //  Part polygon\r\n                if (part.circleRadius)\r\n                {\r\n                    graphics.beginPath();\r\n                    graphics.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\r\n                }\r\n                else\r\n                {\r\n                    graphics.beginPath();\r\n                    graphics.moveTo(part.vertices[0].x, part.vertices[0].y);\r\n\r\n                    var vertLength = part.vertices.length;\r\n\r\n                    for (var j = 1; j < vertLength; j++)\r\n                    {\r\n                        if (!part.vertices[j - 1].isInternal || showInternalEdges)\r\n                        {\r\n                            graphics.lineTo(part.vertices[j].x, part.vertices[j].y);\r\n                        }\r\n                        else\r\n                        {\r\n                            graphics.moveTo(part.vertices[j].x, part.vertices[j].y);\r\n                        }\r\n\r\n                        if (part.vertices[j].isInternal && !showInternalEdges)\r\n                        {\r\n                            graphics.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\r\n                        }\r\n                    }\r\n                    \r\n                    graphics.lineTo(part.vertices[0].x, part.vertices[0].y);\r\n\r\n                    graphics.closePath();\r\n                }\r\n\r\n                if (!wireframes)\r\n                {\r\n                    graphics.fillPath();\r\n                }\r\n                else\r\n                {\r\n                    graphics.strokePath();\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Renders world constraints.\r\n     *\r\n     * @method Phaser.Physics.Matter.World#renderJoints\r\n     * @private\r\n     * @since 3.14.0\r\n     */\r\n    renderJoints: function ()\r\n    {\r\n        var graphics = this.debugGraphic;\r\n\r\n        graphics.lineStyle(2, this.defaults.jointDebugColor);\r\n\r\n        // Render constraints \r\n        var constraints = Composite.allConstraints(this.localWorld);\r\n\r\n        for (var i = 0; i < constraints.length; i++)\r\n        {\r\n            var constraint = constraints[i];\r\n\r\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            if (constraint.render.lineWidth)\r\n            {\r\n                graphics.lineStyle(constraint.render.lineWidth, Common.colorToNumber(constraint.render.strokeStyle));\r\n            }\r\n\r\n            var bodyA = constraint.bodyA;\r\n            var bodyB = constraint.bodyB;\r\n            var start;\r\n            var end;\r\n\r\n            if (bodyA)\r\n            {\r\n                start = Vector.add(bodyA.position, constraint.pointA);\r\n            }\r\n            else\r\n            {\r\n                start = constraint.pointA;\r\n            }\r\n\r\n            if (constraint.render.type === 'pin')\r\n            {\r\n                graphics.beginPath();\r\n                graphics.arc(start.x, start.y, 3, 0, 2 * Math.PI);\r\n                graphics.closePath();\r\n            }\r\n            else\r\n            {\r\n                if (bodyB)\r\n                {\r\n                    end = Vector.add(bodyB.position, constraint.pointB);\r\n                }\r\n                else\r\n                {\r\n                    end = constraint.pointB;\r\n                }\r\n\r\n                graphics.beginPath();\r\n                graphics.moveTo(start.x, start.y);\r\n\r\n                if (constraint.render.type === 'spring')\r\n                {\r\n                    var delta = Vector.sub(end, start);\r\n                    var normal = Vector.perp(Vector.normalise(delta));\r\n                    var coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20));\r\n                    var offset;\r\n\r\n                    for (var j = 1; j < coils; j += 1)\r\n                    {\r\n                        offset = (j % 2 === 0) ? 1 : -1;\r\n\r\n                        graphics.lineTo(\r\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\r\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\r\n                        );\r\n                    }\r\n                }\r\n\r\n                graphics.lineTo(end.x, end.y);\r\n            }\r\n\r\n            if (constraint.render.lineWidth)\r\n            {\r\n                graphics.strokePath();\r\n            }\r\n\r\n            if (constraint.render.anchors)\r\n            {\r\n                graphics.fillStyle(Common.colorToNumber(constraint.render.strokeStyle));\r\n                graphics.beginPath();\r\n                graphics.arc(start.x, start.y, 6, 0, 2 * Math.PI);\r\n                graphics.arc(end.x, end.y, 6, 0, 2 * Math.PI);\r\n                graphics.closePath();\r\n                graphics.fillPath();\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#fromPath\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} path - [description]\r\n     * @param {array} points - [description]\r\n     *\r\n     * @return {array} [description]\r\n     */\r\n    fromPath: function (path, points)\r\n    {\r\n        if (points === undefined) { points = []; }\r\n\r\n        // var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig;\r\n\r\n        // eslint-disable-next-line no-useless-escape\r\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig;\r\n\r\n        path.replace(pathPattern, function (match, x, y)\r\n        {\r\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\r\n        });\r\n\r\n        return points;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        MatterEvents.off(this.engine);\r\n\r\n        this.removeAllListeners();\r\n\r\n        MatterWorld.clear(this.localWorld, false);\r\n\r\n        Engine.clear(this.engine);\r\n\r\n        if (this.drawDebug)\r\n        {\r\n            this.debugGraphic.destroy();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.World#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = World;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Bodies","Class","Common","Composite","Engine","EventEmitter","GetFastValue","GetValue","MatterBody","MatterEvents","MatterTileBody","MatterWorld","Vector","World","Extends","initialize","scene","config","call","engine","create","localWorld","world","gravity","setGravity","x","y","scale","walls","left","right","top","bottom","boundsConfig","setBounds","width","sys","game","height","thickness","enabled","correction","getDelta","update60Hz","autoUpdate","drawDebug","defaults","debugShowBody","debugShowStaticBody","debugShowVelocity","bodyDebugColor","bodyDebugFillColor","staticBodyDebugColor","velocityDebugColor","debugShowJoint","jointDebugColor","debugWireframes","debugShowInternalEdges","debugShowConvexHulls","debugConvexHullColor","debugShowSleeping","createDebugGraphic","setEventsProxy","_this","on","event","emit","pairs","length","bodyA","bodyB","undefined","updateWall","add","position","wall","remove","isStatic","friction","frictionStatic","graphic","graphics","setDepth","Number","MAX_VALUE","debugGraphic","disableGravity","options","body","rectangle","object","deep","removeBody","removeConstraint","constraint","convertTilemapLayer","tilemapLayer","layerData","layer","tiles","getTilesWithin","isColliding","convertTiles","i","nextGroup","isNonColliding","nextCategory","pause","resume","update","time","delta","step","update30Hz","postUpdate","clear","bodies","allBodies","renderConvexHulls","renderWireframes","renderBodies","renderJoints","lineStyle","beginPath","render","visible","parts","moveTo","vertices","j","lineTo","strokePath","showInternalEdges","k","part","vertLength","isInternal","showSleeping","wireframes","isSleeping","opacity","fillStyle","circleRadius","arc","Math","PI","closePath","fillPath","constraints","allConstraints","pointA","pointB","lineWidth","colorToNumber","strokeStyle","start","type","end","sub","normal","perp","normalise","coils","ceil","clamp","offset","anchors","fromPath","path","points","replace","pathPattern","match","push","parseFloat","shutdown","off","removeAllListeners","destroy"]
}
