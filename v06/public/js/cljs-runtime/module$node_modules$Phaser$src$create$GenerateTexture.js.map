{
"version":3,
"file":"module$node_modules$Phaser$src$create$GenerateTexture.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOlH,IAAIC,OAASH,OAAA,CAAQ,uDAAR,CAAb,CACII,WAAaJ,OAAA,CAAQ,0DAAR,CADjB,CAEIK,SAAWL,OAAA,CAAQ,sDAAR,CAoGfC,OAAAC,QAAA,CAnEsBI,QAAS,CAACC,MAAD,CAC/B,CACI,IAAIC,KAAOH,QAAA,CAASE,MAAT,CAAiB,MAAjB,CAAyB,EAAzB,CAAX,CACIE,OAASJ,QAAA,CAASE,MAAT,CAAiB,QAAjB,CAA2B,IAA3B,CADb,CAEIG,QAAUL,QAAA,CAASE,MAAT,CAAiB,SAAjB,CAA4BJ,MAA5B,CAFd,CAGIQ,WAAaN,QAAA,CAASE,MAAT;AAAiB,YAAjB,CAA+B,CAA/B,CAHjB,CAIIK,YAAcP,QAAA,CAASE,MAAT,CAAiB,aAAjB,CAAgCI,UAAhC,CAJlB,CAKIE,aAAeR,QAAA,CAASE,MAAT,CAAiB,cAAjB,CAAiC,CAAA,CAAjC,CALnB,CAMIO,YAAcT,QAAA,CAASE,MAAT,CAAiB,aAAjB,CAAgC,CAAA,CAAhC,CANlB,CAOIQ,UAAYV,QAAA,CAASE,MAAT,CAAiB,WAAjB,CAA8B,IAA9B,CACZS,OAAAA,CAAaX,QAAA,CAASE,MAAT,CAAiB,YAAjB,CAA+B,IAA/B,CAEjB,KAAIU,MAAQC,IAAAC,MAAA,CAAWD,IAAAE,IAAA,CAASZ,IAAA,CAAK,CAAL,CAAAa,OAAT,CAA0BV,UAA1B,CAAX,CAAZ,CACIW,OAASJ,IAAAC,MAAA,CAAWD,IAAAE,IAAA,CAASZ,IAAAa,OAAT,CAAuBT,WAAvB,CAAX,CAERH,OAAL,GAEIA,MAEA,CAFSL,UAAAmB,SAAA,CAAoB,IAApB,CAA0BN,KAA1B,CAAiCK,MAAjC,CAET,CAAAR,WAAA,CADAD,YACA,CADe,CAAA,CAHnB,CAOIA,aAAJ,GAEIJ,MAAAQ,MACA,CADeA,KACf,CAAAR,MAAAa,OAAA,CAAgBA,MAHpB,CAMIE;YAAAA,CAAMf,MAAAgB,WAAA,CAAkB,IAAlB,CAENX,YAAJ,EAEIU,YAAAE,UAAA,CAAc,CAAd,CAAiB,CAAjB,CAAoBT,KAApB,CAA2BK,MAA3B,CAIAP,UAAJ,EAEIA,SAAA,CAAUN,MAAV,CAAkBe,YAAlB,CAIJ,KAASG,WAAT,CAAa,CAAb,CAAgBA,WAAhB,CAAoBnB,IAAAa,OAApB,CAAiCM,WAAA,EAAjC,CAII,IAFIC,SAEKC,CAFCrB,IAAA,CAAKmB,WAAL,CAEDE,CAAAA,KAAAA,CAAI,CAAb,CAAgBA,KAAhB,CAAoBD,SAAAP,OAApB,CAAgCQ,KAAA,EAAhC,CAEQC,MAEJ,CAFQF,SAAA,CAAIC,KAAJ,CAER,CAAU,GAAV,GAAIC,MAAJ,EAAuB,GAAvB,GAAiBA,MAAjB,GAEIN,YAAAO,UACA,CADgBrB,OAAA,CAAQoB,MAAR,CAChB,CAAAN,YAAAQ,SAAA,CAAaH,KAAb,CAAiBlB,UAAjB,CAA6BgB,WAA7B,CAAiCf,WAAjC,CAA8CD,UAA9C,CAA0DC,WAA1D,CAHJ,CASJI,OAAJ,EAEIA,MAAA,CAAWP,MAAX,CAAmBe,YAAnB,CAGJ,OAAOf,OA/DX,CA3CkH;",
"sources":["node_modules/Phaser/src/create/GenerateTexture.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$create$GenerateTexture\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Arne16 = require('./palettes/Arne16');\r\nvar CanvasPool = require('../display/canvas/CanvasPool');\r\nvar GetValue = require('../utils/object/GetValue');\r\n\r\n/**\r\n * @callback GenerateTextureRendererCallback\r\n *\r\n * @param {HTMLCanvasElement} canvas - [description]\r\n * @param {CanvasRenderingContext2D} context - [description]\r\n */\r\n\r\n/**\r\n * @typedef {object} GenerateTextureConfig\r\n *\r\n * @property {array} [data=[]] - [description]\r\n * @property {HTMLCanvasElement} [canvas=null] - [description]\r\n * @property {Palette} [palette=Arne16] - [description]\r\n * @property {number} [pixelWidth=1] - The width of each 'pixel' in the generated texture.\r\n * @property {number} [pixelHeight=1] - The height of each 'pixel' in the generated texture.\r\n * @property {boolean} [resizeCanvas=true] - [description]\r\n * @property {boolean} [clearCanvas=true] - [description]\r\n * @property {GenerateTextureRendererCallback} [preRender] - [description]\r\n * @property {GenerateTextureRendererCallback} [postRender] - [description]\r\n */\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Create.GenerateTexture\r\n * @since 3.0.0\r\n *\r\n * @param {GenerateTextureConfig} config - [description]\r\n *\r\n * @return {HTMLCanvasElement} [description]\r\n */\r\nvar GenerateTexture = function (config)\r\n{\r\n    var data = GetValue(config, 'data', []);\r\n    var canvas = GetValue(config, 'canvas', null);\r\n    var palette = GetValue(config, 'palette', Arne16);\r\n    var pixelWidth = GetValue(config, 'pixelWidth', 1);\r\n    var pixelHeight = GetValue(config, 'pixelHeight', pixelWidth);\r\n    var resizeCanvas = GetValue(config, 'resizeCanvas', true);\r\n    var clearCanvas = GetValue(config, 'clearCanvas', true);\r\n    var preRender = GetValue(config, 'preRender', null);\r\n    var postRender = GetValue(config, 'postRender', null);\r\n\r\n    var width = Math.floor(Math.abs(data[0].length * pixelWidth));\r\n    var height = Math.floor(Math.abs(data.length * pixelHeight));\r\n\r\n    if (!canvas)\r\n    {\r\n        canvas = CanvasPool.create2D(this, width, height);\r\n        resizeCanvas = false;\r\n        clearCanvas = false;\r\n    }\r\n\r\n    if (resizeCanvas)\r\n    {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n\r\n    var ctx = canvas.getContext('2d');\r\n\r\n    if (clearCanvas)\r\n    {\r\n        ctx.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    //  preRender Callback?\r\n    if (preRender)\r\n    {\r\n        preRender(canvas, ctx);\r\n    }\r\n\r\n    //  Draw it\r\n    for (var y = 0; y < data.length; y++)\r\n    {\r\n        var row = data[y];\r\n\r\n        for (var x = 0; x < row.length; x++)\r\n        {\r\n            var d = row[x];\r\n\r\n            if (d !== '.' && d !== ' ')\r\n            {\r\n                ctx.fillStyle = palette[d];\r\n                ctx.fillRect(x * pixelWidth, y * pixelHeight, pixelWidth, pixelHeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    //  postRender Callback?\r\n    if (postRender)\r\n    {\r\n        postRender(canvas, ctx);\r\n    }\r\n\r\n    return canvas;\r\n};\r\n\r\nmodule.exports = GenerateTexture;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Arne16","CanvasPool","GetValue","GenerateTexture","config","data","canvas","palette","pixelWidth","pixelHeight","resizeCanvas","clearCanvas","preRender","postRender","width","Math","floor","abs","length","height","create2D","ctx","getContext","clearRect","y","row","x","d","fillStyle","fillRect"]
}
