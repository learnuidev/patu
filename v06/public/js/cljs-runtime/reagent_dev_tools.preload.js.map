{"version":3,"sources":["reagent_dev_tools/preload.cljs"],"mappings":";;;;AAUA,AAAA,AAAMA;AAAN,AACE,AAAMC,AAAK;AAAX,AACE,AAACC,AAAYD;;AAEjB,AAAI,AAAAE,AAA6B,AAAIE;AAAjCD,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAD,AAAAC,AAAAD;;AACF,AAACH;;AACD,AAAA,AAAA,AAAmBK;AAAnB,AAAmD,AAACL","names":["reagent-dev-tools.preload/start","opts","reagent-dev-tools.core/start!","G__26555","fexpr__26554","js/document"],"sourcesContent":["(ns reagent-dev-tools.preload\n  (:require-macros [reagent-dev-tools.preload :refer [read-config]])\n  (:require [reagent-dev-tools.core :as core]\n            [reagent-dev-tools.state-tree :as state-tree]))\n\n;; Wait until JS is loaded, because config will refer to namespaces\n;; that will be loaded after this preload ns.\n;; Those namesapces will be available after document is \"interactive\".\n;; Start right-away, if document is already loaded.\n\n(defn start []\n  (let [opts (read-config)]\n    (core/start! opts)))\n\n(if (#{\"interactive\" \"complete\"} (.. js/document -readyState))\n  (start)\n  (.addEventListener js/document \"DOMContentLoaded\" #(start)))\n"]}