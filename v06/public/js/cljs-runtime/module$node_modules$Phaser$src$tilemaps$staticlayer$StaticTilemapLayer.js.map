{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$staticlayer$StaticTilemapLayer.js",
"lineCount":24,
"mappings":"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",
"sources":["node_modules/Phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$staticlayer$StaticTilemapLayer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar CONST = require('../../const');\r\nvar GameObject = require('../../gameobjects/GameObject');\r\nvar StaticTilemapLayerRender = require('./StaticTilemapLayerRender');\r\nvar TilemapComponents = require('../components');\r\nvar TransformMatrix = require('../../gameobjects/components/TransformMatrix');\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * @classdesc\r\n * A Static Tilemap Layer is a Game Object that renders LayerData from a Tilemap when used in combination\r\n * with one, or more, Tilesets.\r\n *\r\n * A Static Tilemap Layer is optimized for rendering speed over flexibility. You cannot apply per-tile\r\n * effects like tint or alpha, or change the tiles or tilesets the layer uses.\r\n * \r\n * Use a Static Tilemap Layer instead of a Dynamic Tilemap Layer when you don't need tile manipulation features.\r\n *\r\n * @class StaticTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\r\nvar StaticTilemapLayer = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        StaticTilemapLayerRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function StaticTilemapLayer (scene, tilemap, layerIndex, tileset, x, y)\r\n    {\r\n        GameObject.call(this, scene, 'StaticTilemapLayer');\r\n\r\n        /**\r\n         * Used internally by physics system to perform fast type checks.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#isTilemap\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.isTilemap = true;\r\n\r\n        /**\r\n         * The Tilemap that this layer is a part of.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#tilemap\r\n         * @type {Phaser.Tilemaps.Tilemap}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = tilemap;\r\n\r\n        /**\r\n         * The index of the LayerData associated with this layer.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#layerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.layerIndex = layerIndex;\r\n\r\n        /**\r\n         * The LayerData associated with this layer. LayerData can only be associated with one\r\n         * tilemap layer.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#layer\r\n         * @type {Phaser.Tilemaps.LayerData}\r\n         * @since 3.0.0\r\n         */\r\n        this.layer = tilemap.layers[layerIndex];\r\n\r\n        // Link the LayerData with this static tilemap layer\r\n        this.layer.tilemapLayer = this;\r\n\r\n        /**\r\n         * The Tileset/s associated with this layer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array of Tileset objects, previously it was a single reference.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#tileset\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileset = [];\r\n\r\n        /**\r\n         * Used internally by the Canvas renderer.\r\n         * This holds the tiles that are visible within the camera in the last frame.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#culledTiles\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.culledTiles = [];\r\n\r\n        /**\r\n         * Canvas only.\r\n         * \r\n         * You can control if the Cameras should cull tiles before rendering them or not.\r\n         * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n         *\r\n         * However, there are some instances when you may wish to disable this, and toggling this flag allows\r\n         * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#skipCull\r\n         * @type {boolean}\r\n         * @since 3.12.0\r\n         */\r\n        this.skipCull = false;\r\n\r\n        /**\r\n         * Canvas only.\r\n         * \r\n         * The total number of tiles drawn by the renderer in the last frame.\r\n         * \r\n         * This only works when rending with Canvas.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#tilesDrawn\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.12.0\r\n         */\r\n        this.tilesDrawn = 0;\r\n\r\n        /**\r\n         * Canvas only.\r\n         * \r\n         * The total number of tiles in this layer. Updated every frame.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#tilesTotal\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.12.0\r\n         */\r\n        this.tilesTotal = this.layer.width * this.layer.height;\r\n\r\n        /**\r\n         * Canvas only.\r\n         * \r\n         * The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#cullPaddingX\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.12.0\r\n         */\r\n        this.cullPaddingX = 1;\r\n\r\n        /**\r\n         * Canvas only.\r\n         * \r\n         * The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#cullPaddingY\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.12.0\r\n         */\r\n        this.cullPaddingY = 1;\r\n\r\n        /**\r\n         * Canvas only.\r\n         * \r\n         * The callback that is invoked when the tiles are culled.\r\n         *\r\n         * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\r\n         *\r\n         * It will be sent 3 arguments:\r\n         *\r\n         * 1) The Phaser.Tilemaps.LayerData object for this Layer\r\n         * 2) The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\r\n         * 3) A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\r\n         *\r\n         * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#cullCallback\r\n         * @type {function}\r\n         * @since 3.12.0\r\n         */\r\n        this.cullCallback = TilemapComponents.CullTiles;\r\n\r\n        /**\r\n         * A reference to the renderer.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#renderer\r\n         * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.renderer = scene.sys.game.renderer;\r\n\r\n        /**\r\n         * An array of vertex buffer objects, used by the WebGL renderer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single instance.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexBuffer\r\n         * @type {WebGLBuffer[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexBuffer = [];\r\n\r\n        /**\r\n         * An array of ArrayBuffer objects, used by the WebGL renderer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single instance.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#bufferData\r\n         * @type {ArrayBuffer[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.bufferData = [];\r\n\r\n        /**\r\n         * An array of Float32 Array objects, used by the WebGL renderer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single instance.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexViewF32\r\n         * @type {Float32Array[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexViewF32 = [];\r\n\r\n        /**\r\n         * An array of Uint32 Array objects, used by the WebGL renderer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single instance.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexViewU32\r\n         * @type {Uint32Array[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexViewU32 = [];\r\n\r\n        /**\r\n         * An array of booleans, used by the WebGL renderer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single boolean.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#dirty\r\n         * @type {boolean[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.dirty = [];\r\n\r\n        /**\r\n         * An array of integers, used by the WebGL renderer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single integer.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexCount\r\n         * @type {integer[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexCount = [];\r\n\r\n        /**\r\n         * The rendering (draw) order of the tiles in this layer.\r\n         * \r\n         * The default is 0 which is 'right-down', meaning it will draw the tiles starting from the top-left,\r\n         * drawing to the right and then moving down to the next row.\r\n         * \r\n         * The draw orders are:\r\n         * \r\n         * 0 = right-down\r\n         * 1 = left-down\r\n         * 2 = right-up\r\n         * 3 = left-up\r\n         * \r\n         * This can be changed via the `setRenderOrder` method.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#_renderOrder\r\n         * @type {integer}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._renderOrder = 0;\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#_tempMatrix\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.14.0\r\n         */\r\n        this._tempMatrix = new TransformMatrix();\r\n\r\n        /**\r\n         * An array holding the mapping between the tile indexes and the tileset they belong to.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#gidMap\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.14.0\r\n         */\r\n        this.gidMap = [];\r\n\r\n        this.setTilesets(tileset);\r\n        this.setAlpha(this.layer.alpha);\r\n        this.setPosition(x, y);\r\n        this.setOrigin();\r\n        this.setSize(this.layer.tileWidth * this.layer.width, this.layer.tileHeight * this.layer.height);\r\n\r\n        this.updateVBOData();\r\n\r\n        this.initPipeline('TextureTintPipeline');\r\n\r\n        if (scene.sys.game.config.renderType === CONST.WEBGL)\r\n        {\r\n            scene.sys.game.renderer.onContextRestored(function ()\r\n            {\r\n                this.updateVBOData();\r\n            }, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Populates the internal `tileset` array with the Tileset references this Layer requires for rendering.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setTilesets\r\n     * @private\r\n     * @since 3.14.0\r\n     * \r\n     * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n     */\r\n    setTilesets: function (tilesets)\r\n    {\r\n        var gidMap = [];\r\n        var setList = [];\r\n        var map = this.tilemap;\r\n\r\n        if (!Array.isArray(tilesets))\r\n        {\r\n            tilesets = [ tilesets ];\r\n        }\r\n\r\n        for (var i = 0; i < tilesets.length; i++)\r\n        {\r\n            var tileset = tilesets[i];\r\n\r\n            if (typeof tileset === 'string')\r\n            {\r\n                tileset = map.getTileset(tileset);\r\n            }\r\n\r\n            if (tileset)\r\n            {\r\n                setList.push(tileset);\r\n\r\n                var s = tileset.firstgid;\r\n\r\n                for (var t = 0; t < tileset.total; t++)\r\n                {\r\n                    gidMap[s + t] = tileset;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.gidMap = gidMap;\r\n        this.tileset = setList;\r\n    },\r\n\r\n    /**\r\n     * Prepares the VBO data arrays for population by the `upload` method.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#updateVBOData\r\n     * @private\r\n     * @since 3.14.0\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    updateVBOData: function ()\r\n    {\r\n        for (var i = 0; i < this.tileset.length; i++)\r\n        {\r\n            this.dirty[i] = true;\r\n            this.vertexCount[i] = 0;\r\n            this.vertexBuffer[i] = null;\r\n            this.bufferData[i] = null;\r\n            this.vertexViewF32[i] = null;\r\n            this.vertexViewU32[i] = null;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Upload the tile data to a VBO.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#upload\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera to render to.\r\n     * @param {integer} tilesetIndex - The tileset index.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    upload: function (camera, tilesetIndex)\r\n    {\r\n        var renderer = this.renderer;\r\n        var gl = renderer.gl;\r\n\r\n        var pipeline = renderer.pipelines.TextureTintPipeline;\r\n\r\n        if (this.dirty[tilesetIndex])\r\n        {\r\n            var tileset = this.tileset[tilesetIndex];\r\n            var mapWidth = this.layer.width;\r\n            var mapHeight = this.layer.height;\r\n            var width = tileset.image.source[0].width;\r\n            var height = tileset.image.source[0].height;\r\n            var mapData = this.layer.data;\r\n            var tile;\r\n            var row;\r\n            var col;\r\n            var renderOrder = this._renderOrder;\r\n            var minTileIndex = tileset.firstgid;\r\n            var maxTileIndex = tileset.firstgid + tileset.total;\r\n    \r\n            var vertexBuffer = this.vertexBuffer[tilesetIndex];\r\n            var bufferData = this.bufferData[tilesetIndex];\r\n            var vOffset = -1;\r\n            var bufferSize = (mapWidth * mapHeight) * pipeline.vertexSize * 6;\r\n\r\n            this.vertexCount[tilesetIndex] = 0;\r\n    \r\n            if (bufferData === null)\r\n            {\r\n                bufferData = new ArrayBuffer(bufferSize);\r\n\r\n                this.bufferData[tilesetIndex] = bufferData;\r\n\r\n                this.vertexViewF32[tilesetIndex] = new Float32Array(bufferData);\r\n                this.vertexViewU32[tilesetIndex] = new Uint32Array(bufferData);\r\n            }\r\n    \r\n            if (renderOrder === 0)\r\n            {\r\n                //  right-down\r\n        \r\n                for (row = 0; row < mapHeight; row++)\r\n                {\r\n                    for (col = 0; col < mapWidth; col++)\r\n                    {\r\n                        tile = mapData[row][col];\r\n        \r\n                        if (!tile || tile.index < minTileIndex || tile.index > maxTileIndex || !tile.visible)\r\n                        {\r\n                            continue;\r\n                        }\r\n    \r\n                        vOffset = this.batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex);\r\n                    }\r\n                }\r\n            }\r\n            else if (renderOrder === 1)\r\n            {\r\n                //  left-down\r\n        \r\n                for (row = 0; row < mapHeight; row++)\r\n                {\r\n                    for (col = mapWidth - 1; col >= 0; col--)\r\n                    {\r\n                        tile = mapData[row][col];\r\n        \r\n                        if (!tile || tile.index < minTileIndex || tile.index > maxTileIndex || !tile.visible)\r\n                        {\r\n                            continue;\r\n                        }\r\n    \r\n                        vOffset = this.batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex);\r\n                    }\r\n                }\r\n            }\r\n            else if (renderOrder === 2)\r\n            {\r\n                //  right-up\r\n        \r\n                for (row = mapHeight - 1; row >= 0; row--)\r\n                {\r\n                    for (col = 0; col < mapWidth; col++)\r\n                    {\r\n                        tile = mapData[row][col];\r\n        \r\n                        if (!tile || tile.index < minTileIndex || tile.index > maxTileIndex || !tile.visible)\r\n                        {\r\n                            continue;\r\n                        }\r\n    \r\n                        vOffset = this.batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex);\r\n                    }\r\n                }\r\n            }\r\n            else if (renderOrder === 3)\r\n            {\r\n                //  left-up\r\n        \r\n                for (row = mapHeight - 1; row >= 0; row--)\r\n                {\r\n                    for (col = mapWidth - 1; col >= 0; col--)\r\n                    {\r\n                        tile = mapData[row][col];\r\n        \r\n                        if (!tile || tile.index < minTileIndex || tile.index > maxTileIndex || !tile.visible)\r\n                        {\r\n                            continue;\r\n                        }\r\n    \r\n                        vOffset = this.batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex);\r\n                    }\r\n                }\r\n            }\r\n        \r\n            this.dirty[tilesetIndex] = false;\r\n    \r\n            if (vertexBuffer === null)\r\n            {\r\n                vertexBuffer = renderer.createVertexBuffer(bufferData, gl.STATIC_DRAW);\r\n    \r\n                this.vertexBuffer[tilesetIndex] = vertexBuffer;\r\n            }\r\n            else\r\n            {\r\n                renderer.setVertexBuffer(vertexBuffer);\r\n    \r\n                gl.bufferSubData(gl.ARRAY_BUFFER, 0, bufferData);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add a single tile into the batch.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#batchTile\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {integer} vOffset - The vertex offset.\r\n     * @param {any} tile - The tile being rendered.\r\n     * @param {any} tileset - The tileset being used for rendering.\r\n     * @param {integer} width - The width of the layer.\r\n     * @param {integer} height - The height of the layer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera the layer is being rendered with.\r\n     * @param {integer} tilesetIndex - The tileset index.\r\n     *\r\n     * @return {integer} The new vOffset value.\r\n     */\r\n    batchTile: function (vOffset, tile, tileset, width, height, camera, tilesetIndex)\r\n    {\r\n        var texCoords = tileset.getTileTextureCoordinates(tile.index);\r\n\r\n        if (!texCoords)\r\n        {\r\n            return vOffset;\r\n        }\r\n\r\n        var u0 = texCoords.x / width;\r\n        var v0 = texCoords.y / height;\r\n        var u1 = (texCoords.x + tile.width) / width;\r\n        var v1 = (texCoords.y + tile.height) / height;\r\n\r\n        var matrix = this._tempMatrix;\r\n\r\n        var tileWidth = tile.width;\r\n        var tileHeight = tile.height;\r\n\r\n        var halfTileWidth = tileWidth / 2;\r\n        var halfTileHeight = tileHeight / 2;\r\n\r\n        var x = -halfTileWidth;\r\n        var y = -halfTileHeight;\r\n\r\n        if (tile.flipX)\r\n        {\r\n            tileWidth *= -1;\r\n            x += tile.width;\r\n        }\r\n\r\n        if (tile.flipY)\r\n        {\r\n            tileHeight *= -1;\r\n            y += tile.height;\r\n        }\r\n\r\n        var xw = x + tileWidth;\r\n        var yh = y + tileHeight;\r\n\r\n        matrix.applyITRS(halfTileWidth + tile.pixelX, halfTileHeight + tile.pixelY, tile.rotation, 1, 1);\r\n\r\n        var tint = Utils.getTintAppendFloatAlpha(0xffffff, camera.alpha * this.alpha * tile.alpha);\r\n\r\n        var tx0 = matrix.getX(x, y);\r\n        var ty0 = matrix.getY(x, y);\r\n\r\n        var tx1 = matrix.getX(x, yh);\r\n        var ty1 = matrix.getY(x, yh);\r\n\r\n        var tx2 = matrix.getX(xw, yh);\r\n        var ty2 = matrix.getY(xw, yh);\r\n\r\n        var tx3 = matrix.getX(xw, y);\r\n        var ty3 = matrix.getY(xw, y);\r\n\r\n        if (camera.roundPixels)\r\n        {\r\n            tx0 |= 0;\r\n            ty0 |= 0;\r\n\r\n            tx1 |= 0;\r\n            ty1 |= 0;\r\n\r\n            tx2 |= 0;\r\n            ty2 |= 0;\r\n\r\n            tx3 |= 0;\r\n            ty3 |= 0;\r\n        }\r\n\r\n        var vertexViewF32 = this.vertexViewF32[tilesetIndex];\r\n        var vertexViewU32 = this.vertexViewU32[tilesetIndex];\r\n\r\n        vertexViewF32[++vOffset] = tx0;\r\n        vertexViewF32[++vOffset] = ty0;\r\n        vertexViewF32[++vOffset] = u0;\r\n        vertexViewF32[++vOffset] = v0;\r\n        vertexViewF32[++vOffset] = 0;\r\n        vertexViewU32[++vOffset] = tint;\r\n\r\n        vertexViewF32[++vOffset] = tx1;\r\n        vertexViewF32[++vOffset] = ty1;\r\n        vertexViewF32[++vOffset] = u0;\r\n        vertexViewF32[++vOffset] = v1;\r\n        vertexViewF32[++vOffset] = 0;\r\n        vertexViewU32[++vOffset] = tint;\r\n\r\n        vertexViewF32[++vOffset] = tx2;\r\n        vertexViewF32[++vOffset] = ty2;\r\n        vertexViewF32[++vOffset] = u1;\r\n        vertexViewF32[++vOffset] = v1;\r\n        vertexViewF32[++vOffset] = 0;\r\n        vertexViewU32[++vOffset] = tint;\r\n\r\n        vertexViewF32[++vOffset] = tx0;\r\n        vertexViewF32[++vOffset] = ty0;\r\n        vertexViewF32[++vOffset] = u0;\r\n        vertexViewF32[++vOffset] = v0;\r\n        vertexViewF32[++vOffset] = 0;\r\n        vertexViewU32[++vOffset] = tint;\r\n\r\n        vertexViewF32[++vOffset] = tx2;\r\n        vertexViewF32[++vOffset] = ty2;\r\n        vertexViewF32[++vOffset] = u1;\r\n        vertexViewF32[++vOffset] = v1;\r\n        vertexViewF32[++vOffset] = 0;\r\n        vertexViewU32[++vOffset] = tint;\r\n\r\n        vertexViewF32[++vOffset] = tx3;\r\n        vertexViewF32[++vOffset] = ty3;\r\n        vertexViewF32[++vOffset] = u1;\r\n        vertexViewF32[++vOffset] = v0;\r\n        vertexViewF32[++vOffset] = 0;\r\n        vertexViewU32[++vOffset] = tint;\r\n\r\n        this.vertexCount[tilesetIndex] += 6;\r\n\r\n        return vOffset;\r\n    },\r\n\r\n    /**\r\n     * Sets the rendering (draw) order of the tiles in this layer.\r\n     * \r\n     * The default is 'right-down', meaning it will order the tiles starting from the top-left,\r\n     * drawing to the right and then moving down to the next row.\r\n     * \r\n     * The draw orders are:\r\n     * \r\n     * 0 = right-down\r\n     * 1 = left-down\r\n     * 2 = right-up\r\n     * 3 = left-up\r\n     * \r\n     * Setting the render order does not change the tiles or how they are stored in the layer,\r\n     * it purely impacts the order in which they are rendered.\r\n     * \r\n     * You can provide either an integer (0 to 3), or the string version of the order.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setRenderOrder\r\n     * @since 3.12.0\r\n     *\r\n     * @param {(integer|string)} renderOrder - The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setRenderOrder: function (renderOrder)\r\n    {\r\n        var orders = [ 'right-down', 'left-down', 'right-up', 'left-up' ];\r\n\r\n        if (typeof renderOrder === 'string')\r\n        {\r\n            renderOrder = orders.indexOf(renderOrder);\r\n        }\r\n\r\n        if (renderOrder >= 0 && renderOrder < 4)\r\n        {\r\n            this._renderOrder = renderOrder;\r\n\r\n            for (var i = 0; i < this.tileset.length; i++)\r\n            {\r\n                this.dirty[i] = true;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate.\r\n     * @param {integer} tileY - The y coordinate.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY)\r\n    {\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera)\r\n    {\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Returns the tiles in the given layer that are within the cameras viewport.\r\n     * This is used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        return this.cullCallback(this.layer, camera, this.culledTiles);\r\n    },\r\n\r\n    /**\r\n     * Canvas only.\r\n     * \r\n     * You can control if the Cameras should cull tiles before rendering them or not.\r\n     * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n     *\r\n     * However, there are some instances when you may wish to disable this.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setSkipCull\r\n     * @since 3.12.0\r\n     *\r\n     * @param {boolean} [value=true] - Set to `true` to stop culling tiles. Set to `false` to enable culling again.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setSkipCull: function (value)\r\n    {\r\n        if (value === undefined) { value = true; }\r\n\r\n        this.skipCull = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Canvas only.\r\n     * \r\n     * When a Camera culls the tiles in this layer it does so using its view into the world, building up a\r\n     * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\r\n     * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\r\n     * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\r\n     * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCullPadding\r\n     * @since 3.12.0\r\n     *\r\n     * @param {integer} [paddingX=1] - The amount of extra horizontal tiles to add to the cull check padding.\r\n     * @param {integer} [paddingY=1] - The amount of extra vertical tiles to add to the cull check padding.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setCullPadding: function (paddingX, paddingY)\r\n    {\r\n        if (paddingX === undefined) { paddingX = 1; }\r\n        if (paddingY === undefined) { paddingY = 1; }\r\n\r\n        this.cullPaddingX = paddingX;\r\n        this.cullPaddingY = paddingY;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n     * bottom-right. Otherwise it scans from the top-left.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse)\r\n    {\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile}\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull)\r\n    {\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n     * were invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera)\r\n    {\r\n        return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    hasTileAt: function (tileX, tileY)\r\n    {\r\n        return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera)\r\n    {\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     * @param {?Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n     * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n     * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n     * tile faces. If set to null, interesting tile faces will not be drawn.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    renderDebug: function (graphics, styleConfig)\r\n    {\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should\r\n     * be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes to have a\r\n     * collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {integer} width - [description]\r\n     * @param {integer} height - [description]\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} [callbackContext] - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldX: function (tileX, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldY: function (tileY, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Math.Vector2} [point] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Destroys this StaticTilemapLayer and removes its link to the associated LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        // Uninstall this layer only if it is still installed on the LayerData object\r\n        if (this.layer.tilemapLayer === this)\r\n        {\r\n            this.layer.tilemapLayer = undefined;\r\n        }\r\n\r\n        this.tilemap = undefined;\r\n        this.layer = undefined;\r\n        this.culledTiles.length = 0;\r\n        this.cullCallback = null;\r\n\r\n        for (var i = 0; i < this.tileset.length; i++)\r\n        {\r\n            this.dirty[i] = true;\r\n            this.vertexCount[i] = 0;\r\n            this.vertexBuffer[i] = null;\r\n            this.bufferData[i] = null;\r\n            this.vertexViewF32[i] = null;\r\n            this.vertexViewU32[i] = null;\r\n        }\r\n\r\n        this.gidMap = [];\r\n        this.tileset = [];\r\n\r\n        GameObject.prototype.destroy.call(this);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = StaticTilemapLayer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Components","CONST","GameObject","StaticTilemapLayerRender","TilemapComponents","TransformMatrix","Utils","StaticTilemapLayer","Extends","Mixins","Alpha","BlendMode","ComputedSize","Depth","Flip","GetBounds","Origin","Pipeline","ScaleMode","Transform","Visible","ScrollFactor","initialize","scene","tilemap","layerIndex","tileset","x","y","call","isTilemap","layer","layers","tilemapLayer","culledTiles","skipCull","tilesDrawn","tilesTotal","width","height","cullPaddingY","cullPaddingX","cullCallback","CullTiles","renderer","sys","game","vertexBuffer","bufferData","vertexViewF32","vertexViewU32","dirty","vertexCount","_renderOrder","_tempMatrix","gidMap","setTilesets","setAlpha","alpha","setPosition","setOrigin","setSize","tileWidth","tileHeight","updateVBOData","initPipeline","config","renderType","WEBGL","onContextRestored","tilesets","setList","map","Array","isArray","i","length","getTileset","push","s","firstgid","t","total","upload","camera","tilesetIndex","gl","pipeline","pipelines","TextureTintPipeline","mapWidth","mapHeight","image","source","mapData","data","col","renderOrder","minTileIndex","maxTileIndex","vOffset","bufferSize","vertexSize","ArrayBuffer","Float32Array","Uint32Array","row","tile","index","visible","batchTile","createVertexBuffer","STATIC_DRAW","setVertexBuffer","bufferSubData","ARRAY_BUFFER","texCoords","getTileTextureCoordinates","u0","v0","u1","v1","matrix","halfTileWidth","halfTileHeight","flipX","flipY","xw","yh","applyITRS","pixelX","pixelY","rotation","tint","getTintAppendFloatAlpha","tx0","getX","ty0","getY","tx1","ty1","tx2","ty2","tx3","ty3","roundPixels","setRenderOrder","orders","indexOf","calculateFacesAt","tileX","tileY","CalculateFacesAt","calculateFacesWithin","CalculateFacesWithin","createFromTiles","indexes","replacements","spriteConfig","CreateFromTiles","cull","setSkipCull","value","undefined","setCullPadding","paddingX","paddingY","findByIndex","findIndex","skip","reverse","FindByIndex","findTile","callback","context","filteringOptions","FindTile","filterTiles","FilterTiles","forEachTile","ForEachTile","getTileAt","nonNull","GetTileAt","getTileAtWorldXY","worldX","worldY","GetTileAtWorldXY","getTilesWithin","GetTilesWithin","getTilesWithinWorldXY","GetTilesWithinWorldXY","getTilesWithinShape","shape","GetTilesWithinShape","hasTileAt","HasTileAt","hasTileAtWorldXY","HasTileAtWorldXY","renderDebug","graphics","styleConfig","RenderDebug","setCollision","collides","recalculateFaces","SetCollision","setCollisionBetween","start","stop","SetCollisionBetween","setCollisionByProperty","properties","SetCollisionByProperty","setCollisionByExclusion","SetCollisionByExclusion","setTileIndexCallback","callbackContext","SetTileIndexCallback","setCollisionFromCollisionGroup","SetCollisionFromCollisionGroup","setTileLocationCallback","SetTileLocationCallback","tileToWorldX","TileToWorldX","tileToWorldY","TileToWorldY","tileToWorldXY","point","TileToWorldXY","worldToTileX","snapToFloor","WorldToTileX","worldToTileY","WorldToTileY","worldToTileXY","WorldToTileXY","destroy","prototype"]
}
