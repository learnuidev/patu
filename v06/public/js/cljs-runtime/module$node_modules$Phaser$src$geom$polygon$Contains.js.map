{
"version":3,
"file":"module$node_modules$Phaser$src$geom$polygon$Contains.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,qDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA2CjHD,MAAAC,QAAA,CArBeC,QAAS,CAACC,OAAD,CAAUC,CAAV,CAAaC,CAAb,CACxB,CAGI,IAFA,IAAIC,OAAS,CAAA,CAAb,CAESC,EAAI,EAFb,CAEiBC,EAAIL,OAAAM,OAAAC,OAAJF,CAA4B,CAA7C,CAAgD,EAAED,CAAlD,CAAsDJ,OAAAM,OAAAC,OAAtD,CAA6EF,CAA7E,CAAiFD,CAAjF,CACA,CACI,IAAII,GAAKR,OAAAM,OAAA,CAAeF,CAAf,CAAAH,EAAT,CACIQ,GAAKT,OAAAM,OAAA,CAAeF,CAAf,CAAAF,EADT,CAGIQ,GAAKV,OAAAM,OAAA,CAAeD,CAAf,CAAAJ,EACLU,EAAAA,CAAKX,OAAAM,OAAA,CAAeD,CAAf,CAAAH,EAET,EAAMO,EAAN,EAAYP,CAAZ,EAAiBA,CAAjB,CAAqBS,CAArB,EAA6BA,CAA7B,EAAmCT,CAAnC,EAAwCA,CAAxC,CAA4CO,EAA5C,GAAqDR,CAArD,EAA0DS,EAA1D,CAA+DF,EAA/D,GAAsEN,CAAtE,CAA0EO,EAA1E,GAAiFE,CAAjF,CAAsFF,EAAtF,EAA4FD,EAA5F,GAEIL,MAFJ,CAEa,CAACA,MAFd,CAPJ,CAaA,MAAOA,OAjBX,CAvBiH;",
"sources":["node_modules/Phaser/src/geom/polygon/Contains.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$polygon$Contains\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n// Checks whether the x and y coordinates are contained within this polygon.\r\n//  Adapted from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html by Jonas Raoni Soares Silva\r\n\r\n/**\r\n * Checks if a point is within the bounds of a Polygon.\r\n *\r\n * @function Phaser.Geom.Polygon.Contains\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Polygon} polygon - The Polygon to check against.\r\n * @param {number} x - The X coordinate of the point to check.\r\n * @param {number} y - The Y coordinate of the point to check.\r\n *\r\n * @return {boolean} `true` if the point is within the bounds of the Polygon, otherwise `false`.\r\n */\r\nvar Contains = function (polygon, x, y)\r\n{\r\n    var inside = false;\r\n\r\n    for (var i = -1, j = polygon.points.length - 1; ++i < polygon.points.length; j = i)\r\n    {\r\n        var ix = polygon.points[i].x;\r\n        var iy = polygon.points[i].y;\r\n\r\n        var jx = polygon.points[j].x;\r\n        var jy = polygon.points[j].y;\r\n\r\n        if (((iy <= y && y < jy) || (jy <= y && y < iy)) && (x < (jx - ix) * (y - iy) / (jy - iy) + ix))\r\n        {\r\n            inside = !inside;\r\n        }\r\n    }\r\n\r\n    return inside;\r\n};\r\n\r\nmodule.exports = Contains;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Contains","polygon","x","y","inside","i","j","points","length","ix","iy","jx","jy"]
}
