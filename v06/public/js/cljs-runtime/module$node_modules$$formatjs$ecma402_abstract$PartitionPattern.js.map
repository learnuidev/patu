{
"version":3,
"file":"module$node_modules$$formatjs$ecma402_abstract$PartitionPattern.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,gEAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE5HC,MAAAC,eAAA,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAAI,iBAAA,CAA2B,IAAK,EAChC,KAAIC,QAAUP,OAAA,CAAQ,sDAAR,CAmCdE,QAAAI,iBAAA,CA9BAA,QAAyB,CAACE,OAAD,CAAU,CAM/B,IALA,IAAIC,OAAS,EAAb,CACIC,WAAaF,OAAAG,QAAA,CAAgB,GAAhB,CADjB,CAEIC,QAFJ,CAGIC,UAAY,CAHhB,CAIIC,OAASN,OAAAM,OACb,CAAOJ,UAAP,CAAoBF,OAAAM,OAApB,EAAmD,EAAnD,CAAsCJ,UAAtC,CAAA,CACIE,QAaA,CAbWJ,OAAAG,QAAA,CAAgB,GAAhB,CAAqBD,UAArB,CAaX;AAZAH,OAAAQ,UAAA,CAAkBH,QAAlB,CAA6BF,UAA7B,CAAyC,kBAAzC,CAA8DF,OAA9D,CAYA,CAXIE,UAWJ,CAXiBG,SAWjB,EAVIJ,MAAAO,KAAA,CAAY,CACRC,KAAM,SADE,CAERZ,MAAOG,OAAAU,UAAA,CAAkBL,SAAlB,CAA6BH,UAA7B,CAFC,CAAZ,CAUJ,CALAD,MAAAO,KAAA,CAAY,CACRC,KAAMT,OAAAU,UAAA,CAAkBR,UAAlB,CAA+B,CAA/B,CAAkCE,QAAlC,CADE,CAERP,MAAOc,IAAAA,EAFC,CAAZ,CAKA,CADAN,SACA,CADYD,QACZ,CADuB,CACvB,CAAAF,UAAA,CAAaF,OAAAG,QAAA,CAAgB,GAAhB,CAAqBE,SAArB,CAEbA,UAAJ,CAAgBC,MAAhB,EACIL,MAAAO,KAAA,CAAY,CACRC,KAAM,SADE,CAERZ,MAAOG,OAAAU,UAAA,CAAkBL,SAAlB,CAA6BC,MAA7B,CAFC,CAAZ,CAKJ,OAAOL,OA5BwB,CATyF;",
"sources":["node_modules/@formatjs/ecma402-abstract/PartitionPattern.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$formatjs$ecma402_abstract$PartitionPattern\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartitionPattern = void 0;\nvar utils_1 = require(\"./utils\");\n/**\n * https://tc39.es/ecma402/#sec-partitionpattern\n * @param pattern\n */\nfunction PartitionPattern(pattern) {\n    var result = [];\n    var beginIndex = pattern.indexOf('{');\n    var endIndex = 0;\n    var nextIndex = 0;\n    var length = pattern.length;\n    while (beginIndex < pattern.length && beginIndex > -1) {\n        endIndex = pattern.indexOf('}', beginIndex);\n        utils_1.invariant(endIndex > beginIndex, \"Invalid pattern \" + pattern);\n        if (beginIndex > nextIndex) {\n            result.push({\n                type: 'literal',\n                value: pattern.substring(nextIndex, beginIndex),\n            });\n        }\n        result.push({\n            type: pattern.substring(beginIndex + 1, endIndex),\n            value: undefined,\n        });\n        nextIndex = endIndex + 1;\n        beginIndex = pattern.indexOf('{', nextIndex);\n    }\n    if (nextIndex < length) {\n        result.push({\n            type: 'literal',\n            value: pattern.substring(nextIndex, length),\n        });\n    }\n    return result;\n}\nexports.PartitionPattern = PartitionPattern;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","PartitionPattern","utils_1","pattern","result","beginIndex","indexOf","endIndex","nextIndex","length","invariant","push","type","substring","undefined"]
}
