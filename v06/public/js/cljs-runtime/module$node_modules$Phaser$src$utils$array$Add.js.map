{
"version":3,
"file":"module$node_modules$Phaser$src$utils$array$Add.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA+G3GD,MAAAC,QAAA,CAjFUC,QAAS,CAACC,KAAD,CAAQC,IAAR,CAAcC,KAAd,CAAqBC,QAArB,CAA+BC,OAA/B,CACnB,CACoBC,IAAAA,EAAhB,GAAID,OAAJ,GAA6BA,OAA7B,CAAuCJ,KAAvC,CAEA,IAAY,CAAZ,CAAIE,KAAJ,CACA,CACI,IAAII,UAAYJ,KAAZI,CAAoBN,KAAAO,OAGxB,IAAiB,CAAjB,EAAID,SAAJ,CAEI,MAAO,KANf,CAWA,GAAI,CAACE,KAAAC,QAAA,CAAcR,IAAd,CAAL,CAEI,MAA4B,EAA5B,GAAID,KAAAU,QAAA,CAAcT,IAAd,CAAJ,EAEID,KAAAW,KAAA,CAAWV,IAAX,CAOOA,CALHE,QAKGF,EAHHE,QAAAS,KAAA,CAAcR,OAAd,CAAuBH,IAAvB,CAGGA,CAAAA,IATX,EAaW,IASf,KAFA,IAAIY,WAAaZ,IAAAM,OAAbM,CAA2B,CAE/B,CAAqB,CAArB,EAAOA,UAAP,CAAA,CAE4C,EAMxC,GANIb,KAAAU,QAAA,CAAcT,IAAA,CAAKY,UAAL,CAAd,CAMJ,EAHIZ,IAAAa,IAAA,EAGJ,CAAAD,UAAA,EAIJA,WAAA;AAAaZ,IAAAM,OAEb,IAAmB,CAAnB,GAAIM,UAAJ,CAEI,MAAO,KAGC,EAAZ,CAAIX,KAAJ,EAAiBW,UAAjB,CAA8BP,SAA9B,GAEIL,IAAAc,OAAA,CAAYT,SAAZ,CAEA,CAAAO,UAAA,CAAaP,SAJjB,CAOA,KAASU,KAAT,CAAa,CAAb,CAAgBA,KAAhB,CAAoBH,UAApB,CAAgCG,KAAA,EAAhC,CAEQC,SAIJ,CAJYhB,IAAA,CAAKe,KAAL,CAIZ,CAFAhB,KAAAW,KAAA,CAAWM,SAAX,CAEA,CAAId,QAAJ,EAEIA,QAAAS,KAAA,CAAcR,OAAd,CAAuBa,SAAvB,CAIR,OAAOhB,KA7EX,CA/B2G;",
"sources":["node_modules/Phaser/src/utils/array/Add.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$array$Add\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Adds the given item, or array of items, to the array.\r\n * \r\n * Each item must be unique within the array.\r\n * \r\n * The array is modified in-place and returned.\r\n * \r\n * You can optionally specify a limit to the maximum size of the array. If the quantity of items being\r\n * added will take the array length over this limit, it will stop adding once the limit is reached.\r\n * \r\n * You can optionally specify a callback to be invoked for each item successfully added to the array.\r\n *\r\n * @function Phaser.Utils.Array.Add\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be added to.\r\n * @param {any|any[]} item - The item, or array of items, to add to the array. Each item must be unique within the array.\r\n * @param {integer} [limit] - Optional limit which caps the size of the array.\r\n * @param {function} [callback] - A callback to be invoked for each item successfully added to the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {array} The input array.\r\n */\r\nvar Add = function (array, item, limit, callback, context)\r\n{\r\n    if (context === undefined) { context = array; }\r\n\r\n    if (limit > 0)\r\n    {\r\n        var remaining = limit - array.length;\r\n\r\n        //  There's nothing more we can do here, the array is full\r\n        if (remaining <= 0)\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //  Fast path to avoid array mutation and iteration\r\n    if (!Array.isArray(item))\r\n    {\r\n        if (array.indexOf(item) === -1)\r\n        {\r\n            array.push(item);\r\n\r\n            if (callback)\r\n            {\r\n                callback.call(context, item);\r\n            }\r\n    \r\n            return item;\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //  If we got this far, we have an array of items to insert\r\n\r\n    //  Ensure all the items are unique\r\n    var itemLength = item.length - 1;\r\n\r\n    while (itemLength >= 0)\r\n    {\r\n        if (array.indexOf(item[itemLength]) !== -1)\r\n        {\r\n            //  Already exists in array, so remove it\r\n            item.pop();\r\n        }\r\n\r\n        itemLength--;\r\n    }\r\n\r\n    //  Anything left?\r\n    itemLength = item.length;\r\n\r\n    if (itemLength === 0)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    if (limit > 0 && itemLength > remaining)\r\n    {\r\n        item.splice(remaining);\r\n\r\n        itemLength = remaining;\r\n    }\r\n\r\n    for (var i = 0; i < itemLength; i++)\r\n    {\r\n        var entry = item[i];\r\n\r\n        array.push(entry);\r\n\r\n        if (callback)\r\n        {\r\n            callback.call(context, entry);\r\n        }\r\n    }\r\n\r\n    return item;\r\n};\r\n\r\nmodule.exports = Add;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Add","array","item","limit","callback","context","undefined","remaining","length","Array","isArray","indexOf","push","call","itemLength","pop","splice","i","entry"]
}
