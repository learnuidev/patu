{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$bitmaptext$ParseRetroFont.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,qEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOjI,IAAIC,SAAWH,OAAA,CAAQ,sDAAR,CAuGfC,OAAAC,QAAA,CAzFqBE,QAAS,CAACC,KAAD,CAAQC,MAAR,CAC9B,CACI,IAAIC,EAAID,MAAAE,MAAR,CACIC,EAAIH,MAAAI,OADR,CAEIC,GAAKC,IAAAC,MAAA,CAAWN,CAAX,CAAe,CAAf,CAFT,CAGIO,GAAKF,IAAAC,MAAA,CAAWJ,CAAX,CAAe,CAAf,CAHT,CAIIM,QAAUZ,QAAA,CAASG,MAAT,CAAiB,OAAjB,CAA0B,EAA1B,CAEd,IAAgB,EAAhB,GAAIS,OAAJ,CAAA,CAKA,IAAIC,IAAMb,QAAA,CAASG,MAAT,CAAiB,OAAjB,CAA0B,EAA1B,CAAV,CACIW,QAAUd,QAAA,CAASG,MAAT,CAAiB,UAAjB,CAA6B,CAA7B,CADd,CAEIY,QAAUf,QAAA,CAASG,MAAT,CAAiB,UAAjB,CAA6B,CAA7B,CAFd,CAGIa,SAAWhB,QAAA,CAASG,MAAT;AAAiB,WAAjB,CAA8B,CAA9B,CAHf,CAIIc,SAAWjB,QAAA,CAASG,MAAT,CAAiB,WAAjB,CAA8B,CAA9B,CAJf,CAKIe,YAAclB,QAAA,CAASG,MAAT,CAAiB,aAAjB,CAAgC,CAAhC,CAEdgB,OAAAA,CAAcnB,QAAA,CAASG,MAAT,CAAiB,aAAjB,CAAgC,IAAhC,CAEE,KAApB,GAAIgB,MAAJ,GAEIA,MAEA,CAFcjB,KAAAkB,IAAAC,SAAAC,SAAA,CAA4BT,GAA5B,CAAAR,MAEd,CAFuDD,CAEvD,CAAIe,MAAJ,CAAkBP,OAAAW,OAAlB,GAEIJ,MAFJ,CAEkBP,OAAAW,OAFlB,CAJJ,CAUIC,MAAAA,CAAIV,OAGJW,YAAAA,CAAO,CACPC,UAAW,CAAA,CADJ,CAEPC,KAAMd,GAFC,CAGPe,KAAMxB,CAHC,CAIPyB,WAAYvB,CAAZuB,CAAgBX,WAJT,CAKPY,MAAO,EALA,CAUX,KAFA,IAAIC,EAAI,CAAR,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBpB,OAAAW,OAApB,CAAoCS,CAAA,EAApC,CACA,CAGI,IAAIC,SAAWrB,OAAAsB,WAAA,CAAmBF,CAAnB,CAEfP,YAAAK,MAAA,CAAWG,QAAX,CAAA,CACA,CACIT,EAAGA,KADP,CAEIW,EAAGA,OAFP,CAGI9B,MAAOD,CAHX,CAIIG,OAAQD,CAJZ,CAKI8B,QAAS5B,EALb,CAMI6B,QAAS1B,EANb;AAOI2B,QAAS,CAPb,CAQIC,QAAS,CARb,CASIC,SAAUpC,CATd,CAUIqB,KAAM,EAVV,CAWIgB,QAAS,EAXb,CAcAV,EAAA,EAEIA,EAAJ,GAAUZ,MAAV,EAEIY,CAEA,CAFI,CAEJ,CADAP,KACA,CADIV,OACJ,CAAAqB,OAAA,EAAK7B,CAAL,CAASW,QAJb,EAQIO,KARJ,EAQSpB,CART,CAQaY,QA9BjB,CAwCA,MANY0B,CACRjB,KAAMA,WADEiB,CAERC,MAAO,IAFCD,CAGRE,QAAS/B,GAHD6B,CAxEZ,CAPJ,CAtBiI;",
"sources":["node_modules/Phaser/src/gameobjects/bitmaptext/ParseRetroFont.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$bitmaptext$ParseRetroFont\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetValue = require('../../utils/object/GetValue');\r\n\r\n/**\r\n * Parses a Retro Font configuration object so you can pass it to the BitmapText constructor\r\n * and create a BitmapText object using a fixed-width retro font.\r\n *\r\n * @function Phaser.GameObjects.RetroFont.Parse\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - A reference to the Phaser Scene.\r\n * @param {Phaser.GameObjects.RetroFont.Config} config - The font configuration object.\r\n *\r\n * @return {object} A parsed Bitmap Font data entry for the Bitmap Font cache.\r\n */\r\nvar ParseRetroFont = function (scene, config)\r\n{\r\n    var w = config.width;\r\n    var h = config.height;\r\n    var cx = Math.floor(w / 2);\r\n    var cy = Math.floor(h / 2);\r\n    var letters = GetValue(config, 'chars', '');\r\n\r\n    if (letters === '')\r\n    {\r\n        return;\r\n    }\r\n\r\n    var key = GetValue(config, 'image', '');\r\n    var offsetX = GetValue(config, 'offset.x', 0);\r\n    var offsetY = GetValue(config, 'offset.y', 0);\r\n    var spacingX = GetValue(config, 'spacing.x', 0);\r\n    var spacingY = GetValue(config, 'spacing.y', 0);\r\n    var lineSpacing = GetValue(config, 'lineSpacing', 0);\r\n\r\n    var charsPerRow = GetValue(config, 'charsPerRow', null);\r\n\r\n    if (charsPerRow === null)\r\n    {\r\n        charsPerRow = scene.sys.textures.getFrame(key).width / w;\r\n\r\n        if (charsPerRow > letters.length)\r\n        {\r\n            charsPerRow = letters.length;\r\n        }\r\n    }\r\n\r\n    var x = offsetX;\r\n    var y = offsetY;\r\n\r\n    var data = {\r\n        retroFont: true,\r\n        font: key,\r\n        size: w,\r\n        lineHeight: h + lineSpacing,\r\n        chars: {}\r\n    };\r\n\r\n    var r = 0;\r\n\r\n    for (var i = 0; i < letters.length; i++)\r\n    {\r\n        // var node = letters[i];\r\n\r\n        var charCode = letters.charCodeAt(i);\r\n\r\n        data.chars[charCode] =\r\n        {\r\n            x: x,\r\n            y: y,\r\n            width: w,\r\n            height: h,\r\n            centerX: cx,\r\n            centerY: cy,\r\n            xOffset: 0,\r\n            yOffset: 0,\r\n            xAdvance: w,\r\n            data: {},\r\n            kerning: {}\r\n        };\r\n\r\n        r++;\r\n\r\n        if (r === charsPerRow)\r\n        {\r\n            r = 0;\r\n            x = offsetX;\r\n            y += h + spacingY;\r\n        }\r\n        else\r\n        {\r\n            x += w + spacingX;\r\n        }\r\n    }\r\n\r\n    var entry = {\r\n        data: data,\r\n        frame: null,\r\n        texture: key\r\n    };\r\n\r\n    return entry;\r\n};\r\n\r\nmodule.exports = ParseRetroFont;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetValue","ParseRetroFont","scene","config","w","width","h","height","cx","Math","floor","cy","letters","key","offsetX","offsetY","spacingX","spacingY","lineSpacing","charsPerRow","sys","textures","getFrame","length","x","data","retroFont","font","size","lineHeight","chars","r","i","charCode","charCodeAt","y","centerX","centerY","xOffset","yOffset","xAdvance","kerning","entry","frame","texture"]
}
