{
"version":3,
"file":"module$node_modules$Phaser$src$cameras$2d$BaseCamera.js",
"lineCount":19,
"mappings":"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",
"sources":["node_modules/Phaser/src/cameras/2d/BaseCamera.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$cameras$2d$BaseCamera\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar DegToRad = require('../../math/DegToRad');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Rectangle = require('../../geom/rectangle/Rectangle');\r\nvar TransformMatrix = require('../../gameobjects/components/TransformMatrix');\r\nvar ValueToColor = require('../../display/color/ValueToColor');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * @typedef {object} JSONCameraBounds\r\n * @property {number} x - The horizontal position of camera\r\n * @property {number} y - The vertical position of camera\r\n * @property {number} width - The width size of camera\r\n * @property {number} height - The height size of camera\r\n */\r\n\r\n/**\r\n * @typedef {object} JSONCamera\r\n *\r\n * @property {string} name - The name of the camera\r\n * @property {number} x - The horizontal position of camera\r\n * @property {number} y - The vertical position of camera\r\n * @property {number} width - The width size of camera\r\n * @property {number} height - The height size of camera\r\n * @property {number} zoom - The zoom of camera\r\n * @property {number} rotation - The rotation of camera\r\n * @property {boolean} roundPixels - The round pixels st status of camera\r\n * @property {number} scrollX - The horizontal scroll of camera\r\n * @property {number} scrollY - The vertical scroll of camera\r\n * @property {string} backgroundColor - The background color of camera\r\n * @property {(JSONCameraBounds|undefined)} [bounds] - The bounds of camera\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A Base Camera class.\r\n *\r\n * The Camera is the way in which all games are rendered in Phaser. They provide a view into your game world,\r\n * and can be positioned, rotated, zoomed and scrolled accordingly.\r\n *\r\n * A Camera consists of two elements: The viewport and the scroll values.\r\n *\r\n * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\r\n * created the same size as your game, but their position and size can be set to anything. This means if you\r\n * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\r\n * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\r\n *\r\n * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\r\n * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\r\n * viewport, and changing the viewport has no impact on the scrolling.\r\n *\r\n * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\r\n * allowing you to filter Game Objects out on a per-Camera basis.\r\n * \r\n * The Base Camera is extended by the Camera class, which adds in special effects including Fade,\r\n * Flash and Camera Shake, as well as the ability to follow Game Objects.\r\n * \r\n * The Base Camera was introduced in Phaser 3.12. It was split off from the Camera class, to allow\r\n * you to isolate special effects as needed. Therefore the 'since' values for properties of this class relate\r\n * to when they were added to the Camera class.\r\n *\r\n * @class BaseCamera\r\n * @memberOf Phaser.Cameras.Scene2D\r\n * @constructor\r\n * @since 3.12.0\r\n * \r\n * @extends Phaser.Events.EventEmitter\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {number} x - The x position of the Camera, relative to the top-left of the game canvas.\r\n * @param {number} y - The y position of the Camera, relative to the top-left of the game canvas.\r\n * @param {number} width - The width of the Camera, in pixels.\r\n * @param {number} height - The height of the Camera, in pixels.\r\n */\r\nvar BaseCamera = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.Visible\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function BaseCamera (x, y, width, height)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = 0; }\r\n        if (height === undefined) { height = 0; }\r\n\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the Scene this camera belongs to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene;\r\n\r\n        /**\r\n         * A reference to the Game Scene Manager.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#sceneManager\r\n         * @type {Phaser.Scenes.SceneManager}\r\n         * @since 3.12.0\r\n         */\r\n        this.sceneManager;\r\n\r\n        /**\r\n         * A reference to the Game Config.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#config\r\n         * @type {object}\r\n         * @readOnly\r\n         * @since 3.12.0\r\n         */\r\n        this.config;\r\n\r\n        /**\r\n         * The Camera ID. Assigned by the Camera Manager and used to handle camera exclusion.\r\n         * This value is a bitmask.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#id\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @since 3.11.0\r\n         */\r\n        this.id = 0;\r\n\r\n        /**\r\n         * The name of the Camera. This is left empty for your own use.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#name\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.name = '';\r\n\r\n        /**\r\n         * The resolution of the Game, used in most Camera calculations.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#resolution\r\n         * @type {number}\r\n         * @readOnly\r\n         * @since 3.12.0\r\n         */\r\n        this.resolution = 1;\r\n\r\n        /**\r\n         * Should this camera round its pixel values to integers?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#roundPixels\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.roundPixels = false;\r\n\r\n        /**\r\n         * Is this Camera visible or not?\r\n         *\r\n         * A visible camera will render and perform input tests.\r\n         * An invisible camera will not render anything and will skip input tests.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#visible\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.10.0\r\n         */\r\n\r\n        /**\r\n         * Is this Camera using a bounds to restrict scrolling movement?\r\n         *\r\n         * Set this property along with the bounds via `Camera.setBounds`.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#useBounds\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.useBounds = false;\r\n\r\n        /**\r\n         * The World View is a Rectangle that defines the area of the 'world' the Camera is currently looking at.\r\n         * This factors in the Camera viewport size, zoom and scroll position and is updated in the Camera preRender step.\r\n         * If you have enabled Camera bounds the worldview will be clamped to those bounds accordingly.\r\n         * You can use it for culling or intersection checks.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#worldView\r\n         * @type {Phaser.Geom.Rectangle}\r\n         * @readOnly\r\n         * @since 3.11.0\r\n         */\r\n        this.worldView = new Rectangle();\r\n\r\n        /**\r\n         * Is this Camera dirty?\r\n         * \r\n         * A dirty Camera has had either its viewport size, bounds, scroll, rotation or zoom levels changed since the last frame.\r\n         * \r\n         * This flag is cleared during the `postRenderCamera` method of the renderer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#dirty\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.11.0\r\n         */\r\n        this.dirty = true;\r\n\r\n        /**\r\n         * The x position of the Camera viewport, relative to the top-left of the game canvas.\r\n         * The viewport is the area into which the camera renders.\r\n         * To adjust the position the camera is looking at in the game world, see the `scrollX` value.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#x\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._x = x;\r\n\r\n        /**\r\n         * The y position of the Camera, relative to the top-left of the game canvas.\r\n         * The viewport is the area into which the camera renders.\r\n         * To adjust the position the camera is looking at in the game world, see the `scrollY` value.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#y\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._y = y;\r\n\r\n        /**\r\n         * Internal Camera X value multiplied by the resolution.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_cx\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._cx = 0;\r\n\r\n        /**\r\n         * Internal Camera Y value multiplied by the resolution.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_cy\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._cy = 0;\r\n\r\n        /**\r\n         * Internal Camera Width value multiplied by the resolution.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_cw\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._cw = 0;\r\n\r\n        /**\r\n         * Internal Camera Height value multiplied by the resolution.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_ch\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._ch = 0;\r\n\r\n        /**\r\n         * The width of the Camera viewport, in pixels.\r\n         *\r\n         * The viewport is the area into which the Camera renders. Setting the viewport does\r\n         * not restrict where the Camera can scroll to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_width\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._width = width;\r\n\r\n        /**\r\n         * The height of the Camera viewport, in pixels.\r\n         *\r\n         * The viewport is the area into which the Camera renders. Setting the viewport does\r\n         * not restrict where the Camera can scroll to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_height\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._height = height;\r\n\r\n        /**\r\n         * The bounds the camera is restrained to during scrolling.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_bounds\r\n         * @type {Phaser.Geom.Rectangle}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._bounds = new Rectangle();\r\n\r\n        /**\r\n         * The horizontal scroll position of this Camera.\r\n         *\r\n         * Change this value to cause the Camera to scroll around your Scene.\r\n         *\r\n         * Alternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\r\n         * will automatically adjust the Camera scroll values accordingly.\r\n         *\r\n         * You can set the bounds within which the Camera can scroll via the `setBounds` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_scrollX\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.11.0\r\n         */\r\n        this._scrollX = 0;\r\n\r\n        /**\r\n         * The vertical scroll position of this Camera.\r\n         *\r\n         * Change this value to cause the Camera to scroll around your Scene.\r\n         *\r\n         * Alternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\r\n         * will automatically adjust the Camera scroll values accordingly.\r\n         *\r\n         * You can set the bounds within which the Camera can scroll via the `setBounds` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_scrollY\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.11.0\r\n         */\r\n        this._scrollY = 0;\r\n\r\n        /**\r\n         * The Camera zoom value. Change this value to zoom in, or out of, a Scene.\r\n         *\r\n         * A value of 0.5 would zoom the Camera out, so you can now see twice as much\r\n         * of the Scene as before. A value of 2 would zoom the Camera in, so every pixel\r\n         * now takes up 2 pixels when rendered.\r\n         *\r\n         * Set to 1 to return to the default zoom level.\r\n         *\r\n         * Be careful to never set this value to zero.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_zoom\r\n         * @type {number}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this._zoom = 1;\r\n\r\n        /**\r\n         * The rotation of the Camera in radians.\r\n         *\r\n         * Camera rotation always takes place based on the Camera viewport. By default, rotation happens\r\n         * in the center of the viewport. You can adjust this with the `originX` and `originY` properties.\r\n         *\r\n         * Rotation influences the rendering of _all_ Game Objects visible by this Camera. However, it does not\r\n         * rotate the Camera viewport itself, which always remains an axis-aligned rectangle.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_rotation\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.11.0\r\n         */\r\n        this._rotation = 0;\r\n\r\n        /**\r\n         * A local transform matrix used for internal calculations.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#matrix\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.matrix = new TransformMatrix();\r\n\r\n        /**\r\n         * Does this Camera have a transparent background?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#transparent\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.transparent = true;\r\n\r\n        /**\r\n         * The background color of this Camera. Only used if `transparent` is `false`.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#backgroundColor\r\n         * @type {Phaser.Display.Color}\r\n         * @since 3.0.0\r\n         */\r\n        this.backgroundColor = ValueToColor('rgba(0,0,0,0)');\r\n\r\n        /**\r\n         * The Camera alpha value. Setting this property impacts every single object that this Camera\r\n         * renders. You can either set the property directly, i.e. via a Tween, to fade a Camera in or out,\r\n         * or via the chainable `setAlpha` method instead.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#alpha\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n\r\n        /**\r\n         * Should the camera cull Game Objects before checking them for input hit tests?\r\n         * In some special cases it may be beneficial to disable this.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#disableCull\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.disableCull = false;\r\n\r\n        /**\r\n         * A temporary array of culled objects.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#culledObjects\r\n         * @type {Phaser.GameObjects.GameObject[]}\r\n         * @default []\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.culledObjects = [];\r\n\r\n        /**\r\n         * The mid-point of the Camera in 'world' coordinates.\r\n         *\r\n         * Use it to obtain exactly where in the world the center of the camera is currently looking.\r\n         *\r\n         * This value is updated in the preRender method, after the scroll values and follower\r\n         * have been processed.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#midPoint\r\n         * @type {Phaser.Math.Vector2}\r\n         * @readOnly\r\n         * @since 3.11.0\r\n         */\r\n        this.midPoint = new Vector2(width / 2, height / 2);\r\n\r\n        /**\r\n         * The horizontal origin of rotation for this Camera.\r\n         *\r\n         * By default the camera rotates around the center of the viewport.\r\n         *\r\n         * Changing the origin allows you to adjust the point in the viewport from which rotation happens.\r\n         * A value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\r\n         *\r\n         * See `setOrigin` to set both origins in a single, chainable call.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#originX\r\n         * @type {number}\r\n         * @default 0.5\r\n         * @since 3.11.0\r\n         */\r\n        this.originX = 0.5;\r\n\r\n        /**\r\n         * The vertical origin of rotation for this Camera.\r\n         *\r\n         * By default the camera rotates around the center of the viewport.\r\n         *\r\n         * Changing the origin allows you to adjust the point in the viewport from which rotation happens.\r\n         * A value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\r\n         *\r\n         * See `setOrigin` to set both origins in a single, chainable call.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#originY\r\n         * @type {number}\r\n         * @default 0.5\r\n         * @since 3.11.0\r\n         */\r\n        this.originY = 0.5;\r\n\r\n        /**\r\n         * Does this Camera have a custom viewport?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_customViewport\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.12.0\r\n         */\r\n        this._customViewport = false;\r\n    },\r\n\r\n    /**\r\n     * Set the Alpha level of this Camera. The alpha controls the opacity of the Camera as it renders.\r\n     * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setAlpha\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} [value=1] - The Camera alpha value.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n\r\n    /**\r\n     * Sets the rotation origin of this Camera.\r\n     *\r\n     * The values are given in the range 0 to 1 and are only used when calculating Camera rotation.\r\n     *\r\n     * By default the camera rotates around the center of the viewport.\r\n     *\r\n     * Changing the origin allows you to adjust the point in the viewport from which rotation happens.\r\n     * A value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setOrigin\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} [x=0.5] - The horizontal origin value.\r\n     * @param {number} [y=x] - The vertical origin value. If not defined it will be set to the value of `x`.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setOrigin: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 0.5; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.originX = x;\r\n        this.originY = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates what the Camera.scrollX and scrollY values would need to be in order to move\r\n     * the Camera so it is centered on the given x and y coordinates, without actually moving\r\n     * the Camera there. The results are clamped based on the Camera bounds, if set.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#getScroll\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The horizontal coordinate to center on.\r\n     * @param {number} y - The vertical coordinate to center on.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vec2 to store the values in. If not given a new Vec2 is created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The scroll coordinates stored in the `x` abd `y` properties.\r\n     */\r\n    getScroll: function (x, y, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        var originX = this.width * 0.5;\r\n        var originY = this.height * 0.5;\r\n\r\n        out.x = x - originX;\r\n        out.y = y - originY;\r\n\r\n        if (this.useBounds)\r\n        {\r\n            out.x = this.clampX(out.x);\r\n            out.y = this.clampY(out.y);\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Moves the Camera so that it is centered on the given coordinates, bounds allowing.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#centerOn\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The horizontal coordinate to center on.\r\n     * @param {number} y - The vertical coordinate to center on.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    centerOn: function (x, y)\r\n    {\r\n        var originX = this.width * 0.5;\r\n        var originY = this.height * 0.5;\r\n\r\n        this.midPoint.set(x, y);\r\n\r\n        this.scrollX = x - originX;\r\n        this.scrollY = y - originY;\r\n\r\n        if (this.useBounds)\r\n        {\r\n            this.scrollX = this.clampX(this.scrollX);\r\n            this.scrollY = this.clampY(this.scrollY);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Moves the Camera so that it is looking at the center of the Camera Bounds, if enabled.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#centerToBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    centerToBounds: function ()\r\n    {\r\n        if (this.useBounds)\r\n        {\r\n            var bounds = this._bounds;\r\n            var originX = this.width * 0.5;\r\n            var originY = this.height * 0.5;\r\n\r\n            this.midPoint.set(bounds.centerX, bounds.centerY);\r\n\r\n            this.scrollX = bounds.centerX - originX;\r\n            this.scrollY = bounds.centerY - originY;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Moves the Camera so that it is re-centered based on its viewport size.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#centerToSize\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    centerToSize: function ()\r\n    {\r\n        this.scrollX = this.width * 0.5;\r\n        this.scrollY = this.height * 0.5;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes an array of Game Objects and returns a new array featuring only those objects\r\n     * visible by this camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.GameObjects.GameObject[]} G - [renderableObjects,$return]\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject[]} renderableObjects - An array of Game Objects to cull.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject[]} An array of Game Objects visible to this Camera.\r\n     */\r\n    cull: function (renderableObjects)\r\n    {\r\n        if (this.disableCull)\r\n        {\r\n            return renderableObjects;\r\n        }\r\n\r\n        var cameraMatrix = this.matrix.matrix;\r\n\r\n        var mva = cameraMatrix[0];\r\n        var mvb = cameraMatrix[1];\r\n        var mvc = cameraMatrix[2];\r\n        var mvd = cameraMatrix[3];\r\n\r\n        /* First Invert Matrix */\r\n        var determinant = (mva * mvd) - (mvb * mvc);\r\n\r\n        if (!determinant)\r\n        {\r\n            return renderableObjects;\r\n        }\r\n\r\n        var mve = cameraMatrix[4];\r\n        var mvf = cameraMatrix[5];\r\n\r\n        var scrollX = this.scrollX;\r\n        var scrollY = this.scrollY;\r\n        var cameraW = this.width;\r\n        var cameraH = this.height;\r\n        var culledObjects = this.culledObjects;\r\n        var length = renderableObjects.length;\r\n\r\n        determinant = 1 / determinant;\r\n\r\n        culledObjects.length = 0;\r\n\r\n        for (var index = 0; index < length; ++index)\r\n        {\r\n            var object = renderableObjects[index];\r\n\r\n            if (!object.hasOwnProperty('width') || object.parentContainer)\r\n            {\r\n                culledObjects.push(object);\r\n                continue;\r\n            }\r\n\r\n            var objectW = object.width;\r\n            var objectH = object.height;\r\n            var objectX = (object.x - (scrollX * object.scrollFactorX)) - (objectW * object.originX);\r\n            var objectY = (object.y - (scrollY * object.scrollFactorY)) - (objectH * object.originY);\r\n            var tx = (objectX * mva + objectY * mvc + mve);\r\n            var ty = (objectX * mvb + objectY * mvd + mvf);\r\n            var tw = ((objectX + objectW) * mva + (objectY + objectH) * mvc + mve);\r\n            var th = ((objectX + objectW) * mvb + (objectY + objectH) * mvd + mvf);\r\n            var cullW = cameraW + objectW;\r\n            var cullH = cameraH + objectH;\r\n\r\n            if (tx > -objectW && ty > -objectH && tx < cullW && ty < cullH &&\r\n                tw > -objectW && th > -objectH && tw < cullW && th < cullH)\r\n            {\r\n                culledObjects.push(object);\r\n            }\r\n        }\r\n\r\n        return culledObjects;\r\n    },\r\n\r\n    /**\r\n     * Converts the given `x` and `y` coordinates into World space, based on this Cameras transform.\r\n     * You can optionally provide a Vector2, or similar object, to store the results in.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#getWorldPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [output,$return]\r\n     *\r\n     * @param {number} x - The x position to convert to world space.\r\n     * @param {number} y - The y position to convert to world space.\r\n     * @param {(object|Phaser.Math.Vector2)} [output] - An optional object to store the results in. If not provided a new Vector2 will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} An object holding the converted values in its `x` and `y` properties.\r\n     */\r\n    getWorldPoint: function (x, y, output)\r\n    {\r\n        if (output === undefined) { output = new Vector2(); }\r\n\r\n        var cameraMatrix = this.matrix.matrix;\r\n\r\n        var mva = cameraMatrix[0];\r\n        var mvb = cameraMatrix[1];\r\n        var mvc = cameraMatrix[2];\r\n        var mvd = cameraMatrix[3];\r\n        var mve = cameraMatrix[4];\r\n        var mvf = cameraMatrix[5];\r\n\r\n        //  Invert Matrix\r\n        var determinant = (mva * mvd) - (mvb * mvc);\r\n\r\n        if (!determinant)\r\n        {\r\n            output.x = x;\r\n            output.y = y;\r\n\r\n            return output;\r\n        }\r\n\r\n        determinant = 1 / determinant;\r\n\r\n        var ima = mvd * determinant;\r\n        var imb = -mvb * determinant;\r\n        var imc = -mvc * determinant;\r\n        var imd = mva * determinant;\r\n        var ime = (mvc * mvf - mvd * mve) * determinant;\r\n        var imf = (mvb * mve - mva * mvf) * determinant;\r\n\r\n        var c = Math.cos(this.rotation);\r\n        var s = Math.sin(this.rotation);\r\n\r\n        var zoom = this.zoom;\r\n        var res = this.resolution;\r\n\r\n        var scrollX = this.scrollX;\r\n        var scrollY = this.scrollY;\r\n\r\n        //  Works for zoom of 1 with any resolution, but resolution > 1 and zoom !== 1 breaks\r\n        var sx = x + ((scrollX * c - scrollY * s) * zoom);\r\n        var sy = y + ((scrollX * s + scrollY * c) * zoom);\r\n\r\n        //  Apply transform to point\r\n        output.x = (sx * ima + sy * imc) * res + ime;\r\n        output.y = (sx * imb + sy * imd) * res + imf;\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Given a Game Object, or an array of Game Objects, it will update all of their camera filter settings\r\n     * so that they are ignored by this Camera. This means they will not be rendered by this Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#ignore\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group)} entries - The Game Object, or array of Game Objects, to be ignored by this Camera.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    ignore: function (entries)\r\n    {\r\n        var id = this.id;\r\n\r\n        if (!Array.isArray(entries))\r\n        {\r\n            entries = [ entries ];\r\n        }\r\n\r\n        for (var i = 0; i < entries.length; i++)\r\n        {\r\n            var entry = entries[i];\r\n\r\n            if (Array.isArray(entry))\r\n            {\r\n                this.ignore(entry);\r\n            }\r\n            else if (entry.isParent)\r\n            {\r\n                this.ignore(entry.getChildren());\r\n            }\r\n            else\r\n            {\r\n                entry.cameraFilter |= id;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal preRender step.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#preRender\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} baseScale - The base scale, as set in the Camera Manager.\r\n     * @param {number} resolution - The game resolution.\r\n     */\r\n    preRender: function (baseScale, resolution)\r\n    {\r\n        var width = this.width;\r\n        var height = this.height;\r\n\r\n        var halfWidth = width * 0.5;\r\n        var halfHeight = height * 0.5;\r\n\r\n        var zoom = this.zoom * baseScale;\r\n        var matrix = this.matrix;\r\n\r\n        var originX = width * this.originX;\r\n        var originY = height * this.originY;\r\n\r\n        var sx = this.scrollX;\r\n        var sy = this.scrollY;\r\n\r\n        if (this.useBounds)\r\n        {\r\n            sx = this.clampX(sx);\r\n            sy = this.clampY(sy);\r\n        }\r\n\r\n        if (this.roundPixels)\r\n        {\r\n            originX = Math.round(originX);\r\n            originY = Math.round(originY);\r\n        }\r\n\r\n        //  Values are in pixels and not impacted by zooming the Camera\r\n        this.scrollX = sx;\r\n        this.scrollY = sy;\r\n\r\n        var midX = sx + halfWidth;\r\n        var midY = sy + halfHeight;\r\n\r\n        //  The center of the camera, in world space, so taking zoom into account\r\n        //  Basically the pixel value of what it's looking at in the middle of the cam\r\n        this.midPoint.set(midX, midY);\r\n\r\n        var displayWidth = width / zoom;\r\n        var displayHeight = height / zoom;\r\n\r\n        this.worldView.setTo(\r\n            midX - (displayWidth / 2),\r\n            midY - (displayHeight / 2),\r\n            displayWidth,\r\n            displayHeight\r\n        );\r\n\r\n        matrix.loadIdentity();\r\n        matrix.scale(resolution, resolution);\r\n        matrix.translate(this.x + originX, this.y + originY);\r\n        matrix.rotate(this.rotation);\r\n        matrix.scale(zoom, zoom);\r\n        matrix.translate(-originX, -originY);\r\n    },\r\n\r\n    /**\r\n     * Takes an x value and checks it's within the range of the Camera bounds, adjusting if required.\r\n     * Do not call this method if you are not using camera bounds.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#clampX\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The value to horizontally scroll clamp.\r\n     *\r\n     * @return {number} The adjusted value to use as scrollX.\r\n     */\r\n    clampX: function (x)\r\n    {\r\n        var bounds = this._bounds;\r\n\r\n        var dw = this.displayWidth;\r\n\r\n        var bx = bounds.x + ((dw - this.width) / 2);\r\n        var bw = Math.max(bx, bx + bounds.width - dw);\r\n\r\n        if (x < bx)\r\n        {\r\n            x = bx;\r\n        }\r\n        else if (x > bw)\r\n        {\r\n            x = bw;\r\n        }\r\n\r\n        return x;\r\n    },\r\n\r\n    /**\r\n     * Takes a y value and checks it's within the range of the Camera bounds, adjusting if required.\r\n     * Do not call this method if you are not using camera bounds.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#clampY\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} y - The value to vertically scroll clamp.\r\n     *\r\n     * @return {number} The adjusted value to use as scrollY.\r\n     */\r\n    clampY: function (y)\r\n    {\r\n        var bounds = this._bounds;\r\n\r\n        var dh = this.displayHeight;\r\n\r\n        var by = bounds.y + ((dh - this.height) / 2);\r\n        var bh = Math.max(by, by + bounds.height - dh);\r\n\r\n        if (y < by)\r\n        {\r\n            y = by;\r\n        }\r\n        else if (y > bh)\r\n        {\r\n            y = bh;\r\n        }\r\n\r\n        return y;\r\n    },\r\n\r\n    /*\r\n        var gap = this._zoomInversed;\r\n        return gap * Math.round((src.x - this.scrollX * src.scrollFactorX) / gap);\r\n    */\r\n\r\n    /**\r\n     * If this Camera has previously had movement bounds set on it, this will remove them.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#removeBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    removeBounds: function ()\r\n    {\r\n        this.useBounds = false;\r\n\r\n        this.dirty = true;\r\n\r\n        this._bounds.setEmpty();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the rotation of this Camera. This causes everything it renders to appear rotated.\r\n     *\r\n     * Rotating a camera does not rotate the viewport itself, it is applied during rendering.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [value=0] - The cameras angle of rotation, given in degrees.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    setAngle: function (value)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n\r\n        this.rotation = DegToRad(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the background color for this Camera.\r\n     *\r\n     * By default a Camera has a transparent background but it can be given a solid color, with any level\r\n     * of transparency, via this method.\r\n     *\r\n     * The color value can be specified using CSS color notation, hex or numbers.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setBackgroundColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|number|InputColorObject)} [color='rgba(0,0,0,0)'] - The color value. In CSS, hex or numeric color notation.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    setBackgroundColor: function (color)\r\n    {\r\n        if (color === undefined) { color = 'rgba(0,0,0,0)'; }\r\n\r\n        this.backgroundColor = ValueToColor(color);\r\n\r\n        this.transparent = (this.backgroundColor.alpha === 0);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the bounds of the Camera. The bounds are an axis-aligned rectangle.\r\n     * \r\n     * The Camera bounds controls where the Camera can scroll to, stopping it from scrolling off the\r\n     * edges and into blank space. It does not limit the placement of Game Objects, or where\r\n     * the Camera viewport can be positioned.\r\n     * \r\n     * Temporarily disable the bounds by changing the boolean `Camera.useBounds`.\r\n     * \r\n     * Clear the bounds entirely by calling `Camera.removeBounds`.\r\n     * \r\n     * If you set bounds that are smaller than the viewport it will stop the Camera from being\r\n     * able to scroll. The bounds can be positioned where-ever you wish. By default they are from\r\n     * 0x0 to the canvas width x height. This means that the coordinate 0x0 is the top left of\r\n     * the Camera bounds. However, you can position them anywhere. So if you wanted a game world\r\n     * that was 2048x2048 in size, with 0x0 being the center of it, you can set the bounds x/y\r\n     * to be -1024, -1024, with a width and height of 2048. Depending on your game you may find\r\n     * it easier for 0x0 to be the top-left of the bounds, or you may wish 0x0 to be the middle.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} x - The top-left x coordinate of the bounds.\r\n     * @param {integer} y - The top-left y coordinate of the bounds.\r\n     * @param {integer} width - The width of the bounds, in pixels.\r\n     * @param {integer} height - The height of the bounds, in pixels.\r\n     * @param {boolean} [centerOn] - If `true` the Camera will automatically be centered on the new bounds.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    setBounds: function (x, y, width, height, centerOn)\r\n    {\r\n        this._bounds.setTo(x, y, width, height);\r\n\r\n        this.dirty = true;\r\n        this.useBounds = true;\r\n\r\n        if (centerOn)\r\n        {\r\n            this.centerToBounds();\r\n        }\r\n        else\r\n        {\r\n            this.scrollX = this.clampX(this.scrollX);\r\n            this.scrollY = this.clampY(this.scrollY);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the name of this Camera.\r\n     * This value is for your own use and isn't used internally.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setName\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [value=''] - The name of the Camera.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    setName: function (value)\r\n    {\r\n        if (value === undefined) { value = ''; }\r\n\r\n        this.name = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the position of the Camera viewport within the game.\r\n     *\r\n     * This does not change where the camera is 'looking'. See `setScroll` to control that.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The top-left x coordinate of the Camera viewport.\r\n     * @param {number} [y=x] - The top-left y coordinate of the Camera viewport.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the rotation of this Camera. This causes everything it renders to appear rotated.\r\n     *\r\n     * Rotating a camera does not rotate the viewport itself, it is applied during rendering.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setRotation\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [value=0] - The rotation of the Camera, in radians.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    setRotation: function (value)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n\r\n        this.rotation = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Should the Camera round pixel values to whole integers when rendering Game Objects?\r\n     * \r\n     * In some types of game, especially with pixel art, this is required to prevent sub-pixel aliasing.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setRoundPixels\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - `true` to round Camera pixels, `false` to not.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    setRoundPixels: function (value)\r\n    {\r\n        this.roundPixels = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the Scene the Camera is bound to.\r\n     * \r\n     * Also populates the `resolution` property and updates the internal size values.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setScene\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Scene} scene - The Scene the camera is bound to.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    setScene: function (scene)\r\n    {\r\n        if (this.scene && this._customViewport)\r\n        {\r\n            this.sceneManager.customViewports--;\r\n        }\r\n\r\n        this.scene = scene;\r\n\r\n        this.config = scene.sys.game.config;\r\n        this.sceneManager = scene.sys.game.scene;\r\n\r\n        var res = this.config.resolution;\r\n\r\n        this.resolution = res;\r\n\r\n        this._cx = this._x * res;\r\n        this._cy = this._y * res;\r\n        this._cw = this._width * res;\r\n        this._ch = this._height * res;\r\n\r\n        this.updateSystem();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the position of where the Camera is looking within the game.\r\n     * You can also modify the properties `Camera.scrollX` and `Camera.scrollY` directly.\r\n     * Use this method, or the scroll properties, to move your camera around the game world.\r\n     *\r\n     * This does not change where the camera viewport is placed. See `setPosition` to control that.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setScroll\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the Camera in the game world.\r\n     * @param {number} [y=x] - The y coordinate of the Camera in the game world.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    setScroll: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.scrollX = x;\r\n        this.scrollY = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the size of the Camera viewport.\r\n     *\r\n     * By default a Camera is the same size as the game, but can be made smaller via this method,\r\n     * allowing you to create mini-cam style effects by creating and positioning a smaller Camera\r\n     * viewport within your game.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} width - The width of the Camera viewport.\r\n     * @param {integer} [height=width] - The height of the Camera viewport.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    setSize: function (width, height)\r\n    {\r\n        if (height === undefined) { height = width; }\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * This method sets the position and size of the Camera viewport in a single call.\r\n     *\r\n     * If you're trying to change where the Camera is looking at in your game, then see\r\n     * the method `Camera.setScroll` instead. This method is for changing the viewport\r\n     * itself, not what the camera can see.\r\n     *\r\n     * By default a Camera is the same size as the game, but can be made smaller via this method,\r\n     * allowing you to create mini-cam style effects by creating and positioning a smaller Camera\r\n     * viewport within your game.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setViewport\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The top-left x coordinate of the Camera viewport.\r\n     * @param {number} y - The top-left y coordinate of the Camera viewport.\r\n     * @param {integer} width - The width of the Camera viewport.\r\n     * @param {integer} [height=width] - The height of the Camera viewport.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    setViewport: function (x, y, width, height)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the zoom value of the Camera.\r\n     *\r\n     * Changing to a smaller value, such as 0.5, will cause the camera to 'zoom out'.\r\n     * Changing to a larger value, such as 2, will cause the camera to 'zoom in'.\r\n     *\r\n     * A value of 1 means 'no zoom' and is the default.\r\n     *\r\n     * Changing the zoom does not impact the Camera viewport in any way, it is only applied during rendering.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setZoom\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [value=1] - The zoom value of the Camera. The minimum it can be is 0.001.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.BaseCamera} This Camera instance.\r\n     */\r\n    setZoom: function (value)\r\n    {\r\n        if (value === undefined) { value = 1; }\r\n\r\n        if (value === 0)\r\n        {\r\n            value = 0.001;\r\n        }\r\n\r\n        this.zoom = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the visibility of this Camera.\r\n     *\r\n     * An invisible Camera will skip rendering and input tests of everything it can see.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setVisible\r\n     * @since 3.10.0\r\n     *\r\n     * @param {boolean} value - The visible state of the Camera.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n\r\n    /**\r\n     * Returns an Object suitable for JSON storage containing all of the Camera viewport and rendering properties.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {JSONCamera} A well-formed object suitable for conversion to JSON.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var output = {\r\n            name: this.name,\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n            zoom: this.zoom,\r\n            rotation: this.rotation,\r\n            roundPixels: this.roundPixels,\r\n            scrollX: this.scrollX,\r\n            scrollY: this.scrollY,\r\n            backgroundColor: this.backgroundColor.rgba\r\n        };\r\n\r\n        if (this.useBounds)\r\n        {\r\n            output['bounds'] = {\r\n                x: this._bounds.x,\r\n                y: this._bounds.y,\r\n                width: this._bounds.width,\r\n                height: this._bounds.height\r\n            };\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Internal method called automatically by the Camera Manager.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#update\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function ()\r\n    {\r\n        //  NOOP\r\n    },\r\n\r\n    /**\r\n     * Internal method called automatically when the viewport changes.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#updateSystem\r\n     * @private\r\n     * @since 3.12.0\r\n     */\r\n    updateSystem: function ()\r\n    {\r\n        if (!this.config)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var custom = (this._x !== 0 || this._y !== 0 || this.config.width !== this._width || this.config.height !== this._height);\r\n\r\n        var sceneManager = this.sceneManager;\r\n\r\n        if (custom && !this._customViewport)\r\n        {\r\n            //  We need a custom viewport for this Camera\r\n            sceneManager.customViewports++;\r\n        }\r\n        else if (!custom && this._customViewport)\r\n        {\r\n            //  We're turning off a custom viewport for this Camera\r\n            sceneManager.customViewports--;\r\n        }\r\n\r\n        this.dirty = true;\r\n        this._customViewport = custom;\r\n    },\r\n\r\n    /**\r\n     * This event is fired when a camera is destroyed by the Camera Manager.\r\n     *\r\n     * @event CameraDestroyEvent\r\n     * @param {Phaser.Cameras.Scene2D.BaseCamera} camera - The camera that was destroyed.\r\n     */\r\n\r\n    /**\r\n     * Destroys this Camera instance. You rarely need to call this directly.\r\n     *\r\n     * Called by the Camera Manager. If you wish to destroy a Camera please use `CameraManager.remove` as\r\n     * cameras are stored in a pool, ready for recycling later, and calling this directly will prevent that.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#destroy\r\n     * @fires CameraDestroyEvent\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.emit('cameradestroy', this);\r\n\r\n        this.removeAllListeners();\r\n\r\n        this.matrix.destroy();\r\n\r\n        this.culledObjects = [];\r\n\r\n        if (this._customViewport)\r\n        {\r\n            //  We're turning off a custom viewport for this Camera\r\n            this.sceneManager.customViewports--;\r\n        }\r\n\r\n        this._bounds = null;\r\n\r\n        this.scene = null;\r\n        this.config = null;\r\n        this.sceneManager = null;\r\n    },\r\n\r\n    /**\r\n     * The x position of the Camera viewport, relative to the top-left of the game canvas.\r\n     * The viewport is the area into which the camera renders.\r\n     * To adjust the position the camera is looking at in the game world, see the `scrollX` value.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._x = value;\r\n            this._cx = value * this.resolution;\r\n            this.updateSystem();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y position of the Camera viewport, relative to the top-left of the game canvas.\r\n     * The viewport is the area into which the camera renders.\r\n     * To adjust the position the camera is looking at in the game world, see the `scrollY` value.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._y = value;\r\n            this._cy = value * this.resolution;\r\n            this.updateSystem();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The width of the Camera viewport, in pixels.\r\n     *\r\n     * The viewport is the area into which the Camera renders. Setting the viewport does\r\n     * not restrict where the Camera can scroll to.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#width\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    width: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._width;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._width = value;\r\n            this._cw = value * this.resolution;\r\n            this.updateSystem();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The height of the Camera viewport, in pixels.\r\n     *\r\n     * The viewport is the area into which the Camera renders. Setting the viewport does\r\n     * not restrict where the Camera can scroll to.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#height\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    height: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._height;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._height = value;\r\n            this._ch = value * this.resolution;\r\n            this.updateSystem();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The horizontal scroll position of this Camera.\r\n     *\r\n     * Change this value to cause the Camera to scroll around your Scene.\r\n     *\r\n     * Alternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\r\n     * will automatically adjust the Camera scroll values accordingly.\r\n     *\r\n     * You can set the bounds within which the Camera can scroll via the `setBounds` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#scrollX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    scrollX: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._scrollX;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._scrollX = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The vertical scroll position of this Camera.\r\n     *\r\n     * Change this value to cause the Camera to scroll around your Scene.\r\n     *\r\n     * Alternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\r\n     * will automatically adjust the Camera scroll values accordingly.\r\n     *\r\n     * You can set the bounds within which the Camera can scroll via the `setBounds` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#scrollY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    scrollY: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._scrollY;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._scrollY = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Camera zoom value. Change this value to zoom in, or out of, a Scene.\r\n     *\r\n     * A value of 0.5 would zoom the Camera out, so you can now see twice as much\r\n     * of the Scene as before. A value of 2 would zoom the Camera in, so every pixel\r\n     * now takes up 2 pixels when rendered.\r\n     *\r\n     * Set to 1 to return to the default zoom level.\r\n     *\r\n     * Be careful to never set this value to zero.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#zoom\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    zoom: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._zoom;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._zoom = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The rotation of the Camera in radians.\r\n     *\r\n     * Camera rotation always takes place based on the Camera viewport. By default, rotation happens\r\n     * in the center of the viewport. You can adjust this with the `originX` and `originY` properties.\r\n     *\r\n     * Rotation influences the rendering of _all_ Game Objects visible by this Camera. However, it does not\r\n     * rotate the Camera viewport itself, which always remains an axis-aligned rectangle.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#rotation\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.11.0\r\n     */\r\n    rotation: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._rotation;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._rotation = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The x position of the center of the Camera's viewport, relative to the top-left of the game canvas.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#centerX\r\n     * @type {number}\r\n     * @readOnly\r\n     * @since 3.10.0\r\n     */\r\n    centerX: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x + (0.5 * this.width);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y position of the center of the Camera's viewport, relative to the top-left of the game canvas.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#centerY\r\n     * @type {number}\r\n     * @readOnly\r\n     * @since 3.10.0\r\n     */\r\n    centerY: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y + (0.5 * this.height);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The displayed width of the camera viewport, factoring in the camera zoom level.\r\n     *\r\n     * If a camera has a viewport width of 800 and a zoom of 0.5 then its display width\r\n     * would be 1600, as it's displaying twice as many pixels as zoom level 1.\r\n     *\r\n     * Equally, a camera with a width of 800 and zoom of 2 would have a display width\r\n     * of 400 pixels.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#displayWidth\r\n     * @type {number}\r\n     * @readOnly\r\n     * @since 3.11.0\r\n     */\r\n    displayWidth: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.width / this.zoom;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The displayed height of the camera viewport, factoring in the camera zoom level.\r\n     *\r\n     * If a camera has a viewport height of 600 and a zoom of 0.5 then its display height\r\n     * would be 1200, as it's displaying twice as many pixels as zoom level 1.\r\n     *\r\n     * Equally, a camera with a height of 600 and zoom of 2 would have a display height\r\n     * of 300 pixels.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#displayHeight\r\n     * @type {number}\r\n     * @readOnly\r\n     * @since 3.11.0\r\n     */\r\n    displayHeight: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.height / this.zoom;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = BaseCamera;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Components","DegToRad","EventEmitter","Rectangle","TransformMatrix","ValueToColor","Vector2","BaseCamera","Extends","Mixins","Alpha","Visible","initialize","x","y","width","height","undefined","call","id","name","resolution","useBounds","roundPixels","worldView","dirty","_x","_y","_ch","_cw","_cy","_cx","_width","_height","_bounds","_scrollY","_scrollX","_zoom","_rotation","matrix","transparent","backgroundColor","disableCull","culledObjects","midPoint","originY","originX","_customViewport","setOrigin","getScroll","out","clampX","clampY","centerOn","set","scrollX","scrollY","centerToBounds","bounds","centerX","centerY","centerToSize","cull","renderableObjects","cameraMatrix","mva","mvb","mvc","mvd","mve","mvf","cameraW","cameraH","length","index","object","hasOwnProperty","parentContainer","push","objectW","objectH","objectX","scrollFactorX","objectY","scrollFactorY","tx","ty","tw","th","cullW","cullH","getWorldPoint","output","determinant","c","Math","cos","rotation","s","sin","zoom","res","sx","sy","ignore","entries","Array","isArray","i","entry","isParent","getChildren","cameraFilter","preRender","baseScale","halfWidth","halfHeight","round","midX","midY","displayWidth","displayHeight","setTo","loadIdentity","scale","translate","rotate","dw","bx","bw","max","dh","by","bh","removeBounds","setEmpty","setAngle","value","setBackgroundColor","color","alpha","setBounds","setName","setPosition","setRotation","setRoundPixels","setScene","scene","sceneManager","customViewports","config","sys","game","updateSystem","setScroll","setSize","setViewport","setZoom","toJSON","rgba","update","custom","destroy","emit","removeAllListeners","get"]
}
