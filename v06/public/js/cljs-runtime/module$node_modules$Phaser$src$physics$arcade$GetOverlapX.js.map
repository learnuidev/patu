{
"version":3,
"file":"module$node_modules$Phaser$src$physics$arcade$GetOverlapX.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOtH,IAAIC,MAAQH,OAAA,CAAQ,qDAAR,CA8FZC,OAAAC,QAAA,CA/EkBE,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAeC,WAAf,CAA4BC,IAA5B,CAC3B,CACI,IAAIC,QAAU,CACVC,KAAAA,CAAaL,KAAAM,UAAA,EAAbD,CAAiCJ,KAAAK,UAAA,EAAjCD,CAAqDF,IAEvC,EAAlB,GAAIH,KAAAO,IAAJ,EAAqC,CAArC,GAAuBN,KAAAM,IAAvB,EAGIP,KAAAQ,SACA,CADiB,CAAA,CACjB,CAAAP,KAAAO,SAAA,CAAiB,CAAA,CAJrB,EAMSR,KAAAO,IAAJ,CAAgBN,KAAAM,IAAhB,EAGDH,OAEA,CAFUJ,KAAAS,MAEV,CAFwBR,KAAAS,EAExB,CAAKN,OAAL,CAAeC,IAAf,EAA6B,CAACH,WAA9B,EAA6E,CAAA,CAA7E,GAA8CF,KAAAW,eAAAF,MAA9C,EAAoH,CAAA,CAApH,GAAsFR,KAAAU,eAAAC,KAAtF;AAEIR,OAFJ,CAEc,CAFd,EAMIJ,KAAAa,SAAAC,KAYA,CAZsB,CAAA,CAYtB,CAXAd,KAAAa,SAAAJ,MAWA,CAXuB,CAAA,CAWvB,CATAR,KAAAY,SAAAC,KASA,CATsB,CAAA,CAStB,CARAb,KAAAY,SAAAD,KAQA,CARsB,CAAA,CAQtB,CANIX,KAAAc,YAMJ,GAN0BjB,KAAAkB,YAM1B,GAJIhB,KAAAiB,QAAAH,KACA,CADqB,CAAA,CACrB,CAAAd,KAAAiB,QAAAR,MAAA,CAAsB,CAAA,CAG1B,EAAIT,KAAAe,YAAJ,GAA0BjB,KAAAkB,YAA1B,GAEIf,KAAAgB,QAAAH,KACA,CADqB,CAAA,CACrB,CAAAb,KAAAgB,QAAAL,KAAA,CAAqB,CAAA,CAHzB,CAlBJ,CALC,EA8BIZ,KAAAO,IA9BJ,CA8BgBN,KAAAM,IA9BhB,GAiCDH,OAEA,CAFUJ,KAAAU,EAEV,CAFoBT,KAAAiB,MAEpB,CAFkCjB,KAAAS,EAElC,CAAK,CAACN,OAAN,CAAgBC,IAAhB,EAA8B,CAACH,WAA/B,EAA6E,CAAA,CAA7E,GAA+CF,KAAAW,eAAAC,KAA/C,EAAqH,CAAA,CAArH,GAAsFX,KAAAU,eAAAF,MAAtF,CAEIL,OAFJ,CAEc,CAFd,EAMIJ,KAAAa,SAAAC,KAYA,CAZsB,CAAA,CAYtB,CAXAd,KAAAa,SAAAD,KAWA,CAXsB,CAAA,CAWtB,CATAX,KAAAY,SAAAC,KASA;AATsB,CAAA,CAStB,CARAb,KAAAY,SAAAJ,MAQA,CARuB,CAAA,CAQvB,CANIR,KAAAc,YAMJ,GAN0BjB,KAAAkB,YAM1B,GAJIhB,KAAAiB,QAAAH,KACA,CADqB,CAAA,CACrB,CAAAd,KAAAiB,QAAAL,KAAA,CAAqB,CAAA,CAGzB,EAAIZ,KAAAe,YAAJ,GAA0BjB,KAAAkB,YAA1B,GAEIf,KAAAgB,QAAAH,KACA,CADqB,CAAA,CACrB,CAAAb,KAAAgB,QAAAR,MAAA,CAAsB,CAAA,CAH1B,CAlBJ,CAnCC,CA8DLT,MAAAmB,SAAA,CAAiBf,OAGjB,OAFAH,MAAAkB,SAEA,CAFiBf,OAzErB,CAvBsH;",
"sources":["node_modules/Phaser/src/physics/arcade/GetOverlapX.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$arcade$GetOverlapX\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar CONST = require('./const');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Physics.Arcade.GetOverlapX\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.Body} body1 - [description]\r\n * @param {Phaser.Physics.Arcade.Body} body2 - [description]\r\n * @param {boolean} overlapOnly - [description]\r\n * @param {number} bias - [description]\r\n *\r\n * @return {number} [description]\r\n */\r\nvar GetOverlapX = function (body1, body2, overlapOnly, bias)\r\n{\r\n    var overlap = 0;\r\n    var maxOverlap = body1.deltaAbsX() + body2.deltaAbsX() + bias;\r\n\r\n    if (body1._dx === 0 && body2._dx === 0)\r\n    {\r\n        //  They overlap but neither of them are moving\r\n        body1.embedded = true;\r\n        body2.embedded = true;\r\n    }\r\n    else if (body1._dx > body2._dx)\r\n    {\r\n        //  Body1 is moving right and / or Body2 is moving left\r\n        overlap = body1.right - body2.x;\r\n\r\n        if ((overlap > maxOverlap && !overlapOnly) || body1.checkCollision.right === false || body2.checkCollision.left === false)\r\n        {\r\n            overlap = 0;\r\n        }\r\n        else\r\n        {\r\n            body1.touching.none = false;\r\n            body1.touching.right = true;\r\n\r\n            body2.touching.none = false;\r\n            body2.touching.left = true;\r\n\r\n            if (body2.physicsType === CONST.STATIC_BODY)\r\n            {\r\n                body1.blocked.none = false;\r\n                body1.blocked.right = true;\r\n            }\r\n\r\n            if (body1.physicsType === CONST.STATIC_BODY)\r\n            {\r\n                body2.blocked.none = false;\r\n                body2.blocked.left = true;\r\n            }\r\n        }\r\n    }\r\n    else if (body1._dx < body2._dx)\r\n    {\r\n        //  Body1 is moving left and/or Body2 is moving right\r\n        overlap = body1.x - body2.width - body2.x;\r\n\r\n        if ((-overlap > maxOverlap && !overlapOnly) || body1.checkCollision.left === false || body2.checkCollision.right === false)\r\n        {\r\n            overlap = 0;\r\n        }\r\n        else\r\n        {\r\n            body1.touching.none = false;\r\n            body1.touching.left = true;\r\n\r\n            body2.touching.none = false;\r\n            body2.touching.right = true;\r\n\r\n            if (body2.physicsType === CONST.STATIC_BODY)\r\n            {\r\n                body1.blocked.none = false;\r\n                body1.blocked.left = true;\r\n            }\r\n\r\n            if (body1.physicsType === CONST.STATIC_BODY)\r\n            {\r\n                body2.blocked.none = false;\r\n                body2.blocked.right = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    //  Resets the overlapX to zero if there is no overlap, or to the actual pixel value if there is\r\n    body1.overlapX = overlap;\r\n    body2.overlapX = overlap;\r\n\r\n    return overlap;\r\n};\r\n\r\nmodule.exports = GetOverlapX;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","CONST","GetOverlapX","body1","body2","overlapOnly","bias","overlap","maxOverlap","deltaAbsX","_dx","embedded","right","x","checkCollision","left","touching","none","physicsType","STATIC_BODY","blocked","width","overlapX"]
}
