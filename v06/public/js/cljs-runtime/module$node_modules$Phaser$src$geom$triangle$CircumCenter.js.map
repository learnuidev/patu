{
"version":3,
"file":"module$node_modules$Phaser$src$geom$triangle$CircumCenter.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOtH,IAAIC,QAAUH,OAAA,CAAQ,6CAAR,CA+DdC,OAAAC,QAAA,CAvBmBE,QAAS,CAACC,QAAD,CAAWC,GAAX,CAC5B,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,IAAIH,OAAnC,CAEA,KAAIK,GAAKH,QAAAI,GAAT,CACIC,GAAKL,QAAAM,GADT,CAGIC,GAAKP,QAAAQ,GAALD,CAAmBJ,EAHvB,CAIIM,GAAKT,QAAAU,GAALD,CAAmBJ,EAJvB,CAMIM,GAAKX,QAAAY,GAALD,CAAmBR,EACnBU,SAAAA,CAAKb,QAAAc,GAALD,CAAmBR,EAEvB,KAAIU,MAAQ,CAARA,EAAgBR,EAAhBQ,CAA4BF,QAA5BE,CAAoBN,EAApBM,CAAwBJ,EAAxBI,CAIJd,IAAAe,EAAA,CAAQb,EAAR,EAHeM,EAGf,EAH0CE,EAG1C,CAH+CA,EAG/C,CAHoDE,QAGpD,CAHyDA,QAGzD,GAHmBN,EAGnB,CAHwBA,EAGxB,CAH6BE,EAG7B,CAHkCA,EAGlC,EAHsCI,QAGtC,EAAoBE,KACpBd,IAAAgB,EAAA,CAAQZ,EAAR,EAHeE,EAGf,EAH0CI,EAG1C,CAH+CA,EAG/C,CAHoDE,QAGpD,CAHyDA,QAGzD;CAHmBN,EAGnB,CAHwBA,EAGxB,CAH6BE,EAG7B,CAHkCA,EAGlC,EAHsCE,EAGtC,EAAoBI,KAEpB,OAAOd,IAnBX,CAhDsH;",
"sources":["node_modules/Phaser/src/geom/triangle/CircumCenter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$triangle$CircumCenter\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n//  Adapted from http://bjornharrtell.github.io/jsts/doc/api/jsts_geom_Triangle.js.html\r\n\r\n/**\r\n * Computes the determinant of a 2x2 matrix. Uses standard double-precision arithmetic, so is susceptible to round-off error.\r\n *\r\n * @function det\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {number} m00 - The [0,0] entry of the matrix.\r\n * @param {number} m01 - The [0,1] entry of the matrix.\r\n * @param {number} m10 - The [1,0] entry of the matrix.\r\n * @param {number} m11 - The [1,1] entry of the matrix.\r\n *\r\n * @return {number} the determinant.\r\n */\r\nfunction det (m00, m01, m10, m11)\r\n{\r\n    return (m00 * m11) - (m01 * m10);\r\n}\r\n\r\n/**\r\n * Computes the circumcentre of a triangle. The circumcentre is the centre of\r\n * the circumcircle, the smallest circle which encloses the triangle. It is also\r\n * the common intersection point of the perpendicular bisectors of the sides of\r\n * the triangle, and is the only point which has equal distance to all three\r\n * vertices of the triangle.\r\n *\r\n * @function Phaser.Geom.Triangle.CircumCenter\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - [description]\r\n * @param {Phaser.Math.Vector2} [out] - [description]\r\n *\r\n * @return {Phaser.Math.Vector2} [description]\r\n */\r\nvar CircumCenter = function (triangle, out)\r\n{\r\n    if (out === undefined) { out = new Vector2(); }\r\n\r\n    var cx = triangle.x3;\r\n    var cy = triangle.y3;\r\n\r\n    var ax = triangle.x1 - cx;\r\n    var ay = triangle.y1 - cy;\r\n\r\n    var bx = triangle.x2 - cx;\r\n    var by = triangle.y2 - cy;\r\n\r\n    var denom = 2 * det(ax, ay, bx, by);\r\n    var numx = det(ay, ax * ax + ay * ay, by, bx * bx + by * by);\r\n    var numy = det(ax, ax * ax + ay * ay, bx, bx * bx + by * by);\r\n\r\n    out.x = cx - numx / denom;\r\n    out.y = cy + numy / denom;\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = CircumCenter;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Vector2","CircumCenter","triangle","out","undefined","cx","x3","cy","y3","ax","x1","ay","y1","bx","x2","by","y2","denom","x","y"]
}
