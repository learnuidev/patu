{
"version":3,
"file":"module$node_modules$Phaser$src$geom$polygon$Polygon.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/Phaser/src/geom/polygon/Polygon.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$polygon$Polygon\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Contains = require('./Contains');\r\nvar GetPoints = require('./GetPoints');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class Polygon\r\n * @memberOf Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Point[]} [points] - [description]\r\n */\r\nvar Polygon = new Class({\r\n\r\n    initialize:\r\n\r\n    function Polygon (points)\r\n    {\r\n        /**\r\n         * The area of this Polygon.\r\n         *\r\n         * @name Phaser.Geom.Polygon#area\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.area = 0;\r\n\r\n        /**\r\n         * An array of number pair objects that make up this polygon. I.e. [ {x,y}, {x,y}, {x,y} ]\r\n         *\r\n         * @name Phaser.Geom.Polygon#points\r\n         * @type {Phaser.Geom.Point[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.points = [];\r\n\r\n        if (points)\r\n        {\r\n            this.setTo(points);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Check to see if the Polygon contains the given x / y coordinates.\r\n     *\r\n     * @method Phaser.Geom.Polygon#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to check within the polygon.\r\n     * @param {number} y - The y coordinate to check within the polygon.\r\n     *\r\n     * @return {boolean} `true` if the coordinates are within the polygon, otherwise `false`.\r\n     */\r\n    contains: function (x, y)\r\n    {\r\n        return Contains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * Sets this Polygon to the given points.\r\n     *\r\n     * The points can be set from a variety of formats:\r\n     *\r\n     * - A string containing paired values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\r\n     * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\r\n     * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\r\n     * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\r\n     * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\r\n     *\r\n     * `setTo` may also be called without any arguments to remove all points.\r\n     *\r\n     * @method Phaser.Geom.Polygon#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {array} points - [description]\r\n     *\r\n     * @return {Phaser.Geom.Polygon} This Polygon object.\r\n     */\r\n    setTo: function (points)\r\n    {\r\n        this.area = 0;\r\n        this.points = [];\r\n\r\n        if (typeof points === 'string')\r\n        {\r\n            points = points.split(' ');\r\n        }\r\n\r\n        if (!Array.isArray(points))\r\n        {\r\n            return this;\r\n        }\r\n\r\n        var p;\r\n        var y0 = Number.MAX_VALUE;\r\n\r\n        //  The points argument is an array, so iterate through it\r\n        for (var i = 0; i < points.length; i++)\r\n        {\r\n            p = { x: 0, y: 0 };\r\n\r\n            if (typeof points[i] === 'number' || typeof points[i] === 'string')\r\n            {\r\n                p.x = parseFloat(points[i]);\r\n                p.y = parseFloat(points[i + 1]);\r\n                i++;\r\n            }\r\n            else if (Array.isArray(points[i]))\r\n            {\r\n                //  An array of arrays?\r\n                p.x = points[i][0];\r\n                p.y = points[i][1];\r\n            }\r\n            else\r\n            {\r\n                p.x = points[i].x;\r\n                p.y = points[i].y;\r\n            }\r\n\r\n            this.points.push(p);\r\n\r\n            //  Lowest boundary\r\n            if (p.y < y0)\r\n            {\r\n                y0 = p.y;\r\n            }\r\n        }\r\n\r\n        this.calculateArea(y0);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates the area of the Polygon. This is available in the property Polygon.area\r\n     *\r\n     * @method Phaser.Geom.Polygon#calculateArea\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The area of the polygon.\r\n     */\r\n    calculateArea: function ()\r\n    {\r\n        if (this.points.length < 3)\r\n        {\r\n            this.area = 0;\r\n\r\n            return this.area;\r\n        }\r\n\r\n        var sum = 0;\r\n        var p1;\r\n        var p2;\r\n\r\n        for (var i = 0; i < this.points.length - 1; i++)\r\n        {\r\n            p1 = this.points[i];\r\n            p2 = this.points[i + 1];\r\n\r\n            sum += (p2.x - p1.x) * (p1.y + p2.y);\r\n        }\r\n\r\n        p1 = this.points[0];\r\n        p2 = this.points[this.points.length - 1];\r\n\r\n        sum += (p1.x - p2.x) * (p2.y + p1.y);\r\n\r\n        this.area = -sum * 0.5;\r\n\r\n        return this.area;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of Point objects containing the coordinates of the points around the perimeter of the Polygon,\r\n     * based on the given quantity or stepRate values.\r\n     *\r\n     * @method Phaser.Geom.Polygon#getPoints\r\n     * @since 3.12.0\r\n     *\r\n     * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n     * @param {number} [stepRate] - Sets the quantity by getting the perimeter of the Polygon and dividing it by the stepRate.\r\n     * @param {array} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n     *\r\n     * @return {Phaser.Geom.Point[]} An array of Point objects pertaining to the points around the perimeter of the Polygon.\r\n     */\r\n    getPoints: function (quantity, step, output)\r\n    {\r\n        return GetPoints(this, quantity, step, output);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Polygon;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Contains","GetPoints","Polygon","initialize","points","area","setTo","contains","x","y","split","Array","isArray","p","y0","Number","MAX_VALUE","i","length","parseFloat","push","calculateArea","sum","p1","p2","getPoints","quantity","step","output"]
}
