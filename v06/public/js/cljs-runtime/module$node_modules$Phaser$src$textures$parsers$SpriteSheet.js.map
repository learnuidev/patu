{
"version":3,
"file":"module$node_modules$Phaser$src$textures$parsers$SpriteSheet.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,4DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOxH,IAAIC,aAAeH,OAAA,CAAQ,0DAAR,CAgHnBC,OAAAC,QAAA,CAnFkBE,QAAS,CAACC,OAAD,CAAUC,WAAV,CAAuBC,CAAvB,CAA0BC,CAA1B,CAA6BC,KAA7B,CAAoCC,MAApC,CAA4CC,MAA5C,CAC3B,CACI,IAAIC,WAAaT,YAAA,CAAaQ,MAAb,CAAqB,YAArB,CAAmC,IAAnC,CAAjB,CACIE,YAAcV,YAAA,CAAaQ,MAAb,CAAqB,aAArB,CAAoCC,UAApC,CAGlB,IAAmB,IAAnB,GAAIA,UAAJ,CAEI,KAAUE,MAAJ,CAAU,uDAAV,CAAN,CAIJ,IAAIC,OAASV,OAAAU,OAAA,CAAeT,WAAf,CAEbD;OAAAW,IAAA,CAAY,QAAZ,CAAsBV,WAAtB,CAAmC,CAAnC,CAAsC,CAAtC,CAAyCS,MAAAN,MAAzC,CAAuDM,MAAAL,OAAvD,CAEA,KAAIO,WAAad,YAAA,CAAaQ,MAAb,CAAqB,YAArB,CAAmC,CAAnC,CAAjB,CACIO,SAAWf,YAAA,CAAaQ,MAAb,CAAqB,UAArB,CAAiC,EAAjC,CACXQ,OAAAA,CAAShB,YAAA,CAAaQ,MAAb,CAAqB,QAArB,CAA+B,CAA/B,CACTS,OAAAA,CAAUjB,YAAA,CAAaQ,MAAb,CAAqB,SAArB,CAAgC,CAAhC,CAId,KAAIU,MAFMC,IAAAC,MAAAC,EAAYf,KAAZe,CAAoBL,MAApBK,CAA6BJ,MAA7BI,GAAyCZ,UAAzCY,CAAsDJ,MAAtDI,EAENH,CADSC,IAAAC,MAAAE,EAAYf,MAAZe,CAAqBN,MAArBM,CAA8BL,MAA9BK,GAA0CZ,WAA1CY,CAAwDL,MAAxDK,EAGC,EAAd,GAAIJ,KAAJ,EAEIK,OAAAC,KAAA,CAAa,0DAAb,CAGJ,IAAIV,UAAJ,CAAiBI,KAAjB,EAA0BJ,UAA1B,CAAuC,CAACI,KAAxC,CAEIJ,UAAA,CAAa,CAGA,EAAjB,CAAIA,UAAJ;CAGIA,UAHJ,CAGiBI,KAHjB,CAGyBJ,UAHzB,CAMiB,GAAjB,GAAIC,QAAJ,GAEIG,KAFJ,CAEYJ,UAFZ,EAE0BC,QAF1B,CAEqC,CAFrC,EAMIU,SAAAA,CADAC,UACAD,CADKT,MAKT,KAHA,IAAIW,EAAJ,CACIC,EADJ,CAGSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBX,KAApB,CAA2BW,CAAA,EAA3B,CACA,CAEID,EAAA,CADAD,EACA,CADK,CAGL,KAAIG,EAAIJ,UAAJI,CAASrB,UAAb,CACIsB,EAAIN,QAAJM,CAASrB,WAEToB,EAAJ,CAAQxB,KAAR,GAEIqB,EAFJ,CAESG,CAFT,CAEaxB,KAFb,CAKIyB,EAAJ,CAAQxB,MAAR,GAEIqB,EAFJ,CAESG,CAFT,CAEaxB,MAFb,CAKAL,QAAAW,IAAA,CAAYgB,CAAZ,CAAe1B,WAAf,CAA4BC,CAA5B,CAAgCsB,UAAhC,CAAoCrB,CAApC,CAAwCoB,QAAxC,CAA4ChB,UAA5C,CAAyDkB,EAAzD,CAA6DjB,WAA7D,CAA2EkB,EAA3E,CAEAF,WAAA,EAAMjB,UAAN,CAAmBQ,MAEfS,WAAJ,CAASjB,UAAT,CAAsBH,KAAtB,GAEIoB,UACA,CADKV,MACL,CAAAS,QAAA,EAAMf,WAAN,CAAoBO,MAHxB,CArBJ,CA4BA,MAAOf,QA/EX,CArCwH;",
"sources":["node_modules/Phaser/src/textures/parsers/SpriteSheet.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$textures$parsers$SpriteSheet\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\n\r\n/**\r\n * Parses a Sprite Sheet and adds the Frames to the Texture.\r\n * \r\n * In Phaser terminology a Sprite Sheet is a texture containing different frames, but each frame is the exact\r\n * same size and cannot be trimmed or rotated.\r\n *\r\n * @function Phaser.Textures.Parsers.SpriteSheet\r\n * @memberOf Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {integer} sourceIndex - The index of the TextureSource.\r\n * @param {integer} x - [description]\r\n * @param {integer} y - [description]\r\n * @param {integer} width - [description]\r\n * @param {integer} height - [description]\r\n * @param {object} config - An object describing how to parse the Sprite Sheet.\r\n * @param {number} config.frameWidth - Width in pixels of a single frame in the sprite sheet.\r\n * @param {number} [config.frameHeight] - Height in pixels of a single frame in the sprite sheet. Defaults to frameWidth if not provided.\r\n * @param {number} [config.startFrame=0] - [description]\r\n * @param {number} [config.endFrame=-1] - [description]\r\n * @param {number} [config.margin=0] - If the frames have been drawn with a margin, specify the amount here.\r\n * @param {number} [config.spacing=0] - If the frames have been drawn with spacing between them, specify the amount here.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\r\nvar SpriteSheet = function (texture, sourceIndex, x, y, width, height, config)\r\n{\r\n    var frameWidth = GetFastValue(config, 'frameWidth', null);\r\n    var frameHeight = GetFastValue(config, 'frameHeight', frameWidth);\r\n\r\n    //  If missing we can't proceed\r\n    if (frameWidth === null)\r\n    {\r\n        throw new Error('TextureManager.SpriteSheet: Invalid frameWidth given.');\r\n    }\r\n\r\n    //  Add in a __BASE entry (for the entire atlas)\r\n    var source = texture.source[sourceIndex];\r\n\r\n    texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height);\r\n\r\n    var startFrame = GetFastValue(config, 'startFrame', 0);\r\n    var endFrame = GetFastValue(config, 'endFrame', -1);\r\n    var margin = GetFastValue(config, 'margin', 0);\r\n    var spacing = GetFastValue(config, 'spacing', 0);\r\n\r\n    var row = Math.floor((width - margin + spacing) / (frameWidth + spacing));\r\n    var column = Math.floor((height - margin + spacing) / (frameHeight + spacing));\r\n    var total = row * column;\r\n\r\n    if (total === 0)\r\n    {\r\n        console.warn('SpriteSheet frame dimensions will result in zero frames.');\r\n    }\r\n\r\n    if (startFrame > total || startFrame < -total)\r\n    {\r\n        startFrame = 0;\r\n    }\r\n\r\n    if (startFrame < 0)\r\n    {\r\n        //  Allow negative skipframes.\r\n        startFrame = total + startFrame;\r\n    }\r\n\r\n    if (endFrame !== -1)\r\n    {\r\n        total = startFrame + (endFrame + 1);\r\n    }\r\n\r\n    var fx = margin;\r\n    var fy = margin;\r\n    var ax = 0;\r\n    var ay = 0;\r\n\r\n    for (var i = 0; i < total; i++)\r\n    {\r\n        ax = 0;\r\n        ay = 0;\r\n\r\n        var w = fx + frameWidth;\r\n        var h = fy + frameHeight;\r\n\r\n        if (w > width)\r\n        {\r\n            ax = w - width;\r\n        }\r\n\r\n        if (h > height)\r\n        {\r\n            ay = h - height;\r\n        }\r\n\r\n        texture.add(i, sourceIndex, x + fx, y + fy, frameWidth - ax, frameHeight - ay);\r\n\r\n        fx += frameWidth + spacing;\r\n\r\n        if (fx + frameWidth > width)\r\n        {\r\n            fx = margin;\r\n            fy += frameHeight + spacing;\r\n        }\r\n    }\r\n\r\n    return texture;\r\n};\r\n\r\nmodule.exports = SpriteSheet;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetFastValue","SpriteSheet","texture","sourceIndex","x","y","width","height","config","frameWidth","frameHeight","Error","source","add","startFrame","endFrame","margin","spacing","total","Math","floor","row","column","console","warn","fy","fx","ax","ay","i","w","h"]
}
