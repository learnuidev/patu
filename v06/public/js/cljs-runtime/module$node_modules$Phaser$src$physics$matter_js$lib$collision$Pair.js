shadow$provide.module$node_modules$Phaser$src$physics$matter_js$lib$collision$Pair=function(global,require,module,exports){var Pair={};module.exports=Pair;(function(){Pair.create=function(collision,timestamp){var bodyA=collision.bodyA,bodyB=collision.bodyB;bodyA={id:Pair.id(bodyA,bodyB),bodyA:bodyA,bodyB:bodyB,activeContacts:[],separation:0,isActive:!0,confirmedActive:!0,isSensor:bodyA.isSensor||bodyB.isSensor,timeCreated:timestamp,timeUpdated:timestamp,collision:null,inverseMass:0,friction:0,frictionStatic:0,
restitution:0,slop:0};Pair.update(bodyA,collision,timestamp);return bodyA};Pair.update=function(pair,collision,timestamp){pair.collision=collision;if(collision.collided){var supports=collision.supports,activeContacts=pair.activeContacts,parentA=collision.parentA,parentB=collision.parentB;pair.inverseMass=parentA.inverseMass+parentB.inverseMass;pair.friction=Math.min(parentA.friction,parentB.friction);pair.frictionStatic=Math.max(parentA.frictionStatic,parentB.frictionStatic);pair.restitution=Math.max(parentA.restitution,
parentB.restitution);pair.slop=Math.max(parentA.slop,parentB.slop);for(parentA=0;parentA<supports.length;parentA++)activeContacts[parentA]=supports[parentA].contact;supports=supports.length;supports<activeContacts.length&&(activeContacts.length=supports);pair.separation=collision.depth;Pair.setActive(pair,!0,timestamp)}else!0===pair.isActive&&Pair.setActive(pair,!1,timestamp)};Pair.setActive=function(pair,isActive,timestamp){isActive?(pair.isActive=!0,pair.timeUpdated=timestamp):(pair.isActive=!1,
pair.activeContacts.length=0)};Pair.id=function(bodyA,bodyB){return bodyA.id<bodyB.id?"A"+bodyA.id+"B"+bodyB.id:"A"+bodyB.id+"B"+bodyA.id}})()}
//# sourceMappingURL=module$node_modules$Phaser$src$physics$matter_js$lib$collision$Pair.js.map
