{
"version":3,
"file":"module$node_modules$Phaser$src$physics$impact$CollisionMap.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/impact/CollisionMap.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$impact$CollisionMap\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar DefaultDefs = require('./DefaultDefs');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class CollisionMap\r\n * @memberOf Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {integer} [tilesize=32] - [description]\r\n * @param {array} [data] - [description]\r\n */\r\nvar CollisionMap = new Class({\r\n\r\n    initialize:\r\n\r\n    function CollisionMap (tilesize, data)\r\n    {\r\n        if (tilesize === undefined) { tilesize = 32; }\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.CollisionMap#tilesize\r\n         * @type {integer}\r\n         * @default 32\r\n         * @since 3.0.0\r\n         */\r\n        this.tilesize = tilesize;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.CollisionMap#data\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.data = (Array.isArray(data)) ? data : [];\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.CollisionMap#width\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = (Array.isArray(data)) ? data[0].length : 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.CollisionMap#height\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = (Array.isArray(data)) ? data.length : 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.CollisionMap#lastSlope\r\n         * @type {integer}\r\n         * @default 55\r\n         * @since 3.0.0\r\n         */\r\n        this.lastSlope = 55;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.CollisionMap#tiledef\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.tiledef = DefaultDefs;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.CollisionMap#trace\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} vx - [description]\r\n     * @param {number} vy - [description]\r\n     * @param {number} objectWidth - [description]\r\n     * @param {number} objectHeight - [description]\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    trace: function (x, y, vx, vy, objectWidth, objectHeight)\r\n    {\r\n        // Set up the trace-result\r\n        var res = {\r\n            collision: { x: false, y: false, slope: false },\r\n            pos: { x: x + vx, y: y + vy },\r\n            tile: { x: 0, y: 0 }\r\n        };\r\n\r\n        if (!this.data)\r\n        {\r\n            return res;\r\n        }\r\n        \r\n        var steps = Math.ceil(Math.max(Math.abs(vx), Math.abs(vy)) / this.tilesize);\r\n\r\n        if (steps > 1)\r\n        {\r\n            var sx = vx / steps;\r\n            var sy = vy / steps;\r\n            \r\n            for (var i = 0; i < steps && (sx || sy); i++)\r\n            {\r\n                this.step(res, x, y, sx, sy, objectWidth, objectHeight, vx, vy, i);\r\n                \r\n                x = res.pos.x;\r\n                y = res.pos.y;\r\n\r\n                if (res.collision.x)\r\n                {\r\n                    sx = 0;\r\n                    vx = 0;\r\n                }\r\n\r\n                if (res.collision.y)\r\n                {\r\n                    sy = 0;\r\n                    vy = 0;\r\n                }\r\n\r\n                if (res.collision.slope)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.step(res, x, y, vx, vy, objectWidth, objectHeight, vx, vy, 0);\r\n        }\r\n        \r\n        return res;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.CollisionMap#step\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} res - [description]\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} vx - [description]\r\n     * @param {number} vy - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {number} rvx - [description]\r\n     * @param {number} rvy - [description]\r\n     * @param {number} step - [description]\r\n     */\r\n    step: function (res, x, y, vx, vy, width, height, rvx, rvy, step)\r\n    {\r\n        var t = 0;\r\n        var tileX;\r\n        var tileY;\r\n        var tilesize = this.tilesize;\r\n        var mapWidth = this.width;\r\n        var mapHeight = this.height;\r\n        \r\n        //  Horizontal\r\n        if (vx)\r\n        {\r\n            var pxOffsetX = (vx > 0 ? width : 0);\r\n            var tileOffsetX = (vx < 0 ? tilesize : 0);\r\n            \r\n            var firstTileY = Math.max(Math.floor(y / tilesize), 0);\r\n            var lastTileY = Math.min(Math.ceil((y + height) / tilesize), mapHeight);\r\n            \r\n            tileX = Math.floor((res.pos.x + pxOffsetX) / tilesize);\r\n\r\n            var prevTileX = Math.floor((x + pxOffsetX) / tilesize);\r\n\r\n            if (step > 0 || tileX === prevTileX || prevTileX < 0 || prevTileX >= mapWidth)\r\n            {\r\n                prevTileX = -1;\r\n            }\r\n           \r\n            if (tileX >= 0 && tileX < mapWidth)\r\n            {\r\n                for (tileY = firstTileY; tileY < lastTileY; tileY++)\r\n                {\r\n                    if (prevTileX !== -1)\r\n                    {\r\n                        t = this.data[tileY][prevTileX];\r\n\r\n                        if (t > 1 && t <= this.lastSlope && this.checkDef(res, t, x, y, rvx, rvy, width, height, prevTileX, tileY))\r\n                        {\r\n                            break;\r\n                        }\r\n                    }\r\n                    \r\n                    t = this.data[tileY][tileX];\r\n\r\n                    if (t === 1 || t > this.lastSlope || (t > 1 && this.checkDef(res, t, x, y, rvx, rvy, width, height, tileX, tileY)))\r\n                    {\r\n                        if (t > 1 && t <= this.lastSlope && res.collision.slope)\r\n                        {\r\n                            break;\r\n                        }\r\n                        \r\n                        res.collision.x = true;\r\n                        res.tile.x = t;\r\n                        res.pos.x = (tileX * tilesize) - pxOffsetX + tileOffsetX;\r\n                        x = res.pos.x;\r\n                        rvx = 0;\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        //  Vertical\r\n        if (vy)\r\n        {\r\n            var pxOffsetY = (vy > 0 ? height : 0);\r\n            var tileOffsetY = (vy < 0 ? tilesize : 0);\r\n            \r\n            var firstTileX = Math.max(Math.floor(res.pos.x / tilesize), 0);\r\n            var lastTileX = Math.min(Math.ceil((res.pos.x + width) / tilesize), mapWidth);\r\n            \r\n            tileY = Math.floor((res.pos.y + pxOffsetY) / tilesize);\r\n            \r\n            var prevTileY = Math.floor((y + pxOffsetY) / tilesize);\r\n\r\n            if (step > 0 || tileY === prevTileY || prevTileY < 0 || prevTileY >= mapHeight)\r\n            {\r\n                prevTileY = -1;\r\n            }\r\n            \r\n            if (tileY >= 0 && tileY < mapHeight)\r\n            {\r\n                for (tileX = firstTileX; tileX < lastTileX; tileX++)\r\n                {\r\n                    if (prevTileY !== -1)\r\n                    {\r\n                        t = this.data[prevTileY][tileX];\r\n\r\n                        if (t > 1 && t <= this.lastSlope && this.checkDef(res, t, x, y, rvx, rvy, width, height, tileX, prevTileY))\r\n                        {\r\n                            break;\r\n                        }\r\n                    }\r\n                    \r\n                    t = this.data[tileY][tileX];\r\n\r\n                    if (t === 1 || t > this.lastSlope || (t > 1 && this.checkDef(res, t, x, y, rvx, rvy, width, height, tileX, tileY)))\r\n                    {\r\n                        if (t > 1 && t <= this.lastSlope && res.collision.slope)\r\n                        {\r\n                            break;\r\n                        }\r\n                        \r\n                        res.collision.y = true;\r\n                        res.tile.y = t;\r\n                        res.pos.y = tileY * tilesize - pxOffsetY + tileOffsetY;\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.CollisionMap#checkDef\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} res - [description]\r\n     * @param {number} t - [description]\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} vx - [description]\r\n     * @param {number} vy - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {number} tileX - [description]\r\n     * @param {number} tileY - [description]\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    checkDef: function (res, t, x, y, vx, vy, width, height, tileX, tileY)\r\n    {\r\n        var def = this.tiledef[t];\r\n\r\n        if (!def)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var tilesize = this.tilesize;\r\n        \r\n        var lx = (tileX + def[0]) * tilesize;\r\n        var ly = (tileY + def[1]) * tilesize;\r\n        var lvx = (def[2] - def[0]) * tilesize;\r\n        var lvy = (def[3] - def[1]) * tilesize;\r\n        var solid = def[4];\r\n        \r\n        var tx = x + vx + (lvy < 0 ? width : 0) - lx;\r\n        var ty = y + vy + (lvx > 0 ? height : 0) - ly;\r\n        \r\n        if (lvx * ty - lvy * tx > 0)\r\n        {\r\n            if (vx * -lvy + vy * lvx < 0)\r\n            {\r\n                return solid;\r\n            }\r\n            \r\n            var length = Math.sqrt(lvx * lvx + lvy * lvy);\r\n            var nx = lvy / length;\r\n            var ny = -lvx / length;\r\n            \r\n            var proj = tx * nx + ty * ny;\r\n            var px = nx * proj;\r\n            var py = ny * proj;\r\n            \r\n            if (px * px + py * py >= vx * vx + vy * vy)\r\n            {\r\n                return solid || (lvx * (ty - vy) - lvy * (tx - vx) < 0.5);\r\n            }\r\n            \r\n            res.pos.x = x + vx - px;\r\n            res.pos.y = y + vy - py;\r\n            res.collision.slope = { x: lvx, y: lvy, nx: nx, ny: ny };\r\n\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = CollisionMap;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","DefaultDefs","CollisionMap","initialize","tilesize","data","undefined","Array","isArray","width","length","height","lastSlope","tiledef","trace","x","y","vx","vy","objectWidth","objectHeight","res","collision","slope","pos","tile","steps","Math","ceil","max","abs","sx","sy","i","step","rvx","rvy","mapWidth","mapHeight","pxOffsetX","tileOffsetX","firstTileY","floor","lastTileY","min","tileX","prevTileX","tileY","t","checkDef","pxOffsetY","tileOffsetY","firstTileX","lastTileX","prevTileY","def","lvx","lvy","solid","tx","ty","sqrt","nx","ny","proj","px","py"]
}
