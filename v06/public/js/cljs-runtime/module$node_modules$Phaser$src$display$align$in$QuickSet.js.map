{
"version":3,
"file":"module$node_modules$Phaser$src$display$align$in$QuickSet.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOjHC,MAAAA,CAAcH,OAAA,CAAQ,oDAAR,CAElB,KAAII,WAAa,EAEjBA,WAAA,CAAWD,MAAAE,cAAX,CAAA,CAAwCL,OAAA,CAAQ,8DAAR,CACxCI,WAAA,CAAWD,MAAAG,YAAX,CAAA,CAAsCN,OAAA,CAAQ,4DAAR,CACtCI,WAAA,CAAWD,MAAAI,aAAX,CAAA,CAAuCP,OAAA,CAAQ,6DAAR,CACvCI;UAAA,CAAWD,MAAAK,OAAX,CAAA,CAAiCR,OAAA,CAAQ,wDAAR,CACjCI,WAAA,CAAWD,MAAAM,YAAX,CAAA,CAAsCT,OAAA,CAAQ,4DAAR,CACtCI,WAAA,CAAWD,MAAAO,aAAX,CAAA,CAAuCV,OAAA,CAAQ,6DAAR,CACvCI,WAAA,CAAWD,MAAAQ,WAAX,CAAA,CAAqCX,OAAA,CAAQ,2DAAR,CACrCI,WAAA,CAAWD,MAAAS,SAAX,CAAA,CAAmCZ,OAAA,CAAQ,yDAAR,CACnCI,WAAA,CAAWD,MAAAU,UAAX,CAAA;AAAoCb,OAAA,CAAQ,0DAAR,CAwBpCC,OAAAC,QAAA,CALeY,QAAS,CAACC,KAAD,CAAQC,OAAR,CAAiBC,QAAjB,CAA2BC,OAA3B,CAAoCC,OAApC,CACxB,CACI,MAAOf,WAAA,CAAWa,QAAX,CAAA,CAAqBF,KAArB,CAA4BC,OAA5B,CAAqCE,OAArC,CAA8CC,OAA9C,CADX,CAvCqH;",
"sources":["node_modules/Phaser/src/display/align/in/QuickSet.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$display$align$in$QuickSet\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar ALIGN_CONST = require('../const');\r\n\r\nvar AlignInMap = [];\r\n\r\nAlignInMap[ALIGN_CONST.BOTTOM_CENTER] = require('./BottomCenter');\r\nAlignInMap[ALIGN_CONST.BOTTOM_LEFT] = require('./BottomLeft');\r\nAlignInMap[ALIGN_CONST.BOTTOM_RIGHT] = require('./BottomRight');\r\nAlignInMap[ALIGN_CONST.CENTER] = require('./Center');\r\nAlignInMap[ALIGN_CONST.LEFT_CENTER] = require('./LeftCenter');\r\nAlignInMap[ALIGN_CONST.RIGHT_CENTER] = require('./RightCenter');\r\nAlignInMap[ALIGN_CONST.TOP_CENTER] = require('./TopCenter');\r\nAlignInMap[ALIGN_CONST.TOP_LEFT] = require('./TopLeft');\r\nAlignInMap[ALIGN_CONST.TOP_RIGHT] = require('./TopRight');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned relative to the other.\r\n * The alignment used is based on the `position` argument, which is an `ALIGN_CONST` value, such as `LEFT_CENTER` or `TOP_RIGHT`.\r\n *\r\n * @function Phaser.Display.Align.In.QuickSet\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [child,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} child - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignIn - The Game Object to base the alignment position on.\r\n * @param {integer} position - The position to align the Game Object with. This is an align constant, such as `ALIGN_CONST.LEFT_CENTER`.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar QuickSet = function (child, alignIn, position, offsetX, offsetY)\r\n{\r\n    return AlignInMap[position](child, alignIn, offsetX, offsetY);\r\n};\r\n\r\nmodule.exports = QuickSet;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","ALIGN_CONST","AlignInMap","BOTTOM_CENTER","BOTTOM_LEFT","BOTTOM_RIGHT","CENTER","LEFT_CENTER","RIGHT_CENTER","TOP_CENTER","TOP_LEFT","TOP_RIGHT","QuickSet","child","alignIn","position","offsetX","offsetY"]
}
