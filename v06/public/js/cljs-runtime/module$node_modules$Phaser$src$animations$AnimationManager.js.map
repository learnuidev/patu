{
"version":3,
"file":"module$node_modules$Phaser$src$animations$AnimationManager.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/Phaser/src/animations/AnimationManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$animations$AnimationManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Animation = require('./Animation');\r\nvar Class = require('../utils/Class');\r\nvar CustomMap = require('../structs/Map');\r\nvar EventEmitter = require('eventemitter3');\r\nvar GetValue = require('../utils/object/GetValue');\r\nvar Pad = require('../utils/string/Pad');\r\n\r\n/**\r\n * @typedef {object} JSONAnimationManager\r\n *\r\n * @property {JSONAnimation[]} anims - [description]\r\n * @property {number} globalTimeScale - [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The Animation Manager.\r\n *\r\n * Animations are managed by the global Animation Manager. This is a singleton class that is\r\n * responsible for creating and delivering animations and their corresponding data to all Game Objects.\r\n * Unlike plugins it is owned by the Game instance, not the Scene.\r\n *\r\n * Sprites and other Game Objects get the data they need from the AnimationManager.\r\n *\r\n * @class AnimationManager\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberOf Phaser.Animations\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance.\r\n */\r\nvar AnimationManager = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function AnimationManager (game)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the Phaser.Game instance.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#game\r\n         * @type {Phaser.Game}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * A reference to the Texture Manager.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#textureManager\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.textureManager = null;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#globalTimeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.globalTimeScale = 1;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#anims\r\n         * @type {Phaser.Structs.Map.<string, Phaser.Animations.Animation>}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.anims = new CustomMap();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#paused\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.paused = false;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#name\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.name = 'AnimationManager';\r\n\r\n        game.events.once('boot', this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#boot\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.textureManager = this.game.textures;\r\n\r\n        this.game.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#add\r\n     * @fires AddAnimationEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - [description]\r\n     * @param {Phaser.Animations.Animation} animation - [description]\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    add: function (key, animation)\r\n    {\r\n        if (this.anims.has(key))\r\n        {\r\n            console.warn('Animation with key', key, 'already exists');\r\n            return;\r\n        }\r\n\r\n        animation.key = key;\r\n\r\n        this.anims.set(key, animation);\r\n\r\n        this.emit('add', key, animation);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#create\r\n     * @fires AddAnimationEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {AnimationConfig} config - [description]\r\n     *\r\n     * @return {Phaser.Animations.Animation} The Animation that was created.\r\n     */\r\n    create: function (config)\r\n    {\r\n        var key = config.key;\r\n\r\n        if (!key || this.anims.has(key))\r\n        {\r\n            console.warn('Invalid Animation Key, or Key already in use: ' + key);\r\n            return;\r\n        }\r\n\r\n        var anim = new Animation(this, key, config);\r\n\r\n        this.anims.set(key, anim);\r\n\r\n        this.emit('add', key, anim);\r\n\r\n        return anim;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#fromJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|JSONAnimationManager|JSONAnimation)} data - [description]\r\n     * @param {boolean} [clearCurrentAnimations=false] - If set to `true`, the current animations will be removed (`anims.clear()`). If set to `false` (default), the animations in `data` will be added.\r\n     *\r\n     * @return {Phaser.Animations.Animation[]} An array containing all of the Animation objects that were created as a result of this call.\r\n     */\r\n    fromJSON: function (data, clearCurrentAnimations)\r\n    {\r\n        if (clearCurrentAnimations === undefined) { clearCurrentAnimations = false; }\r\n\r\n        if (clearCurrentAnimations)\r\n        {\r\n            this.anims.clear();\r\n        }\r\n\r\n        //  Do we have a String (i.e. from JSON, or an Object?)\r\n        if (typeof data === 'string')\r\n        {\r\n            data = JSON.parse(data);\r\n        }\r\n\r\n        var output = [];\r\n\r\n        //  Array of animations, or a single animation?\r\n        if (data.hasOwnProperty('anims') && Array.isArray(data.anims))\r\n        {\r\n            for (var i = 0; i < data.anims.length; i++)\r\n            {\r\n                output.push(this.create(data.anims[i]));\r\n            }\r\n\r\n            if (data.hasOwnProperty('globalTimeScale'))\r\n            {\r\n                this.globalTimeScale = data.globalTimeScale;\r\n            }\r\n        }\r\n        else if (data.hasOwnProperty('key') && data.type === 'frame')\r\n        {\r\n            output.push(this.create(data));\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * @typedef {object} GenerateFrameNamesConfig\r\n     *\r\n     * @property {string} [prefix=''] - [description]\r\n     * @property {integer} [start=0] - [description]\r\n     * @property {integer} [end=0] - [description]\r\n     * @property {string} [suffix=''] - [description]\r\n     * @property {integer} [zeroPad=0] - [description]\r\n     * @property {AnimationFrameConfig[]} [outputArray=[]] - [description]\r\n     * @property {boolean} [frames=false] - [description]\r\n     */\r\n\r\n    /**\r\n     * Generate an array of {@link AnimationFrameConfig} objects from a texture key and configuration object.\r\n     *\r\n     * Generates objects with string frame names, as configured by the given {@link AnimationFrameConfig}.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#generateFrameNames\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key for the texture containing the animation frames.\r\n     * @param {GenerateFrameNamesConfig} [config] - The configuration object for the animation frame names.\r\n     *\r\n     * @return {AnimationFrameConfig[]} The array of {@link AnimationFrameConfig} objects.\r\n     */\r\n    generateFrameNames: function (key, config)\r\n    {\r\n        var prefix = GetValue(config, 'prefix', '');\r\n        var start = GetValue(config, 'start', 0);\r\n        var end = GetValue(config, 'end', 0);\r\n        var suffix = GetValue(config, 'suffix', '');\r\n        var zeroPad = GetValue(config, 'zeroPad', 0);\r\n        var out = GetValue(config, 'outputArray', []);\r\n        var frames = GetValue(config, 'frames', false);\r\n\r\n        var texture = this.textureManager.get(key);\r\n\r\n        if (!texture)\r\n        {\r\n            return out;\r\n        }\r\n\r\n        var diff = (start < end) ? 1 : -1;\r\n\r\n        //  Adjust because we use i !== end in the for loop\r\n        end += diff;\r\n\r\n        var i;\r\n        var frame;\r\n\r\n        if (!config)\r\n        {\r\n            //  Use every frame in the atlas?\r\n            frames = texture.getFrameNames();\r\n\r\n            for (i = 0; i < frames.length; i++)\r\n            {\r\n                out.push({ key: key, frame: frames[i] });\r\n            }\r\n        }\r\n        else if (Array.isArray(frames))\r\n        {\r\n            //  Have they provided their own custom frame sequence array?\r\n            for (i = 0; i < frames.length; i++)\r\n            {\r\n                frame = prefix + Pad(frames[i], zeroPad, '0', 1) + suffix;\r\n\r\n                if (texture.has(frame))\r\n                {\r\n                    out.push({ key: key, frame: frame });\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (i = start; i !== end; i += diff)\r\n            {\r\n                frame = prefix + Pad(i, zeroPad, '0', 1) + suffix;\r\n\r\n                if (texture.has(frame))\r\n                {\r\n                    out.push({ key: key, frame: frame });\r\n                }\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * @typedef {object} GenerateFrameNumbersConfig\r\n     *\r\n     * @property {integer} [start=0] - The starting frame of the animation.\r\n     * @property {integer} [end=-1] - The ending frame of the animation.\r\n     * @property {(boolean|integer)} [first=false] - A frame to put at the beginning of the animation, before `start` or `outputArray` or `frames`.\r\n     * @property {AnimationFrameConfig[]} [outputArray=[]] - An array to concatenate the output onto.\r\n     * @property {(boolean|integer[])} [frames=false] - A custom sequence of frames.\r\n     */\r\n\r\n    /**\r\n     * Generate an array of {@link AnimationFrameConfig} objects from a texture key and configuration object.\r\n     *\r\n     * Generates objects with numbered frame names, as configured by the given {@link GenerateFrameNumbersConfig}.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#generateFrameNumbers\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key for the texture containing the animation frames.\r\n     * @param {GenerateFrameNumbersConfig} config - The configuration object for the animation frames.\r\n     *\r\n     * @return {AnimationFrameConfig[]} The array of {@link AnimationFrameConfig} objects.\r\n     */\r\n    generateFrameNumbers: function (key, config)\r\n    {\r\n        var startFrame = GetValue(config, 'start', 0);\r\n        var endFrame = GetValue(config, 'end', -1);\r\n        var firstFrame = GetValue(config, 'first', false);\r\n        var out = GetValue(config, 'outputArray', []);\r\n        var frames = GetValue(config, 'frames', false);\r\n\r\n        var texture = this.textureManager.get(key);\r\n\r\n        if (!texture)\r\n        {\r\n            return out;\r\n        }\r\n\r\n        if (firstFrame && texture.has(firstFrame))\r\n        {\r\n            out.push({ key: key, frame: firstFrame });\r\n        }\r\n\r\n        var i;\r\n\r\n        //  Have they provided their own custom frame sequence array?\r\n        if (Array.isArray(frames))\r\n        {\r\n            for (i = 0; i < frames.length; i++)\r\n            {\r\n                if (texture.has(frames[i]))\r\n                {\r\n                    out.push({ key: key, frame: frames[i] });\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  No endFrame then see if we can get it\r\n            if (endFrame === -1)\r\n            {\r\n                endFrame = texture.frameTotal;\r\n            }\r\n\r\n            for (i = startFrame; i <= endFrame; i++)\r\n            {\r\n                if (texture.has(i))\r\n                {\r\n                    out.push({ key: key, frame: i });\r\n                }\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Get an Animation.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the Animation to retrieve.\r\n     *\r\n     * @return {Phaser.Animations.Animation} The Animation.\r\n     */\r\n    get: function (key)\r\n    {\r\n        return this.anims.get(key);\r\n    },\r\n\r\n    /**\r\n     * Load an Animation into a Game Object's Animation Component.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#load\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object to load the animation into.\r\n     * @param {string} key - The key of the animation to load.\r\n     * @param {(string|integer)} [startFrame] - The name of a start frame to set on the loaded animation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} [description]\r\n     */\r\n    load: function (child, key, startFrame)\r\n    {\r\n        var anim = this.get(key);\r\n\r\n        if (anim)\r\n        {\r\n            anim.load(child, startFrame);\r\n        }\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * Pause all animations.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#pauseAll\r\n     * @fires PauseAllAnimationEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    pauseAll: function ()\r\n    {\r\n        if (!this.paused)\r\n        {\r\n            this.paused = true;\r\n\r\n            this.emit('pauseall');\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Play an animation on the given Game Objects that have an Animation Component.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#play\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the animation to play on the Game Object.\r\n     * @param {Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]} child - The Game Objects to play the animation on.\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    play: function (key, child)\r\n    {\r\n        if (!Array.isArray(child))\r\n        {\r\n            child = [ child ];\r\n        }\r\n\r\n        var anim = this.get(key);\r\n\r\n        if (!anim)\r\n        {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < child.length; i++)\r\n        {\r\n            child[i].anims.play(key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Remove an animation.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#remove\r\n     * @fires RemoveAnimationEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the animation to remove.\r\n     *\r\n     * @return {Phaser.Animations.Animation} [description]\r\n     */\r\n    remove: function (key)\r\n    {\r\n        var anim = this.get(key);\r\n\r\n        if (anim)\r\n        {\r\n            this.emit('remove', key, anim);\r\n\r\n            this.anims.delete(key);\r\n        }\r\n\r\n        return anim;\r\n    },\r\n\r\n    /**\r\n     * Resume all paused animations.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#resumeAll\r\n     * @fires ResumeAllAnimationEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    resumeAll: function ()\r\n    {\r\n        if (this.paused)\r\n        {\r\n            this.paused = false;\r\n\r\n            this.emit('resumeall');\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes an array of Game Objects that have an Animation Component and then\r\n     * starts the given animation playing on them, each one offset by the\r\n     * `stagger` amount given to this method.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#staggerPlay\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n     *\r\n     * @param {string} key - The key of the animation to play on the Game Objects.\r\n     * @param {Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]} children - An array of Game Objects to play the animation on. They must have an Animation Component.\r\n     * @param {number} [stagger=0] - The amount of time, in milliseconds, to offset each play time by.\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    staggerPlay: function (key, children, stagger)\r\n    {\r\n        if (stagger === undefined) { stagger = 0; }\r\n\r\n        if (!Array.isArray(children))\r\n        {\r\n            children = [ children ];\r\n        }\r\n\r\n        var anim = this.get(key);\r\n\r\n        if (!anim)\r\n        {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            children[i].anims.delayedPlay(stagger * i, key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - [description]\r\n     *\r\n     * @return {JSONAnimationManager} [description]\r\n     */\r\n    toJSON: function (key)\r\n    {\r\n        if (key !== undefined && key !== '')\r\n        {\r\n            return this.anims.get(key).toJSON();\r\n        }\r\n        else\r\n        {\r\n            var output = {\r\n                anims: [],\r\n                globalTimeScale: this.globalTimeScale\r\n            };\r\n\r\n            this.anims.each(function (animationKey, animation)\r\n            {\r\n                output.anims.push(animation.toJSON());\r\n            });\r\n\r\n            return output;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.anims.clear();\r\n\r\n        this.textureManager = null;\r\n\r\n        this.game = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = AnimationManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Animation","Class","CustomMap","EventEmitter","GetValue","Pad","AnimationManager","Extends","initialize","game","call","textureManager","globalTimeScale","anims","paused","name","events","once","boot","textures","destroy","add","key","animation","has","console","warn","set","emit","create","config","anim","fromJSON","data","clearCurrentAnimations","undefined","clear","JSON","parse","output","hasOwnProperty","Array","isArray","i","length","push","type","generateFrameNames","prefix","start","end","suffix","zeroPad","out","frames","texture","get","diff","frame","getFrameNames","generateFrameNumbers","startFrame","endFrame","firstFrame","frameTotal","load","child","pauseAll","play","remove","delete","resumeAll","staggerPlay","children","stagger","delayedPlay","toJSON","each","animationKey"]
}
