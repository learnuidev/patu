{"version":3,"sources":["clojure/test/check/random.cljs"],"mappings":"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","names":["clojure$test$check$random$IRandom$rand_long$dyn","x__4428__auto__","m__4429__auto__","clojure.test.check.random/rand-long","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","clojure$test$check$random$IRandom$rand_double$dyn","clojure.test.check.random/rand-double","clojure$test$check$random$IRandom$split$dyn","clojure.test.check.random/split","clojure$test$check$random$IRandom$split_n$dyn","clojure.test.check.random/split-n","clojure.test.check.random/IRandom","rng","n","clojure.test.check.random/hex-long","s","clojure.test.check.random.longs/from-string","clojure.test.check.random/bxoubsr","x","clojure.test.check.random.longs/unsigned-bit-shift-right","clojure.test.check.random.longs/bit-xor","clojure.test.check.random/mix-64-const-1","clojure.test.check.random/mix-64-const-2","clojure.test.check.random/mix-64","clojure.test.check.random.longs/*","clojure.test.check.random/mix-gamma-const-1","clojure.test.check.random/mix-gamma-const-2","clojure.test.check.random/mix-gamma-const-3","clojure.test.check.random/mix-gamma","clojure.test.check.random.longs/bit-or","clojure.test.check.random.longs/ONE","z","G__48833","G__48834","clojure.test.check.random.longs/bit-count","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","clojure.test.check.random/JavaUtilSplittableRandom","clojure.test.check.random/->JavaUtilSplittableRandom","gamma","state","_","clojure.test.check.random.longs/+","this","clojure.test.check.random.doubles/rand-long->rand-double","state'","state''","gamma'","G__48835","n-dec","ret","cljs.core/transient","cljs.core._EQ_","cljs.core/count","cljs.core.conj_BANG_","cljs.core/persistent!","new-rng","clojure.test.check.random/golden-gamma","clojure.test.check.random/make-java-util-splittable-random","seed","or__4126__auto__","clojure.test.check.random.longs/->long","cljs.core.ex_info","clojure.test.check.random/next-rng","a","cljs.core.atom","js/Date","cljs.core.swap_BANG_","p__48836","map__48837","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__48841","cljs.core.nth","r1","r2","var_args","G__48845","clojure.test.check.random/make-random","js/Error"],"sourcesContent":[";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"Purely functional and splittable pseudo-random number generators.\"}\n clojure.test.check.random\n  (:refer-clojure :exclude [+ * bit-xor bit-or bit-count\n                            unsigned-bit-shift-right])\n  (:require [clojure.test.check.random.doubles :as doubles]\n            [clojure.test.check.random.longs :as longs\n             :refer [+ * bit-xor bit-or bit-count unsigned-bit-shift-right]]))\n\n(defprotocol IRandom\n  (rand-long [rng]\n    \"Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (rand-double [rng]\n    \"Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split [rng]\n    \"Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split-n [rng n]\n    \"Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\"))\n\n;;\n;; This is a port of the clojure-jvm port of\n;; java.util.SplittableRandom, and should give identical results.\n;;\n\n(defn ^:private hex-long\n  \"Helper for defining constants.\"\n  [s]\n  (longs/from-string s 16))\n\n(defn ^:private bxoubsr\n  \"Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\"\n  [x n]\n  (-> x (unsigned-bit-shift-right n) (bit-xor x)))\n\n(def ^:private mix-64-const-1 (hex-long \"bf58476d1ce4e5b9\"))\n(def ^:private mix-64-const-2 (hex-long \"94d049bb133111eb\"))\n\n(defn ^:private mix-64\n  [n]\n  (-> n\n      (bxoubsr 30)\n      (* mix-64-const-1)\n      (bxoubsr 27)\n      (* mix-64-const-2)\n      (bxoubsr 31)))\n\n(def ^:private mix-gamma-const-1 (hex-long \"ff51afd7ed558ccd\"))\n(def ^:private mix-gamma-const-2 (hex-long \"c4ceb9fe1a85ec53\"))\n(def ^:private mix-gamma-const-3 (hex-long \"aaaaaaaaaaaaaaaa\"))\n\n(defn ^:private mix-gamma\n  [n]\n  (-> n\n      (bxoubsr 33)\n      (* mix-gamma-const-1)\n      (bxoubsr 33)\n      (* mix-gamma-const-2)\n      (bxoubsr 33)\n      (bit-or longs/ONE)\n      (as-> z\n            (cond-> z\n              (> 24 (-> z\n                        (bxoubsr 1)\n                        (bit-count)))\n              (bit-xor mix-gamma-const-3)))))\n\n(deftype JavaUtilSplittableRandom [gamma state]\n  IRandom\n  (rand-long [_]\n    (-> state (+ gamma) (mix-64)))\n  (rand-double [this]\n    (-> this rand-long doubles/rand-long->rand-double))\n  (split [this]\n    (let [state' (+ gamma state)\n          state'' (+ gamma state')\n          gamma' (mix-gamma state'')]\n      [(JavaUtilSplittableRandom. gamma state'')\n       (JavaUtilSplittableRandom. gamma' (mix-64 state'))]))\n  (split-n [this n]\n    (case n\n      0 []\n      1 [this]\n      (let [n-dec (dec n)]\n        (loop [state state\n               ret (transient [])]\n          (if (= n-dec (count ret))\n            (-> ret\n                (conj! (JavaUtilSplittableRandom. gamma state))\n                (persistent!))\n            (let [state' (+ gamma state)\n                  state'' (+ gamma state')\n                  gamma' (mix-gamma state'')\n                  new-rng (JavaUtilSplittableRandom. gamma' (mix-64 state'))]\n              (recur state'' (conj! ret new-rng)))))))))\n\n(def ^:private golden-gamma\n  (hex-long \"9e3779b97f4a7c15\"))\n\n(defn make-java-util-splittable-random\n  [seed]\n  (JavaUtilSplittableRandom. golden-gamma\n                             (or (longs/->long seed)\n                                 (throw (ex-info \"Bad random seed!\"\n                                                 {:seed seed})))))\n\n(def ^:private next-rng\n  (let [a (atom {:state\n                 (make-java-util-splittable-random (.valueOf (js/Date.)))})]\n    (fn []\n      (:returned\n       (swap! a (fn [{:keys [state]}]\n                  (let [[r1 r2] (split state)]\n                    {:state r1 :returned r2})))))))\n\n(defn make-random\n  \"Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.\"\n  ([] (next-rng))\n  ([seed]\n   (make-java-util-splittable-random seed)))\n"]}