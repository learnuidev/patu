{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$core$Events.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/core/Events.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$core$Events\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Events\r\n*/\r\n\r\nvar Events = {};\r\n\r\nmodule.exports = Events;\r\n\r\nvar Common = require('./Common');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Subscribes a callback function to the given object's `eventName`.\r\n     * @method on\r\n     * @param {} object\r\n     * @param {string} eventNames\r\n     * @param {function} callback\r\n     */\r\n    Events.on = function(object, eventNames, callback) {\r\n        var names = eventNames.split(' '),\r\n            name;\r\n\r\n        for (var i = 0; i < names.length; i++) {\r\n            name = names[i];\r\n            object.events = object.events || {};\r\n            object.events[name] = object.events[name] || [];\r\n            object.events[name].push(callback);\r\n        }\r\n\r\n        return callback;\r\n    };\r\n\r\n    /**\r\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\r\n     * @method off\r\n     * @param {} object\r\n     * @param {string} eventNames\r\n     * @param {function} callback\r\n     */\r\n    Events.off = function(object, eventNames, callback) {\r\n        if (!eventNames) {\r\n            object.events = {};\r\n            return;\r\n        }\r\n\r\n        // handle Events.off(object, callback)\r\n        if (typeof eventNames === 'function') {\r\n            callback = eventNames;\r\n            eventNames = Common.keys(object.events).join(' ');\r\n        }\r\n\r\n        var names = eventNames.split(' ');\r\n\r\n        for (var i = 0; i < names.length; i++) {\r\n            var callbacks = object.events[names[i]],\r\n                newCallbacks = [];\r\n\r\n            if (callback && callbacks) {\r\n                for (var j = 0; j < callbacks.length; j++) {\r\n                    if (callbacks[j] !== callback)\r\n                        newCallbacks.push(callbacks[j]);\r\n                }\r\n            }\r\n\r\n            object.events[names[i]] = newCallbacks;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\r\n     * @method trigger\r\n     * @param {} object\r\n     * @param {string} eventNames\r\n     * @param {} event\r\n     */\r\n    Events.trigger = function(object, eventNames, event) {\r\n        var names,\r\n            name,\r\n            callbacks,\r\n            eventClone;\r\n\r\n        var events = object.events;\r\n        \r\n        if (events && Common.keys(events).length > 0) {\r\n            if (!event)\r\n                event = {};\r\n\r\n            names = eventNames.split(' ');\r\n\r\n            for (var i = 0; i < names.length; i++) {\r\n                name = names[i];\r\n                callbacks = events[name];\r\n\r\n                if (callbacks) {\r\n                    eventClone = Common.clone(event, false);\r\n                    eventClone.name = name;\r\n                    eventClone.source = object;\r\n\r\n                    for (var j = 0; j < callbacks.length; j++) {\r\n                        callbacks[j].apply(object, [eventClone]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Events","Common","on","Events.on","object","eventNames","callback","names","split","name","i","length","events","push","off","Events.off","keys","join","callbacks","newCallbacks","j","trigger","Events.trigger","event","eventClone","clone","source","apply"]
}
