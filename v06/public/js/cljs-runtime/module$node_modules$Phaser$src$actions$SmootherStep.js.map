{
"version":3,
"file":"module$node_modules$Phaser$src$actions$SmootherStep.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,oDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOhH,IAAIC,iBAAmBH,OAAA,CAAQ,kDAAR,CA6CvBC,OAAAC,QAAA,CAzBmBE,QAAS,CAACC,KAAD,CAAQC,QAAR,CAAkBC,GAAlB,CAAuBC,GAAvB,CAA4BC,GAA5B,CAC5B,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,CAAA,CAA/B,CAEA,KAAIE,KAAOC,IAAAC,IAAA,CAASL,GAAT,CAAeD,GAAf,CAAPI,CAA6BN,KAAAS,OAGjC,IAAIL,GAAJ,CAEI,IAAKM,GAAL,CAAS,CAAT,CAAYA,GAAZ,CAAgBV,KAAAS,OAAhB,CAA8BC,GAAA,EAA9B,CAEIV,KAAA,CAAMU,GAAN,CAAA,CAAST,QAAT,CAAA,EAAsBH,gBAAA,CAAiBY,GAAjB,CAAqBJ,IAArB,CAA2BJ,GAA3B,CAAgCC,GAAhC,CAJ9B,KASI,KAAKO,GAAL,CAAS,CAAT,CAAYA,GAAZ,CAAgBV,KAAAS,OAAhB,CAA8BC,GAAA,EAA9B,CAEIV,KAAA,CAAMU,GAAN,CAAA,CAAST,QAAT,CAAA,CAAqBH,gBAAA,CAAiBY,GAAjB,CAAqBJ,IAArB,CAA2BJ,GAA3B,CAAgCC,GAAhC,CAI7B,OAAOH,MArBX,CA5BgH;",
"sources":["node_modules/Phaser/src/actions/SmootherStep.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$actions$SmootherStep\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar MathSmootherStep = require('../math/SmootherStep');\r\n\r\n/**\r\n * Smootherstep is a sigmoid-like interpolation and clamping function.\r\n * \r\n * The function depends on three parameters, the input x, the \"left edge\" and the \"right edge\", with the left edge being assumed smaller than the right edge. The function receives a real number x as an argument and returns 0 if x is less than or equal to the left edge, 1 if x is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial, between 0 and 1 otherwise. The slope of the smoothstep function is zero at both edges. This is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.\r\n *\r\n * @function Phaser.Actions.SmootherStep\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - An array of Game Objects. The contents of this array are updated by this Action.\r\n * @param {string} property - The property of the Game Object to interpolate.\r\n * @param {number} min - The minimum interpolation value.\r\n * @param {number} max - The maximum interpolation value.\r\n * @param {boolean} [inc=false] - Should the values be incremented? `true` or set (`false`)\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of Game Objects that was passed to this Action.\r\n */\r\nvar SmootherStep = function (items, property, min, max, inc)\r\n{\r\n    if (inc === undefined) { inc = false; }\r\n\r\n    var step = Math.abs(max - min) / items.length;\r\n    var i;\r\n\r\n    if (inc)\r\n    {\r\n        for (i = 0; i < items.length; i++)\r\n        {\r\n            items[i][property] += MathSmootherStep(i * step, min, max);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        for (i = 0; i < items.length; i++)\r\n        {\r\n            items[i][property] = MathSmootherStep(i * step, min, max);\r\n        }\r\n    }\r\n\r\n    return items;\r\n};\r\n\r\nmodule.exports = SmootherStep;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","MathSmootherStep","SmootherStep","items","property","min","max","inc","undefined","step","Math","abs","length","i"]
}
