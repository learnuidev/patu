{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$particles$EmitterOp.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/particles/EmitterOp.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$particles$EmitterOp\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar FloatBetween = require('../../math/FloatBetween');\r\nvar GetEaseFunction = require('../../tweens/builders/GetEaseFunction');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Wrap = require('../../math/Wrap');\r\n\r\n/**\r\n * The returned value sets what the property will be at the START of the particle's life, on emit.\r\n * @callback EmitterOpOnEmitCallback\r\n *\r\n * @param {Phaser.GameObjects.Particles.Particle} particle - The particle.\r\n * @param {string} key - The name of the property.\r\n * @param {number} value - The current value of the property.\r\n *\r\n * @return {number} The new value of the property.\r\n */\r\n\r\n/**\r\n * The returned value updates the property for the duration of the particle's life.\r\n * @callback EmitterOpOnUpdateCallback\r\n *\r\n * @param {Phaser.GameObjects.Particles.Particle} particle - The particle.\r\n * @param {string} key - The name of the property.\r\n * @param {number} t - The normalized lifetime of the particle, between 0 (start) and 1 (end).\r\n * @param {number} value - The current value of the property.\r\n *\r\n * @return {number} The new value of the property.\r\n */\r\n\r\n/**\r\n * Defines an operation yielding a random value within a range.\r\n * @typedef {object} EmitterOpRandomConfig\r\n *\r\n * @property {number[]} random - The minimum and maximum values, as [min, max].\r\n */\r\n\r\n/**\r\n * Defines an operation yielding a random value within a range.\r\n * @typedef {object} EmitterOpRandomMinMaxConfig\r\n *\r\n * @property {number} min - The minimum value.\r\n * @property {number} max - The maximum value.\r\n */\r\n\r\n/**\r\n * Defines an operation yielding a random value within a range.\r\n * @typedef {object} EmitterOpRandomStartEndConfig\r\n *\r\n * @property {number} start - The starting value.\r\n * @property {number} end - The ending value.\r\n * @property {boolean} random - If false, this becomes {@link EmitterOpEaseConfig}.\r\n */\r\n\r\n/**\r\n * Defines an operation yielding a value incremented continuously across a range.\r\n * @typedef {object} EmitterOpEaseConfig\r\n *\r\n * @property {number} start - The starting value.\r\n * @property {number} end - The ending value.\r\n * @property {string} [ease='Linear'] - The name of the easing function.\r\n */\r\n\r\n/**\r\n * Defines an operation yielding a value incremented by steps across a range.\r\n * @typedef {object} EmitterOpSteppedConfig\r\n *\r\n * @property {number} start - The starting value.\r\n * @property {number} end - The ending value.\r\n * @property {number} steps - The number of steps between start and end.\r\n */\r\n\r\n/**\r\n * @typedef {object} EmitterOpCustomEmitConfig\r\n *\r\n * @property {EmitterOpOnEmitCallback} onEmit - [description]\r\n */\r\n\r\n/**\r\n * @typedef {object} EmitterOpCustomUpdateConfig\r\n *\r\n * @property {EmitterOpOnEmitCallback} [onEmit] - [description]\r\n * @property {EmitterOpOnUpdateCallback} onUpdate - [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A Particle Emitter property.\r\n *\r\n * Facilitates changing Particle properties as they are emitted and throughout their lifetime.\r\n *\r\n * @class EmitterOp\r\n * @memberOf Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {ParticleEmitterConfig} config - Settings for the Particle Emitter that owns this property.\r\n * @param {string} key - The name of the property.\r\n * @param {number} defaultValue - The default value of the property.\r\n * @param {boolean} [emitOnly=false] - Whether the property can only be modified when a Particle is emitted.\r\n */\r\nvar EmitterOp = new Class({\r\n\r\n    initialize:\r\n\r\n    function EmitterOp (config, key, defaultValue, emitOnly)\r\n    {\r\n        if (emitOnly === undefined)\r\n        {\r\n            emitOnly = false;\r\n        }\r\n\r\n        /**\r\n         * The name of this property.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.EmitterOp#propertyKey\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.propertyKey = key;\r\n\r\n        /**\r\n         * The value of this property.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.EmitterOp#propertyValue\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.propertyValue = defaultValue;\r\n\r\n        /**\r\n         * The default value of this property.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.EmitterOp#defaultValue\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultValue = defaultValue;\r\n\r\n        /**\r\n         * The number of steps for stepped easing between {@link Phaser.GameObjects.Particles.EmitterOp#start} and\r\n         * {@link Phaser.GameObjects.Particles.EmitterOp#end} values, per emit.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.EmitterOp#steps\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.steps = 0;\r\n\r\n        /**\r\n         * The step counter for stepped easing, per emit.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.EmitterOp#counter\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.counter = 0;\r\n\r\n        /**\r\n         * The start value for this property to ease between.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.EmitterOp#start\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.start = 0;\r\n\r\n        /**\r\n         * The end value for this property to ease between.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.EmitterOp#end\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.end = 0;\r\n\r\n        /**\r\n         * The easing function to use for updating this property.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.EmitterOp#ease\r\n         * @type {?function}\r\n         * @since 3.0.0\r\n         */\r\n        this.ease;\r\n\r\n        /**\r\n         * Whether this property can only be modified when a Particle is emitted.\r\n         *\r\n         * Set to `true` to allow only {@link Phaser.GameObjects.Particles.EmitterOp#onEmit} callbacks to be set and\r\n         * affect this property.\r\n         *\r\n         * Set to `false` to allow both {@link Phaser.GameObjects.Particles.EmitterOp#onEmit} and\r\n         * {@link Phaser.GameObjects.Particles.EmitterOp#onUpdate} callbacks to be set and affect this property.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.EmitterOp#emitOnly\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.emitOnly = emitOnly;\r\n\r\n        /**\r\n         * The callback to run for Particles when they are emitted from the Particle Emitter.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.EmitterOp#onEmit\r\n         * @type {EmitterOpOnEmitCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.onEmit = this.defaultEmit;\r\n\r\n        /**\r\n         * The callback to run for Particles when they are updated.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.EmitterOp#onUpdate\r\n         * @type {EmitterOpOnUpdateCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.onUpdate = this.defaultUpdate;\r\n\r\n        this.loadConfig(config);\r\n    },\r\n\r\n    /**\r\n     * Load the property from a Particle Emitter configuration object.\r\n     *\r\n     * Optionally accepts a new property key to use, replacing the current one.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#loadConfig\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ParticleEmitterConfig} [config] - Settings for the Particle Emitter that owns this property.\r\n     * @param {string} [newKey] - The new key to use for this property, if any.\r\n     */\r\n    loadConfig: function (config, newKey)\r\n    {\r\n        if (config === undefined)\r\n        {\r\n            config = {};\r\n        }\r\n\r\n        if (newKey)\r\n        {\r\n            this.propertyKey = newKey;\r\n        }\r\n\r\n        this.propertyValue = GetFastValue(\r\n            config,\r\n            this.propertyKey,\r\n            this.defaultValue\r\n        );\r\n\r\n        this.setMethods();\r\n\r\n        if (this.emitOnly)\r\n        {\r\n            //  Reset it back again\r\n            this.onUpdate = this.defaultUpdate;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Build a JSON representation of this Particle Emitter property.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} A JSON representation of this Particle Emitter property.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        return this.propertyValue;\r\n    },\r\n\r\n    /**\r\n     * Change the current value of the property and update its callback methods.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#onChange\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The value of the property.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.EmitterOp} This Emitter Op object.\r\n     */\r\n    onChange: function (value)\r\n    {\r\n        this.propertyValue = value;\r\n\r\n        return this.setMethods();\r\n    },\r\n\r\n    /**\r\n     * Update the {@link Phaser.GameObjects.Particles.EmitterOp#onEmit} and\r\n     * {@link Phaser.GameObjects.Particles.EmitterOp#onUpdate} callbacks based on the type of the current\r\n     * {@link Phaser.GameObjects.Particles.EmitterOp#propertyValue}.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#setMethods\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.EmitterOp} This Emitter Op object.\r\n     */\r\n    setMethods: function ()\r\n    {\r\n        var value = this.propertyValue;\r\n\r\n        var t = typeof value;\r\n\r\n        if (t === 'number')\r\n        {\r\n            //  Explicit static value:\r\n            //  x: 400\r\n\r\n            this.onEmit = this.staticValueEmit;\r\n            this.onUpdate = this.staticValueUpdate; // How?\r\n        }\r\n        else if (Array.isArray(value))\r\n        {\r\n            //  Picks a random element from the array:\r\n            //  x: [ 100, 200, 300, 400 ]\r\n\r\n            this.onEmit = this.randomStaticValueEmit;\r\n        }\r\n        else if (t === 'function')\r\n        {\r\n            //  The same as setting just the onUpdate function and no onEmit (unless this op is an emitOnly one)\r\n            //  Custom callback, must return a value:\r\n\r\n            /*\r\n            x: function (particle, key, t, value)\r\n               {\r\n                   return value + 50;\r\n               }\r\n            */\r\n\r\n            if (this.emitOnly)\r\n            {\r\n                this.onEmit = value;\r\n            }\r\n            else\r\n            {\r\n                this.onUpdate = value;\r\n            }\r\n        }\r\n        else if (t === 'object' && (this.has(value, 'random') || this.hasBoth(value, 'start', 'end') || this.hasBoth(value, 'min', 'max')))\r\n        {\r\n            this.start = this.has(value, 'start') ? value.start : value.min;\r\n            this.end = this.has(value, 'end') ? value.end : value.max;\r\n\r\n            var isRandom = (this.hasBoth(value, 'min', 'max') || this.has(value, 'random'));\r\n\r\n            //  A random starting value (using 'min | max' instead of 'start | end' automatically implies a random value)\r\n\r\n            //  x: { start: 100, end: 400, random: true } OR { min: 100, max: 400 } OR { random: [ 100, 400 ] }\r\n\r\n            if (isRandom)\r\n            {\r\n                var rnd = value.random;\r\n\r\n                //  x: { random: [ 100, 400 ] } = the same as doing: x: { start: 100, end: 400, random: true }\r\n                if (Array.isArray(rnd))\r\n                {\r\n                    this.start = rnd[0];\r\n                    this.end = rnd[1];\r\n                }\r\n\r\n                this.onEmit = this.randomRangedValueEmit;\r\n            }\r\n\r\n            if (this.has(value, 'steps'))\r\n            {\r\n                //  A stepped (per emit) range\r\n\r\n                //  x: { start: 100, end: 400, steps: 64 }\r\n\r\n                //  Increments a value stored in the emitter\r\n\r\n                this.steps = value.steps;\r\n                this.counter = this.start;\r\n\r\n                this.onEmit = this.steppedEmit;\r\n            }\r\n            else\r\n            {\r\n                //  An eased range (defaults to Linear if not specified)\r\n\r\n                //  x: { start: 100, end: 400, [ ease: 'Linear' ] }\r\n\r\n                var easeType = this.has(value, 'ease') ? value.ease : 'Linear';\r\n\r\n                this.ease = GetEaseFunction(easeType);\r\n\r\n                if (!isRandom)\r\n                {\r\n                    this.onEmit = this.easedValueEmit;\r\n                }\r\n\r\n                //  BUG: alpha, rotate, scaleX, scaleY, or tint are eased here if {min, max} is given.\r\n                //  Probably this branch should exclude isRandom entirely.\r\n\r\n                this.onUpdate = this.easeValueUpdate;\r\n            }\r\n        }\r\n        else if (t === 'object' && this.hasEither(value, 'onEmit', 'onUpdate'))\r\n        {\r\n            //  Custom onEmit and onUpdate callbacks\r\n\r\n            /*\r\n            x: {\r\n                //  Called at the start of the particles life, when it is being created\r\n                onEmit: function (particle, key, t, value)\r\n                {\r\n                    return value;\r\n                },\r\n\r\n                //  Called during the particles life on each update\r\n                onUpdate: function (particle, key, t, value)\r\n                {\r\n                    return value;\r\n                }\r\n            }\r\n            */\r\n\r\n            if (this.has(value, 'onEmit'))\r\n            {\r\n                this.onEmit = value.onEmit;\r\n            }\r\n\r\n            if (this.has(value, 'onUpdate'))\r\n            {\r\n                this.onUpdate = value.onUpdate;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Check whether an object has the given property.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#has\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} object - The object to check.\r\n     * @param {string} key - The key of the property to look for in the object.\r\n     *\r\n     * @return {boolean} `true` if the property exists in the object, `false` otherwise.\r\n     */\r\n    has: function (object, key)\r\n    {\r\n        return object.hasOwnProperty(key);\r\n    },\r\n\r\n    /**\r\n     * Check whether an object has both of the given properties.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#hasBoth\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} object - The object to check.\r\n     * @param {string} key1 - The key of the first property to check the object for.\r\n     * @param {string} key2 - The key of the second property to check the object for.\r\n     *\r\n     * @return {boolean} `true` if both properties exist in the object, `false` otherwise.\r\n     */\r\n    hasBoth: function (object, key1, key2)\r\n    {\r\n        return object.hasOwnProperty(key1) && object.hasOwnProperty(key2);\r\n    },\r\n\r\n    /**\r\n     * Check whether an object has at least one of the given properties.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#hasEither\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} object - The object to check.\r\n     * @param {string} key1 - The key of the first property to check the object for.\r\n     * @param {string} key2 - The key of the second property to check the object for.\r\n     *\r\n     * @return {boolean} `true` if at least one of the properties exists in the object, `false` if neither exist.\r\n     */\r\n    hasEither: function (object, key1, key2)\r\n    {\r\n        return object.hasOwnProperty(key1) || object.hasOwnProperty(key2);\r\n    },\r\n\r\n    /**\r\n     * The returned value sets what the property will be at the START of the particles life, on emit.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#defaultEmit\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.Particle} particle - The particle.\r\n     * @param {string} key - The name of the property.\r\n     * @param {number} [value] - The current value of the property.\r\n     *\r\n     * @return {number} The new value of hte property.\r\n     */\r\n    defaultEmit: function (particle, key, value)\r\n    {\r\n        return value;\r\n    },\r\n\r\n    /**\r\n     * The returned value updates the property for the duration of the particles life.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#defaultUpdate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.Particle} particle - The particle.\r\n     * @param {string} key - The name of the property.\r\n     * @param {number} t - The T value (between 0 and 1)\r\n     * @param {number} value - The current value of the property.\r\n     *\r\n     * @return {number} The new value of the property.\r\n     */\r\n    defaultUpdate: function (particle, key, t, value)\r\n    {\r\n        return value;\r\n    },\r\n\r\n    /**\r\n     * An `onEmit` callback that returns the current value of the property.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#staticValueEmit\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The current value of the property.\r\n     */\r\n    staticValueEmit: function ()\r\n    {\r\n        return this.propertyValue;\r\n    },\r\n\r\n    /**\r\n     * An `onUpdate` callback that returns the current value of the property.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#staticValueUpdate\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The current value of the property.\r\n     */\r\n    staticValueUpdate: function ()\r\n    {\r\n        return this.propertyValue;\r\n    },\r\n\r\n    /**\r\n     * An `onEmit` callback that returns a random value from the current value array.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#randomStaticValueEmit\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The new value of the property.\r\n     */\r\n    randomStaticValueEmit: function ()\r\n    {\r\n        var randomIndex = Math.floor(Math.random() * this.propertyValue.length);\r\n\r\n        return this.propertyValue[randomIndex];\r\n    },\r\n\r\n    /**\r\n     * An `onEmit` callback that returns a value between the {@link Phaser.GameObjects.Particles.EmitterOp#start} and\r\n     * {@link Phaser.GameObjects.Particles.EmitterOp#end} range.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#randomRangedValueEmit\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.Particle} particle - The particle.\r\n     * @param {string} key - The key of the property.\r\n     *\r\n     * @return {number} The new value of the property.\r\n     */\r\n    randomRangedValueEmit: function (particle, key)\r\n    {\r\n        var value = FloatBetween(this.start, this.end);\r\n\r\n        if (particle && particle.data[key])\r\n        {\r\n            particle.data[key].min = value;\r\n        }\r\n\r\n        return value;\r\n    },\r\n\r\n    /**\r\n     * An `onEmit` callback that returns a stepped value between the\r\n     * {@link Phaser.GameObjects.Particles.EmitterOp#start} and {@link Phaser.GameObjects.Particles.EmitterOp#end}\r\n     * range.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#steppedEmit\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The new value of the property.\r\n     */\r\n    steppedEmit: function ()\r\n    {\r\n        var current = this.counter;\r\n\r\n        var next = this.counter + (this.end - this.start) / this.steps;\r\n\r\n        this.counter = Wrap(next, this.start, this.end);\r\n\r\n        return current;\r\n    },\r\n\r\n    /**\r\n     * An `onEmit` callback that returns an eased value between the\r\n     * {@link Phaser.GameObjects.Particles.EmitterOp#start} and {@link Phaser.GameObjects.Particles.EmitterOp#end}\r\n     * range.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#easedValueEmit\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.Particle} particle - The particle.\r\n     * @param {string} key - The name of the property.\r\n     *\r\n     * @return {number} The new value of the property.\r\n     */\r\n    easedValueEmit: function (particle, key)\r\n    {\r\n        if (particle && particle.data[key])\r\n        {\r\n            var data = particle.data[key];\r\n\r\n            data.min = this.start;\r\n            data.max = this.end;\r\n        }\r\n\r\n        return this.start;\r\n    },\r\n\r\n    /**\r\n     * An `onUpdate` callback that returns an eased value between the\r\n     * {@link Phaser.GameObjects.Particles.EmitterOp#start} and {@link Phaser.GameObjects.Particles.EmitterOp#end}\r\n     * range.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.EmitterOp#easeValueUpdate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.Particle} particle - The particle.\r\n     * @param {string} key - The name of the property.\r\n     * @param {number} t - The T value (between 0 and 1)\r\n     *\r\n     * @return {number} The new value of the property.\r\n     */\r\n    easeValueUpdate: function (particle, key, t)\r\n    {\r\n        var data = particle.data[key];\r\n\r\n        return (data.max - data.min) * this.ease(t) + data.min;\r\n    }\r\n});\r\n\r\nmodule.exports = EmitterOp;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","FloatBetween","GetEaseFunction","GetFastValue","Wrap","EmitterOp","initialize","config","key","defaultValue","emitOnly","undefined","propertyKey","propertyValue","end","start","counter","steps","onEmit","defaultEmit","onUpdate","defaultUpdate","loadConfig","newKey","setMethods","toJSON","onChange","value","t","staticValueEmit","staticValueUpdate","Array","isArray","randomStaticValueEmit","has","hasBoth","min","max","isRandom","rnd","random","randomRangedValueEmit","steppedEmit","easeType","ease","easedValueEmit","easeValueUpdate","hasEither","object","hasOwnProperty","key1","key2","particle","Math","floor","randomIndex","length","data","current"]
}
