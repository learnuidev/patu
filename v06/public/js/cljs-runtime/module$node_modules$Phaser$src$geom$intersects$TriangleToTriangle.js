shadow$provide.module$node_modules$Phaser$src$geom$intersects$TriangleToTriangle=function(global,require,module,exports){var ContainsArray=require("module$node_modules$Phaser$src$geom$triangle$ContainsArray"),Decompose=require("module$node_modules$Phaser$src$geom$triangle$Decompose"),LineToLine=require("module$node_modules$Phaser$src$geom$intersects$LineToLine");module.exports=function(triangleA,triangleB){if(triangleA.left>triangleB.right||triangleA.right<triangleB.left||triangleA.top>triangleB.bottom||
triangleA.bottom<triangleB.top)return!1;var lineAA=triangleA.getLineA(),lineAB=triangleA.getLineB(),lineAC=triangleA.getLineC(),lineBA=triangleB.getLineA(),lineBB=triangleB.getLineB(),lineBC=triangleB.getLineC();if(LineToLine(lineAA,lineBA)||LineToLine(lineAA,lineBB)||LineToLine(lineAA,lineBC)||LineToLine(lineAB,lineBA)||LineToLine(lineAB,lineBB)||LineToLine(lineAB,lineBC)||LineToLine(lineAC,lineBA)||LineToLine(lineAC,lineBB)||LineToLine(lineAC,lineBC))return!0;lineAA=Decompose(triangleA);lineAA=
ContainsArray(triangleB,lineAA,!0);if(0<lineAA.length)return!0;lineAA=Decompose(triangleB);lineAA=ContainsArray(triangleA,lineAA,!0);return 0<lineAA.length?!0:!1}}
//# sourceMappingURL=module$node_modules$Phaser$src$geom$intersects$TriangleToTriangle.js.map
