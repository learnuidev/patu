{
"version":3,
"file":"module$node_modules$Phaser$src$renderer$webgl$WebGLRenderer.js",
"lineCount":43,
"mappings":"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",
"sources":["node_modules/Phaser/src/renderer/webgl/WebGLRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$renderer$webgl$WebGLRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar BaseCamera = require('../../cameras/2d/BaseCamera');\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../../const');\r\nvar IsSizePowerOfTwo = require('../../math/pow2/IsSizePowerOfTwo');\r\nvar SpliceOne = require('../../utils/array/SpliceOne');\r\nvar TransformMatrix = require('../../gameobjects/components/TransformMatrix');\r\nvar Utils = require('./Utils');\r\nvar WebGLSnapshot = require('../snapshot/WebGLSnapshot');\r\n\r\n// Default Pipelines\r\nvar BitmapMaskPipeline = require('./pipelines/BitmapMaskPipeline');\r\nvar ForwardDiffuseLightPipeline = require('./pipelines/ForwardDiffuseLightPipeline');\r\nvar TextureTintPipeline = require('./pipelines/TextureTintPipeline');\r\n\r\n/**\r\n * @callback WebGLContextCallback\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - The WebGL Renderer which owns the context.\r\n */\r\n\r\n/**\r\n * @typedef {object} SnapshotState\r\n *\r\n * @property {SnapshotCallback} callback - The function to call after the snapshot is taken.\r\n * @property {string} type - The type of the image to create.\r\n * @property {number} encoder - The image quality, between 0 and 1, for image formats which use lossy compression (such as `image/jpeg`).\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * WebGLRenderer is a class that contains the needed functionality to keep the\r\n * WebGLRenderingContext state clean. The main idea of the WebGLRenderer is to keep track of\r\n * any context change that happens for WebGL rendering inside of Phaser. This means\r\n * if raw webgl functions are called outside the WebGLRenderer of the Phaser WebGL\r\n * rendering ecosystem they might pollute the current WebGLRenderingContext state producing\r\n * unexpected behavior. It's recommended that WebGL interaction is done through\r\n * WebGLRenderer and/or WebGLPipeline.\r\n *\r\n * @class WebGLRenderer\r\n * @memberOf Phaser.Renderer.WebGL\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - The Game instance which owns this WebGL Renderer.\r\n */\r\nvar WebGLRenderer = new Class({\r\n\r\n    initialize:\r\n\r\n    function WebGLRenderer (game)\r\n    {\r\n        // eslint-disable-next-line consistent-this\r\n        var renderer = this;\r\n\r\n        var gameConfig = game.config;\r\n\r\n        var contextCreationConfig = {\r\n            alpha: gameConfig.transparent,\r\n            depth: false, // enable when 3D is added in the future\r\n            antialias: gameConfig.antialias,\r\n            premultipliedAlpha: gameConfig.premultipliedAlpha,\r\n            stencil: true,\r\n            preserveDrawingBuffer: gameConfig.preserveDrawingBuffer,\r\n            failIfMajorPerformanceCaveat: gameConfig.failIfMajorPerformanceCaveat,\r\n            powerPreference: gameConfig.powerPreference\r\n        };\r\n\r\n        /**\r\n         * The local configuration settings of this WebGL Renderer.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#config\r\n         * @type {RendererConfig}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = {\r\n            clearBeforeRender: gameConfig.clearBeforeRender,\r\n            antialias: gameConfig.antialias,\r\n            backgroundColor: gameConfig.backgroundColor,\r\n            contextCreation: contextCreationConfig,\r\n            resolution: gameConfig.resolution,\r\n            autoResize: gameConfig.autoResize,\r\n            roundPixels: gameConfig.roundPixels,\r\n            maxTextures: gameConfig.maxTextures,\r\n            maxTextureSize: gameConfig.maxTextureSize,\r\n            batchSize: gameConfig.batchSize\r\n        };\r\n\r\n        /**\r\n         * The Game instance which owns this WebGL Renderer.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#game\r\n         * @type {Phaser.Game}\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * A constant which allows the renderer to be easily identified as a WebGL Renderer.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#type\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.type = CONST.WEBGL;\r\n\r\n        /**\r\n         * The width of a rendered frame.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#width\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = game.config.width;\r\n\r\n        /**\r\n         * The height of a rendered frame.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#height\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = game.config.height;\r\n\r\n        /**\r\n         * The canvas which this WebGL Renderer draws to.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#canvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.0.0\r\n         */\r\n        this.canvas = game.canvas;\r\n\r\n        /**\r\n         * An array of functions to invoke if the WebGL context is lost.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#lostContextCallbacks\r\n         * @type {WebGLContextCallback[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.lostContextCallbacks = [];\r\n\r\n        /**\r\n         * An array of functions to invoke if the WebGL context is restored.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#restoredContextCallbacks\r\n         * @type {WebGLContextCallback[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.restoredContextCallbacks = [];\r\n\r\n        /**\r\n         * An array of blend modes supported by the WebGL Renderer.\r\n         * \r\n         * This array includes the default blend modes as well as any custom blend modes added through {@link #addBlendMode}.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#blendModes\r\n         * @type {array}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.blendModes = [];\r\n\r\n        /**\r\n         * Keeps track of any WebGLTexture created with the current WebGLRenderingContext\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#nativeTextures\r\n         * @type {array}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.nativeTextures = [];\r\n\r\n        /**\r\n         * Set to `true` if the WebGL context of the renderer is lost.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#contextLost\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.contextLost = false;\r\n\r\n        /**\r\n         * This object will store all pipelines created through addPipeline\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#pipelines\r\n         * @type {object}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.pipelines = null;\r\n\r\n        /**\r\n         * Details about the currently scheduled snapshot.\r\n         * \r\n         * If a non-null `callback` is set in this object, a snapshot of the canvas will be taken after the current frame is fully rendered.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#snapshotState\r\n         * @type {SnapshotState}\r\n         * @since 3.0.0\r\n         */\r\n        this.snapshotState = {\r\n            callback: null,\r\n            type: null,\r\n            encoder: null\r\n        };\r\n\r\n        // Internal Renderer State (Textures, Framebuffers, Pipelines, Buffers, etc)\r\n\r\n        /**\r\n         * Cached value for the last texture unit that was used\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#currentActiveTextureUnit\r\n         * @type {integer}\r\n         * @since 3.1.0\r\n         */\r\n        this.currentActiveTextureUnit = 0;\r\n\r\n        /**\r\n         * An array of the last texture handles that were bound to the WebGLRenderingContext\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#currentTextures\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.currentTextures = new Array(16);\r\n\r\n        /**\r\n         * Current framebuffer in use\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#currentFramebuffer\r\n         * @type {WebGLFramebuffer}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.currentFramebuffer = null;\r\n\r\n        /**\r\n         * Current WebGLPipeline in use\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#currentPipeline\r\n         * @type {Phaser.Renderer.WebGL.WebGLPipeline}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.currentPipeline = null;\r\n\r\n        /**\r\n         * Current WebGLProgram in use\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#currentProgram\r\n         * @type {WebGLProgram}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.currentProgram = null;\r\n\r\n        /**\r\n         * Current WebGLBuffer (Vertex buffer) in use\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#currentVertexBuffer\r\n         * @type {WebGLBuffer}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.currentVertexBuffer = null;\r\n\r\n        /**\r\n         * Current WebGLBuffer (Index buffer) in use\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#currentIndexBuffer\r\n         * @type {WebGLBuffer}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.currentIndexBuffer = null;\r\n\r\n        /**\r\n         * Current blend mode in use\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#currentBlendMode\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.currentBlendMode = Infinity;\r\n\r\n        /**\r\n         * Indicates if the the scissor state is enabled in WebGLRenderingContext\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#currentScissorEnabled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.currentScissorEnabled = false;\r\n\r\n        /**\r\n         * Stores the current scissor data\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#currentScissor\r\n         * @type {Uint32Array}\r\n         * @since 3.0.0\r\n         */\r\n        // this.currentScissor = new Uint32Array([ 0, 0, this.width, this.height ]);\r\n        this.currentScissor = null;\r\n\r\n        /**\r\n         * Stack of scissor data\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#scissorStack\r\n         * @type {Uint32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.scissorStack = [];\r\n\r\n        // Setup context lost and restore event listeners\r\n\r\n        this.canvas.addEventListener('webglcontextlost', function (event)\r\n        {\r\n            renderer.contextLost = true;\r\n            event.preventDefault();\r\n\r\n            for (var index = 0; index < renderer.lostContextCallbacks.length; ++index)\r\n            {\r\n                var callback = renderer.lostContextCallbacks[index];\r\n                callback[0].call(callback[1], renderer);\r\n            }\r\n        }, false);\r\n\r\n        this.canvas.addEventListener('webglcontextrestored', function ()\r\n        {\r\n            renderer.contextLost = false;\r\n            renderer.init(renderer.config);\r\n            for (var index = 0; index < renderer.restoredContextCallbacks.length; ++index)\r\n            {\r\n                var callback = renderer.restoredContextCallbacks[index];\r\n                callback[0].call(callback[1], renderer);\r\n            }\r\n        }, false);\r\n\r\n        // These are initialized post context creation\r\n\r\n        /**\r\n         * The underlying WebGL context of the renderer.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#gl\r\n         * @type {WebGLRenderingContext}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.gl = null;\r\n\r\n        /**\r\n         * Array of strings that indicate which WebGL extensions are supported by the browser\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#supportedExtensions\r\n         * @type {object}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.supportedExtensions = null;\r\n\r\n        /**\r\n         * Extensions loaded into the current context\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#extensions\r\n         * @type {object}\r\n         * @default {}\r\n         * @since 3.0.0\r\n         */\r\n        this.extensions = {};\r\n\r\n        /**\r\n         * Stores the current WebGL component formats for further use\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#glFormats\r\n         * @type {array}\r\n         * @default []\r\n         * @since 3.2.0\r\n         */\r\n        this.glFormats = [];\r\n\r\n        /**\r\n         * Stores the supported WebGL texture compression formats.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#compression\r\n         * @type {array}\r\n         * @since 3.8.0\r\n         */\r\n        this.compression = {\r\n            ETC1: false,\r\n            PVRTC: false,\r\n            S3TC: false\r\n        };\r\n\r\n        /**\r\n         * Cached drawing buffer height to reduce gl calls.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#drawingBufferHeight\r\n         * @type {number}\r\n         * @readOnly\r\n         * @since 3.11.0\r\n         */\r\n        this.drawingBufferHeight = 0;\r\n\r\n        /**\r\n         * A blank 32x32 transparent texture, as used by the Graphics system where needed.\r\n         * This is set in the `boot` method.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#blankTexture\r\n         * @type {WebGLTexture}\r\n         * @readOnly\r\n         * @since 3.12.0\r\n         */\r\n        this.blankTexture = null;\r\n\r\n        this.defaultCamera = new BaseCamera(0, 0, 0, 0);\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#_tempMatrix1\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.12.0\r\n         */\r\n        this._tempMatrix1 = new TransformMatrix();\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#_tempMatrix2\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.12.0\r\n         */\r\n        this._tempMatrix2 = new TransformMatrix();\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#_tempMatrix3\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.12.0\r\n         */\r\n        this._tempMatrix3 = new TransformMatrix();\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLRenderer#_tempMatrix4\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.12.0\r\n         */\r\n        this._tempMatrix4 = new TransformMatrix();\r\n\r\n        this.init(this.config);\r\n    },\r\n\r\n    /**\r\n     * Creates a new WebGLRenderingContext and initializes all internal\r\n     * state.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#init\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} config - The configuration object for the renderer.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    init: function (config)\r\n    {\r\n        var gl;\r\n        var canvas = this.canvas;\r\n        var clearColor = config.backgroundColor;\r\n\r\n        //  Did they provide their own context?\r\n        if (this.game.config.context)\r\n        {\r\n            gl = this.game.config.context;\r\n        }\r\n        else\r\n        {\r\n            gl = canvas.getContext('webgl', config.contextCreation) || canvas.getContext('experimental-webgl', config.contextCreation);\r\n        }\r\n\r\n        if (!gl || gl.isContextLost())\r\n        {\r\n            this.contextLost = true;\r\n\r\n            throw new Error('WebGL unsupported');\r\n        }\r\n\r\n        this.gl = gl;\r\n\r\n        //  Set it back into the Game, so developers can access it from there too\r\n        this.game.context = gl;\r\n\r\n        for (var i = 0; i <= 16; i++)\r\n        {\r\n            this.blendModes.push({ func: [ gl.ONE, gl.ONE_MINUS_SRC_ALPHA ], equation: gl.FUNC_ADD });\r\n        }\r\n\r\n        this.blendModes[1].func = [ gl.ONE, gl.DST_ALPHA ];\r\n        this.blendModes[2].func = [ gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA ];\r\n        this.blendModes[3].func = [ gl.ONE, gl.ONE_MINUS_SRC_COLOR ];\r\n\r\n        this.glFormats[0] = gl.BYTE;\r\n        this.glFormats[1] = gl.SHORT;\r\n        this.glFormats[2] = gl.UNSIGNED_BYTE;\r\n        this.glFormats[3] = gl.UNSIGNED_SHORT;\r\n        this.glFormats[4] = gl.FLOAT;\r\n\r\n        // Load supported extensions\r\n        var exts = gl.getSupportedExtensions();\r\n\r\n        if (!config.maxTextures)\r\n        {\r\n            config.maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n        }\r\n\r\n        if (!config.maxTextureSize)\r\n        {\r\n            config.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n        }\r\n\r\n        var extString = 'WEBGL_compressed_texture_';\r\n        var wkExtString = 'WEBKIT_' + extString;\r\n\r\n        this.compression.ETC1 = gl.getExtension(extString + 'etc1') || gl.getExtension(wkExtString + 'etc1');\r\n        this.compression.PVRTC = gl.getExtension(extString + 'pvrtc') || gl.getExtension(wkExtString + 'pvrtc');\r\n        this.compression.S3TC = gl.getExtension(extString + 's3tc') || gl.getExtension(wkExtString + 's3tc');\r\n\r\n        this.supportedExtensions = exts;\r\n\r\n        // Setup initial WebGL state\r\n        gl.disable(gl.DEPTH_TEST);\r\n        gl.disable(gl.CULL_FACE);\r\n\r\n        // gl.disable(gl.SCISSOR_TEST);\r\n\r\n        gl.enable(gl.BLEND);\r\n        gl.clearColor(clearColor.redGL, clearColor.greenGL, clearColor.blueGL, 1.0);\r\n\r\n        // Initialize all textures to null\r\n        for (var index = 0; index < this.currentTextures.length; ++index)\r\n        {\r\n            this.currentTextures[index] = null;\r\n        }\r\n\r\n        // Clear previous pipelines and reload default ones\r\n        this.pipelines = {};\r\n\r\n        this.addPipeline('TextureTintPipeline', new TextureTintPipeline({ game: this.game, renderer: this }));\r\n        this.addPipeline('BitmapMaskPipeline', new BitmapMaskPipeline({ game: this.game, renderer: this }));\r\n        this.addPipeline('Light2D', new ForwardDiffuseLightPipeline({ game: this.game, renderer: this }));\r\n\r\n        this.setBlendMode(CONST.BlendModes.NORMAL);\r\n\r\n        this.resize(this.width, this.height);\r\n\r\n        this.game.events.once('texturesready', this.boot, this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal boot handler. Calls 'boot' on each pipeline.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#boot\r\n     * @private\r\n     * @since 3.11.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        for (var pipelineName in this.pipelines)\r\n        {\r\n            this.pipelines[pipelineName].boot();\r\n        }\r\n\r\n        var blank = this.game.textures.getFrame('__DEFAULT');\r\n\r\n        this.pipelines.TextureTintPipeline.currentFrame = blank;\r\n\r\n        this.blankTexture = blank;\r\n    },\r\n\r\n    /**\r\n     * Resizes the internal canvas and drawing buffer.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#resize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of the renderer.\r\n     * @param {number} height - The height of the renderer.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    resize: function (width, height)\r\n    {\r\n        var gl = this.gl;\r\n        var pipelines = this.pipelines;\r\n        var resolution = this.config.resolution;\r\n\r\n        this.width = Math.floor(width * resolution);\r\n        this.height = Math.floor(height * resolution);\r\n\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n\r\n        if (this.config.autoResize)\r\n        {\r\n            this.canvas.style.width = (this.width / resolution) + 'px';\r\n            this.canvas.style.height = (this.height / resolution) + 'px';\r\n        }\r\n\r\n        gl.viewport(0, 0, this.width, this.height);\r\n\r\n        //  Update all registered pipelines\r\n        for (var pipelineName in pipelines)\r\n        {\r\n            pipelines[pipelineName].resize(width, height, resolution);\r\n        }\r\n\r\n        this.drawingBufferHeight = gl.drawingBufferHeight;\r\n\r\n        this.defaultCamera.setSize(width, height);\r\n\r\n        gl.scissor(0, (this.drawingBufferHeight - this.height), this.width, this.height);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds a callback to be invoked when the WebGL context has been restored by the browser.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#onContextRestored\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLContextCallback} callback - The callback to be invoked on context restoration.\r\n     * @param {object} target - The context of the callback.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    onContextRestored: function (callback, target)\r\n    {\r\n        this.restoredContextCallbacks.push([ callback, target ]);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds a callback to be invoked when the WebGL context has been lost by the browser.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#onContextLost\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLContextCallback} callback - The callback to be invoked on context loss.\r\n     * @param {object} target - The context of the callback.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    onContextLost: function (callback, target)\r\n    {\r\n        this.lostContextCallbacks.push([ callback, target ]);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks if a WebGL extension is supported\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#hasExtension\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} extensionName - Name of the WebGL extension\r\n     *\r\n     * @return {boolean} `true` if the extension is supported, otherwise `false`.\r\n     */\r\n    hasExtension: function (extensionName)\r\n    {\r\n        return this.supportedExtensions ? this.supportedExtensions.indexOf(extensionName) : false;\r\n    },\r\n\r\n    /**\r\n     * Loads a WebGL extension\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#getExtension\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} extensionName - The name of the extension to load.\r\n     *\r\n     * @return {object} WebGL extension if the extension is supported\r\n     */\r\n    getExtension: function (extensionName)\r\n    {\r\n        if (!this.hasExtension(extensionName)) { return null; }\r\n\r\n        if (!(extensionName in this.extensions))\r\n        {\r\n            this.extensions[extensionName] = this.gl.getExtension(extensionName);\r\n        }\r\n\r\n        return this.extensions[extensionName];\r\n    },\r\n\r\n    /**\r\n     * Flushes the current pipeline if the pipeline is bound\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#flush\r\n     * @since 3.0.0\r\n     */\r\n    flush: function ()\r\n    {\r\n        if (this.currentPipeline)\r\n        {\r\n            this.currentPipeline.flush();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Checks if a pipeline is present in the current WebGLRenderer\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#hasPipeline\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} pipelineName - The name of the pipeline.\r\n     *\r\n     * @return {boolean} `true` if the given pipeline is loaded, otherwise `false`.\r\n     */\r\n    hasPipeline: function (pipelineName)\r\n    {\r\n        return (pipelineName in this.pipelines);\r\n    },\r\n\r\n    /**\r\n     * Returns the pipeline by name if the pipeline exists\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#getPipeline\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} pipelineName - The name of the pipeline.\r\n     *\r\n     * @return {Phaser.Renderer.WebGL.WebGLPipeline} The pipeline instance, or `null` if not found.\r\n     */\r\n    getPipeline: function (pipelineName)\r\n    {\r\n        return (this.hasPipeline(pipelineName)) ? this.pipelines[pipelineName] : null;\r\n    },\r\n\r\n    /**\r\n     * Removes a pipeline by name.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#removePipeline\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} pipelineName - The name of the pipeline to be removed.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    removePipeline: function (pipelineName)\r\n    {\r\n        delete this.pipelines[pipelineName];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds a pipeline instance into the collection of pipelines\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#addPipeline\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} pipelineName - A unique string-based key for the pipeline.\r\n     * @param {Phaser.Renderer.WebGL.WebGLPipeline} pipelineInstance - A pipeline instance which must extend WebGLPipeline.\r\n     *\r\n     * @return {Phaser.Renderer.WebGL.WebGLPipeline} The pipline instance that was passed.\r\n     */\r\n    addPipeline: function (pipelineName, pipelineInstance)\r\n    {\r\n        if (!this.hasPipeline(pipelineName))\r\n        {\r\n            this.pipelines[pipelineName] = pipelineInstance;\r\n        }\r\n        else\r\n        {\r\n            console.warn('Pipeline exists: ' + pipelineName);\r\n        }\r\n\r\n        pipelineInstance.name = pipelineName;\r\n\r\n        this.pipelines[pipelineName].resize(this.width, this.height, this.config.resolution);\r\n\r\n        return pipelineInstance;\r\n    },\r\n\r\n    /**\r\n     * Pushes a new scissor state. This is used to set nested scissor states.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#pushScissor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} x - The x position of the scissor.\r\n     * @param {integer} y - The y position of the scissor.\r\n     * @param {integer} width - The width of the scissor.\r\n     * @param {integer} height - The height of the scissor.\r\n     *\r\n     * @return {integer[]} An array containing the scissor values.\r\n     */\r\n    pushScissor: function (x, y, width, height)\r\n    {\r\n        var scissorStack = this.scissorStack;\r\n\r\n        var scissor = [ x, y, width, height ];\r\n\r\n        scissorStack.push(scissor);\r\n\r\n        this.setScissor(x, y, width, height);\r\n\r\n        this.currentScissor = scissor;\r\n\r\n        return scissor;\r\n    },\r\n\r\n    /**\r\n     * Sets the current scissor state.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setScissor\r\n     * @since 3.0.0\r\n     * \r\n     * @param {integer} x - The x position of the scissor.\r\n     * @param {integer} y - The y position of the scissor.\r\n     * @param {integer} width - The width of the scissor.\r\n     * @param {integer} height - The height of the scissor.\r\n     */\r\n    setScissor: function (x, y, width, height)\r\n    {\r\n        var gl = this.gl;\r\n\r\n        var current = this.currentScissor;\r\n\r\n        var cx = current[0];\r\n        var cy = current[1];\r\n        var cw = current[2];\r\n        var ch = current[3];\r\n\r\n        if (cx !== x || cy !== y || cw !== width || ch !== height)\r\n        {\r\n            this.flush();\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/scissor\r\n\r\n            if (width > 0 && height > 0)\r\n            {\r\n                gl.scissor(x, (this.drawingBufferHeight - y - height), width, height);\r\n\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Pops the last scissor state and sets it.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#popScissor\r\n     * @since 3.0.0\r\n     */\r\n    popScissor: function ()\r\n    {\r\n        var scissorStack = this.scissorStack;\r\n\r\n        //  Remove the current scissor\r\n        scissorStack.pop();\r\n\r\n        //  Reset the previous scissor\r\n        var scissor = scissorStack[scissorStack.length - 1];\r\n\r\n        if (scissor)\r\n        {\r\n            this.setScissor(scissor[0], scissor[1], scissor[2], scissor[3]);\r\n        }\r\n\r\n        this.currentScissor = scissor;\r\n    },\r\n\r\n    /**\r\n     * Binds a WebGLPipeline and sets it as the current pipeline to be used.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setPipeline\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Renderer.WebGL.WebGLPipeline} pipelineInstance - The pipeline instance to be activated.\r\n     * @param {Phaser.GameObjects.GameObject} [gameObject] - The Game Object that invoked this pipeline, if any.\r\n     *\r\n     * @return {Phaser.Renderer.WebGL.WebGLPipeline} The pipeline that was activated.\r\n     */\r\n    setPipeline: function (pipelineInstance, gameObject)\r\n    {\r\n        if (this.currentPipeline !== pipelineInstance ||\r\n            this.currentPipeline.vertexBuffer !== this.currentVertexBuffer ||\r\n            this.currentPipeline.program !== this.currentProgram)\r\n        {\r\n            this.flush();\r\n            this.currentPipeline = pipelineInstance;\r\n            this.currentPipeline.bind();\r\n        }\r\n\r\n        this.currentPipeline.onBind(gameObject);\r\n\r\n        return this.currentPipeline;\r\n    },\r\n\r\n    /**\r\n     * Sets the blend mode to the value given.\r\n     *\r\n     * If the current blend mode is different from the one given, the pipeline is flushed and the new\r\n     * blend mode is enabled.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setBlendMode\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} blendModeId - The blend mode to be set. Can be a `BlendModes` const or an integer value.\r\n     *\r\n     * @return {boolean} `true` if the blend mode was changed as a result of this call, forcing a flush, otherwise `false`.\r\n     */\r\n    setBlendMode: function (blendModeId)\r\n    {\r\n        var gl = this.gl;\r\n        var blendMode = this.blendModes[blendModeId];\r\n\r\n        if (blendModeId !== CONST.BlendModes.SKIP_CHECK && this.currentBlendMode !== blendModeId)\r\n        {\r\n            this.flush();\r\n\r\n            gl.enable(gl.BLEND);\r\n            gl.blendEquation(blendMode.equation);\r\n\r\n            if (blendMode.func.length > 2)\r\n            {\r\n                gl.blendFuncSeparate(blendMode.func[0], blendMode.func[1], blendMode.func[2], blendMode.func[3]);\r\n            }\r\n            else\r\n            {\r\n                gl.blendFunc(blendMode.func[0], blendMode.func[1]);\r\n            }\r\n\r\n            this.currentBlendMode = blendModeId;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Creates a new custom blend mode for the renderer.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#addBlendMode\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} func - An array containing the WebGL functions to use for the source and the destination blending factors, respectively. See the possible constants for {@link WebGLRenderingContext#blendFunc()}.\r\n     * @param {function} equation - The equation to use for combining the RGB and alpha components of a new pixel with a rendered one. See the possible constants for {@link WebGLRenderingContext#blendEquation()}.\r\n     *\r\n     * @return {integer} The index of the new blend mode, used for referencing it in the future.\r\n     */\r\n    addBlendMode: function (func, equation)\r\n    {\r\n        var index = this.blendModes.push({ func: func, equation: equation });\r\n\r\n        return index - 1;\r\n    },\r\n\r\n    /**\r\n     * Updates the function bound to a given custom blend mode.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#updateBlendMode\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The index of the custom blend mode.\r\n     * @param {function} func - The function to use for the blend mode.\r\n     * @param {function} equation - The equation to use for the blend mode.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    updateBlendMode: function (index, func, equation)\r\n    {\r\n        if (this.blendModes[index])\r\n        {\r\n            this.blendModes[index].func = func;\r\n\r\n            if (equation)\r\n            {\r\n                this.blendModes[index].equation = equation;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes a custom blend mode from the renderer.\r\n     * Any Game Objects still using this blend mode will error, so be sure to clear them first.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#removeBlendMode\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The index of the custom blend mode to be removed.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    removeBlendMode: function (index)\r\n    {\r\n        if (index > 16 && this.blendModes[index])\r\n        {\r\n            this.blendModes.splice(index, 1);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the current active texture for texture unit zero to be a blank texture.\r\n     * This only happens if there isn't a texture already in use by texture unit zero.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setBlankTexture\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {boolean} [force=false] - Force a blank texture set, regardless of what's already bound?\r\n     */\r\n    setBlankTexture: function (force)\r\n    {\r\n        if (force === undefined) { force = false; }\r\n\r\n        if (force || this.currentActiveTextureUnit !== 0 || !this.currentTextures[0])\r\n        {\r\n            this.setTexture2D(this.blankTexture.glTexture, 0);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Binds a texture at a texture unit. If a texture is already\r\n     * bound to that unit it will force a flush on the current pipeline.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setTexture2D\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLTexture} texture - The WebGL texture that needs to be bound.\r\n     * @param {integer} textureUnit - The texture unit to which the texture will be bound.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    setTexture2D: function (texture, textureUnit)\r\n    {\r\n        var gl = this.gl;\r\n\r\n        if (texture !== this.currentTextures[textureUnit])\r\n        {\r\n            this.flush();\r\n\r\n            if (this.currentActiveTextureUnit !== textureUnit)\r\n            {\r\n                gl.activeTexture(gl.TEXTURE0 + textureUnit);\r\n\r\n                this.currentActiveTextureUnit = textureUnit;\r\n            }\r\n\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n            this.currentTextures[textureUnit] = texture;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Binds a framebuffer. If there was another framebuffer already bound it will force a pipeline flush.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setFramebuffer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLFramebuffer} framebuffer - The framebuffer that needs to be bound.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    setFramebuffer: function (framebuffer)\r\n    {\r\n        var gl = this.gl;\r\n\r\n        var width = this.width;\r\n        var height = this.height;\r\n\r\n        if (framebuffer !== this.currentFramebuffer)\r\n        {\r\n            if (framebuffer && framebuffer.renderTexture)\r\n            {\r\n                width = framebuffer.renderTexture.width;\r\n                height = framebuffer.renderTexture.height;\r\n            }\r\n            else\r\n            {\r\n                this.flush();\r\n            }\r\n\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n            gl.viewport(0, 0, width, height);\r\n\r\n            this.currentFramebuffer = framebuffer;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Binds a program. If there was another program already bound it will force a pipeline flush.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setProgram\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The program that needs to be bound.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    setProgram: function (program)\r\n    {\r\n        var gl = this.gl;\r\n\r\n        if (program !== this.currentProgram)\r\n        {\r\n            this.flush();\r\n\r\n            gl.useProgram(program);\r\n\r\n            this.currentProgram = program;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Bounds a vertex buffer. If there is a vertex buffer already bound it'll force a pipeline flush.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setVertexBuffer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLBuffer} vertexBuffer - The buffer that needs to be bound.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    setVertexBuffer: function (vertexBuffer)\r\n    {\r\n        var gl = this.gl;\r\n\r\n        if (vertexBuffer !== this.currentVertexBuffer)\r\n        {\r\n            this.flush();\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\r\n\r\n            this.currentVertexBuffer = vertexBuffer;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Bounds a index buffer. If there is a index buffer already bound it'll force a pipeline flush.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setIndexBuffer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLBuffer} indexBuffer - The buffer the needs to be bound.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    setIndexBuffer: function (indexBuffer)\r\n    {\r\n        var gl = this.gl;\r\n\r\n        if (indexBuffer !== this.currentIndexBuffer)\r\n        {\r\n            this.flush();\r\n\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\r\n            this.currentIndexBuffer = indexBuffer;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a texture from an image source. If the source is not valid it creates an empty texture.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#createTextureFromSource\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} source - The source of the texture.\r\n     * @param {integer} width - The width of the texture.\r\n     * @param {integer} height - The height of the texture.\r\n     * @param {integer} scaleMode - The scale mode to be used by the texture.\r\n     *\r\n     * @return {?WebGLTexture} The WebGL Texture that was created, or `null` if it couldn't be created.\r\n     */\r\n    createTextureFromSource: function (source, width, height, scaleMode)\r\n    {\r\n        var gl = this.gl;\r\n        var filter = gl.NEAREST;\r\n        var wrap = gl.CLAMP_TO_EDGE;\r\n        var texture = null;\r\n\r\n        width = source ? source.width : width;\r\n        height = source ? source.height : height;\r\n\r\n        if (IsSizePowerOfTwo(width, height))\r\n        {\r\n            wrap = gl.REPEAT;\r\n        }\r\n\r\n        if (scaleMode === CONST.ScaleModes.LINEAR && this.config.antialias)\r\n        {\r\n            filter = gl.LINEAR;\r\n        }\r\n\r\n        if (!source && typeof width === 'number' && typeof height === 'number')\r\n        {\r\n            texture = this.createTexture2D(0, filter, filter, wrap, wrap, gl.RGBA, null, width, height);\r\n        }\r\n        else\r\n        {\r\n            texture = this.createTexture2D(0, filter, filter, wrap, wrap, gl.RGBA, source);\r\n        }\r\n\r\n        return texture;\r\n    },\r\n\r\n    /**\r\n     * A wrapper for creating a WebGLTexture. If no pixel data is passed it will create an empty texture.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#createTexture2D\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} mipLevel - Mip level of the texture.\r\n     * @param {integer} minFilter - Filtering of the texture.\r\n     * @param {integer} magFilter - Filtering of the texture.\r\n     * @param {integer} wrapT - Wrapping mode of the texture.\r\n     * @param {integer} wrapS - Wrapping mode of the texture.\r\n     * @param {integer} format - Which format does the texture use.\r\n     * @param {object} pixels - pixel data.\r\n     * @param {integer} width - Width of the texture in pixels.\r\n     * @param {integer} height - Height of the texture in pixels.\r\n     * @param {boolean} pma - Does the texture have premultiplied alpha?\r\n     *\r\n     * @return {WebGLTexture} The WebGLTexture that was created.\r\n     */\r\n    createTexture2D: function (mipLevel, minFilter, magFilter, wrapT, wrapS, format, pixels, width, height, pma)\r\n    {\r\n        pma = (pma === undefined || pma === null) ? true : pma;\r\n\r\n        var gl = this.gl;\r\n        var texture = gl.createTexture();\r\n\r\n        this.setTexture2D(texture, 0);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, pma);\r\n\r\n        if (pixels === null || pixels === undefined)\r\n        {\r\n            gl.texImage2D(gl.TEXTURE_2D, mipLevel, format, width, height, 0, format, gl.UNSIGNED_BYTE, null);\r\n        }\r\n        else\r\n        {\r\n            gl.texImage2D(gl.TEXTURE_2D, mipLevel, format, format, gl.UNSIGNED_BYTE, pixels);\r\n            width = pixels.width;\r\n            height = pixels.height;\r\n        }\r\n\r\n        this.setTexture2D(null, 0);\r\n\r\n        texture.isAlphaPremultiplied = pma;\r\n        texture.isRenderTexture = false;\r\n        texture.width = width;\r\n        texture.height = height;\r\n\r\n        this.nativeTextures.push(texture);\r\n\r\n        return texture;\r\n    },\r\n\r\n    /**\r\n     * Wrapper for creating WebGLFramebuffer.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#createFramebuffer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} width - Width in pixels of the framebuffer\r\n     * @param {integer} height - Height in pixels of the framebuffer\r\n     * @param {WebGLTexture} renderTexture - The color texture to where the color pixels are written\r\n     * @param {boolean} addDepthStencilBuffer - Indicates if the current framebuffer support depth and stencil buffers\r\n     *\r\n     * @return {WebGLFramebuffer} Raw WebGLFramebuffer\r\n     */\r\n    createFramebuffer: function (width, height, renderTexture, addDepthStencilBuffer)\r\n    {\r\n        var gl = this.gl;\r\n        var framebuffer = gl.createFramebuffer();\r\n        var complete = 0;\r\n\r\n        this.setFramebuffer(framebuffer);\r\n\r\n        if (addDepthStencilBuffer)\r\n        {\r\n            var depthStencilBuffer = gl.createRenderbuffer();\r\n            gl.bindRenderbuffer(gl.RENDERBUFFER, depthStencilBuffer);\r\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencilBuffer);\r\n        }\r\n\r\n        renderTexture.isRenderTexture = true;\r\n        renderTexture.isAlphaPremultiplied = false;\r\n\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, renderTexture, 0);\r\n\r\n        complete = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n\r\n        if (complete !== gl.FRAMEBUFFER_COMPLETE)\r\n        {\r\n            var errors = {\r\n                36054: 'Incomplete Attachment',\r\n                36055: 'Missing Attachment',\r\n                36057: 'Incomplete Dimensions',\r\n                36061: 'Framebuffer Unsupported'\r\n            };\r\n\r\n            throw new Error('Framebuffer incomplete. Framebuffer status: ' + errors[complete]);\r\n        }\r\n\r\n        framebuffer.renderTexture = renderTexture;\r\n\r\n        this.setFramebuffer(null);\r\n\r\n        return framebuffer;\r\n    },\r\n\r\n    /**\r\n     * Wrapper for creating a WebGLProgram\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#createProgram\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} vertexShader - Source to the vertex shader\r\n     * @param {string} fragmentShader - Source to the fragment shader\r\n     *\r\n     * @return {WebGLProgram} Raw WebGLProgram\r\n     */\r\n    createProgram: function (vertexShader, fragmentShader)\r\n    {\r\n        var gl = this.gl;\r\n        var program = gl.createProgram();\r\n        var vs = gl.createShader(gl.VERTEX_SHADER);\r\n        var fs = gl.createShader(gl.FRAGMENT_SHADER);\r\n\r\n        gl.shaderSource(vs, vertexShader);\r\n        gl.shaderSource(fs, fragmentShader);\r\n        gl.compileShader(vs);\r\n        gl.compileShader(fs);\r\n\r\n        if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS))\r\n        {\r\n            throw new Error('Failed to compile Vertex Shader:\\n' + gl.getShaderInfoLog(vs));\r\n        }\r\n        if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS))\r\n        {\r\n            throw new Error('Failed to compile Fragment Shader:\\n' + gl.getShaderInfoLog(fs));\r\n        }\r\n\r\n        gl.attachShader(program, vs);\r\n        gl.attachShader(program, fs);\r\n        gl.linkProgram(program);\r\n\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\r\n        {\r\n            throw new Error('Failed to link program:\\n' + gl.getProgramInfoLog(program));\r\n        }\r\n\r\n        return program;\r\n    },\r\n\r\n    /**\r\n     * Wrapper for creating a vertex buffer.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#createVertexBuffer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ArrayBuffer} initialDataOrSize - It's either ArrayBuffer or an integer indicating the size of the vbo\r\n     * @param {integer} bufferUsage - How the buffer is used. gl.DYNAMIC_DRAW, gl.STATIC_DRAW or gl.STREAM_DRAW\r\n     *\r\n     * @return {WebGLBuffer} Raw vertex buffer\r\n     */\r\n    createVertexBuffer: function (initialDataOrSize, bufferUsage)\r\n    {\r\n        var gl = this.gl;\r\n        var vertexBuffer = gl.createBuffer();\r\n\r\n        this.setVertexBuffer(vertexBuffer);\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, initialDataOrSize, bufferUsage);\r\n\r\n        this.setVertexBuffer(null);\r\n\r\n        return vertexBuffer;\r\n    },\r\n\r\n    /**\r\n     * Wrapper for creating a vertex buffer.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#createIndexBuffer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ArrayBuffer} initialDataOrSize - Either ArrayBuffer or an integer indicating the size of the vbo.\r\n     * @param {integer} bufferUsage - How the buffer is used. gl.DYNAMIC_DRAW, gl.STATIC_DRAW or gl.STREAM_DRAW.\r\n     *\r\n     * @return {WebGLBuffer} Raw index buffer\r\n     */\r\n    createIndexBuffer: function (initialDataOrSize, bufferUsage)\r\n    {\r\n        var gl = this.gl;\r\n        var indexBuffer = gl.createBuffer();\r\n\r\n        this.setIndexBuffer(indexBuffer);\r\n\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, initialDataOrSize, bufferUsage);\r\n\r\n        this.setIndexBuffer(null);\r\n\r\n        return indexBuffer;\r\n    },\r\n\r\n    /**\r\n     * Removes the given texture from the nativeTextures array and then deletes it from the GPU.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#deleteTexture\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLTexture} texture - The WebGL Texture to be deleted.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    deleteTexture: function (texture)\r\n    {\r\n        var index = this.nativeTextures.indexOf(texture);\r\n\r\n        if (index !== -1)\r\n        {\r\n            SpliceOne(this.nativeTextures, index);\r\n        }\r\n\r\n        this.gl.deleteTexture(texture);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Deletes a WebGLFramebuffer from the GL instance.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#deleteFramebuffer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLFramebuffer} framebuffer - The Framebuffer to be deleted.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    deleteFramebuffer: function (framebuffer)\r\n    {\r\n        this.gl.deleteFramebuffer(framebuffer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Deletes a WebGLProgram from the GL instance.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#deleteProgram\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The shader program to be deleted.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    deleteProgram: function (program)\r\n    {\r\n        this.gl.deleteProgram(program);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Deletes a WebGLBuffer from the GL instance.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#deleteBuffer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLBuffer} vertexBuffer - The WebGLBuffer to be deleted.\r\n     *\r\n     * @return {this} This WebGLRenderer instance.\r\n     */\r\n    deleteBuffer: function (buffer)\r\n    {\r\n        this.gl.deleteBuffer(buffer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Controls the pre-render operations for the given camera.\r\n     * Handles any clipping needed by the camera and renders the background color if a color is visible.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#preRenderCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to pre-render.\r\n     */\r\n    preRenderCamera: function (camera)\r\n    {\r\n        var cx = camera._cx;\r\n        var cy = camera._cy;\r\n        var cw = camera._cw;\r\n        var ch = camera._ch;\r\n\r\n        var TextureTintPipeline = this.pipelines.TextureTintPipeline;\r\n\r\n        var color = camera.backgroundColor;\r\n\r\n        if (camera.renderToTexture)\r\n        {\r\n            this.flush();\r\n\r\n            this.pushScissor(cx, cy, cw, -ch);\r\n\r\n            this.setFramebuffer(camera.framebuffer);\r\n\r\n            var gl = this.gl;\r\n\r\n            gl.clearColor(0, 0, 0, 0);\r\n\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n            TextureTintPipeline.projOrtho(cx, cw + cx, cy, ch + cy, -1000, 1000);\r\n\r\n            if (color.alphaGL > 0)\r\n            {\r\n                TextureTintPipeline.drawFillRect(\r\n                    cx, cy, cw + cx, ch + cy,\r\n                    Utils.getTintFromFloats(color.redGL, color.greenGL, color.blueGL, 1),\r\n                    color.alphaGL\r\n                );\r\n            }\r\n            \r\n            camera.emit('prerender', camera);\r\n        }\r\n        else\r\n        {\r\n            this.pushScissor(cx, cy, cw, ch);\r\n\r\n            if (color.alphaGL > 0)\r\n            {\r\n                TextureTintPipeline.drawFillRect(\r\n                    cx, cy, cw , ch,\r\n                    Utils.getTintFromFloats(color.redGL, color.greenGL, color.blueGL, 1),\r\n                    color.alphaGL\r\n                );\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Controls the post-render operations for the given camera.\r\n     * Renders the foreground camera effects like flash and fading. It resets the current scissor state.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#postRenderCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to post-render.\r\n     */\r\n    postRenderCamera: function (camera)\r\n    {\r\n        var TextureTintPipeline = this.pipelines.TextureTintPipeline;\r\n\r\n        camera.flashEffect.postRenderWebGL(TextureTintPipeline, Utils.getTintFromFloats);\r\n        camera.fadeEffect.postRenderWebGL(TextureTintPipeline, Utils.getTintFromFloats);\r\n\r\n        camera.dirty = false;\r\n\r\n        this.popScissor();\r\n\r\n        if (camera.renderToTexture)\r\n        {\r\n            TextureTintPipeline.flush();\r\n\r\n            this.setFramebuffer(null);\r\n\r\n            camera.emit('postrender', camera);\r\n\r\n            TextureTintPipeline.projOrtho(0, TextureTintPipeline.width, TextureTintPipeline.height, 0, -1000.0, 1000.0);\r\n\r\n            var getTint = Utils.getTintAppendFloatAlpha;\r\n\r\n            var pipeline = (camera.pipeline) ? camera.pipeline : TextureTintPipeline;\r\n\r\n            pipeline.batchTexture(\r\n                camera,\r\n                camera.glTexture,\r\n                camera.width, camera.height,\r\n                camera.x, camera.y,\r\n                camera.width, camera.height,\r\n                camera.zoom, camera.zoom,\r\n                camera.rotation,\r\n                camera.flipX, !camera.flipY,\r\n                1, 1,\r\n                0, 0,\r\n                0, 0, camera.width, camera.height,\r\n                getTint(camera._tintTL, camera._alphaTL),\r\n                getTint(camera._tintTR, camera._alphaTR),\r\n                getTint(camera._tintBL, camera._alphaBL),\r\n                getTint(camera._tintBR, camera._alphaBR),\r\n                (camera._isTinted && camera.tintFill),\r\n                0, 0,\r\n                this.defaultCamera,\r\n                null\r\n            );\r\n\r\n            //  Force clear the current texture so that items next in the batch (like Graphics) don't try and use it\r\n            this.setBlankTexture(true);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Clears the current vertex buffer and updates pipelines.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#preRender\r\n     * @since 3.0.0\r\n     */\r\n    preRender: function ()\r\n    {\r\n        if (this.contextLost) { return; }\r\n\r\n        var gl = this.gl;\r\n        var color = this.config.backgroundColor;\r\n        var pipelines = this.pipelines;\r\n\r\n        if (this.config.clearBeforeRender)\r\n        {\r\n            gl.clearColor(color.redGL, color.greenGL, color.blueGL, color.alphaGL);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\r\n        }\r\n\r\n        gl.enable(gl.SCISSOR_TEST);\r\n\r\n        for (var key in pipelines)\r\n        {\r\n            pipelines[key].onPreRender();\r\n        }\r\n\r\n        //  TODO - Find a way to stop needing to create these arrays every frame\r\n        //  and equally not need a huge array buffer created to hold them\r\n\r\n        this.currentScissor = [ 0, 0, this.width, this.height ];\r\n        this.scissorStack = [ this.currentScissor ];\r\n\r\n        if (this.game.scene.customViewports)\r\n        {\r\n            gl.scissor(0, (this.drawingBufferHeight - this.height), this.width, this.height);\r\n        }\r\n\r\n        this.setPipeline(this.pipelines.TextureTintPipeline);\r\n    },\r\n\r\n    /**\r\n     * The core render step for a Scene.\r\n     * Iterates through the given Game Object's array and renders them with the given Camera.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#render\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Scene} scene - The Scene to render.\r\n     * @param {Phaser.GameObjects.GameObject} children - The Game Object's within the Scene to be rendered.\r\n     * @param {number} interpolationPercentage - The interpolation percentage to apply. Currently un-used.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Scene Camera to render with.\r\n     */\r\n    render: function (scene, children, interpolationPercentage, camera)\r\n    {\r\n        if (this.contextLost) { return; }\r\n\r\n        var list = children.list;\r\n        var childCount = list.length;\r\n        var pipelines = this.pipelines;\r\n\r\n        for (var key in pipelines)\r\n        {\r\n            pipelines[key].onRender(scene, camera);\r\n        }\r\n\r\n        //   Apply scissor for cam region + render background color, if not transparent\r\n        this.preRenderCamera(camera);\r\n\r\n        for (var i = 0; i < childCount; i++)\r\n        {\r\n            var child = list[i];\r\n\r\n            if (!child.willRender(camera))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            if (child.blendMode !== this.currentBlendMode)\r\n            {\r\n                this.setBlendMode(child.blendMode);\r\n            }\r\n\r\n            var mask = child.mask;\r\n\r\n            if (mask)\r\n            {\r\n                mask.preRenderWebGL(this, child, camera);\r\n\r\n                child.renderWebGL(this, child, interpolationPercentage, camera);\r\n\r\n                mask.postRenderWebGL(this, child);\r\n            }\r\n            else\r\n            {\r\n                child.renderWebGL(this, child, interpolationPercentage, camera);\r\n            }\r\n        }\r\n\r\n        this.setBlendMode(CONST.BlendModes.NORMAL);\r\n\r\n        //  Applies camera effects and pops the scissor, if set\r\n        this.postRenderCamera(camera);\r\n    },\r\n\r\n    /**\r\n     * The post-render step happens after all Cameras in all Scenes have been rendered.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#postRender\r\n     * @since 3.0.0\r\n     */\r\n    postRender: function ()\r\n    {\r\n        if (this.contextLost) { return; }\r\n\r\n        this.flush();\r\n\r\n        // Unbind custom framebuffer here\r\n\r\n        if (this.snapshotState.callback)\r\n        {\r\n            this.snapshotState.callback(WebGLSnapshot(this.canvas, this.snapshotState.type, this.snapshotState.encoder));\r\n            this.snapshotState.callback = null;\r\n        }\r\n\r\n        var pipelines = this.pipelines;\r\n\r\n        for (var key in pipelines)\r\n        {\r\n            pipelines[key].onPostRender();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Schedules a snapshot to be taken after the current frame is rendered.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#snapshot\r\n     * @since 3.0.0\r\n     *\r\n     * @param {SnapshotCallback} callback - Function to invoke after the snapshot is created.\r\n     * @param {string} type - The format of the image to create, usually `image/png`.\r\n     * @param {number} encoderOptions - The image quality, between 0 and 1, to use for image formats with lossy compression (such as `image/jpeg`).\r\n     *\r\n     * @return {Phaser.Renderer.WebGL.WebGLRenderer} This WebGL Renderer.\r\n     */\r\n    snapshot: function (callback, type, encoderOptions)\r\n    {\r\n        this.snapshotState.callback = callback;\r\n        this.snapshotState.type = type;\r\n        this.snapshotState.encoder = encoderOptions;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a WebGL Texture based on the given canvas element.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#canvasToTexture\r\n     * @since 3.0.0\r\n     *\r\n     * @param {HTMLCanvasElement} srcCanvas - The Canvas element that will be used to populate the texture.\r\n     * @param {WebGLTexture} [dstTexture] - Is this going to replace an existing texture? If so, pass it here.\r\n     *\r\n     * @return {WebGLTexture} The newly created WebGL Texture.\r\n     */\r\n    canvasToTexture: function (srcCanvas, dstTexture)\r\n    {\r\n        var gl = this.gl;\r\n\r\n        var wrapping = gl.CLAMP_TO_EDGE;\r\n\r\n        if (IsSizePowerOfTwo(srcCanvas.width, srcCanvas.height))\r\n        {\r\n            wrapping = gl.REPEAT;\r\n        }\r\n\r\n        var newTexture = this.createTexture2D(0, gl.NEAREST, gl.NEAREST, wrapping, wrapping, gl.RGBA, srcCanvas, srcCanvas.width, srcCanvas.height, true);\r\n\r\n        if (newTexture && dstTexture)\r\n        {\r\n            this.deleteTexture(dstTexture);\r\n        }\r\n\r\n        return newTexture;\r\n    },\r\n\r\n    /**\r\n     * Sets the minification and magnification filter for a texture.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setTextureFilter\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} texture - The texture to set the filter for.\r\n     * @param {integer} filter - The filter to set. 0 for linear filtering, 1 for nearest neighbor (blocky) filtering.\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setTextureFilter: function (texture, filter)\r\n    {\r\n        var gl = this.gl;\r\n        var glFilter = [ gl.LINEAR, gl.NEAREST ][filter];\r\n\r\n        this.setTexture2D(texture, 0);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, glFilter);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, glFilter);\r\n\r\n        this.setTexture2D(null, 0);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setFloat1\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {number} x - [description]\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setFloat1: function (program, name, x)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniform1f(this.gl.getUniformLocation(program, name), x);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setFloat2\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setFloat2: function (program, name, x, y)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniform2f(this.gl.getUniformLocation(program, name), x, y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setFloat3\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} z - [description]\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setFloat3: function (program, name, x, y, z)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniform3f(this.gl.getUniformLocation(program, name), x, y, z);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets uniform of a WebGLProgram\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setFloat4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {number} x - X component\r\n     * @param {number} y - Y component\r\n     * @param {number} z - Z component\r\n     * @param {number} w - W component\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setFloat4: function (program, name, x, y, z, w)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniform4f(this.gl.getUniformLocation(program, name), x, y, z, w);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the value of a uniform variable in the given WebGLProgram.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setFloat1v\r\n     * @since 3.13.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setFloat1v: function (program, name, arr)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniform1fv(this.gl.getUniformLocation(program, name), arr);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the value of a uniform variable in the given WebGLProgram.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setFloat2v\r\n     * @since 3.13.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setFloat2v: function (program, name, arr)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniform2fv(this.gl.getUniformLocation(program, name), arr);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the value of a uniform variable in the given WebGLProgram.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setFloat3v\r\n     * @since 3.13.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setFloat3v: function (program, name, arr)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniform3fv(this.gl.getUniformLocation(program, name), arr);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the value of a uniform variable in the given WebGLProgram.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setFloat4v\r\n     * @since 3.13.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n\r\n    setFloat4v: function (program, name, arr)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniform4fv(this.gl.getUniformLocation(program, name), arr);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the value of a uniform variable in the given WebGLProgram.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setInt1\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {integer} x - [description]\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setInt1: function (program, name, x)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniform1i(this.gl.getUniformLocation(program, name), x);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the value of a uniform variable in the given WebGLProgram.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setInt2\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {integer} x - [description]\r\n     * @param {integer} y - [description]\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setInt2: function (program, name, x, y)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniform2i(this.gl.getUniformLocation(program, name), x, y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the value of a uniform variable in the given WebGLProgram.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setInt3\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {integer} x - [description]\r\n     * @param {integer} y - [description]\r\n     * @param {integer} z - [description]\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setInt3: function (program, name, x, y, z)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniform3i(this.gl.getUniformLocation(program, name), x, y, z);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the value of a uniform variable in the given WebGLProgram.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setInt4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {integer} x - X component\r\n     * @param {integer} y - Y component\r\n     * @param {integer} z - Z component\r\n     * @param {integer} w - W component\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setInt4: function (program, name, x, y, z, w)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniform4i(this.gl.getUniformLocation(program, name), x, y, z, w);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setMatrix2\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {boolean} transpose - [description]\r\n     * @param {Float32Array} matrix - [description]\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setMatrix2: function (program, name, transpose, matrix)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniformMatrix2fv(this.gl.getUniformLocation(program, name), transpose, matrix);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setMatrix3\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {boolean} transpose - [description]\r\n     * @param {Float32Array} matrix - [description]\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setMatrix3: function (program, name, transpose, matrix)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniformMatrix3fv(this.gl.getUniformLocation(program, name), transpose, matrix);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets uniform of a WebGLProgram\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#setMatrix4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {WebGLProgram} program - The target WebGLProgram from which the uniform location will be looked-up.\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {boolean} transpose - Is the matrix transposed\r\n     * @param {Float32Array} matrix - Matrix data\r\n     *\r\n     * @return {this} This WebGL Renderer instance.\r\n     */\r\n    setMatrix4: function (program, name, transpose, matrix)\r\n    {\r\n        this.setProgram(program);\r\n\r\n        this.gl.uniformMatrix4fv(this.gl.getUniformLocation(program, name), transpose, matrix);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the maximum number of texture units that can be used in a fragment shader.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#getMaxTextures\r\n     * @since 3.8.0\r\n     *\r\n     * @return {integer} The maximum number of textures WebGL supports.\r\n     */\r\n    getMaxTextures: function ()\r\n    {\r\n        return this.config.maxTextures;\r\n    },\r\n\r\n    /**\r\n     * Returns the largest texture size (either width or height) that can be created.\r\n     * Note that VRAM may not allow a texture of any given size, it just expresses\r\n     * hardware / driver support for a given size.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#getMaxTextureSize\r\n     * @since 3.8.0\r\n     *\r\n     * @return {integer} The maximum supported texture size.\r\n     */\r\n    getMaxTextureSize: function ()\r\n    {\r\n        return this.config.maxTextureSize;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLRenderer#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        //  Clear-up anything that should be cleared :)\r\n        for (var key in this.pipelines)\r\n        {\r\n            this.pipelines[key].destroy();\r\n\r\n            delete this.pipelines[key];\r\n        }\r\n\r\n        for (var index = 0; index < this.nativeTextures.length; ++index)\r\n        {\r\n            this.deleteTexture(this.nativeTextures[index]);\r\n\r\n            delete this.nativeTextures[index];\r\n        }\r\n\r\n        delete this.gl;\r\n        delete this.game;\r\n\r\n        this.contextLost = true;\r\n        this.extensions = {};\r\n        this.nativeTextures.length = 0;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = WebGLRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BaseCamera","Class","CONST","IsSizePowerOfTwo","SpliceOne","TransformMatrix","Utils","WebGLSnapshot","BitmapMaskPipeline","ForwardDiffuseLightPipeline","TextureTintPipeline","WebGLRenderer","initialize","game","renderer","gameConfig","config","clearBeforeRender","antialias","backgroundColor","contextCreation","contextCreationConfig","alpha","transparent","depth","premultipliedAlpha","stencil","preserveDrawingBuffer","failIfMajorPerformanceCaveat","powerPreference","resolution","autoResize","roundPixels","maxTextures","maxTextureSize","batchSize","type","WEBGL","width","height","canvas","lostContextCallbacks","restoredContextCallbacks","blendModes","nativeTextures","contextLost","pipelines","snapshotState","callback","encoder","currentActiveTextureUnit","currentTextures","Array","currentIndexBuffer","currentVertexBuffer","currentProgram","currentPipeline","currentFramebuffer","currentBlendMode","Infinity","currentScissorEnabled","currentScissor","scissorStack","addEventListener","event","preventDefault","index","length","call","init","supportedExtensions","gl","extensions","glFormats","compression","ETC1","PVRTC","S3TC","drawingBufferHeight","blankTexture","defaultCamera","_tempMatrix1","_tempMatrix2","_tempMatrix3","_tempMatrix4","clearColor","context","getContext","isContextLost","Error","i","push","func","ONE","ONE_MINUS_SRC_ALPHA","equation","FUNC_ADD","DST_ALPHA","DST_COLOR","ONE_MINUS_SRC_COLOR","BYTE","SHORT","UNSIGNED_BYTE","UNSIGNED_SHORT","FLOAT","exts","getSupportedExtensions","getParameter","MAX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","getExtension","disable","DEPTH_TEST","CULL_FACE","enable","BLEND","redGL","greenGL","blueGL","addPipeline","setBlendMode","BlendModes","NORMAL","resize","events","once","boot","pipelineName","blank","textures","getFrame","currentFrame","Math","floor","style","viewport","setSize","scissor","onContextRestored","target","onContextLost","hasExtension","extensionName","indexOf","flush","hasPipeline","getPipeline","removePipeline","pipelineInstance","console","warn","name","pushScissor","x","y","setScissor","current","cy","cw","ch","cx","popScissor","pop","setPipeline","gameObject","vertexBuffer","program","bind","onBind","blendModeId","blendMode","SKIP_CHECK","blendEquation","blendFuncSeparate","blendFunc","addBlendMode","updateBlendMode","removeBlendMode","splice","setBlankTexture","force","undefined","setTexture2D","glTexture","texture","textureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","setFramebuffer","framebuffer","renderTexture","bindFramebuffer","FRAMEBUFFER","setProgram","useProgram","setVertexBuffer","bindBuffer","ARRAY_BUFFER","setIndexBuffer","indexBuffer","ELEMENT_ARRAY_BUFFER","createTextureFromSource","source","scaleMode","filter","NEAREST","wrap","CLAMP_TO_EDGE","REPEAT","ScaleModes","LINEAR","createTexture2D","RGBA","mipLevel","minFilter","magFilter","wrapT","wrapS","format","pixels","pma","createTexture","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texImage2D","isAlphaPremultiplied","isRenderTexture","createFramebuffer","addDepthStencilBuffer","depthStencilBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_STENCIL","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","framebufferTexture2D","COLOR_ATTACHMENT0","complete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","errors","createProgram","vertexShader","fragmentShader","vs","createShader","VERTEX_SHADER","fs","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","createVertexBuffer","initialDataOrSize","bufferUsage","createBuffer","bufferData","createIndexBuffer","deleteTexture","deleteFramebuffer","deleteProgram","deleteBuffer","buffer","preRenderCamera","camera","_cx","_cy","_cw","_ch","color","renderToTexture","clear","COLOR_BUFFER_BIT","projOrtho","alphaGL","drawFillRect","getTintFromFloats","emit","postRenderCamera","flashEffect","postRenderWebGL","fadeEffect","dirty","getTint","getTintAppendFloatAlpha","batchTexture","pipeline","zoom","rotation","flipX","flipY","_tintTL","_alphaTL","_tintTR","_alphaTR","_tintBL","_alphaBL","_tintBR","_alphaBR","_isTinted","tintFill","preRender","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","SCISSOR_TEST","key","onPreRender","scene","customViewports","render","children","interpolationPercentage","list","childCount","onRender","child","willRender","mask","preRenderWebGL","renderWebGL","postRender","onPostRender","snapshot","encoderOptions","canvasToTexture","srcCanvas","dstTexture","wrapping","newTexture","setTextureFilter","glFilter","setFloat1","uniform1f","getUniformLocation","setFloat2","uniform2f","setFloat3","z","uniform3f","setFloat4","w","uniform4f","setFloat1v","arr","uniform1fv","setFloat2v","uniform2fv","setFloat3v","uniform3fv","setFloat4v","uniform4fv","setInt1","uniform1i","setInt2","uniform2i","setInt3","uniform3i","setInt4","uniform4i","setMatrix2","transpose","matrix","uniformMatrix2fv","setMatrix3","uniformMatrix3fv","setMatrix4","uniformMatrix4fv","getMaxTextures","getMaxTextureSize","destroy"]
}
