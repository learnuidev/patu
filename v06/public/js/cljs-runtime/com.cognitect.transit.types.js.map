{
"version":3,
"file":"com.cognitect.transit.types.js",
"lineCount":1022,
"mappings":"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",
"sources":["com/cognitect/transit/types.js"],
"sourcesContent":["// Copyright 2014 Cognitect. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\"com.cognitect.transit.types\");\ngoog.require(\"com.cognitect.transit.util\");\ngoog.require(\"com.cognitect.transit.eq\");\ngoog.require(\"goog.math.Long\");\n\ngoog.scope(function() {\n\n    var types = com.cognitect.transit.types,\n        util  = com.cognitect.transit.util,\n        eq    = com.cognitect.transit.eq,\n        Long  = goog.math.Long;\n\n    if(typeof Symbol != \"undefined\") {\n        types.ITERATOR = Symbol.iterator;\n    } else {\n        types.ITERATOR = \"@@iterator\";\n    }\n\n    /**\n     * @constructor\n     */\n    types.TaggedValue = function Transit$TaggedValue(tag, rep) {\n        this.tag = tag;\n        this.rep = rep;\n        this.hashCode = -1;\n    };\n\n    types.TaggedValue.prototype.toString = function() {\n        return \"[TaggedValue: \" + this.tag + \", \" + this.rep + \"]\";\n    };\n\n    types.TaggedValue.prototype.equiv = function(other) {\n        return eq.equals(this, other);\n    };\n    types.TaggedValue.prototype[\"equiv\"] = types.TaggedValue.prototype.equiv;\n\n    types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {\n        if(other instanceof types.TaggedValue) {\n            return (this.tag === other.tag) && eq.equals(this.rep, other.rep);\n        } else {\n            return false;\n        }\n    };\n\n    types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {\n        if(this.hashCode === -1) {\n            this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));\n        }\n        return this.hashCode;\n    };\n\n    types.taggedValue = function(tag, rep) {\n        return new types.TaggedValue(tag, rep);\n    };\n\n    types.isTaggedValue = function(x) {\n        return x instanceof types.TaggedValue;\n    };\n\n    types.nullValue = function() {\n        return null;\n    };\n\n    types.boolValue = function(s) {\n        return s === \"t\";\n    };\n\n    types.MAX_INT = Long.fromString(\"9007199254740991\");\n    types.MIN_INT = Long.fromString(\"-9007199254740991\");\n\n    types.intValue = function(s) {\n        if(typeof s === \"number\") {\n            return s;\n        } else if(s instanceof Long) {\n            return s;\n        } else {\n            var n = Long.fromString(s, 10);\n            if(n.greaterThan(types.MAX_INT) ||\n                n.lessThan(types.MIN_INT)) {\n                return n;\n            } else {\n                return n.toNumber();\n            }\n        }\n    };\n\n    Long.prototype.equiv = function(other) {\n        return eq.equals(this, other);\n    };\n    Long.prototype[\"equiv\"] = Long.prototype.equiv;\n\n    Long.prototype.com$cognitect$transit$equals = function(other) {\n        return (other instanceof Long) && this.equals(other);\n    };\n\n    Long.prototype.com$cognitect$transit$hashCode = function() {\n        return this.toInt();\n    };\n\n    types.isInteger = function(x) {\n        if(x instanceof Long) {\n            return true;\n        } else {\n            return (typeof x === \"number\") && !isNaN(x) && !(x === Infinity) && (parseFloat(x) === parseInt(x, 10));\n        }\n    };\n\n    types.floatValue = function(s) {\n        return parseFloat(s);\n    };\n\n    types.bigInteger = function(s) {\n        return types.taggedValue(\"n\", s);\n    };\n\n    types.isBigInteger = function(x) {\n        return (x instanceof types.TaggedValue) && (x.tag === \"n\");\n    };\n\n    types.bigDecimalValue = function(s) {\n        return types.taggedValue(\"f\", s);\n    };\n\n    types.isBigDecimal = function(x) {\n        return (x instanceof types.TaggedValue) && (x.tag === \"f\");\n    };\n\n    types.charValue = function(s) {\n        return s;\n    };\n\n    /**\n     * @constructor\n     */\n    types.Keyword = function Transit$Keyword(name) {\n        this._name = name;\n        this.hashCode = -1;\n    };\n\n    types.Keyword.prototype.toString = function() {\n        return \":\"+this._name;\n    };\n\n    types.Keyword.prototype[\"namespace\"] = function() {\n        var idx = this._name.indexOf(\"/\");\n        if(idx != -1) {\n            return this._name.substring(0, idx);\n        } else {\n            return null;\n        }\n    };\n\n    types.Keyword.prototype[\"name\"] = function() {\n        var idx = this._name.indexOf(\"/\");\n        if(idx != -1) {\n            return this._name.substring(idx+1, this._name.length);\n        } else {\n            return this._name;\n        }\n    };\n\n    types.Keyword.prototype.equiv = function(other) {\n        return eq.equals(this, other);\n    };\n    types.Keyword.prototype[\"equiv\"] = types.Keyword.prototype.equiv;\n\n    types.Keyword.prototype.com$cognitect$transit$equals = function(other) {\n        return (other instanceof types.Keyword) && this._name == other._name;\n    };\n\n    types.Keyword.prototype.com$cognitect$transit$hashCode = function() {\n        if(this.hashCode === -1) {\n            this.hashCode = eq.hashCode(this._name);\n        }\n        return this.hashCode;\n    };\n\n    types.keyword = function(s) {\n        return new types.Keyword(s);\n    };\n\n    types.isKeyword = function(x) {\n        return x instanceof types.Keyword;\n    };\n\n    /**\n     * @constructor\n     */\n    types.Symbol = function Transit$Symbol(name) {\n        this._name = name;\n        this.hashCode = -1;\n    };\n\n    types.Symbol.prototype[\"namespace\"] = function() {\n        var idx = this._name.indexOf(\"/\");\n        if(idx != -1) {\n            return this._name.substring(0, idx);\n        } else {\n            return null;\n        }\n    };\n\n    types.Symbol.prototype[\"name\"] = function() {\n        var idx = this._name.indexOf(\"/\");\n        if(idx != -1) {\n            return this._name.substring(idx+1, this._name.length);\n        } else {\n            return this._name;\n        }\n    };\n\n    types.Symbol.prototype.toString = function() {\n        return this._name;\n    };\n\n    types.Symbol.prototype.equiv = function(other) {\n        return eq.equals(this, other);\n    };\n    types.Symbol.prototype[\"equiv\"] = types.Symbol.prototype.equiv;\n\n    types.Symbol.prototype.com$cognitect$transit$equals = function(other) {\n        return (other instanceof types.Symbol) && this._name == other._name;\n    };\n\n    types.Symbol.prototype.com$cognitect$transit$hashCode = function() {\n        if(this.hashCode === -1) {\n            this.hashCode = eq.hashCode(this._name);\n        }\n        return this.hashCode;\n    };\n\n    types.symbol = function(s) {\n        return new types.Symbol(s);\n    };\n\n    types.isSymbol = function(x) {\n        return x instanceof types.Symbol;\n    };\n\n    types.hexFor = function(aLong, sidx, eidx) {\n        var ret   = \"\";\n\n        eidx  = eidx || (sidx+1);\n\n        for(var i=sidx, shift=(7-i)*8, mask=Long.fromInt(0xff).shiftLeft(shift); i < eidx; i++, shift-=8, mask=mask.shiftRightUnsigned(8)) {\n            var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);\n            if(s.length == 1) {\n                s = \"0\" + s;\n            }\n            ret += s;\n        }\n\n        return ret;\n    };\n\n    /**\n     * @constructor\n     */\n    types.UUID = function Transit$UUID(high, low) {\n        this.high = high;\n        this.low = low;\n        this.hashCode = -1;\n    };\n\n    types.UUID.prototype.getLeastSignificantBits = function() {\n        return this.low;\n    };\n\n    types.UUID.prototype.getMostSignificantBits = function() {\n        return this.high;\n    };\n\n    types.UUID.prototype.toString = function() {\n        var s    = \"\",\n            hi64 = this.high,\n            lo64 = this.low;\n\n        s += types.hexFor(hi64, 0, 4) + \"-\";\n        s += types.hexFor(hi64, 4, 6) + \"-\";\n        s += types.hexFor(hi64, 6, 8) + \"-\";\n        s += types.hexFor(lo64, 0, 2) + \"-\";\n        s += types.hexFor(lo64, 2, 8);\n\n        return s;\n    };\n\n    types.UUID.prototype.equiv = function(other) {\n        return eq.equals(this, other);\n    };\n    types.UUID.prototype[\"equiv\"] = types.UUID.prototype.equiv;\n\n    types.UUID.prototype.com$cognitect$transit$equals = function(other) {\n        return (other instanceof types.UUID) && this.high.equals(other.high) && this.low.equals(other.low);\n    };\n\n    types.UUID.prototype.com$cognitect$transit$hashCode = function() {\n        if(this.hashCode === -1) {\n            // TODO: follow http://hg.openjdk.java.net/jdk6/jdk6/jdk/file/2d585507a41b/src/share/classes/java/util/UUID.java\n            this.hashCode = eq.hashCode(this.toString());\n        }\n        return this.hashCode;\n    };\n\n    types.UUIDfromString = function uuidFromString(s) {\n        s = s.replace(/-/g, \"\");\n\n        var hi64 = null,\n            lo64 = null,\n            hi32 = 0,\n            lo32 = 0,\n            off  = 24,\n            i    = 0;\n\n        for(hi32=0, i=0, off= 24; i < 8; i+=2, off-=8) {\n            hi32 |= (parseInt(s.substring(i,i+2),16) << off);\n        }\n\n        for(lo32=0, i=8, off=24; i < 16; i+=2, off-=8) {\n            lo32 |= (parseInt(s.substring(i,i+2),16) << off);\n        }\n\n        hi64 = Long.fromBits(lo32, hi32);\n\n        for(hi32=0, i=16, off=24; i < 24; i+=2, off-=8) {\n            hi32 |= (parseInt(s.substring(i,i+2),16) << off);\n        }\n\n        for(lo32=0, i=24, off=24; i < 32; i+=2, off-=8) {\n            lo32 |= (parseInt(s.substring(i,i+2),16) << off);\n        }\n\n        lo64 = Long.fromBits(lo32, hi32);\n\n        return new types.UUID(hi64, lo64);\n    };\n\n    types.uuid = function(s) {\n        return types.UUIDfromString(s);\n    };\n\n    types.isUUID = function(x) {\n        return x instanceof types.UUID;\n    };\n\n    types.date = function(s) {\n        s = typeof s === \"number\" ? s : parseInt(s, 10);\n        return new Date(s);\n    };\n\n    types.verboseDate = function(s) {\n        return new Date(s);\n    };\n\n    Date.prototype.com$cognitect$transit$equals = function(other) {\n        if(other instanceof Date) {\n            return this.valueOf() === other.valueOf();\n        } else {\n            return false;\n        }\n    };\n\n    Date.prototype.com$cognitect$transit$hashCode = function() {\n        return this.valueOf();\n    };\n\n    /**\n     * @param {string} str\n     * @param {*=} decoder\n     * @returns {com.cognitect.transit.types.TaggedValue|Uint8Array}\n     */\n    types.binary = function(str, decoder) {\n        if((!decoder || (decoder.preferBuffers !== false)) && (typeof goog.global.Buffer != \"undefined\")) {\n            return new goog.global.Buffer(str, \"base64\");\n        } else if(typeof Uint8Array != \"undefined\") {\n            return util.Base64ToUint8(str);\n        } else {\n            return types.taggedValue(\"b\", str);\n        }\n    };\n\n    types.isBinary = function(x) {\n        if((typeof goog.global.Buffer != \"undefined\") && (x instanceof goog.global.Buffer)) {\n            return true;\n        } else if((typeof Uint8Array != \"undefined\") && (x instanceof Uint8Array)) {\n            return true;\n        } else {\n            return (x instanceof types.TaggedValue) && (x.tag === \"b\");\n        }\n    };\n\n    types.uri = function(s) {\n        return types.taggedValue(\"r\", s);\n    };\n\n    types.isURI = function(x) {\n        return (x instanceof types.TaggedValue) && (x.tag === \"r\");\n    };\n\n    /**\n     * @const\n     * @type {number}\n     */\n    types.KEYS = 0;\n\n    /**\n     * @const\n     * @type {number}\n     */\n    types.VALUES = 1;\n\n    /**\n     * @const\n     * @type {number}\n     */\n    types.ENTRIES = 2;\n\n    /**\n     * @constructor\n     */\n    types.TransitArrayMapIterator = function Transit$ArrayMapIterator(entries, type) {\n        this.entries = entries;\n        this.type = type || types.KEYS;\n        this.idx = 0;\n    };\n\n    types.TransitArrayMapIterator.prototype.next = function() {\n        if(this.idx < this.entries.length) {\n\n            var value = null;\n\n            if(this.type === types.KEYS) {\n                value = this.entries[this.idx];\n            } else if(this.type === types.VALUES) {\n                value = this.entries[this.idx+1];\n            } else {\n                value = [this.entries[this.idx], this.entries[this.idx+1]];\n            }\n\n            var ret = {\n                \"value\": value,\n                \"done\": false\n            };\n\n            this.idx+=2;\n\n            return ret;\n        } else {\n            return {\"value\": null, \"done\": true}\n        }\n    };\n    types.TransitArrayMapIterator.prototype[\"next\"] = types.TransitArrayMapIterator.prototype.next;\n\n    types.TransitArrayMapIterator.prototype[types.ITERATOR] = function() {\n        return this;\n    };\n\n    /**\n     * @constructor\n     */\n    types.TransitMapIterator = function Transit$MapIterator(map, type) {\n        this.map = map;\n        this.type = type || types.KEYS;\n        this.keys = this.map.getKeys();\n        this.idx = 0;\n        /** @type {?Object} */\n        this.bucket = null;\n        this.bucketIdx = 0;\n    };\n\n    types.TransitMapIterator.prototype.next = function() {\n        if(this.idx < this.map.size) {\n            if((this.bucket == null) || !(this.bucketIdx < this.bucket.length)) {\n                this.bucket = this.map.map[this.keys[this.idx]];\n                this.bucketIdx = 0;\n            }\n\n            var value = null;\n            if(this.type === types.KEYS) {\n                value = this.bucket[this.bucketIdx];\n            } else if(this.type === types.VALUES) {\n                value = this.bucket[this.bucketIdx+1];\n            } else {\n                value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx+1]];\n            }\n\n            var ret = {\n                \"value\": value,\n                \"done\": false\n            };\n\n            this.idx++;\n            this.bucketIdx+=2;\n\n            return ret;\n        } else {\n            return {\"value\": null, \"done\": true};\n        }\n    };\n    types.TransitMapIterator.prototype[\"next\"] = types.TransitMapIterator.prototype.next;\n\n    types.TransitMapIterator.prototype[types.ITERATOR] = function() {\n        return this;\n    };\n\n    types.mapEquals = function(me, you) {\n        if ((me instanceof types.TransitMap) && types.isMap(you)) {\n            if(me.size !== you.size) return false;\n            for (var code in me.map) {\n                var bucket = me.map[code];\n                for (var j = 0; j < bucket.length; j+=2) {\n                    if (!eq.equals(bucket[j+1], you.get(bucket[j]))) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        } else if((me instanceof types.TransitArrayMap) && types.isMap(you)) {\n            if(me.size !== you.size) return false;\n            var entries = me._entries;\n            for (var j = 0; j < entries.length; j+=2) {\n                if (!eq.equals(entries[j+1], you.get(entries[j]))) {\n                    return false;\n                }\n            }\n            return true;\n        } else if(you != null && (typeof you === \"object\")) {\n            var ks    = util.objectKeys(you),\n                kslen = ks.length;\n            if(me.size === kslen) {\n                for(var i = 0 ; i < kslen; i++) {\n                    var k = ks[i];\n                    if(!me.has(k) || !eq.equals(you[k], me.get(k))) {\n                        return false;\n                    }\n                }\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    };\n\n    /**\n     * @const\n     * @type {number}\n     */\n    types.SMALL_ARRAY_MAP_THRESHOLD = 8;\n\n    /**\n     * @const\n     * @type {number}\n     */\n    types.ARRAY_MAP_THRESHOLD = 32;\n\n    /**\n     * @const\n     * @type {number}\n     */\n    types.ARRAY_MAP_ACCESS_THRESHOLD = 32;\n\n    types.print = function(x) {\n        if(x == null) {\n            return \"null\";\n        } if(goog.isArray(x)) {\n            return \"[\" + x.toString() + \"]\";\n        } else if(goog.isString(x)) {\n            return \"\\\"\" + x + \"\\\"\";\n        } else {\n            return x.toString();\n        }\n    };\n\n    types.printMap = function(map) {\n        var idx = 0,\n            str = \"TransitMap {\";\n        map.forEach(function(v, k) {\n            str += types.print(k) + \" => \" + types.print(v);\n            if(idx < map.size-1) {\n                str += \", \";\n            }\n            idx++;\n        });\n        return str + \"}\";\n    };\n\n    types.printSet = function(set) {\n        var idx  = 0,\n            str  = \"TransitSet {\";\n        set.forEach(function(v) {\n            str += types.print(v);\n            if(idx < set.size-1) {\n                str += \", \";\n            }\n            idx++;\n        });\n        return str + \"}\";\n    };\n\n    /**\n     * @constructor\n     * @param {Array} entries\n     */\n    types.TransitArrayMap = function Transit$ArrayMap(entries) {\n        this._entries = entries;\n        this.backingMap = null;\n        this.hashCode = -1;\n        this.size = entries.length / 2;\n        this.accesses = 0;\n    };\n\n    types.TransitArrayMap.prototype.toString = function() {\n        return types.printMap(this);\n    };\n\n    types.TransitArrayMap.prototype[\"inspect\"] = function() {\n        return this.toString();\n    };\n\n    types.TransitArrayMap.prototype.convert = function() {\n        if(this.backingMap) {\n            throw Error(\"Invalid operation, already converted\");\n        }\n        if(this.size < types.SMALL_ARRAY_MAP_THRESHOLD) return false;\n        this.accesses++;\n        if(this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {\n            this.backingMap = types.map(this._entries, false, true);\n            this._entries = [];\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    types.TransitArrayMap.prototype.clear = function() {\n        this.hashCode = -1;\n        if(this.backingMap) {\n            this.backingMap.clear();\n            this.size = 0;\n        } else {\n            this._entries = [];\n            this.size = 0;\n        }\n    };\n    types.TransitArrayMap.prototype[\"clear\"] = types.TransitArrayMap.prototype.clear;\n\n    types.TransitArrayMap.prototype.keys = function() {\n        if(this.backingMap) {\n            return this.backingMap.keys();\n        } else {\n            return new types.TransitArrayMapIterator(this._entries, types.KEYS);\n        }\n    };\n    types.TransitArrayMap.prototype[\"keys\"] = types.TransitArrayMap.prototype.keys;\n\n    types.TransitArrayMap.prototype.keySet = function() {\n        if(this.backingMap) {\n            return this.backingMap.keySet();\n        } else {\n            var ret = [];\n            for(var i = 0, j = 0; j < this._entries.length; i++, j+=2) {\n                ret[i] = this._entries[j];\n            }\n            return ret;\n        }\n    };\n    types.TransitArrayMap.prototype[\"keySet\"] = types.TransitArrayMap.prototype.keySet;\n\n    types.TransitArrayMap.prototype.entries = function() {\n        if(this.backingMap) {\n            return this.backingMap.entries();\n        } else {\n            return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);\n        }\n    };\n    types.TransitArrayMap.prototype[\"entries\"] = types.TransitArrayMap.prototype.entries;\n\n    types.TransitArrayMap.prototype.values = function() {\n        if(this.backingMap) {\n            return this.backingMap.values();\n        } else {\n            return new types.TransitArrayMapIterator(this._entries, types.VALUES);\n        }\n    };\n    types.TransitArrayMap.prototype[\"values\"] = types.TransitArrayMap.prototype.values;\n\n    /**\n     * @param {function(*,*)} f\n     */\n    types.TransitArrayMap.prototype.forEach = function(f) {\n        if(this.backingMap) {\n            this.backingMap.forEach(f);\n        } else {\n            for(var i = 0; i < this._entries.length; i+=2) {\n                f(this._entries[i+1], this._entries[i]);\n            }\n        }\n    };\n    types.TransitArrayMap.prototype[\"forEach\"] = types.TransitArrayMap.prototype.forEach;\n\n    /**\n     * @param {*} k\n     * @param {*=} notFound\n     * @returns {*}\n     */\n    types.TransitArrayMap.prototype.get = function(k, notFound) {\n        if(this.backingMap) {\n            return this.backingMap.get(k);\n        } else {\n            if(this.convert()) {\n                return this.get(k);\n            } else {\n                for(var i = 0; i < this._entries.length; i+=2) {\n                    if(eq.equals(this._entries[i], k)) {\n                        return this._entries[i+1];\n                    }\n                }\n                return notFound;\n            }\n        }\n    };\n    types.TransitArrayMap.prototype[\"get\"] = types.TransitArrayMap.prototype.get;\n\n    types.TransitArrayMap.prototype.has = function(k) {\n        if(this.backingMap) {\n            return this.backingMap.has(k);\n        } else {\n            if(this.convert()) {\n                return this.has(k);\n            } else {\n                for(var i = 0; i < this._entries.length; i+=2) {\n                    if(eq.equals(this._entries[i], k)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        }\n    };\n    types.TransitArrayMap.prototype[\"has\"] = types.TransitArrayMap.prototype.has;\n\n    types.TransitArrayMap.prototype.set = function(k, v) {\n        this.hashCode = -1;\n        if(this.backingMap) {\n            this.backingMap.set(k, v);\n            this.size = this.backingMap.size;\n        } else {\n            for(var i = 0; i < this._entries.length; i+=2) {\n                if(eq.equals(this._entries[i], k)) {\n                    this._entries[i+1] = v;\n                    return;\n                }\n            }\n\n            this._entries.push(k);\n            this._entries.push(v);\n            this.size++;\n\n            if(this.size > types.ARRAY_MAP_THRESHOLD) {\n                this.backingMap = types.map(this._entries, false, true);\n                this._entries = null;\n            }\n        }\n    };\n    types.TransitArrayMap.prototype[\"set\"] = types.TransitArrayMap.prototype.set;\n\n    types.TransitArrayMap.prototype[\"delete\"] = function(k) {\n        this.hashCode = -1;\n        if(this.backingMap) {\n            var ret = this.backingMap.delete(k);\n            this.size = this.backingMap.size;\n            return ret;\n        } else {\n            for(var i = 0; i < this._entries.length; i+=2) {\n                if(eq.equals(this._entries[i], k)) {\n                    var ret = this._entries[i+1];\n                    this._entries.splice(i, 2);\n                    this.size--;\n                    return ret;\n                }\n            }\n        }\n    };\n\n    types.TransitArrayMap.prototype.clone = function() {\n        var clone = types.map();\n\n        this.forEach(function(v, k) {\n            clone.set(k, v);\n        });\n\n        return clone;\n    };\n    types.TransitArrayMap.prototype[\"clone\"] = types.TransitArrayMap.prototype.clone;\n\n    types.TransitArrayMap.prototype[types.ITERATOR] = function() {\n        return this.entries();\n    };\n\n    types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {\n        if(this.backingMap) {\n            return this.backingMap.com$cognitect$transit$hashCode();\n        } else {\n            if(this.hashCode === -1) {\n                this.hashCode = eq.hashMapLike(this);\n            }\n            return this.hashCode;\n        }\n    };\n\n    types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {\n        if(this.backingMap) {\n            return types.mapEquals(this.backingMap, other);\n        } else {\n            return types.mapEquals(this, other);\n        }\n    };\n\n    /**\n     * TransitMap\n     *   A hash map. Support arbitrarily complex keys. Lookup is based on the value of the\n     *   the key not identity. Otherwise the API follows the ES6 map interface:\n     *   http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n     * @constructor\n     * @param {null|Array=} keys\n     * @param {null|Object=} map\n     * @param {null|number=} size\n     */\n    types.TransitMap = function Transit$Map(keys, map, size) {\n        this.map = map || {};\n        this._keys = keys || [];\n        this.size = size || 0;\n        this.hashCode = -1;\n    };\n\n    types.TransitMap.prototype.toString = function() {\n        return types.printMap(this);\n    };\n\n    types.TransitMap.prototype[\"inspect\"] = function() {\n        return this.toString();\n    };\n\n    types.TransitMap.prototype.clear = function() {\n        this.hashCode = -1;\n        this.map = {};\n        this._keys = [];\n        this.size = 0;\n    };\n    types.TransitMap.prototype[\"clear\"] = types.TransitMap.prototype.clear;\n\n    types.TransitMap.prototype.getKeys = function() {\n        if(this._keys != null) {\n            return this._keys;\n        } else {\n            return util.objectKeys(this.map);\n        }\n    };\n\n    types.TransitMap.prototype[\"delete\"] = function(k) {\n        this.hashCode = -1;\n        this._keys = null;\n        var code   = eq.hashCode(k),\n            bucket = this.map[code];\n\n        for(var i = 0; i < bucket.length; i+=2) {\n            if(eq.equals(k, bucket[i])) {\n                var ret = bucket[i+1];\n                bucket.splice(i,2);\n                if(bucket.length === 0) {\n                    delete this.map[code];\n                }\n                this.size--;\n                return ret;\n            }\n        }\n    };\n\n    types.TransitMap.prototype.entries = function() {\n        return new types.TransitMapIterator(this, types.ENTRIES);\n    };\n    types.TransitMap.prototype[\"entries\"] = types.TransitMap.prototype.entries;\n\n    types.TransitMap.prototype.forEach = function(callback) {\n        var ks = this.getKeys();\n        for(var i = 0; i < ks.length; i++) {\n            var bucket = this.map[ks[i]];\n            for(var j = 0; j < bucket.length; j+=2) {\n                callback(bucket[j+1], bucket[j], this);\n            }\n        }\n    };\n    types.TransitMap.prototype[\"forEach\"] = types.TransitMap.prototype.forEach;\n\n    types.TransitMap.prototype.get = function(k, notFound) {\n        var code   = eq.hashCode(k),\n            bucket = this.map[code];\n        if(bucket != null) {\n            for(var i = 0; i < bucket.length; i+=2) {\n                if(eq.equals(k,bucket[i])) {\n                    return bucket[i+1];\n                }\n            }\n        } else {\n            return notFound;\n        }\n    };\n    types.TransitMap.prototype[\"get\"] = types.TransitMap.prototype.get;\n\n    types.TransitMap.prototype.has = function(k) {\n        var code   = eq.hashCode(k),\n            bucket = this.map[code];\n        if(bucket != null) {\n            for(var i = 0; i < bucket.length; i+=2) {\n                if(eq.equals(k, bucket[i])) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return false;\n        }\n    };\n    types.TransitMap.prototype[\"has\"] = types.TransitMap.prototype.has;\n\n    types.TransitMap.prototype.keys = function() {\n        return new types.TransitMapIterator(this, types.KEYS);\n    };\n    types.TransitMap.prototype[\"keys\"] = types.TransitMap.prototype.keys;\n\n    types.TransitMap.prototype.keySet = function() {\n        var keys = this.getKeys(),\n            ret  = [];\n\n        for(var i = 0; i < keys.length; i++) {\n            var bucket = this.map[keys[i]];\n            for(var j = 0; j < bucket.length; j+=2) {\n                ret.push(bucket[j]);\n            }\n        }\n\n        return ret;\n    };\n    types.TransitMap.prototype[\"keySet\"] = types.TransitMap.prototype.keySet;\n\n    types.TransitMap.prototype.set = function(k, v) {\n        this.hashCode = -1;\n        var code = eq.hashCode(k),\n            bucket = this.map[code];\n        if(bucket == null) {\n            if(this._keys) {\n                this._keys.push(code);\n            }\n            this.map[code] = [k, v];\n            this.size++;\n        } else {\n            var newEntry = true;\n            for(var i = 0; i < bucket.length; i+=2) {\n                if(eq.equals(v, bucket[i])) {\n                    newEntry = false;\n                    bucket[i] = v;\n                    break;\n                }\n            }\n            if(newEntry) {\n                bucket.push(k);\n                bucket.push(v);\n                this.size++;\n            }\n        }\n    };\n    types.TransitMap.prototype[\"set\"] = types.TransitMap.prototype.set;\n\n    types.TransitMap.prototype.values = function() {\n        return new types.TransitMapIterator(this, types.VALUES);\n    };\n    types.TransitMap.prototype[\"values\"] = types.TransitMap.prototype.values;\n\n    types.TransitMap.prototype.clone = function() {\n        var clone = types.map();\n\n        this.forEach(function(v, k) {\n           clone.set(k, v);\n        });\n\n        return clone;\n    };\n    types.TransitMap.prototype[\"clone\"] = types.TransitMap.prototype.clone;\n\n    types.TransitMap.prototype[types.ITERATOR] = function() {\n        return this.entries();\n    };\n\n    types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {\n        if(this.hashCode === -1) {\n            this.hashCode = eq.hashMapLike(this);\n        }\n        return this.hashCode;\n    };\n\n    types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {\n        return types.mapEquals(this, other);\n    };\n\n    /**\n     * @param {Array=} arr\n     * @param {boolean=} checkDups\n     * @param {boolean=} hashMap\n     * @returns {com.cognitect.transit.MapLike}\n     */\n    types.map = function(arr, checkDups, hashMap) {\n        arr = arr || [];\n        checkDups = (checkDups === false) ? checkDups : true;\n        hashMap = (hashMap === true) ? hashMap : false;\n\n        if(!hashMap && (arr.length <= (types.ARRAY_MAP_THRESHOLD*2))) {\n            if(checkDups) {\n                var t = arr;\n                arr = [];\n                for(var i = 0; i < t.length; i+=2) {\n                    var seen = false;\n                    for(var j = 0; j < arr.length; j+=2) {\n                        if(eq.equals(arr[j], t[i])) {\n                            arr[j+1] = t[i+1];\n                            seen = true;\n                            break;\n                        }\n                    }\n                    if(!seen) {\n                        arr.push(t[i]);\n                        arr.push(t[i+1]);\n                    }\n                }\n            }\n            return new types.TransitArrayMap(arr);\n        } else {\n            var map  = {},\n                keys = [],\n                size = 0;\n            for(var i = 0; i < arr.length; i+=2) {\n                var code = eq.hashCode(arr[i]),\n                    bucket = map[code];\n                if(bucket == null) {\n                    keys.push(code);\n                    map[code] = [arr[i], arr[i+1]];\n                    size++;\n                } else {\n                    var newEntry = true;\n                    for(var j = 0; j < bucket.length; j+= 2) {\n                        if(eq.equals(bucket[j], arr[i])) {\n                            bucket[j+1] = arr[i+1];\n                            newEntry = false;\n                            break;\n                        }\n                    }\n                    if(newEntry) {\n                        bucket.push(arr[i]);\n                        bucket.push(arr[i+1]);\n                        size++;\n                    }\n                }\n            }\n            return new types.TransitMap(keys, map, size);\n        }\n    };\n\n    types.isArrayMap = function(x) {\n        return (x instanceof types.TransitArrayMap);\n    };\n\n    types.isMap = function(x) {\n        return ((x instanceof types.TransitArrayMap) ||\n                (x instanceof types.TransitMap));\n    };\n\n    /**\n     * @constructor\n     * @param {com.cognitect.transit.MapLike} map\n     */\n    types.TransitSet = function Transit$Set(map) {\n        this.map = map;\n        this.size = map.size;\n    };\n\n    types.TransitSet.prototype.toString = function() {\n        return types.printSet(this);\n    };\n\n    types.TransitSet.prototype[\"inspect\"] = function() {\n        return this.toString();\n    };\n\n    types.TransitSet.prototype.add = function(value) {\n        this.map.set(value, value);\n        this.size = this.map.size;\n    };\n    types.TransitSet.prototype[\"add\"] = types.TransitSet.prototype.add;\n\n    types.TransitSet.prototype.clear = function() {\n        this.map = new types.TransitMap();\n        this.size = 0;\n    };\n    types.TransitSet.prototype[\"clear\"] = types.TransitSet.prototype.clear;\n\n    types.TransitSet.prototype[\"delete\"] = function(value) {\n        var ret = this.map.delete(value);\n        this.size = this.map.size;\n        return ret;\n    };\n\n    types.TransitSet.prototype.entries = function() {\n        return this.map.entries();\n    };\n    types.TransitSet.prototype[\"entries\"] = types.TransitSet.prototype.entries;\n\n    /**\n     * @param {function(*,*)} iterator\n     * @param {Object=} thisArg\n     */\n    types.TransitSet.prototype.forEach = function(iterator, thisArg) {\n        var self = this;\n        this.map.forEach(function(v, k, m) {\n            iterator(k, self);\n        });\n    };\n    types.TransitSet.prototype[\"forEach\"] = types.TransitSet.prototype.forEach;\n\n    types.TransitSet.prototype.has = function(value) {\n        return this.map.has(value);\n    };\n    types.TransitSet.prototype[\"has\"] = types.TransitSet.prototype.has;\n\n    types.TransitSet.prototype.keys = function() {\n        return this.map.keys();\n    };\n    types.TransitSet.prototype[\"keys\"] = types.TransitSet.prototype.keys;\n\n    types.TransitSet.prototype.keySet = function() {\n        return this.map.keySet();\n    };\n    types.TransitSet.prototype[\"keySet\"] = types.TransitSet.prototype.keySet;\n\n    types.TransitSet.prototype.values = function() {\n        return this.map.values();\n    };\n    types.TransitSet.prototype[\"values\"] = types.TransitSet.prototype.values;\n\n    types.TransitSet.prototype.clone = function() {\n        var clone = types.set();\n\n        this.forEach(function(k) {\n            clone.add(k);\n        });\n\n        return clone;\n    };\n    types.TransitSet.prototype[\"clone\"] = types.TransitSet.prototype.clone;\n\n    types.TransitSet.prototype[types.ITERATOR] = function() {\n        return this.values();\n    };\n\n    types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {\n        if(other instanceof types.TransitSet) {\n            if(this.size === other.size) {\n                return eq.equals(this.map, other.map);\n            }\n        } else {\n            return false;\n        }\n    };\n\n    types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {\n        return eq.hashCode(this.map);\n    };\n\n    /**\n     * @param {Array=} arr\n     * @returns {com.cognitect.transit.SetLike}\n     */\n    types.set = function(arr) {\n        arr = arr || [];\n\n        var map  = {},\n            keys = [],\n            size = 0;\n\n        for(var i = 0; i < arr.length; i++) {\n            var code = eq.hashCode(arr[i]),\n                vals = map[code];\n            if(vals == null) {\n                keys.push(code);\n                map[code] = [arr[i], arr[i]];\n                size++\n            } else {\n                var newEntry = true;\n                for(var j = 0; j < vals.length; j+= 2) {\n                    if(eq.equals(vals[j], arr[i])) {\n                        newEntry = false;\n                        break;\n                    }\n                }\n                if(newEntry) {\n                    vals.push(arr[i]);\n                    vals.push(arr[i]);\n                    size++;\n                }\n            }\n        }\n\n        return new types.TransitSet(new types.TransitMap(keys, map, size));\n    };\n\n    types.isSet = function(x) {\n        return x instanceof types.TransitSet;\n    };\n\n    types.quoted = function(obj) {\n        return types.taggedValue(\"'\", obj);\n    };\n\n    types.isQuoted = function(x) {\n        return (x instanceof types.TaggedValue) && (x.tag === \"'\");\n    };\n\n    types.list = function(xs) {\n        return types.taggedValue(\"list\", xs);\n    };\n\n    types.isList = function(x) {\n        return (x instanceof types.TaggedValue) && (x.tag === \"list\");\n    };\n\n    types.link = function(rep) {\n        return types.taggedValue(\"link\", rep);\n    };\n\n    types.isLink = function(x) {\n        return (x instanceof types.TaggedValue) && (x.tag === \"link\")\n    };\n\n    types.specialDouble = function(v) {\n        switch(v) {\n            case \"-INF\":\n                return -Infinity;\n            case \"INF\":\n                return Infinity;\n            case \"NaN\":\n                return NaN;\n            default:\n                throw new Error(\"Invalid special double value \" + v);\n                break;\n        }\n    };\n\n});\n\n"],
"names":["goog","provide","require","scope","types","com","cognitect","transit","util","eq","Long","math","Symbol","ITERATOR","iterator","TaggedValue","types.TaggedValue","Transit$TaggedValue","tag","rep","hashCode","prototype","toString","types.TaggedValue.prototype.toString","equiv","types.TaggedValue.prototype.equiv","other","equals","com$cognitect$transit$equals","types.TaggedValue.prototype.com$cognitect$transit$equals","com$cognitect$transit$hashCode","types.TaggedValue.prototype.com$cognitect$transit$hashCode","hashCombine","taggedValue","types.taggedValue","isTaggedValue","types.isTaggedValue","x","nullValue","types.nullValue","boolValue","types.boolValue","s","MAX_INT","fromString","MIN_INT","intValue","types.intValue","n","greaterThan","lessThan","toNumber","Long.prototype.equiv","Long.prototype.com$cognitect$transit$equals","Long.prototype.com$cognitect$transit$hashCode","toInt","isInteger","types.isInteger","isNaN","Infinity","parseFloat","parseInt","floatValue","types.floatValue","bigInteger","types.bigInteger","isBigInteger","types.isBigInteger","bigDecimalValue","types.bigDecimalValue","isBigDecimal","types.isBigDecimal","charValue","types.charValue","Keyword","types.Keyword","Transit$Keyword","name","_name","types.Keyword.prototype.toString","idx","indexOf","substring","length","types.Keyword.prototype.equiv","types.Keyword.prototype.com$cognitect$transit$equals","types.Keyword.prototype.com$cognitect$transit$hashCode","keyword","types.keyword","isKeyword","types.isKeyword","types.Symbol","Transit$Symbol","types.Symbol.prototype.toString","types.Symbol.prototype.equiv","types.Symbol.prototype.com$cognitect$transit$equals","types.Symbol.prototype.com$cognitect$transit$hashCode","symbol","types.symbol","isSymbol","types.isSymbol","hexFor","types.hexFor","aLong","sidx","eidx","ret","i","shift","mask","fromInt","shiftLeft","shiftRightUnsigned","and","UUID","types.UUID","Transit$UUID","high","low","getLeastSignificantBits","types.UUID.prototype.getLeastSignificantBits","getMostSignificantBits","types.UUID.prototype.getMostSignificantBits","types.UUID.prototype.toString","hi64","lo64","types.UUID.prototype.equiv","types.UUID.prototype.com$cognitect$transit$equals","types.UUID.prototype.com$cognitect$transit$hashCode","UUIDfromString","types.UUIDfromString","uuidFromString","replace","hi32","lo32","off","fromBits","uuid","types.uuid","isUUID","types.isUUID","date","types.date","Date","verboseDate","types.verboseDate","Date.prototype.com$cognitect$transit$equals","valueOf","Date.prototype.com$cognitect$transit$hashCode","binary","types.binary","str","decoder","preferBuffers","global","Buffer","Uint8Array","Base64ToUint8","isBinary","types.isBinary","uri","types.uri","isURI","types.isURI","KEYS","VALUES","ENTRIES","TransitArrayMapIterator","types.TransitArrayMapIterator","Transit$ArrayMapIterator","entries","type","next","types.TransitArrayMapIterator.prototype.next","value","TransitMapIterator","types.TransitMapIterator","Transit$MapIterator","map","keys","getKeys","bucket","bucketIdx","types.TransitMapIterator.prototype.next","size","mapEquals","types.mapEquals","me","you","TransitMap","isMap","code","j","get","TransitArrayMap","_entries","ks","objectKeys","kslen","k","has","SMALL_ARRAY_MAP_THRESHOLD","ARRAY_MAP_THRESHOLD","ARRAY_MAP_ACCESS_THRESHOLD","print","types.print","isArray","isString","printMap","types.printMap","forEach","v","printSet","types.printSet","set","types.TransitArrayMap","Transit$ArrayMap","backingMap","accesses","types.TransitArrayMap.prototype.toString","convert","types.TransitArrayMap.prototype.convert","Error","clear","types.TransitArrayMap.prototype.clear","types.TransitArrayMap.prototype.keys","keySet","types.TransitArrayMap.prototype.keySet","types.TransitArrayMap.prototype.entries","values","types.TransitArrayMap.prototype.values","types.TransitArrayMap.prototype.forEach","f","types.TransitArrayMap.prototype.get","notFound","types.TransitArrayMap.prototype.has","types.TransitArrayMap.prototype.set","push","delete","splice","clone","types.TransitArrayMap.prototype.clone","types.TransitArrayMap.prototype.com$cognitect$transit$hashCode","hashMapLike","types.TransitArrayMap.prototype.com$cognitect$transit$equals","types.TransitMap","Transit$Map","_keys","types.TransitMap.prototype.toString","types.TransitMap.prototype.clear","types.TransitMap.prototype.getKeys","types.TransitMap.prototype.entries","types.TransitMap.prototype.forEach","callback","types.TransitMap.prototype.get","types.TransitMap.prototype.has","types.TransitMap.prototype.keys","types.TransitMap.prototype.keySet","types.TransitMap.prototype.set","newEntry","types.TransitMap.prototype.values","types.TransitMap.prototype.clone","types.TransitMap.prototype.com$cognitect$transit$hashCode","types.TransitMap.prototype.com$cognitect$transit$equals","types.map","arr","checkDups","hashMap","t","seen","isArrayMap","types.isArrayMap","types.isMap","TransitSet","types.TransitSet","Transit$Set","types.TransitSet.prototype.toString","add","types.TransitSet.prototype.add","types.TransitSet.prototype.clear","types.TransitSet.prototype.entries","types.TransitSet.prototype.forEach","thisArg","self","m","types.TransitSet.prototype.has","types.TransitSet.prototype.keys","types.TransitSet.prototype.keySet","types.TransitSet.prototype.values","types.TransitSet.prototype.clone","types.TransitSet.prototype.com$cognitect$transit$equals","types.TransitSet.prototype.com$cognitect$transit$hashCode","types.set","vals","isSet","types.isSet","quoted","types.quoted","obj","isQuoted","types.isQuoted","list","types.list","xs","isList","types.isList","link","types.link","isLink","types.isLink","specialDouble","types.specialDouble","NaN"]
}
