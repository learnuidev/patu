{"version":3,"sources":["app/db.cljs"],"mappings":";;;;;;AAcA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAKL,AAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAK,AAACC,AAAcL;;AAE7B,AAAA,AAAMM,AAAWC;AAAjB,AACE,AAACC,AAAiBD,AAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAACE;;AACxB,AAACD,AAAiBD,AAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAACE;;AACxB,AAACD,AAAiBD,AAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACG;;AACxB,AAACF,AAAiBD,AAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACG","names":["app.db/schema","js/app","js/app.db","js/app.db.conn","app.db/conn","datascript.core.create_conn","app.db/populate!","conn","app.util/new-entity!","app.users/new-user","app.bugs/new-bug"],"sourcesContent":["(ns app.db\n  (:require [datascript.core :as d]\n            [app.bugs :as b]\n            [app.users :as u]\n            [app.util :as util]))\n\n;; Steps\n;; 1 - Require datascript.core ns\n;; 2 - Define schema\n;; 3 - create connection\n;; 4 - transact data\n;; 5 - query\n\n\n(def schema {:bug/id {:db/unique :db.unique/identity}\n             :bug/author {:db/valueType :db.type/ref}\n             :user/email {:db/unique :db.unique/identity}\n             :user/id {:db/unique :db.unique/identity}})\n\n(defonce conn (d/create-conn schema))\n\n(defn populate! [conn]\n  (util/new-entity! conn (u/new-user {:name \"Jane\" :email \"jane@gmail.com\"}))\n  (util/new-entity! conn (u/new-user {:name \"Jon\" :email \"jon@gmail.com\"}))\n  (util/new-entity! conn (b/new-bug  {:description \"Fix Server\" :author [:user/email \"jon@gmail.com\"]}))\n  (util/new-entity! conn (b/new-bug  {:description \"Fix UI\" :author [:user/email \"jane@gmail.com\"]})))\n"]}