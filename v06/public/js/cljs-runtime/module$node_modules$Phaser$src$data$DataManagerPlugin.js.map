{
"version":3,
"file":"module$node_modules$Phaser$src$data$DataManagerPlugin.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9GC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,YAAcJ,OAAA,CAAQ,iDAAR,CACdK,QAAAA,CAAcL,OAAA,CAAQ,oDAAR,CAgBdM,OAAAA,CAAoB,IAAIH,MAAJ,CAAU,CAE9BI,QAASH,WAFqB,CAI9BI,WAEAF,QAA2B,CAACG,KAAD,CAC3B,CACIL,WAAAM,KAAA,CAAiB,IAAjB,CAAuBD,KAAvB,CAA8BA,KAAAE,IAAAC,OAA9B,CASA,KAAAH,MAAA,CAAaA,KASb,KAAAI,QAAA,CAAeJ,KAAAE,IAEfF,MAAAE,IAAAC,OAAAE,KAAA,CAAsB,MAAtB,CAA8B,IAAAC,KAA9B;AAAyC,IAAzC,CACAN,MAAAE,IAAAC,OAAAI,GAAA,CAAoB,OAApB,CAA6B,IAAAC,MAA7B,CAAyC,IAAzC,CAtBJ,CAP8B,CAwC9BF,KAAMA,QAAS,EACf,CACI,IAAAH,OAAA,CAAc,IAAAC,QAAAD,OAEd,KAAAA,OAAAE,KAAA,CAAiB,SAAjB,CAA4B,IAAAI,QAA5B,CAA0C,IAA1C,CAHJ,CAzC8B,CAwD9BD,MAAOA,QAAS,EAChB,CACI,IAAAL,OAAAE,KAAA,CAAiB,UAAjB,CAA6B,IAAAK,SAA7B,CAA4C,IAA5C,CADJ,CAzD8B,CAqE9BA,SAAUA,QAAS,EACnB,CACI,IAAAN,QAAAD,OAAAQ,IAAA,CAAwB,UAAxB,CAAoC,IAAAD,SAApC,CAAmD,IAAnD,CADJ,CAtE8B,CAiF9BD,QAASA,QAAS,EAClB,CACId,WAAAiB,UAAAH,QAAAR,KAAA,CAAmC,IAAnC,CAEA,KAAAE,OAAAQ,IAAA,CAAgB,OAAhB,CAAyB,IAAAH,MAAzB,CAAqC,IAArC,CAGA,KAAAJ,QAAA,CADA,IAAAJ,MACA,CADa,IALjB,CAlF8B,CAAV,CA6FxBJ,QAAAiB,SAAA,CAAqB,mBAArB,CAA0ChB,MAA1C,CAA6D,MAA7D,CAEAL,OAAAC,QAAA,CAAiBI,MAxHiG;",
"sources":["node_modules/Phaser/src/data/DataManagerPlugin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$data$DataManagerPlugin\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar DataManager = require('./DataManager');\r\nvar PluginCache = require('../plugins/PluginCache');\r\n\r\n/**\r\n * @classdesc\r\n * The Data Component features a means to store pieces of data specific to a Game Object, System or Plugin.\r\n * You can then search, query it, and retrieve the data. The parent must either extend EventEmitter,\r\n * or have a property called `events` that is an instance of it.\r\n *\r\n * @class DataManagerPlugin\r\n * @extends Phaser.Data.DataManager\r\n * @memberOf Phaser.Data\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - A reference to the Scene that this DataManager belongs to.\r\n */\r\nvar DataManagerPlugin = new Class({\r\n\r\n    Extends: DataManager,\r\n\r\n    initialize:\r\n\r\n    function DataManagerPlugin (scene)\r\n    {\r\n        DataManager.call(this, scene, scene.sys.events);\r\n\r\n        /**\r\n         * A reference to the Scene that this DataManager belongs to.\r\n         *\r\n         * @name Phaser.Data.DataManagerPlugin#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * A reference to the Scene's Systems.\r\n         *\r\n         * @name Phaser.Data.DataManagerPlugin#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        scene.sys.events.once('boot', this.boot, this);\r\n        scene.sys.events.on('start', this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Data.DataManagerPlugin#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.events = this.systems.events;\r\n\r\n        this.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Data.DataManagerPlugin#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        this.events.once('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Data.DataManagerPlugin#shutdown\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.systems.events.off('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Data.DataManagerPlugin#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        DataManager.prototype.destroy.call(this);\r\n\r\n        this.events.off('start', this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('DataManagerPlugin', DataManagerPlugin, 'data');\r\n\r\nmodule.exports = DataManagerPlugin;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","DataManager","PluginCache","DataManagerPlugin","Extends","initialize","scene","call","sys","events","systems","once","boot","on","start","destroy","shutdown","off","prototype","register"]
}
