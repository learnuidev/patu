{
"version":3,
"file":"module$node_modules$Phaser$src$renderer$canvas$CanvasRenderer.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/Phaser/src/renderer/canvas/CanvasRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$renderer$canvas$CanvasRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar CanvasSnapshot = require('../snapshot/CanvasSnapshot');\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../../const');\r\nvar GetBlendModes = require('./utils/GetBlendModes');\r\nvar ScaleModes = require('../ScaleModes');\r\nvar Smoothing = require('../../display/canvas/Smoothing');\r\nvar TransformMatrix = require('../../gameobjects/components/TransformMatrix');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class CanvasRenderer\r\n * @memberOf Phaser.Renderer.Canvas\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - The Phaser Game instance that owns this renderer.\r\n */\r\nvar CanvasRenderer = new Class({\r\n\r\n    initialize:\r\n\r\n    function CanvasRenderer (game)\r\n    {\r\n        /**\r\n         * The Phaser Game instance that owns this renderer.\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#game\r\n         * @type {Phaser.Game}\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#type\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.type = CONST.CANVAS;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#drawCount\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.drawCount = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#width\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = game.config.width;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#height\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = game.config.height;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#config\r\n         * @type {RendererConfig}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = {\r\n            clearBeforeRender: game.config.clearBeforeRender,\r\n            backgroundColor: game.config.backgroundColor,\r\n            resolution: game.config.resolution,\r\n            autoResize: game.config.autoResize,\r\n            antialias: game.config.antialias,\r\n            roundPixels: game.config.roundPixels\r\n        };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#scaleMode\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.scaleMode = (game.config.antialias) ? ScaleModes.LINEAR : ScaleModes.NEAREST;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#gameCanvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.0.0\r\n         */\r\n        this.gameCanvas = game.canvas;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#gameContext\r\n         * @type {CanvasRenderingContext2D}\r\n         * @since 3.0.0\r\n         */\r\n        this.gameContext = (this.game.config.context) ? this.game.config.context : this.gameCanvas.getContext('2d');\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#currentContext\r\n         * @type {CanvasRenderingContext2D}\r\n         * @since 3.0.0\r\n         */\r\n        this.currentContext = this.gameContext;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#blendModes\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.blendModes = GetBlendModes();\r\n\r\n        // image-rendering: optimizeSpeed;\r\n        // image-rendering: pixelated;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#currentScaleMode\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.currentScaleMode = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#snapshotCallback\r\n         * @type {?SnapshotCallback}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.snapshotCallback = null;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#snapshotType\r\n         * @type {?string}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.snapshotType = null;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#snapshotEncoder\r\n         * @type {?number}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.snapshotEncoder = null;\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#_tempMatrix1\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.12.0\r\n         */\r\n        this._tempMatrix1 = new TransformMatrix();\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#_tempMatrix2\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.12.0\r\n         */\r\n        this._tempMatrix2 = new TransformMatrix();\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#_tempMatrix3\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.12.0\r\n         */\r\n        this._tempMatrix3 = new TransformMatrix();\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.Renderer.Canvas.CanvasRenderer#_tempMatrix4\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.12.0\r\n         */\r\n        this._tempMatrix4 = new TransformMatrix();\r\n\r\n        this.init();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#init\r\n     * @since 3.0.0\r\n     */\r\n    init: function ()\r\n    {\r\n        this.resize(this.width, this.height);\r\n    },\r\n\r\n    /**\r\n     * Resize the main game canvas.\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#resize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} width - [description]\r\n     * @param {integer} height - [description]\r\n     */\r\n    resize: function (width, height)\r\n    {\r\n        var resolution = this.config.resolution;\r\n\r\n        this.width = width * resolution;\r\n        this.height = height * resolution;\r\n\r\n        this.gameCanvas.width = this.width;\r\n        this.gameCanvas.height = this.height;\r\n\r\n        if (this.config.autoResize)\r\n        {\r\n            this.gameCanvas.style.width = (this.width / resolution) + 'px';\r\n            this.gameCanvas.style.height = (this.height / resolution) + 'px';\r\n        }\r\n\r\n        //  Resizing a canvas will reset imageSmoothingEnabled (and probably other properties)\r\n        if (this.scaleMode === ScaleModes.NEAREST)\r\n        {\r\n            Smoothing.disable(this.gameContext);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#onContextLost\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - [description]\r\n     */\r\n    onContextLost: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#onContextRestored\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - [description]\r\n     */\r\n    onContextRestored: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#resetTransform\r\n     * @since 3.0.0\r\n     */\r\n    resetTransform: function ()\r\n    {\r\n        this.currentContext.setTransform(1, 0, 0, 1, 0, 0);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#setBlendMode\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} blendMode - [description]\r\n     *\r\n     * @return {this} [description]\r\n     */\r\n    setBlendMode: function (blendMode)\r\n    {\r\n        this.currentContext.globalCompositeOperation = blendMode;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Changes the Canvas Rendering Context that all draw operations are performed against.\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#setContext\r\n     * @since 3.12.0\r\n     *\r\n     * @param {?CanvasRenderingContext2D} [ctx] - The new Canvas Rendering Context to draw everything to. Leave empty to reset to the Game Canvas.\r\n     *\r\n     * @return {this} The Canvas Renderer instance.\r\n     */\r\n    setContext: function (ctx)\r\n    {\r\n        this.currentContext = (ctx) ? ctx : this.gameContext;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#setAlpha\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} alpha - [description]\r\n     *\r\n     * @return {this} [description]\r\n     */\r\n    setAlpha: function (alpha)\r\n    {\r\n        this.currentContext.globalAlpha = alpha;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Called at the start of the render loop.\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#preRender\r\n     * @since 3.0.0\r\n     */\r\n    preRender: function ()\r\n    {\r\n        var ctx = this.gameContext;\r\n        var config = this.config;\r\n\r\n        var width = this.width;\r\n        var height = this.height;\r\n\r\n        if (config.clearBeforeRender)\r\n        {\r\n            ctx.clearRect(0, 0, width, height);\r\n        }\r\n\r\n        if (!config.transparent)\r\n        {\r\n            ctx.fillStyle = config.backgroundColor.rgba;\r\n            ctx.fillRect(0, 0, width, height);\r\n        }\r\n\r\n        this.drawCount = 0;\r\n    },\r\n\r\n    /**\r\n     * Renders the Scene to the given Camera.\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#render\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Scene} scene - [description]\r\n     * @param {Phaser.GameObjects.DisplayList} children - [description]\r\n     * @param {number} interpolationPercentage - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - [description]\r\n     */\r\n    render: function (scene, children, interpolationPercentage, camera)\r\n    {\r\n        var list = children.list;\r\n        var childCount = list.length;\r\n\r\n        var cx = camera._cx;\r\n        var cy = camera._cy;\r\n        var cw = camera._cw;\r\n        var ch = camera._ch;\r\n\r\n        var ctx = (camera.renderToTexture) ? camera.context : scene.sys.context;\r\n\r\n        var scissor = (cx !== 0 || cy !== 0 || cw !== ctx.canvas.width || ch !== ctx.canvas.height);\r\n\r\n        this.currentContext = ctx;\r\n\r\n        //  If the alpha or blend mode didn't change since the last render, then don't set them again (saves 2 ops)\r\n\r\n        if (!camera.transparent)\r\n        {\r\n            ctx.fillStyle = camera.backgroundColor.rgba;\r\n            ctx.fillRect(cx, cy, cw, ch);\r\n        }\r\n\r\n        ctx.globalAlpha = camera.alpha;\r\n\r\n        ctx.globalCompositeOperation = 'source-over';\r\n\r\n        this.drawCount += list.length;\r\n\r\n        if (scissor)\r\n        {\r\n            ctx.save();\r\n            ctx.beginPath();\r\n            ctx.rect(cx, cy, cw, ch);\r\n            ctx.clip();\r\n        }\r\n\r\n        if (camera.renderToTexture)\r\n        {\r\n            camera.emit('prerender', camera);\r\n        }\r\n\r\n        camera.matrix.copyToContext(ctx);\r\n\r\n        for (var i = 0; i < childCount; i++)\r\n        {\r\n            var child = list[i];\r\n\r\n            if (!child.willRender(camera))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            if (child.mask)\r\n            {\r\n                child.mask.preRenderCanvas(this, child, camera);\r\n            }\r\n\r\n            child.renderCanvas(this, child, interpolationPercentage, camera);\r\n\r\n            if (child.mask)\r\n            {\r\n                child.mask.postRenderCanvas(this, child, camera);\r\n            }\r\n        }\r\n\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        ctx.globalCompositeOperation = 'source-over';\r\n        ctx.globalAlpha = 1;\r\n\r\n        camera.flashEffect.postRenderCanvas(ctx);\r\n        camera.fadeEffect.postRenderCanvas(ctx);\r\n\r\n        camera.dirty = false;\r\n\r\n        //  Reset the camera scissor\r\n        if (scissor)\r\n        {\r\n            ctx.restore();\r\n        }\r\n\r\n        if (camera.renderToTexture)\r\n        {\r\n            camera.emit('postrender', camera);\r\n\r\n            scene.sys.context.drawImage(camera.canvas, cx, cy);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#postRender\r\n     * @since 3.0.0\r\n     */\r\n    postRender: function ()\r\n    {\r\n        var ctx = this.gameContext;\r\n\r\n        ctx.globalAlpha = 1;\r\n        ctx.globalCompositeOperation = 'source-over';\r\n\r\n        if (this.snapshotCallback)\r\n        {\r\n            this.snapshotCallback(CanvasSnapshot(this.gameCanvas, this.snapshotType, this.snapshotEncoder));\r\n            this.snapshotCallback = null;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#snapshot\r\n     * @since 3.0.0\r\n     *\r\n     * @param {SnapshotCallback} callback - [description]\r\n     * @param {string} type - [description]\r\n     * @param {number} encoderOptions - [description]\r\n     */\r\n    snapshot: function (callback, type, encoderOptions)\r\n    {\r\n        this.snapshotCallback = callback;\r\n        this.snapshotType = type;\r\n        this.snapshotEncoder = encoderOptions;\r\n    },\r\n\r\n    /**\r\n     * Takes a Sprite Game Object, or any object that extends it, and draws it to the current context.\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#batchSprite\r\n     * @since 3.12.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} sprite - The texture based Game Object to draw.\r\n     * @param {Phaser.Textures.Frame} frame - The frame to draw, doesn't have to be that owned by the Game Object.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to use for the rendering transform.\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} [parentTransformMatrix] - The transform matrix of the parent container, if set.\r\n     */\r\n    batchSprite: function (sprite, frame, camera, parentTransformMatrix)\r\n    {\r\n        var alpha = camera.alpha * sprite.alpha;\r\n\r\n        if (alpha === 0)\r\n        {\r\n            //  Nothing to see, so abort early\r\n            return;\r\n        }\r\n    \r\n        var ctx = this.currentContext;\r\n\r\n        var camMatrix = this._tempMatrix1;\r\n        var spriteMatrix = this._tempMatrix2;\r\n        var calcMatrix = this._tempMatrix3;\r\n\r\n        var cd = frame.canvasData;\r\n\r\n        var frameX = cd.x;\r\n        var frameY = cd.y;\r\n        var frameWidth = frame.cutWidth;\r\n        var frameHeight = frame.cutHeight;\r\n        var res = frame.source.resolution;\r\n\r\n        var x = -sprite.displayOriginX + frame.x;\r\n        var y = -sprite.displayOriginY + frame.y;\r\n\r\n        var fx = (sprite.flipX) ? -1 : 1;\r\n        var fy = (sprite.flipY) ? -1 : 1;\r\n    \r\n        if (sprite.isCropped)\r\n        {\r\n            var crop = sprite._crop;\r\n\r\n            if (crop.flipX !== sprite.flipX || crop.flipY !== sprite.flipY)\r\n            {\r\n                frame.updateCropUVs(crop, sprite.flipX, sprite.flipY);\r\n            }\r\n\r\n            frameWidth = crop.cw;\r\n            frameHeight = crop.ch;\r\n    \r\n            frameX = crop.cx;\r\n            frameY = crop.cy;\r\n\r\n            x = -sprite.displayOriginX + crop.x;\r\n            y = -sprite.displayOriginY + crop.y;\r\n\r\n            if (fx === -1)\r\n            {\r\n                if (x >= 0)\r\n                {\r\n                    x = -(x + frameWidth);\r\n                }\r\n                else if (x < 0)\r\n                {\r\n                    x = (Math.abs(x) - frameWidth);\r\n                }\r\n            }\r\n        \r\n            if (fy === -1)\r\n            {\r\n                if (y >= 0)\r\n                {\r\n                    y = -(y + frameHeight);\r\n                }\r\n                else if (y < 0)\r\n                {\r\n                    y = (Math.abs(y) - frameHeight);\r\n                }\r\n            }\r\n        }\r\n\r\n        spriteMatrix.applyITRS(sprite.x, sprite.y, sprite.rotation, sprite.scaleX, sprite.scaleY);\r\n\r\n        camMatrix.copyFrom(camera.matrix);\r\n\r\n        if (parentTransformMatrix)\r\n        {\r\n            //  Multiply the camera by the parent matrix\r\n            camMatrix.multiplyWithOffset(parentTransformMatrix, -camera.scrollX * sprite.scrollFactorX, -camera.scrollY * sprite.scrollFactorY);\r\n\r\n            //  Undo the camera scroll\r\n            spriteMatrix.e = sprite.x;\r\n            spriteMatrix.f = sprite.y;\r\n\r\n            //  Multiply by the Sprite matrix, store result in calcMatrix\r\n            camMatrix.multiply(spriteMatrix, calcMatrix);\r\n        }\r\n        else\r\n        {\r\n            spriteMatrix.e -= camera.scrollX * sprite.scrollFactorX;\r\n            spriteMatrix.f -= camera.scrollY * sprite.scrollFactorY;\r\n    \r\n            //  Multiply by the Sprite matrix, store result in calcMatrix\r\n            camMatrix.multiply(spriteMatrix, calcMatrix);\r\n        }\r\n\r\n        ctx.save();\r\n       \r\n        calcMatrix.setToContext(ctx);\r\n\r\n        ctx.scale(fx, fy);\r\n\r\n        ctx.globalCompositeOperation = this.blendModes[sprite.blendMode];\r\n\r\n        ctx.globalAlpha = alpha;\r\n\r\n        ctx.drawImage(frame.source.image, frameX, frameY, frameWidth, frameHeight, x, y, frameWidth / res, frameHeight / res);\r\n\r\n        ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Renderer.Canvas.CanvasRenderer#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.gameCanvas = null;\r\n        this.gameContext = null;\r\n\r\n        this.game = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = CanvasRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","CanvasSnapshot","Class","CONST","GetBlendModes","ScaleModes","Smoothing","TransformMatrix","CanvasRenderer","initialize","game","type","CANVAS","drawCount","width","config","height","clearBeforeRender","backgroundColor","resolution","autoResize","antialias","roundPixels","scaleMode","LINEAR","NEAREST","gameCanvas","canvas","currentContext","gameContext","context","getContext","blendModes","currentScaleMode","snapshotEncoder","snapshotType","snapshotCallback","_tempMatrix1","_tempMatrix2","_tempMatrix3","_tempMatrix4","init","resize","style","disable","onContextLost","onContextRestored","resetTransform","setTransform","setBlendMode","blendMode","globalCompositeOperation","setContext","ctx","setAlpha","alpha","globalAlpha","preRender","clearRect","transparent","fillStyle","rgba","fillRect","render","scene","children","interpolationPercentage","camera","list","childCount","length","cx","_cx","cy","_cy","cw","_cw","ch","_ch","renderToTexture","sys","scissor","save","beginPath","rect","clip","emit","matrix","copyToContext","i","child","willRender","mask","preRenderCanvas","renderCanvas","postRenderCanvas","flashEffect","fadeEffect","dirty","restore","drawImage","postRender","snapshot","callback","encoderOptions","batchSprite","sprite","frame","parentTransformMatrix","camMatrix","spriteMatrix","calcMatrix","cd","canvasData","frameX","x","frameY","y","frameWidth","cutWidth","frameHeight","cutHeight","res","source","displayOriginX","displayOriginY","fx","flipX","fy","flipY","isCropped","crop","_crop","updateCropUVs","Math","abs","applyITRS","rotation","scaleX","scaleY","copyFrom","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","multiply","setToContext","scale","image","destroy"]
}
