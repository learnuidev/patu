{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$SetCollision.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,gEAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO5H,IAAIC,iBAAmBH,OAAA,CAAQ,qEAAR,CAAvB,CACII,qBAAuBJ,OAAA,CAAQ,yEAAR,CAD3B,CAEIK,uBAAyBL,OAAA,CAAQ,2EAAR,CAgD7BC,OAAAC,QAAA,CAhCmBI,QAAS,CAACC,OAAD,CAAUC,QAAV,CAAoBC,gBAApB,CAAsCC,KAAtC,CAC5B,CACqBC,IAAAA,EAAjB;AAAIH,QAAJ,GAA8BA,QAA9B,CAAyC,CAAA,CAAzC,CACyBG,KAAAA,EAAzB,GAAIF,gBAAJ,GAAsCA,gBAAtC,CAAyD,CAAA,CAAzD,CACKG,MAAAC,QAAA,CAAcN,OAAd,CAAL,GAA+BA,OAA/B,CAAyC,CAAEA,OAAF,CAAzC,CAGA,KAAK,IAAIO,EAAI,CAAb,CAAgBA,CAAhB,CAAoBP,OAAAQ,OAApB,CAAoCD,CAAA,EAApC,CAEIT,sBAAA,CAAuBE,OAAA,CAAQO,CAAR,CAAvB,CAAmCN,QAAnC,CAA6CE,KAA7C,CAIJ,KAASM,CAAT,CAAc,CAAd,CAAiBA,CAAjB,CAAsBN,KAAAO,OAAtB,CAAoCD,CAAA,EAApC,CAEI,IAAK,IAAIE,GAAK,CAAd,CAAiBA,EAAjB,CAAsBR,KAAAS,MAAtB,CAAmCD,EAAA,EAAnC,CACA,CACI,IAAIE,KAAOV,KAAAW,KAAA,CAAWL,CAAX,CAAA,CAAeE,EAAf,CAEPE,KAAJ,EAA4C,EAA5C,GAAYb,OAAAe,QAAA,CAAgBF,IAAAG,MAAhB,CAAZ,EAEIpB,gBAAA,CAAiBiB,IAAjB,CAAuBZ,QAAvB,CALR,CAUAC,gBAAJ,EAEIL,oBAAA,CAAqB,CAArB,CAAwB,CAAxB,CAA2BM,KAAAS,MAA3B,CAAwCT,KAAAO,OAAxC,CAAsDP,KAAtD,CA3BR,CA1B4H;",
"sources":["node_modules/Phaser/src/tilemaps/components/SetCollision.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$SetCollision\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar SetTileCollision = require('./SetTileCollision');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\nvar SetLayerCollisionIndex = require('./SetLayerCollisionIndex');\r\n\r\n/**\r\n * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n * collision will be enabled (true) or disabled (false).\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollision\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar SetCollision = function (indexes, collides, recalculateFaces, layer)\r\n{\r\n    if (collides === undefined) { collides = true; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n    if (!Array.isArray(indexes)) { indexes = [ indexes ]; }\r\n\r\n    // Update the array of colliding indexes\r\n    for (var i = 0; i < indexes.length; i++)\r\n    {\r\n        SetLayerCollisionIndex(indexes[i], collides, layer);\r\n    }\r\n\r\n    // Update the tiles\r\n    for (var ty = 0; ty < layer.height; ty++)\r\n    {\r\n        for (var tx = 0; tx < layer.width; tx++)\r\n        {\r\n            var tile = layer.data[ty][tx];\r\n\r\n            if (tile && indexes.indexOf(tile.index) !== -1)\r\n            {\r\n                SetTileCollision(tile, collides);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = SetCollision;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","SetTileCollision","CalculateFacesWithin","SetLayerCollisionIndex","SetCollision","indexes","collides","recalculateFaces","layer","undefined","Array","isArray","i","length","ty","height","tx","width","tile","data","indexOf","index"]
}
