{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$Copy.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOpH,IAAIC,eAAiBH,OAAA,CAAQ,mEAAR,CAArB,CACII,qBAAuBJ,OAAA,CAAQ,yEAAR,CAmD3BC,OAAAC,QAAA,CA/BWG,QAAS,CAACC,QAAD,CAAWC,QAAX,CAAqBC,KAArB,CAA4BC,MAA5B,CAAoCC,SAApC,CAA+CC,SAA/C,CAA0DC,gBAA1D,CAA4EC,KAA5E,CACpB,CACmB,CAAf,CAAIP,QAAJ,GAAoBA,QAApB,CAA+B,CAA/B,CACe,EAAf,CAAIC,QAAJ,GAAoBA,QAApB,CAA+B,CAA/B,CACyBO,KAAAA,EAAzB,GAAIF,gBAAJ,GAAsCA,gBAAtC;AAAyD,CAAA,CAAzD,CAEA,KAAIG,SAAWZ,cAAA,CAAeG,QAAf,CAAyBC,QAAzB,CAAmCC,KAAnC,CAA0CC,MAA1C,CAAkD,IAAlD,CAAwDI,KAAxD,CAEXG,SAAAA,CAAUN,SAAVM,CAAsBV,QACtBW,SAAAA,CAAUN,SAAVM,CAAsBV,QAE1B,KAAK,IAAIW,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,QAAAI,OAApB,CAAqCD,CAAA,EAArC,CACA,CACI,IAAIE,MAAQL,QAAA,CAASG,CAAT,CAAAG,EAARD,CAAwBJ,QAA5B,CACIM,MAAQP,QAAA,CAASG,CAAT,CAAAK,EAARD,CAAwBL,QACf,EAAb,EAAIG,KAAJ,EAAkBA,KAAlB,CAA0BP,KAAAL,MAA1B,EAAkD,CAAlD,EAAyCc,KAAzC,EAAuDA,KAAvD,CAA+DT,KAAAJ,OAA/D,EAEQI,KAAAW,KAAA,CAAWF,KAAX,CAAA,CAAkBF,KAAlB,CAFR,EAIQP,KAAAW,KAAA,CAAWF,KAAX,CAAA,CAAkBF,KAAlB,CAAAK,KAAA,CAA8BV,QAAA,CAASG,CAAT,CAA9B,CAPZ,CAYIN,gBAAJ,EAGIR,oBAAA,CAAqBM,SAArB,CAAiC,CAAjC,CAAoCC,SAApC,CAAgD,CAAhD,CAAmDH,KAAnD,CAA2D,CAA3D,CAA8DC,MAA9D,CAAuE,CAAvE,CAA0EI,KAA1E,CA1BR,CA7BoH;",
"sources":["node_modules/Phaser/src/tilemaps/components/Copy.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$Copy\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\n\r\n/**\r\n * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n * information in the destination region.\r\n *\r\n * @function Phaser.Tilemaps.Components.Copy\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar Copy = function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, layer)\r\n{\r\n    if (srcTileX < 0) { srcTileX = 0; }\r\n    if (srcTileY < 0) { srcTileY = 0; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n\r\n    var srcTiles = GetTilesWithin(srcTileX, srcTileY, width, height, null, layer);\r\n\r\n    var offsetX = destTileX - srcTileX;\r\n    var offsetY = destTileY - srcTileY;\r\n\r\n    for (var i = 0; i < srcTiles.length; i++)\r\n    {\r\n        var tileX = srcTiles[i].x + offsetX;\r\n        var tileY = srcTiles[i].y + offsetY;\r\n        if (tileX >= 0 && tileX < layer.width && tileY >= 0 && tileY < layer.height)\r\n        {\r\n            if (layer.data[tileY][tileX])\r\n            {\r\n                layer.data[tileY][tileX].copy(srcTiles[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        // Recalculate the faces within the destination area and neighboring tiles\r\n        CalculateFacesWithin(destTileX - 1, destTileY - 1, width + 2, height + 2, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = Copy;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetTilesWithin","CalculateFacesWithin","Copy","srcTileX","srcTileY","width","height","destTileX","destTileY","recalculateFaces","layer","undefined","srcTiles","offsetX","offsetY","i","length","tileX","x","tileY","y","data","copy"]
}
