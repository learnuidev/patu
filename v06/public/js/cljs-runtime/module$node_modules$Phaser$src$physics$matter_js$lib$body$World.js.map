{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$body$World.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,gEAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAc5H,IAAIC,MAAQ,EAEZF,OAAAC,QAAA,CAAiBC,KAEjB,KAAIC,UAAYJ,OAAA,CAAQ,qEAAR,CACCA,QAAA,CAAQ,4EAAR,CACjB,KAAIK,OAASL,OAAA,CAAQ,kEAAR,CAEZ,UAAQ,EAAG,CAURG,KAAAG,OAAA,CAAeC,QAAQ,CAACC,OAAD,CAAU,CAC7B,IAAIC,UAAYL,SAAAE,OAAA,EAehB,OAAOD,OAAAK,OAAA,CAAcD,SAAd;AAbQE,CACXC,MAAO,OADID,CAEXE,QAAS,CACLC,EAAG,CADE,CAELC,EAAG,CAFE,CAGLC,MAAO,IAHF,CAFEL,CAOXM,OAAQ,CACJC,IAAK,CAAEJ,EAAG,CAACK,QAAN,CAAgBJ,EAAG,CAACI,QAApB,CADD,CAEJC,IAAK,CAAEN,EAAGK,QAAL,CAAeJ,EAAGI,QAAlB,CAFD,CAPGR,CAaR,CAAmCH,OAAnC,CAhBsB,CAVzB,CAAX,CAAD,EAtB4H;",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/body/World.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$body$World\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\r\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\r\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\r\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\r\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class World\r\n* @extends Composite\r\n*/\r\n\r\nvar World = {};\r\n\r\nmodule.exports = World;\r\n\r\nvar Composite = require('./Composite');\r\nvar Constraint = require('../constraint/Constraint');\r\nvar Common = require('../core/Common');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * See the properties section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @constructor\r\n     * @param {} options\r\n     * @return {world} A new world\r\n     */\r\n    World.create = function(options) {\r\n        var composite = Composite.create();\r\n\r\n        var defaults = {\r\n            label: 'World',\r\n            gravity: {\r\n                x: 0,\r\n                y: 1,\r\n                scale: 0.001\r\n            },\r\n            bounds: { \r\n                min: { x: -Infinity, y: -Infinity }, \r\n                max: { x: Infinity, y: Infinity } \r\n            }\r\n        };\r\n        \r\n        return Common.extend(composite, defaults, options);\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * The gravity to apply on the world.\r\n     *\r\n     * @property gravity\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * The gravity x component.\r\n     *\r\n     * @property gravity.x\r\n     * @type object\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * The gravity y component.\r\n     *\r\n     * @property gravity.y\r\n     * @type object\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * The gravity scale factor.\r\n     *\r\n     * @property gravity.scale\r\n     * @type object\r\n     * @default 0.001\r\n     */\r\n\r\n    /**\r\n     * A `Bounds` object that defines the world bounds for collision detection.\r\n     *\r\n     * @property bounds\r\n     * @type bounds\r\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\r\n     */\r\n\r\n    // World is a Composite body\r\n    // see src/module/Outro.js for these aliases:\r\n    \r\n    /**\r\n     * An alias for Composite.add\r\n     * @method add\r\n     * @param {world} world\r\n     * @param {} object\r\n     * @return {composite} The original world with the objects added\r\n     */\r\n\r\n    /**\r\n     * An alias for Composite.remove\r\n     * @method remove\r\n     * @param {world} world\r\n     * @param {} object\r\n     * @param {boolean} [deep=false]\r\n     * @return {composite} The original world with the objects removed\r\n     */\r\n\r\n    /**\r\n     * An alias for Composite.clear\r\n     * @method clear\r\n     * @param {world} world\r\n     * @param {boolean} keepStatic\r\n     */\r\n\r\n    /**\r\n     * An alias for Composite.addComposite\r\n     * @method addComposite\r\n     * @param {world} world\r\n     * @param {composite} composite\r\n     * @return {world} The original world with the objects from composite added\r\n     */\r\n    \r\n     /**\r\n      * An alias for Composite.addBody\r\n      * @method addBody\r\n      * @param {world} world\r\n      * @param {body} body\r\n      * @return {world} The original world with the body added\r\n      */\r\n\r\n     /**\r\n      * An alias for Composite.addConstraint\r\n      * @method addConstraint\r\n      * @param {world} world\r\n      * @param {constraint} constraint\r\n      * @return {world} The original world with the constraint added\r\n      */\r\n\r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","World","Composite","Common","create","World.create","options","composite","extend","defaults","label","gravity","x","y","scale","bounds","min","Infinity","max"]
}
