{"version":3,"sources":["datascript/lru.cljc"],"mappings":";;AAEA,AAAA;AAAA,AAGI,AAAA;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAASI,AAEEO,AAAKC,AAAEC;;AAFlB,AAAA,AAAA,AAEWF;AAFX,AAEqB,AAACG,AAAAA,AAAAA,AAAUH,AAAAA,AAAKC,AAAAA,AAAEC,AAAAA;;;AAFvC,AAAA,AAAA,AAAA,AAAST,AAGUW,AAAEH;;AAHrB,AAAA,AAAA,AAGmBG;AAHnB,AAGwB,AAACC,AAAeV,AAAUM;;;AAHlD,AAAA,AAAA,AAAA,AAASR,AAKGW,AAAEH;;AALd,AAAA,AAAA,AAKYG;AALZ,AAKoB,AAAA,AAACE,AAAQX,AAAUM;;;AALvC,AAAA,AAAA,AAAA,AAASR,AAMGW,AAAEH,AAAEM;;AANhB,AAAA,AAAA,AAMYH;AANZ,AAMoB,AAACE,AAAQX,AAAUM,AAAEM;;;AANzC,AAAA,AAAA,AAAA,AAASd,AAQMW,AAAEI,AAAOC;;AARxB,AAAA,AAAA,AAQeL;AARf,AASc,AAACM,AAAWf,AAAUa,AAAOC;;;AAT3C,AAAA,AAAA,AAAShB;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAJ,AAAAC,AAAAC,AAASE;AAAT,AAAA,AAAAD,AAAAF,AAAA;;;AAAA;;;AAAA,AAASI,AAAKC,AAAUC,AAAQC,AAAQC,AAAIC;AAA5C,AAAA,AAAAN,AAAcE,AAAUC,AAAQC,AAAQC,AAAIC;;;AAAnCN,AAoBb,AAAA,AAAMU,AAAgBQ,AAAIV,AAAEC;AAA5B,AACE,AAAMP,AAAU,AAAagB;AACvBf,AAAU,AAAWe;AACrBd,AAAU,AAAWc;AACrBb,AAAU,AAAOa;AACjBZ,AAAU,AAASY;AAJzB,AAKE,AAAAC,AAAW,AAAA,AAAA,AAACf,AAAAA,AAAAA,AAAQI,AAAAA;AAApB,AAAA,AAAAW;AAAA,AAAAA,AAASC;AAAT,AACE,AAACnB,AAAMC,AACIC,AACA,AAACkB,AAAOD,AACR,AAACE,AAAMjB,AAAIG,AACf,AAACc,AAAMlB,AAAQI,AAAEH,AACjB,AAAA,AAAKA,AACLC;;AACP,AAAAiB,AACE,AAACtB,AAAM,AAACqB,AAAMpB,AAAUM,AAAEC,AACnB,AAACa,AAAMnB,AAAQE,AAAIG,AACnB,AAACc,AAAMlB,AAAQI,AAAEH,AACjB,AAAA,AAAKA,AACLC;AALT,AAAA,AAAAiB,AAAAA,AAACC,AAAAA,AAAAA;;;AAOP,AAAA,AAAMA,AAAkBN;AAAxB,AACE,AAAI,AAAG,AAACO,AAAM,AAAaP,AAAM,AAASA;AACxC,AAAMhB,AAAU,AAAagB;AACvBf,AAAU,AAAWe;AACrBd,AAAU,AAAWc;AACrBb,AAAU,AAAOa;AACjBZ,AAAU,AAASY;AAJzBQ,AAKgB,AAACE,AAAMzB;AALvB,AAAAwB,AAAAD,AAAA,AAAA,AAKON;AALP,AAAAO,AAAAD,AAAA,AAAA,AAKSlB;AALT,AAME,AAACP,AAAM,AAACoB,AAAOnB,AAAUM,AAClB,AAACa,AAAOlB,AAAQiB,AAChB,AAACC,AAAOjB,AAAQI,AAChBH,AACAC;;AACTY;;;AAEJ,AAAA,AAAMW,AAAKvB;AAAX,AACE,AAAA,AAAA,AAAA,AAACL,AAAS,AAAC6B,AAAiBxB","names":["this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","datascript.lru/LRU","datascript.lru/->LRU","key-value","gen-key","key-gen","gen","limit","this","k","v","datascript.lru/assoc-lru","_","cljs.core/-contains-key?","cljs.core/-lookup","nf","writer","opts","cljs.core/-pr-writer","lru","temp__5733__auto__","g","cljs.core.dissoc","cljs.core.assoc","G__27326","datascript.lru/cleanup-lru","cljs.core/count","vec__27337","cljs.core.nth","cljs.core/first","datascript.lru/lru","cljs.core/sorted-map"],"sourcesContent":["(ns ^:no-doc datascript.lru)\n\n(declare assoc-lru cleanup-lru)\n\n#?(:cljs\n    (deftype LRU [key-value gen-key key-gen gen limit]\n      IAssociative\n      (-assoc [this k v] (assoc-lru this k v))\n      (-contains-key? [_ k] (-contains-key? key-value k))\n      ILookup\n      (-lookup [_ k]    (-lookup key-value k nil))\n      (-lookup [_ k nf] (-lookup key-value k nf))\n      IPrintWithWriter\n      (-pr-writer [_ writer opts]\n                  (-pr-writer key-value writer opts)))\n   :clj\n    (deftype LRU [^clojure.lang.Associative key-value gen-key key-gen gen limit]\n      clojure.lang.ILookup\n      (valAt [_ k]           (.valAt key-value k))\n      (valAt [_ k not-found] (.valAt key-value k not-found))\n      clojure.lang.Associative\n      (containsKey [_ k] (.containsKey key-value k))\n      (entryAt [_ k]     (.entryAt key-value k))\n      (assoc [this k v]  (assoc-lru this k v))))\n\n(defn assoc-lru [^LRU lru k v]\n  (let [key-value (.-key-value lru)\n        gen-key   (.-gen-key lru)\n        key-gen   (.-key-gen lru)\n        gen       (.-gen lru)\n        limit     (.-limit lru)]\n    (if-let [g (key-gen k nil)]\n      (->LRU key-value\n             (-> gen-key\n                 (dissoc g)\n                 (assoc gen k))\n             (assoc key-gen k gen)\n             (inc gen)\n             limit)\n      (cleanup-lru\n        (->LRU (assoc key-value k v)\n               (assoc gen-key gen k)\n               (assoc key-gen k gen)\n               (inc gen)\n               limit)))))\n\n(defn cleanup-lru [^LRU lru]\n  (if (> (count (.-key-value lru)) (.-limit lru))\n    (let [key-value (.-key-value lru)\n          gen-key   (.-gen-key lru)\n          key-gen   (.-key-gen lru)\n          gen       (.-gen lru)\n          limit     (.-limit lru)\n          [g k]     (first gen-key)]\n      (->LRU (dissoc key-value k)\n             (dissoc gen-key g)\n             (dissoc key-gen k)\n             gen\n             limit))\n    lru))\n\n(defn lru [limit]\n  (->LRU {} (sorted-map) {} 0 limit))\n\n"]}