{
"version":3,
"file":"module$node_modules$$formatjs$ecma402_abstract$NumberFormat$ComputeExponent.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,4EAAA,CAAgG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAExIC,MAAAC,eAAA,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAAI,gBAAA,CAA0B,IAAK,EAC/B,KAAIC,QAAUP,OAAA,CAAQ,sDAAR,CAAd,CACIQ,8BAAgCR,OAAA,CAAQ,yFAAR,CADpC,CAEIS,wBAA0BT,OAAA,CAAQ,mFAAR,CAqC9BE;OAAAI,gBAAA,CA7BAA,QAAwB,CAACI,YAAD,CAAeC,CAAf,CAAkBC,EAAlB,CAAsB,CACtCC,EAAAA,CAAmBD,EAAAC,iBACvB,IAAU,CAAV,GAAIF,CAAJ,CACI,MAAO,CAAC,CAAD,CAAI,CAAJ,CAEH,EAAR,CAAIA,CAAJ,GACIA,CADJ,CACQ,CAACA,CADT,CAGA,KAAIG,UAAYP,OAAAQ,aAAA,CAAqBJ,CAArB,CAAhB,CACIK,SAAWR,6BAAAS,4BAAA,CAA0DP,YAA1D,CAAwEI,SAAxE,CAAmF,CAC9FD,iBAAkBA,EAD4E,CAAnF,CAIfF,EAAA,CAAe,CAAX,CAAAK,QAAA,CAAeL,CAAf,CAAmBO,IAAAC,IAAA,CAAS,EAAT,CAAa,CAACH,QAAd,CAAnB,CAA6CL,CAA7C,CAAiDO,IAAAC,IAAA,CAAS,EAAT,CAAaH,QAAb,CACjDI,EAAAA,CAAqBX,uBAAAY,sBAAA,CAA8CR,EAAA,CAAiBH,YAAjB,CAA9C,CAA8EC,CAA9E,CAKzB,OAJyC,EAIzC,GAJIS,CAAAE,cAIJ,EADmBf,OAAAQ,aAAAQ,CAAqBH,CAAAE,cAArBC,CACnB,GAAqBT,SAArB,CAAiCE,QAAjC,CACW,CAACA,QAAD,CAAWF,SAAX,CADX,CAGO,CACHN,6BAAAS,4BAAA,CAA0DP,YAA1D;AAAwEI,SAAxE,CAAoF,CAApF,CAAuF,CACnFD,iBAAkBA,EADiE,CAAvF,CADG,CAIHC,SAJG,CAIS,CAJT,CAtBmC,CAd0F;",
"sources":["node_modules/@formatjs/ecma402-abstract/NumberFormat/ComputeExponent.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$formatjs$ecma402_abstract$NumberFormat$ComputeExponent\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ComputeExponent = void 0;\nvar utils_1 = require(\"../utils\");\nvar ComputeExponentForMagnitude_1 = require(\"./ComputeExponentForMagnitude\");\nvar FormatNumericToString_1 = require(\"./FormatNumericToString\");\n/**\n * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x\n * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,\n * requiring a different exponent.\n *\n * NOT IN SPEC: it returns [exponent, magnitude].\n */\nfunction ComputeExponent(numberFormat, x, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    if (x === 0) {\n        return [0, 0];\n    }\n    if (x < 0) {\n        x = -x;\n    }\n    var magnitude = utils_1.getMagnitude(x);\n    var exponent = ComputeExponentForMagnitude_1.ComputeExponentForMagnitude(numberFormat, magnitude, {\n        getInternalSlots: getInternalSlots,\n    });\n    // Preserve more precision by doing multiplication when exponent is negative.\n    x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);\n    var formatNumberResult = FormatNumericToString_1.FormatNumericToString(getInternalSlots(numberFormat), x);\n    if (formatNumberResult.roundedNumber === 0) {\n        return [exponent, magnitude];\n    }\n    var newMagnitude = utils_1.getMagnitude(formatNumberResult.roundedNumber);\n    if (newMagnitude === magnitude - exponent) {\n        return [exponent, magnitude];\n    }\n    return [\n        ComputeExponentForMagnitude_1.ComputeExponentForMagnitude(numberFormat, magnitude + 1, {\n            getInternalSlots: getInternalSlots,\n        }),\n        magnitude + 1,\n    ];\n}\nexports.ComputeExponent = ComputeExponent;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ComputeExponent","utils_1","ComputeExponentForMagnitude_1","FormatNumericToString_1","numberFormat","x","_a","getInternalSlots","magnitude","getMagnitude","exponent","ComputeExponentForMagnitude","Math","pow","formatNumberResult","FormatNumericToString","roundedNumber","newMagnitude"]
}
