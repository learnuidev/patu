{
"version":3,
"file":"module$node_modules$Phaser$src$utils$object$GetAdvancedValue.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,6DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOzH,IAAIC,KAAOH,OAAA,CAAQ,2CAAR,CAAX,CACII,SAAWJ,OAAA,CAAQ,sDAAR,CAwEfC,OAAAC,QAAA,CA/BuBG,QAAS,CAACC,MAAD,CAASC,GAAT,CAAcC,YAAd,CAChC,CACQC,MAAAA,CAAQL,QAAA,CAASE,MAAT,CAAiBC,GAAjB,CAAsB,IAAtB,CAEZ,IAAc,IAAd,GAAIE,MAAJ,CAEI,MAAOD,aAEN,IAAIE,KAAAC,QAAA,CAAcF,MAAd,CAAJ,CAED,MAAON,KAAAS,IAAAC,KAAA,CAAcJ,MAAd,CAEN,IAAqB,QAArB,GAAI,MAAOA,OAAX,CACL,CACI,GAAIA,MAAAK,eAAA,CAAqB,SAArB,CAAJ,CAEI,MAAOX,KAAAS,IAAAG,eAAA,CAAwBN,MAAAO,QAAA,CAAc,CAAd,CAAxB;AAA0CP,MAAAO,QAAA,CAAc,CAAd,CAA1C,CAEN,IAAIP,MAAAK,eAAA,CAAqB,WAArB,CAAJ,CAED,MAAOX,KAAAS,IAAAK,YAAA,CAAqBR,MAAAS,UAAA,CAAgB,CAAhB,CAArB,CAAyCT,MAAAS,UAAA,CAAgB,CAAhB,CAAzC,CAPf,CADK,IAWA,IAAqB,UAArB,GAAI,MAAOT,OAAX,CAED,MAAOA,OAAA,CAAMF,GAAN,CAGX,OAAOE,OA3BX,CAlDyH;",
"sources":["node_modules/Phaser/src/utils/object/GetAdvancedValue.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$object$GetAdvancedValue\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar MATH = require('../../math/const');\r\nvar GetValue = require('./GetValue');\r\n\r\n//  Allowed types:\r\n\r\n//  Implicit\r\n//  {\r\n//      x: 4\r\n//  }\r\n//\r\n//  From function\r\n//  {\r\n//      x: function ()\r\n//  }\r\n//\r\n//  Randomly pick one element from the array\r\n//  {\r\n//      x: [a, b, c, d, e, f]\r\n//  }\r\n//\r\n//  Random integer between min and max:\r\n//  {\r\n//      x: { randInt: [min, max] }\r\n//  }\r\n//\r\n//  Random float between min and max:\r\n//  {\r\n//      x: { randFloat: [min, max] }\r\n//  }\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Utils.Objects.GetAdvancedValue\r\n * @since 3.0.0\r\n *\r\n * @param {object} source - [description]\r\n * @param {string} key - [description]\r\n * @param {*} defaultValue - [description]\r\n *\r\n * @return {*} [description]\r\n */\r\nvar GetAdvancedValue = function (source, key, defaultValue)\r\n{\r\n    var value = GetValue(source, key, null);\r\n\r\n    if (value === null)\r\n    {\r\n        return defaultValue;\r\n    }\r\n    else if (Array.isArray(value))\r\n    {\r\n        return MATH.RND.pick(value);\r\n    }\r\n    else if (typeof value === 'object')\r\n    {\r\n        if (value.hasOwnProperty('randInt'))\r\n        {\r\n            return MATH.RND.integerInRange(value.randInt[0], value.randInt[1]);\r\n        }\r\n        else if (value.hasOwnProperty('randFloat'))\r\n        {\r\n            return MATH.RND.realInRange(value.randFloat[0], value.randFloat[1]);\r\n        }\r\n    }\r\n    else if (typeof value === 'function')\r\n    {\r\n        return value(key);\r\n    }\r\n\r\n    return value;\r\n};\r\n\r\nmodule.exports = GetAdvancedValue;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","MATH","GetValue","GetAdvancedValue","source","key","defaultValue","value","Array","isArray","RND","pick","hasOwnProperty","integerInRange","randInt","realInRange","randFloat"]
}
