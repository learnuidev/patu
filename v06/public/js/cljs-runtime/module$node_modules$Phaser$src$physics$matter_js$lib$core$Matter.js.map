{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$core$Matter.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,iEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO7H,IAAIC,OAAS,EAEbF,OAAAC,QAAA,CAAiBC,MAEjB,KAAIC,OAASJ,OAAA,CAAQ,kEAAR,CAAb,CACIK,OAASL,OAAA,CAAQ,kEAAR,CAEZ,UAAQ,EAAG,CAQRG,MAAAG,KAAA,CAAc,WAQdH,OAAAI,QAAA,CAAiB,QAQjBJ,OAAAK,KAAA,CAAc,EAQdL,OAAAM,KAAA,CAAc,EAUdN,OAAAO,IAAA,CAAaC,QAAQ,EAAG,CACpBP,MAAAM,IAAA,CAAWP,MAAX,CAAmBS,KAAAC,UAAAC,MAAAC,KAAA,CAA2BC,SAA3B,CAAnB,CADoB,CAYxBb,OAAAc,OAAA;AAAgBC,QAAQ,CAACC,IAAD,CAAOC,IAAP,CAAa,CACjCD,IAAA,CAAOA,IAAAE,QAAA,CAAa,UAAb,CAAyB,EAAzB,CACP,OAAOhB,OAAAiB,gBAAA,CAAuBnB,MAAvB,CAA+BgB,IAA/B,CAAqCC,IAArC,CAF0B,CAarCjB,OAAAoB,MAAA,CAAeC,QAAQ,CAACL,IAAD,CAAOC,IAAP,CAAa,CAChCD,IAAA,CAAOA,IAAAE,QAAA,CAAa,UAAb,CAAyB,EAAzB,CACP,OAAOhB,OAAAoB,eAAA,CAAsBtB,MAAtB,CAA8BgB,IAA9B,CAAoCC,IAApC,CAFyB,CAnE5B,CAAX,CAAD,EAd6H;",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/core/Matter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$core$Matter\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = require('./Plugin');\r\nvar Common = require('./Common');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version = '0.14.2';\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Matter","Plugin","Common","name","version","uses","used","use","Matter.use","Array","prototype","slice","call","arguments","before","Matter.before","path","func","replace","chainPathBefore","after","Matter.after","chainPathAfter"]
}
