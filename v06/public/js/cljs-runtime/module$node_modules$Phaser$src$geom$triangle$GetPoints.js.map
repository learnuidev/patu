{
"version":3,
"file":"module$node_modules$Phaser$src$geom$triangle$GetPoints.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOnH,IAAIC,OAASH,OAAA,CAAQ,iDAAR,CAAb,CACII,MAAQJ,OAAA,CAAQ,iDAAR,CA+EZC,OAAAC,QAAA,CA9DgBG,QAAS,CAACC,QAAD,CAAWC,QAAX,CAAqBC,QAArB,CAA+BC,GAA/B,CACzB,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,EAA/B,CAEA,KAAIE,MAAQL,QAAAM,SAAA,EAAZ,CACIC,MAAQP,QAAAQ,SAAA,EACRC,SAAAA,CAAQT,QAAAU,SAAA,EAEZ,KAAIC,QAAUd,MAAA,CAAOQ,KAAP,CAAd,CACIO,QAAUf,MAAA,CAAOU,KAAP,CADd,CAEIM,QAAUhB,MAAA,CAAOY,QAAP,CAFd,CAIIK,UAAYH,OAAZG,CAAsBF,OAAtBE;AAAgCD,OAG/BZ,SAAL,GAEIA,QAFJ,CAEea,SAFf,CAE2BZ,QAF3B,CAKA,KAASa,QAAT,CAAa,CAAb,CAAgBA,QAAhB,CAAoBd,QAApB,CAA8Bc,QAAA,EAA9B,CACA,CACI,IAAIC,EAAiBD,QAAjBC,CAAqBf,QAArBe,CAAIF,SAAR,CAGIG,MAAQ,IAAInB,KAIZkB,EAAJ,CAAQL,OAAR,EAGoBK,CAGhB,EAHoBL,OAGpB,CADAM,KAAAC,EACA,CADUb,KAAAc,GACV,EADsBd,KAAAe,GACtB,CADiCf,KAAAc,GACjC,EAD6CE,CAC7C,CAAAJ,KAAAK,EAAA,CAAUjB,KAAAkB,GAAV,EAAsBlB,KAAAmB,GAAtB,CAAiCnB,KAAAkB,GAAjC,EAA6CF,CANjD,EAQSL,CAAJ,CAAQL,OAAR,CAAkBC,OAAlB,EAGDI,CAIA,EAJKL,OAIL,CAJeC,OAIf,CAHgBI,CAGhB,EAHoBH,OAGpB,CADAI,KAAAC,EACA,CADUT,QAAAU,GACV,EADsBV,QAAAW,GACtB,CADiCX,QAAAU,GACjC,EAD6CE,CAC7C,CAAAJ,KAAAK,EAAA,CAAUb,QAAAc,GAAV,EAAsBd,QAAAe,GAAtB,CAAiCf,QAAAc,GAAjC,EAA6CF,CAP5C,GAYDL,CAIA,EAJKL,OAIL,CAHgBK,CAGhB,EAHoBJ,OAGpB,CADAK,KAAAC,EACA,CADUX,KAAAY,GACV,EADsBZ,KAAAa,GACtB,CADiCb,KAAAY,GACjC,EAD6CE,CAC7C,CAAAJ,KAAAK,EAAA,CAAUf,KAAAgB,GAAV,EAAsBhB,KAAAiB,GAAtB,CAAiCjB,KAAAgB,GAAjC,EAA6CF,CAhB5C,CAmBLlB,IAAAsB,KAAA,CAASR,KAAT,CAnCJ,CAsCA,MAAOd,IA1DX,CA1BmH;",
"sources":["node_modules/Phaser/src/geom/triangle/GetPoints.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$triangle$GetPoints\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Length = require('../line/Length');\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Returns an array of evenly spaced points on the perimeter of a Triangle.\r\n *\r\n * @function Phaser.Geom.Triangle.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to get the points from.\r\n * @param {integer} quantity - The number of evenly spaced points to return. Set to 0 to return an arbitrary number of points based on the `stepRate`.\r\n * @param {number} stepRate - If `quantity` is 0, the distance between each returned point.\r\n * @param {(array|Phaser.Geom.Point[])} [out] - An array to which the points should be appended.\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} The modified `out` array, or a new array if none was provided.\r\n */\r\nvar GetPoints = function (triangle, quantity, stepRate, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    var line1 = triangle.getLineA();\r\n    var line2 = triangle.getLineB();\r\n    var line3 = triangle.getLineC();\r\n\r\n    var length1 = Length(line1);\r\n    var length2 = Length(line2);\r\n    var length3 = Length(line3);\r\n\r\n    var perimeter = length1 + length2 + length3;\r\n\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity)\r\n    {\r\n        quantity = perimeter / stepRate;\r\n    }\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        var p = perimeter * (i / quantity);\r\n        var localPosition = 0;\r\n\r\n        var point = new Point();\r\n\r\n        //  Which line is it on?\r\n\r\n        if (p < length1)\r\n        {\r\n            //  Line 1\r\n            localPosition = p / length1;\r\n\r\n            point.x = line1.x1 + (line1.x2 - line1.x1) * localPosition;\r\n            point.y = line1.y1 + (line1.y2 - line1.y1) * localPosition;\r\n        }\r\n        else if (p > length1 + length2)\r\n        {\r\n            //  Line 3\r\n            p -= length1 + length2;\r\n            localPosition = p / length3;\r\n\r\n            point.x = line3.x1 + (line3.x2 - line3.x1) * localPosition;\r\n            point.y = line3.y1 + (line3.y2 - line3.y1) * localPosition;\r\n        }\r\n        else\r\n        {\r\n            //  Line 2\r\n            p -= length1;\r\n            localPosition = p / length2;\r\n\r\n            point.x = line2.x1 + (line2.x2 - line2.x1) * localPosition;\r\n            point.y = line2.y1 + (line2.y2 - line2.y1) * localPosition;\r\n        }\r\n\r\n        out.push(point);\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoints;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Length","Point","GetPoints","triangle","quantity","stepRate","out","undefined","line1","getLineA","line2","getLineB","line3","getLineC","length1","length2","length3","perimeter","i","p","point","x","x1","x2","localPosition","y","y1","y2","push"]
}
