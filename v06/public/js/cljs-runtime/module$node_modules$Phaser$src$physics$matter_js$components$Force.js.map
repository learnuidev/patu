{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$components$Force.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,kEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9H,IAAIC,KAAOH,OAAA,CAAQ,gEAAR,CAuIXC,OAAAC,QAAA,CA/HYE,CAcRC,WAAYA,QAAS,CAACC,KAAD,CACrB,CACI,IAAAC,UAAAC,IAAA,CAAmB,IAAAC,KAAAC,SAAAC,EAAnB,CAAyC,IAAAF,KAAAC,SAAAE,EAAzC,CAEAT,KAAAE,WAAA,CAAgB,IAAAI,KAAhB,CAA2B,IAAAF,UAA3B,CAA2CD,KAA3C,CAEA,OAAO,KALX,CAfQF,CAkCRS,eAAgBA,QAAS,CAACH,QAAD,CAAWJ,KAAX,CACzB,CACIH,IAAAE,WAAA,CAAgB,IAAAI,KAAhB,CAA2BC,QAA3B,CAAqCJ,KAArC,CAEA,OAAO,KAHX,CAnCQF,CAmDRU,OAAQA,QAAS,CAACC,KAAD,CACjB,CACI,IAAIC,MAAQ,IAAAP,KAAAO,MAEZ;IAAAT,UAAAC,IAAA,CAAmBO,KAAnB,CAA2BE,IAAAC,IAAA,CAASF,KAAT,CAA3B,CAA4CD,KAA5C,CAAoDE,IAAAE,IAAA,CAASH,KAAT,CAApD,CAEAb,KAAAE,WAAA,CAAgB,IAAAI,KAAhB,CAA2B,CAAEE,EAAG,IAAAF,KAAAC,SAAAC,EAAL,CAA2BC,EAAG,IAAAH,KAAAC,SAAAE,EAA9B,CAA3B,CAAiF,IAAAL,UAAjF,CAEA,OAAO,KAPX,CApDQH,CAwERgB,WAAYA,QAAS,CAACL,KAAD,CACrB,CACI,IAAIC,MAAQ,IAAAP,KAAAO,MAARA,CAA0BC,IAAAI,GAA1BL,CAAoC,CAExC,KAAAT,UAAAC,IAAA,CAAmBO,KAAnB,CAA2BE,IAAAC,IAAA,CAASF,KAAT,CAA3B,CAA4CD,KAA5C,CAAoDE,IAAAE,IAAA,CAASH,KAAT,CAApD,CAEAb,KAAAE,WAAA,CAAgB,IAAAI,KAAhB,CAA2B,CAAEE,EAAG,IAAAF,KAAAC,SAAAC,EAAL,CAA2BC,EAAG,IAAAH,KAAAC,SAAAE,EAA9B,CAA3B,CAAiF,IAAAL,UAAjF,CAEA,OAAO,KAPX,CAzEQH,CA6FRkB,YAAaA,QAAS,CAACP,KAAD,CACtB,CACI,IAAIC,MAAQ,IAAAP,KAAAO,MAARA,CAA0BC,IAAAI,GAA1BL,CAAoC,CAExC,KAAAT,UAAAC,IAAA,CAAmBO,KAAnB,CAA2BE,IAAAC,IAAA,CAASF,KAAT,CAA3B;AAA4CD,KAA5C,CAAoDE,IAAAE,IAAA,CAASH,KAAT,CAApD,CAEAb,KAAAE,WAAA,CAAgB,IAAAI,KAAhB,CAA2B,CAAEE,EAAG,IAAAF,KAAAC,SAAAC,EAAL,CAA2BC,EAAG,IAAAH,KAAAC,SAAAE,EAA9B,CAA3B,CAAiF,IAAAL,UAAjF,CAEA,OAAO,KAPX,CA9FQH,CAkHRmB,WAAYA,QAAS,CAACR,KAAD,CACrB,CACI,IAAIC,MAAQ,IAAAP,KAAAO,MAARA,CAA0BC,IAAAI,GAE9B,KAAAd,UAAAC,IAAA,CAAmBO,KAAnB,CAA2BE,IAAAC,IAAA,CAASF,KAAT,CAA3B,CAA4CD,KAA5C,CAAoDE,IAAAE,IAAA,CAASH,KAAT,CAApD,CAEAb,KAAAE,WAAA,CAAgB,IAAAI,KAAhB,CAA2B,CAAEE,EAAG,IAAAF,KAAAC,SAAAC,EAAL,CAA2BC,EAAG,IAAAH,KAAAC,SAAAE,EAA9B,CAA3B,CAAiF,IAAAL,UAAjF,CAEA,OAAO,KAPX,CAnHQH,CAfkH;",
"sources":["node_modules/Phaser/src/physics/matter-js/components/Force.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$components$Force\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Body = require('../lib/body/Body');\r\n\r\n/**\r\n * A component to apply force to Matter.js bodies.\r\n *\r\n * @name Phaser.Physics.Matter.Components.Force\r\n * @since 3.0.0\r\n */\r\nvar Force = {\r\n\r\n    //  force = vec2 / point\r\n\r\n    /**\r\n     * Applies a force to a body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#applyForce\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} force - A Vector that specifies the force to apply.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    applyForce: function (force)\r\n    {\r\n        this._tempVec2.set(this.body.position.x, this.body.position.y);\r\n\r\n        Body.applyForce(this.body, this._tempVec2, force);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Applies a force to a body from a given position.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#applyForceFrom\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} position - The position in which the force comes from.\r\n     * @param {Phaser.Math.Vector2} force - A Vector that specifies the force to apply.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    applyForceFrom: function (position, force)\r\n    {\r\n        Body.applyForce(this.body, position, force);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply thrust to the forward position of the body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#thrust\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    thrust: function (speed)\r\n    {\r\n        var angle = this.body.angle;\r\n\r\n        this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\r\n\r\n        Body.applyForce(this.body, { x: this.body.position.x, y: this.body.position.y }, this._tempVec2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply thrust to the left position of the body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#thrustLeft\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    thrustLeft: function (speed)\r\n    {\r\n        var angle = this.body.angle - Math.PI / 2;\r\n\r\n        this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\r\n\r\n        Body.applyForce(this.body, { x: this.body.position.x, y: this.body.position.y }, this._tempVec2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply thrust to the right position of the body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#thrustRight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    thrustRight: function (speed)\r\n    {\r\n        var angle = this.body.angle + Math.PI / 2;\r\n\r\n        this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\r\n\r\n        Body.applyForce(this.body, { x: this.body.position.x, y: this.body.position.y }, this._tempVec2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply thrust to the back position of the body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#thrustBack\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    thrustBack: function (speed)\r\n    {\r\n        var angle = this.body.angle - Math.PI;\r\n\r\n        this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\r\n\r\n        Body.applyForce(this.body, { x: this.body.position.x, y: this.body.position.y }, this._tempVec2);\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Force;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Body","Force","applyForce","force","_tempVec2","set","body","position","x","y","applyForceFrom","thrust","speed","angle","Math","cos","sin","thrustLeft","PI","thrustRight","thrustBack"]
}
