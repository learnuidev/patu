shadow$provide.module$node_modules$Phaser$src$cameras$2d$effects$Zoom=function(global,require,module,exports){var Clamp=require("module$node_modules$Phaser$src$math$Clamp");global=require("module$node_modules$Phaser$src$utils$Class");var EaseMap=require("module$node_modules$Phaser$src$math$easing$EaseMap");require=new global({initialize:function(camera){this.camera=camera;this.isRunning=!1;this.duration=0;this.destination=this.source=1;this._elapsed=this.progress=0},start:function(zoom,duration,ease,
force,callback,context){void 0===duration&&(duration=1E3);void 0===ease&&(ease=EaseMap.Linear);void 0===force&&(force=!1);void 0===callback&&(callback=null);void 0===context&&(context=this.camera.scene);var cam=this.camera;if(!force&&this.isRunning)return cam;this.isRunning=!0;this.duration=duration;this.progress=0;this.source=cam.zoom;this.destination=zoom;"string"===typeof ease&&EaseMap.hasOwnProperty(ease)?this.ease=EaseMap[ease]:"function"===typeof ease&&(this.ease=ease);this._elapsed=0;this._onUpdate=
callback;this._onUpdateScope=context;this.camera.emit("camerazoomstart",this.camera,this,duration,zoom);return cam},update:function(time,delta){this.isRunning&&(this._elapsed+=delta,this.progress=Clamp(this._elapsed/this.duration,0,1),this._elapsed<this.duration?(this.camera.zoom=this.source+(this.destination-this.source)*this.ease(this.progress),this._onUpdate&&this._onUpdate.call(this._onUpdateScope,this.camera,this.progress,this.camera.zoom)):(this.camera.zoom=this.destination,this._onUpdate&&
this._onUpdate.call(this._onUpdateScope,this.camera,this.progress,this.destination),this.effectComplete()))},effectComplete:function(){this._onUpdateScope=this._onUpdate=null;this.isRunning=!1;this.camera.emit("camerazoomcomplete",this.camera,this)},reset:function(){this.isRunning=!1;this._onUpdateScope=this._onUpdate=null},destroy:function(){this.reset();this.camera=null}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$cameras$2d$effects$Zoom.js.map
