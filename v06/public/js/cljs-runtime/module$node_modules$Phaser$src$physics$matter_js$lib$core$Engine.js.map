{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$core$Engine.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/core/Engine.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$core$Engine\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\r\n* An engine is a controller that manages updating the simulation of the world.\r\n* See `Matter.Runner` for an optional game loop utility.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Engine\r\n*/\r\n\r\nvar Engine = {};\r\n\r\nmodule.exports = Engine;\r\n\r\nvar World = require('../body/World');\r\nvar Sleeping = require('./Sleeping');\r\nvar Resolver = require('../collision/Resolver');\r\nvar Pairs = require('../collision/Pairs');\r\nvar Metrics = require('./Metrics');\r\nvar Grid = require('../collision/Grid');\r\nvar Events = require('./Events');\r\nvar Composite = require('../body/Composite');\r\nvar Constraint = require('../constraint/Constraint');\r\nvar Common = require('./Common');\r\nvar Body = require('../body/Body');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\r\n     * See the properties section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @param {object} [options]\r\n     * @return {engine} engine\r\n     */\r\n    Engine.create = function(element, options) {\r\n        // options may be passed as the first (and only) argument\r\n        options = Common.isElement(element) ? options : element;\r\n        element = Common.isElement(element) ? element : null;\r\n        options = options || {};\r\n\r\n        if (element || options.render) {\r\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\r\n        }\r\n\r\n        var defaults = {\r\n            positionIterations: 6,\r\n            velocityIterations: 4,\r\n            constraintIterations: 2,\r\n            enableSleeping: false,\r\n            events: [],\r\n            plugin: {},\r\n            timing: {\r\n                timestamp: 0,\r\n                timeScale: 1\r\n            },\r\n            broadphase: {\r\n                controller: Grid\r\n            }\r\n        };\r\n\r\n        var engine = Common.extend(defaults, options);\r\n\r\n        // @deprecated\r\n        if (element || engine.render) {\r\n            var renderDefaults = {\r\n                element: element,\r\n                controller: Render\r\n            };\r\n            \r\n            engine.render = Common.extend(renderDefaults, engine.render);\r\n        }\r\n\r\n        // @deprecated\r\n        if (engine.render && engine.render.controller) {\r\n            engine.render = engine.render.controller.create(engine.render);\r\n        }\r\n\r\n        // @deprecated\r\n        if (engine.render) {\r\n            engine.render.engine = engine;\r\n        }\r\n\r\n        engine.world = options.world || World.create(engine.world);\r\n        engine.pairs = Pairs.create();\r\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\r\n        engine.metrics = engine.metrics || { extended: false };\r\n\r\n        // @if DEBUG\r\n        engine.metrics = Metrics.create(engine.metrics);\r\n        // @endif\r\n\r\n        return engine;\r\n    };\r\n\r\n    /**\r\n     * Moves the simulation forward in time by `delta` ms.\r\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\r\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\r\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\r\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\r\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\r\n     *\r\n     * Triggers `beforeUpdate` and `afterUpdate` events.\r\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\r\n     * @method update\r\n     * @param {engine} engine\r\n     * @param {number} [delta=16.666]\r\n     * @param {number} [correction=1]\r\n     */\r\n    Engine.update = function(engine, delta, correction) {\r\n        delta = delta || 1000 / 60;\r\n        correction = correction || 1;\r\n\r\n        var world = engine.world,\r\n            timing = engine.timing,\r\n            broadphase = engine.broadphase,\r\n            broadphasePairs = [],\r\n            i;\r\n\r\n        // increment timestamp\r\n        timing.timestamp += delta * timing.timeScale;\r\n\r\n        // create an event object\r\n        var event = {\r\n            timestamp: timing.timestamp\r\n        };\r\n\r\n        Events.trigger(engine, 'beforeUpdate', event);\r\n\r\n        // get lists of all bodies and constraints, no matter what composites they are in\r\n        var allBodies = Composite.allBodies(world),\r\n            allConstraints = Composite.allConstraints(world);\r\n\r\n        // @if DEBUG\r\n        // reset metrics logging\r\n        Metrics.reset(engine.metrics);\r\n        // @endif\r\n\r\n        // if sleeping enabled, call the sleeping controller\r\n        if (engine.enableSleeping)\r\n            Sleeping.update(allBodies, timing.timeScale);\r\n\r\n        // applies gravity to all bodies\r\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\r\n\r\n        // update all body position and rotation by integration\r\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\r\n\r\n        // update all constraints (first pass)\r\n        Constraint.preSolveAll(allBodies);\r\n        for (i = 0; i < engine.constraintIterations; i++) {\r\n            Constraint.solveAll(allConstraints, timing.timeScale);\r\n        }\r\n        Constraint.postSolveAll(allBodies);\r\n\r\n        // broadphase pass: find potential collision pairs\r\n        if (broadphase.controller) {\r\n            // if world is dirty, we must flush the whole grid\r\n            if (world.isModified)\r\n                broadphase.controller.clear(broadphase);\r\n\r\n            // update the grid buckets based on current bodies\r\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\r\n            broadphasePairs = broadphase.pairsList;\r\n        } else {\r\n            // if no broadphase set, we just pass all bodies\r\n            broadphasePairs = allBodies;\r\n        }\r\n\r\n        // clear all composite modified flags\r\n        if (world.isModified) {\r\n            Composite.setModified(world, false, false, true);\r\n        }\r\n\r\n        // narrowphase pass: find actual collisions, then create or update collision pairs\r\n        var collisions = broadphase.detector(broadphasePairs, engine);\r\n\r\n        // update collision pairs\r\n        var pairs = engine.pairs,\r\n            timestamp = timing.timestamp;\r\n        Pairs.update(pairs, collisions, timestamp);\r\n        Pairs.removeOld(pairs, timestamp);\r\n\r\n        // wake up bodies involved in collisions\r\n        if (engine.enableSleeping)\r\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\r\n\r\n        // trigger collision events\r\n        if (pairs.collisionStart.length > 0)\r\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\r\n\r\n        // iteratively resolve position between collisions\r\n        Resolver.preSolvePosition(pairs.list);\r\n        for (i = 0; i < engine.positionIterations; i++) {\r\n            Resolver.solvePosition(pairs.list, allBodies, timing.timeScale);\r\n        }\r\n        Resolver.postSolvePosition(allBodies);\r\n\r\n        // update all constraints (second pass)\r\n        Constraint.preSolveAll(allBodies);\r\n        for (i = 0; i < engine.constraintIterations; i++) {\r\n            Constraint.solveAll(allConstraints, timing.timeScale);\r\n        }\r\n        Constraint.postSolveAll(allBodies);\r\n\r\n        // iteratively resolve velocity between collisions\r\n        Resolver.preSolveVelocity(pairs.list);\r\n        for (i = 0; i < engine.velocityIterations; i++) {\r\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\r\n        }\r\n\r\n        // trigger collision events\r\n        if (pairs.collisionActive.length > 0)\r\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\r\n\r\n        if (pairs.collisionEnd.length > 0)\r\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\r\n\r\n        // @if DEBUG\r\n        // update metrics log\r\n        Metrics.update(engine.metrics, engine);\r\n        // @endif\r\n\r\n        // clear force buffers\r\n        Engine._bodiesClearForces(allBodies);\r\n\r\n        Events.trigger(engine, 'afterUpdate', event);\r\n\r\n        return engine;\r\n    };\r\n    \r\n    /**\r\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\r\n     * @method merge\r\n     * @param {engine} engineA\r\n     * @param {engine} engineB\r\n     */\r\n    Engine.merge = function(engineA, engineB) {\r\n        Common.extend(engineA, engineB);\r\n        \r\n        if (engineB.world) {\r\n            engineA.world = engineB.world;\r\n\r\n            Engine.clear(engineA);\r\n\r\n            var bodies = Composite.allBodies(engineA.world);\r\n\r\n            for (var i = 0; i < bodies.length; i++) {\r\n                var body = bodies[i];\r\n                Sleeping.set(body, false);\r\n                body.id = Common.nextId();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Clears the engine including the world, pairs and broadphase.\r\n     * @method clear\r\n     * @param {engine} engine\r\n     */\r\n    Engine.clear = function(engine) {\r\n        var world = engine.world;\r\n        \r\n        Pairs.clear(engine.pairs);\r\n\r\n        var broadphase = engine.broadphase;\r\n        if (broadphase.controller) {\r\n            var bodies = Composite.allBodies(world);\r\n            broadphase.controller.clear(broadphase);\r\n            broadphase.controller.update(broadphase, bodies, engine, true);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Zeroes the `body.force` and `body.torque` force buffers.\r\n     * @method _bodiesClearForces\r\n     * @private\r\n     * @param {body[]} bodies\r\n     */\r\n    Engine._bodiesClearForces = function(bodies) {\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n\r\n            // reset force buffers\r\n            body.force.x = 0;\r\n            body.force.y = 0;\r\n            body.torque = 0;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Applys a mass dependant force to all given bodies.\r\n     * @method _bodiesApplyGravity\r\n     * @private\r\n     * @param {body[]} bodies\r\n     * @param {vector} gravity\r\n     */\r\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\r\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\r\n\r\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\r\n            return;\r\n        }\r\n        \r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n\r\n            if (body.ignoreGravity || body.isStatic || body.isSleeping)\r\n                continue;\r\n\r\n            // apply gravity\r\n            body.force.y += body.mass * gravity.y * gravityScale;\r\n            body.force.x += body.mass * gravity.x * gravityScale;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Applys `Body.update` to all given `bodies`.\r\n     * @method _bodiesUpdate\r\n     * @private\r\n     * @param {body[]} bodies\r\n     * @param {number} deltaTime \r\n     * The amount of time elapsed between updates\r\n     * @param {number} timeScale\r\n     * @param {number} correction \r\n     * The Verlet correction factor (deltaTime / lastDeltaTime)\r\n     * @param {bounds} worldBounds\r\n     */\r\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n\r\n            if (body.isStatic || body.isSleeping)\r\n                continue;\r\n\r\n            Body.update(body, deltaTime, timeScale, correction);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\r\n     * @method run\r\n     * @param {engine} engine\r\n     */\r\n\r\n    /**\r\n    * Fired just before an update\r\n    *\r\n    * @event beforeUpdate\r\n    * @param {} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine update and all collision events\r\n    *\r\n    * @event afterUpdate\r\n    * @param {} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\r\n    *\r\n    * @event collisionStart\r\n    * @param {} event An event object\r\n    * @param {} event.pairs List of affected pairs\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\r\n    *\r\n    * @event collisionActive\r\n    * @param {} event An event object\r\n    * @param {} event.pairs List of affected pairs\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\r\n    *\r\n    * @event collisionEnd\r\n    * @param {} event An event object\r\n    * @param {} event.pairs List of affected pairs\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * An integer `Number` that specifies the number of position iterations to perform each update.\r\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\r\n     *\r\n     * @property positionIterations\r\n     * @type number\r\n     * @default 6\r\n     */\r\n\r\n    /**\r\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\r\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\r\n     *\r\n     * @property velocityIterations\r\n     * @type number\r\n     * @default 4\r\n     */\r\n\r\n    /**\r\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\r\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\r\n     * The default value of `2` is usually very adequate.\r\n     *\r\n     * @property constraintIterations\r\n     * @type number\r\n     * @default 2\r\n     */\r\n\r\n    /**\r\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\r\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\r\n     *\r\n     * @property enableSleeping\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * An `Object` containing properties regarding the timing systems of the engine. \r\n     *\r\n     * @property timing\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the global scaling factor of time for all bodies.\r\n     * A value of `0` freezes the simulation.\r\n     * A value of `0.1` gives a slow-motion effect.\r\n     * A value of `1.2` gives a speed-up effect.\r\n     *\r\n     * @property timing.timeScale\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \r\n     * It is incremented on every `Engine.update` by the given `delta` argument. \r\n     *\r\n     * @property timing.timestamp\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\r\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\r\n     *\r\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\r\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\r\n     *\r\n     * @property render\r\n     * @type render\r\n     * @deprecated see Demo.js for an example of creating a renderer\r\n     * @default a Matter.Render instance\r\n     */\r\n\r\n    /**\r\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\r\n     *\r\n     * @property broadphase\r\n     * @type grid\r\n     * @default a Matter.Grid instance\r\n     */\r\n\r\n    /**\r\n     * A `World` composite object that will contain all simulated bodies and constraints.\r\n     *\r\n     * @property world\r\n     * @type world\r\n     * @default a Matter.World instance\r\n     */\r\n\r\n    /**\r\n     * An object reserved for storing plugin-specific properties.\r\n     *\r\n     * @property plugin\r\n     * @type {}\r\n     */\r\n\r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Engine","World","Sleeping","Resolver","Pairs","Metrics","Grid","Events","Composite","Constraint","Common","Body","create","Engine.create","element","options","isElement","render","warn","engine","extend","defaults","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","plugin","timing","timestamp","timeScale","broadphase","controller","renderDefaults","Render","world","pairs","metrics","extended","update","Engine.update","delta","correction","event","trigger","allBodies","allConstraints","reset","_bodiesApplyGravity","gravity","_bodiesUpdate","bounds","preSolveAll","i","solveAll","postSolveAll","isModified","clear","broadphasePairs","pairsList","setModified","collisions","detector","removeOld","afterCollisions","list","collisionStart","length","preSolvePosition","solvePosition","postSolvePosition","preSolveVelocity","solveVelocity","collisionActive","collisionEnd","_bodiesClearForces","merge","Engine.merge","engineA","engineB","bodies","body","set","id","nextId","Engine.clear","Engine._bodiesClearForces","force","x","y","torque","Engine._bodiesApplyGravity","gravityScale","scale","ignoreGravity","isStatic","isSleeping","mass","Engine._bodiesUpdate","deltaTime","worldBounds"]
}
