{"version":3,"sources":["app/examples/patuv06/one.cljs"],"mappings":";;;AAkBA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AAAgB,AAAA,AAACC;AAKlB,AAAA,AAACC;AACD,AAAA,AAAA,AAACC;AACD,AAAA,AAAA,AAACA;AAWD,AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAeD,AAAA,AAACC,AAEA,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAQE;AAAR,AAAAD,AAAAD,AAAA,AAAA,AAAUG;AAAV,AACE,AAAMC,AAAO,AAACC,AAAS,AAACC,AAAKH;AAA7B,AAEE,AAAM,AAAA,AAAIC,AAAgB,AAAA,AAAM,AAAA,AAAIA;;AAGzC,AAAA,AAAA,AAAA,AAAA,AAACP,AACkB;AAAA,AAAA;AADnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AASY,AAAA,AAAA,AAAA,AAACU;;AAEb,AAAA,AAAMC;AAAN,AAAA;;AAEA","names":["app.examples.patuv06.core.kaboom","js/document.getElementById","app.examples.patuv06.core/load-root","app.examples.patuv06.core/load-sprite","app.examples.patuv06.core/dispatch-n","app.examples.patuv06.core/reg-event","p__40083","vec__40084","cljs.core.nth","_","id","player","app.examples.patuv06.core/get-comp","cljs.core/name","app.examples.patuv06.core/dispatch","app.examples.patuv06.one/app"],"sourcesContent":["(ns app.examples.patuv06.one\n  (:require [app.examples.patuv06.core :refer\n             [;; init\n              kaboom\n                ;; Loaders\n              load-root\n              load-sprite\n               ;; state\n              state\n               ;; Components\n              get-comp\n              reg-comp\n               ;; Event\n              reg-event\n              dispatch\n              dispatch-n]]))\n\n;; 0. Initialize\n(kaboom {:canvas (js/document.getElementById \"app\")\n         :global true\n         :fullscreen false})\n\n;; 1. Load\n(load-root \"https://kaboomjs.com/pub/examples/\");\n(load-sprite  :bg, \"img/bg.png\");\n(load-sprite  :birdy, \"img/birdy.png\");\n\n\n;; Multiple component registration - ideal for spawning enemies\n#_(reg-comp-n\n   (for [n (range 10)]\n     [[:sprite :birdy]\n      [:pos [(+ 30 (* 60 n)) (+ 30 (* 60 n))]]\n      [:solid]\n      :birdy]))\n\n(comment\n  (get-comp :birdy)\n  (get-comp :player))\n\n(dispatch-n\n [[:comp/reg :player [[:sprite :birdy]\n                      [:solid]\n                      [:pos [100 100]]]]\n  [:comp/reg [[:sprite :birdy]\n              [:solid]\n              [:pos [250 100]]\n              :birdy]]\n  #_[:comp/reg-n\n     (for [n (range 10)]\n       [[:sprite :birdy]\n        [:pos [(+ 30 (* 60 n)) (+ 30 (* 60 n))]]\n        [:solid]\n        :birdy])]])\n\n(reg-event\n :player/go-south\n (fn [_ [_ id]]\n   (let [player (get-comp (name id))]\n     ; (js/console.log player)\n     (set! (.. player -pos -y) (+ 10 (.. player -pos -y))))))\n\n;; Two ways to write handler function\n(dispatch-n\n [[:action :player (fn [])]\n  ;; Multiple Event Registation\n  [:key-down\n  ;; For simple cases use data syntax\n   [:right [[:player {:x 10}]]]\n   [:left  [[:player {:x -10}]]]\n   [:up    {:player {:y -10}}]\n  ;; For more complex scenario: use event registration\n   [:down  #(dispatch [:player/go-south :player])]]])\n\n(defn app [])\n\n(comment\n  (= js/Function (type app)))\n"]}