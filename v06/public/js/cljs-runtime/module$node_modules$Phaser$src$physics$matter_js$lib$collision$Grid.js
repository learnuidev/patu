shadow$provide.module$node_modules$Phaser$src$physics$matter_js$lib$collision$Grid=function(global,require,module,exports){var Grid={};module.exports=Grid;var Pair=require("module$node_modules$Phaser$src$physics$matter_js$lib$collision$Pair"),Detector=require("module$node_modules$Phaser$src$physics$matter_js$lib$collision$Detector"),Common=require("module$node_modules$Phaser$src$physics$matter_js$lib$core$Common");(function(){Grid.create=function(options){return Common.extend({controller:Grid,detector:Detector.collisions,
buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48},options)};Grid.update=function(grid,bodies,engine,forceUpdate){var row,world=engine.world,buckets=grid.buckets;var col=!1;var metrics=engine.metrics;for(engine=metrics.broadphaseTests=0;engine<bodies.length;engine++){var body=bodies[engine];if(!(body.isSleeping&&!forceUpdate||body.bounds.max.x<world.bounds.min.x||body.bounds.min.x>world.bounds.max.x||body.bounds.max.y<world.bounds.min.y||body.bounds.min.y>world.bounds.max.y)){var newRegion=
Grid._getRegion(grid,body);if(!body.region||newRegion.id!==body.region.id||forceUpdate){metrics.broadphaseTests+=1;if(!body.region||forceUpdate)body.region=newRegion;var union=Grid._regionUnion(newRegion,body.region);for(col=union.startCol;col<=union.endCol;col++)for(row=union.startRow;row<=union.endRow;row++){var bucketId=Grid._getBucketId(col,row);var bucket=buckets[bucketId];var isInsideNewRegion=col>=newRegion.startCol&&col<=newRegion.endCol&&row>=newRegion.startRow&&row<=newRegion.endRow,isInsideOldRegion=
col>=body.region.startCol&&col<=body.region.endCol&&row>=body.region.startRow&&row<=body.region.endRow;!isInsideNewRegion&&isInsideOldRegion&&isInsideOldRegion&&bucket&&Grid._bucketRemoveBody(grid,bucket,body);if(body.region===newRegion||isInsideNewRegion&&!isInsideOldRegion||forceUpdate)bucket||(bucket=Grid._createBucket(buckets,bucketId)),Grid._bucketAddBody(grid,bucket,body)}body.region=newRegion;col=!0}}}col&&(grid.pairsList=Grid._createActivePairsList(grid))};Grid.clear=function(grid){grid.buckets=
{};grid.pairs={};grid.pairsList=[]};Grid._regionUnion=function(regionA,regionB){return Grid._createRegion(Math.min(regionA.startCol,regionB.startCol),Math.max(regionA.endCol,regionB.endCol),Math.min(regionA.startRow,regionB.startRow),Math.max(regionA.endRow,regionB.endRow))};Grid._getRegion=function(grid,body){body=body.bounds;return Grid._createRegion(Math.floor(body.min.x/grid.bucketWidth),Math.floor(body.max.x/grid.bucketWidth),Math.floor(body.min.y/grid.bucketHeight),Math.floor(body.max.y/grid.bucketHeight))};
Grid._createRegion=function(startCol,endCol,startRow,endRow){return{id:startCol+","+endCol+","+startRow+","+endRow,startCol:startCol,endCol:endCol,startRow:startRow,endRow:endRow}};Grid._getBucketId=function(column,row){return"C"+column+"R"+row};Grid._createBucket=function(buckets,bucketId){return buckets[bucketId]=[]};Grid._bucketAddBody=function(grid,bucket,body){for(var i=0;i<bucket.length;i++){var bodyB=bucket[i];if(!(body.id===bodyB.id||body.isStatic&&bodyB.isStatic)){var pairId=Pair.id(body,
bodyB),pair=grid.pairs[pairId];pair?pair[2]+=1:grid.pairs[pairId]=[body,bodyB,1]}}bucket.push(body)};Grid._bucketRemoveBody=function(grid,bucket,body){bucket.splice(Common.indexOf(bucket,body),1);for(var i=0;i<bucket.length;i++){var pairId=Pair.id(body,bucket[i]);(pairId=grid.pairs[pairId])&&--pairId[2]}};Grid._createActivePairsList=function(grid){var pairs=[];var pairKeys=Common.keys(grid.pairs);for(var k=0;k<pairKeys.length;k++){var pair=grid.pairs[pairKeys[k]];0<pair[2]?pairs.push(pair):delete grid.pairs[pairKeys[k]]}return pairs}})()}
//# sourceMappingURL=module$node_modules$Phaser$src$physics$matter_js$lib$collision$Grid.js.map
