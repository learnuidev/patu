{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$CalculateFacesAt.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,oEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOhI,IAAIC,UAAYH,OAAA,CAAQ,8DAAR,CA+DhBC,OAAAC,QAAA,CAhDuBE,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAeC,KAAf,CAChC,CACI,IAAIC,KAAOL,SAAA,CAAUE,KAAV,CAAiBC,KAAjB,CAAwB,CAAA,CAAxB,CAA8BC,KAA9B,CAAX,CACIE,MAAQN,SAAA,CAAUE,KAAV,CAAiBC,KAAjB,CAAyB,CAAzB,CAA4B,CAAA,CAA5B,CAAkCC,KAAlC,CADZ,CAEIG,MAAQP,SAAA,CAAUE,KAAV,CAAiBC,KAAjB,CAAyB,CAAzB,CAA4B,CAAA,CAA5B,CAAkCC,KAAlC,CAFZ,CAGII,KAAOR,SAAA,CAAUE,KAAV,CAAkB,CAAlB,CAAqBC,KAArB,CAA4B,CAAA,CAA5B,CAAkCC,KAAlC,CACPK,MAAAA,CAAQT,SAAA,CAAUE,KAAV,CAAkB,CAAlB,CAAqBC,KAArB,CAA4B,CAAA,CAA5B,CAAkCC,KAAlC,CAIZ,IAHIM,KAGJ,CAHmBL,IAGnB,EAH2BA,IAAAM,SAG3B,CAEIN,IAAAO,QAGA,CAHe,CAAA,CAGf,CAFAP,IAAAQ,WAEA;AAFkB,CAAA,CAElB,CADAR,IAAAS,SACA,CADgB,CAAA,CAChB,CAAAT,IAAAU,UAAA,CAAiB,CAAA,CAIjBT,MAAJ,EAAaA,KAAAK,SAAb,GAEQD,KACJ,GADoBL,IAAAO,QACpB,CADmC,CAAA,CACnC,EAAAN,KAAAO,WAAA,CAAmB,CAACH,KAHxB,CAMIH,MAAJ,EAAaA,KAAAI,SAAb,GAEQD,KACJ,GADoBL,IAAAQ,WACpB,CADsC,CAAA,CACtC,EAAAN,KAAAK,QAAA,CAAgB,CAACF,KAHrB,CAMIF,KAAJ,EAAYA,IAAAG,SAAZ,GAEQD,KACJ,GADoBL,IAAAS,SACpB,CADoC,CAAA,CACpC,EAAAN,IAAAO,UAAA,CAAiB,CAACL,KAHtB,CAMID,MAAJ,EAAaA,KAAAE,SAAb,GAEQD,KACJ,GADoBL,IAAAU,UACpB,CADqC,CAAA,CACrC,EAAAN,KAAAK,SAAA,CAAiB,CAACJ,KAHtB,CAMIL,KAAJ,EAAY,CAACA,IAAAM,SAAb,EAA8BN,IAAAW,WAAA,EAE9B,OAAOX,KA5CX,CAvBgI;",
"sources":["node_modules/Phaser/src/tilemaps/components/CalculateFacesAt.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$CalculateFacesAt\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetTileAt = require('./GetTileAt');\r\n\r\n/**\r\n * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n * internally to optimize recalculating faces when only one tile has been changed.\r\n *\r\n * @function Phaser.Tilemaps.Components.CalculateFacesAt\r\n * @private\r\n * @since 3.0.0\r\n * \r\n * @param {integer} tileX - The x coordinate.\r\n * @param {integer} tileY - The y coordinate.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar CalculateFacesAt = function (tileX, tileY, layer)\r\n{\r\n    var tile = GetTileAt(tileX, tileY, true, layer);\r\n    var above = GetTileAt(tileX, tileY - 1, true, layer);\r\n    var below = GetTileAt(tileX, tileY + 1, true, layer);\r\n    var left = GetTileAt(tileX - 1, tileY, true, layer);\r\n    var right = GetTileAt(tileX + 1, tileY, true, layer);\r\n    var tileCollides = tile && tile.collides;\r\n\r\n    // Assume the changed tile has all interesting edges\r\n    if (tileCollides)\r\n    {\r\n        tile.faceTop = true;\r\n        tile.faceBottom = true;\r\n        tile.faceLeft = true;\r\n        tile.faceRight = true;\r\n    }\r\n\r\n    // Reset edges that are shared between tile and its neighbors\r\n    if (above && above.collides)\r\n    {\r\n        if (tileCollides) { tile.faceTop = false; }\r\n        above.faceBottom = !tileCollides;\r\n    }\r\n\r\n    if (below && below.collides)\r\n    {\r\n        if (tileCollides) { tile.faceBottom = false; }\r\n        below.faceTop = !tileCollides;\r\n    }\r\n\r\n    if (left && left.collides)\r\n    {\r\n        if (tileCollides) { tile.faceLeft = false; }\r\n        left.faceRight = !tileCollides;\r\n    }\r\n\r\n    if (right && right.collides)\r\n    {\r\n        if (tileCollides) { tile.faceRight = false; }\r\n        right.faceLeft = !tileCollides;\r\n    }\r\n\r\n    if (tile && !tile.collides) { tile.resetFaces(); }\r\n\r\n    return tile;\r\n};\r\n\r\nmodule.exports = CalculateFacesAt;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetTileAt","CalculateFacesAt","tileX","tileY","layer","tile","above","below","left","right","tileCollides","collides","faceTop","faceBottom","faceLeft","faceRight","resetFaces"]
}
