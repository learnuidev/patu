{
"version":3,
"file":"module$node_modules$Phaser$src$math$Rotate.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6BvGD,MAAAC,QAAA,CAXaC,QAAS,CAACC,KAAD,CAAQC,KAAR,CACtB,CACI,IAAIC,EAAIF,KAAAE,EAAR,CACIC,EAAIH,KAAAG,EAERH,MAAAE,EAAA,CAAWA,CAAX,CAAeE,IAAAC,IAAA,CAASJ,KAAT,CAAf,CAAmCE,CAAnC,CAAuCC,IAAAE,IAAA,CAASL,KAAT,CACvCD,MAAAG,EAAA,CAAWD,CAAX,CAAeE,IAAAE,IAAA,CAASL,KAAT,CAAf,CAAmCE,CAAnC,CAAuCC,IAAAC,IAAA,CAASJ,KAAT,CAEvC,OAAOD,MAPX,CAnBuG;",
"sources":["node_modules/Phaser/src/math/Rotate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$Rotate\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Rotate a given point by a given angle around the origin (0, 0), in an anti-clockwise direction.\r\n *\r\n * @function Phaser.Math.Rotate\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Point|object)} point - The point to be rotated.\r\n * @param {number} angle - The angle to be rotated by in an anticlockwise direction.\r\n *\r\n * @return {Phaser.Geom.Point} The given point, rotated by the given angle in an anticlockwise direction.\r\n */\r\nvar Rotate = function (point, angle)\r\n{\r\n    var x = point.x;\r\n    var y = point.y;\r\n\r\n    point.x = (x * Math.cos(angle)) - (y * Math.sin(angle));\r\n    point.y = (x * Math.sin(angle)) + (y * Math.cos(angle));\r\n\r\n    return point;\r\n};\r\n\r\nmodule.exports = Rotate;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Rotate","point","angle","x","y","Math","cos","sin"]
}
