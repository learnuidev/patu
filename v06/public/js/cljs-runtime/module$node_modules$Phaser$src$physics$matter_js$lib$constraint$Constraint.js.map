{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$constraint$Constraint.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/constraint/Constraint.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$constraint$Constraint\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\r\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\r\n* The stiffness of constraints can be modified to create springs or elastic.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Constraint\r\n*/\r\n\r\nvar Constraint = {};\r\n\r\nmodule.exports = Constraint;\r\n\r\nvar Vertices = require('../geometry/Vertices');\r\nvar Vector = require('../geometry/Vector');\r\nvar Sleeping = require('../core/Sleeping');\r\nvar Bounds = require('../geometry/Bounds');\r\nvar Axes = require('../geometry/Axes');\r\nvar Common = require('../core/Common');\r\n\r\n(function() {\r\n\r\n    Constraint._warming = 0.4;\r\n    Constraint._torqueDampen = 1;\r\n    Constraint._minLength = 0.000001;\r\n\r\n    /**\r\n     * Creates a new constraint.\r\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\r\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\r\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\r\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\r\n     * See the properties section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @param {} options\r\n     * @return {constraint} constraint\r\n     */\r\n    Constraint.create = function(options) {\r\n        var constraint = options;\r\n\r\n        // if bodies defined but no points, use body centre\r\n        if (constraint.bodyA && !constraint.pointA)\r\n            constraint.pointA = { x: 0, y: 0 };\r\n        if (constraint.bodyB && !constraint.pointB)\r\n            constraint.pointB = { x: 0, y: 0 };\r\n\r\n        // calculate static length using initial world space points\r\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\r\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\r\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\r\n    \r\n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\r\n\r\n        // option defaults\r\n        constraint.id = constraint.id || Common.nextId();\r\n        constraint.label = constraint.label || 'Constraint';\r\n        constraint.type = 'constraint';\r\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\r\n        constraint.damping = constraint.damping || 0;\r\n        constraint.angularStiffness = constraint.angularStiffness || 0;\r\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\r\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\r\n        constraint.plugin = {};\r\n\r\n        // render\r\n        var render = {\r\n            visible: true,\r\n            lineWidth: 2,\r\n            strokeStyle: '#ffffff',\r\n            type: 'line',\r\n            anchors: true\r\n        };\r\n\r\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\r\n            render.type = 'pin';\r\n            render.anchors = false;\r\n        } else if (constraint.stiffness < 0.9) {\r\n            render.type = 'spring';\r\n        }\r\n\r\n        constraint.render = Common.extend(render, constraint.render);\r\n\r\n        return constraint;\r\n    };\r\n\r\n    /**\r\n     * Prepares for solving by constraint warming.\r\n     * @private\r\n     * @method preSolveAll\r\n     * @param {body[]} bodies\r\n     */\r\n    Constraint.preSolveAll = function(bodies) {\r\n        for (var i = 0; i < bodies.length; i += 1) {\r\n            var body = bodies[i],\r\n                impulse = body.constraintImpulse;\r\n\r\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\r\n                continue;\r\n            }\r\n\r\n            body.position.x += impulse.x;\r\n            body.position.y += impulse.y;\r\n            body.angle += impulse.angle;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Solves all constraints in a list of collisions.\r\n     * @private\r\n     * @method solveAll\r\n     * @param {constraint[]} constraints\r\n     * @param {number} timeScale\r\n     */\r\n    Constraint.solveAll = function(constraints, timeScale) {\r\n        // Solve fixed constraints first.\r\n        for (var i = 0; i < constraints.length; i += 1) {\r\n            var constraint = constraints[i],\r\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\r\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\r\n\r\n            if (fixedA || fixedB) {\r\n                Constraint.solve(constraints[i], timeScale);\r\n            }\r\n        }\r\n\r\n        // Solve free constraints last.\r\n        for (i = 0; i < constraints.length; i += 1) {\r\n            constraint = constraints[i];\r\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\r\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\r\n\r\n            if (!fixedA && !fixedB) {\r\n                Constraint.solve(constraints[i], timeScale);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Solves a distance constraint with Gauss-Siedel method.\r\n     * @private\r\n     * @method solve\r\n     * @param {constraint} constraint\r\n     * @param {number} timeScale\r\n     */\r\n    Constraint.solve = function(constraint, timeScale) {\r\n        var bodyA = constraint.bodyA,\r\n            bodyB = constraint.bodyB,\r\n            pointA = constraint.pointA,\r\n            pointB = constraint.pointB;\r\n\r\n        if (!bodyA && !bodyB)\r\n            return;\r\n\r\n        // update reference angle\r\n        if (bodyA && !bodyA.isStatic) {\r\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\r\n            constraint.angleA = bodyA.angle;\r\n        }\r\n        \r\n        // update reference angle\r\n        if (bodyB && !bodyB.isStatic) {\r\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\r\n            constraint.angleB = bodyB.angle;\r\n        }\r\n\r\n        var pointAWorld = pointA,\r\n            pointBWorld = pointB;\r\n\r\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\r\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\r\n\r\n        if (!pointAWorld || !pointBWorld)\r\n            return;\r\n\r\n        var delta = Vector.sub(pointAWorld, pointBWorld),\r\n            currentLength = Vector.magnitude(delta);\r\n\r\n        // prevent singularity\r\n        if (currentLength < Constraint._minLength) {\r\n            currentLength = Constraint._minLength;\r\n        }\r\n\r\n        // solve distance constraint with Gauss-Siedel method\r\n        var difference = (currentLength - constraint.length) / currentLength,\r\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\r\n            force = Vector.mult(delta, difference * stiffness),\r\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\r\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\r\n            resistanceTotal = massTotal + inertiaTotal,\r\n            torque,\r\n            share,\r\n            normal,\r\n            normalVelocity,\r\n            relativeVelocity;\r\n\r\n        if (constraint.damping) {\r\n            var zero = Vector.create();\r\n            normal = Vector.div(delta, currentLength);\r\n\r\n            relativeVelocity = Vector.sub(\r\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\r\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\r\n            );\r\n\r\n            normalVelocity = Vector.dot(normal, relativeVelocity);\r\n        }\r\n\r\n        if (bodyA && !bodyA.isStatic) {\r\n            share = bodyA.inverseMass / massTotal;\r\n\r\n            // keep track of applied impulses for post solving\r\n            bodyA.constraintImpulse.x -= force.x * share;\r\n            bodyA.constraintImpulse.y -= force.y * share;\r\n\r\n            // apply forces\r\n            bodyA.position.x -= force.x * share;\r\n            bodyA.position.y -= force.y * share;\r\n\r\n            // apply damping\r\n            if (constraint.damping) {\r\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\r\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\r\n            }\r\n\r\n            // apply torque\r\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\r\n            bodyA.constraintImpulse.angle -= torque;\r\n            bodyA.angle -= torque;\r\n        }\r\n\r\n        if (bodyB && !bodyB.isStatic) {\r\n            share = bodyB.inverseMass / massTotal;\r\n\r\n            // keep track of applied impulses for post solving\r\n            bodyB.constraintImpulse.x += force.x * share;\r\n            bodyB.constraintImpulse.y += force.y * share;\r\n            \r\n            // apply forces\r\n            bodyB.position.x += force.x * share;\r\n            bodyB.position.y += force.y * share;\r\n\r\n            // apply damping\r\n            if (constraint.damping) {\r\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\r\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\r\n            }\r\n\r\n            // apply torque\r\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\r\n            bodyB.constraintImpulse.angle += torque;\r\n            bodyB.angle += torque;\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Performs body updates required after solving constraints.\r\n     * @private\r\n     * @method postSolveAll\r\n     * @param {body[]} bodies\r\n     */\r\n    Constraint.postSolveAll = function(bodies) {\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                impulse = body.constraintImpulse;\r\n\r\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\r\n                continue;\r\n            }\r\n\r\n            Sleeping.set(body, false);\r\n\r\n            // update geometry and reset\r\n            for (var j = 0; j < body.parts.length; j++) {\r\n                var part = body.parts[j];\r\n                \r\n                Vertices.translate(part.vertices, impulse);\r\n\r\n                if (j > 0) {\r\n                    part.position.x += impulse.x;\r\n                    part.position.y += impulse.y;\r\n                }\r\n\r\n                if (impulse.angle !== 0) {\r\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\r\n                    Axes.rotate(part.axes, impulse.angle);\r\n                    if (j > 0) {\r\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\r\n                    }\r\n                }\r\n\r\n                Bounds.update(part.bounds, part.vertices, body.velocity);\r\n            }\r\n\r\n            // dampen the cached impulse for warming next step\r\n            impulse.angle *= Constraint._warming;\r\n            impulse.x *= Constraint._warming;\r\n            impulse.y *= Constraint._warming;\r\n        }\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\r\n     *\r\n     * @property id\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * A `String` denoting the type of object.\r\n     *\r\n     * @property type\r\n     * @type string\r\n     * @default \"constraint\"\r\n     * @readOnly\r\n     */\r\n\r\n    /**\r\n     * An arbitrary `String` name to help the user identify and manage bodies.\r\n     *\r\n     * @property label\r\n     * @type string\r\n     * @default \"Constraint\"\r\n     */\r\n\r\n    /**\r\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\r\n     *\r\n     * @property render\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * A flag that indicates if the constraint should be rendered.\r\n     *\r\n     * @property render.visible\r\n     * @type boolean\r\n     * @default true\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the line width to use when rendering the constraint outline.\r\n     * A value of `0` means no outline will be rendered.\r\n     *\r\n     * @property render.lineWidth\r\n     * @type number\r\n     * @default 2\r\n     */\r\n\r\n    /**\r\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\r\n     * It is the same as when using a canvas, so it accepts CSS style property values.\r\n     *\r\n     * @property render.strokeStyle\r\n     * @type string\r\n     * @default a random colour\r\n     */\r\n\r\n    /**\r\n     * A `String` that defines the constraint rendering type. \r\n     * The possible values are 'line', 'pin', 'spring'.\r\n     * An appropriate render type will be automatically chosen unless one is given in options.\r\n     *\r\n     * @property render.type\r\n     * @type string\r\n     * @default 'line'\r\n     */\r\n\r\n    /**\r\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\r\n     *\r\n     * @property render.anchors\r\n     * @type boolean\r\n     * @default true\r\n     */\r\n\r\n    /**\r\n     * The first possible `Body` that this constraint is attached to.\r\n     *\r\n     * @property bodyA\r\n     * @type body\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * The second possible `Body` that this constraint is attached to.\r\n     *\r\n     * @property bodyB\r\n     * @type body\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\r\n     *\r\n     * @property pointA\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\r\n     *\r\n     * @property pointB\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\r\n     * A value of `1` means the constraint should be very stiff.\r\n     * A value of `0.2` means the constraint acts like a soft spring.\r\n     *\r\n     * @property stiffness\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the damping of the constraint, \r\n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\r\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\r\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\r\n     * A value of `0` means the constraint will apply no damping.\r\n     *\r\n     * @property damping\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the target resting length of the constraint. \r\n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\r\n     *\r\n     * @property length\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * An object reserved for storing plugin-specific properties.\r\n     *\r\n     * @property plugin\r\n     * @type {}\r\n     */\r\n\r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Constraint","Vertices","Vector","Sleeping","Bounds","Axes","Common","_warming","_torqueDampen","_minLength","create","Constraint.create","options","bodyA","pointA","x","y","bodyB","pointB","initialPointA","add","position","initialPointB","length","magnitude","sub","id","nextId","label","type","stiffness","damping","angularStiffness","angleA","angle","angleB","plugin","render","visible","lineWidth","strokeStyle","anchors","extend","preSolveAll","Constraint.preSolveAll","bodies","i","body","impulse","constraintImpulse","isStatic","solveAll","Constraint.solveAll","constraints","timeScale","constraint","fixedA","fixedB","solve","Constraint.solve","rotate","pointAWorld","pointBWorld","delta","currentLength","force","mult","massTotal","inverseMass","resistanceTotal","inverseInertia","zero","normal","div","relativeVelocity","positionPrev","normalVelocity","dot","share","torque","cross","postSolveAll","Constraint.postSolveAll","set","j","parts","part","translate","vertices","axes","rotateAbout","update","bounds","velocity"]
}
