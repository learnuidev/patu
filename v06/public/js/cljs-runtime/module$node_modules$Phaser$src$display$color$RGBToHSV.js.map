{
"version":3,
"file":"module$node_modules$Phaser$src$display$color$RGBToHSV.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkFlHD,MAAAC,QAAA,CAnDeC,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,GAAV,CACxB,CACgBC,IAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,CAAEE,EAAG,CAAL,CAAQC,EAAG,CAAX,CAAcC,EAAG,CAAjB,CAA/B,CAEAP,EAAA,EAAK,GACLC,EAAA,EAAK,GACLC,EAAA,EAAK,GAEL,KAAIM,IAAMC,IAAAD,IAAA,CAASR,CAAT,CAAYC,CAAZ,CAAeC,CAAf,CAAV,CACIQ,IAAMD,IAAAC,IAAA,CAASV,CAAT,CAAYC,CAAZ,CAAeC,CAAf,CADV,CAEIS,EAAID,GAAJC,CAAUH,GAFd,CAKIH,EAAI,CALR,CAMIC,EAAa,CAAT,GAACI,GAAD,CAAc,CAAd,CAAkBC,CAAlB,CAAsBD,GAG1BA,IAAJ,GAAYF,GAAZ,GAEQE,GAAJ,GAAYV,CAAZ,CAEIK,CAFJ,EAESJ,CAFT,CAEaC,CAFb,EAEkBS,CAFlB,EAEwBV,CAAD,CAAKC,CAAL,CAAU,CAAV,CAAc,CAFrC,EAISQ,GAAJ,GAAYT,CAAZ,CAEDI,CAFC,EAEIH,CAFJ,CAEQF,CAFR,EAEaW,CAFb,CAEiB,CAFjB,CAIID,GAJJ,GAIYR,CAJZ,GAMDG,CANC,EAMIL,CANJ,CAMQC,CANR,EAMaU,CANb,CAMiB,CANjB,CASL,CAAAN,CAAA,EAAK,CAfT,CAkBIF,IAAAS,eAAA,CAAmB,IAAnB,CAAJ,EAEIT,GAAAU,GAEA,CAFSR,CAET,CADAF,GAAAW,GACA,CADSR,CACT,CAAAH,GAAAY,GAAA,CAxBIL,GAoBR,GAQIP,GAAAE,EAEA,CAFQA,CAER,CADAF,GAAAG,EACA,CADQA,CACR,CAAAH,GAAAI,EAAA,CA9BIG,GAoBR,CAaA,OAAOP,IA/CX,CAhCkH;",
"sources":["node_modules/Phaser/src/display/color/RGBToHSV.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$display$color$RGBToHSV\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * @typedef {object} HSVColorObject\r\n *\r\n * @property {number} h - The hue color value. A number between 0 and 1\r\n * @property {number} s - The saturation color value. A number between 0 and 1\r\n * @property {number} v - The lightness color value. A number between 0 and 1\r\n */\r\n\r\n/**\r\n * Converts an RGB color value to HSV (hue, saturation and value).\r\n * Conversion forumla from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes RGB values are contained in the set [0, 255] and returns h, s and v in the set [0, 1].\r\n * Based on code by Michael Jackson (https://github.com/mjijackson)\r\n *\r\n * @function Phaser.Display.Color.RGBToHSV\r\n * @since 3.0.0\r\n *\r\n * @param {integer} r - The red color value. A number between 0 and 255.\r\n * @param {integer} g - The green color value. A number between 0 and 255.\r\n * @param {integer} b - The blue color value. A number between 0 and 255.\r\n * @param {(HSVColorObject|Phaser.Display.Color)} [out] - An object to store the color values in. If not given an HSV Color Object will be created.\r\n *\r\n * @return {(HSVColorObject|Phaser.Display.Color)} An object with the properties `h`, `s` and `v` set.\r\n */\r\nvar RGBToHSV = function (r, g, b, out)\r\n{\r\n    if (out === undefined) { out = { h: 0, s: 0, v: 0 }; }\r\n\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n\r\n    var min = Math.min(r, g, b);\r\n    var max = Math.max(r, g, b);\r\n    var d = max - min;\r\n\r\n    // achromatic by default\r\n    var h = 0;\r\n    var s = (max === 0) ? 0 : d / max;\r\n    var v = max;\r\n\r\n    if (max !== min)\r\n    {\r\n        if (max === r)\r\n        {\r\n            h = (g - b) / d + ((g < b) ? 6 : 0);\r\n        }\r\n        else if (max === g)\r\n        {\r\n            h = (b - r) / d + 2;\r\n        }\r\n        else if (max === b)\r\n        {\r\n            h = (r - g) / d + 4;\r\n        }\r\n\r\n        h /= 6;\r\n    }\r\n\r\n    if (out.hasOwnProperty('_h'))\r\n    {\r\n        out._h = h;\r\n        out._s = s;\r\n        out._v = v;\r\n    }\r\n    else\r\n    {\r\n        out.h = h;\r\n        out.s = s;\r\n        out.v = v;\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = RGBToHSV;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","RGBToHSV","r","g","b","out","undefined","h","s","v","min","Math","max","d","hasOwnProperty","_h","_s","_v"]
}
