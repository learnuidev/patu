shadow$provide.module$node_modules$Phaser$src$physics$matter_js$lib$plugins$MatterAttractors=function(global,require,module,exports){var Matter=require("module$node_modules$Phaser$src$physics$matter_js$CustomMain"),MatterAttractors={name:"matter-attractors",version:"0.1.7",for:"matter-js@^0.13.1",silent:!0,install:function(base){base.after("Body.create",function(){MatterAttractors.Body.init(this)});base.before("Engine.update",function(engine){MatterAttractors.Engine.update(engine)})},Body:{init:function(body){body.plugin.attractors=
body.plugin.attractors||[]}},Engine:{update:function(engine){engine=Matter.Composite.allBodies(engine.world);for(var i=0;i<engine.length;i+=1){var bodyA=engine[i],attractors=bodyA.plugin.attractors;if(attractors&&0<attractors.length)for(var j=i+1;j<engine.length;j+=1)for(var bodyB=engine[j],k=0;k<attractors.length;k+=1){var attractor=attractors[k],forceVector=attractor;Matter.Common.isFunction(attractor)&&(forceVector=attractor(bodyA,bodyB));forceVector&&Matter.Body.applyForce(bodyB,bodyB.position,
forceVector)}}}},Attractors:{gravityConstant:.001,gravity:function(bodyA,bodyB){var bToA=Matter.Vector.sub(bodyB.position,bodyA.position),distanceSq=Matter.Vector.magnitudeSquared(bToA)||1E-4;bToA=Matter.Vector.normalise(bToA);distanceSq=Matter.Vector.mult(bToA,bodyA.mass*bodyB.mass/distanceSq*-MatterAttractors.Attractors.gravityConstant);Matter.Body.applyForce(bodyA,bodyA.position,Matter.Vector.neg(distanceSq));Matter.Body.applyForce(bodyB,bodyB.position,distanceSq)}}};module.exports=MatterAttractors}
//# sourceMappingURL=module$node_modules$Phaser$src$physics$matter_js$lib$plugins$MatterAttractors.js.map
