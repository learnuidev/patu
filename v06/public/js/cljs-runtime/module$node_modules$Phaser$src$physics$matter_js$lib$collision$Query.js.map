{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$collision$Query.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/collision/Query.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$collision$Query\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.Query` module contains methods for performing collision queries.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Query\r\n*/\r\n\r\nvar Query = {};\r\n\r\nmodule.exports = Query;\r\n\r\nvar Vector = require('../geometry/Vector');\r\nvar SAT = require('./SAT');\r\nvar Bounds = require('../geometry/Bounds');\r\nvar Bodies = require('../factory/Bodies');\r\nvar Vertices = require('../geometry/Vertices');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Returns a list of collisions between `body` and `bodies`.\r\n     * @method collides\r\n     * @param {body} body\r\n     * @param {body[]} bodies\r\n     * @return {object[]} Collisions\r\n     */\r\n    Query.collides = function(body, bodies) {\r\n        var collisions = [];\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var bodyA = bodies[i];\r\n            \r\n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\r\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\r\n                    var part = bodyA.parts[j];\r\n\r\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\r\n                        var collision = SAT.collides(part, body);\r\n\r\n                        if (collision.collided) {\r\n                            collisions.push(collision);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return collisions;\r\n    };\r\n\r\n    /**\r\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\r\n     * @method ray\r\n     * @param {body[]} bodies\r\n     * @param {vector} startPoint\r\n     * @param {vector} endPoint\r\n     * @param {number} [rayWidth]\r\n     * @return {object[]} Collisions\r\n     */\r\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\r\n        rayWidth = rayWidth || 1e-100;\r\n\r\n        var rayAngle = Vector.angle(startPoint, endPoint),\r\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\r\n            rayX = (endPoint.x + startPoint.x) * 0.5,\r\n            rayY = (endPoint.y + startPoint.y) * 0.5,\r\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\r\n            collisions = Query.collides(ray, bodies);\r\n\r\n        for (var i = 0; i < collisions.length; i += 1) {\r\n            var collision = collisions[i];\r\n            collision.body = collision.bodyB = collision.bodyA;            \r\n        }\r\n\r\n        return collisions;\r\n    };\r\n\r\n    /**\r\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\r\n     * @method region\r\n     * @param {body[]} bodies\r\n     * @param {bounds} bounds\r\n     * @param {bool} [outside=false]\r\n     * @return {body[]} The bodies matching the query\r\n     */\r\n    Query.region = function(bodies, bounds, outside) {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                overlaps = Bounds.overlaps(body.bounds, bounds);\r\n            if ((overlaps && !outside) || (!overlaps && outside))\r\n                result.push(body);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\r\n     * @method point\r\n     * @param {body[]} bodies\r\n     * @param {vector} point\r\n     * @return {body[]} The bodies matching the query\r\n     */\r\n    Query.point = function(bodies, point) {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n            \r\n            if (Bounds.contains(body.bounds, point)) {\r\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\r\n                    var part = body.parts[j];\r\n\r\n                    if (Bounds.contains(part.bounds, point)\r\n                        && Vertices.contains(part.vertices, point)) {\r\n                        result.push(body);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Query","Vector","SAT","Bounds","Bodies","Vertices","collides","Query.collides","body","bodies","collisions","i","length","bodyA","overlaps","bounds","j","parts","part","collision","collided","push","ray","Query.ray","startPoint","endPoint","rayWidth","rayAngle","angle","rayLength","magnitude","sub","rectangle","x","y","bodyB","region","Query.region","outside","result","point","Query.point","contains","vertices"]
}
