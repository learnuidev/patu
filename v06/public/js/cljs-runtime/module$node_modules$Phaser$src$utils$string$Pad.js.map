{
"version":3,
"file":"module$node_modules$Phaser$src$utils$string$Pad.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,gDAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAsE5GD,MAAAC,QAAA,CAjCUC,QAAS,CAACC,GAAD,CAAMC,GAAN,CAAWC,GAAX,CAAgBC,GAAhB,CACnB,CACgBC,IAAAA,EAAZ,GAAIH,GAAJ,GAAyBA,GAAzB,CAA+B,CAA/B,CACYG,KAAAA,EAAZ,GAAIF,GAAJ,GAAyBA,GAAzB,CAA+B,GAA/B,CACYE,KAAAA,EAAZ,GAAID,GAAJ,GAAyBA,GAAzB,CAA+B,CAA/B,CAEAH,IAAA,CAAMA,GAAAK,SAAA,EAIN,IAAIJ,GAAJ,CAAU,CAAV,EAAeD,GAAAM,OAAf,CAEI,OAAQH,GAAR,EAEI,KAAK,CAAL,CACIH,GAAA,CAAUO,KAAJ,CAAUN,GAAV,CAAgB,CAAhB,CAAoBD,GAAAM,OAApB,CAAAE,KAAA,CAAqCN,GAArC,CAAN,CAAkDF,GAClD,MAEJ,MAAK,CAAL,CACQS,GAAAA,CAAQC,IAAAC,KAAA,EAAoBV,GAApB,EAA0BD,GAAAM,OAA1B,EAAwC,CAAxC,CAEZN,IAAA,CAAUO,KAAJ,CADKK,GACL,CADcH,GACd,CAAiB,CAAjB,CAAAD,KAAA,CAAyBN,GAAzB,CAAN,CAAsCF,GAAtC,CAAgDO,KAAJ,CAAUE,GAAV,CAAkB,CAAlB,CAAAD,KAAA,CAA0BN,GAA1B,CAC5C,MAEJ,SACUF,GAAN,EAAgBO,KAAJ,CAAUN,GAAV,CAAgB,CAAhB,CAAoBD,GAAAM,OAApB,CAAAE,KAAA,CAAqCN,GAArC,CAbpB,CAkBJ,MAAOF,IA7BX,CAtC4G;",
"sources":["node_modules/Phaser/src/utils/string/Pad.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$string$Pad\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\n/**\n * Takes the given string and pads it out, to the length required, using the character\n * specified. For example if you need a string to be 6 characters long, you can call:\n *\n * `pad('bob', 6, '-', 2)`\n *\n * This would return: `bob---` as it has padded it out to 6 characters, using the `-` on the right.\n *\n * You can also use it to pad numbers (they are always returned as strings):\n * \n * `pad(512, 6, '0', 1)`\n *\n * Would return: `000512` with the string padded to the left.\n *\n * If you don't specify a direction it'll pad to both sides:\n * \n * `pad('c64', 7, '*')`\n *\n * Would return: `**c64**`\n *\n * @function Phaser.Utils.String.Pad\n * @since 3.0.0\n *\n * @param {string} str - The target string. `toString()` will be called on the string, which means you can also pass in common data types like numbers.\n * @param {integer} [len=0] - The number of characters to be added.\n * @param {string} [pad=\" \"] - The string to pad it out with (defaults to a space).\n * @param {integer} [dir=3] - The direction dir = 1 (left), 2 (right), 3 (both).\n * \n * @return {string} The padded string.\n */\nvar Pad = function (str, len, pad, dir)\n{\n    if (len === undefined) { len = 0; }\n    if (pad === undefined) { pad = ' '; }\n    if (dir === undefined) { dir = 3; }\n\n    str = str.toString();\n\n    var padlen = 0;\n\n    if (len + 1 >= str.length)\n    {\n        switch (dir)\n        {\n            case 1:\n                str = new Array(len + 1 - str.length).join(pad) + str;\n                break;\n\n            case 3:\n                var right = Math.ceil((padlen = len - str.length) / 2);\n                var left = padlen - right;\n                str = new Array(left + 1).join(pad) + str + new Array(right + 1).join(pad);\n                break;\n\n            default:\n                str = str + new Array(len + 1 - str.length).join(pad);\n                break;\n        }\n    }\n\n    return str;\n};\n\nmodule.exports = Pad;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Pad","str","len","pad","dir","undefined","toString","length","Array","join","right","Math","ceil","padlen"]
}
