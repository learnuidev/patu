shadow$provide.module$node_modules$Phaser$src$curves$EllipseCurve=function(global,require,module,exports){global=require("module$node_modules$Phaser$src$utils$Class");var Curve=require("module$node_modules$Phaser$src$curves$Curve"),DegToRad=require("module$node_modules$Phaser$src$math$DegToRad"),GetValue=require("module$node_modules$Phaser$src$utils$object$GetValue"),RadToDeg=require("module$node_modules$Phaser$src$math$RadToDeg"),Vector2=require("module$node_modules$Phaser$src$math$Vector2"),EllipseCurve=
new global({Extends:Curve,initialize:function(x,y,xRadius,yRadius,startAngle,endAngle,clockwise,rotation){"object"===typeof x?(rotation=x,x=GetValue(rotation,"x",0),y=GetValue(rotation,"y",0),xRadius=GetValue(rotation,"xRadius",0),yRadius=GetValue(rotation,"yRadius",xRadius),startAngle=GetValue(rotation,"startAngle",0),endAngle=GetValue(rotation,"endAngle",360),clockwise=GetValue(rotation,"clockwise",!1),rotation=GetValue(rotation,"rotation",0)):(void 0===yRadius&&(yRadius=xRadius),void 0===startAngle&&
(startAngle=0),void 0===endAngle&&(endAngle=360),void 0===clockwise&&(clockwise=!1),void 0===rotation&&(rotation=0));Curve.call(this,"EllipseCurve");this.p0=new Vector2(x,y);this._xRadius=xRadius;this._yRadius=yRadius;this._startAngle=DegToRad(startAngle);this._endAngle=DegToRad(endAngle);this._clockwise=clockwise;this._rotation=DegToRad(rotation)},getStartPoint:function(out){void 0===out&&(out=new Vector2);return this.getPoint(0,out)},getResolution:function(divisions){return 2*divisions},getPoint:function(t,
out){void 0===out&&(out=new Vector2);for(var twoPi=2*Math.PI,deltaAngle=this._endAngle-this._startAngle,samePoints=Math.abs(deltaAngle)<Number.EPSILON;0>deltaAngle;)deltaAngle+=twoPi;for(;deltaAngle>twoPi;)deltaAngle-=twoPi;deltaAngle<Number.EPSILON&&(deltaAngle=samePoints?0:twoPi);this._clockwise&&!samePoints&&(deltaAngle=deltaAngle===twoPi?-twoPi:deltaAngle-twoPi);twoPi=this._startAngle+t*deltaAngle;t=this.p0.x+this._xRadius*Math.cos(twoPi);var y=this.p0.y+this._yRadius*Math.sin(twoPi);0!==this._rotation&&
(twoPi=Math.cos(this._rotation),deltaAngle=Math.sin(this._rotation),samePoints=t-this.p0.x,y-=this.p0.y,t=samePoints*twoPi-y*deltaAngle+this.p0.x,y=samePoints*deltaAngle+y*twoPi+this.p0.y);return out.set(t,y)},setXRadius:function(value){this.xRadius=value;return this},setYRadius:function(value){this.yRadius=value;return this},setWidth:function(value){this.xRadius=2*value;return this},setHeight:function(value){this.yRadius=2*value;return this},setStartAngle:function(value){this.startAngle=value;return this},
setEndAngle:function(value){this.endAngle=value;return this},setClockwise:function(value){this.clockwise=value;return this},setRotation:function(value){this.rotation=value;return this},x:{get:function(){return this.p0.x},set:function(value){this.p0.x=value}},y:{get:function(){return this.p0.y},set:function(value){this.p0.y=value}},xRadius:{get:function(){return this._xRadius},set:function(value){this._xRadius=value}},yRadius:{get:function(){return this._yRadius},set:function(value){this._yRadius=
value}},startAngle:{get:function(){return RadToDeg(this._startAngle)},set:function(value){this._startAngle=DegToRad(value)}},endAngle:{get:function(){return RadToDeg(this._endAngle)},set:function(value){this._endAngle=DegToRad(value)}},clockwise:{get:function(){return this._clockwise},set:function(value){this._clockwise=value}},angle:{get:function(){return RadToDeg(this._rotation)},set:function(value){this._rotation=DegToRad(value)}},rotation:{get:function(){return this._rotation},set:function(value){this._rotation=
value}},toJSON:function(){return{type:this.type,x:this.p0.x,y:this.p0.y,xRadius:this._xRadius,yRadius:this._yRadius,startAngle:RadToDeg(this._startAngle),endAngle:RadToDeg(this._endAngle),clockwise:this._clockwise,rotation:RadToDeg(this._rotation)}}});EllipseCurve.fromJSON=function(data){return new EllipseCurve(data)};module.exports=EllipseCurve}
//# sourceMappingURL=module$node_modules$Phaser$src$curves$EllipseCurve.js.map
