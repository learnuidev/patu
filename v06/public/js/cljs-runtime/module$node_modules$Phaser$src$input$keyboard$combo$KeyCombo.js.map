{
"version":3,
"file":"module$node_modules$Phaser$src$input$keyboard$combo$KeyCombo.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,6DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOrHC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,aAAeJ,OAAA,CAAQ,0DAAR,CAAnB,CACIK,gBAAkBL,OAAA,CAAQ,qEAAR,CADtB,CAEIM,cAAgBN,OAAA,CAAQ,mEAAR,CAsDhBO,QAAAA,CAAW,IAAIJ,MAAJ,CAAU,CAErBK,WAEAD,QAAkB,CAACE,cAAD;AAAiBC,IAAjB,CAAuBC,MAAvB,CAClB,CACmBC,IAAAA,EAAf,GAAID,MAAJ,GAA4BA,MAA5B,CAAqC,EAArC,CAGA,IAAkB,CAAlB,CAAID,IAAAG,OAAJ,CAEI,MAAO,CAAA,CAUX,KAAAC,QAAA,CAAeL,cAUf,KAAAM,QAAA,CAAe,CAAA,CAUf,KAAAC,SAAA,CAAgB,EAIhB,KAASC,cAAT,CAAa,CAAb,CAAgBA,cAAhB,CAAoBP,IAAAG,OAApB,CAAiCI,cAAA,EAAjC,CACA,CACI,IAAIC,KAAOR,IAAA,CAAKO,cAAL,CAES,SAApB,GAAI,MAAOC,KAAX,CAEI,IAAAF,SAAAG,KAAA,CAAmBD,IAAAE,YAAA,EAAAC,WAAA,CAA8B,CAA9B,CAAnB,CAFJ,CAIyB,QAApB,GAAI,MAAOH,KAAX,CAED,IAAAF,SAAAG,KAAA,CAAmBD,IAAnB,CAFC,CAIIA,IAAAI,eAAA,CAAoB,SAApB,CAJJ,EAMD,IAAAN,SAAAG,KAAA,CAAmBD,IAAAK,QAAnB,CAbR,CAwBA,IAAAC,QAAA,CAAe,IAAAR,SAAA,CAAc,CAAd,CAUf,KAAAS,MAAA,CAAa,CASb,KAAAC,KAAA,CAAY,IAAAV,SAAAH,OAUZ,KAAAc,gBAAA;AAAuB,CAUvB,KAAAC,QAAA,CAAe,CAAA,CAUf,KAAAC,YAAA,CAAmB,CAUnB,KAAAC,gBAAA,CAAuB1B,YAAA,CAAaO,MAAb,CAAqB,iBAArB,CAAwC,CAAA,CAAxC,CAUvB,KAAAoB,YAAA,CAAmB3B,YAAA,CAAaO,MAAb,CAAqB,aAArB,CAAoC,CAApC,CAUnB,KAAAqB,aAAA,CAAoB5B,YAAA,CAAaO,MAAb,CAAqB,cAArB,CAAqC,CAAA,CAArC,CAUpB,KAAAsB,cAAA,CAAqB7B,YAAA,CAAaO,MAAb,CAAqB,eAArB,CAAsC,CAAA,CAAtC,CAErB,KAAIuB,MAAQ,IAkCZ,KAAAC,UAAA,CAhCIC,IAgCJ,CAhCuBA,QAAS,CAACC,KAAD,CAChC,CACQT,CAAAM,KAAAN,QAAJ,EAAsBM,KAAAnB,QAAtB,EAKcV,eAAAuB,CAAgBS,KAAhBT,CAAuBM,KAAvBN,CALd,GASIM,KAAApB,QAAAwB,KAAA,CAAmB,eAAnB,CAAoCJ,KAApC,CAA2CG,KAA3C,CAEA,CAAIH,KAAAF,aAAJ,CAEI1B,aAAA,CAAc4B,KAAd,CAFJ,CAISA,KAAAD,cAJT,EAMIC,KAAAK,QAAA,EAjBR,CADJ,CAiCA;IAAAzB,QAAA0B,GAAA,CAAgB,SAAhB,CAA2BJ,IAA3B,CAhMJ,CALqB,CAgNrBK,SAAU,CAENC,IAAKA,QAAS,EACd,CACI,MAAO,KAAAjB,MAAP,CAAoB,IAAAC,KADxB,CAHM,CAhNW,CA+NrBa,QAASA,QAAS,EAClB,CACI,IAAAxB,QAAA,CAAe,CAAA,CACf,KAAAC,SAAA,CAAgB,EAEhB,KAAAF,QAAA6B,IAAA,CAAiB,SAAjB,CAA4B,IAAAR,UAA5B,CAEA,KAAArB,QAAA,CAAe,IANnB,CAhOqB,CAAV,CA2Ofb,OAAAC,QAAA,CAAiBK,OA3SwG;",
"sources":["node_modules/Phaser/src/input/keyboard/combo/KeyCombo.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$input$keyboard$combo$KeyCombo\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\nvar GetFastValue = require('../../../utils/object/GetFastValue');\r\nvar ProcessKeyCombo = require('./ProcessKeyCombo');\r\nvar ResetKeyCombo = require('./ResetKeyCombo');\r\n\r\n/**\r\n * @callback KeyboardKeydownCallback\r\n *\r\n * @param {KeyboardEvent} event - The Keyboard Event.\r\n */\r\n\r\n/**\r\n * @typedef {object} KeyComboConfig\r\n *\r\n * @property {boolean} [resetOnWrongKey=true] - If they press the wrong key do we reset the combo?\r\n * @property {number} [maxKeyDelay=0] - The max delay in ms between each key press. Above this the combo is reset. 0 means disabled.\r\n * @property {boolean} [resetOnMatch=false] - If previously matched and they press the first key of the combo again, will it reset?\r\n * @property {boolean} [deleteOnMatch=false] - If the combo matches, will it delete itself?\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A KeyCombo will listen for a specific string of keys from the Keyboard, and when it receives them\r\n * it will emit a `keycombomatch` event from the Keyboard Manager.\r\n *\r\n * The keys to be listened for can be defined as:\r\n *\r\n * A string (i.e. 'ATARI')\r\n * An array of either integers (key codes) or strings, or a mixture of both\r\n * An array of objects (such as Key objects) with a public 'keyCode' property\r\n *\r\n * For example, to listen for the Konami code (up, up, down, down, left, right, left, right, b, a, enter)\r\n * you could pass the following array of key codes:\r\n *\r\n * ```javascript\r\n * this.input.keyboard.createCombo([ 38, 38, 40, 40, 37, 39, 37, 39, 66, 65, 13 ], { resetOnMatch: true });\r\n *\r\n * this.input.keyboard.on('keycombomatch', function (event) {\r\n *     console.log('Konami Code entered!');\r\n * });\r\n * ```\r\n *\r\n * Or, to listen for the user entering the word PHASER:\r\n *\r\n * ```javascript\r\n * this.input.keyboard.createCombo('PHASER');\r\n * ```\r\n *\r\n * @class KeyCombo\r\n * @memberOf Phaser.Input.Keyboard\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.Keyboard.KeyboardPlugin} keyboardPlugin - A reference to the Keyboard Plugin.\r\n * @param {(string|integer[]|object[])} keys - The keys that comprise this combo.\r\n * @param {KeyComboConfig} [config] - A Key Combo configuration object.\r\n */\r\nvar KeyCombo = new Class({\r\n\r\n    initialize:\r\n\r\n    function KeyCombo (keyboardPlugin, keys, config)\r\n    {\r\n        if (config === undefined) { config = {}; }\r\n\r\n        //  Can't have a zero or single length combo (string or array based)\r\n        if (keys.length < 2)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * A reference to the Keyboard Manager\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#manager\r\n         * @type {Phaser.Input.Keyboard.KeyboardPlugin}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = keyboardPlugin;\r\n\r\n        /**\r\n         * A flag that controls if this Key Combo is actively processing keys or not.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * An array of the keycodes that comprise this combo.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#keyCodes\r\n         * @type {array}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.keyCodes = [];\r\n\r\n        //  if 'keys' is a string we need to get the keycode of each character in it\r\n\r\n        for (var i = 0; i < keys.length; i++)\r\n        {\r\n            var char = keys[i];\r\n\r\n            if (typeof char === 'string')\r\n            {\r\n                this.keyCodes.push(char.toUpperCase().charCodeAt(0));\r\n            }\r\n            else if (typeof char === 'number')\r\n            {\r\n                this.keyCodes.push(char);\r\n            }\r\n            else if (char.hasOwnProperty('keyCode'))\r\n            {\r\n                this.keyCodes.push(char.keyCode);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The current keyCode the combo is waiting for.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#current\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.current = this.keyCodes[0];\r\n\r\n        /**\r\n         * The current index of the key being waited for in the 'keys' string.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#index\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.index = 0;\r\n\r\n        /**\r\n         * The length of this combo (in keycodes)\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#size\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.size = this.keyCodes.length;\r\n\r\n        /**\r\n         * The time the previous key in the combo was matched.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#timeLastMatched\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.timeLastMatched = 0;\r\n\r\n        /**\r\n         * Has this Key Combo been matched yet?\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#matched\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.matched = false;\r\n\r\n        /**\r\n         * The time the entire combo was matched.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#timeMatched\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.timeMatched = 0;\r\n\r\n        /**\r\n         * If they press the wrong key do we reset the combo?\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#resetOnWrongKey\r\n         * @type {boolean}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.resetOnWrongKey = GetFastValue(config, 'resetOnWrongKey', true);\r\n\r\n        /**\r\n         * The max delay in ms between each key press. Above this the combo is reset. 0 means disabled.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#maxKeyDelay\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.maxKeyDelay = GetFastValue(config, 'maxKeyDelay', 0);\r\n\r\n        /**\r\n         * If previously matched and they press the first key of the combo again, will it reset?\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#resetOnMatch\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.resetOnMatch = GetFastValue(config, 'resetOnMatch', false);\r\n\r\n        /**\r\n         * If the combo matches, will it delete itself?\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#deleteOnMatch\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.deleteOnMatch = GetFastValue(config, 'deleteOnMatch', false);\r\n\r\n        var _this = this;\r\n\r\n        var onKeyDownHandler = function (event)\r\n        {\r\n            if (_this.matched || !_this.enabled)\r\n            {\r\n                return;\r\n            }\r\n\r\n            var matched = ProcessKeyCombo(event, _this);\r\n\r\n            if (matched)\r\n            {\r\n                _this.manager.emit('keycombomatch', _this, event);\r\n\r\n                if (_this.resetOnMatch)\r\n                {\r\n                    ResetKeyCombo(_this);\r\n                }\r\n                else if (_this.deleteOnMatch)\r\n                {\r\n                    _this.destroy();\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The internal Key Down handler.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyCombo#onKeyDown\r\n         * @private\r\n         * @type {KeyboardKeydownCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.onKeyDown = onKeyDownHandler;\r\n\r\n        this.manager.on('keydown', onKeyDownHandler);\r\n    },\r\n\r\n    /**\r\n     * How far complete is this combo? A value between 0 and 1.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#progress\r\n     * @type {number}\r\n     * @readOnly\r\n     * @since 3.0.0\r\n     */\r\n    progress: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.index / this.size;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Destroys this Key Combo and all of its references.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyCombo#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.enabled = false;\r\n        this.keyCodes = [];\r\n\r\n        this.manager.off('keydown', this.onKeyDown);\r\n\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = KeyCombo;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","GetFastValue","ProcessKeyCombo","ResetKeyCombo","KeyCombo","initialize","keyboardPlugin","keys","config","undefined","length","manager","enabled","keyCodes","i","char","push","toUpperCase","charCodeAt","hasOwnProperty","keyCode","current","index","size","timeLastMatched","matched","timeMatched","resetOnWrongKey","maxKeyDelay","resetOnMatch","deleteOnMatch","_this","onKeyDown","onKeyDownHandler","event","emit","destroy","on","progress","get","off"]
}
