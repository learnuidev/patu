{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$bitmaptext$dynamic$DynamicBitmapTextCanvasRenderer.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextCanvasRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$bitmaptext$dynamic$DynamicBitmapTextCanvasRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.DynamicBitmapText#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.DynamicBitmapText} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar DynamicBitmapTextCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var text = src.text;\r\n    var textLength = text.length;\r\n\r\n    var ctx = renderer.currentContext;\r\n\r\n    if (textLength === 0 || !SetTransform(renderer, ctx, src, camera, parentMatrix))\r\n    {\r\n        return;\r\n    }\r\n    \r\n    var textureFrame = src.frame;\r\n\r\n    var displayCallback = src.displayCallback;\r\n\r\n    var cameraScrollX = camera.scrollX * src.scrollFactorX;\r\n    var cameraScrollY = camera.scrollY * src.scrollFactorY;\r\n\r\n    var chars = src.fontData.chars;\r\n    var lineHeight = src.fontData.lineHeight;\r\n\r\n    var xAdvance = 0;\r\n    var yAdvance = 0;\r\n\r\n    var indexCount = 0;\r\n    var charCode = 0;\r\n\r\n    var glyph = null;\r\n    var glyphX = 0;\r\n    var glyphY = 0;\r\n    var glyphW = 0;\r\n    var glyphH = 0;\r\n\r\n    var x = 0;\r\n    var y = 0;\r\n\r\n    var lastGlyph = null;\r\n    var lastCharCode = 0;\r\n\r\n    // var ctx = renderer.currentContext;\r\n    var image = src.frame.source.image;\r\n\r\n    var textureX = textureFrame.cutX;\r\n    var textureY = textureFrame.cutY;\r\n\r\n    var rotation = 0;\r\n    var scale = (src.fontSize / src.fontData.size);\r\n\r\n    if (src.cropWidth > 0 && src.cropHeight > 0)\r\n    {\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, src.cropWidth, src.cropHeight);\r\n        ctx.clip();\r\n    }\r\n\r\n    for (var index = 0; index < textLength; ++index)\r\n    {\r\n        //  Reset the scale (in case the callback changed it)\r\n        scale = (src.fontSize / src.fontData.size);\r\n        rotation = 0;\r\n\r\n        charCode = text.charCodeAt(index);\r\n\r\n        if (charCode === 10)\r\n        {\r\n            xAdvance = 0;\r\n            indexCount = 0;\r\n            yAdvance += lineHeight;\r\n            lastGlyph = null;\r\n            continue;\r\n        }\r\n\r\n        glyph = chars[charCode];\r\n\r\n        if (!glyph)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        glyphX = textureX + glyph.x;\r\n        glyphY = textureY + glyph.y;\r\n\r\n        glyphW = glyph.width;\r\n        glyphH = glyph.height;\r\n\r\n        x = (indexCount + glyph.xOffset + xAdvance) - src.scrollX;\r\n        y = (glyph.yOffset + yAdvance) - src.scrollY;\r\n\r\n        //  This could be optimized so that it doesn't even bother drawing it if the x/y is out of range\r\n\r\n        if (lastGlyph !== null)\r\n        {\r\n            var kerningOffset = glyph.kerning[lastCharCode];\r\n            x += (kerningOffset !== undefined) ? kerningOffset : 0;\r\n        }\r\n\r\n        if (displayCallback)\r\n        {\r\n            var output = displayCallback({ tint: { topLeft: 0, topRight: 0, bottomLeft: 0, bottomRight: 0 }, index: index, charCode: charCode, x: x, y: y, scale: scale, rotation: 0, data: glyph.data });\r\n\r\n            x = output.x;\r\n            y = output.y;\r\n            scale = output.scale;\r\n            rotation = output.rotation;\r\n        }\r\n\r\n        x *= scale;\r\n        y *= scale;\r\n\r\n        x -= cameraScrollX;\r\n        y -= cameraScrollY;\r\n\r\n        if (camera.roundPixels)\r\n        {\r\n            x |= 0;\r\n            y |= 0;\r\n        }\r\n\r\n        ctx.save();\r\n\r\n        ctx.translate(x, y);\r\n\r\n        ctx.rotate(rotation);\r\n\r\n        ctx.scale(scale, scale);\r\n\r\n        ctx.drawImage(image, glyphX, glyphY, glyphW, glyphH, 0, 0, glyphW, glyphH);\r\n\r\n        ctx.restore();\r\n        \r\n        xAdvance += glyph.xAdvance;\r\n        indexCount += 1;\r\n        lastGlyph = glyph;\r\n        lastCharCode = charCode;\r\n    }\r\n\r\n    if (src.cropWidth > 0 && src.cropHeight > 0)\r\n    {\r\n        ctx.restore();\r\n    }\r\n\r\n    ctx.restore();\r\n};\r\n\r\nmodule.exports = DynamicBitmapTextCanvasRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","SetTransform","DynamicBitmapTextCanvasRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","text","textLength","length","ctx","currentContext","textureFrame","frame","displayCallback","cameraScrollX","scrollX","scrollFactorX","cameraScrollY","scrollY","scrollFactorY","chars","fontData","lineHeight","xAdvance","yAdvance","indexCount","glyph","lastGlyph","lastCharCode","image","source","textureX","cutX","textureY","cutY","cropWidth","cropHeight","save","beginPath","rect","clip","index","scale","fontSize","size","rotation","charCode","charCodeAt","glyphX","x","glyphY","y","glyphW","width","glyphH","height","xOffset","yOffset","kerningOffset","kerning","undefined","output","tint","topLeft","topRight","bottomLeft","bottomRight","data","roundPixels","translate","rotate","drawImage","restore"]
}
