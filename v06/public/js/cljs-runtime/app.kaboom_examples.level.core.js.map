{"version":3,"sources":["app/kaboom_examples/level/core.cljs"],"mappings":";;;;;;;;;;;;AAkBA,AAKA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AAAgB,AAAA,AAACC,AAKCC;AAGnB,AAAA,AAACC;AACD,AAAA,AAAA,AAAA,AAACC;AACD,AAAA,AAAA,AAACC;AACD,AAAA,AAAA,AAACA;AACD,AAAA,AAAA,AAACA;AACD,AAAA,AAAA,AAACA;AACD,AAAA,AAAA,AAACA;AACD,AAAA,AAAA,AAACC;AAED,AAIA,AAAA,AAACC,AAAwBC;AAGzB,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIoBC;;AAapB,AAAA,AAAMC;AAAN,AACE,AAAME,AAAO,AAAA,AAACC;AACRC,AAAM,AAAA,AAACD;AADb,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAEuC,AAAA,AAAA,AAAA,AAACE;AAFxC,AAAA,AAAA,AAAA;AAAA,AAGuC,AAAA,AAAA,AAAA,AAACA;AAHxC,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAIuC,AAAA,AAAA,AAAA,AAACA;AAJxC,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAKuC,AAAA,AAAA,AAAA,AAACA;AALxC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAJ;AAAA,AAMuC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAACI;AANxC,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAOuC,AAAA,AAAA,AAAA,AAACA;AAPxC,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAQuC,AAAA,AAAA,AAAA,AAACA;AARxC,AAAA,AAAA,AAAA;AAAA,AASuC,AAAA,AAAA,AAAA,AAACA;AATxC,AAAA,AAAA,AAAA;AAAA,AAUuC,AAAA,AAAA,AAAA,AAACA;AAVxC,AAAA,AAAA,AAAA;AAAA,AAWuC,AAACC;AAXxC,AAAA,AAAA,AAAA;AAAA,AAYuC,AAACC;AAZxC,AAAA,AAAA,AAAA;AAAA,AAauC,AAAA,AAACC,AAAQN;AAbhD,AAAA,AAAA,AAAA;AAAA,AAcuC,AAAA,AAAA,AAAA,AAACG;;;AAE1C,AAAA,AAAA,AAAA,AAAA,AAACI,AAA+BX,AAAeE;AAE/C,AAAA,AAAMU;AAAN,AACE,AAAA,AAACC;;AAEH,AAwBA","names":["app.kaboom.patu.core.init","js/document.getElementById","app.kaboom.patu.plugins/aseprite-plugin","app.kaboom.patu.loaders.load_root","app.kaboom.patu.loaders/load-aseprite","app.kaboom.patu.loaders/load-sprite","app.kaboom.patu.loaders/load-sound","app.kaboom.patu.core/reg-level","app.kaboom-examples.level.assets/level-handler","app.kaboom-examples.level.core/main-init","app.kaboom-examples.level.assets/main-map","app.kaboom-examples.level.core/main-action","p1__26647#","player","app.kaboom.patu.core/get-component","score","app.kaboom.patu.events/dispatch","app.kaboom.patu.cam.zoom_in","app.kaboom.patu.cam.zoom_out","app.kaboom.patu.components/jump!","app.kaboom.patu.core/reg-scene","app.kaboom-examples.level.core/app","app.kaboom.patu.core/start"],"sourcesContent":["(ns app.kaboom-examples.level.core\n  (:require\n   [clojure.repl :refer [doc]]\n   ;; Main Libs ===\n   [app.kaboom.patu.core :as p]\n   [app.kaboom.patu.loaders :as l]\n   [app.kaboom.patu.cam :as cam]\n   [app.kaboom.patu.audio :as a]\n   [app.kaboom.patu.components :as c]\n   ;; Event System\n   [app.kaboom.patu.events :refer [dispatch]]\n   ;; Plugins ===\n   [app.kaboom.patu.plugins :refer [aseprite-plugin]]\n   ;; Event handler namespace\n   [app.kaboom-examples.level.events]\n   ;; Assets\n   [app.kaboom-examples.level.assets :refer [main-map level-handler]]))\n\n(comment\n  (js/console.clear)\n  (doc p/start)\n  (doc p/init))\n\n(p/init {:canvas (js/document.getElementById \"app\")\n         :global true\n         :scale 2\n         :debug true\n         :clearColor [0 0 0 1]\n         :plugins [aseprite-plugin]})\n\n;;\n(l/load-root \"https://kaboomjs.com/pub/examples/\")\n(l/load-aseprite :sprite/car \"img/car.png\" \"img/car.json\")\n(l/load-sprite :sprite/steel, \"img/steel.png\");\n(l/load-sprite :sprite/grass, \"img/grass.png\");\n(l/load-sprite :sprite/jumpy, \"img/jumpy.png\");\n(l/load-sprite :sprite/spike, \"img/spike.png\");\n(l/load-sprite :sprite/coin, \"img/coin.png\");)\n(l/load-sound :sound/coin \"sounds/coin.mp3\")\n\n(comment\n  (a/play :sound/coin))\n\n;;\n(p/reg-level :level/main level-handler)\n\n;; Handler\n(defn main-init []\n  [[:game/gravity 980]\n   [:game/background [:game, :ui] :game]\n   [:cam/ignore [:ui]]\n   [:game/add-level main-map :level/main]\n   [:comp/reg-n\n    [:player [[:sprite :sprite/car]\n              [:pos 20 0]\n              [:scale 1]\n              [:body {:jumpForce 320}]\n              [:origin :center]\n              [:prop {:speed 160}]]]\n    [:score [[:text 0 32]\n             [:pos 16 16]\n             [:layer :ui]\n             [:prop {:value 0}]]]]])\n\n(defn main-action []\n  (let [player (p/get-component :player)\n        score (p/get-component :score)]\n    [[:evt/action      :player          #(dispatch [:camera/follow :player])]\n     [:evt/action      :player          #(dispatch [:player/respawn? :player])]\n     [:evt/collides    [:player :jumpy] #(dispatch [:player/super-jump :player])]\n     [:evt/collides    [:player :hurt]  #(dispatch [:player/respawn :player])]\n     [:evt/collides    [:player :coin]  #(dispatch [:player/collect-coin % :player :score])]\n     [:evt/key-down    [:left :right]   #(dispatch [:player/move :player])]\n     [:evt/key-release [:left :right]   #(dispatch [:player/idle :player])]\n     [:evt/key-down    :left            #(dispatch [:player/move-left :player])]\n     [:evt/key-down    :right           #(dispatch [:player/move-right :player])]\n     [:evt/key-down    :up              #(cam/zoom-in)]\n     [:evt/key-down    :down            #(cam/zoom-out)]\n     [:evt/key-press   :space           #(c/jump! player 400)]\n     [:evt/key-press   :r               #(dispatch [:scene/go :scene/main])]]))\n\n(p/reg-scene :scene/main {:init main-init :evt main-action})\n\n(defn app []\n  (p/start :scene/main))\n\n(comment\n  (def car-state (atom {}))\n  (comment\n    (l/load-root)\n    (-> (l/load-sprite :sprite/car2 \"img/car.png\")\n        (.then #(reset! car-state (js->clj % :keywordize-keys true))))\n    (doc lib/load-root))\n\n  (comment\n    (-> (js/fetch (str (l/load-root) \"img/car.json\"))\n        (.then #(.json %))\n        (.then #(js/console.log %))))\n\n  ;;== Test\n  (def json-state (atom {}))\n  (-> (l/load-sprite :sprite/car2 \"img/car.png\")\n      (.then #(clj->js (reset! car-state (js->clj % :keywordize-keys true)))))\n      ; (.then #(js/console.log %)))\n\n  ;;\n  (-> (js/fetch (str (l/load-root) \"img/car.json\"))\n      (.then #(.json %))\n      (.then #(clj->js (reset! json-state (js->clj % :keywordize-keys true))))))\n      ; (.then #(js/console.log %)))\n(comment\n  (reset! json-state @json-state)\n  (keys @json-state)\n  @car-state\n  ;; Frames\n  #_(:frames @json-state)\n  (def frames\n    [{:filename \"car 0.ase\", :frame {:x 0,  :y 0, :w 27, :h 21}, :rotated false, :trimmed false, :spriteSourceSize {:x 0, :y 0, :w 27, :h 21}, :sourceSize {:w 27, :h 21}, :duration 100}\n     {:filename \"car 1.ase\", :frame {:x 27, :y 0, :w 27, :h 21}, :rotated false, :trimmed false, :spriteSourceSize {:x 0, :y 0, :w 27, :h 21}, :sourceSize {:w 27, :h 21}, :duration 100}\n     {:filename \"car 2.ase\", :frame {:x 54, :y 0, :w 27, :h 21}, :rotated false, :trimmed false, :spriteSourceSize {:x 0, :y 0, :w 27, :h 21}, :sourceSize {:w 27, :h 21}, :duration 100}])\n\n  #_(nth (:frames @json-state) 0)\n  (def frame\n    {:filename \"car 0.ase\"\n     :frame {:x 0, :y 0, :w 27, :h 21}\n     :rotated false\n     :trimmed false\n     :spriteSourceSize {:x 0, :y 0, :w 27, :h 21}\n     :sourceSize {:w 27, :h 21}\n     :duration 100})\n\n  (defn calc-quad [file size]\n    (let [frame (:frame file)]\n      [(/ (:x frame) (:w size))\n       (/ (:y frame) (:h size))\n       (/ (:w frame) (:w size))\n       (/ (:h frame) (:h size))]))\n\n  (defn sprite-frames [frames img-size]\n    (for [frame frames]\n      (calc-quad frame img-size)))\n\n  ;; Note only value of x changes\n  ;; Value of y axis width and height remains the same\n            ;; fx/w           ;; y/h     ;; w / w      ;;\n\n  ;; We are telling webgl to draw in those quads\n  (def sp [[0                   0   0.3333333333333333 1]\n           [0.3333333333333333  0   0.3333333333333333 1]\n           [0.6666666666666666  0   0.3333333333333333 1]])\n  (comment\n    (vec (sprite-frames frames size)))\n  ;; Size\n  #_(get-in @json-state [:meta :size])\n  (def size {:w 81, :h 21})\n\n  (comment\n    (p/quad (calc-quad frame size))))\n"]}