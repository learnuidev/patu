{
"version":3,
"file":"module$node_modules$Phaser$src$geom$line$BresenhamPoints.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAoErHD,MAAAC,QAAA,CA/CsBC,QAAS,CAACC,IAAD,CAAOC,QAAP,CAAiBC,OAAjB,CAC/B,CACqBC,IAAAA,EAAjB,GAAIF,QAAJ,GAA8BA,QAA9B,CAAyC,CAAzC,CACgBE,KAAAA,EAAhB,GAAID,OAAJ,GAA6BA,OAA7B,CAAuC,EAAvC,CAEA,KAAIE,GAAKC,IAAAC,MAAA,CAAWN,IAAAI,GAAX,CAAT,CACIG,GAAKF,IAAAC,MAAA,CAAWN,IAAAO,GAAX,CADT,CAEIC,GAAKH,IAAAC,MAAA,CAAWN,IAAAQ,GAAX,CACLC,KAAAA,CAAKJ,IAAAC,MAAA,CAAWN,IAAAS,GAAX,CAET,KAAIC,GAAKL,IAAAM,IAAA,CAASH,EAAT,CAAcJ,EAAd,CAAT,CACIQ,GAAKP,IAAAM,IAAA,CAASF,IAAT,CAAcF,EAAd,CADT,CAEIM,GAAMT,EAAD,CAAMI,EAAN,CAAY,CAAZ,CAAgB,EAFzB,CAGIM,GAAMP,EAAD,CAAME,IAAN,CAAY,CAAZ,CAAgB,EAHzB,CAIIM,IAAML,EAANK,CAAWH,EAEfV,QAAAc,KAAA,CAAa,CAAEC,EAAGb,EAAL,CAASc,EAAGX,EAAZ,CAAb,CAIA,KAFA,IAAIY,EAAI,CAER,CAAUf,EAAV,GAAiBI,EAAjB,EAAyBD,EAAzB,GAAgCE,IAAhC,CAAA,CACA,CACI,IAAIW,GAAKL,GAALK,EAAY,CAEZA,GAAJ,CAAS,CAACR,EAAV,GAEIG,GACA,EADOH,EACP,CAAAR,EAAA,EAAMS,EAHV,CAMIO;EAAJ,CAASV,EAAT,GAEIK,GACA,EADOL,EACP,CAAAH,EAAA,EAAMO,EAHV,CAMqB,EAArB,GAAIK,CAAJ,CAAQlB,QAAR,EAEIC,OAAAc,KAAA,CAAa,CAAEC,EAAGb,EAAL,CAASc,EAAGX,EAAZ,CAAb,CAGJY,EAAA,EApBJ,CAuBA,MAAOjB,QA3CX,CAtBqH;",
"sources":["node_modules/Phaser/src/geom/line/BresenhamPoints.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$line$BresenhamPoints\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Using Bresenham's line algorithm this will return an array of all coordinates on this line.\r\n *\r\n * The `start` and `end` points are rounded before this runs as the algorithm works on integers.\r\n *\r\n * @function Phaser.Geom.Line.BresenhamPoints\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The line.\r\n * @param {integer} [stepRate=1] - The optional step rate for the points on the line.\r\n * @param {array} [results] - An optional array to push the resulting coordinates into.\r\n *\r\n * @return {object[]} The array of coordinates on the line.\r\n */\r\nvar BresenhamPoints = function (line, stepRate, results)\r\n{\r\n    if (stepRate === undefined) { stepRate = 1; }\r\n    if (results === undefined) { results = []; }\r\n\r\n    var x1 = Math.round(line.x1);\r\n    var y1 = Math.round(line.y1);\r\n    var x2 = Math.round(line.x2);\r\n    var y2 = Math.round(line.y2);\r\n\r\n    var dx = Math.abs(x2 - x1);\r\n    var dy = Math.abs(y2 - y1);\r\n    var sx = (x1 < x2) ? 1 : -1;\r\n    var sy = (y1 < y2) ? 1 : -1;\r\n    var err = dx - dy;\r\n\r\n    results.push({ x: x1, y: y1 });\r\n\r\n    var i = 1;\r\n\r\n    while (!((x1 === x2) && (y1 === y2)))\r\n    {\r\n        var e2 = err << 1;\r\n\r\n        if (e2 > -dy)\r\n        {\r\n            err -= dy;\r\n            x1 += sx;\r\n        }\r\n\r\n        if (e2 < dx)\r\n        {\r\n            err += dx;\r\n            y1 += sy;\r\n        }\r\n\r\n        if (i % stepRate === 0)\r\n        {\r\n            results.push({ x: x1, y: y1 });\r\n        }\r\n\r\n        i++;\r\n    }\r\n\r\n    return results;\r\n};\r\n\r\nmodule.exports = BresenhamPoints;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BresenhamPoints","line","stepRate","results","undefined","x1","Math","round","y1","x2","y2","dx","abs","dy","sx","sy","err","push","x","y","i","e2"]
}
