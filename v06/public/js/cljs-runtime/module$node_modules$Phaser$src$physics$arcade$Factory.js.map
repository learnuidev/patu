{
"version":3,
"file":"module$node_modules$Phaser$src$physics$arcade$Factory.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/arcade/Factory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$arcade$Factory\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar ArcadeImage = require('./ArcadeImage');\r\nvar ArcadeSprite = require('./ArcadeSprite');\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('./const');\r\nvar PhysicsGroup = require('./PhysicsGroup');\r\nvar StaticPhysicsGroup = require('./StaticPhysicsGroup');\r\n\r\n/**\r\n * @classdesc\r\n * The Arcade Physics Factory allows you to easily create Arcade Physics enabled Game Objects.\r\n * Objects that are created by this Factory are automatically added to the physics world.\r\n *\r\n * @class Factory\r\n * @memberOf Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The Arcade Physics World instance.\r\n */\r\nvar Factory = new Class({\r\n\r\n    initialize:\r\n\r\n    function Factory (world)\r\n    {\r\n        /**\r\n         * A reference to the Arcade Physics World.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Factory#world\r\n         * @type {Phaser.Physics.Arcade.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * A reference to the Scene this Arcade Physics instance belongs to.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Factory#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = world.scene;\r\n\r\n        /**\r\n         * A reference to the Scene.Systems this Arcade Physics instance belongs to.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Factory#sys\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.sys = world.scene.sys;\r\n    },\r\n\r\n    /**\r\n     * Create a new Arcade Physics Collider object.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#collider\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object1 - The first object to check for collision.\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object2 - The second object to check for collision.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - The callback to invoke when the two objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - The callback to invoke when the two objects collide. Must return a boolean.\r\n     * @param {*} [callbackContext] - The scope in which to call the callbacks.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Collider} The Collider that was created.\r\n     */\r\n    collider: function (object1, object2, collideCallback, processCallback, callbackContext)\r\n    {\r\n        return this.world.addCollider(object1, object2, collideCallback, processCallback, callbackContext);\r\n    },\r\n\r\n    /**\r\n     * Create a new Arcade Physics Collider Overlap object.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#overlap\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object1 - The first object to check for overlap.\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object2 - The second object to check for overlap.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - The callback to invoke when the two objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - The callback to invoke when the two objects collide. Must return a boolean.\r\n     * @param {*} [callbackContext] - The scope in which to call the callbacks.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Collider} The Collider that was created.\r\n     */\r\n    overlap: function (object1, object2, collideCallback, processCallback, callbackContext)\r\n    {\r\n        return this.world.addOverlap(object1, object2, collideCallback, processCallback, callbackContext);\r\n    },\r\n\r\n    /**\r\n     * Adds an Arcade Physics Body to the given Game Object.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#existing\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - A Game Object.\r\n     * @param {boolean} [isStatic=false] - Create a Static body (true) or Dynamic body (false).\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object.\r\n     */\r\n    existing: function (gameObject, isStatic)\r\n    {\r\n        var type = (isStatic) ? CONST.STATIC_BODY : CONST.DYNAMIC_BODY;\r\n\r\n        this.world.enableBody(gameObject, type);\r\n\r\n        return gameObject;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Arcade Image object with a Static body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#staticImage\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Image} The Image object that was created.\r\n     */\r\n    staticImage: function (x, y, key, frame)\r\n    {\r\n        var image = new ArcadeImage(this.scene, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(image);\r\n\r\n        this.world.enableBody(image, CONST.STATIC_BODY);\r\n\r\n        return image;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Arcade Image object with a Dynamic body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#image\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Image} The Image object that was created.\r\n     */\r\n    image: function (x, y, key, frame)\r\n    {\r\n        var image = new ArcadeImage(this.scene, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(image);\r\n\r\n        this.world.enableBody(image, CONST.DYNAMIC_BODY);\r\n\r\n        return image;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Arcade Sprite object with a Static body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#staticSprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Sprite} The Sprite object that was created.\r\n     */\r\n    staticSprite: function (x, y, key, frame)\r\n    {\r\n        var sprite = new ArcadeSprite(this.scene, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(sprite);\r\n        this.sys.updateList.add(sprite);\r\n\r\n        this.world.enableBody(sprite, CONST.STATIC_BODY);\r\n\r\n        return sprite;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Arcade Sprite object with a Dynamic body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#sprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Sprite} The Sprite object that was created.\r\n     */\r\n    sprite: function (x, y, key, frame)\r\n    {\r\n        var sprite = new ArcadeSprite(this.scene, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(sprite);\r\n        this.sys.updateList.add(sprite);\r\n\r\n        this.world.enableBody(sprite, CONST.DYNAMIC_BODY);\r\n\r\n        return sprite;\r\n    },\r\n\r\n    /**\r\n     * Creates a Static Physics Group object.\r\n     * All Game Objects created by this Group will automatically be static Arcade Physics objects.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#staticGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject[]|GroupConfig|GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n     * @param {GroupConfig|GroupCreateConfig} [config] - Settings for this group.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.StaticGroup} The Static Group object that was created.\r\n     */\r\n    staticGroup: function (children, config)\r\n    {\r\n        return this.sys.updateList.add(new StaticPhysicsGroup(this.world, this.world.scene, children, config));\r\n    },\r\n\r\n    /**\r\n     * Creates a Physics Group object.\r\n     * All Game Objects created by this Group will automatically be dynamic Arcade Physics objects.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#group\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject[]|PhysicsGroupConfig|GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n     * @param {PhysicsGroupConfig|GroupCreateConfig} [config] - Settings for this group.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Group} The Group object that was created.\r\n     */\r\n    group: function (children, config)\r\n    {\r\n        return this.sys.updateList.add(new PhysicsGroup(this.world, this.world.scene, children, config));\r\n    },\r\n\r\n    /**\r\n     * Destroys this Factory.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.world = null;\r\n        this.scene = null;\r\n        this.sys = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Factory;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","ArcadeImage","ArcadeSprite","Class","CONST","PhysicsGroup","StaticPhysicsGroup","Factory","initialize","world","scene","sys","collider","object1","object2","collideCallback","processCallback","callbackContext","addCollider","overlap","addOverlap","existing","gameObject","isStatic","enableBody","type","STATIC_BODY","DYNAMIC_BODY","staticImage","x","y","key","frame","image","displayList","add","staticSprite","sprite","updateList","staticGroup","children","config","group","destroy"]
}
