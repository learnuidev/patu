{"version":3,"sources":["app/kaboomv5/audio.cljs"],"mappings":"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","names":["app.kaboomv5.audio/min-gain","app.kaboomv5.audio/max-gain","app.kaboomv5.audio/min-speed","app.kaboomv5.audio/max-speed","app.kaboomv5.audio/min-detune","app.kaboomv5.audio/max-detune","app.kaboomv5.audio/audio-context","js/AudioContext","js/webkitAudioContext","app.kaboomv5.audio/create-gain","context","js/app","js/app.kaboomv5","js/app.kaboomv5.audio","js/app.kaboomv5.audio.audio","app.kaboomv5.audio/audio","cljs.core.atom","app.kaboomv5.audio/ctx","cljs.core/deref","app.kaboomv5.audio/init!","ctx","gain-node","master-node","cljs.core.swap_BANG_","cljs.core/assoc","var_args","G__26624","app.kaboomv5.audio/play","js/Error","p__26634","map__26635","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","sound","app.kaboomv5.audio.play","loop?","volume","speed","detune","seek","src-node","pos","or__4126__auto__","state","cljs.core/clj->js","val","app.kaboomv5.math.core/clamp"],"sourcesContent":["(ns app.kaboomv5.audio\n  (:require [app.kaboomv5.math.core :as math]))\n\n;;\n;; Setting the dimensions of the game\n(def min-gain 0)\n(def max-gain 3)\n(def min-speed 0)\n(def max-speed 3)\n(def min-detune  -1200)\n(def max-detune 1200)\n\n(comment\n  (math/clamp 1 2 4))\n;; Helpers\n(defn audio-context []\n  (if js/AudioContext\n    (new js/AudioContext)\n    (new js/webkitAudioContext)))\n\n(defn create-gain [context]\n  (.createGain context))\n\n(defonce audio (atom {:clips nil}))\n\n(comment\n  (create-gain (audio-context)))\n\n(defn ctx []\n  (:ctx @audio))\n(comment (ctx))\n(defn init! []\n  (let [ctx (audio-context)\n        gain-node (create-gain ctx)\n        master-node gain-node]\n    (.connect master-node (.-destination ctx))\n    (swap! audio assoc :ctx ctx :gain-node gain-node :master-node master-node)\n    true))\n(comment\n  (init!))\n(comment\n  @audio)\n  ;;\n(defn play\n  ([sound] (play sound {:loop? false\n                        :volume 1\n                        :speed 1\n                        :detune 0\n                        :seek 0}))\n  ([sound {:keys [loop? volume speed detune seek]}]\n   (let [src-node (.createBufferSource (ctx))\n         gain-node (.createGain (ctx))\n         pos (or seek 0)\n         state (atom {:stopped false\n                      :start-time (- (.-currentTime (ctx)) pos)})]\n     (set! src-node -buffer sound)\n     (set! src-node -loop loop?)\n     (.connect src-node gain-node)\n     (.connect gain-node (:master-node @audio))\n     (.start src-node 0 pos)\n     (clj->js\n      {:stop #(when-not (:stopped? @state)\n                (.stop src-node)\n                (swap! state assoc\n                       :stopped true\n                       :start-time (.-currentTime (ctx))))\n       :pause #(when-not (:stopped? @state)\n                 (.stop src-node)\n                 (swap! state assoc\n                        :stopped true\n                        :stop-time (.-currentTime (ctx))))\n       :paused #(:stopped @state)\n       :stopped #(:stopped @state)\n       :speed (fn [val]\n                (set! (.. src-node -playbackRate -value) (math/clamp val max-speed min-speed)))\n       :detune (fn [val]\n                 (set! (.. src-node -detune -value) (math/clamp val max-detune min-detune)))\n       :volume (fn [val]\n                 (set! (.. gain-node -gain -value) (math/clamp val max-gain min-gain)))}))))\n"]}