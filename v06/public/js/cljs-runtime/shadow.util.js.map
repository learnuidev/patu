{"version":3,"sources":["shadow/util.cljs"],"mappings":";;AAGA,AAAA,AAAMA,AAAkBC;AAAxB,AACE,AACC,AAAA,AAAMA;AADP;;AAAA,AAEC,AAAAC,AAAUD;AAAG,AAAKA;;AAFnB,AAGC,AAASA;AAAGA;;AAHb,AAIC,AAASA;AAAGA;;AAJb,AAKC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAYC,AAAAA,AAAiBJ,AAAAA,AAAAA,AAAAA,AAAAA,AAAAA;AAAG,AAACK,AAAOL;;AALzC,AAMOA;;;;;;;;AAGT,AAAKM,AAAS,AAAAC;AAEd,AAAA,AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI;;;;;AAAA,AAAA,AAAA,AAAMJ,AACFgB;AADJ,AAEK,AAAMpB;AAAN,AACE,AAAMC,AACA,AAACR,AAAiB2B;;AAF1B;;;;AAFL,AAAA,AAAA,AAAMhB,AAKFgB,AAAGC;AALP,AAMK,AAAMrB;AAAN,AACE,AAAMC,AACA,AAACR,AAAiB2B,AAClB,AAAC3B,AAAiB4B;;AAH1B;;;;AANL,AAAA,AAAA,AAAMjB,AAUFgB,AAAGC,AAAGC;AAVV,AAWK,AAAMtB;AAAN,AACE,AAAMC,AACA,AAACR,AAAiB2B,AAClB,AAAC3B,AAAiB4B,AAClB,AAAC5B,AAAiB6B;;AAJ1B;;;;AAXL,AAAA,AAAA,AAAMlB,AAgBFgB,AAAGC,AAAGC,AAAGC;AAhBb,AAiBK,AAAMvB;AAAN,AACE,AAAMC,AACA,AAACR,AAAiB2B,AAClB,AAAC3B,AAAiB4B,AAClB,AAAC5B,AAAiB6B,AAClB,AAAC7B,AAAiB8B;;AAL1B;;;;AAjBL,AAAA,AAAA,AAAMnB,AAuBFgB,AAAGC,AAAGC,AAAGC,AAAGC;AAvBhB,AAwBK,AAAMxB;AAAN,AACE,AAAMC,AACA,AAACR,AAAiB2B,AAClB,AAAC3B,AAAiB4B,AAClB,AAAC5B,AAAiB6B,AAClB,AAAC7B,AAAiB8B,AAClB,AAAC9B,AAAiB+B;;AAN1B;;;;AAxBL,AAAA,AAAA,AAAMpB,AA+BFgB,AAAGC,AAAGC,AAAGC,AAAGC,AAAGC;AA/BnB,AAgCK,AAAMzB;AAAN,AACE,AAAMC,AACA,AAACR,AAAiB2B,AAClB,AAAC3B,AAAiB4B,AAClB,AAAC5B,AAAiB6B,AAClB,AAAC7B,AAAiB8B,AAClB,AAAC9B,AAAiB+B,AAClB,AAAC/B,AAAiBgC;;AAP1B;;;;AAhCL,AAAA,AAAA,AAAA,AAAMrB,AAwCFgB,AAAGC,AAAGC,AAAGC,AAAGC,AAAGC,AAAKC;AAxCxB,AAyCK,AAAM1B;AAAN,AACE,AAAA,AAAMC,AACA,AAACR,AAAiB2B,AAClB,AAAC3B,AAAiB4B,AAClB,AAAC5B,AAAiB6B,AAClB,AAAC7B,AAAiB8B,AAClB,AAAC9B,AAAiB+B,AAClB,AAAC/B,AAAiBgC,AAElB,AAAC1B,AAAO2B;;AAThB;;;;AAzCL;AAAA,AAAA,AAAA,AAAAhB,AAAMN;AAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAK,AAAA,AAAAH,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAM,AAAA,AAAAJ,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAO,AAAA,AAAAL,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAQ,AAAA,AAAAN,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAS,AAAA;AAAA,AAAA,AAAAA,AAAAR,AAAAG,AAAAC,AAAAC,AAAAC,AAAAC,AAAAR;;;AAAA,AAAA,AAAA,AAAMN;;AAAN,AAqDA,AAcA,AAAA,AAAMuB,AAAoBC,AAAKC;AAA/B,AAEO,AAACG,AAAO,AAAAC,AAAKG,AAKb,AAACM;AALO,AAAA,AAAAR,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAQG;AAAR,AAAAF,AAAAD,AAAA,AAAA,AAAYI;AAAZ,AACE,AAAI,AAACC,AAAEF,AAAIR;AACTO;;AACA,AAACI,AAAMJ,AAAEE;;AAJrB,AAACR,AAAYC,AAAOH,AAKZ,AAAA,AAACa;;AAGhB,AAAA,AAAME,AAAuBf,AAAKC,AAAIe;AAAtC,AACE,AACC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAhD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAYgD,AAAAA,AAAQjB,AAAAA,AAAAA,AAAAA,AAAAA,AAAAA;AACpB,AAACD,AAAmBC,AAAKC;;AAF1B,AAGC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAYiD,AAAAA,AAAKlB,AAAAA,AAAAA,AAAAA,AAAAA,AAAAA;AACjB,AAACmB,AAAOnB,AAAKC;;AAJd,AAKC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAYmD,AAAAA,AAAKpB,AAAAA,AAAAA,AAAAA,AAAAA,AAAAA;AACjB,AAACqB,AAAKrB,AAAKgB;;AANZ,AAOO,AAAO,AAAA,AAAA,AAAA,AAAA,AAAA,AAACM,AAAmCtB,AAAUC,AAAWe","names":["shadow.util/console-friendly","a","cljs.core/Keyword","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str","shadow.util/console?","js/console","var_args","G__29583","shadow.util/log","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq29576","G__29577","cljs.core/first","cljs.core/next","G__29578","G__29579","G__29580","G__29581","G__29582","self__4723__auto__","a1","a2","a3","a4","a5","a6","more","shadow.util/remove-from-vector","coll","key","cljs.core.map_indexed","cljs.core/vector","cljs.core.reduce","p__29593","vec__29594","cljs.core.nth","v","idx","item","cljs.core._EQ_","cljs.core.conj_BANG_","cljs.core/transient","cljs.core/persistent!","shadow.util/remove-item-from-coll","value","cljs.core/IVector","cljs.core/IMap","cljs.core.dissoc","cljs.core/ISet","cljs.core.disj","cljs.core.ex_info"],"sourcesContent":["(ns shadow.util\n  (:require-macros [shadow.util :as m]))\n\n(defn console-friendly [a]\n  (cond\n   (nil? a) \"nil\"\n   (keyword? a) (str a)\n   (string? a) a\n   (number? a) a\n   (satisfies? IPrintWithWriter a) (pr-str a)\n   :else a\n   ))\n\n(def console? (exists? js/console))\n\n(defn log\n  ([a1]\n     (when console?\n       (.log js/console\n             (console-friendly a1))))\n  ([a1 a2]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2))))\n  ([a1 a2 a3]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3))))\n  ([a1 a2 a3 a4]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4))))\n  ([a1 a2 a3 a4 a5]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5))))\n  ([a1 a2 a3 a4 a5 a6]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5)\n             (console-friendly a6))))\n  ([a1 a2 a3 a4 a5 a6 & more]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5)\n             (console-friendly a6)\n             \"more:\"\n             (pr-str more)))))\n\n;; HAX\n(comment\n  (def default-ex-info js/cljs.core.ex-info)\n\n  (set! (.. js/cljs -core -ex-info)\n    (fn shadow-ex-info\n      ([msg map]\n       (m/log \"EX-INFO:\" msg map)\n       (default-ex-info msg map))\n      ([msg map cause]\n       (m/log \"EX-INFO:\" msg map cause)\n       (default-ex-info msg map cause))\n      )))\n\n\n(defn remove-from-vector [coll key]\n  (->> (map-indexed vector coll)\n       (reduce (fn [v [idx item]]\n                 (if (= idx key)\n                   v\n                   (conj! v item)))\n               (transient []))\n       (persistent!)))\n\n(defn remove-item-from-coll [coll key value]\n  (cond\n   (satisfies? IVector coll)\n   (remove-from-vector coll key)\n   (satisfies? IMap coll)\n   (dissoc coll key)\n   (satisfies? ISet coll)\n   (disj coll value)\n   :else (throw (ex-info \"unknown coll type\" {:coll coll :key key :value value}))\n   ))\n"]}