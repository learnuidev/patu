{
"version":3,
"file":"module$node_modules$Phaser$src$physics$arcade$tilemap$ProcessTileCallbacks.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,2EAAA,CAA+F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmCvID,MAAAC,QAAA,CAjB2BC,QAAS,CAACC,IAAD,CAAOC,MAAP,CACpC,CAEI,MAAID,KAAAE,kBAAJ,CAEW,CAACF,IAAAE,kBAAAC,KAAA,CAA4BH,IAAAI,yBAA5B,CAA2DH,MAA3D,CAAmED,IAAnE,CAFZ,CAISA,IAAAK,MAAAC,UAAA,CAAqBN,IAAAO,MAArB,CAAJ,CAEM,CAACP,IAAAK,MAAAC,UAAA,CAAqBN,IAAAO,MAArB,CAAAC,SAAAL,KAAA,CACJH,IAAAK,MAAAC,UAAA,CAAqBN,IAAAO,MAArB,CAAAE,gBADI,CAC8CR,MAD9C,CACsDD,IADtD,CAFP,CAOE,CAAA,CAbX,CAnBuI;",
"sources":["node_modules/Phaser/src/physics/arcade/tilemap/ProcessTileCallbacks.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$arcade$tilemap$ProcessTileCallbacks\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Physics.Arcade.Tilemap.ProcessTileCallbacks\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tilemaps.Tilemap} tile - [description]\r\n * @param {Phaser.GameObjects.Sprite} sprite - [description]\r\n *\r\n * @return {boolean} [description]\r\n */\r\nvar ProcessTileCallbacks = function (tile, sprite)\r\n{\r\n    // Tile callbacks take priority over layer level callbacks\r\n    if (tile.collisionCallback)\r\n    {\r\n        return !tile.collisionCallback.call(tile.collisionCallbackContext, sprite, tile);\r\n    }\r\n    else if (tile.layer.callbacks[tile.index])\r\n    {\r\n        return !tile.layer.callbacks[tile.index].callback.call(\r\n            tile.layer.callbacks[tile.index].callbackContext, sprite, tile\r\n        );\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nmodule.exports = ProcessTileCallbacks;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","ProcessTileCallbacks","tile","sprite","collisionCallback","call","collisionCallbackContext","layer","callbacks","index","callback","callbackContext"]
}
