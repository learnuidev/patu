{
"version":3,
"file":"module$node_modules$Phaser$src$utils$array$GetFirst.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,oDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOhH,IAAIC,UAAYH,OAAA,CAAQ,sDAAR,CA8ChBC,OAAAC,QAAA,CAvBeE,QAAS,CAACC,KAAD,CAAQC,QAAR,CAAkBC,KAAlB,CAAyBC,UAAzB,CAAqCC,QAArC,CACxB,CACuBC,IAAAA,EAAnB,GAAIF,UAAJ,GAAgCA,UAAhC,CAA6C,CAA7C,CACiBE,KAAAA,EAAjB,GAAID,QAAJ,GAA8BA,QAA9B,CAAyCJ,KAAAM,OAAzC,CAEA,IAAIR,SAAA,CAAUE,KAAV,CAAiBG,UAAjB,CAA6BC,QAA7B,CAAJ,CAEI,IAAA,CAAyBG,UAAzB,CAA6BH,QAA7B,CAAuCG,UAAA,EAAvC,CACA,CACI,IAAIC,MAAQR,KAAA,CAAMO,UAAN,CAEZ,IAAI,CAACN,QAAL,EACKA,QADL,EAC2BI,IAAAA,EAD3B,GACiBH,KADjB,EACwCM,KAAAC,eAAA,CAAqBR,QAArB,CADxC;AAEKA,QAFL,EAE2BI,IAAAA,EAF3B,GAEiBH,KAFjB,EAEwCM,KAAA,CAAMP,QAAN,CAFxC,GAE4DC,KAF5D,CAII,MAAOM,MAPf,CAYJ,MAAO,KAnBX,CA/BgH;",
"sources":["node_modules/Phaser/src/utils/array/GetFirst.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$array$GetFirst\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Returns the first element in the array.\r\n *\r\n * You can optionally specify a matching criteria using the `property` and `value` arguments.\r\n *\r\n * For example: `getAll('visible', true)` would return the first element that had its `visible` property set.\r\n *\r\n * Optionally you can specify a start and end index. For example if the array had 100 elements,\r\n * and you set `startIndex` to 0 and `endIndex` to 50, it would search only the first 50 elements.\r\n *\r\n * @function Phaser.Utils.Array.GetFirst\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} [property] - The property to test on each array element.\r\n * @param {*} [value] - The value to test the property against. Must pass a strict (`===`) comparison check.\r\n * @param {integer} [startIndex=0] - An optional start index to search from.\r\n * @param {integer} [endIndex=array.length] - An optional end index to search up to (but not included)\r\n *\r\n * @return {object} The first matching element from the array, or `null` if no element could be found in the range given.\r\n */\r\nvar GetFirst = function (array, property, value, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        for (var i = startIndex; i < endIndex; i++)\r\n        {\r\n            var child = array[i];\r\n\r\n            if (!property ||\r\n                (property && value === undefined && child.hasOwnProperty(property)) ||\r\n                (property && value !== undefined && child[property] === value))\r\n            {\r\n                return child;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nmodule.exports = GetFirst;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","SafeRange","GetFirst","array","property","value","startIndex","endIndex","undefined","length","i","child","hasOwnProperty"]
}
