{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$ParseToTilemap.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOnH,IAAIC,QAAUH,OAAA,CAAQ,iDAAR,CAAd,CACII,QAAUJ,OAAA,CAAQ,yDAAR,CADd,CAEIK,MAAQL,OAAA,CAAQ,uDAAR,CAFZ,CAGIM,QAAUN,OAAA,CAAQ,iDAAR,CAsEdC,OAAAC,QAAA,CA1CqBK,QAAS,CAACC,KAAD,CAAQC,GAAR,CAAaC,SAAb,CAAwBC,UAAxB,CAAoCC,KAApC,CAA2CC,MAA3C,CAAmDC,IAAnD,CAAyDC,UAAzD,CAC9B,CACsBC,IAAAA,EAAlB,GAAIN,SAAJ,GAA+BA,SAA/B;AAA2C,EAA3C,CACmBM,KAAAA,EAAnB,GAAIL,UAAJ,GAAgCA,UAAhC,CAA6C,EAA7C,CACcK,KAAAA,EAAd,GAAIJ,KAAJ,GAA2BA,KAA3B,CAAmC,EAAnC,CACeI,KAAAA,EAAf,GAAIH,MAAJ,GAA4BA,MAA5B,CAAqC,EAArC,CACmBG,KAAAA,EAAnB,GAAID,UAAJ,GAAgCA,UAAhC,CAA6C,CAAA,CAA7C,CAEA,KAAIE,QAAU,IAEVC,MAAAC,QAAA,CAAcL,IAAd,CAAJ,CAGIG,OAHJ,CAGcZ,KAAA,CADSW,IAAAA,EAARI,GAAAX,GAAAW,CAAoBX,GAApBW,CAA0B,KAC3B,CAAYjB,OAAAkB,SAAZ,CAA8BP,IAA9B,CAAoCJ,SAApC,CAA+CC,UAA/C,CAA2DI,UAA3D,CAHd,CAKiBC,IAAAA,EALjB,GAKSP,GALT,GASI,CAFIa,IAEJ,CAFkBd,KAAAe,MAAAC,QAAAC,IAAA,CAAwBhB,GAAxB,CAElB,EAMIQ,OANJ,CAMcZ,KAAA,CAAMI,GAAN,CAAWa,IAAAI,OAAX,CAA+BJ,IAAAR,KAA/B,CAAiDJ,SAAjD,CAA4DC,UAA5D,CAAwEI,UAAxE,CANd,CAEIY,OAAAC,KAAA,CAAa,4BAAb,CAA4CnB,GAA5C,CAXR,CAmBgB,KAAhB,GAAIQ,OAAJ,GAEIA,OAFJ,CAEc,IAAIb,OAAJ,CAAY,CAClBM,UAAWA,SADO,CAElBC,WAAYA,UAFM;AAGlBC,MAAOA,KAHW,CAIlBC,OAAQA,MAJU,CAAZ,CAFd,CAUA,OAAO,KAAIP,OAAJ,CAAYE,KAAZ,CAAmBS,OAAnB,CAtCX,CAvCmH;",
"sources":["node_modules/Phaser/src/tilemaps/ParseToTilemap.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$ParseToTilemap\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar Formats = require('./Formats');\r\nvar MapData = require('./mapdata/MapData');\r\nvar Parse = require('./parsers/Parse');\r\nvar Tilemap = require('./Tilemap');\r\n\r\n/**\r\n * Create a Tilemap from the given key or data. If neither is given, make a blank Tilemap. When\r\n * loading from CSV or a 2D array, you should specify the tileWidth & tileHeight. When parsing from\r\n * a map from Tiled, the tileWidth, tileHeight, width & height will be pulled from the map data. For\r\n * an empty map, you should specify tileWidth, tileHeight, width & height.\r\n *\r\n * @function Phaser.Tilemaps.ParseToTilemap\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Scene} scene - The Scene to which this Tilemap belongs.\r\n * @param {string} [key] - The key in the Phaser cache that corresponds to the loaded tilemap data.\r\n * @param {integer} [tileWidth=32] - The width of a tile in pixels.\r\n * @param {integer} [tileHeight=32] - The height of a tile in pixels.\r\n * @param {integer} [width=10] - The width of the map in tiles.\r\n * @param {integer} [height=10] - The height of the map in tiles.\r\n * @param {integer[][]} [data] - Instead of loading from the cache, you can also load directly from\r\n * a 2D array of tile indexes.\r\n * @param {boolean} [insertNull=false] - Controls how empty tiles, tiles with an index of -1, in the\r\n * map data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n * \r\n * @return {Phaser.Tilemaps.Tilemap}\r\n */\r\nvar ParseToTilemap = function (scene, key, tileWidth, tileHeight, width, height, data, insertNull)\r\n{\r\n    if (tileWidth === undefined) { tileWidth = 32; }\r\n    if (tileHeight === undefined) { tileHeight = 32; }\r\n    if (width === undefined) { width = 10; }\r\n    if (height === undefined) { height = 10; }\r\n    if (insertNull === undefined) { insertNull = false; }\r\n\r\n    var mapData = null;\r\n\r\n    if (Array.isArray(data))\r\n    {\r\n        var name = key !== undefined ? key : 'map';\r\n        mapData = Parse(name, Formats.ARRAY_2D, data, tileWidth, tileHeight, insertNull);\r\n    }\r\n    else if (key !== undefined)\r\n    {\r\n        var tilemapData = scene.cache.tilemap.get(key);\r\n\r\n        if (!tilemapData)\r\n        {\r\n            console.warn('No map data found for key ' + key);\r\n        }\r\n        else\r\n        {\r\n            mapData = Parse(key, tilemapData.format, tilemapData.data, tileWidth, tileHeight, insertNull);\r\n        }\r\n    }\r\n\r\n    if (mapData === null)\r\n    {\r\n        mapData = new MapData({\r\n            tileWidth: tileWidth,\r\n            tileHeight: tileHeight,\r\n            width: width,\r\n            height: height\r\n        });\r\n    }\r\n\r\n    return new Tilemap(scene, mapData);\r\n};\r\n\r\nmodule.exports = ParseToTilemap;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Formats","MapData","Parse","Tilemap","ParseToTilemap","scene","key","tileWidth","tileHeight","width","height","data","insertNull","undefined","mapData","Array","isArray","name","ARRAY_2D","tilemapData","cache","tilemap","get","format","console","warn"]
}
