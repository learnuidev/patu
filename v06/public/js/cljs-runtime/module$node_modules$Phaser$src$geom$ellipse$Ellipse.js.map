{
"version":3,
"file":"module$node_modules$Phaser$src$geom$ellipse$Ellipse.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/geom/ellipse/Ellipse.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$ellipse$Ellipse\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Contains = require('./Contains');\r\nvar GetPoint = require('./GetPoint');\r\nvar GetPoints = require('./GetPoints');\r\nvar Random = require('./Random');\r\n\r\n/**\r\n * @classdesc\r\n * An Ellipse object.\r\n *\r\n * This is a geometry object, containing numerical values and related methods to inspect and modify them.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render an Ellipse you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Ellipse\r\n * @memberOf Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The x position of the center of the ellipse.\r\n * @param {number} [y=0] - The y position of the center of the ellipse.\r\n * @param {number} [width=0] - The width of the ellipse.\r\n * @param {number} [height=0] - The height of the ellipse.\r\n */\r\nvar Ellipse = new Class({\r\n\r\n    initialize:\r\n\r\n    function Ellipse (x, y, width, height)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = 0; }\r\n        if (height === undefined) { height = 0; }\r\n\r\n        /**\r\n         * The x position of the center of the ellipse.\r\n         *\r\n         * @name Phaser.Geom.Ellipse#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = x;\r\n\r\n        /**\r\n         * The y position of the center of the ellipse.\r\n         *\r\n         * @name Phaser.Geom.Ellipse#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = y;\r\n\r\n        /**\r\n         * The width of the ellipse.\r\n         *\r\n         * @name Phaser.Geom.Ellipse#width\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.width = width;\r\n\r\n        /**\r\n         * The height of the ellipse.\r\n         *\r\n         * @name Phaser.Geom.Ellipse#height\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.height = height;\r\n    },\r\n\r\n    /**\r\n     * Check to see if the Ellipse contains the given x / y coordinates.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to check within the ellipse.\r\n     * @param {number} y - The y coordinate to check within the ellipse.\r\n     *\r\n     * @return {boolean} True if the coordinates are within the ellipse, otherwise false.\r\n     */\r\n    contains: function (x, y)\r\n    {\r\n        return Contains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * Returns a Point object containing the coordinates of a point on the circumference of the Ellipse\r\n     * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\r\n     * at 180 degrees around the circle.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [out,$return]\r\n     *\r\n     * @param {number} position - A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the ellipse.\r\n     * @param {(Phaser.Geom.Point|object)} [out] - An object to store the return values in. If not given a Point object will be created.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point around the ellipse.\r\n     */\r\n    getPoint: function (position, point)\r\n    {\r\n        return GetPoint(this, position, point);\r\n    },\r\n\r\n    /**\r\n     * Returns an array of Point objects containing the coordinates of the points around the circumference of the Ellipse,\r\n     * based on the given quantity or stepRate values.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#getPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n     * @param {number} [stepRate] - Sets the quantity by getting the circumference of the ellipse and dividing it by the stepRate.\r\n     * @param {array} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n     *\r\n     * @return {Phaser.Geom.Point[]} An array of Point objects pertaining to the points around the circumference of the ellipse.\r\n     */\r\n    getPoints: function (quantity, stepRate, output)\r\n    {\r\n        return GetPoints(this, quantity, stepRate, output);\r\n    },\r\n\r\n    /**\r\n     * Returns a uniformly distributed random point from anywhere within the given Ellipse.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#getRandomPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [point,$return]\r\n     *\r\n     * @param {(Phaser.Geom.Point|object)} [point] - A Point or point-like object to set the random `x` and `y` values in.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n     */\r\n    getRandomPoint: function (point)\r\n    {\r\n        return Random(this, point);\r\n    },\r\n\r\n    /**\r\n     * Sets the x, y, width and height of this ellipse.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x position of the center of the ellipse.\r\n     * @param {number} y - The y position of the center of the ellipse.\r\n     * @param {number} width - The width of the ellipse.\r\n     * @param {number} height - The height of the ellipse.\r\n     *\r\n     * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n     */\r\n    setTo: function (x, y, width, height)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets this Ellipse to be empty with a width and height of zero.\r\n     * Does not change its position.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#setEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n     */\r\n    setEmpty: function ()\r\n    {\r\n        this.width = 0;\r\n        this.height = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the position of this Ellipse.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x position of the center of the ellipse.\r\n     * @param {number} y - The y position of the center of the ellipse.\r\n     *\r\n     * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the size of this Ellipse.\r\n     * Does not change its position.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#setSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of the ellipse.\r\n     * @param {number} [height=width] - The height of the ellipse.\r\n     *\r\n     * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n     */\r\n    setSize: function (width, height)\r\n    {\r\n        if (height === undefined) { height = width; }\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the Ellipse is empty: has a width or height equal to zero.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#isEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} True if the Ellipse is empty, otherwise false.\r\n     */\r\n    isEmpty: function ()\r\n    {\r\n        return (this.width <= 0 || this.height <= 0);\r\n    },\r\n\r\n    /**\r\n     * Returns the minor radius of the ellipse. Also known as the Semi Minor Axis.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#getMinorRadius\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The minor radius.\r\n     */\r\n    getMinorRadius: function ()\r\n    {\r\n        return Math.min(this.width, this.height) / 2;\r\n    },\r\n\r\n    /**\r\n     * Returns the major radius of the ellipse. Also known as the Semi Major Axis.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#getMajorRadius\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The major radius.\r\n     */\r\n    getMajorRadius: function ()\r\n    {\r\n        return Math.max(this.width, this.height) / 2;\r\n    },\r\n\r\n    /**\r\n     * The left position of the Ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#left\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    left: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x - (this.width / 2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.x = value + (this.width / 2);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The right position of the Ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#right\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    right: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x + (this.width / 2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.x = value - (this.width / 2);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The top position of the Ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#top\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    top: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y - (this.height / 2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.y = value + (this.height / 2);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The bottom position of the Ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#bottom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    bottom: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y + (this.height / 2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.y = value - (this.height / 2);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Ellipse;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Contains","GetPoint","GetPoints","Random","Ellipse","initialize","x","y","width","height","undefined","contains","getPoint","position","point","getPoints","quantity","stepRate","output","getRandomPoint","setTo","setEmpty","setPosition","setSize","isEmpty","getMinorRadius","Math","min","getMajorRadius","max","left","get","set","value","right","top","bottom"]
}
