shadow$provide.module$node_modules$Phaser$src$gameobjects$shape$grid$GridWebGLRenderer=function(global,require,module,exports){var Utils=require("module$node_modules$Phaser$src$renderer$webgl$Utils");module.exports=function(renderer,src,interpolationPercentage,camera,parentMatrix){interpolationPercentage=this.pipeline;var camMatrix=interpolationPercentage._tempMatrix1,shapeMatrix=interpolationPercentage._tempMatrix2,calcMatrix=interpolationPercentage._tempMatrix3;renderer.setPipeline(interpolationPercentage);
shapeMatrix.applyITRS(src.x,src.y,src.rotation,src.scaleX,src.scaleY);camMatrix.copyFrom(camera.matrix);parentMatrix?(camMatrix.multiplyWithOffset(parentMatrix,-camera.scrollX*src.scrollFactorX,-camera.scrollY*src.scrollFactorY),shapeMatrix.e=src.x,shapeMatrix.f=src.y):(shapeMatrix.e-=camera.scrollX*src.scrollFactorX,shapeMatrix.f-=camera.scrollY*src.scrollFactorY);camMatrix.multiply(shapeMatrix,calcMatrix);calcMatrix.translate(-src._displayOriginX,-src._displayOriginY);var alpha=camera.alpha*src.alpha;
renderer=src.width;camMatrix=src.height;shapeMatrix=src.cellWidth;camera=src.cellHeight;calcMatrix=Math.ceil(renderer/shapeMatrix);parentMatrix=Math.ceil(camMatrix/camera);var cellWidthA=shapeMatrix,cellHeightA=camera,cellWidthB=shapeMatrix-(calcMatrix*shapeMatrix-renderer),cellHeightB=camera-(parentMatrix*camera-camMatrix);var fillTint=src.showCells;var showAltCells=src.showAltCells,showOutline=src.showOutline,r=0;showOutline&&(cellWidthA--,cellHeightA--,cellWidthB===shapeMatrix&&cellWidthB--,cellHeightB===
camera&&cellHeightB--);if(fillTint&&0<src.fillAlpha){fillTint=interpolationPercentage.fillTint;var fillTintColor=Utils.getTintAppendFloatAlphaAndSwap(src.fillColor,src.fillAlpha*alpha);fillTint.TL=fillTintColor;fillTint.TR=fillTintColor;fillTint.BL=fillTintColor;fillTint.BR=fillTintColor;for(fillTintColor=0;fillTintColor<parentMatrix;fillTintColor++)for(showAltCells&&(r=fillTintColor%2),fillTint=0;fillTint<calcMatrix;fillTint++)if(showAltCells&&r)r=0;else{r++;var cw=fillTint<calcMatrix-1?cellWidthA:
cellWidthB;var ch=fillTintColor<parentMatrix-1?cellHeightA:cellHeightB;interpolationPercentage.batchFillRect(fillTint*shapeMatrix,fillTintColor*camera,cw,ch)}}if(showAltCells&&0<src.altFillAlpha)for(fillTint=interpolationPercentage.fillTint,fillTintColor=Utils.getTintAppendFloatAlphaAndSwap(src.altFillColor,src.altFillAlpha*alpha),fillTint.TL=fillTintColor,fillTint.TR=fillTintColor,fillTint.BL=fillTintColor,fillTint.BR=fillTintColor,fillTintColor=0;fillTintColor<parentMatrix;fillTintColor++)for(showAltCells&&
(r=fillTintColor%2),fillTint=0;fillTint<calcMatrix;fillTint++)showAltCells&&!r?r=1:(r=0,cw=fillTint<calcMatrix-1?cellWidthA:cellWidthB,ch=fillTintColor<parentMatrix-1?cellHeightA:cellHeightB,interpolationPercentage.batchFillRect(fillTint*shapeMatrix,fillTintColor*camera,cw,ch));if(showOutline&&0<src.outlineFillAlpha){cellWidthA=interpolationPercentage.strokeTint;src=Utils.getTintAppendFloatAlphaAndSwap(src.outlineFillColor,src.outlineFillAlpha*alpha);cellWidthA.TL=src;cellWidthA.TR=src;cellWidthA.BL=
src;cellWidthA.BR=src;for(fillTint=1;fillTint<calcMatrix;fillTint++)src=fillTint*shapeMatrix,interpolationPercentage.batchLine(src,0,src,camMatrix,1,1,1,0,!1);for(fillTintColor=1;fillTintColor<parentMatrix;fillTintColor++)src=fillTintColor*camera,interpolationPercentage.batchLine(0,src,renderer,src,1,1,1,0,!1)}}}
//# sourceMappingURL=module$node_modules$Phaser$src$gameobjects$shape$grid$GridWebGLRenderer.js.map
