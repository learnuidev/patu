{
"version":3,
"file":"module$node_modules$Phaser$src$utils$array$NumberArrayStep.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,2DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOvH,IAAIC,kBAAoBH,OAAA,CAAQ,uDAAR,CAgExBC,OAAAC,QAAA,CAzBsBE,QAAS,CAACC,KAAD,CAAQC,GAAR,CAAaC,IAAb,CAC/B,CACkBC,IAAAA,EAAd,GAAIH,KAAJ,GAA2BA,KAA3B,CAAmC,CAAnC,CACYG,KAAAA,EAAZ,GAAIF,GAAJ,GAAyBA,GAAzB,CAA+B,IAA/B,CACaE,KAAAA,EAAb,GAAID,IAAJ,GAA0BA,IAA1B,CAAiC,CAAjC,CAEY,KAAZ,GAAID,GAAJ,GAEIA,GACA,CADMD,KACN,CAAAA,KAAA,CAAQ,CAHZ,CAMA,KAAII,OAAS,EAETC,IAAAA,CAAQC,IAAAC,IAAA,CAAST,iBAAA,EAAmBG,GAAnB,CAAyBD,KAAzB,GAAmCE,IAAnC,EAA2C,CAA3C,EAAT,CAAyD,CAAzD,CAEZ,KAAK,IAAIM,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,GAApB,CAA2BG,CAAA,EAA3B,CAEIJ,MAAAK,KAAA,CAAYT,KAAZ,CACA,CAAAA,KAAA,EAASE,IAGb,OAAOE,OArBX,CA/CuH;",
"sources":["node_modules/Phaser/src/utils/array/NumberArrayStep.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$array$NumberArrayStep\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar RoundAwayFromZero = require('../../math/RoundAwayFromZero');\n\n/**\n * Create an array of numbers (positive and/or negative) progressing from `start`\n * up to but not including `end` by advancing by `step`.\n *\n * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\n *\n * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\n * for forward compatibility make sure to pass in actual numbers.\n * \n * @example\n * NumberArrayStep(4);\n * // => [0, 1, 2, 3]\n *\n * NumberArrayStep(1, 5);\n * // => [1, 2, 3, 4]\n *\n * NumberArrayStep(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * NumberArrayStep(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * NumberArrayStep(1, 4, 0);\n * // => [1, 1, 1]\n *\n * NumberArrayStep(0);\n * // => []\n *\n * @function Phaser.Utils.Array.NumberArrayStep\n * @since 3.0.0\n *\n * @param {number} [start=0] - The start of the range.\n * @param {number} [end=null] - The end of the range.\n * @param {number} [step=1] - The value to increment or decrement by.\n *\n * @return {number[]} [description]\n */\nvar NumberArrayStep = function (start, end, step)\n{\n    if (start === undefined) { start = 0; }\n    if (end === undefined) { end = null; }\n    if (step === undefined) { step = 1; }\n\n    if (end === null)\n    {\n        end = start;\n        start = 0;\n    }\n\n    var result = [];\n\n    var total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\n\n    for (var i = 0; i < total; i++)\n    {\n        result.push(start);\n        start += step;\n    }\n\n    return result;\n};\n\nmodule.exports = NumberArrayStep;\n\n};"],
"names":["shadow$provide","global","require","module","exports","RoundAwayFromZero","NumberArrayStep","start","end","step","undefined","result","total","Math","max","i","push"]
}
