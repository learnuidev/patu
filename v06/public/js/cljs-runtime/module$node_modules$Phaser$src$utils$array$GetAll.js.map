{
"version":3,
"file":"module$node_modules$Phaser$src$utils$array$GetAll.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9G,IAAIC,UAAYH,OAAA,CAAQ,sDAAR,CAiDhBC,OAAAC,QAAA,CAzBaE,QAAS,CAACC,KAAD,CAAQC,QAAR,CAAkBC,KAAlB,CAAyBC,UAAzB,CAAqCC,QAArC,CACtB,CACuBC,IAAAA,EAAnB,GAAIF,UAAJ,GAAgCA,UAAhC,CAA6C,CAA7C,CACiBE,KAAAA,EAAjB,GAAID,QAAJ,GAA8BA,QAA9B,CAAyCJ,KAAAM,OAAzC,CAEA,KAAIC,OAAS,EAEb,IAAIT,SAAA,CAAUE,KAAV,CAAiBG,UAAjB,CAA6BC,QAA7B,CAAJ,CAEI,IAAA,CAAyBI,UAAzB,CAA6BJ,QAA7B,CAAuCI,UAAA,EAAvC,CACA,CACI,IAAIC,MAAQT,KAAA,CAAMQ,UAAN,CAEZ,EAAI,CAACP,QAAL,EACKA,QADL,EAC2BI,IAAAA,EAD3B,GACiBH,KADjB,EACwCO,KAAAC,eAAA,CAAqBT,QAArB,CADxC;AAEKA,QAFL,EAE2BI,IAAAA,EAF3B,GAEiBH,KAFjB,EAEwCO,KAAA,CAAMR,QAAN,CAFxC,GAE4DC,KAF5D,GAIIK,MAAAI,KAAA,CAAYF,KAAZ,CAPR,CAYJ,MAAOF,OArBX,CAhC8G;",
"sources":["node_modules/Phaser/src/utils/array/GetAll.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$array$GetAll\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Returns all elements in the array.\r\n *\r\n * You can optionally specify a matching criteria using the `property` and `value` arguments.\r\n *\r\n * For example: `getAll('visible', true)` would return only elements that have their visible property set.\r\n *\r\n * Optionally you can specify a start and end index. For example if the array had 100 elements,\r\n * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\r\n * the first 50 elements.\r\n *\r\n * @function Phaser.Utils.Array.GetAll\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} [property] - The property to test on each array element.\r\n * @param {*} [value] - The value to test the property against. Must pass a strict (`===`) comparison check.\r\n * @param {integer} [startIndex] - An optional start index to search from.\r\n * @param {integer} [endIndex] - An optional end index to search to.\r\n *\r\n * @return {array} All matching elements from the array.\r\n */\r\nvar GetAll = function (array, property, value, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    var output = [];\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        for (var i = startIndex; i < endIndex; i++)\r\n        {\r\n            var child = array[i];\r\n\r\n            if (!property ||\r\n                (property && value === undefined && child.hasOwnProperty(property)) ||\r\n                (property && value !== undefined && child[property] === value))\r\n            {\r\n                output.push(child);\r\n            }\r\n        }\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = GetAll;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","SafeRange","GetAll","array","property","value","startIndex","endIndex","undefined","length","output","i","child","hasOwnProperty","push"]
}
