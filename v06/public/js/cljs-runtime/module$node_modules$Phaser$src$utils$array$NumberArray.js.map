{
"version":3,
"file":"module$node_modules$Phaser$src$utils$array$NumberArray.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0DnHD,MAAAC,QAAA,CA1BkBC,QAAS,CAACC,KAAD,CAAQC,GAAR,CAAaC,MAAb,CAAqBC,MAArB,CAC3B,CAGI,IAFA,IAAIC,OAAS,EAEb,CAAoBC,KAApB,EAAyBJ,GAAzB,CAA8BI,KAAA,EAA9B,CAEI,GAAIH,MAAJ,EAAcC,MAAd,CACA,CACI,IAAIG,IAAOJ,MAAD,CAAWA,MAAX,CAAoBG,KAAAE,SAAA,EAApB,CAAmCF,KAAAE,SAAA,EAEzCJ,OAAJ,GAEIG,GAFJ,CAEUA,GAAAE,OAAA,CAAWL,MAAX,CAFV,CAKAC,OAAAK,KAAA,CAAYH,GAAZ,CARJ,CADA,IAaIF,OAAAK,KAAA,CAAYJ,KAAZ,CAIR,OAAOD,OAtBX,CAjCmH;",
"sources":["node_modules/Phaser/src/utils/array/NumberArray.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$array$NumberArray\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Create an array representing the range of numbers (usually integers), between, and inclusive of,\r\n * the given `start` and `end` arguments. For example:\r\n *\r\n * `var array = numberArray(2, 4); // array = [2, 3, 4]`\r\n * `var array = numberArray(0, 9); // array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\r\n *\r\n * This is equivalent to `numberArrayStep(start, end, 1)`.\r\n *\r\n * You can optionally provide a prefix and / or suffix string. If given the array will contain\r\n * strings, not integers. For example:\r\n *\r\n * `var array = numberArray(1, 4, 'Level '); // array = [\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\"]`\r\n * `var array = numberArray(5, 7, 'HD-', '.png'); // array = [\"HD-5.png\", \"HD-6.png\", \"HD-7.png\"]`\r\n *\r\n * @function Phaser.Utils.Array.NumberArray\r\n * @since 3.0.0\r\n *\r\n * @param {number} start - The minimum value the array starts with.\r\n * @param {number} end - The maximum value the array contains.\r\n * @param {string} [prefix] - Optional prefix to place before the number. If provided the array will contain strings, not integers.\r\n * @param {string} [suffix] - Optional suffix to place after the number. If provided the array will contain strings, not integers.\r\n *\r\n * @return {(number[]|string[])} The array of number values, or strings if a prefix or suffix was provided.\r\n */\r\nvar NumberArray = function (start, end, prefix, suffix)\r\n{\r\n    var result = [];\r\n\r\n    for (var i = start; i <= end; i++)\r\n    {\r\n        if (prefix || suffix)\r\n        {\r\n            var key = (prefix) ? prefix + i.toString() : i.toString();\r\n\r\n            if (suffix)\r\n            {\r\n                key = key.concat(suffix);\r\n            }\r\n\r\n            result.push(key);\r\n        }\r\n        else\r\n        {\r\n            result.push(i);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nmodule.exports = NumberArray;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","NumberArray","start","end","prefix","suffix","result","i","key","toString","concat","push"]
}
