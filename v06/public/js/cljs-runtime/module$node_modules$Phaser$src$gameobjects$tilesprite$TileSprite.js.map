{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$tilesprite$TileSprite.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/tilesprite/TileSprite.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$tilesprite$TileSprite\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar CanvasPool = require('../../display/canvas/CanvasPool');\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar CONST = require('../../const');\r\nvar GameObject = require('../GameObject');\r\nvar GetPowerOfTwo = require('../../math/pow2/GetPowerOfTwo');\r\nvar TileSpriteRender = require('./TileSpriteRender');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n//  bitmask flag for GameObject.renderMask\r\nvar _FLAG = 8; // 1000\r\n\r\n/**\r\n * @classdesc\r\n * A TileSprite is a Sprite that has a repeating texture.\r\n *\r\n * The texture can be scrolled and scaled independently of the TileSprite itself. Textures will automatically wrap and\r\n * are designed so that you can create game backdrops using seamless textures as a source.\r\n *\r\n * You shouldn't ever create a TileSprite any larger than your actual screen size. If you want to create a large repeating background\r\n * that scrolls across the whole map of your game, then you create a TileSprite that fits the screen size and then use the `tilePosition`\r\n * property to scroll the texture as the player moves. If you create a TileSprite that is thousands of pixels in size then it will \r\n * consume huge amounts of memory and cause performance issues. Remember: use `tilePosition` to scroll your texture and `tileScale` to\r\n * adjust the scale of the texture - don't resize the sprite itself or make it larger than it needs.\r\n * \r\n * An important note about Tile Sprites and NPOT textures: Internally, TileSprite textures use GL_REPEAT to provide\r\n * seamless repeating of the textures. This, combined with the way in which the textures are handled in WebGL, means\r\n * they need to be POT (power-of-two) sizes in order to wrap. If you provide a NPOT (non power-of-two) texture to a\r\n * TileSprite it will generate a POT sized canvas and draw your texture to it, scaled up to the POT size. It's then\r\n * scaled back down again during rendering to the original dimensions. While this works, in that it allows you to use\r\n * any size texture for a Tile Sprite, it does mean that NPOT textures are going to appear anti-aliased when rendered,\r\n * due to the interpolation that took place when it was resized into a POT texture. This is especially visible in\r\n * pixel art graphics. If you notice it and it becomes an issue, the only way to avoid it is to ensure that you\r\n * provide POT textures for Tile Sprites.\r\n *\r\n * @class TileSprite\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Crop\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Tint\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number} width - The width of the Game Object.\r\n * @param {number} height - The height of the Game Object.\r\n * @param {string} textureKey - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frameKey] - An optional frame from the Texture this Game Object is rendering with.\r\n */\r\nvar TileSprite = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Crop,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Mask,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.ScrollFactor,\r\n        Components.Tint,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        TileSpriteRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function TileSprite (scene, x, y, width, height, textureKey, frameKey)\r\n    {\r\n        width = Math.floor(width);\r\n        height = Math.floor(height);\r\n\r\n        var renderer = scene.sys.game.renderer;\r\n\r\n        GameObject.call(this, scene, 'TileSprite');\r\n\r\n        /**\r\n         * Internal tile position vector.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#_tilePosition\r\n         * @type {Phaser.Math.Vector2}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._tilePosition = new Vector2();\r\n\r\n        /**\r\n         * Internal tile scale vector.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#_tileScale\r\n         * @type {Phaser.Math.Vector2}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._tileScale = new Vector2(1, 1);\r\n\r\n        /**\r\n         * Whether the Tile Sprite has changed in some way, requiring an re-render of its tile texture.\r\n         *\r\n         * Such changes include the texture frame and scroll position of the Tile Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#dirty\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.dirty = false;\r\n\r\n        /**\r\n         * The renderer in use by this Tile Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#renderer\r\n         * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n         * @since 3.0.0\r\n         */\r\n        this.renderer = renderer;\r\n\r\n        /**\r\n         * The Canvas element that the TileSprite renders its fill pattern in to.\r\n         * Only used in Canvas mode.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#canvas\r\n         * @type {?HTMLCanvasElement}\r\n         * @since 3.12.0\r\n         */\r\n        this.canvas = CanvasPool.create(this, width, height);\r\n\r\n        /**\r\n         * The Context of the Canvas element that the TileSprite renders its fill pattern in to.\r\n         * Only used in Canvas mode.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#context\r\n         * @type {CanvasRenderingContext2D}\r\n         * @since 3.12.0\r\n         */\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        /**\r\n         * The Texture the TileSprite is using as its fill pattern.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#displayTexture\r\n         * @type {Phaser.Textures.Texture|Phaser.Textures.CanvasTexture}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this.displayTexture = scene.sys.textures.get(textureKey);\r\n\r\n        /**\r\n         * The Frame the TileSprite is using as its fill pattern.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#displayFrame\r\n         * @type {Phaser.Textures.Frame}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this.displayFrame = this.displayTexture.get(frameKey);\r\n\r\n        /**\r\n         * The internal crop data object, as used by `setCrop` and passed to the `Frame.setCropUVs` method.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#_crop\r\n         * @type {object}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._crop = this.resetCropObject();\r\n\r\n        /**\r\n         * The Texture this Game Object is using to render with.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#texture\r\n         * @type {Phaser.Textures.Texture|Phaser.Textures.CanvasTexture}\r\n         * @since 3.0.0\r\n         */\r\n        this.texture = scene.sys.textures.addCanvas(null, this.canvas, true);\r\n\r\n        /**\r\n         * The Texture Frame this Game Object is using to render with.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#frame\r\n         * @type {Phaser.Textures.Frame}\r\n         * @since 3.0.0\r\n         */\r\n        this.frame = this.texture.get();\r\n\r\n        /**\r\n         * The next power of two value from the width of the Fill Pattern frame.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#potWidth\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.potWidth = GetPowerOfTwo(this.displayFrame.width);\r\n\r\n        /**\r\n         * The next power of two value from the height of the Fill Pattern frame.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#potHeight\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.potHeight = GetPowerOfTwo(this.displayFrame.height);\r\n\r\n        /**\r\n         * The Canvas that the TileSprites texture is rendered to.\r\n         * This is used to create a WebGL texture from.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#fillCanvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.12.0\r\n         */\r\n        this.fillCanvas = CanvasPool.create2D(this, this.potWidth, this.potHeight);\r\n\r\n        /**\r\n         * The Canvas Context used to render the TileSprites texture.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#fillContext\r\n         * @type {CanvasRenderingContext2D}\r\n         * @since 3.12.0\r\n         */\r\n        this.fillContext = this.fillCanvas.getContext('2d');\r\n\r\n        /**\r\n         * The texture that the Tile Sprite is rendered to, which is then rendered to a Scene.\r\n         * In WebGL this is a WebGLTexture. In Canvas it's a Canvas Fill Pattern.\r\n         *\r\n         * @name Phaser.GameObjects.TileSprite#fillPattern\r\n         * @type {?(WebGLTexture|CanvasPattern)}\r\n         * @since 3.12.0\r\n         */\r\n        this.fillPattern = null;\r\n\r\n        this.setFrame(frameKey);\r\n        this.setPosition(x, y);\r\n        this.setSize(width, height);\r\n        this.setOriginFromFrame();\r\n        this.initPipeline();\r\n\r\n        if (scene.sys.game.config.renderType === CONST.WEBGL)\r\n        {\r\n            scene.sys.game.renderer.onContextRestored(function (renderer)\r\n            {\r\n                var gl = renderer.gl;\r\n\r\n                this.dirty = true;\r\n                this.fillPattern = null;\r\n                this.fillPattern = renderer.createTexture2D(0, gl.LINEAR, gl.LINEAR, gl.REPEAT, gl.REPEAT, gl.RGBA, this.fillCanvas, this.potWidth, this.potHeight);\r\n            }, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the texture and frame this Game Object will use to render with.\r\n     *\r\n     * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n     *\r\n     * @method Phaser.GameObjects.TileSprite#setTexture\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the texture to be used, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setTexture: function (key, frame)\r\n    {\r\n        this.displayTexture = this.scene.sys.textures.get(key);\r\n\r\n        return this.setFrame(frame);\r\n    },\r\n\r\n    /**\r\n     * Sets the frame this Game Object will use to render with.\r\n     *\r\n     * The Frame has to belong to the current Texture being used.\r\n     *\r\n     * It can be either a string or an index.\r\n     *\r\n     * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\r\n     * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\r\n     *\r\n     * @method Phaser.GameObjects.TileSprite#setFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer)} frame - The name or index of the frame within the Texture.\r\n     * @param {boolean} [updateSize=true] - Should this call adjust the size of the Game Object?\r\n     * @param {boolean} [updateOrigin=true] - Should this call adjust the origin of the Game Object?\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setFrame: function (frame, updateSize, updateOrigin)\r\n    {\r\n        if (updateSize === undefined) { updateSize = true; }\r\n        if (updateOrigin === undefined) { updateOrigin = true; }\r\n\r\n        this.displayFrame = this.displayTexture.get(frame);\r\n\r\n        if (!this.displayFrame.cutWidth || !this.displayFrame.cutHeight)\r\n        {\r\n            this.renderFlags &= ~_FLAG;\r\n        }\r\n        else\r\n        {\r\n            this.renderFlags |= _FLAG;\r\n        }\r\n\r\n        if (this._sizeComponent && updateSize)\r\n        {\r\n            this.setSizeToFrame();\r\n        }\r\n\r\n        if (this._originComponent && updateOrigin)\r\n        {\r\n            if (this.displayFrame.customPivot)\r\n            {\r\n                this.setOrigin(this.displayFrame.pivotX, this.displayFrame.pivotY);\r\n            }\r\n            else\r\n            {\r\n                this.updateDisplayOrigin();\r\n            }\r\n        }\r\n\r\n        this.dirty = true;\r\n\r\n        this.updateTileTexture();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets {@link Phaser.GameObjects.TileSprite#tilePositionX} and {@link Phaser.GameObjects.TileSprite#tilePositionY}.\r\n     *\r\n     * @method Phaser.GameObjects.TileSprite#setTilePosition\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} [x] - The x position of this sprite's tiling texture.\r\n     * @param {number} [y] - The y position of this sprite's tiling texture.\r\n     *\r\n     * @return {this} This Tile Sprite instance.\r\n     */\r\n    setTilePosition: function (x, y)\r\n    {\r\n        if (x !== undefined)\r\n        {\r\n            this.tilePositionX = x;\r\n        }\r\n\r\n        if (y !== undefined)\r\n        {\r\n            this.tilePositionY = y;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets {@link Phaser.GameObjects.TileSprite#tileScaleX} and {@link Phaser.GameObjects.TileSprite#tileScaleY}.\r\n     *\r\n     * @method Phaser.GameObjects.TileSprite#setTileScale\r\n     * @since 3.12.0\r\n     *\r\n     * @param {number} [x] - The horizontal scale of the tiling texture.\r\n     * @param {number} [y] - The vertical scale of the tiling texture.\r\n     *\r\n     * @return {this} This Tile Sprite instance.\r\n     */\r\n    setTileScale: function (x, y)\r\n    {\r\n        if (x !== undefined)\r\n        {\r\n            this.tileScaleX = x;\r\n        }\r\n\r\n        if (y !== undefined)\r\n        {\r\n            this.tileScaleY = y;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Render the tile texture if it is dirty, or if the frame has changed.\r\n     *\r\n     * @method Phaser.GameObjects.TileSprite#updateTileTexture\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    updateTileTexture: function ()\r\n    {\r\n        if (!this.dirty)\r\n        {\r\n            return;\r\n        }\r\n\r\n        //  Draw the displayTexture to our fillCanvas\r\n\r\n        var frame = this.displayFrame;\r\n\r\n        var ctx = this.fillContext;\r\n        var canvas = this.fillCanvas;\r\n\r\n        var fw = this.potWidth;\r\n        var fh = this.potHeight;\r\n\r\n        if (!this.renderer.gl)\r\n        {\r\n            fw = frame.cutWidth;\r\n            fh = frame.cutHeight;\r\n        }\r\n\r\n        ctx.clearRect(0, 0, fw, fh);\r\n\r\n        canvas.width = fw;\r\n        canvas.height = fh;\r\n\r\n        ctx.drawImage(\r\n            frame.source.image,\r\n            frame.cutX, frame.cutY,\r\n            frame.cutWidth, frame.cutHeight,\r\n            0, 0,\r\n            fw, fh\r\n        );\r\n\r\n        if (this.renderer.gl)\r\n        {\r\n            this.fillPattern = this.renderer.canvasToTexture(canvas, this.fillPattern);\r\n        }\r\n        else\r\n        {\r\n            this.fillPattern = ctx.createPattern(canvas, 'repeat');\r\n        }\r\n\r\n        this.updateCanvas();\r\n\r\n        this.dirty = false;\r\n    },\r\n\r\n    /**\r\n     * Draw the fill pattern to the internal canvas.\r\n     *\r\n     * @method Phaser.GameObjects.TileSprite#updateCanvas\r\n     * @private\r\n     * @since 3.12.0\r\n     */\r\n    updateCanvas: function ()\r\n    {\r\n        var canvas = this.canvas;\r\n\r\n        if (canvas.width !== this.width || canvas.height !== this.height)\r\n        {\r\n            canvas.width = this.width;\r\n            canvas.height = this.height;\r\n\r\n            this.frame.setSize(this.width, this.height);\r\n        }\r\n\r\n        if (!this.dirty || this.renderer && this.renderer.gl)\r\n        {\r\n            this.dirty = false;\r\n            return;\r\n        }\r\n\r\n        var ctx = this.context;\r\n\r\n        var scaleX = this._tileScale.x;\r\n        var scaleY = this._tileScale.y;\r\n\r\n        var positionX = this._tilePosition.x;\r\n        var positionY = this._tilePosition.y;\r\n\r\n        ctx.clearRect(0, 0, this.width, this.height);\r\n\r\n        ctx.save();\r\n\r\n        ctx.scale(scaleX, scaleY);\r\n\r\n        ctx.translate(-positionX, -positionY);\r\n\r\n        ctx.fillStyle = this.fillPattern;\r\n\r\n        ctx.fillRect(positionX, positionY, this.width / scaleX, this.height / scaleY);\r\n\r\n        ctx.restore();\r\n\r\n        this.dirty = false;\r\n    },\r\n\r\n    /**\r\n     * Internal destroy handler, called as part of the destroy process.\r\n     *\r\n     * @method Phaser.GameObjects.TileSprite#preDestroy\r\n     * @protected\r\n     * @since 3.9.0\r\n     */\r\n    preDestroy: function ()\r\n    {\r\n        if (this.renderer && this.renderer.gl)\r\n        {\r\n            this.renderer.deleteTexture(this.fillPattern);\r\n        }\r\n\r\n        CanvasPool.remove(this.canvas);\r\n        CanvasPool.remove(this.fillCanvas);\r\n\r\n        this.fillPattern = null;\r\n        this.fillContext = null;\r\n        this.fillCanvas = null;\r\n\r\n        this.displayTexture = null;\r\n        this.displayFrame = null;\r\n\r\n        this.texture.destroy();\r\n\r\n        this.renderer = null;\r\n    },\r\n\r\n    /**\r\n     * The horizontal scroll position of the Tile Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.TileSprite#tilePositionX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    tilePositionX: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._tilePosition.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._tilePosition.x = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The vertical scroll position of the Tile Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.TileSprite#tilePositionY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    tilePositionY: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._tilePosition.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._tilePosition.y = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The horizontal scale of the Tile Sprite texture.\r\n     *\r\n     * @name Phaser.GameObjects.TileSprite#tileScaleX\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.11.0\r\n     */\r\n    tileScaleX: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._tileScale.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._tileScale.x = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The vertical scale of the Tile Sprite texture.\r\n     *\r\n     * @name Phaser.GameObjects.TileSprite#tileScaleY\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.11.0\r\n     */\r\n    tileScaleY: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._tileScale.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._tileScale.y = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TileSprite;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","CanvasPool","Class","Components","CONST","GameObject","GetPowerOfTwo","TileSpriteRender","Vector2","TileSprite","Extends","Mixins","Alpha","BlendMode","ComputedSize","Crop","Depth","Flip","GetBounds","Mask","Origin","Pipeline","ScaleMode","ScrollFactor","Tint","Transform","Visible","initialize","scene","x","y","width","height","textureKey","frameKey","Math","floor","renderer","sys","game","call","_tilePosition","_tileScale","dirty","canvas","create","context","getContext","displayTexture","textures","get","displayFrame","_crop","resetCropObject","texture","addCanvas","frame","potWidth","potHeight","fillCanvas","create2D","fillContext","fillPattern","setFrame","setPosition","setSize","setOriginFromFrame","initPipeline","config","renderType","WEBGL","onContextRestored","gl","createTexture2D","LINEAR","REPEAT","RGBA","setTexture","key","updateSize","updateOrigin","undefined","renderFlags","cutWidth","cutHeight","_FLAG","_sizeComponent","setSizeToFrame","_originComponent","customPivot","setOrigin","pivotX","pivotY","updateDisplayOrigin","updateTileTexture","setTilePosition","tilePositionX","tilePositionY","setTileScale","tileScaleX","tileScaleY","ctx","fw","fh","clearRect","drawImage","source","image","cutX","cutY","canvasToTexture","createPattern","updateCanvas","scaleX","scaleY","positionX","positionY","save","scale","translate","fillStyle","fillRect","restore","preDestroy","deleteTexture","remove","destroy","set","value"]
}
