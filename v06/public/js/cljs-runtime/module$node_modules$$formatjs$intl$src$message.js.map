{
"version":3,
"file":"module$node_modules$$formatjs$intl$src$message.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@formatjs/intl/src/message.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$formatjs$intl$src$message\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatMessage = void 0;\nvar tslib_1 = require(\"tslib\");\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar intl_messageformat_1 = require(\"intl-messageformat\");\nvar error_1 = require(\"./error\");\nvar intl_messageformat_parser_1 = require(\"intl-messageformat-parser\");\nfunction setTimeZoneInOptions(opts, timeZone) {\n    return Object.keys(opts).reduce(function (all, k) {\n        all[k] = tslib_1.__assign({ timeZone: timeZone }, opts[k]);\n        return all;\n    }, {});\n}\nfunction deepMergeOptions(opts1, opts2) {\n    var keys = Object.keys(tslib_1.__assign(tslib_1.__assign({}, opts1), opts2));\n    return keys.reduce(function (all, k) {\n        all[k] = tslib_1.__assign(tslib_1.__assign({}, (opts1[k] || {})), (opts2[k] || {}));\n        return all;\n    }, {});\n}\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n    if (!timeZone) {\n        return f1;\n    }\n    var mfFormats = intl_messageformat_1.IntlMessageFormat.formats;\n    return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });\n}\nfunction formatMessage(_a, state, messageDescriptor, values, opts) {\n    var locale = _a.locale, formats = _a.formats, messages = _a.messages, defaultLocale = _a.defaultLocale, defaultFormats = _a.defaultFormats, onError = _a.onError, timeZone = _a.timeZone, defaultRichTextElements = _a.defaultRichTextElements;\n    if (messageDescriptor === void 0) { messageDescriptor = { id: '' }; }\n    var msgId = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;\n    // `id` is a required field of a Message Descriptor.\n    ecma402_abstract_1.invariant(!!msgId, '[@formatjs/intl] An `id` must be provided to format a message.');\n    var id = String(msgId);\n    var message = \n    // In case messages is Object.create(null)\n    // e.g import('foo.json') from webpack)\n    // See https://github.com/formatjs/formatjs/issues/1914\n    messages &&\n        Object.prototype.hasOwnProperty.call(messages, id) &&\n        messages[id];\n    // IMPORTANT: Hot path if `message` is AST with a single literal node\n    if (Array.isArray(message) &&\n        message.length === 1 &&\n        message[0].type === intl_messageformat_parser_1.TYPE.literal) {\n        return message[0].value;\n    }\n    // IMPORTANT: Hot path straight lookup for performance\n    if (!values &&\n        message &&\n        typeof message === 'string' &&\n        !defaultRichTextElements) {\n        return message.replace(/'\\{(.*?)\\}'/gi, \"{$1}\");\n    }\n    values = tslib_1.__assign(tslib_1.__assign({}, defaultRichTextElements), (values || {}));\n    formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n    defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n    if (!message) {\n        if (!defaultMessage ||\n            (locale && locale.toLowerCase() !== defaultLocale.toLowerCase())) {\n            // This prevents warnings from littering the console in development\n            // when no `messages` are passed into the <IntlProvider> for the\n            // default locale.\n            onError(new error_1.MissingTranslationError(messageDescriptor, locale));\n        }\n        if (defaultMessage) {\n            try {\n                var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);\n                return formatter.format(values);\n            }\n            catch (e) {\n                onError(new error_1.MessageFormatError(\"Error formatting default message for: \\\"\" + id + \"\\\", rendering default message verbatim\", locale, messageDescriptor, e));\n                return typeof defaultMessage === 'string' ? defaultMessage : id;\n            }\n        }\n        return id;\n    }\n    // We have the translated message\n    try {\n        var formatter = state.getMessageFormat(message, locale, formats, tslib_1.__assign({ formatters: state }, (opts || {})));\n        return formatter.format(values);\n    }\n    catch (e) {\n        onError(new error_1.MessageFormatError(\"Error formatting message: \\\"\" + id + \"\\\", using \" + (defaultMessage ? 'default message' : 'id') + \" as fallback.\", locale, messageDescriptor, e));\n    }\n    if (defaultMessage) {\n        try {\n            var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);\n            return formatter.format(values);\n        }\n        catch (e) {\n            onError(new error_1.MessageFormatError(\"Error formatting the default message for: \\\"\" + id + \"\\\", rendering message verbatim\", locale, messageDescriptor, e));\n        }\n    }\n    if (typeof message === 'string') {\n        return message;\n    }\n    if (typeof defaultMessage === 'string') {\n        return defaultMessage;\n    }\n    return id;\n}\nexports.formatMessage = formatMessage;\n\n};"],
"names":["shadow$provide","global","require","module","exports","setTimeZoneInOptions","opts","timeZone","Object","keys","reduce","all","k","tslib_1","__assign","deepMergeOptions","opts1","opts2","deepMergeFormatsAndSetTimeZone","f1","mfFormats","intl_messageformat_1","IntlMessageFormat","formats","date","time","defineProperty","value","formatMessage","ecma402_abstract_1","error_1","intl_messageformat_parser_1","_a","state","messageDescriptor","values","locale","messages","defaultLocale","defaultFormats","onError","defaultRichTextElements","id","msgId","defaultMessage","invariant","String","message","prototype","hasOwnProperty","call","Array","isArray","length","type","TYPE","literal","replace","toLowerCase","MissingTranslationError","formatter","getMessageFormat","format","e","MessageFormatError","formatters"]
}
