{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$parsers$impact$ParseWeltmeister.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,wEAAA,CAA4F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOpI,IAAIC,QAAUH,OAAA,CAAQ,iDAAR,CAAd,CACII,QAAUJ,OAAA,CAAQ,yDAAR,CADd,CAEIK,gBAAkBL,OAAA,CAAQ,wEAAR,CAFtB,CAGIM,cAAgBN,OAAA,CAAQ,sEAAR,CAuDpBC,OAAAC,QAAA,CAhCuBK,QAAS,CAACC,IAAD,CAAOC,IAAP,CAAaC,UAAb,CAChC,CACI,GAA0B,CAA1B;AAAID,IAAAE,MAAAC,OAAJ,CAGI,MADAC,QAAAC,KAAA,CAAa,0CAAb,CAA0DN,IAA1D,CACO,CAAA,IAMX,KAHA,IAAIO,MAAQ,CAAZ,CACIC,OAAS,CADb,CAGSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBR,IAAAE,MAAAC,OAApB,CAAuCK,CAAA,EAAvC,CAEQR,IAAAE,MAAA,CAAWM,CAAX,CAAAF,MACJ,CAD0BA,KAC1B,GADmCA,KACnC,CAD2CN,IAAAE,MAAA,CAAWM,CAAX,CAAAF,MAC3C,EAAIN,IAAAE,MAAA,CAAWM,CAAX,CAAAD,OAAJ,CAA2BA,MAA3B,GAAqCA,MAArC,CAA8CP,IAAAE,MAAA,CAAWM,CAAX,CAAAD,OAA9C,CAGAE,KAAAA,CAAU,IAAId,OAAJ,CAAY,CACtBW,MAAOA,KADe,CAEtBC,OAAQA,MAFc,CAGtBR,KAAMA,IAHgB,CAItBW,UAAWV,IAAAE,MAAA,CAAW,CAAX,CAAAS,SAJW,CAKtBC,WAAYZ,IAAAE,MAAA,CAAW,CAAX,CAAAS,SALU,CAMtBE,OAAQnB,OAAAoB,YANc,CAAZ,CASdL,KAAAM,OAAA,CAAiBnB,eAAA,CAAgBI,IAAhB,CAAsBC,UAAtB,CACjBQ,KAAAO,SAAA,CAAmBnB,aAAA,CAAcG,IAAd,CAEnB,OAAOS,KA5BX,CAlCoI;",
"sources":["node_modules/Phaser/src/tilemaps/parsers/impact/ParseWeltmeister.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$parsers$impact$ParseWeltmeister\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Formats = require('../../Formats');\r\nvar MapData = require('../../mapdata/MapData');\r\nvar ParseTileLayers = require('./ParseTileLayers');\r\nvar ParseTilesets = require('./ParseTilesets');\r\n\r\n/**\r\n * @namespace Phaser.Tilemaps.Parsers.Impact\r\n */\r\n\r\n/**\r\n * Parses a Weltmeister JSON object into a new MapData object.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Impact.ParseWeltmeister\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {object} json - The Weltmeister JSON object.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {?object} [description]\r\n */\r\nvar ParseWeltmeister = function (name, json, insertNull)\r\n{\r\n    if (json.layer.length === 0)\r\n    {\r\n        console.warn('No layers found in the Weltmeister map: ' + name);\r\n        return null;\r\n    }\r\n\r\n    var width = 0;\r\n    var height = 0;\r\n\r\n    for (var i = 0; i < json.layer.length; i++)\r\n    {\r\n        if (json.layer[i].width > width) { width = json.layer[i].width; }\r\n        if (json.layer[i].height > height) { height = json.layer[i].height; }\r\n    }\r\n\r\n    var mapData = new MapData({\r\n        width: width,\r\n        height: height,\r\n        name: name,\r\n        tileWidth: json.layer[0].tilesize,\r\n        tileHeight: json.layer[0].tilesize,\r\n        format: Formats.WELTMEISTER\r\n    });\r\n\r\n    mapData.layers = ParseTileLayers(json, insertNull);\r\n    mapData.tilesets = ParseTilesets(json);\r\n\r\n    return mapData;\r\n};\r\n\r\nmodule.exports = ParseWeltmeister;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Formats","MapData","ParseTileLayers","ParseTilesets","ParseWeltmeister","name","json","insertNull","layer","length","console","warn","width","height","i","mapData","tileWidth","tilesize","tileHeight","format","WELTMEISTER","layers","tilesets"]
}
