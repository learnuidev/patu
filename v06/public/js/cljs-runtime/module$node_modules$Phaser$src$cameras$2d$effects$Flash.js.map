{
"version":3,
"file":"module$node_modules$Phaser$src$cameras$2d$effects$Flash.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/cameras/2d/effects/Flash.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$cameras$2d$effects$Flash\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../../math/Clamp');\r\nvar Class = require('../../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A Camera Flash effect.\r\n *\r\n * This effect will flash the camera viewport to the given color, over the duration specified.\r\n *\r\n * Only the camera viewport is flashed. None of the objects it is displaying are impacted, i.e. their colors do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect, if required.\r\n *\r\n * @class Flash\r\n * @memberOf Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.5.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\r\nvar Flash = new Class({\r\n\r\n    initialize:\r\n\r\n    function Flash (camera)\r\n    {\r\n        /**\r\n         * The Camera this effect belongs to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @readOnly\r\n         * @since 3.5.0\r\n         */\r\n        this.camera = camera;\r\n\r\n        /**\r\n         * Is this effect actively running?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#isRunning\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @default false\r\n         * @since 3.5.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * The duration of the effect, in milliseconds.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#duration\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @default 0\r\n         * @since 3.5.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * The value of the red color channel the camera will use for the fade effect.\r\n         * A value between 0 and 255.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#red\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.red = 0;\r\n\r\n        /**\r\n         * The value of the green color channel the camera will use for the fade effect.\r\n         * A value between 0 and 255.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#green\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.green = 0;\r\n\r\n        /**\r\n         * The value of the blue color channel the camera will use for the fade effect.\r\n         * A value between 0 and 255.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#blue\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.blue = 0;\r\n\r\n        /**\r\n         * The value of the alpha channel used during the fade effect.\r\n         * A value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#alpha\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.alpha = 0;\r\n\r\n        /**\r\n         * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#progress\r\n         * @type {number}\r\n         * @since 3.5.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Effect elapsed timer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#_elapsed\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._elapsed = 0;\r\n\r\n        /**\r\n         * @callback CameraFlashCallback\r\n         *\r\n         * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.\r\n         * @param {number} progress - The progress of the effect. A value between 0 and 1.\r\n         */\r\n\r\n        /**\r\n         * This callback is invoked every frame for the duration of the effect.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#_onUpdate\r\n         * @type {?CameraFlashCallback}\r\n         * @private\r\n         * @default null\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdate;\r\n\r\n        /**\r\n         * On Complete callback scope.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#_onUpdateScope\r\n         * @type {any}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdateScope;\r\n    },\r\n\r\n    /**\r\n     * This event is fired when the flash effect begins to run on a camera.\r\n     *\r\n     * @event CameraFlashStartEvent\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera that the effect began on.\r\n     * @param {Phaser.Cameras.Scene2D.Effects.Flash} effect - A reference to the effect instance.\r\n     * @param {integer} duration - The duration of the effect.\r\n     * @param {integer} red - The red color channel value.\r\n     * @param {integer} green - The green color channel value.\r\n     * @param {integer} blue - The blue color channel value.\r\n     */\r\n\r\n    /**\r\n     * This event is fired when the flash effect completes.\r\n     *\r\n     * @event CameraFlashCompleteEvent\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera that the effect began on.\r\n     * @param {Phaser.Cameras.Scene2D.Effects.Flash} effect - A reference to the effect instance.\r\n     */\r\n\r\n    /**\r\n     * Flashes the Camera to or from the given color over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#start\r\n     * @fires CameraFlashStartEvent\r\n     * @fires CameraFlashCompleteEvent\r\n     * @since 3.5.0\r\n     *\r\n     * @param {integer} [duration=250] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=255] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=255] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=255] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n     * @param {CameraFlashCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n     */\r\n    start: function (duration, red, green, blue, force, callback, context)\r\n    {\r\n        if (duration === undefined) { duration = 250; }\r\n        if (red === undefined) { red = 255; }\r\n        if (green === undefined) { green = 255; }\r\n        if (blue === undefined) { blue = 255; }\r\n        if (force === undefined) { force = false; }\r\n        if (callback === undefined) { callback = null; }\r\n        if (context === undefined) { context = this.camera.scene; }\r\n\r\n        if (!force && this.isRunning)\r\n        {\r\n            return this.camera;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this.duration = duration;\r\n        this.progress = 0;\r\n\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n        this.alpha = 1;\r\n\r\n        this._elapsed = 0;\r\n\r\n        this._onUpdate = callback;\r\n        this._onUpdateScope = context;\r\n\r\n        this.camera.emit('cameraflashstart', this.camera, this, duration, red, green, blue);\r\n\r\n        return this.camera;\r\n    },\r\n\r\n    /**\r\n     * The main update loop for this effect. Called automatically by the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#update\r\n     * @since 3.5.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._elapsed += delta;\r\n\r\n        this.progress = Clamp(this._elapsed / this.duration, 0, 1);\r\n\r\n        if (this._onUpdate)\r\n        {\r\n            this._onUpdate.call(this._onUpdateScope, this.camera, this.progress);\r\n        }\r\n\r\n        if (this._elapsed < this.duration)\r\n        {\r\n            this.alpha = 1 - this.progress;\r\n        }\r\n        else\r\n        {\r\n            this.effectComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called internally by the Canvas Renderer.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#postRenderCanvas\r\n     * @since 3.5.0\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx - The Canvas context to render to.\r\n     *\r\n     * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n     */\r\n    postRenderCanvas: function (ctx)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var camera = this.camera;\r\n\r\n        ctx.fillStyle = 'rgba(' + this.red + ',' + this.green + ',' + this.blue + ',' + this.alpha + ')';\r\n        ctx.fillRect(camera._cx, camera._cy, camera._cw, camera._ch);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Called internally by the WebGL Renderer.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#postRenderWebGL\r\n     * @since 3.5.0\r\n     *\r\n     * @param {Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline} pipeline - The WebGL Pipeline to render to.\r\n     * @param {function} getTintFunction - A function that will return the gl safe tint colors.\r\n     *\r\n     * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n     */\r\n    postRenderWebGL: function (pipeline, getTintFunction)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var camera = this.camera;\r\n        var red = this.red / 255;\r\n        var blue = this.blue / 255;\r\n        var green = this.green / 255;\r\n\r\n        pipeline.drawFillRect(\r\n            camera._cx, camera._cy, camera._cw, camera._ch,\r\n            getTintFunction(red, green, blue, 1),\r\n            this.alpha\r\n        );\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Called internally when the effect completes.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#effectComplete\r\n     * @since 3.5.0\r\n     */\r\n    effectComplete: function ()\r\n    {\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n\r\n        this.isRunning = false;\r\n\r\n        this.camera.emit('cameraflashcomplete', this.camera, this);\r\n    },\r\n\r\n    /**\r\n     * Resets this camera effect.\r\n     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#reset\r\n     * @since 3.5.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.isRunning = false;\r\n\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n    },\r\n\r\n    /**\r\n     * Destroys this effect, releasing it from the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.camera = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Flash;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Clamp","Flash","Class","initialize","camera","isRunning","_elapsed","progress","alpha","blue","green","red","duration","start","force","callback","context","undefined","scene","_onUpdate","_onUpdateScope","emit","update","time","delta","call","effectComplete","postRenderCanvas","ctx","fillStyle","fillRect","_cx","_cy","_cw","_ch","postRenderWebGL","pipeline","getTintFunction","drawFillRect","reset","destroy"]
}
