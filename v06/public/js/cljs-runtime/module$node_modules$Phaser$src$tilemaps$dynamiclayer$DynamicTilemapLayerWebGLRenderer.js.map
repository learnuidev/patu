{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$dynamiclayer$DynamicTilemapLayerWebGLRenderer.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,sFAAA,CAA0G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOlJ,IAAIC,MAAQH,OAAA,CAAQ,qDAAR,CAwGZC,OAAAC,QAAA,CAxFuCE,QAAS,CAACC,QAAD,CAAWC,GAAX,CAAgBC,uBAAhB,CAAyCC,MAAzC,CAChD,CACIF,GAAAG,KAAA,CAASD,MAAT,CAEIE,SAAAA,CAAcJ,GAAAK,YACdC,wBAAAA,CAAYF,QAAAG,OAChB,KAAIC,MAAQN,MAAAM,MAARA,CAAuBR,GAAAQ,MAE3B,IAAI,EAAc,CAAd,GAAAF,uBAAA,EAA4B,CAA5B,EAAmBE,KAAnB,CAAJ,CAuBA,IAlBA,IAAIC,OAAST,GAAAS,OAAb,CACIC,SAAWV,GAAAU,SADf,CAGIC,QAAUd,KAAAe,wBAHd;AAKIC,cAAgBb,GAAAa,cALpB,CAMIC,cAAgBd,GAAAc,cANpB,CAQIC,EAAIf,GAAAe,EARR,CASIC,EAAIhB,GAAAgB,EATR,CAWIC,GAAKjB,GAAAkB,OAXT,CAYIC,GAAKnB,GAAAoB,OAZT,CAcIC,SAAWrB,GAAAsB,QAdf,CAkBSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBF,QAAAd,OAApB,CAAqCgB,CAAA,EAArC,CAKI,IAHA,IAAIC,WAAaH,QAAA,CAASE,CAAT,CAAjB,CACIE,QAAUD,UAAAE,UADd,CAGSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBrB,uBAApB,CAA+BqB,CAAA,EAA/B,CACA,CACI,IAAIC,KAAOxB,QAAA,CAAYuB,CAAZ,CAAX,CAEIL,QAAUb,MAAA,CAAOmB,IAAAC,MAAP,CAEd,IAAIP,OAAJ,GAAgBE,UAAhB,CAAA,CAMA,IAAIM,cAAgBR,OAAAS,0BAAA,CAAkCH,IAAAC,MAAlC,CAEpB,IAAsB,IAAtB,GAAIC,aAAJ,CAAA,CAKIE,OAAAA,CAAaJ,IAAAK,MACjB,KAAIC,YAAcN,IAAAO,OAAlB,CAEIC,OAASN,aAAAf,EACTsB,cAAAA,CAASP,aAAAd,EAEb;IAAIsB,GAAkB,EAAlBA,CAAKV,IAAAK,MAAT,CACIM,GAAmB,EAAnBA,CAAKX,IAAAO,OADT,CAGIK,KAAO7B,OAAA,CAAQiB,IAAAY,KAAR,CAAmBhC,KAAnB,CAA2BoB,IAAApB,MAA3B,CAEXE,SAAA+B,aAAA,CACIzC,GADJ,CAEIyB,OAFJ,CAGIA,OAAAQ,MAHJ,CAGmBR,OAAAU,OAHnB,EAIKG,EAJL,CAIUvB,CAJV,CAIca,IAAAc,OAJd,EAI6BzB,EAJ7B,EAIkCsB,EAJlC,CAIuCvB,CAJvC,CAI2CY,IAAAe,OAJ3C,EAI0DxB,EAJ1D,CAKIS,IAAAK,MALJ,CAKgBL,IAAAO,OALhB,CAMIlB,EANJ,CAMQE,EANR,CAOIS,IAAAgB,SAPJ,CAQIhB,IAAAiB,MARJ,CAQgBjB,IAAAkB,MARhB,CASIjC,aATJ,CASmBC,aATnB,CAUIwB,EAVJ,CAUQC,EAVR,CAWIH,MAXJ,CAWYC,aAXZ,CAWoBL,OAXpB,CAWgCE,WAXhC,CAYIM,IAZJ,CAYUA,IAZV,CAYgBA,IAZhB,CAYsBA,IAZtB,CAY4B,CAAA,CAZ5B,CAaI,CAbJ,CAaO,CAbP,CAcItC,MAdJ,CAeI,IAfJ,CAgBI,CAAA,CAhBJ,CAhBA,CARA,CALJ,CApCR,CAxBkJ;",
"sources":["node_modules/Phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayerWebGLRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$dynamiclayer$DynamicTilemapLayerWebGLRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.Tilemaps.DynamicTilemapLayer#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.Tilemaps.DynamicTilemapLayer} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n */\r\nvar DynamicTilemapLayerWebGLRenderer = function (renderer, src, interpolationPercentage, camera)\r\n{\r\n    src.cull(camera);\r\n\r\n    var renderTiles = src.culledTiles;\r\n    var tileCount = renderTiles.length;\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    if (tileCount === 0 || alpha <= 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var gidMap = src.gidMap;\r\n    var pipeline = src.pipeline;\r\n\r\n    var getTint = Utils.getTintAppendFloatAlpha;\r\n\r\n    var scrollFactorX = src.scrollFactorX;\r\n    var scrollFactorY = src.scrollFactorY;\r\n\r\n    var x = src.x;\r\n    var y = src.y;\r\n\r\n    var sx = src.scaleX;\r\n    var sy = src.scaleY;\r\n\r\n    var tilesets = src.tileset;\r\n\r\n    //  Loop through each tileset in this layer, drawing just the tiles that are in that set each time\r\n    //  Doing it this way around allows us to batch tiles using the same tileset\r\n    for (var c = 0; c < tilesets.length; c++)\r\n    {\r\n        var currentSet = tilesets[c];\r\n        var texture = currentSet.glTexture;\r\n\r\n        for (var i = 0; i < tileCount; i++)\r\n        {\r\n            var tile = renderTiles[i];\r\n\r\n            var tileset = gidMap[tile.index];\r\n\r\n            if (tileset !== currentSet)\r\n            {\r\n                //  Skip tiles that aren't in this set\r\n                continue;\r\n            }\r\n       \r\n            var tileTexCoords = tileset.getTileTextureCoordinates(tile.index);\r\n\r\n            if (tileTexCoords === null)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var frameWidth = tile.width;\r\n            var frameHeight = tile.height;\r\n\r\n            var frameX = tileTexCoords.x;\r\n            var frameY = tileTexCoords.y;\r\n\r\n            var tw = tile.width * 0.5;\r\n            var th = tile.height * 0.5;\r\n\r\n            var tint = getTint(tile.tint, alpha * tile.alpha);\r\n\r\n            pipeline.batchTexture(\r\n                src,\r\n                texture,\r\n                texture.width, texture.height,\r\n                (tw + x + tile.pixelX) * sx, (th + y + tile.pixelY) * sy,\r\n                tile.width, tile.height,\r\n                sx, sy,\r\n                tile.rotation,\r\n                tile.flipX, tile.flipY,\r\n                scrollFactorX, scrollFactorY,\r\n                tw, th,\r\n                frameX, frameY, frameWidth, frameHeight,\r\n                tint, tint, tint, tint, false,\r\n                0, 0,\r\n                camera,\r\n                null,\r\n                true\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = DynamicTilemapLayerWebGLRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Utils","DynamicTilemapLayerWebGLRenderer","renderer","src","interpolationPercentage","camera","cull","renderTiles","culledTiles","tileCount","length","alpha","gidMap","pipeline","getTint","getTintAppendFloatAlpha","scrollFactorX","scrollFactorY","x","y","sx","scaleX","sy","scaleY","tilesets","tileset","c","currentSet","texture","glTexture","i","tile","index","tileTexCoords","getTileTextureCoordinates","frameWidth","width","frameHeight","height","frameX","frameY","tw","th","tint","batchTexture","pixelX","pixelY","rotation","flipX","flipY"]
}
