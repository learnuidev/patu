{
"version":3,
"file":"module$node_modules$Phaser$src$cache$CacheManager.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9G,IAAIC,UAAYH,OAAA,CAAQ,gDAAR,CAkBZI,OAAAA,CAAe,KAjBPJ,OAAAK,CAAQ,4CAARA,CAiBO,EAAU,CAEzBC,WAEAF,QAAsB,CAACG,IAAD,CACtB,CASI,IAAAA,KAAA,CAAYA,IASZ,KAAAC,OAAA,CAAc,IAAIL,SAUlB,KAAAM,WAAA,CAAkB,IAAIN,SAStB,KAAAO,KAAA,CAAY,IAAIP,SAShB,KAAAQ,QAAA,CAAe,IAAIR,SASnB,KAAAS,OAAA,CAAc,IAAIT,SASlB,KAAAU,MAAA,CAAa,IAAIV,SASjB,KAAAW,KAAA,CAAY,IAAIX,SAShB,KAAAY,KAAA,CAAY,IAAIZ,SAShB,KAAAa,IAAA;AAAW,IAAIb,SAUf,KAAAc,QAAA,CAAe,IAAId,SASnB,KAAAe,IAAA,CAAW,IAAIf,SAUf,KAAAgB,OAAA,CAAc,EAEd,KAAAZ,KAAAa,OAAAC,KAAA,CAAsB,SAAtB,CAAiC,IAAAC,QAAjC,CAA+C,IAA/C,CA1HJ,CALyB,CA8IzBC,UAAWA,QAAS,CAACC,GAAD,CACpB,CACS,IAAAL,OAAAM,eAAA,CAA2BD,GAA3B,CAAL,GAEI,IAAAL,OAAA,CAAYK,GAAZ,CAFJ,CAEuB,IAAIrB,SAF3B,CAKA,OAAO,KAAAgB,OAAA,CAAYK,GAAZ,CANX,CA/IyB,CA8JzBF,QAASA,QAAS,EAClB,CAeI,IAdA,IAAII,KAAO,uEAAA,MAAA,CAAA,GAAA,CAAX,CAcSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBD,IAAAE,OAApB,CAAiCD,CAAA,EAAjC,CAEI,IAAA,CAAKD,IAAA,CAAKC,CAAL,CAAL,CAAAL,QAAA,EACA,CAAA,IAAA,CAAKI,IAAA,CAAKC,CAAL,CAAL,CAAA,CAAgB,IAGpB,KAAKH,IAAIA,GAAT,GAAgB,KAAAL,OAAhB,CAEI,IAAAA,OAAA,CAAYK,GAAZ,CAAAF,QAAA,EAKJ,KAAAf,KAAA,CAFA,IAAAY,OAEA;AAFc,IA1BlB,CA/JyB,CAAV,CAgMnBlB,OAAAC,QAAA,CAAiBE,MAzN6F;",
"sources":["node_modules/Phaser/src/cache/CacheManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$cache$CacheManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar BaseCache = require('./BaseCache');\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * The Cache Manager is the global cache owned and maintained by the Game instance.\r\n *\r\n * Various systems, such as the file Loader, rely on this cache in order to store the files\r\n * it has loaded. The manager itself doesn't store any files, but instead owns multiple BaseCache\r\n * instances, one per type of file. You can also add your own custom caches.\r\n *\r\n * @class CacheManager\r\n * @memberOf Phaser.Cache\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance that owns this CacheManager.\r\n */\r\nvar CacheManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function CacheManager (game)\r\n    {\r\n        /**\r\n         * A reference to the Phaser.Game instance that owns this CacheManager.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#game\r\n         * @type {Phaser.Game}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * A Cache storing all binary files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#binary\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.binary = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all bitmap font data files, typically added via the Loader.\r\n         * Only the font data is stored in this cache, the textures are part of the Texture Manager.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#bitmapFont\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.bitmapFont = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all JSON data files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#json\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.json = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all physics data files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#physics\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.physics = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all shader source files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#shader\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.shader = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all non-streaming audio files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#audio\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.audio = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all text files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#text\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.text = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all html files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#html\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.12.0\r\n         */\r\n        this.html = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all WaveFront OBJ files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#obj\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.obj = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all tilemap data files, typically added via the Loader.\r\n         * Only the data is stored in this cache, the textures are part of the Texture Manager.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#tilemap\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all xml data files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#xml\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.xml = new BaseCache();\r\n\r\n        /**\r\n         * An object that contains your own custom BaseCache entries.\r\n         * Add to this via the `addCustom` method.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#custom\r\n         * @type {Object.<Phaser.Cache.BaseCache>}\r\n         * @since 3.0.0\r\n         */\r\n        this.custom = {};\r\n\r\n        this.game.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * Add your own custom Cache for storing your own files.\r\n     * The cache will be available under `Cache.custom.key`.\r\n     * The cache will only be created if the key is not already in use.\r\n     *\r\n     * @method Phaser.Cache.CacheManager#addCustom\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key of your custom cache.\r\n     *\r\n     * @return {Phaser.Cache.BaseCache} A reference to the BaseCache that was created. If the key was already in use, a reference to the existing cache is returned instead.\r\n     */\r\n    addCustom: function (key)\r\n    {\r\n        if (!this.custom.hasOwnProperty(key))\r\n        {\r\n            this.custom[key] = new BaseCache();\r\n        }\r\n\r\n        return this.custom[key];\r\n    },\r\n\r\n    /**\r\n     * Removes all entries from all BaseCaches and destroys all custom caches.\r\n     *\r\n     * @method Phaser.Cache.CacheManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        var keys = [\r\n            'binary',\r\n            'bitmapFont',\r\n            'json',\r\n            'physics',\r\n            'shader',\r\n            'audio',\r\n            'text',\r\n            'html',\r\n            'obj',\r\n            'tilemap',\r\n            'xml'\r\n        ];\r\n\r\n        for (var i = 0; i < keys.length; i++)\r\n        {\r\n            this[keys[i]].destroy();\r\n            this[keys[i]] = null;\r\n        }\r\n\r\n        for (var key in this.custom)\r\n        {\r\n            this.custom[key].destroy();\r\n        }\r\n\r\n        this.custom = null;\r\n\r\n        this.game = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = CacheManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BaseCache","CacheManager","Class","initialize","game","binary","bitmapFont","json","physics","shader","audio","text","html","obj","tilemap","xml","custom","events","once","destroy","addCustom","key","hasOwnProperty","keys","i","length"]
}
