{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$body$Composite.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/body/Composite.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$body$Composite\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\r\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\r\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\r\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Composite\r\n*/\r\n\r\nvar Composite = {};\r\n\r\nmodule.exports = Composite;\r\n\r\nvar Events = require('../core/Events');\r\nvar Common = require('../core/Common');\r\nvar Bounds = require('../geometry/Bounds');\r\nvar Body = require('./Body');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * See the properites section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @param {} [options]\r\n     * @return {composite} A new composite\r\n     */\r\n    Composite.create = function(options) {\r\n        return Common.extend({ \r\n            id: Common.nextId(),\r\n            type: 'composite',\r\n            parent: null,\r\n            isModified: false,\r\n            bodies: [], \r\n            constraints: [], \r\n            composites: [],\r\n            label: 'Composite',\r\n            plugin: {}\r\n        }, options);\r\n    };\r\n\r\n    /**\r\n     * Sets the composite's `isModified` flag. \r\n     * If `updateParents` is true, all parents will be set (default: false).\r\n     * If `updateChildren` is true, all children will be set (default: false).\r\n     * @method setModified\r\n     * @param {composite} composite\r\n     * @param {boolean} isModified\r\n     * @param {boolean} [updateParents=false]\r\n     * @param {boolean} [updateChildren=false]\r\n     */\r\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\r\n        composite.isModified = isModified;\r\n\r\n        if (updateParents && composite.parent) {\r\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\r\n        }\r\n\r\n        if (updateChildren) {\r\n            for(var i = 0; i < composite.composites.length; i++) {\r\n                var childComposite = composite.composites[i];\r\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\r\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\r\n     * @method add\r\n     * @param {composite} composite\r\n     * @param {} object\r\n     * @return {composite} The original composite with the objects added\r\n     */\r\n    Composite.add = function(composite, object) {\r\n        var objects = [].concat(object);\r\n\r\n        Events.trigger(composite, 'beforeAdd', { object: object });\r\n\r\n        for (var i = 0; i < objects.length; i++) {\r\n            var obj = objects[i];\r\n\r\n            switch (obj.type) {\r\n\r\n            case 'body':\r\n                // skip adding compound parts\r\n                if (obj.parent !== obj) {\r\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\r\n                    break;\r\n                }\r\n\r\n                Composite.addBody(composite, obj);\r\n                break;\r\n            case 'constraint':\r\n                Composite.addConstraint(composite, obj);\r\n                break;\r\n            case 'composite':\r\n                Composite.addComposite(composite, obj);\r\n                break;\r\n            case 'mouseConstraint':\r\n                Composite.addConstraint(composite, obj.constraint);\r\n                break;\r\n\r\n            }\r\n        }\r\n\r\n        Events.trigger(composite, 'afterAdd', { object: object });\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\r\n     * Optionally searching its children recursively.\r\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\r\n     * @method remove\r\n     * @param {composite} composite\r\n     * @param {} object\r\n     * @param {boolean} [deep=false]\r\n     * @return {composite} The original composite with the objects removed\r\n     */\r\n    Composite.remove = function(composite, object, deep) {\r\n        var objects = [].concat(object);\r\n\r\n        Events.trigger(composite, 'beforeRemove', { object: object });\r\n\r\n        for (var i = 0; i < objects.length; i++) {\r\n            var obj = objects[i];\r\n\r\n            switch (obj.type) {\r\n\r\n            case 'body':\r\n                Composite.removeBody(composite, obj, deep);\r\n                break;\r\n            case 'constraint':\r\n                Composite.removeConstraint(composite, obj, deep);\r\n                break;\r\n            case 'composite':\r\n                Composite.removeComposite(composite, obj, deep);\r\n                break;\r\n            case 'mouseConstraint':\r\n                Composite.removeConstraint(composite, obj.constraint);\r\n                break;\r\n\r\n            }\r\n        }\r\n\r\n        Events.trigger(composite, 'afterRemove', { object: object });\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Adds a composite to the given composite.\r\n     * @private\r\n     * @method addComposite\r\n     * @param {composite} compositeA\r\n     * @param {composite} compositeB\r\n     * @return {composite} The original compositeA with the objects from compositeB added\r\n     */\r\n    Composite.addComposite = function(compositeA, compositeB) {\r\n        compositeA.composites.push(compositeB);\r\n        compositeB.parent = compositeA;\r\n        Composite.setModified(compositeA, true, true, false);\r\n        return compositeA;\r\n    };\r\n\r\n    /**\r\n     * Removes a composite from the given composite, and optionally searching its children recursively.\r\n     * @private\r\n     * @method removeComposite\r\n     * @param {composite} compositeA\r\n     * @param {composite} compositeB\r\n     * @param {boolean} [deep=false]\r\n     * @return {composite} The original compositeA with the composite removed\r\n     */\r\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\r\n        var position = compositeA.composites.indexOf(compositeB);\r\n        if (position !== -1) {\r\n            Composite.removeCompositeAt(compositeA, position);\r\n            Composite.setModified(compositeA, true, true, false);\r\n        }\r\n\r\n        if (deep) {\r\n            for (var i = 0; i < compositeA.composites.length; i++){\r\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\r\n            }\r\n        }\r\n\r\n        return compositeA;\r\n    };\r\n\r\n    /**\r\n     * Removes a composite from the given composite.\r\n     * @private\r\n     * @method removeCompositeAt\r\n     * @param {composite} composite\r\n     * @param {number} position\r\n     * @return {composite} The original composite with the composite removed\r\n     */\r\n    Composite.removeCompositeAt = function(composite, position) {\r\n        composite.composites.splice(position, 1);\r\n        Composite.setModified(composite, true, true, false);\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Adds a body to the given composite.\r\n     * @private\r\n     * @method addBody\r\n     * @param {composite} composite\r\n     * @param {body} body\r\n     * @return {composite} The original composite with the body added\r\n     */\r\n    Composite.addBody = function(composite, body) {\r\n        composite.bodies.push(body);\r\n        Composite.setModified(composite, true, true, false);\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Removes a body from the given composite, and optionally searching its children recursively.\r\n     * @private\r\n     * @method removeBody\r\n     * @param {composite} composite\r\n     * @param {body} body\r\n     * @param {boolean} [deep=false]\r\n     * @return {composite} The original composite with the body removed\r\n     */\r\n    Composite.removeBody = function(composite, body, deep) {\r\n        var position = composite.bodies.indexOf(body);\r\n        if (position !== -1) {\r\n            Composite.removeBodyAt(composite, position);\r\n            Composite.setModified(composite, true, true, false);\r\n        }\r\n\r\n        if (deep) {\r\n            for (var i = 0; i < composite.composites.length; i++){\r\n                Composite.removeBody(composite.composites[i], body, true);\r\n            }\r\n        }\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Removes a body from the given composite.\r\n     * @private\r\n     * @method removeBodyAt\r\n     * @param {composite} composite\r\n     * @param {number} position\r\n     * @return {composite} The original composite with the body removed\r\n     */\r\n    Composite.removeBodyAt = function(composite, position) {\r\n        composite.bodies.splice(position, 1);\r\n        Composite.setModified(composite, true, true, false);\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Adds a constraint to the given composite.\r\n     * @private\r\n     * @method addConstraint\r\n     * @param {composite} composite\r\n     * @param {constraint} constraint\r\n     * @return {composite} The original composite with the constraint added\r\n     */\r\n    Composite.addConstraint = function(composite, constraint) {\r\n        composite.constraints.push(constraint);\r\n        Composite.setModified(composite, true, true, false);\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\r\n     * @private\r\n     * @method removeConstraint\r\n     * @param {composite} composite\r\n     * @param {constraint} constraint\r\n     * @param {boolean} [deep=false]\r\n     * @return {composite} The original composite with the constraint removed\r\n     */\r\n    Composite.removeConstraint = function(composite, constraint, deep) {\r\n        var position = composite.constraints.indexOf(constraint);\r\n        if (position !== -1) {\r\n            Composite.removeConstraintAt(composite, position);\r\n        }\r\n\r\n        if (deep) {\r\n            for (var i = 0; i < composite.composites.length; i++){\r\n                Composite.removeConstraint(composite.composites[i], constraint, true);\r\n            }\r\n        }\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Removes a body from the given composite.\r\n     * @private\r\n     * @method removeConstraintAt\r\n     * @param {composite} composite\r\n     * @param {number} position\r\n     * @return {composite} The original composite with the constraint removed\r\n     */\r\n    Composite.removeConstraintAt = function(composite, position) {\r\n        composite.constraints.splice(position, 1);\r\n        Composite.setModified(composite, true, true, false);\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Removes all bodies, constraints and composites from the given composite.\r\n     * Optionally clearing its children recursively.\r\n     * @method clear\r\n     * @param {composite} composite\r\n     * @param {boolean} keepStatic\r\n     * @param {boolean} [deep=false]\r\n     */\r\n    Composite.clear = function(composite, keepStatic, deep) {\r\n        if (deep) {\r\n            for (var i = 0; i < composite.composites.length; i++){\r\n                Composite.clear(composite.composites[i], keepStatic, true);\r\n            }\r\n        }\r\n        \r\n        if (keepStatic) {\r\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\r\n        } else {\r\n            composite.bodies.length = 0;\r\n        }\r\n\r\n        composite.constraints.length = 0;\r\n        composite.composites.length = 0;\r\n        Composite.setModified(composite, true, true, false);\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\r\n     * @method allBodies\r\n     * @param {composite} composite\r\n     * @return {body[]} All the bodies\r\n     */\r\n    Composite.allBodies = function(composite) {\r\n        var bodies = [].concat(composite.bodies);\r\n\r\n        for (var i = 0; i < composite.composites.length; i++)\r\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\r\n\r\n        return bodies;\r\n    };\r\n\r\n    /**\r\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\r\n     * @method allConstraints\r\n     * @param {composite} composite\r\n     * @return {constraint[]} All the constraints\r\n     */\r\n    Composite.allConstraints = function(composite) {\r\n        var constraints = [].concat(composite.constraints);\r\n\r\n        for (var i = 0; i < composite.composites.length; i++)\r\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\r\n\r\n        return constraints;\r\n    };\r\n\r\n    /**\r\n     * Returns all composites in the given composite, including all composites in its children, recursively.\r\n     * @method allComposites\r\n     * @param {composite} composite\r\n     * @return {composite[]} All the composites\r\n     */\r\n    Composite.allComposites = function(composite) {\r\n        var composites = [].concat(composite.composites);\r\n\r\n        for (var i = 0; i < composite.composites.length; i++)\r\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\r\n\r\n        return composites;\r\n    };\r\n\r\n    /**\r\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\r\n     * @method get\r\n     * @param {composite} composite\r\n     * @param {number} id\r\n     * @param {string} type\r\n     * @return {object} The requested object, if found\r\n     */\r\n    Composite.get = function(composite, id, type) {\r\n        var objects,\r\n            object;\r\n\r\n        switch (type) {\r\n        case 'body':\r\n            objects = Composite.allBodies(composite);\r\n            break;\r\n        case 'constraint':\r\n            objects = Composite.allConstraints(composite);\r\n            break;\r\n        case 'composite':\r\n            objects = Composite.allComposites(composite).concat(composite);\r\n            break;\r\n        }\r\n\r\n        if (!objects)\r\n            return null;\r\n\r\n        object = objects.filter(function(object) { \r\n            return object.id.toString() === id.toString(); \r\n        });\r\n\r\n        return object.length === 0 ? null : object[0];\r\n    };\r\n\r\n    /**\r\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\r\n     * @method move\r\n     * @param {compositeA} compositeA\r\n     * @param {object[]} objects\r\n     * @param {compositeB} compositeB\r\n     * @return {composite} Returns compositeA\r\n     */\r\n    Composite.move = function(compositeA, objects, compositeB) {\r\n        Composite.remove(compositeA, objects);\r\n        Composite.add(compositeB, objects);\r\n        return compositeA;\r\n    };\r\n\r\n    /**\r\n     * Assigns new ids for all objects in the composite, recursively.\r\n     * @method rebase\r\n     * @param {composite} composite\r\n     * @return {composite} Returns composite\r\n     */\r\n    Composite.rebase = function(composite) {\r\n        var objects = Composite.allBodies(composite)\r\n                        .concat(Composite.allConstraints(composite))\r\n                        .concat(Composite.allComposites(composite));\r\n\r\n        for (var i = 0; i < objects.length; i++) {\r\n            objects[i].id = Common.nextId();\r\n        }\r\n\r\n        Composite.setModified(composite, true, true, false);\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Translates all children in the composite by a given vector relative to their current positions, \r\n     * without imparting any velocity.\r\n     * @method translate\r\n     * @param {composite} composite\r\n     * @param {vector} translation\r\n     * @param {bool} [recursive=true]\r\n     */\r\n    Composite.translate = function(composite, translation, recursive) {\r\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            Body.translate(bodies[i], translation);\r\n        }\r\n\r\n        Composite.setModified(composite, true, true, false);\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\r\n     * @method rotate\r\n     * @param {composite} composite\r\n     * @param {number} rotation\r\n     * @param {vector} point\r\n     * @param {bool} [recursive=true]\r\n     */\r\n    Composite.rotate = function(composite, rotation, point, recursive) {\r\n        var cos = Math.cos(rotation),\r\n            sin = Math.sin(rotation),\r\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                dx = body.position.x - point.x,\r\n                dy = body.position.y - point.y;\r\n                \r\n            Body.setPosition(body, {\r\n                x: point.x + (dx * cos - dy * sin),\r\n                y: point.y + (dx * sin + dy * cos)\r\n            });\r\n\r\n            Body.rotate(body, rotation);\r\n        }\r\n\r\n        Composite.setModified(composite, true, true, false);\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\r\n     * @method scale\r\n     * @param {composite} composite\r\n     * @param {number} scaleX\r\n     * @param {number} scaleY\r\n     * @param {vector} point\r\n     * @param {bool} [recursive=true]\r\n     */\r\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\r\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                dx = body.position.x - point.x,\r\n                dy = body.position.y - point.y;\r\n                \r\n            Body.setPosition(body, {\r\n                x: point.x + dx * scaleX,\r\n                y: point.y + dy * scaleY\r\n            });\r\n\r\n            Body.scale(body, scaleX, scaleY);\r\n        }\r\n\r\n        Composite.setModified(composite, true, true, false);\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Returns the union of the bounds of all of the composite's bodies.\r\n     * @method bounds\r\n     * @param {composite} composite The composite.\r\n     * @returns {bounds} The composite bounds.\r\n     */\r\n    Composite.bounds = function(composite) {\r\n        var bodies = Composite.allBodies(composite),\r\n            vertices = [];\r\n\r\n        for (var i = 0; i < bodies.length; i += 1) {\r\n            var body = bodies[i];\r\n            vertices.push(body.bounds.min, body.bounds.max);\r\n        }\r\n\r\n        return Bounds.create(vertices);\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Events Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n    * Fired when a call to `Composite.add` is made, before objects have been added.\r\n    *\r\n    * @event beforeAdd\r\n    * @param {} event An event object\r\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired when a call to `Composite.add` is made, after objects have been added.\r\n    *\r\n    * @event afterAdd\r\n    * @param {} event An event object\r\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\r\n    *\r\n    * @event beforeRemove\r\n    * @param {} event An event object\r\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\r\n    *\r\n    * @event afterRemove\r\n    * @param {} event An event object\r\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\r\n     *\r\n     * @property id\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * A `String` denoting the type of object.\r\n     *\r\n     * @property type\r\n     * @type string\r\n     * @default \"composite\"\r\n     * @readOnly\r\n     */\r\n\r\n    /**\r\n     * An arbitrary `String` name to help the user identify and manage composites.\r\n     *\r\n     * @property label\r\n     * @type string\r\n     * @default \"Composite\"\r\n     */\r\n\r\n    /**\r\n     * A flag that specifies whether the composite has been modified during the current step.\r\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\r\n     * If you need to change it manually, you should use the `Composite.setModified` method.\r\n     *\r\n     * @property isModified\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\r\n     *\r\n     * @property parent\r\n     * @type composite\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * An array of `Body` that are _direct_ children of this composite.\r\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\r\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\r\n     *\r\n     * @property bodies\r\n     * @type body[]\r\n     * @default []\r\n     */\r\n\r\n    /**\r\n     * An array of `Constraint` that are _direct_ children of this composite.\r\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\r\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\r\n     *\r\n     * @property constraints\r\n     * @type constraint[]\r\n     * @default []\r\n     */\r\n\r\n    /**\r\n     * An array of `Composite` that are _direct_ children of this composite.\r\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\r\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\r\n     *\r\n     * @property composites\r\n     * @type composite[]\r\n     * @default []\r\n     */\r\n\r\n    /**\r\n     * An object reserved for storing plugin-specific properties.\r\n     *\r\n     * @property plugin\r\n     * @type {}\r\n     */\r\n\r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Composite","Events","Common","Bounds","Body","create","Composite.create","options","extend","id","nextId","type","parent","isModified","bodies","constraints","composites","label","plugin","setModified","Composite.setModified","composite","updateParents","updateChildren","i","length","childComposite","add","Composite.add","object","objects","concat","trigger","obj","warn","addBody","addConstraint","addComposite","constraint","remove","Composite.remove","deep","removeBody","removeConstraint","removeComposite","Composite.addComposite","compositeA","compositeB","push","Composite.removeComposite","position","indexOf","removeCompositeAt","Composite.removeCompositeAt","splice","Composite.addBody","body","Composite.removeBody","removeBodyAt","Composite.removeBodyAt","Composite.addConstraint","Composite.removeConstraint","removeConstraintAt","Composite.removeConstraintAt","clear","Composite.clear","keepStatic","filter","isStatic","allBodies","Composite.allBodies","allConstraints","Composite.allConstraints","allComposites","Composite.allComposites","get","Composite.get","toString","move","Composite.move","rebase","Composite.rebase","translate","Composite.translate","translation","recursive","rotate","Composite.rotate","rotation","point","cos","Math","sin","dx","x","dy","y","setPosition","scale","Composite.scale","scaleX","scaleY","bounds","Composite.bounds","vertices","min","max"]
}
