shadow$provide.module$node_modules$Phaser$src$loader$filetypes$BinaryFile=function(global,require,module,exports){global=require("module$node_modules$Phaser$src$utils$Class");var CONST=require("module$node_modules$Phaser$src$loader$const"),File=require("module$node_modules$Phaser$src$loader$File");exports=require("module$node_modules$Phaser$src$loader$FileTypesManager");var GetFastValue=require("module$node_modules$Phaser$src$utils$object$GetFastValue"),IsPlainObject=require("module$node_modules$Phaser$src$utils$object$IsPlainObject"),
BinaryFile=new global({Extends:File,initialize:function(loader,key,url,xhrSettings,dataType){var extension="bin";if(IsPlainObject(key)){var config=key;key=GetFastValue(config,"key");url=GetFastValue(config,"url");xhrSettings=GetFastValue(config,"xhrSettings");extension=GetFastValue(config,"extension",extension);dataType=GetFastValue(config,"dataType",dataType)}File.call(this,loader,{type:"binary",cache:loader.cacheManager.binary,extension:extension,responseType:"arraybuffer",key:key,url:url,xhrSettings:xhrSettings,
config:{dataType:dataType}})},onProcess:function(){this.state=CONST.FILE_PROCESSING;var ctor=this.config.dataType;this.data=ctor?new ctor(this.xhrLoader.response):this.xhrLoader.response;this.onProcessComplete()}});exports.register("binary",function(key,url,dataType,xhrSettings){if(Array.isArray(key))for(url=0;url<key.length;url++)this.addFile(new BinaryFile(this,key[url]));else this.addFile(new BinaryFile(this,key,url,xhrSettings,dataType));return this});module.exports=BinaryFile}
//# sourceMappingURL=module$node_modules$Phaser$src$loader$filetypes$BinaryFile.js.map
