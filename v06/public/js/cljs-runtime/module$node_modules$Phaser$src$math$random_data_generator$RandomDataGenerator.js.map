{
"version":3,
"file":"module$node_modules$Phaser$src$math$random_data_generator$RandomDataGenerator.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/Phaser/src/math/random-data-generator/RandomDataGenerator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$random_data_generator$RandomDataGenerator\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A seeded Random Data Generator.\r\n * \r\n * Access via `Phaser.Math.RND` which is an instance of this class pre-defined\r\n * by Phaser. Or, create your own instance to use as you require.\r\n * \r\n * The `Math.RND` generator is seeded by the Game Config property value `seed`.\r\n * If no such config property exists, a random number is used.\r\n * \r\n * If you create your own instance of this class you should provide a seed for it.\r\n * If no seed is given it will use a 'random' one based on Date.now.\r\n *\r\n * @class RandomDataGenerator\r\n * @memberOf Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(string|string[])} [seeds] - The seeds to use for the random number generator.\r\n */\r\nvar RandomDataGenerator = new Class({\r\n\r\n    initialize:\r\n\r\n    function RandomDataGenerator (seeds)\r\n    {\r\n        if (seeds === undefined) { seeds = [ (Date.now() * Math.random()).toString() ]; }\r\n\r\n        /**\r\n         * Internal var.\r\n         *\r\n         * @name Phaser.Math.RandomDataGenerator#c\r\n         * @type {number}\r\n         * @default 1\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.c = 1;\r\n\r\n        /**\r\n         * Internal var.\r\n         *\r\n         * @name Phaser.Math.RandomDataGenerator#s0\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.s0 = 0;\r\n\r\n        /**\r\n         * Internal var.\r\n         *\r\n         * @name Phaser.Math.RandomDataGenerator#s1\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.s1 = 0;\r\n\r\n        /**\r\n         * Internal var.\r\n         *\r\n         * @name Phaser.Math.RandomDataGenerator#s2\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.s2 = 0;\r\n\r\n        /**\r\n         * Internal var.\r\n         *\r\n         * @name Phaser.Math.RandomDataGenerator#n\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.2.0\r\n         */\r\n        this.n = 0;\r\n\r\n        /**\r\n         * Signs to choose from.\r\n         *\r\n         * @name Phaser.Math.RandomDataGenerator#signs\r\n         * @type {number[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.signs = [ -1, 1 ];\r\n\r\n        if (seeds)\r\n        {\r\n            this.init(seeds);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Private random helper.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#rnd\r\n     * @since 3.0.0\r\n     * @private\r\n     *\r\n     * @return {number} A random number.\r\n     */\r\n    rnd: function ()\r\n    {\r\n        var t = 2091639 * this.s0 + this.c * 2.3283064365386963e-10; // 2^-32\r\n\r\n        this.c = t | 0;\r\n        this.s0 = this.s1;\r\n        this.s1 = this.s2;\r\n        this.s2 = t - this.c;\r\n\r\n        return this.s2;\r\n    },\r\n\r\n    /**\r\n     * Internal method that creates a seed hash.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#hash\r\n     * @since 3.0.0\r\n     * @private\r\n     *\r\n     * @param {string} data - The value to hash.\r\n     *\r\n     * @return {number} The hashed value.\r\n     */\r\n    hash: function (data)\r\n    {\r\n        var h;\r\n        var n = this.n;\r\n\r\n        data = data.toString();\r\n\r\n        for (var i = 0; i < data.length; i++)\r\n        {\r\n            n += data.charCodeAt(i);\r\n            h = 0.02519603282416938 * n;\r\n            n = h >>> 0;\r\n            h -= n;\r\n            h *= n;\r\n            n = h >>> 0;\r\n            h -= n;\r\n            n += h * 0x100000000;// 2^32\r\n        }\r\n\r\n        this.n = n;\r\n\r\n        return (n >>> 0) * 2.3283064365386963e-10;// 2^-32\r\n    },\r\n\r\n    /**\r\n     * Initialize the state of the random data generator.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#init\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|string[])} seeds - The seeds to initialize the random data generator with.\r\n     */\r\n    init: function (seeds)\r\n    {\r\n        if (typeof seeds === 'string')\r\n        {\r\n            this.state(seeds);\r\n        }\r\n        else\r\n        {\r\n            this.sow(seeds);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Reset the seed of the random data generator.\r\n     *\r\n     * _Note_: the seed array is only processed up to the first `undefined` (or `null`) value, should such be present.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#sow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string[]} seeds - The array of seeds: the `toString()` of each value is used.\r\n     */\r\n    sow: function (seeds)\r\n    {\r\n        // Always reset to default seed\r\n        this.n = 0xefc8249d;\r\n        this.s0 = this.hash(' ');\r\n        this.s1 = this.hash(' ');\r\n        this.s2 = this.hash(' ');\r\n        this.c = 1;\r\n\r\n        if (!seeds)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Apply any seeds\r\n        for (var i = 0; i < seeds.length && (seeds[i] != null); i++)\r\n        {\r\n            var seed = seeds[i];\r\n\r\n            this.s0 -= this.hash(seed);\r\n            this.s0 += ~~(this.s0 < 0);\r\n            this.s1 -= this.hash(seed);\r\n            this.s1 += ~~(this.s1 < 0);\r\n            this.s2 -= this.hash(seed);\r\n            this.s2 += ~~(this.s2 < 0);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns a random integer between 0 and 2^32.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#integer\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} A random integer between 0 and 2^32.\r\n     */\r\n    integer: function ()\r\n    {\r\n        // 2^32\r\n        return this.rnd() * 0x100000000;\r\n    },\r\n\r\n    /**\r\n     * Returns a random real number between 0 and 1.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#frac\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} A random real number between 0 and 1.\r\n     */\r\n    frac: function ()\r\n    {\r\n        // 2^-53\r\n        return this.rnd() + (this.rnd() * 0x200000 | 0) * 1.1102230246251565e-16;\r\n    },\r\n\r\n    /**\r\n     * Returns a random real number between 0 and 2^32.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#real\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} A random real number between 0 and 2^32.\r\n     */\r\n    real: function ()\r\n    {\r\n        return this.integer() + this.frac();\r\n    },\r\n\r\n    /**\r\n     * Returns a random integer between and including min and max.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#integerInRange\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} min - The minimum value in the range.\r\n     * @param {number} max - The maximum value in the range.\r\n     *\r\n     * @return {number} A random number between min and max.\r\n     */\r\n    integerInRange: function (min, max)\r\n    {\r\n        return Math.floor(this.realInRange(0, max - min + 1) + min);\r\n    },\r\n\r\n    /**\r\n     * Returns a random integer between and including min and max.\r\n     * This method is an alias for RandomDataGenerator.integerInRange.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#between\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} min - The minimum value in the range.\r\n     * @param {number} max - The maximum value in the range.\r\n     *\r\n     * @return {number} A random number between min and max.\r\n     */\r\n    between: function (min, max)\r\n    {\r\n        return Math.floor(this.realInRange(0, max - min + 1) + min);\r\n    },\r\n\r\n    /**\r\n     * Returns a random real number between min and max.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#realInRange\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} min - The minimum value in the range.\r\n     * @param {number} max - The maximum value in the range.\r\n     *\r\n     * @return {number} A random number between min and max.\r\n     */\r\n    realInRange: function (min, max)\r\n    {\r\n        return this.frac() * (max - min) + min;\r\n    },\r\n\r\n    /**\r\n     * Returns a random real number between -1 and 1.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#normal\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} A random real number between -1 and 1.\r\n     */\r\n    normal: function ()\r\n    {\r\n        return 1 - (2 * this.frac());\r\n    },\r\n\r\n    /**\r\n     * Returns a valid RFC4122 version4 ID hex string from https://gist.github.com/1308368\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#uuid\r\n     * @since 3.0.0\r\n     *\r\n     * @return {string} A valid RFC4122 version4 ID hex string\r\n     */\r\n    uuid: function ()\r\n    {\r\n        var a = '';\r\n        var b = '';\r\n\r\n        for (b = a = ''; a++ < 36; b += ~a % 5 | a * 3 & 4 ? (a ^ 15 ? 8 ^ this.frac() * (a ^ 20 ? 16 : 4) : 4).toString(16) : '-')\r\n        {\r\n            // eslint-disable-next-line no-empty\r\n        }\r\n\r\n        return b;\r\n    },\r\n\r\n    /**\r\n     * Returns a random element from within the given array.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#pick\r\n     * @since 3.0.0\r\n     *\r\n     * @param {array} array - The array to pick a random element from.\r\n     *\r\n     * @return {*} A random member of the array.\r\n     */\r\n    pick: function (array)\r\n    {\r\n        return array[this.integerInRange(0, array.length - 1)];\r\n    },\r\n\r\n    /**\r\n     * Returns a sign to be used with multiplication operator.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#sign\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} -1 or +1.\r\n     */\r\n    sign: function ()\r\n    {\r\n        return this.pick(this.signs);\r\n    },\r\n\r\n    /**\r\n     * Returns a random element from within the given array, favoring the earlier entries.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#weightedPick\r\n     * @since 3.0.0\r\n     *\r\n     * @param {array} array - The array to pick a random element from.\r\n     *\r\n     * @return {*} A random member of the array.\r\n     */\r\n    weightedPick: function (array)\r\n    {\r\n        return array[~~(Math.pow(this.frac(), 2) * (array.length - 1) + 0.5)];\r\n    },\r\n\r\n    /**\r\n     * Returns a random timestamp between min and max, or between the beginning of 2000 and the end of 2020 if min and max aren't specified.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#timestamp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} min - The minimum value in the range.\r\n     * @param {number} max - The maximum value in the range.\r\n     *\r\n     * @return {number} A random timestamp between min and max.\r\n     */\r\n    timestamp: function (min, max)\r\n    {\r\n        return this.realInRange(min || 946684800000, max || 1577862000000);\r\n    },\r\n\r\n    /**\r\n     * Returns a random angle between -180 and 180.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#angle\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} A random number between -180 and 180.\r\n     */\r\n    angle: function ()\r\n    {\r\n        return this.integerInRange(-180, 180);\r\n    },\r\n\r\n    /**\r\n     * Returns a random rotation in radians, between -3.141 and 3.141\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#rotation\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} A random number between -3.141 and 3.141\r\n     */\r\n    rotation: function ()\r\n    {\r\n        return this.realInRange(-3.1415926, 3.1415926);\r\n    },\r\n\r\n    /**\r\n     * Gets or Sets the state of the generator. This allows you to retain the values\r\n     * that the generator is using between games, i.e. in a game save file.\r\n     *\r\n     * To seed this generator with a previously saved state you can pass it as the\r\n     * `seed` value in your game config, or call this method directly after Phaser has booted.\r\n     *\r\n     * Call this method with no parameters to return the current state.\r\n     *\r\n     * If providing a state it should match the same format that this method\r\n     * returns, which is a string with a header `!rnd` followed by the `c`,\r\n     * `s0`, `s1` and `s2` values respectively, each comma-delimited.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#state\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [state] - Generator state to be set.\r\n     *\r\n     * @return {string} The current state of the generator.\r\n     */\r\n    state: function (state)\r\n    {\r\n        if (typeof state === 'string' && state.match(/^!rnd/))\r\n        {\r\n            state = state.split(',');\r\n\r\n            this.c = parseFloat(state[1]);\r\n            this.s0 = parseFloat(state[2]);\r\n            this.s1 = parseFloat(state[3]);\r\n            this.s2 = parseFloat(state[4]);\r\n        }\r\n\r\n        return [ '!rnd', this.c, this.s0, this.s1, this.s2 ].join(',');\r\n    },\r\n\r\n    /**\r\n     * Shuffles the given array, using the current seed.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#shuffle\r\n     * @since 3.7.0\r\n     *\r\n     * @param {array} [array] - The array to be shuffled.\r\n     *\r\n     * @return {array} The shuffled array.\r\n     */\r\n    shuffle: function (array)\r\n    {\r\n        var len = array.length - 1;\r\n\r\n        for (var i = len; i > 0; i--)\r\n        {\r\n            var randomIndex = Math.floor(this.frac() * (len + 1));\r\n            var itemAtIndex = array[randomIndex];\r\n\r\n            array[randomIndex] = array[i];\r\n            array[i] = itemAtIndex;\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = RandomDataGenerator;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","RandomDataGenerator","Class","initialize","seeds","undefined","toString","Date","now","Math","random","c","n","s2","s1","s0","signs","init","rnd","t","hash","data","i","length","charCodeAt","h","state","sow","seed","integer","frac","real","integerInRange","min","max","floor","realInRange","between","normal","uuid","a","b","pick","array","sign","weightedPick","pow","timestamp","angle","rotation","match","split","parseFloat","join","shuffle","len","randomIndex","itemAtIndex"]
}
