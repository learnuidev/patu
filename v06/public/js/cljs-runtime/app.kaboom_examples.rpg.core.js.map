{"version":3,"sources":["app/kaboom_examples/rpg/core.cljs"],"mappings":"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","names":["app.kaboom.patu.core.init","js/document.getElementById","app.kaboom.patu.loaders.load_root","app.kaboom.patu.loaders.load_sprite","app.kaboom.patu.core/reg-level","app.kaboom-examples.rpg.assets/level-handler","app.kaboom-examples.rpg.core/main-init","app.kaboom-examples.rpg.assets/main-map","app.kaboom-examples.rpg.core/talking","cljs.core.atom","app.kaboom-examples.rpg.core/talk","msg","cljs.core/reset!","app.kaboom.patu.core/add-component!","app.kaboom-examples.rpg.core/speed","app.kaboom.patu.events/reg-event","p__44734","vec__44735","cljs.core.nth","_","player","app.kaboom.patu.core/vec2","p__44738","vec__44739","p__44742","vec__44743","p__44746","vec__44747","p__44750","vec__44751","ch","p__44754","vec__44755","cljs.core/deref","app.kaboom.patu.core/destroy","app.kaboom-examples.rpg.core/button","text","p","f","btn","bg","app.kaboom.patu.core.rgb","app.kaboom.patu.core/mouse-down?","app.kaboom-examples.rpg.core/main-event","p1__44758#","app.kaboom.patu.core/get-component","app.kaboom.patu.events/dispatch","app.kaboom.patu.core/reg-scene","app.kaboom-examples.rpg.core/app","app.kaboom.patu.core/start"],"sourcesContent":["(ns app.kaboom-examples.rpg.core\n  (:require\n   [clojure.repl :refer [doc]]\n   ;; Main Libs ===\n   [app.kaboom.patu.core :as p]\n   [app.kaboom.patu.loaders :as l]\n   [app.kaboom.patu.cam :as cam]\n   [app.kaboom.patu.audio :as a]\n   [app.kaboom.patu.components :as c]\n   ;; Event System\n   [app.kaboom.patu.events :refer [dispatch reg-event]]\n   ;; Event handler namespace\n   ; #_[app.kaboom-examples.rpg.events]\n   ;; Assets\n   [app.kaboom-examples.rpg.assets :refer [main-map level-handler]]))\n\n(comment\n  (js/console.clear)\n  (doc p/start)\n  (doc p/init))\n\n(p/init {:canvas (js/document.getElementById \"app\")\n         :global true\n         :scale 4\n         :fullscreen true\n         :debug true\n         :clearColor [0 0 0 1]})\n\n;;\n(l/load-root \"https://kaboomjs.com/pub/examples/\")\n(l/load-sprite :sprite/steel, \"img/steel.png\");\n(l/load-sprite :sprite/ch1, \"img/ch1.png\");\n(l/load-sprite :sprite/ch2, \"img/ch2.png\");\n(l/load-sprite :sprite/grass, \"img/grass.png\");\n(l/load-sprite :sprite/door, \"img/door.png\");\n(l/load-sprite :sprite/key, \"img/key.png\");\n(l/load-sprite :sprite/guy, \"img/guy.png\");\n\n\n(comment\n  (p/get-tag :player))\n(comment\n  (a/play :sound/coin))\n\n;;\n(p/reg-level :level/main level-handler)\n\n;; Handler\n(defn main-init []\n  [[:comp/reg-n\n    [:player [[:sprite :sprite/guy]\n              [:pos 30 90]\n              [:prop :player]\n              [:prop {:speed 55}]]]]\n   [:game/add-level main-map :level/main]])\n\n;;\n(def talking (atom nil))\n\n(defn talk [msg]\n  (reset! talking (p/add-component! [[:text msg 8]\n                                     [:pos 0 200]])))\n\n(def speed 80)\n(reg-event\n :player/move-left\n (fn [_ [_ player]]\n   (.move player (.scale (p/vec2 [-1 0]) (.-speed player)))))\n(reg-event\n :player/move-right\n (fn [_ [_ player]]\n   (.move player (.scale (p/vec2 [1 0]) (.-speed player)))))\n(reg-event\n :player/move-up\n (fn [_ [_ player]]\n   (.move player (.scale (p/vec2 [0 -1]) (.-speed player)))))\n(reg-event\n :player/move-down\n (fn [_ [_ player]]\n   (.move player (.scale (p/vec2 [0 1]) (.-speed player)))))\n\n(reg-event\n :character/talk\n (fn [_ [_ ch]]\n   (talk ch)))\n\n(reg-event\n :modal/check\n (fn [_ [_ _]]\n   (when @talking\n     (p/destroy @talking)\n     (reset! talking nil))))\n\n;;\n; (defn talk [msg]\n;   (reset! talking (p/add-component! [[:text msg 8]\n;                                      [:pos 0 200]])))\n\n\n(defn button [text p f]\n  (let [btn (p/add-component! [[:pos p]\n                               [:rect 60 20]\n                               [:origin :center]\n                               [:color 1 1 1]])\n        bg (p/add-component! [[:pos p]\n                              [:rect 58 18]\n                              [:origin :center]\n                              [:color 0 0.4 1]])]\n    (p/add-component! [[:text text 6]\n                       [:pos p]\n                       [:origin :center]\n                       [:color 1 1 1]])\n    (.action btn (fn []\n                   (if (.isHovered btn)\n                     (do (set! bg -color (p/rgb 0 0.6 1))\n                         (if (p/mouse-down?)\n                           (set! bg -color (p/rgb 0 0.8 1))\n                           (set! bg -color (p/rgb 0 0.6 1))))\n                     (set! bg -color (p/rgb 0 0.4 1)))))))\n\n(comment\n  (doc p/get-component))\n(defn main-event []\n  (button \"Start\" [50 150] nil)\n  (button \"Options\" [125 150] nil)\n  (let [player  (p/get-component :player)]\n    [[:evt/overlaps [:player :character] #(dispatch [:character/talk (.-msg %)])]\n     ; [:evt/collides [:player :character] #(dispatch [:character/talk (.-msg %)])]\n     [:evt/key-press    :up    #(dispatch [:modal/check])]\n     [:evt/key-press    :down  #(dispatch [:modal/check])]\n     [:evt/key-press    :left  #(dispatch [:modal/check])]\n     [:evt/key-press    :right #(dispatch [:modal/check])]\n     [:evt/key-down     :left            #(dispatch [:player/move-left player])]\n     [:evt/key-down     :right           #(dispatch [:player/move-right player])]\n     [:evt/key-down     :up              #(dispatch [:player/move-up player])]\n     [:evt/key-down     :down            #(dispatch [:player/move-down player])]\n     [:evt/action       :player           (fn []\n                                            (.resolve player))]]))\n\n(p/reg-scene :scene/main {:init main-init\n                          :evt main-event})\n\n(defn app []\n  (p/start :scene/main))\n"]}