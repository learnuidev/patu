{
"version":3,
"file":"module$node_modules$Phaser$src$time$TimerEvent.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/time/TimerEvent.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$time$TimerEvent\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\n\r\n/**\r\n * @typedef {object} TimerEventConfig\r\n *\r\n * @property {number} [delay=0] - [description]\r\n * @property {number} [repeat=0] - [description]\r\n * @property {boolean} [loop=false] - [description]\r\n * @property {function} [callback] - [description]\r\n * @property {*} [callbackScope] - [description]\r\n * @property {Array.<*>} [args] - [description]\r\n * @property {number} [timeScale=1] - [description]\r\n * @property {number} [startAt=1] - [description]\r\n * @property {boolean} [paused=false] - [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class TimerEvent\r\n * @memberOf Phaser.Time\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {TimerEventConfig} config - [description]\r\n */\r\nvar TimerEvent = new Class({\r\n\r\n    initialize:\r\n\r\n    function TimerEvent (config)\r\n    {\r\n        /**\r\n         * The delay in ms at which this TimerEvent fires.\r\n         *\r\n         * @name Phaser.Time.TimerEvent#delay\r\n         * @type {number}\r\n         * @default 0\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.delay = 0;\r\n\r\n        /**\r\n         * The total number of times this TimerEvent will repeat before finishing.\r\n         *\r\n         * @name Phaser.Time.TimerEvent#repeat\r\n         * @type {number}\r\n         * @default 0\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.repeat = 0;\r\n\r\n        /**\r\n         * If repeating this contains the current repeat count.\r\n         *\r\n         * @name Phaser.Time.TimerEvent#repeatCount\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.repeatCount = 0;\r\n\r\n        /**\r\n         * True if this TimerEvent loops, otherwise false.\r\n         *\r\n         * @name Phaser.Time.TimerEvent#loop\r\n         * @type {boolean}\r\n         * @default false\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.loop = false;\r\n\r\n        /**\r\n         * The callback that will be called when the TimerEvent occurs.\r\n         *\r\n         * @name Phaser.Time.TimerEvent#callback\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.callback;\r\n\r\n        /**\r\n         * The scope in which the callback will be called.\r\n         *\r\n         * @name Phaser.Time.TimerEvent#callbackScope\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.callbackScope;\r\n\r\n        /**\r\n         * Additional arguments to be passed to the callback.\r\n         *\r\n         * @name Phaser.Time.TimerEvent#args\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.args;\r\n\r\n        /**\r\n         * Scale the time causing this TimerEvent to update.\r\n         *\r\n         * @name Phaser.Time.TimerEvent#timeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.timeScale = 1;\r\n\r\n        /**\r\n         * Start this many MS into the elapsed (useful if you want a long duration with repeat, but for the first loop to fire quickly)\r\n         *\r\n         * @name Phaser.Time.TimerEvent#startAt\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.startAt = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Time.TimerEvent#elapsed\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.elapsed = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Time.TimerEvent#paused\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.paused = false;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Time.TimerEvent#hasDispatched\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.hasDispatched = false;\r\n\r\n        this.reset(config);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Time.TimerEvent#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {TimerEventConfig} config - [description]\r\n     *\r\n     * @return {Phaser.Time.TimerEvent} This TimerEvent object.\r\n     */\r\n    reset: function (config)\r\n    {\r\n        this.delay = GetFastValue(config, 'delay', 0);\r\n\r\n        //  Can also be set to -1 for an infinite loop (same as setting loop: true)\r\n        this.repeat = GetFastValue(config, 'repeat', 0);\r\n\r\n        this.loop = GetFastValue(config, 'loop', false);\r\n\r\n        this.callback = GetFastValue(config, 'callback', undefined);\r\n\r\n        this.callbackScope = GetFastValue(config, 'callbackScope', this.callback);\r\n\r\n        this.args = GetFastValue(config, 'args', []);\r\n\r\n        this.timeScale = GetFastValue(config, 'timeScale', 1);\r\n\r\n        this.startAt = GetFastValue(config, 'startAt', 0);\r\n\r\n        this.paused = GetFastValue(config, 'paused', false);\r\n\r\n        this.elapsed = this.startAt;\r\n        this.hasDispatched = false;\r\n        this.repeatCount = (this.repeat === -1 || this.loop) ? 999999999999 : this.repeat;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the progress of the current iteration, not factoring in repeats.\r\n     *\r\n     * @method Phaser.Time.TimerEvent#getProgress\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getProgress: function ()\r\n    {\r\n        return (this.elapsed / this.delay);\r\n    },\r\n\r\n    /**\r\n     * Gets the progress of the timer overall, factoring in repeats.\r\n     *\r\n     * @method Phaser.Time.TimerEvent#getOverallProgress\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getOverallProgress: function ()\r\n    {\r\n        if (this.repeat > 0)\r\n        {\r\n            var totalDuration = this.delay + (this.delay * this.repeat);\r\n            var totalElapsed = this.elapsed + (this.delay * (this.repeat - this.repeatCount));\r\n\r\n            return (totalElapsed / totalDuration);\r\n        }\r\n        else\r\n        {\r\n            return this.getProgress();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Time.TimerEvent#getRepeatCount\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getRepeatCount: function ()\r\n    {\r\n        return this.repeatCount;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Time.TimerEvent#getElapsed\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getElapsed: function ()\r\n    {\r\n        return this.elapsed;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Time.TimerEvent#getElapsedSeconds\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getElapsedSeconds: function ()\r\n    {\r\n        return this.elapsed * 0.001;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Time.TimerEvent#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} dispatchCallback - [description]\r\n     */\r\n    remove: function (dispatchCallback)\r\n    {\r\n        if (dispatchCallback === undefined) { dispatchCallback = false; }\r\n\r\n        this.elapsed = this.delay;\r\n\r\n        this.hasDispatched = !dispatchCallback;\r\n\r\n        this.repeatCount = 0;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Time.TimerEvent#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.callback = undefined;\r\n        this.callbackScope = undefined;\r\n        this.args = [];\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TimerEvent;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","GetFastValue","TimerEvent","initialize","config","repeatCount","repeat","delay","loop","timeScale","elapsed","startAt","hasDispatched","paused","reset","callback","undefined","callbackScope","args","getProgress","getOverallProgress","getRepeatCount","getElapsed","getElapsedSeconds","remove","dispatchCallback","destroy"]
}
