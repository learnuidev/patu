shadow$provide.module$node_modules$Phaser$src$textures$TextureManager=function(global,require,module,exports){var CanvasPool=require("module$node_modules$Phaser$src$display$canvas$CanvasPool"),CanvasTexture=require("module$node_modules$Phaser$src$textures$CanvasTexture");global=require("module$node_modules$Phaser$src$utils$Class");var Color=require("module$node_modules$Phaser$src$display$color$Color"),CONST=require("module$node_modules$Phaser$src$const"),EventEmitter=require("module$node_modules$eventemitter3$index"),
GenerateTexture=require("module$node_modules$Phaser$src$create$GenerateTexture"),GetValue=require("module$node_modules$Phaser$src$utils$object$GetValue"),Parser=require("module$node_modules$Phaser$src$textures$parsers$index"),Texture=require("module$node_modules$Phaser$src$textures$Texture");require=new global({Extends:EventEmitter,initialize:function(game){EventEmitter.call(this);this.game=game;this.name="TextureManager";this.list={};this._tempCanvas=CanvasPool.create2D(this,1,1);this._tempContext=
this._tempCanvas.getContext("2d");this._pending=0;game.events.once("boot",this.boot,this)},boot:function(){this._pending=2;this.on("onload",this.updatePending,this);this.on("onerror",this.updatePending,this);this.addBase64("__DEFAULT",this.game.config.defaultImage);this.addBase64("__MISSING",this.game.config.missingImage);this.game.events.once("destroy",this.destroy,this)},updatePending:function(){this._pending--;0===this._pending&&(this.off("onload"),this.off("onerror"),this.game.events.emit("texturesready"))},
checkKey:function(key){return this.exists(key)?(console.error("Texture key already in use: "+key),!1):!0},remove:function(key){if("string"===typeof key)if(this.exists(key))key=this.get(key);else return console.warn("No texture found matching key: "+key),this;this.list.hasOwnProperty(key.key)&&(delete this.list[key.key],key.destroy(),this.emit("removetexture",key.key));return this},addBase64:function(key,data){if(this.checkKey(key)){var _this=this,image=new Image;image.onerror=function(){_this.emit("onerror",
key)};image.onload=function(){var texture=_this.create(key,image);Parser.Image(texture,0);_this.emit("addtexture",key,texture);_this.emit("onload",key,texture)};image.src=data}return this},getBase64:function(key,frame,type,encoderOptions){void 0===type&&(type="image/png");void 0===encoderOptions&&(encoderOptions=.92);var data="";if(key=this.getFrame(key,frame))data=key.canvasData,frame=CanvasPool.create2D(this,data.width,data.height),frame.getContext("2d").drawImage(key.source.image,data.x,data.y,
data.width,data.height,0,0,data.width,data.height),data=frame.toDataURL(type,encoderOptions),CanvasPool.remove(frame);return data},addImage:function(key,source,dataSource){var texture=null;this.checkKey(key)&&(texture=this.create(key,source),Parser.Image(texture,0),dataSource&&texture.setDataSource(dataSource),this.emit("addtexture",key,texture));return texture},addRenderTexture:function(key,renderTexture){var texture=null;this.checkKey(key)&&(texture=this.create(key,renderTexture),texture.add("__BASE",
0,0,0,renderTexture.width,renderTexture.height),this.emit("addtexture",key,texture));return texture},generate:function(key,config){if(this.checkKey(key)){var canvas=CanvasPool.create(this,1,1);config.canvas=canvas;GenerateTexture(config);return this.addCanvas(key,canvas)}return null},createCanvas:function(key,width,height){void 0===width&&(width=256);void 0===height&&(height=256);return this.checkKey(key)?(width=CanvasPool.create(this,width,height,CONST.CANVAS,!0),this.addCanvas(key,width)):null},
addCanvas:function(key,source,skipCache){void 0===skipCache&&(skipCache=!1);var texture=null;skipCache?texture=new CanvasTexture(this,key,source,source.width,source.height):this.checkKey(key)&&(texture=new CanvasTexture(this,key,source,source.width,source.height),this.list[key]=texture,this.emit("addtexture",key,texture));return texture},addAtlas:function(key,source,data,dataSource){return Array.isArray(data.textures)||Array.isArray(data.frames)?this.addAtlasJSONArray(key,source,data,dataSource):
this.addAtlasJSONHash(key,source,data,dataSource)},addAtlasJSONArray:function(key,source,data,dataSource){var texture=null;if(this.checkKey(key)){texture=this.create(key,source);if(Array.isArray(data)){source=1===data.length;for(var i=0;i<texture.source.length;i++)Parser.JSONArray(texture,i,source?data[0]:data[i])}else Parser.JSONArray(texture,0,data);dataSource&&texture.setDataSource(dataSource);this.emit("addtexture",key,texture)}return texture},addAtlasJSONHash:function(key,source,data,dataSource){var texture=
null;if(this.checkKey(key)){texture=this.create(key,source);if(Array.isArray(data))for(source=0;source<data.length;source++)Parser.JSONHash(texture,source,data[source]);else Parser.JSONHash(texture,0,data);dataSource&&texture.setDataSource(dataSource);this.emit("addtexture",key,texture)}return texture},addAtlasXML:function(key,source,data,dataSource){var texture=null;this.checkKey(key)&&(texture=this.create(key,source),Parser.AtlasXML(texture,0,data),dataSource&&texture.setDataSource(dataSource),
this.emit("addtexture",key,texture));return texture},addUnityAtlas:function(key,source,data,dataSource){var texture=null;this.checkKey(key)&&(texture=this.create(key,source),Parser.UnityYAML(texture,0,data),dataSource&&texture.setDataSource(dataSource),this.emit("addtexture",key,texture));return texture},addSpriteSheet:function(key,source,config){var texture=null;this.checkKey(key)&&(texture=this.create(key,source),Parser.SpriteSheet(texture,0,0,0,texture.source[0].width,texture.source[0].height,
config),this.emit("addtexture",key,texture));return texture},addSpriteSheetFromAtlas:function(key,config){if(!this.checkKey(key))return null;var atlasKey=GetValue(config,"atlas",null),atlasFrame=GetValue(config,"frame",null);if(atlasKey&&atlasFrame&&(atlasKey=this.get(atlasKey).get(atlasFrame)))return atlasFrame=this.create(key,atlasKey.source.image),atlasKey.trimmed?Parser.SpriteSheetFromAtlas(atlasFrame,atlasKey,config):Parser.SpriteSheet(atlasFrame,0,atlasKey.cutX,atlasKey.cutY,atlasKey.cutWidth,
atlasKey.cutHeight,config),this.emit("addtexture",key,atlasFrame),atlasFrame},create:function(key,source,width,height){var texture=null;this.checkKey(key)&&(texture=new Texture(this,key,source,width,height),this.list[key]=texture);return texture},exists:function(key){return this.list.hasOwnProperty(key)},get:function(key){void 0===key&&(key="__DEFAULT");return this.list[key]?this.list[key]:this.list.__MISSING},cloneFrame:function(key,frame){if(this.list[key])return this.list[key].get(frame).clone()},
getFrame:function(key,frame){if(this.list[key])return this.list[key].get(frame)},getTextureKeys:function(){var output=[],key;for(key in this.list)"__DEFAULT"!==key&&"__MISSING"!==key&&output.push(key);return output},getPixel:function(x,y,key,frame){if(key=this.getFrame(key,frame))if(x-=key.x,y-=key.y,frame=key.data.cut,x+=frame.x,y+=frame.y,x>=frame.x&&x<frame.r&&y>=frame.y&&y<frame.b)return frame=this._tempContext,frame.clearRect(0,0,1,1),frame.drawImage(key.source.image,x,y,1,1,0,0,1,1),x=frame.getImageData(0,
0,1,1),new Color(x.data[0],x.data[1],x.data[2],x.data[3]);return null},getPixelAlpha:function(x,y,key,frame){if(key=this.getFrame(key,frame))if(x-=key.x,y-=key.y,frame=key.data.cut,x+=frame.x,y+=frame.y,x>=frame.x&&x<frame.r&&y>=frame.y&&y<frame.b)return frame=this._tempContext,frame.clearRect(0,0,1,1),frame.drawImage(key.source.image,x,y,1,1,0,0,1,1),frame.getImageData(0,0,1,1).data[3];return null},setTexture:function(gameObject,key,frame){this.list[key]&&(gameObject.texture=this.list[key],gameObject.frame=
gameObject.texture.get(frame));return gameObject},renameTexture:function(currentKey,newKey){var texture=this.get(currentKey);return texture&&currentKey!==newKey?(texture.key=newKey,this.list[newKey]=texture,delete this.list[currentKey],!0):!1},each:function(callback,scope){for(var args=[null],i=1;i<arguments.length;i++)args.push(arguments[i]);for(var texture in this.list)args[0]=this.list[texture],callback.apply(scope,args)},destroy:function(){for(var texture in this.list)this.list[texture].destroy();
this.list={};this.game=null;CanvasPool.remove(this._tempCanvas)}});module.exports=require}
//# sourceMappingURL=module$node_modules$Phaser$src$textures$TextureManager.js.map
