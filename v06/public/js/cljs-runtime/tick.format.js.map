{"version":3,"sources":["tick/format.cljc"],"mappings":";;;AAQA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA,AACoB,AAAGC,AACH,AAAGA,AACH,AAAGA,AACH,AAAGA,AACH,AAAGA,AACH,AAAGA;AAc5B,AAAA;;;;;;;;;AAAA,AAAAC,AAAyBE;AAAzB,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAyBD,AAQrBE;AARJ,AASG,AAACC,AACCD,AAES,AAAA,AACE,AAAAG,AACE,AAAA,AAACC,AAAgBC;AADnB,AAAA,AAAA,AAAAF,AAAA;AAAA;;AAEE,AAAAA,AAAA,AAACC;;AAHL,AAAA,AAAAF,AAISH;AAJT,AAAAG,AAIkBI;AAJlB,AAAA;;AAAA,AAAA,AAAAJ;;;;;;AAZd,AAAA,AAAA,AAAyBJ,AAiBrBE,AAAIO;AAjBR,AAkBG,AAAyBP,AACnB,AAAA,AAAA,AAAM,AAAWL,AAAkBK,AAAKA,AAClC,AAASA,AAAK,AAAI,AAAA,AAAMO,AACR,AAEW,AAAAR,AAAW,AACtB,AAAA,AAAIJ,AACSK,AACCO,AACxB,AAACC,AAAId,AAAsBM;;AAT7C,AAUEA;;;AA5BL,AAAA,AAAA,AAAyBF;;AAAzB,AA8BA,AAAA;;;;;AAAA,AAAAF,AAAMc;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAX,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMW,AAIFC;AAJJ,AAIO,AAAKA;;;AAJZ,AAAA,AAAA,AAAMD,AAKFV,AAAIW;AALR,AAMG,AAAS,AAACV,AAAUD,AAAKW;;;AAN5B,AAAA,AAAA,AAAMD;;AAAN","names":["tick.format/predefined-formatters","java.time.format/DateTimeFormatter","var_args","G__27543","tick.format/formatter","js/Error","fmt","tick.format.formatter","e27544","G__27545","goog.object/get","js/JSJodaLocale","e","locale","cljs.core.get","G__27547","tick.format/format","o"],"sourcesContent":["(ns tick.format\r\n  \"originally copied from https://github.com/dm3/clojure.java-time\"\r\n  (:refer-clojure :exclude (format))\r\n  #?(:cljs (:require [java.time.format :refer [DateTimeFormatter]]))\r\n  #?(:clj\r\n     (:import [java.time.format DateTimeFormatter]\r\n              [java.util Locale])))\r\n\r\n(def predefined-formatters\r\n  {:iso-zoned-date-time  (. DateTimeFormatter -ISO_ZONED_DATE_TIME)\r\n   :iso-offset-date-time (. DateTimeFormatter -ISO_OFFSET_DATE_TIME)\r\n   :iso-local-time       (. DateTimeFormatter -ISO_LOCAL_TIME)\r\n   :iso-local-date-time  (. DateTimeFormatter -ISO_LOCAL_DATE_TIME)\r\n   :iso-local-date       (. DateTimeFormatter -ISO_LOCAL_DATE)\r\n   :iso-instant          (. DateTimeFormatter -ISO_INSTANT)\r\n\r\n   ; these exist in java but not in js-joda \r\n   ;:iso-offset-date      (. DateTimeFormatter -ISO_OFFSET_DATE)\r\n   ;:rfc-1123-date-time   (. DateTimeFormatter -RFC_1123_DATE_TIME)\r\n   ;:iso-week-date        (. DateTimeFormatter -ISO_WEEK_DATE)\r\n   ;:iso-ordinal-date     (. DateTimeFormatter -ISO_ORDINAL_DATE)\r\n   ;:iso-time             (. DateTimeFormatter -ISO_TIME)\r\n   ;:iso-date             (. DateTimeFormatter -ISO_DATE)\r\n   ;:basic-iso-date       (. DateTimeFormatter -BASIC_ISO_DATE)\r\n   ;:iso-date-time        (. DateTimeFormatter -ISO_DATE_TIME)\r\n   ;:iso-offset-time      (. DateTimeFormatter -ISO_OFFSET_TIME)\r\n   })\r\n\r\n(defn ^DateTimeFormatter formatter\r\n  \"Constructs a DateTimeFormatter out of either a\r\n\r\n  * format string - \\\"YYYY/mm/DD\\\" \\\"YYY HH:MM\\\" etc.\r\n  or\r\n  * formatter name - :iso-instant :iso-local-date etc\r\n  \r\n  and a Locale, which is optional.\"\r\n  ([fmt]\r\n   (formatter\r\n     fmt\r\n     #?(:clj (Locale/getDefault)\r\n        :cljs (try\r\n                (some->\r\n                  (goog.object/get js/JSJodaLocale \"Locale\")\r\n                  (goog.object/get \"US\"))\r\n                (catch js/Error e)))))\r\n  ([fmt locale]\r\n   (let [^DateTimeFormatter fmt\r\n         (cond (instance? DateTimeFormatter fmt) fmt\r\n               (string? fmt) (if (nil? locale)\r\n                               (throw\r\n                                 #?(:clj (Exception. \"Locale is nil\")\r\n                                    :cljs (js/Error. (str \"Locale is nil, try adding a require '[tick.locale-en-us]\"))))\r\n                               (.. DateTimeFormatter\r\n                                 (ofPattern fmt)\r\n                                 (withLocale locale)))\r\n               :else (get predefined-formatters fmt))]\r\n     fmt)))\r\n\r\n(defn format\r\n  \"Formats the given time entity as a string.\r\n  Accepts something that can be converted to a `DateTimeFormatter` as a first\r\n  argument. Given one argument uses the default format.\"\r\n  ([o] (str o))\r\n  ([fmt o]\r\n   (.format (formatter fmt) o)))"]}