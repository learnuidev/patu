{
"version":3,
"file":"module$node_modules$Phaser$src$physics$impact$UpdateMotion.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,2DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAyFvHD,MAAAC,QAAA,CApEmBC,QAAS,CAACC,IAAD,CAAOC,GAAP,CAC5B,CACID,IAAAE,SAAA,CAAgB,CAAA,CAGZD,IAAAE,UAAAC,EAAJ,GAE0B,CAAtB,CAAIJ,IAAAK,WAAJ,EAA2BC,IAAAC,IAAA,CAASP,IAAAQ,IAAAJ,EAAT,CAA3B,CAAkDJ,IAAAS,kBAAlD,CAEIT,IAAAQ,IAAAJ,EAFJ,EAEkB,CAACJ,IAAAK,WAFnB,EAMqB,CAKjB,CALIL,IAAAQ,IAAAJ,EAKJ,GAHIJ,IAAAE,SAGJ,CAHoB,CAAA,CAGpB,EAAAF,IAAAQ,IAAAJ,EAAA,CAAa,CAXjB,CAFJ,CAkBIH,IAAAE,UAAAO,EAAJ,GAIQV,IAAAQ,IAAAE,EAJR,CAE0B,CAAtB,CAAIV,IAAAK,WAAJ,EAA2BC,IAAAC,IAAA,CAASP,IAAAQ,IAAAE,EAAT,CAA3B,CAAkDV,IAAAS,kBAAlD,CAEIT,IAAAQ,IAAAE,EAFJ,CAEkB,CAACV,IAAAK,WAFnB,CAMiB,CARrB,CAaA,IAAIJ,GAAAE,UAAAQ,MAAJ,CACA,CACI,IAAIC,EAAIX,GAAAE,UAAAQ,MAER,IAAsB,CAAtB;AAAIX,IAAAK,WAAJ,CACA,CACI,IAAIQ,KAAOb,IAAAQ,IAAAE,EAAPG,CAAoBD,CAAAE,GAApBD,CAA2Bb,IAAAQ,IAAAJ,EAA3BS,CAAwCD,CAAAG,GAE5Cf,KAAAQ,IAAAE,EAAA,EAAcV,IAAAQ,IAAAE,EAAd,CAA2BE,CAAAE,GAA3B,CAAkCD,IAAlC,CAAyC,CAAzC,EAA8Cb,IAAAK,WAC9CL,KAAAQ,IAAAJ,EAAA,EAAcJ,IAAAQ,IAAAJ,EAAd,CAA2BQ,CAAAG,GAA3B,CAAkCF,IAAlC,CAAyC,CAAzC,EAA8Cb,IAAAK,WAJlD,CADA,IAUQW,KAOJ,EAPWhB,IAAAQ,IAAAE,EAOX,CAPwBE,CAAAF,EAOxB,CAP8BV,IAAAQ,IAAAJ,EAO9B,CAP2CQ,CAAAR,EAO3C,GARoBQ,CAAAF,EAQpB,CAR0BE,CAAAF,EAQ1B,CARgCE,CAAAR,EAQhC,CARsCQ,CAAAR,EAQtC,EALAJ,IAAAQ,IAAAE,EAKA,CALaE,CAAAF,EAKb,CALmBM,IAKnB,CAJAhB,IAAAQ,IAAAJ,EAIA,CAJaQ,CAAAR,EAIb,CAJmBY,IAInB,CAFIC,CAEJ,CAFYX,IAAAY,MAAA,CAAWN,CAAAF,EAAX,CAAgBE,CAAAR,EAAhB,CAEZ,CAAIa,CAAJ,CAAYjB,IAAAmB,cAAAC,IAAZ,EAAsCH,CAAtC,CAA8CjB,IAAAmB,cAAAE,IAA9C,GAEIrB,IAAAE,SAFJ,CAEoB,CAAA,CAFpB,CApBR,CA2BAF,IAAAsB,IAAAZ,EAAA,CAAaT,GAAAqB,IAAAZ,EACbV,KAAAsB,IAAAlB,EAAA,CAAaH,GAAAqB,IAAAlB,EAhEjB,CAtBuH;",
"sources":["node_modules/Phaser/src/physics/impact/UpdateMotion.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$impact$UpdateMotion\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\n/**\r\n * Set up the trace-result\r\n * var res = {\r\n *     collision: {x: false, y: false, slope: false},\r\n *     pos: {x: x, y: y},\r\n *     tile: {x: 0, y: 0}\r\n * };\r\n *\r\n * @function Phaser.Physics.Impact.UpdateMotion\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.Body} body - [description]\r\n * @param {object} res - [description]\r\n */\r\nvar UpdateMotion = function (body, res)\r\n{\r\n    body.standing = false;\r\n\r\n    //  Y\r\n    if (res.collision.y)\r\n    {\r\n        if (body.bounciness > 0 && Math.abs(body.vel.y) > body.minBounceVelocity)\r\n        {\r\n            body.vel.y *= -body.bounciness;\r\n        }\r\n        else\r\n        {\r\n            if (body.vel.y > 0)\r\n            {\r\n                body.standing = true;\r\n            }\r\n\r\n            body.vel.y = 0;\r\n        }\r\n    }\r\n\r\n    //  X\r\n    if (res.collision.x)\r\n    {\r\n        if (body.bounciness > 0 && Math.abs(body.vel.x) > body.minBounceVelocity)\r\n        {\r\n            body.vel.x *= -body.bounciness;\r\n        }\r\n        else\r\n        {\r\n            body.vel.x = 0;\r\n        }\r\n    }\r\n\r\n    //  SLOPE\r\n    if (res.collision.slope)\r\n    {\r\n        var s = res.collision.slope;\r\n       \r\n        if (body.bounciness > 0)\r\n        {\r\n            var proj = body.vel.x * s.nx + body.vel.y * s.ny;\r\n\r\n            body.vel.x = (body.vel.x - s.nx * proj * 2) * body.bounciness;\r\n            body.vel.y = (body.vel.y - s.ny * proj * 2) * body.bounciness;\r\n        }\r\n        else\r\n        {\r\n            var lengthSquared = s.x * s.x + s.y * s.y;\r\n            var dot = (body.vel.x * s.x + body.vel.y * s.y) / lengthSquared;\r\n            \r\n            body.vel.x = s.x * dot;\r\n            body.vel.y = s.y * dot;\r\n            \r\n            var angle = Math.atan2(s.x, s.y);\r\n\r\n            if (angle > body.slopeStanding.min && angle < body.slopeStanding.max)\r\n            {\r\n                body.standing = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    body.pos.x = res.pos.x;\r\n    body.pos.y = res.pos.y;\r\n};\r\n\r\nmodule.exports = UpdateMotion;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","UpdateMotion","body","res","standing","collision","y","bounciness","Math","abs","vel","minBounceVelocity","x","slope","s","proj","nx","ny","dot","angle","atan2","slopeStanding","min","max","pos"]
}
