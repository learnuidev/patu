shadow$provide.module$node_modules$Phaser$src$geom$intersects$RectangleToTriangle=function(global,require,module,exports){var LineToLine=require("module$node_modules$Phaser$src$geom$intersects$LineToLine"),Contains=require("module$node_modules$Phaser$src$geom$rectangle$Contains"),ContainsArray=require("module$node_modules$Phaser$src$geom$triangle$ContainsArray"),Decompose=require("module$node_modules$Phaser$src$geom$rectangle$Decompose");module.exports=function(rect,triangle){if(triangle.left>rect.right||
triangle.right<rect.left||triangle.top>rect.bottom||triangle.bottom<rect.top)return!1;var triA=triangle.getLineA(),triB=triangle.getLineB(),triC=triangle.getLineC();if(Contains(rect,triA.x1,triA.y1)||Contains(rect,triA.x2,triA.y2)||Contains(rect,triB.x1,triB.y1)||Contains(rect,triB.x2,triB.y2)||Contains(rect,triC.x1,triC.y1)||Contains(rect,triC.x2,triC.y2))return!0;var rectA=rect.getLineA(),rectB=rect.getLineB(),rectC=rect.getLineC(),rectD=rect.getLineD();if(LineToLine(triA,rectA)||LineToLine(triA,
rectB)||LineToLine(triA,rectC)||LineToLine(triA,rectD)||LineToLine(triB,rectA)||LineToLine(triB,rectB)||LineToLine(triB,rectC)||LineToLine(triB,rectD)||LineToLine(triC,rectA)||LineToLine(triC,rectB)||LineToLine(triC,rectC)||LineToLine(triC,rectD))return!0;rect=Decompose(rect);return 0<ContainsArray(triangle,rect,!0).length}}
//# sourceMappingURL=module$node_modules$Phaser$src$geom$intersects$RectangleToTriangle.js.map
