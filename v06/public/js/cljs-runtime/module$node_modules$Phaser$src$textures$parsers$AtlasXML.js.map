{
"version":3,
"file":"module$node_modules$Phaser$src$textures$parsers$AtlasXML.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA2ErHD,MAAAC,QAAA,CAtDeC,QAAS,CAACC,OAAD,CAAUC,WAAV,CAAuBC,GAAvB,CACxB,CAEI,GAAKA,GAAAC,qBAAA,CAAyB,cAAzB,CAAL,CAAA,CAOA,IAAIC,OAASJ,OAAAI,OAAA,CAAeH,WAAf,CAEbD,QAAAK,IAAA,CAAY,QAAZ,CAAsBJ,WAAtB,CAAmC,CAAnC,CAAsC,CAAtC,CAAyCG,MAAAE,MAAzC,CAAuDF,MAAAG,OAAvD,CAGIC,IAAAA,CAASN,GAAAC,qBAAA,CAAyB,YAAzB,CAIb,KAASM,MAAT,CAAa,CAAb,CAAgBA,MAAhB,CAAoBD,GAAAE,OAApB,CAAmCD,MAAA,EAAnC,CACA,CACI,IAAIE,MAAQH,GAAA,CAAOC,MAAP,CAAAG,WAERC,KAAAA,SAAOF,KAAAE,KAAAC,MACX,KAAIC,EAAIC,QAAA,CAASL,KAAAI,EAAAD,MAAT,CAAwB,EAAxB,CAAR,CACIG,EAAID,QAAA,CAASL,KAAAM,EAAAH,MAAT;AAAwB,EAAxB,CADR,CAEIR,MAAQU,QAAA,CAASL,KAAAL,MAAAQ,MAAT,CAA4B,EAA5B,CAFZ,CAGIP,OAASS,QAAA,CAASL,KAAAJ,OAAAO,MAAT,CAA6B,EAA7B,CAGbI,SAAA,CAAWlB,OAAAK,IAAA,CAAYQ,QAAZ,CAAkBZ,WAAlB,CAA+Bc,CAA/B,CAAkCE,CAAlC,CAAqCX,KAArC,CAA4CC,MAA5C,CAGX,IAAII,KAAAQ,OAAJ,CACA,CACQA,CAAAA,CAASC,IAAAC,IAAA,CAASL,QAAA,CAASL,KAAAQ,OAAAL,MAAT,CAA6B,EAA7B,CAAT,CACTQ,EAAAA,CAASF,IAAAC,IAAA,CAASL,QAAA,CAASL,KAAAW,OAAAR,MAAT,CAA6B,EAA7B,CAAT,CACb,KAAIS,WAAaP,QAAA,CAASL,KAAAY,WAAAT,MAAT,CAAiC,EAAjC,CACbU,MAAAA,CAAcR,QAAA,CAASL,KAAAa,YAAAV,MAAT,CAAkC,EAAlC,CAElBI,SAAAO,QAAA,CACInB,KADJ,CAEIC,MAFJ,CAGIY,CAHJ,CAIIG,CAJJ,CAKIC,UALJ,CAMIC,KANJ,CANJ,CAdJ,CA+BA,MAAOxB,QAhDP,CAEI0B,OAAAC,KAAA,CAAa,iCAAb,CAJR,CAtBqH;",
"sources":["node_modules/Phaser/src/textures/parsers/AtlasXML.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$textures$parsers$AtlasXML\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Parses an XML Texture Atlas object and adds all the Frames into a Texture.\r\n *\r\n * @function Phaser.Textures.Parsers.AtlasXML\r\n * @memberOf Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {integer} sourceIndex - The index of the TextureSource.\r\n * @param {*} xml - The XML data.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\r\nvar AtlasXML = function (texture, sourceIndex, xml)\r\n{\r\n    //  Malformed?\r\n    if (!xml.getElementsByTagName('TextureAtlas'))\r\n    {\r\n        console.warn('Invalid Texture Atlas XML given');\r\n        return;\r\n    }\r\n\r\n    //  Add in a __BASE entry (for the entire atlas)\r\n    var source = texture.source[sourceIndex];\r\n\r\n    texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height);\r\n\r\n    //  By this stage frames is a fully parsed array\r\n    var frames = xml.getElementsByTagName('SubTexture');\r\n\r\n    var newFrame;\r\n\r\n    for (var i = 0; i < frames.length; i++)\r\n    {\r\n        var frame = frames[i].attributes;\r\n\r\n        var name = frame.name.value;\r\n        var x = parseInt(frame.x.value, 10);\r\n        var y = parseInt(frame.y.value, 10);\r\n        var width = parseInt(frame.width.value, 10);\r\n        var height = parseInt(frame.height.value, 10);\r\n\r\n        //  The frame values are the exact coordinates to cut the frame out of the atlas from\r\n        newFrame = texture.add(name, sourceIndex, x, y, width, height);\r\n\r\n        //  These are the original (non-trimmed) sprite values\r\n        if (frame.frameX)\r\n        {\r\n            var frameX = Math.abs(parseInt(frame.frameX.value, 10));\r\n            var frameY = Math.abs(parseInt(frame.frameY.value, 10));\r\n            var frameWidth = parseInt(frame.frameWidth.value, 10);\r\n            var frameHeight = parseInt(frame.frameHeight.value, 10);\r\n\r\n            newFrame.setTrim(\r\n                width,\r\n                height,\r\n                frameX,\r\n                frameY,\r\n                frameWidth,\r\n                frameHeight\r\n            );\r\n        }\r\n    }\r\n\r\n    return texture;\r\n};\r\n\r\nmodule.exports = AtlasXML;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","AtlasXML","texture","sourceIndex","xml","getElementsByTagName","source","add","width","height","frames","i","length","frame","attributes","name","value","x","parseInt","y","newFrame","frameX","Math","abs","frameY","frameWidth","frameHeight","setTrim","console","warn"]
}
