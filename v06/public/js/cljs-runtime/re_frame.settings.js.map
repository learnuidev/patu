{"version":3,"sources":["re_frame/settings.cljc"],"mappings":";;;;AAKA,AAAA,AAAA,AAAA,AAAA,AAAKA,AAEmBC;AAExB,AAAKC,AACH,AAACC,AAAKH;AAER,AAAA,AAACI;AAAD,AACG,AAACC,AAAMH,AAAM,AAAKI;AAAL,AAAQ,AAAA,AAAA,AAACC,AAAMD;;;AAE/B,AAAA,AAAME;AAAN,AAEE,AAAA,AAAA,AAAAC,AAAWP;;AAEb,AAAA,AAAAQ,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AACmBO;AADnB,AAAAH,AAAAJ,AAAA,AACWM;AADX,AAEE,AAAA,AAACZ,AAAMH,AAAMiB,AACN,AAAKC;AAAL,AACE,AAAMC,AAAI,AAAA,AAACC,AAAQF;AAAnB,AACE,AAAMG;AAAN,AACE,AAAM,AAAA,AAAK,AAACC,AAAI,AAAChB,AAAU,AAAA,AAACiB,AAAOR,AAAII;AAAvC,AACE,AAAA,AAAA,AAACK,AAA4DT;;AAD/D;;AADF;;AAGA,AAACU,AAAKP,AAAoBF;;;AAEvC,AAAA,AAAMU;AAAN,AAEE,AAAA,AAAA,AAAAnB,AAAuBP;;AAEzB,AAAA,AAAA,AAAA2B,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAEG,AAAA,AAAC1B,AAAMH,AAAM+B,AAA2BhC;;;AAF3C,AAAA,AAAA,AAAM8B,AAGFd;AAHJ,AAIG,AAAA,AAACZ,AAAMH,AAAMiB,AACN,AAAKC;AAAL,AACE,AAACc,AAAKjC,AAAoB,AAAA,AAAAkC,AAACC;AAAD,AAAS,AAACC,AAAEpB,AAAG,AAAA,AAAAkB;AAASf;;;;AAN9D,AAAA,AAAA,AAAMW;;AAAN","names":["re-frame.settings/defaults","re-frame.interop/empty-queue","re-frame.settings/store","cljs.core.atom","re-frame.interop/on-load","cljs.core.swap_BANG_","m","cljs.core.assoc","re-frame.settings/loaded?","cljs.core/deref","p__28126","map__28127","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","re-frame.settings/reg-global-interceptor","id","interceptor","cljs.core/update","global-interceptors","ids","cljs.core.map","re-frame.interop/debug-enabled?","cljs.core/not","cljs.core/some","re_frame.loggers.console","cljs.core.conj","re-frame.settings/get-global-interceptors","var_args","G__28134","re-frame.settings/clear-global-interceptors","js/Error","cljs.core/assoc","cljs.core.into","p1__28132#","cljs.core.remove","cljs.core._EQ_"],"sourcesContent":["(ns re-frame.settings\n  (:require\n    [re-frame.interop :as interop]\n    [re-frame.loggers :refer [console]]))\n\n(def defaults\n  {:loaded?             false\n   :global-interceptors interop/empty-queue})\n\n(def store\n  (atom defaults))\n\n(interop/on-load\n  #(swap! store (fn [m] (assoc m :loaded? true))))\n\n(defn loaded?\n  []\n  (:loaded? @store))\n\n(defn reg-global-interceptor\n  [{:keys [id] :as interceptor}]\n  (swap! store update :global-interceptors\n         (fn [global-interceptors]\n           (let [ids (map :id global-interceptors)]\n             (when interop/debug-enabled?\n               (when (and (not (loaded?)) (some #{id} ids))\n                 (console :warn \"re-frame: duplicate global interceptor id: \" id)))\n             (conj global-interceptors interceptor)))))\n\n(defn get-global-interceptors\n  []\n  (:global-interceptors @store))\n\n(defn clear-global-interceptors\n  ([]\n   (swap! store assoc :global-interceptors interop/empty-queue))\n  ([id]\n   (swap! store update :global-interceptors\n          (fn [global-interceptors]\n            (into interop/empty-queue (remove #(= id (:id %)) global-interceptors))))))\n"]}