{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$text$static$Text.js",
"lineCount":19,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/text/static/Text.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$text$static$Text\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar AddToDOM = require('../../../dom/AddToDOM');\r\nvar CanvasPool = require('../../../display/canvas/CanvasPool');\r\nvar Class = require('../../../utils/Class');\r\nvar Components = require('../../components');\r\nvar CONST = require('../../../const');\r\nvar GameObject = require('../../GameObject');\r\nvar GetTextSize = require('../GetTextSize');\r\nvar GetValue = require('../../../utils/object/GetValue');\r\nvar RemoveFromDOM = require('../../../dom/RemoveFromDOM');\r\nvar TextRender = require('./TextRender');\r\nvar TextStyle = require('../TextStyle');\r\n\r\n/**\r\n * @classdesc\r\n * A Text Game Object.\r\n * \r\n * Text objects work by creating their own internal hidden Canvas and then renders text to it using\r\n * the standard Canvas `fillText` API. It then creates a texture from this canvas which is rendered\r\n * to your game during the render pass.\r\n * \r\n * Because it uses the Canvas API you can take advantage of all the features this offers, such as\r\n * applying gradient fills to the text, or strokes, shadows and more. You can also use custom fonts\r\n * loaded externally, such as Google or TypeKit Web fonts.\r\n *\r\n * You can only display fonts that are currently loaded and available to the browser: therefore fonts must\r\n * be pre-loaded. Phaser does not do ths for you, so you will require the use of a 3rd party font loader,\r\n * or have the fonts ready available in the CSS on the page in which your Phaser game resides.\r\n *\r\n * See {@link http://www.jordanm.co.uk/tinytype this compatibility table} for the available default fonts\r\n * across mobile browsers.\r\n * \r\n * A note on performance: Every time the contents of a Text object changes, i.e. changing the text being\r\n * displayed, or the style of the text, it needs to remake the Text canvas, and if on WebGL, re-upload the\r\n * new texture to the GPU. This can be an expensive operation if used often, or with large quantities of\r\n * Text objects in your game. If you run into performance issues you would be better off using Bitmap Text\r\n * instead, as it benefits from batching and avoids expensive Canvas API calls.\r\n *\r\n * @class Text\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Crop\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Tint\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {(string|string[])} text - The text this Text object will display.\r\n * @param {object} style - The text style configuration object.\r\n */\r\nvar Text = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Crop,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Mask,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.ScrollFactor,\r\n        Components.Tint,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        TextRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Text (scene, x, y, text, style)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n\r\n        GameObject.call(this, scene, 'Text');\r\n\r\n        /**\r\n         * The renderer in use by this Text object.\r\n         *\r\n         * @name Phaser.GameObjects.Text#renderer\r\n         * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n         * @since 3.12.0\r\n         */\r\n        this.renderer = scene.sys.game.renderer;\r\n\r\n        this.setPosition(x, y);\r\n        this.setOrigin(0, 0);\r\n        this.initPipeline();\r\n\r\n        /**\r\n         * The canvas element that the text is rendered to.\r\n         *\r\n         * @name Phaser.GameObjects.Text#canvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.0.0\r\n         */\r\n        this.canvas = CanvasPool.create(this);\r\n\r\n        /**\r\n         * The context of the canvas element that the text is rendered to.\r\n         *\r\n         * @name Phaser.GameObjects.Text#context\r\n         * @type {CanvasRenderingContext2D}\r\n         * @since 3.0.0\r\n         */\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        /**\r\n         * The Text Style object.\r\n         *\r\n         * Manages the style of this Text object.\r\n         *\r\n         * @name Phaser.GameObjects.Text#style\r\n         * @type {Phaser.GameObjects.Text.TextStyle}\r\n         * @since 3.0.0\r\n         */\r\n        this.style = new TextStyle(this, style);\r\n\r\n        /**\r\n         * Whether to automatically round line positions.\r\n         *\r\n         * @name Phaser.GameObjects.Text#autoRound\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.autoRound = true;\r\n\r\n        /**\r\n         * The Regular Expression that is used to split the text up into lines, in\r\n         * multi-line text. By default this is `/(?:\\r\\n|\\r|\\n)/`.\r\n         * You can change this RegExp to be anything else that you may need.\r\n         *\r\n         * @name Phaser.GameObjects.Text#splitRegExp\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.splitRegExp = /(?:\\r\\n|\\r|\\n)/;\r\n\r\n        /**\r\n         * The text to display.\r\n         *\r\n         * @name Phaser.GameObjects.Text#_text\r\n         * @type {string}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._text = '';\r\n\r\n        /**\r\n         * Specify a padding value which is added to the line width and height when calculating the Text size.\r\n         * Allows you to add extra spacing if the browser is unable to accurately determine the true font dimensions.\r\n         *\r\n         * @name Phaser.GameObjects.Text#padding\r\n         * @type {{left:number,right:number,top:number,bottom:number}}\r\n         * @since 3.0.0\r\n         */\r\n        this.padding = { left: 0, right: 0, top: 0, bottom: 0 };\r\n\r\n        /**\r\n         * The width of this Text object.\r\n         *\r\n         * @name Phaser.GameObjects.Text#width\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.width = 1;\r\n\r\n        /**\r\n         * The height of this Text object.\r\n         *\r\n         * @name Phaser.GameObjects.Text#height\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.height = 1;\r\n\r\n        /**\r\n         * The line spacing value.\r\n         * This value is added to the font height to calculate the overall line height.\r\n         * Only has an effect if this Text object contains multiple lines of text.\r\n         * \r\n         * If you update this property directly, instead of using the `setLineSpacing` method, then\r\n         * be sure to call `updateText` after, or you won't see the change reflected in the Text object.\r\n         *\r\n         * @name Phaser.GameObjects.Text#lineSpacing\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.lineSpacing = 0;\r\n\r\n        /**\r\n         * Whether the text or its settings have changed and need updating.\r\n         *\r\n         * @name Phaser.GameObjects.Text#dirty\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.dirty = false;\r\n\r\n        //  If resolution wasn't set, then we get it from the game config\r\n        if (this.style.resolution === 0)\r\n        {\r\n            this.style.resolution = scene.sys.game.config.resolution;\r\n        }\r\n\r\n        /**\r\n         * The internal crop data object, as used by `setCrop` and passed to the `Frame.setCropUVs` method.\r\n         *\r\n         * @name Phaser.GameObjects.Text#_crop\r\n         * @type {object}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._crop = this.resetCropObject();\r\n\r\n        //  Create a Texture for this Text object\r\n        this.texture = scene.sys.textures.addCanvas(null, this.canvas, true);\r\n\r\n        //  Get the frame\r\n        this.frame = this.texture.get();\r\n\r\n        //  Set the resolution\r\n        this.frame.source.resolution = this.style.resolution;\r\n\r\n        this.initRTL();\r\n\r\n        if (style && style.padding)\r\n        {\r\n            this.setPadding(style.padding);\r\n        }\r\n\r\n        if (style && style.lineSpacing)\r\n        {\r\n            this.lineSpacing = style.lineSpacing;\r\n        }\r\n\r\n        this.setText(text);\r\n\r\n        if (scene.sys.game.config.renderType === CONST.WEBGL)\r\n        {\r\n            scene.sys.game.renderer.onContextRestored(function ()\r\n            {\r\n                this.dirty = true;\r\n            }, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Initialize right to left text.\r\n     *\r\n     * @method Phaser.GameObjects.Text#initRTL\r\n     * @since 3.0.0\r\n     */\r\n    initRTL: function ()\r\n    {\r\n        if (!this.style.rtl)\r\n        {\r\n            return;\r\n        }\r\n\r\n        //  Here is where the crazy starts.\r\n        //\r\n        //  Due to browser implementation issues, you cannot fillText BiDi text to a canvas\r\n        //  that is not part of the DOM. It just completely ignores the direction property.\r\n\r\n        this.canvas.dir = 'rtl';\r\n\r\n        //  Experimental atm, but one day ...\r\n        this.context.direction = 'rtl';\r\n\r\n        //  Add it to the DOM, but hidden within the parent canvas.\r\n        this.canvas.style.display = 'none';\r\n\r\n        AddToDOM(this.canvas, this.scene.sys.canvas);\r\n\r\n        //  And finally we set the x origin\r\n        this.originX = 1;\r\n    },\r\n\r\n    /**\r\n     * Greedy wrapping algorithm that will wrap words as the line grows longer than its horizontal\r\n     * bounds.\r\n     *\r\n     * @method Phaser.GameObjects.Text#runWordWrap\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} text - The text to perform word wrap detection against.\r\n     *\r\n     * @return {string} The text after wrapping has been applied.\r\n     */\r\n    runWordWrap: function (text)\r\n    {\r\n        var style = this.style;\r\n\r\n        if (style.wordWrapCallback)\r\n        {\r\n            var wrappedLines = style.wordWrapCallback.call(style.wordWrapCallbackScope, text, this);\r\n\r\n            if (Array.isArray(wrappedLines))\r\n            {\r\n                wrappedLines = wrappedLines.join('\\n');\r\n            }\r\n\r\n            return wrappedLines;\r\n        }\r\n        else if (style.wordWrapWidth)\r\n        {\r\n            if (style.wordWrapUseAdvanced)\r\n            {\r\n                return this.advancedWordWrap(text, this.context, this.style.wordWrapWidth);\r\n            }\r\n            else\r\n            {\r\n                return this.basicWordWrap(text, this.context, this.style.wordWrapWidth);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return text;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Advanced wrapping algorithm that will wrap words as the line grows longer than its horizontal\r\n     * bounds. Consecutive spaces will be collapsed and replaced with a single space. Lines will be\r\n     * trimmed of white space before processing. Throws an error if wordWrapWidth is less than a\r\n     * single character.\r\n     *\r\n     * @method Phaser.GameObjects.Text#advancedWordWrap\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} text - The text to perform word wrap detection against.\r\n     * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n     * @param {number} wordWrapWidth - The word wrap width.\r\n     *\r\n     * @return {string} The wrapped text.\r\n     */\r\n    advancedWordWrap: function (text, context, wordWrapWidth)\r\n    {\r\n        var output = '';\r\n\r\n        // Condense consecutive spaces and split into lines\r\n        var lines = text\r\n            .replace(/ +/gi, ' ')\r\n            .split(this.splitRegExp);\r\n\r\n        var linesCount = lines.length;\r\n\r\n        for (var i = 0; i < linesCount; i++)\r\n        {\r\n            var line = lines[i];\r\n            var out = '';\r\n\r\n            // Trim whitespace\r\n            line = line.replace(/^ *|\\s*$/gi, '');\r\n\r\n            // If entire line is less than wordWrapWidth append the entire line and exit early\r\n            var lineWidth = context.measureText(line).width;\r\n\r\n            if (lineWidth < wordWrapWidth)\r\n            {\r\n                output += line + '\\n';\r\n                continue;\r\n            }\r\n\r\n            // Otherwise, calculate new lines\r\n            var currentLineWidth = wordWrapWidth;\r\n\r\n            // Split into words\r\n            var words = line.split(' ');\r\n\r\n            for (var j = 0; j < words.length; j++)\r\n            {\r\n                var word = words[j];\r\n                var wordWithSpace = word + ' ';\r\n                var wordWidth = context.measureText(wordWithSpace).width;\r\n\r\n                if (wordWidth > currentLineWidth)\r\n                {\r\n                    // Break word\r\n                    if (j === 0)\r\n                    {\r\n                        // Shave off letters from word until it's small enough\r\n                        var newWord = wordWithSpace;\r\n\r\n                        while (newWord.length)\r\n                        {\r\n                            newWord = newWord.slice(0, -1);\r\n                            wordWidth = context.measureText(newWord).width;\r\n\r\n                            if (wordWidth <= currentLineWidth)\r\n                            {\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        // If wordWrapWidth is too small for even a single letter, shame user\r\n                        // failure with a fatal error\r\n                        if (!newWord.length)\r\n                        {\r\n                            throw new Error('This text\\'s wordWrapWidth setting is less than a single character!');\r\n                        }\r\n\r\n                        // Replace current word in array with remainder\r\n                        var secondPart = word.substr(newWord.length);\r\n\r\n                        words[j] = secondPart;\r\n\r\n                        // Append first piece to output\r\n                        out += newWord;\r\n                    }\r\n\r\n                    // If existing word length is 0, don't include it\r\n                    var offset = (words[j].length) ? j : j + 1;\r\n\r\n                    // Collapse rest of sentence and remove any trailing white space\r\n                    var remainder = words.slice(offset).join(' ')\r\n                        .replace(/[ \\n]*$/gi, '');\r\n\r\n                    // Prepend remainder to next line\r\n                    lines[i + 1] = remainder + ' ' + (lines[i + 1] || '');\r\n                    linesCount = lines.length;\r\n\r\n                    break; // Processing on this line\r\n\r\n                    // Append word with space to output\r\n                }\r\n                else\r\n                {\r\n                    out += wordWithSpace;\r\n                    currentLineWidth -= wordWidth;\r\n                }\r\n            }\r\n\r\n            // Append processed line to output\r\n            output += out.replace(/[ \\n]*$/gi, '') + '\\n';\r\n        }\r\n\r\n        // Trim the end of the string\r\n        output = output.replace(/[\\s|\\n]*$/gi, '');\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Greedy wrapping algorithm that will wrap words as the line grows longer than its horizontal\r\n     * bounds. Spaces are not collapsed and whitespace is not trimmed.\r\n     *\r\n     * @method Phaser.GameObjects.Text#basicWordWrap\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} text - The text to perform word wrap detection against.\r\n     * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n     * @param {number} wordWrapWidth - The word wrap width.\r\n     *\r\n     * @return {string} The wrapped text.\r\n     */\r\n    basicWordWrap: function (text, context, wordWrapWidth)\r\n    {\r\n        var result = '';\r\n        var lines = text.split(this.splitRegExp);\r\n\r\n        for (var i = 0; i < lines.length; i++)\r\n        {\r\n            var spaceLeft = wordWrapWidth;\r\n            var words = lines[i].split(' ');\r\n\r\n            for (var j = 0; j < words.length; j++)\r\n            {\r\n                var wordWidth = context.measureText(words[j]).width;\r\n                var wordWidthWithSpace = wordWidth + context.measureText(' ').width;\r\n\r\n                if (wordWidthWithSpace > spaceLeft)\r\n                {\r\n                    // Skip printing the newline if it's the first word of the line that is greater\r\n                    // than the word wrap width.\r\n                    if (j > 0)\r\n                    {\r\n                        result += '\\n';\r\n                    }\r\n\r\n                    result += words[j] + ' ';\r\n                    spaceLeft = wordWrapWidth - wordWidth;\r\n                }\r\n                else\r\n                {\r\n                    spaceLeft -= wordWidthWithSpace;\r\n                    result += words[j];\r\n\r\n                    if (j < (words.length - 1))\r\n                    {\r\n                        result += ' ';\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (i < lines.length - 1)\r\n            {\r\n                result += '\\n';\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Runs the given text through this Text objects word wrapping and returns the results as an\r\n     * array, where each element of the array corresponds to a wrapped line of text.\r\n     *\r\n     * @method Phaser.GameObjects.Text#getWrappedText\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} text - The text for which the wrapping will be calculated. If unspecified, the Text objects current text will be used.\r\n     *\r\n     * @return {string[]} An array of strings with the pieces of wrapped text.\r\n     */\r\n    getWrappedText: function (text)\r\n    {\r\n        if (text === undefined) { text = this._text; }\r\n\r\n        this.style.syncFont(this.canvas, this.context);\r\n\r\n        var wrappedLines = this.runWordWrap(text);\r\n\r\n        return wrappedLines.split(this.splitRegExp);\r\n    },\r\n\r\n    /**\r\n     * Set the text to display.\r\n     *\r\n     * An array of strings will be joined with `\\n` line breaks.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setText\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|string[])} value - The string, or array of strings, to be set as the content of this Text object.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setText: function (value)\r\n    {\r\n        if (!value && value !== 0)\r\n        {\r\n            value = '';\r\n        }\r\n\r\n        if (Array.isArray(value))\r\n        {\r\n            value = value.join('\\n');\r\n        }\r\n\r\n        if (value !== this._text)\r\n        {\r\n            this._text = value.toString();\r\n\r\n            this.updateText();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the text style.\r\n     *\r\n     * @example\r\n     * text.setStyle({\r\n     *     fontSize: '64px',\r\n     *     fontFamily: 'Arial',\r\n     *     color: '#ffffff',\r\n     *     align: 'center',\r\n     *     backgroundColor: '#ff00ff'\r\n     * });\r\n     *\r\n     * @method Phaser.GameObjects.Text#setStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} style - The style settings to set.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setStyle: function (style)\r\n    {\r\n        return this.style.setStyle(style);\r\n    },\r\n\r\n    /**\r\n     * Set the font.\r\n     *\r\n     * If a string is given, the font family is set.\r\n     *\r\n     * If an object is given, the `fontFamily`, `fontSize` and `fontStyle`\r\n     * properties of that object are set.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setFont\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} font - The font family or font settings to set.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setFont: function (font)\r\n    {\r\n        return this.style.setFont(font);\r\n    },\r\n\r\n    /**\r\n     * Set the font family.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setFontFamily\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} family - The font family.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setFontFamily: function (family)\r\n    {\r\n        return this.style.setFontFamily(family);\r\n    },\r\n\r\n    /**\r\n     * Set the font size.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setFontSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} size - The font size.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setFontSize: function (size)\r\n    {\r\n        return this.style.setFontSize(size);\r\n    },\r\n\r\n    /**\r\n     * Set the font style.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setFontStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} style - The font style.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setFontStyle: function (style)\r\n    {\r\n        return this.style.setFontStyle(style);\r\n    },\r\n\r\n    /**\r\n     * Set a fixed width and height for the text.\r\n     *\r\n     * Pass in `0` for either of these parameters to disable fixed width or height respectively.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setFixedSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The fixed width to set. `0` disables fixed width.\r\n     * @param {number} height - The fixed height to set. `0` disables fixed height.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setFixedSize: function (width, height)\r\n    {\r\n        return this.style.setFixedSize(width, height);\r\n    },\r\n\r\n    /**\r\n     * Set the background color.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setBackgroundColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The background color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setBackgroundColor: function (color)\r\n    {\r\n        return this.style.setBackgroundColor(color);\r\n    },\r\n\r\n    /**\r\n     * Set the text fill color.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setFill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The text fill color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setFill: function (color)\r\n    {\r\n        return this.style.setFill(color);\r\n    },\r\n\r\n    /**\r\n     * Set the text fill color.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The text fill color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setColor: function (color)\r\n    {\r\n        return this.style.setColor(color);\r\n    },\r\n\r\n    /**\r\n     * Set the stroke settings.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setStroke\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The stroke color.\r\n     * @param {number} thickness - The stroke thickness.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setStroke: function (color, thickness)\r\n    {\r\n        return this.style.setStroke(color, thickness);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow settings.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setShadow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal shadow offset.\r\n     * @param {number} [y=0] - The vertical shadow offset.\r\n     * @param {string} [color='#000'] - The shadow color.\r\n     * @param {number} [blur=0] - The shadow blur radius.\r\n     * @param {boolean} [shadowStroke=false] - Whether to stroke the shadow.\r\n     * @param {boolean} [shadowFill=true] - Whether to fill the shadow.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setShadow: function (x, y, color, blur, shadowStroke, shadowFill)\r\n    {\r\n        return this.style.setShadow(x, y, color, blur, shadowStroke, shadowFill);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow offset.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setShadowOffset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal shadow offset.\r\n     * @param {number} y - The vertical shadow offset.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setShadowOffset: function (x, y)\r\n    {\r\n        return this.style.setShadowOffset(x, y);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow color.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setShadowColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The shadow color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setShadowColor: function (color)\r\n    {\r\n        return this.style.setShadowColor(color);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow blur radius.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setShadowBlur\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} blur - The shadow blur radius.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setShadowBlur: function (blur)\r\n    {\r\n        return this.style.setShadowBlur(blur);\r\n    },\r\n\r\n    /**\r\n     * Enable or disable shadow stroke.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setShadowStroke\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} enabled - Whether shadow stroke is enabled or not.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setShadowStroke: function (enabled)\r\n    {\r\n        return this.style.setShadowStroke(enabled);\r\n    },\r\n\r\n    /**\r\n     * Enable or disable shadow fill.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setShadowFill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} enabled - Whether shadow fill is enabled or not.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setShadowFill: function (enabled)\r\n    {\r\n        return this.style.setShadowFill(enabled);\r\n    },\r\n\r\n    /**\r\n     * Set the width (in pixels) to use for wrapping lines. Pass in null to remove wrapping by width.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setWordWrapWidth\r\n     * @since 3.0.0\r\n     *\r\n     * @param {?number} width - The maximum width of a line in pixels. Set to null to remove wrapping.\r\n     * @param {boolean} [useAdvancedWrap=false] - Whether or not to use the advanced wrapping\r\n     * algorithm. If true, spaces are collapsed and whitespace is trimmed from lines. If false,\r\n     * spaces and whitespace are left as is.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setWordWrapWidth: function (width, useAdvancedWrap)\r\n    {\r\n        return this.style.setWordWrapWidth(width, useAdvancedWrap);\r\n    },\r\n\r\n    /**\r\n     * Set a custom callback for wrapping lines. Pass in null to remove wrapping by callback.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setWordWrapCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {TextStyleWordWrapCallback} callback - A custom function that will be responsible for wrapping the\r\n     * text. It will receive two arguments: text (the string to wrap), textObject (this Text\r\n     * instance). It should return the wrapped lines either as an array of lines or as a string with\r\n     * newline characters in place to indicate where breaks should happen.\r\n     * @param {object} [scope=null] - The scope that will be applied when the callback is invoked.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setWordWrapCallback: function (callback, scope)\r\n    {\r\n        return this.style.setWordWrapCallback(callback, scope);\r\n    },\r\n\r\n    /**\r\n     * Set the text alignment.\r\n     *\r\n     * Expects values like `'left'`, `'right'`, `'center'` or `'justified'`.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setAlign\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} align - The text alignment.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setAlign: function (align)\r\n    {\r\n        return this.style.setAlign(align);\r\n    },\r\n\r\n    /**\r\n     * Set the resolution used by this Text object.\r\n     *\r\n     * By default it will be set to match the resolution set in the Game Config,\r\n     * but you can override it via this method, or by specifying it in the Text style configuration object.\r\n     * \r\n     * It allows for much clearer text on High DPI devices, at the cost of memory because it uses larger\r\n     * internal Canvas textures for the Text.\r\n     * \r\n     * Therefore, please use with caution, as the more high res Text you have, the more memory it uses.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setResolution\r\n     * @since 3.12.0\r\n     *\r\n     * @param {number} value - The resolution for this Text object to use.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setResolution: function (value)\r\n    {\r\n        return this.style.setResolution(value);\r\n    },\r\n\r\n    /**\r\n     * Sets the line spacing value.\r\n     *\r\n     * This value is _added_ to the height of the font when calculating the overall line height.\r\n     * This only has an effect if this Text object consists of multiple lines of text.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setLineSpacing\r\n     * @since 3.13.0\r\n     *\r\n     * @param {number} value - The amount to add to the font height to achieve the overall line height.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setLineSpacing: function (value)\r\n    {\r\n        this.lineSpacing = value;\r\n\r\n        return this.updateText();\r\n    },\r\n\r\n    /**\r\n     * Set the text padding.\r\n     *\r\n     * 'left' can be an object.\r\n     *\r\n     * If only 'left' and 'top' are given they are treated as 'x' and 'y'.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setPadding\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} left - The left padding value, or a padding config object.\r\n     * @param {number} top - The top padding value.\r\n     * @param {number} right - The right padding value.\r\n     * @param {number} bottom - The bottom padding value.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setPadding: function (left, top, right, bottom)\r\n    {\r\n        if (typeof left === 'object')\r\n        {\r\n            var config = left;\r\n\r\n            //  If they specify x and/or y this applies to all\r\n            var x = GetValue(config, 'x', null);\r\n\r\n            if (x !== null)\r\n            {\r\n                left = x;\r\n                right = x;\r\n            }\r\n            else\r\n            {\r\n                left = GetValue(config, 'left', 0);\r\n                right = GetValue(config, 'right', left);\r\n            }\r\n\r\n            var y = GetValue(config, 'y', null);\r\n\r\n            if (y !== null)\r\n            {\r\n                top = y;\r\n                bottom = y;\r\n            }\r\n            else\r\n            {\r\n                top = GetValue(config, 'top', 0);\r\n                bottom = GetValue(config, 'bottom', top);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (left === undefined) { left = 0; }\r\n            if (top === undefined) { top = left; }\r\n            if (right === undefined) { right = left; }\r\n            if (bottom === undefined) { bottom = top; }\r\n        }\r\n\r\n        this.padding.left = left;\r\n        this.padding.top = top;\r\n        this.padding.right = right;\r\n        this.padding.bottom = bottom;\r\n\r\n        return this.updateText();\r\n    },\r\n\r\n    /**\r\n     * Set the maximum number of lines to draw.\r\n     *\r\n     * @method Phaser.GameObjects.Text#setMaxLines\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [max=0] - The maximum number of lines to draw.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    setMaxLines: function (max)\r\n    {\r\n        return this.style.setMaxLines(max);\r\n    },\r\n\r\n    /**\r\n     * Update the displayed text.\r\n     *\r\n     * @method Phaser.GameObjects.Text#updateText\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Text} This Text object.\r\n     */\r\n    updateText: function ()\r\n    {\r\n        var canvas = this.canvas;\r\n        var context = this.context;\r\n        var style = this.style;\r\n        var resolution = style.resolution;\r\n        var size = style.metrics;\r\n\r\n        style.syncFont(canvas, context);\r\n\r\n        var outputText = this._text;\r\n\r\n        if (style.wordWrapWidth || style.wordWrapCallback)\r\n        {\r\n            outputText = this.runWordWrap(this._text);\r\n        }\r\n\r\n        //  Split text into lines\r\n        var lines = outputText.split(this.splitRegExp);\r\n\r\n        var textSize = GetTextSize(this, size, lines);\r\n\r\n        var padding = this.padding;\r\n\r\n        var w = textSize.width + padding.left + padding.right;\r\n        var h = textSize.height + padding.top + padding.bottom;\r\n\r\n        if (style.fixedWidth === 0)\r\n        {\r\n            this.width = w;\r\n        }\r\n\r\n        if (style.fixedHeight === 0)\r\n        {\r\n            this.height = h;\r\n        }\r\n\r\n        this.updateDisplayOrigin();\r\n\r\n        w *= resolution;\r\n        h *= resolution;\r\n\r\n        w = Math.max(w, 1);\r\n        h = Math.max(h, 1);\r\n\r\n        if (canvas.width !== w || canvas.height !== h)\r\n        {\r\n            canvas.width = w;\r\n            canvas.height = h;\r\n\r\n            this.frame.setSize(w, h);\r\n\r\n            style.syncFont(canvas, context); // Resizing resets the context\r\n        }\r\n        else\r\n        {\r\n            context.clearRect(0, 0, w, h);\r\n        }\r\n\r\n        context.save();\r\n\r\n        context.scale(resolution, resolution);\r\n\r\n        if (style.backgroundColor)\r\n        {\r\n            context.fillStyle = style.backgroundColor;\r\n            context.fillRect(0, 0, w, h);\r\n        }\r\n\r\n        style.syncStyle(canvas, context);\r\n\r\n        context.textBaseline = 'alphabetic';\r\n\r\n        //  Apply padding\r\n        context.translate(padding.left, padding.top);\r\n\r\n        var linePositionX;\r\n        var linePositionY;\r\n\r\n        //  Draw text line by line\r\n        for (var i = 0; i < textSize.lines; i++)\r\n        {\r\n            linePositionX = style.strokeThickness / 2;\r\n            linePositionY = (style.strokeThickness / 2 + i * textSize.lineHeight) + size.ascent;\r\n\r\n            if (i > 0)\r\n            {\r\n                linePositionY += (textSize.lineSpacing * i);\r\n            }\r\n\r\n            if (style.rtl)\r\n            {\r\n                linePositionX = w - linePositionX;\r\n            }\r\n            else if (style.align === 'right')\r\n            {\r\n                linePositionX += textSize.width - textSize.lineWidths[i];\r\n            }\r\n            else if (style.align === 'center')\r\n            {\r\n                linePositionX += (textSize.width - textSize.lineWidths[i]) / 2;\r\n            }\r\n\r\n            if (this.autoRound)\r\n            {\r\n                linePositionX = Math.round(linePositionX);\r\n                linePositionY = Math.round(linePositionY);\r\n            }\r\n\r\n            if (style.strokeThickness)\r\n            {\r\n                this.style.syncShadow(context, style.shadowStroke);\r\n\r\n                context.strokeText(lines[i], linePositionX, linePositionY);\r\n            }\r\n\r\n            if (style.color)\r\n            {\r\n                this.style.syncShadow(context, style.shadowFill);\r\n\r\n                context.fillText(lines[i], linePositionX, linePositionY);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n\r\n        if (this.renderer.gl)\r\n        {\r\n            this.frame.source.glTexture = this.renderer.canvasToTexture(canvas, this.frame.source.glTexture);\r\n\r\n            this.frame.glTexture = this.frame.source.glTexture;\r\n        }\r\n\r\n        this.dirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Get the current text metrics.\r\n     *\r\n     * @method Phaser.GameObjects.Text#getTextMetrics\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} The text metrics.\r\n     */\r\n    getTextMetrics: function ()\r\n    {\r\n        return this.style.getTextMetrics();\r\n    },\r\n\r\n    /**\r\n     * The text string being rendered by this Text Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Text#text\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\r\n    text: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._text;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.setText(value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Build a JSON representation of the Text object.\r\n     *\r\n     * @method Phaser.GameObjects.Text#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {JSONGameObject} A JSON representation of the Text object.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var out = Components.ToJSON(this);\r\n\r\n        //  Extra Text data is added here\r\n\r\n        var data = {\r\n            autoRound: this.autoRound,\r\n            text: this._text,\r\n            style: this.style.toJSON(),\r\n            padding: {\r\n                left: this.padding.left,\r\n                right: this.padding.right,\r\n                top: this.padding.top,\r\n                bottom: this.padding.bottom\r\n            }\r\n        };\r\n\r\n        out.data = data;\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Internal destroy handler, called as part of the destroy process.\r\n     *\r\n     * @method Phaser.GameObjects.Text#preDestroy\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    preDestroy: function ()\r\n    {\r\n        if (this.style.rtl)\r\n        {\r\n            RemoveFromDOM(this.canvas);\r\n        }\r\n\r\n        CanvasPool.remove(this.canvas);\r\n\r\n        this.texture.destroy();\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Text;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","AddToDOM","CanvasPool","Class","Components","CONST","GameObject","GetTextSize","GetValue","RemoveFromDOM","TextRender","TextStyle","Text","Extends","Mixins","Alpha","BlendMode","ComputedSize","Crop","Depth","Flip","GetBounds","Mask","Origin","Pipeline","ScaleMode","ScrollFactor","Tint","Transform","Visible","initialize","scene","x","y","text","style","undefined","call","renderer","sys","game","setPosition","setOrigin","initPipeline","canvas","create","context","getContext","autoRound","splitRegExp","_text","padding","left","right","top","bottom","height","width","lineSpacing","dirty","resolution","config","_crop","resetCropObject","texture","textures","addCanvas","frame","get","source","initRTL","setPadding","setText","renderType","WEBGL","onContextRestored","rtl","dir","direction","display","originX","runWordWrap","wordWrapCallback","wrappedLines","wordWrapCallbackScope","Array","isArray","join","wordWrapWidth","wordWrapUseAdvanced","advancedWordWrap","basicWordWrap","output","lines","replace","split","linesCount","length","i","line","out","measureText","currentLineWidth","words","j","word","wordWithSpace","wordWidth","newWord","slice","Error","secondPart","substr","remainder","offset","result","spaceLeft","wordWidthWithSpace","getWrappedText","syncFont","value","toString","updateText","setStyle","setFont","font","setFontFamily","family","setFontSize","size","setFontStyle","setFixedSize","setBackgroundColor","color","setFill","setColor","setStroke","thickness","setShadow","blur","shadowStroke","shadowFill","setShadowOffset","setShadowColor","setShadowBlur","setShadowStroke","enabled","setShadowFill","setWordWrapWidth","useAdvancedWrap","setWordWrapCallback","callback","scope","setAlign","align","setResolution","setLineSpacing","setMaxLines","max","metrics","outputText","textSize","w","h","fixedWidth","fixedHeight","updateDisplayOrigin","Math","setSize","clearRect","save","scale","backgroundColor","fillStyle","fillRect","syncStyle","textBaseline","translate","linePositionX","strokeThickness","linePositionY","lineHeight","ascent","lineWidths","round","syncShadow","strokeText","fillText","restore","gl","glTexture","canvasToTexture","getTextMetrics","set","toJSON","ToJSON","data","preDestroy","remove","destroy"]
}
