{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$components$TransformMatrix.js",
"lineCount":13,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/components/TransformMatrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$components$TransformMatrix\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Matrix used for display transformations for rendering.\r\n *\r\n * It is represented like so:\r\n *\r\n * ```\r\n * | a | c | tx |\r\n * | b | d | ty |\r\n * | 0 | 0 | 1  |\r\n * ```\r\n *\r\n * @class TransformMatrix\r\n * @memberOf Phaser.GameObjects.Components\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [a=1] - The Scale X value.\r\n * @param {number} [b=0] - The Shear Y value.\r\n * @param {number} [c=0] - The Shear X value.\r\n * @param {number} [d=1] - The Scale Y value.\r\n * @param {number} [tx=0] - The Translate X value.\r\n * @param {number} [ty=0] - The Translate Y value.\r\n */\r\nvar TransformMatrix = new Class({\r\n\r\n    initialize:\r\n\r\n    function TransformMatrix (a, b, c, d, tx, ty)\r\n    {\r\n        if (a === undefined) { a = 1; }\r\n        if (b === undefined) { b = 0; }\r\n        if (c === undefined) { c = 0; }\r\n        if (d === undefined) { d = 1; }\r\n        if (tx === undefined) { tx = 0; }\r\n        if (ty === undefined) { ty = 0; }\r\n\r\n        /**\r\n         * The matrix values.\r\n         *\r\n         * @name Phaser.GameObjects.Components.TransformMatrix#matrix\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.matrix = new Float32Array([ a, b, c, d, tx, ty, 0, 0, 1 ]);\r\n\r\n        /**\r\n         * The decomposed matrix.\r\n         *\r\n         * @name Phaser.GameObjects.Components.TransformMatrix#decomposedMatrix\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.decomposedMatrix = {\r\n            translateX: 0,\r\n            translateY: 0,\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            rotation: 0\r\n        };\r\n    },\r\n\r\n    /**\r\n     * The Scale X value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#a\r\n     * @type {number}\r\n     * @since 3.4.0\r\n     */\r\n    a: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[0];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[0] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Shear Y value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#b\r\n     * @type {number}\r\n     * @since 3.4.0\r\n     */\r\n    b: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[1];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[1] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Shear X value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#c\r\n     * @type {number}\r\n     * @since 3.4.0\r\n     */\r\n    c: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[2];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[2] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Scale Y value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#d\r\n     * @type {number}\r\n     * @since 3.4.0\r\n     */\r\n    d: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[3];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[3] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Translate X value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#e\r\n     * @type {number}\r\n     * @since 3.11.0\r\n     */\r\n    e: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[4];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[4] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Translate Y value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#f\r\n     * @type {number}\r\n     * @since 3.11.0\r\n     */\r\n    f: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[5];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[5] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Translate X value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#tx\r\n     * @type {number}\r\n     * @since 3.4.0\r\n     */\r\n    tx: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[4];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[4] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Translate Y value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#ty\r\n     * @type {number}\r\n     * @since 3.4.0\r\n     */\r\n    ty: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[5];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[5] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The rotation of the Matrix.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#rotation\r\n     * @type {number}\r\n     * @readOnly\r\n     * @since 3.4.0\r\n     */\r\n    rotation: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.acos(this.a / this.scaleX) * (Math.atan(-this.c / this.a) < 0 ? -1 : 1);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The horizontal scale of the Matrix.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#scaleX\r\n     * @type {number}\r\n     * @readOnly\r\n     * @since 3.4.0\r\n     */\r\n    scaleX: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.sqrt((this.a * this.a) + (this.c * this.c));\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The vertical scale of the Matrix.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#scaleY\r\n     * @type {number}\r\n     * @readOnly\r\n     * @since 3.4.0\r\n     */\r\n    scaleY: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.sqrt((this.b * this.b) + (this.d * this.d));\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Reset the Matrix to an identity matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#loadIdentity\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    loadIdentity: function ()\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        matrix[0] = 1;\r\n        matrix[1] = 0;\r\n        matrix[2] = 0;\r\n        matrix[3] = 1;\r\n        matrix[4] = 0;\r\n        matrix[5] = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Translate the Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#translate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal translation value.\r\n     * @param {number} y - The vertical translation value.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    translate: function (x, y)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        matrix[4] = matrix[0] * x + matrix[2] * y + matrix[4];\r\n        matrix[5] = matrix[1] * x + matrix[3] * y + matrix[5];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale the Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal scale value.\r\n     * @param {number} y - The vertical scale value.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    scale: function (x, y)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        matrix[0] *= x;\r\n        matrix[1] *= x;\r\n        matrix[2] *= y;\r\n        matrix[3] *= y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate the Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#rotate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} angle - The angle of rotation in radians.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    rotate: function (angle)\r\n    {\r\n        var sin = Math.sin(angle);\r\n        var cos = Math.cos(angle);\r\n\r\n        var matrix = this.matrix;\r\n\r\n        var a = matrix[0];\r\n        var b = matrix[1];\r\n        var c = matrix[2];\r\n        var d = matrix[3];\r\n\r\n        matrix[0] = a * cos + c * sin;\r\n        matrix[1] = b * cos + d * sin;\r\n        matrix[2] = a * -sin + c * cos;\r\n        matrix[3] = b * -sin + d * cos;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Multiply this Matrix by the given Matrix.\r\n     * \r\n     * If an `out` Matrix is given then the results will be stored in it.\r\n     * If it is not given, this matrix will be updated in place instead.\r\n     * Use an `out` Matrix if you do not wish to mutate this matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} rhs - The Matrix to multiply by.\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} [out] - An optional Matrix to store the results in.\r\n     *\r\n     * @return {Phaser.GameObjects.Components.TransformMatrix} Either this TransformMatrix, or the `out` Matrix, if given in the arguments.\r\n     */\r\n    multiply: function (rhs, out)\r\n    {\r\n        var matrix = this.matrix;\r\n        var source = rhs.matrix;\r\n\r\n        var localA = matrix[0];\r\n        var localB = matrix[1];\r\n        var localC = matrix[2];\r\n        var localD = matrix[3];\r\n        var localE = matrix[4];\r\n        var localF = matrix[5];\r\n\r\n        var sourceA = source[0];\r\n        var sourceB = source[1];\r\n        var sourceC = source[2];\r\n        var sourceD = source[3];\r\n        var sourceE = source[4];\r\n        var sourceF = source[5];\r\n\r\n        var destinationMatrix = (out === undefined) ? this : out;\r\n\r\n        destinationMatrix.a = (sourceA * localA) + (sourceB * localC);\r\n        destinationMatrix.b = (sourceA * localB) + (sourceB * localD);\r\n        destinationMatrix.c = (sourceC * localA) + (sourceD * localC);\r\n        destinationMatrix.d = (sourceC * localB) + (sourceD * localD);\r\n        destinationMatrix.e = (sourceE * localA) + (sourceF * localC) + localE;\r\n        destinationMatrix.f = (sourceE * localB) + (sourceF * localD) + localF;\r\n\r\n        return destinationMatrix;\r\n    },\r\n\r\n    /**\r\n     * Multiply this Matrix by the matrix given, including the offset.\r\n     * \r\n     * The offsetX is added to the tx value: `offsetX * a + offsetY * c + tx`.\r\n     * The offsetY is added to the ty value: `offsetY * b + offsetY * d + ty`.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#multiplyWithOffset\r\n     * @since 3.11.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} src - The source Matrix to copy from.\r\n     * @param {number} offsetX - Horizontal offset to factor in to the multiplication.\r\n     * @param {number} offsetY - Vertical offset to factor in to the multiplication.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    multiplyWithOffset: function (src, offsetX, offsetY)\r\n    {\r\n        var matrix = this.matrix;\r\n        var otherMatrix = src.matrix;\r\n\r\n        var a0 = matrix[0];\r\n        var b0 = matrix[1];\r\n        var c0 = matrix[2];\r\n        var d0 = matrix[3];\r\n        var tx0 = matrix[4];\r\n        var ty0 = matrix[5];\r\n\r\n        var pse = offsetX * a0 + offsetY * c0 + tx0;\r\n        var psf = offsetX * b0 + offsetY * d0 + ty0;\r\n\r\n        var a1 = otherMatrix[0];\r\n        var b1 = otherMatrix[1];\r\n        var c1 = otherMatrix[2];\r\n        var d1 = otherMatrix[3];\r\n        var tx1 = otherMatrix[4];\r\n        var ty1 = otherMatrix[5];\r\n\r\n        matrix[0] = a1 * a0 + b1 * c0;\r\n        matrix[1] = a1 * b0 + b1 * d0;\r\n        matrix[2] = c1 * a0 + d1 * c0;\r\n        matrix[3] = c1 * b0 + d1 * d0;\r\n        matrix[4] = tx1 * a0 + ty1 * c0 + pse;\r\n        matrix[5] = tx1 * b0 + ty1 * d0 + psf;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform the Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#transform\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} a - The Scale X value.\r\n     * @param {number} b - The Shear Y value.\r\n     * @param {number} c - The Shear X value.\r\n     * @param {number} d - The Scale Y value.\r\n     * @param {number} tx - The Translate X value.\r\n     * @param {number} ty - The Translate Y value.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    transform: function (a, b, c, d, tx, ty)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        var a0 = matrix[0];\r\n        var b0 = matrix[1];\r\n        var c0 = matrix[2];\r\n        var d0 = matrix[3];\r\n        var tx0 = matrix[4];\r\n        var ty0 = matrix[5];\r\n\r\n        matrix[0] = a * a0 + b * c0;\r\n        matrix[1] = a * b0 + b * d0;\r\n        matrix[2] = c * a0 + d * c0;\r\n        matrix[3] = c * b0 + d * d0;\r\n        matrix[4] = tx * a0 + ty * c0 + tx0;\r\n        matrix[5] = tx * b0 + ty * d0 + ty0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform a point using this Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#transformPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the point to transform.\r\n     * @param {number} y - The y coordinate of the point to transform.\r\n     * @param {(Phaser.Geom.Point|Phaser.Math.Vector2|object)} point - The Point object to store the transformed coordinates.\r\n     *\r\n     * @return {(Phaser.Geom.Point|Phaser.Math.Vector2|object)} The Point containing the transformed coordinates.\r\n     */\r\n    transformPoint: function (x, y, point)\r\n    {\r\n        if (point === undefined) { point = { x: 0, y: 0 }; }\r\n\r\n        var matrix = this.matrix;\r\n\r\n        var a = matrix[0];\r\n        var b = matrix[1];\r\n        var c = matrix[2];\r\n        var d = matrix[3];\r\n        var tx = matrix[4];\r\n        var ty = matrix[5];\r\n\r\n        point.x = x * a + y * c + tx;\r\n        point.y = x * b + y * d + ty;\r\n\r\n        return point;\r\n    },\r\n\r\n    /**\r\n     * Invert the Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#invert\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    invert: function ()\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        var a = matrix[0];\r\n        var b = matrix[1];\r\n        var c = matrix[2];\r\n        var d = matrix[3];\r\n        var tx = matrix[4];\r\n        var ty = matrix[5];\r\n\r\n        var n = a * d - b * c;\r\n\r\n        matrix[0] = d / n;\r\n        matrix[1] = -b / n;\r\n        matrix[2] = -c / n;\r\n        matrix[3] = a / n;\r\n        matrix[4] = (c * ty - d * tx) / n;\r\n        matrix[5] = -(a * ty - b * tx) / n;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix to copy those of the matrix given.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#copyFrom\r\n     * @since 3.11.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} src - The source Matrix to copy from.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    copyFrom: function (src)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        matrix[0] = src.a;\r\n        matrix[1] = src.b;\r\n        matrix[2] = src.c;\r\n        matrix[3] = src.d;\r\n        matrix[4] = src.e;\r\n        matrix[5] = src.f;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix to copy those of the array given.\r\n     * Where array indexes 0, 1, 2, 3, 4 and 5 are mapped to a, b, c, d, e and f.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#copyFromArray\r\n     * @since 3.11.0\r\n     *\r\n     * @param {array} src - The array of values to set into this matrix.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    copyFromArray: function (src)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        matrix[0] = src[0];\r\n        matrix[1] = src[1];\r\n        matrix[2] = src[2];\r\n        matrix[3] = src[3];\r\n        matrix[4] = src[4];\r\n        matrix[5] = src[5];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Copy the values from this Matrix to the given Canvas Rendering Context.\r\n     * This will use the Context.transform method.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#copyToContext\r\n     * @since 3.12.0\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx - The Canvas Rendering Context to copy the matrix values to.\r\n     *\r\n     * @return {CanvasRenderingContext2D} The Canvas Rendering Context.\r\n     */\r\n    copyToContext: function (ctx)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        ctx.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\r\n\r\n        return ctx;\r\n    },\r\n\r\n    /**\r\n     * Copy the values from this Matrix to the given Canvas Rendering Context.\r\n     * This will use the Context.setTransform method.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#setToContext\r\n     * @since 3.12.0\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx - The Canvas Rendering Context to copy the matrix values to.\r\n     *\r\n     * @return {CanvasRenderingContext2D} The Canvas Rendering Context.\r\n     */\r\n    setToContext: function (ctx)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        ctx.setTransform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\r\n\r\n        return ctx;\r\n    },\r\n\r\n    /**\r\n     * Copy the values in this Matrix to the array given.\r\n     * \r\n     * Where array indexes 0, 1, 2, 3, 4 and 5 are mapped to a, b, c, d, e and f.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#copyToArray\r\n     * @since 3.12.0\r\n     *\r\n     * @param {array} [out] - The array to copy the matrix values in to.\r\n     *\r\n     * @return {array} An array where elements 0 to 5 contain the values from this matrix.\r\n     */\r\n    copyToArray: function (out)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        if (out === undefined)\r\n        {\r\n            out = [ matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5] ];\r\n        }\r\n        else\r\n        {\r\n            out[0] = matrix[0];\r\n            out[1] = matrix[1];\r\n            out[2] = matrix[2];\r\n            out[3] = matrix[3];\r\n            out[4] = matrix[4];\r\n            out[5] = matrix[5];\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#setTransform\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} a - The Scale X value.\r\n     * @param {number} b - The Shear Y value.\r\n     * @param {number} c - The Shear X value.\r\n     * @param {number} d - The Scale Y value.\r\n     * @param {number} tx - The Translate X value.\r\n     * @param {number} ty - The Translate Y value.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    setTransform: function (a, b, c, d, tx, ty)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        matrix[0] = a;\r\n        matrix[1] = b;\r\n        matrix[2] = c;\r\n        matrix[3] = d;\r\n        matrix[4] = tx;\r\n        matrix[5] = ty;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Decompose this Matrix into its translation, scale and rotation values.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#decomposeMatrix\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} The decomposed Matrix.\r\n     */\r\n    decomposeMatrix: function ()\r\n    {\r\n        var decomposedMatrix = this.decomposedMatrix;\r\n\r\n        var matrix = this.matrix;\r\n\r\n        //  a = scale X (1)\r\n        //  b = shear Y (0)\r\n        //  c = shear X (0)\r\n        //  d = scale Y (1)\r\n\r\n        var a = matrix[0];\r\n        var b = matrix[1];\r\n        var c = matrix[2];\r\n        var d = matrix[3];\r\n\r\n        var a2 = a * a;\r\n        var b2 = b * b;\r\n        var c2 = c * c;\r\n        var d2 = d * d;\r\n\r\n        var sx = Math.sqrt(a2 + c2);\r\n        var sy = Math.sqrt(b2 + d2);\r\n\r\n        decomposedMatrix.translateX = matrix[4];\r\n        decomposedMatrix.translateY = matrix[5];\r\n\r\n        decomposedMatrix.scaleX = sx;\r\n        decomposedMatrix.scaleY = sy;\r\n\r\n        decomposedMatrix.rotation = Math.acos(a / sx) * (Math.atan(-c / a) < 0 ? -1 : 1);\r\n\r\n        return decomposedMatrix;\r\n    },\r\n\r\n    /**\r\n     * Apply the identity, translate, rotate and scale operations on the Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#applyITRS\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal translation.\r\n     * @param {number} y - The vertical translation.\r\n     * @param {number} rotation - The angle of rotation in radians.\r\n     * @param {number} scaleX - The horizontal scale.\r\n     * @param {number} scaleY - The vertical scale.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    applyITRS: function (x, y, rotation, scaleX, scaleY)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        var radianSin = Math.sin(rotation);\r\n        var radianCos = Math.cos(rotation);\r\n\r\n        // Translate\r\n        matrix[4] = x;\r\n        matrix[5] = y;\r\n\r\n        // Rotate and Scale\r\n        matrix[0] = radianCos * scaleX;\r\n        matrix[1] = radianSin * scaleX;\r\n        matrix[2] = -radianSin * scaleY;\r\n        matrix[3] = radianCos * scaleY;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes the `x` and `y` values and returns a new position in the `output` vector that is the inverse of\r\n     * the current matrix with its transformation applied.\r\n     * \r\n     * Can be used to translate points from world to local space.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#applyInverse\r\n     * @since 3.12.0\r\n     *\r\n     * @param {number} x - The x position to translate.\r\n     * @param {number} y - The y position to translate.\r\n     * @param {Phaser.Math.Vector2} [output] - A Vector2, or point-like object, to store the results in.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates, inverse-transformed through this matrix.\r\n     */\r\n    applyInverse: function (x, y, output)\r\n    {\r\n        if (output === undefined) { output = new Vector2(); }\r\n\r\n        var matrix = this.matrix;\r\n\r\n        var a = matrix[0];\r\n        var b = matrix[1];\r\n        var c = matrix[2];\r\n        var d = matrix[3];\r\n        var tx = matrix[4];\r\n        var ty = matrix[5];\r\n\r\n        var id = 1 / ((a * d) + (c * -b));\r\n\r\n        output.x = (d * id * x) + (-c * id * y) + (((ty * c) - (tx * d)) * id);\r\n        output.y = (a * id * y) + (-b * id * x) + (((-ty * a) + (tx * b)) * id);\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Returns the X component of this matrix multiplied by the given values.\r\n     * This is the same as `x * a + y * c + e`.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#getX\r\n     * @since 3.12.0\r\n     * \r\n     * @param {number} x - The x value.\r\n     * @param {number} y - The y value.\r\n     *\r\n     * @return {number} The calculated x value.\r\n     */\r\n    getX: function (x, y)\r\n    {\r\n        return x * this.a + y * this.c + this.e;\r\n    },\r\n\r\n    /**\r\n     * Returns the Y component of this matrix multiplied by the given values.\r\n     * This is the same as `x * b + y * d + f`.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#getY\r\n     * @since 3.12.0\r\n     * \r\n     * @param {number} x - The x value.\r\n     * @param {number} y - The y value.\r\n     *\r\n     * @return {number} The calculated y value.\r\n     */\r\n    getY: function (x, y)\r\n    {\r\n        return x * this.b + y * this.d + this.f;\r\n    },\r\n\r\n    /**\r\n     * Returns a string that can be used in a CSS Transform call as a `matrix` property.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#getCSSMatrix\r\n     * @since 3.12.0\r\n     *\r\n     * @return {string} A string containing the CSS Transform matrix values.\r\n     */\r\n    getCSSMatrix: function ()\r\n    {\r\n        var m = this.matrix;\r\n\r\n        return 'matrix(' + m[0] + ',' + m[1] + ',' + m[2] + ',' + m[3] + ',' + m[4] + ',' + m[5] + ')';\r\n    },\r\n\r\n    /**\r\n     * Destroys this Transform Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#destroy\r\n     * @since 3.4.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.matrix = null;\r\n        this.decomposedMatrix = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TransformMatrix;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Vector2","TransformMatrix","initialize","a","b","c","d","tx","ty","undefined","matrix","Float32Array","decomposedMatrix","translateX","translateY","scaleX","scaleY","rotation","get","set","value","e","f","Math","acos","atan","sqrt","loadIdentity","translate","x","y","scale","rotate","angle","sin","cos","multiply","rhs","out","source","localA","localB","localC","localD","localE","localF","sourceA","sourceB","sourceC","sourceD","sourceE","sourceF","destinationMatrix","multiplyWithOffset","src","offsetX","offsetY","otherMatrix","a0","b0","c0","d0","tx0","ty0","a1","b1","c1","d1","tx1","ty1","transform","transformPoint","point","invert","n","copyFrom","copyFromArray","copyToContext","ctx","setToContext","setTransform","copyToArray","decomposeMatrix","sx","sy","applyITRS","radianSin","radianCos","applyInverse","output","id","getX","getY","getCSSMatrix","m","destroy"]
}
