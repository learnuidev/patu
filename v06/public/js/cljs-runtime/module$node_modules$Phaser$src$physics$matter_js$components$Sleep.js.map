{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$components$Sleep.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,kEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9H,IAAIC,aAAeH,OAAA,CAAQ,kEAAR,CA4GnBC,OAAAC,QAAA,CApGYE,CAYRC,kBAAmBA,QAAS,CAACC,KAAD,CAC5B,CACkBC,IAAAA,EAAd,GAAID,KAAJ,GAA2BA,KAA3B,CAAmC,EAAnC,CAEA,KAAAE,KAAAC,eAAA,CAA2BH,KAE3B,OAAO,KALX,CAbQF,CAgCRM,eAAgBA,QAAS,CAACC,KAAD,CAAQC,GAAR,CACzB,CACI,IAAAC,mBAAA,CAAwBF,KAAxB,CACA,KAAAG,iBAAA,CAAsBF,GAAtB,CAEA,OAAO,KAJX,CAjCQR,CAkDRS,mBAAoBA,QAAS,CAACP,KAAD,CAC7B,CACI,GAAIA,KAAJ,CACA,CACI,IAAIS,MAAQ,IAAAA,MAEZZ;YAAAa,GAAA,CAAgB,IAAAR,KAAhB,CAA2B,YAA3B,CAAyC,QAAS,CAACS,KAAD,CAClD,CACIF,KAAAG,KAAA,CAAW,YAAX,CAAyBD,KAAzB,CAAgC,IAAhC,CADJ,CADA,CAHJ,CADA,IAWId,aAAAgB,IAAA,CAAiB,IAAAX,KAAjB,CAA4B,YAA5B,CAGJ,OAAO,KAfX,CAnDQJ,CA+ERU,iBAAkBA,QAAS,CAACR,KAAD,CAC3B,CACI,GAAIA,KAAJ,CACA,CACI,IAAIS,MAAQ,IAAAA,MAEZZ,aAAAa,GAAA,CAAgB,IAAAR,KAAhB,CAA2B,UAA3B,CAAuC,QAAS,CAACS,KAAD,CAChD,CACIF,KAAAG,KAAA,CAAW,UAAX,CAAuBD,KAAvB,CAA8B,IAA9B,CADJ,CADA,CAHJ,CADA,IAWId,aAAAgB,IAAA,CAAiB,IAAAX,KAAjB,CAA4B,UAA5B,CAGJ,OAAO,KAfX,CAhFQJ,CAfkH;",
"sources":["node_modules/Phaser/src/physics/matter-js/components/Sleep.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$components$Sleep\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar MatterEvents = require('../lib/core/Events');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @name Phaser.Physics.Matter.Components.Sleep\r\n * @since 3.0.0\r\n */\r\nvar Sleep = {\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Sleep#setSleepThreshold\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [value=60] - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setSleepThreshold: function (value)\r\n    {\r\n        if (value === undefined) { value = 60; }\r\n\r\n        this.body.sleepThreshold = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Sleep#setSleepEvents\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} start - [description]\r\n     * @param {boolean} end - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setSleepEvents: function (start, end)\r\n    {\r\n        this.setSleepStartEvent(start);\r\n        this.setSleepEndEvent(end);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Sleep#setSleepStartEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setSleepStartEvent: function (value)\r\n    {\r\n        if (value)\r\n        {\r\n            var world = this.world;\r\n\r\n            MatterEvents.on(this.body, 'sleepStart', function (event)\r\n            {\r\n                world.emit('sleepstart', event, this);\r\n            });\r\n        }\r\n        else\r\n        {\r\n            MatterEvents.off(this.body, 'sleepStart');\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Sleep#setSleepEndEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setSleepEndEvent: function (value)\r\n    {\r\n        if (value)\r\n        {\r\n            var world = this.world;\r\n\r\n            MatterEvents.on(this.body, 'sleepEnd', function (event)\r\n            {\r\n                world.emit('sleepend', event, this);\r\n            });\r\n        }\r\n        else\r\n        {\r\n            MatterEvents.off(this.body, 'sleepEnd');\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Sleep;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","MatterEvents","Sleep","setSleepThreshold","value","undefined","body","sleepThreshold","setSleepEvents","start","end","setSleepStartEvent","setSleepEndEvent","world","on","event","emit","off"]
}
