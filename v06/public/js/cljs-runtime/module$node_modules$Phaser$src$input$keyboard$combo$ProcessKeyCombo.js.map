{
"version":3,
"file":"module$node_modules$Phaser$src$input$keyboard$combo$ProcessKeyCombo.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,oEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOhI,IAAIC,gBAAkBH,OAAA,CAAQ,qEAAR,CAoEtBC,OAAAC,QAAA,CAtDsBE,QAAS,CAACC,KAAD,CAAQC,KAAR,CAC/B,CACI,GAAIA,KAAAC,QAAJ,CAEI,MAAO,CAAA,CAGX,KAAIC,aAAe,CAAA,CAAnB,CACIC,WAAa,CAAA,CAEbJ,MAAAK,QAAJ,GAAsBJ,KAAAK,QAAtB,GAIsB,CAAlB,CAAIL,KAAAM,MAAJ,EAA2C,CAA3C,CAAuBN,KAAAO,YAAvB,CAQQR,KAAAS,UARR,EAKoBR,KAAAS,gBALpB,CAK4CT,KAAAO,YAL5C,GAUQJ,UACA,CADa,CAAA,CACb,CAAAD,YAAA,CAAeL,eAAA,CAAgBE,KAAhB,CAAuBC,KAAvB,CAXvB;CAgBIG,UAGA,CAHa,CAAA,CAGb,CAAAD,YAAA,CAAeL,eAAA,CAAgBE,KAAhB,CAAuBC,KAAvB,CAnBnB,CAJJ,CA2BI,EAACG,UAAL,EAAmBH,KAAAU,gBAAnB,GAGIV,KAAAM,MACA,CADc,CACd,CAAAN,KAAAK,QAAA,CAAgBL,KAAAW,SAAA,CAAe,CAAf,CAJpB,CAOIT,aAAJ,GAEIF,KAAAS,gBAEA,CAFwBV,KAAAS,UAExB,CADAR,KAAAC,QACA,CADgB,CAAA,CAChB,CAAAD,KAAAY,YAAA,CAAoBb,KAAAS,UAJxB,CAOA,OAAON,aAlDX,CAtBgI;",
"sources":["node_modules/Phaser/src/input/keyboard/combo/ProcessKeyCombo.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$input$keyboard$combo$ProcessKeyCombo\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar AdvanceKeyCombo = require('./AdvanceKeyCombo');\r\n\r\n/**\r\n * Used internally by the KeyCombo class.\r\n *\r\n * @function Phaser.Input.Keyboard.KeyCombo.ProcessKeyCombo\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {KeyboardEvent} event - The native Keyboard Event.\r\n * @param {Phaser.Input.Keyboard.KeyCombo} combo - The KeyCombo object to be processed.\r\n *\r\n * @return {boolean} `true` if the combo was matched, otherwise `false`.\r\n */\r\nvar ProcessKeyCombo = function (event, combo)\r\n{\r\n    if (combo.matched)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    var comboMatched = false;\r\n    var keyMatched = false;\r\n\r\n    if (event.keyCode === combo.current)\r\n    {\r\n        //  Key was correct\r\n\r\n        if (combo.index > 0 && combo.maxKeyDelay > 0)\r\n        {\r\n            //  We have to check to see if the delay between\r\n            //  the new key and the old one was too long (if enabled)\r\n\r\n            var timeLimit = combo.timeLastMatched + combo.maxKeyDelay;\r\n\r\n            //  Check if they pressed it in time or not\r\n            if (event.timeStamp <= timeLimit)\r\n            {\r\n                keyMatched = true;\r\n                comboMatched = AdvanceKeyCombo(event, combo);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            keyMatched = true;\r\n\r\n            //  We don't check the time for the first key pressed, so just advance it\r\n            comboMatched = AdvanceKeyCombo(event, combo);\r\n        }\r\n    }\r\n\r\n    if (!keyMatched && combo.resetOnWrongKey)\r\n    {\r\n        //  Wrong key was pressed\r\n        combo.index = 0;\r\n        combo.current = combo.keyCodes[0];\r\n    }\r\n\r\n    if (comboMatched)\r\n    {\r\n        combo.timeLastMatched = event.timeStamp;\r\n        combo.matched = true;\r\n        combo.timeMatched = event.timeStamp;\r\n    }\r\n\r\n    return comboMatched;\r\n};\r\n\r\nmodule.exports = ProcessKeyCombo;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","AdvanceKeyCombo","ProcessKeyCombo","event","combo","matched","comboMatched","keyMatched","keyCode","current","index","maxKeyDelay","timeStamp","timeLastMatched","resetOnWrongKey","keyCodes","timeMatched"]
}
