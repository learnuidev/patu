{
"version":3,
"file":"module$node_modules$Phaser$src$utils$array$QuickSelect.js",
"lineCount":2,
"mappings":"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",
"sources":["node_modules/Phaser/src/utils/array/QuickSelect.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$utils$array$QuickSelect\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n//  This is from the quickselect npm package: https://www.npmjs.com/package/quickselect\r\n//  Coded by https://www.npmjs.com/~mourner (Vladimir Agafonkin)\r\n\r\n// https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\r\n\r\n// Floyd-Rivest selection algorithm:\r\n// Rearrange items so that all items in the [left, k] range are smaller than all items in (k, right];\r\n// The k-th element will have the (k - left + 1)th smallest value in [left, right]\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Utils.Array.QuickSelect\r\n * @since 3.0.0\r\n *\r\n * @param {array} arr - [description]\r\n * @param {number} k - [description]\r\n * @param {number} left - [description]\r\n * @param {number} right - [description]\r\n * @param {function} compare - [description]\r\n */\r\nvar QuickSelect = function (arr, k, left, right, compare)\r\n{\r\n    left = left || 0;\r\n    right = right || (arr.length - 1);\r\n    compare = compare || defaultCompare;\r\n\r\n    while (right > left)\r\n    {\r\n        if (right - left > 600)\r\n        {\r\n            var n = right - left + 1;\r\n            var m = k - left + 1;\r\n            var z = Math.log(n);\r\n            var s = 0.5 * Math.exp(2 * z / 3);\r\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\r\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\r\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\r\n\r\n            QuickSelect(arr, k, newLeft, newRight, compare);\r\n        }\r\n\r\n        var t = arr[k];\r\n        var i = left;\r\n        var j = right;\r\n\r\n        swap(arr, left, k);\r\n\r\n        if (compare(arr[right], t) > 0)\r\n        {\r\n            swap(arr, left, right);\r\n        }\r\n\r\n        while (i < j)\r\n        {\r\n            swap(arr, i, j);\r\n\r\n            i++;\r\n            j--;\r\n\r\n            while (compare(arr[i], t) < 0)\r\n            {\r\n                i++;\r\n            }\r\n\r\n            while (compare(arr[j], t) > 0)\r\n            {\r\n                j--;\r\n            }\r\n        }\r\n\r\n        if (compare(arr[left], t) === 0)\r\n        {\r\n            swap(arr, left, j);\r\n        }\r\n        else\r\n        {\r\n            j++;\r\n            swap(arr, j, right);\r\n        }\r\n\r\n        if (j <= k)\r\n        {\r\n            left = j + 1;\r\n        }\r\n\r\n        if (k <= j)\r\n        {\r\n            right = j - 1;\r\n        }\r\n    }\r\n};\r\n\r\nfunction swap (arr, i, j)\r\n{\r\n    var tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n}\r\n\r\nfunction defaultCompare (a, b)\r\n{\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n}\r\n\r\nmodule.exports = QuickSelect;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","swap","arr","i","j","tmp","defaultCompare","a","b","QuickSelect","k","left","right","compare","length","n","m","z","Math","log","s","exp","sd","sqrt","max","newLeft","floor","min","newRight","t"]
}
