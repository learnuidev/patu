shadow$provide.module$node_modules$Phaser$src$tilemaps$parsers$tiled$ParseTilesets=function(global,require,module,exports){var Tileset=require("module$node_modules$Phaser$src$tilemaps$Tileset"),ImageCollection=require("module$node_modules$Phaser$src$tilemaps$ImageCollection"),ParseObject=require("module$node_modules$Phaser$src$tilemaps$parsers$tiled$ParseObject");module.exports=function(json){for(var tilesets=[],imageCollections=[],lastSet=null,stringID,i=0;i<json.tilesets.length;i++){var set=json.tilesets[i];
if(set.source)console.warn("Phaser can't load external tilesets. Use the Embed Tileset button and then export the map again.");else if(set.image){var newSet=new Tileset(set.name,set.firstgid,set.tilewidth,set.tileheight,set.margin,set.spacing);if(1<json.version){if(Array.isArray(set.tiles)){for(var tiles={},props={},t=0;t<set.tiles.length;t++){var tile=set.tiles[t];if(tile.properties){var newPropData={};tile.properties.forEach(function(propData){newPropData[propData.name]=propData.value});props[tile.id]=
newPropData}if(tile.objectgroup&&(tiles[tile.id]={objectgroup:tile.objectgroup},tile.objectgroup.objects)){var parsedObjects2=tile.objectgroup.objects.map(function(obj){return ParseObject(obj)});tiles[tile.id].objectgroup.objects=parsedObjects2}}newSet.tileData=tiles;newSet.tileProperties=props}}else if(set.tileproperties&&(newSet.tileProperties=set.tileproperties),set.tiles)for(stringID in newSet.tileData=set.tiles,newSet.tileData)(tiles=newSet.tileData[stringID].objectgroup)&&tiles.objects&&(tiles=
tiles.objects.map(function(obj){return ParseObject(obj)}),newSet.tileData[stringID].objectgroup.objects=tiles);newSet.updateTileData(set.imagewidth,set.imageheight);tilesets.push(newSet)}else{newSet=new ImageCollection(set.name,set.firstgid,set.tilewidth,set.tileheight,set.margin,set.spacing,set.properties);for(stringID in set.tiles)tiles=set.tiles[stringID].image,props=set.firstgid+parseInt(stringID,10),newSet.addImage(props,tiles);imageCollections.push(newSet)}lastSet&&(lastSet.lastgid=set.firstgid-
1);lastSet=set}return{tilesets:tilesets,imageCollections:imageCollections}}}
//# sourceMappingURL=module$node_modules$Phaser$src$tilemaps$parsers$tiled$ParseTilesets.js.map
