{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$GetTilesWithinWorldXY.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,yEAAA,CAA6F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOrI,IAAIC,eAAiBH,OAAA,CAAQ,mEAAR,CAArB,CACII,aAAeJ,OAAA,CAAQ,iEAAR,CADnB,CAEIK,aAAeL,OAAA,CAAQ,iEAAR,CAmCnBC,OAAAC,QAAA,CAb4BI,QAAS,CAACC,MAAD,CAASC,MAAT,CAAiBC,KAAjB,CAAwBC,MAAxB,CAAgCC,gBAAhC,CAAkDC,MAAlD,CAA0DC,KAA1D,CACrC,CAEI,IAAIC,OAASV,YAAA,CAAaG,MAAb;AAAqB,CAAA,CAArB,CAA2BK,MAA3B,CAAmCC,KAAnC,CAAb,CACIE,OAASV,YAAA,CAAaG,MAAb,CAAqB,CAAA,CAArB,CAA2BI,MAA3B,CAAmCC,KAAnC,CAGTG,OAAAA,CAAOC,IAAAC,KAAA,CAAUd,YAAA,CAAaG,MAAb,CAAsBE,KAAtB,CAA6B,CAAA,CAA7B,CAAoCG,MAApC,CAA4CC,KAA5C,CAAV,CACPM,OAAAA,CAAOF,IAAAC,KAAA,CAAUb,YAAA,CAAaG,MAAb,CAAsBE,MAAtB,CAA8B,CAAA,CAA9B,CAAqCE,MAArC,CAA6CC,KAA7C,CAAV,CAEX,OAAOV,eAAA,CAAeW,MAAf,CAAuBC,MAAvB,CAA+BC,MAA/B,CAAsCF,MAAtC,CAA8CK,MAA9C,CAAqDJ,MAArD,CAA6DJ,gBAA7D,CAA+EE,KAA/E,CATX,CAhCqI;",
"sources":["node_modules/Phaser/src/tilemaps/components/GetTilesWithinWorldXY.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$GetTilesWithinWorldXY\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar WorldToTileX = require('./WorldToTileX');\r\nvar WorldToTileY = require('./WorldToTileY');\r\n\r\n/**\r\n * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTilesWithinWorldXY\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n * @param {number} width - The width of the area.\r\n * @param {number} height - The height of the area.\r\n * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {Phaser.Tilemaps.Tile[]} Array of Tile objects.\r\n */\r\nvar GetTilesWithinWorldXY = function (worldX, worldY, width, height, filteringOptions, camera, layer)\r\n{\r\n    // Top left corner of the rect, rounded down to include partial tiles\r\n    var xStart = WorldToTileX(worldX, true, camera, layer);\r\n    var yStart = WorldToTileY(worldY, true, camera, layer);\r\n\r\n    // Bottom right corner of the rect, rounded up to include partial tiles\r\n    var xEnd = Math.ceil(WorldToTileX(worldX + width, false, camera, layer));\r\n    var yEnd = Math.ceil(WorldToTileY(worldY + height, false, camera, layer));\r\n\r\n    return GetTilesWithin(xStart, yStart, xEnd - xStart, yEnd - yStart, filteringOptions, layer);\r\n};\r\n\r\nmodule.exports = GetTilesWithinWorldXY;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetTilesWithin","WorldToTileX","WorldToTileY","GetTilesWithinWorldXY","worldX","worldY","width","height","filteringOptions","camera","layer","xStart","yStart","xEnd","Math","ceil","yEnd"]
}
