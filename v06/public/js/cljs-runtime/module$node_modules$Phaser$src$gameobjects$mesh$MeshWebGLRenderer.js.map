{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$mesh$MeshWebGLRenderer.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/mesh/MeshWebGLRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$mesh$MeshWebGLRenderer\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Mesh#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Mesh} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar MeshWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var pipeline = this.pipeline;\r\n\r\n    renderer.setPipeline(pipeline, src);\r\n\r\n    var camMatrix = pipeline._tempMatrix1;\r\n    var spriteMatrix = pipeline._tempMatrix2;\r\n    var calcMatrix = pipeline._tempMatrix3;\r\n\r\n    spriteMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\r\n\r\n    camMatrix.copyFrom(camera.matrix);\r\n\r\n    if (parentMatrix)\r\n    {\r\n        //  Multiply the camera by the parent matrix\r\n        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);\r\n\r\n        //  Undo the camera scroll\r\n        spriteMatrix.e = src.x;\r\n        spriteMatrix.f = src.y;\r\n\r\n        //  Multiply by the Sprite matrix, store result in calcMatrix\r\n        camMatrix.multiply(spriteMatrix, calcMatrix);\r\n    }\r\n    else\r\n    {\r\n        spriteMatrix.e -= camera.scrollX * src.scrollFactorX;\r\n        spriteMatrix.f -= camera.scrollY * src.scrollFactorY;\r\n\r\n        //  Multiply by the Sprite matrix, store result in calcMatrix\r\n        camMatrix.multiply(spriteMatrix, calcMatrix);\r\n    }\r\n\r\n    var frame = src.frame;\r\n    var texture = frame.glTexture;\r\n\r\n    var vertices = src.vertices;\r\n    var uvs = src.uv;\r\n    var colors = src.colors;\r\n    var alphas = src.alphas;\r\n\r\n    var meshVerticesLength = vertices.length;\r\n    var vertexCount = Math.floor(meshVerticesLength * 0.5);\r\n\r\n    if (pipeline.vertexCount + vertexCount >= pipeline.vertexCapacity)\r\n    {\r\n        pipeline.flush();\r\n    }\r\n\r\n    pipeline.setTexture2D(texture, 0);\r\n\r\n    var vertexViewF32 = pipeline.vertexViewF32;\r\n    var vertexViewU32 = pipeline.vertexViewU32;\r\n\r\n    var vertexOffset = (pipeline.vertexCount * pipeline.vertexComponentCount) - 1;\r\n\r\n    var colorIndex = 0;\r\n    var tintEffect = src.tintFill;\r\n\r\n    for (var i = 0; i < meshVerticesLength; i += 2)\r\n    {\r\n        var x = vertices[i + 0];\r\n        var y = vertices[i + 1];\r\n\r\n        var tx = x * calcMatrix.a + y * calcMatrix.c + calcMatrix.e;\r\n        var ty = x * calcMatrix.b + y * calcMatrix.d + calcMatrix.f;\r\n\r\n        if (camera.roundPixels)\r\n        {\r\n            tx |= 0;\r\n            ty |= 0;\r\n        }\r\n\r\n        vertexViewF32[++vertexOffset] = tx;\r\n        vertexViewF32[++vertexOffset] = ty;\r\n        vertexViewF32[++vertexOffset] = uvs[i + 0];\r\n        vertexViewF32[++vertexOffset] = uvs[i + 1];\r\n        vertexViewF32[++vertexOffset] = tintEffect;\r\n        vertexViewU32[++vertexOffset] = Utils.getTintAppendFloatAlpha(colors[colorIndex], camera.alpha * alphas[colorIndex]);\r\n\r\n        colorIndex++;\r\n    }\r\n\r\n    pipeline.vertexCount += vertexCount;\r\n};\r\n\r\nmodule.exports = MeshWebGLRenderer;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Utils","MeshWebGLRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","pipeline","setPipeline","camMatrix","_tempMatrix1","spriteMatrix","_tempMatrix2","calcMatrix","_tempMatrix3","applyITRS","x","y","rotation","scaleX","scaleY","copyFrom","matrix","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","multiply","texture","frame","glTexture","vertices","uvs","uv","colors","alphas","meshVerticesLength","length","vertexCount","Math","floor","vertexCapacity","flush","setTexture2D","vertexViewF32","vertexViewU32","vertexOffset","vertexComponentCount","colorIndex","tintEffect","tintFill","i","tx","a","c","ty","b","d","roundPixels","getTintAppendFloatAlpha","alpha"]
}
