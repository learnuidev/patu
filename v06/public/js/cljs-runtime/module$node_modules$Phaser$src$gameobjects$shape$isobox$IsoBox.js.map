{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$shape$isobox$IsoBox.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,+DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOvHC,MAAAA,CAAeH,OAAA,CAAQ,sEAAR,CACfI,QAAAA,CAAQJ,OAAA,CAAQ,4CAAR,CACZ,KAAIK,MAAQL,OAAA,CAAQ,wDAAR,CAiCRM,QAAAA,CAAS,IAAIF,OAAJ,CAAU,CAEnBG,QAASF,KAFU,CAInBG,OAAQ,CACJL,MADI,CAJW,CAQnBM,WAEAH,QAAgB,CAACI,KAAD,CAAQC,CAAR,CAAWC,CAAX,CAAcC,IAAd,CAAoBC,MAApB,CAA4BC,OAA5B,CAAqCC,QAArC,CAA+CC,SAA/C,CAChB,CACcC,IAAAA,EAAV,GAAIP,CAAJ,GAAuBA,CAAvB,CAA2B,CAA3B,CACUO,KAAAA,EAAV,GAAIN,CAAJ,GAAuBA,CAAvB,CAA2B,CAA3B,CACaM,KAAAA,EAAb;AAAIL,IAAJ,GAA0BA,IAA1B,CAAiC,EAAjC,CACeK,KAAAA,EAAf,GAAIJ,MAAJ,GAA4BA,MAA5B,CAAqC,EAArC,CACgBI,KAAAA,EAAhB,GAAIH,OAAJ,GAA6BA,OAA7B,CAAuC,QAAvC,CACiBG,KAAAA,EAAjB,GAAIF,QAAJ,GAA8BA,QAA9B,CAAyC,QAAzC,CACkBE,KAAAA,EAAlB,GAAID,SAAJ,GAA+BA,SAA/B,CAA2C,QAA3C,CAEAZ,MAAAc,KAAA,CAAW,IAAX,CAAiBT,KAAjB,CAAwB,QAAxB,CAAkC,IAAlC,CAUA,KAAAU,WAAA,CAAkB,CASlB,KAAAL,QAAA,CAAeA,OASf,KAAAC,SAAA,CAAgBA,QAShB,KAAAC,UAAA,CAAiBA,SAgCjB,KAAAI,SAAA,CAFA,IAAAC,UAEA,CAZA,IAAAC,SAYA,CAtBA,IAAAC,QAsBA,CAtBe,CAAA,CAwBf,KAAAC,YAAA,CAAiBd,CAAjB,CAAoBC,CAApB,CACA,KAAAc,QAAA,CAAab,IAAb,CAAmBC,MAAnB,CAEA,KAAAa,oBAAA,EAnFJ,CAXmB,CA4GnBC,cAAeA,QAAS,CAACC,KAAD,CACxB,CACI,IAAAT,WAAA,CAAkBS,KAElB,OAAO,KAHX,CA7GmB,CAgInBC,SAAUA,QAAS,CAACN,OAAD;AAAUD,QAAV,CAAoBD,SAApB,CACnB,CACoBJ,IAAAA,EAAhB,GAAIM,OAAJ,GAA6BA,OAA7B,CAAuC,CAAA,CAAvC,CACiBN,KAAAA,EAAjB,GAAIK,QAAJ,GAA8BA,QAA9B,CAAyC,CAAA,CAAzC,CACkBL,KAAAA,EAAlB,GAAII,SAAJ,GAA+BA,SAA/B,CAA2C,CAAA,CAA3C,CAEA,KAAAE,QAAA,CAAeA,OACf,KAAAD,SAAA,CAAgBA,QAChB,KAAAD,UAAA,CAAiBA,SAEjB,OAAO,KATX,CAjImB,CA0JnBS,aAAcA,QAAS,CAAChB,OAAD,CAAUC,QAAV,CAAoBC,SAApB,CACvB,CACI,IAAAF,QAAA,CAAeA,OACf,KAAAC,SAAA,CAAgBA,QAChB,KAAAC,UAAA,CAAiBA,SAEjB,KAAAI,SAAA,CAAgB,CAAA,CAEhB,OAAO,KAPX,CA3JmB,CAAV,CAuKbpB,OAAAC,QAAA,CAAiBI,OAjN0G;",
"sources":["node_modules/Phaser/src/gameobjects/shape/isobox/IsoBox.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$shape$isobox$IsoBox\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar IsoBoxRender = require('./IsoBoxRender');\r\nvar Class = require('../../../utils/Class');\r\nvar Shape = require('../Shape');\r\n\r\n/**\r\n * @classdesc\r\n * The IsoBox Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only fill colors and cannot be stroked.\r\n * \r\n * An IsoBox is an 'isometric' rectangle. Each face of it has a different fill color. You can set\r\n * the color of the top, left and right faces of the rectangle respectively. You can also choose\r\n * which of the faces are rendered via the `showTop`, `showLeft` and `showRight` properties.\r\n * \r\n * You cannot view an IsoBox from under-neath, however you can change the 'angle' by setting\r\n * the `projection` property.\r\n *\r\n * @class IsoBox\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [size=48] - The width of the iso box in pixels. The left and right faces will be exactly half this value.\r\n * @param {number} [height=32] - The height of the iso box. The left and right faces will be this tall. The overall height of the isobox will be this value plus half the `size` value.\r\n * @param {number} [fillTop=0xeeeeee] - The fill color of the top face of the iso box.\r\n * @param {number} [fillLeft=0x999999] - The fill color of the left face of the iso box.\r\n * @param {number} [fillRight=0xcccccc] - The fill color of the right face of the iso box.\r\n */\r\nvar IsoBox = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        IsoBoxRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function IsoBox (scene, x, y, size, height, fillTop, fillLeft, fillRight)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (size === undefined) { size = 48; }\r\n        if (height === undefined) { height = 32; }\r\n        if (fillTop === undefined) { fillTop = 0xeeeeee; }\r\n        if (fillLeft === undefined) { fillLeft = 0x999999; }\r\n        if (fillRight === undefined) { fillRight = 0xcccccc; }\r\n\r\n        Shape.call(this, scene, 'IsoBox', null);\r\n\r\n        /**\r\n         * The projection level of the iso box. Change this to change the 'angle' at which you are looking at the box.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#projection\r\n         * @type {integer}\r\n         * @default 4\r\n         * @since 3.13.0\r\n         */\r\n        this.projection = 4;\r\n\r\n        /**\r\n         * The color used to fill in the top of the iso box.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#fillTop\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.fillTop = fillTop;\r\n\r\n        /**\r\n         * The color used to fill in the left-facing side of the iso box.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#fillLeft\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.fillLeft = fillLeft;\r\n\r\n        /**\r\n         * The color used to fill in the right-facing side of the iso box.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#fillRight\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.fillRight = fillRight;\r\n\r\n        /**\r\n         * Controls if the top-face of the iso box be rendered.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#showTop\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.13.0\r\n         */\r\n        this.showTop = true;\r\n\r\n        /**\r\n         * Controls if the left-face of the iso box be rendered.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#showLeft\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.13.0\r\n         */\r\n        this.showLeft = true;\r\n\r\n        /**\r\n         * Controls if the right-face of the iso box be rendered.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#showRight\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.13.0\r\n         */\r\n        this.showRight = true;\r\n\r\n        this.isFilled = true;\r\n\r\n        this.setPosition(x, y);\r\n        this.setSize(size, height);\r\n\r\n        this.updateDisplayOrigin();\r\n    },\r\n\r\n    /**\r\n     * Sets the projection level of the iso box. Change this to change the 'angle' at which you are looking at the box.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.IsoBox#setProjection\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} value - The value to set the projection to.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setProjection: function (value)\r\n    {\r\n        this.projection = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets which faces of the iso box will be rendered.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.IsoBox#setFaces\r\n     * @since 3.13.0\r\n     * \r\n     * @param {boolean} [showTop=true] - Show the top-face of the iso box.\r\n     * @param {boolean} [showLeft=true] - Show the left-face of the iso box.\r\n     * @param {boolean} [showRight=true] - Show the right-face of the iso box.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setFaces: function (showTop, showLeft, showRight)\r\n    {\r\n        if (showTop === undefined) { showTop = true; }\r\n        if (showLeft === undefined) { showLeft = true; }\r\n        if (showRight === undefined) { showRight = true; }\r\n\r\n        this.showTop = showTop;\r\n        this.showLeft = showLeft;\r\n        this.showRight = showRight;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the fill colors for each face of the iso box.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.IsoBox#setFillStyle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} [fillTop] - The color used to fill the top of the iso box.\r\n     * @param {number} [fillLeft] - The color used to fill in the left-facing side of the iso box.\r\n     * @param {number} [fillRight] - The color used to fill in the right-facing side of the iso box.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setFillStyle: function (fillTop, fillLeft, fillRight)\r\n    {\r\n        this.fillTop = fillTop;\r\n        this.fillLeft = fillLeft;\r\n        this.fillRight = fillRight;\r\n\r\n        this.isFilled = true;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = IsoBox;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","IsoBoxRender","Class","Shape","IsoBox","Extends","Mixins","initialize","scene","x","y","size","height","fillTop","fillLeft","fillRight","undefined","call","projection","isFilled","showRight","showLeft","showTop","setPosition","setSize","updateDisplayOrigin","setProjection","value","setFaces","setFillStyle"]
}
