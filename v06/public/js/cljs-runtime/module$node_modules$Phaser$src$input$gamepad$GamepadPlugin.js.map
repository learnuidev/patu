{
"version":3,
"file":"module$node_modules$Phaser$src$input$gamepad$GamepadPlugin.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/Phaser/src/input/gamepad/GamepadPlugin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$input$gamepad$GamepadPlugin\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Gamepad = require('./Gamepad');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar InputPluginCache = require('../InputPluginCache');\r\n\r\n/**\r\n * @typedef {object} Pad\r\n *\r\n * @property {string} id - The ID of the Gamepad.\r\n * @property {integer} index - The index of the Gamepad.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The Gamepad Plugin is an input plugin that belongs to the Scene-owned Input system.\r\n *\r\n * Its role is to listen for native DOM Gamepad Events and then process them.\r\n *\r\n * You do not need to create this class directly, the Input system will create an instance of it automatically.\r\n *\r\n * You can access it from within a Scene using `this.input.gamepad`.\r\n *\r\n * To listen for a gamepad being connected:\r\n *\r\n * ```javascript\r\n * this.input.gamepad.once('connected', function (pad) {\r\n *     //   'pad' is a reference to the gamepad that was just connected\r\n * });\r\n * ```\r\n *\r\n * Note that the browser may require you to press a button on a gamepad before it will allow you to access it,\r\n * this is for security reasons. However, it may also trust the page already, in which case you won't get the\r\n * 'connected' event and instead should check `GamepadPlugin.total` to see if it thinks there are any gamepads\r\n * already connected.\r\n *\r\n * Once you have received the connected event, or polled the gamepads and found them enabled, you can access\r\n * them via the built-in properties `GamepadPlugin.pad1` to `pad4`, for up to 4 game pads. With a reference\r\n * to the gamepads you can poll its buttons and axis sticks. See the properties and methods available on\r\n * the `Gamepad` class for more details.\r\n *\r\n * For more information about Gamepad support in browsers see the following resources:\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\r\n * https://www.smashingmagazine.com/2015/11/gamepad-api-in-web-games/\r\n * http://html5gamepad.com/\r\n *\r\n * @class GamepadPlugin\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberOf Phaser.Input.Gamepad\r\n * @constructor\r\n * @since 3.10.0\r\n *\r\n * @param {Phaser.Input.InputPlugin} sceneInputPlugin - A reference to the Scene Input Plugin that the KeyboardPlugin belongs to.\r\n */\r\nvar GamepadPlugin = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function GamepadPlugin (sceneInputPlugin)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the Scene that this Input Plugin is responsible for.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.10.0\r\n         */\r\n        this.scene = sceneInputPlugin.scene;\r\n\r\n        /**\r\n         * A reference to the Scene Systems Settings.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#settings\r\n         * @type {Phaser.Scenes.Settings.Object}\r\n         * @since 3.10.0\r\n         */\r\n        this.settings = this.scene.sys.settings;\r\n\r\n        /**\r\n         * A reference to the Scene Input Plugin that created this Keyboard Plugin.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#sceneInputPlugin\r\n         * @type {Phaser.Input.InputPlugin}\r\n         * @since 3.10.0\r\n         */\r\n        this.sceneInputPlugin = sceneInputPlugin;\r\n\r\n        /**\r\n         * A boolean that controls if the Gamepad Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.10.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * The Gamepad Event target, as defined in the Game Config.\r\n         * Typically the browser window, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#target\r\n         * @type {any}\r\n         * @since 3.10.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * An array of the connected Gamepads.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#gamepads\r\n         * @type {Phaser.Input.Gamepad.Gamepad[]}\r\n         * @default []\r\n         * @since 3.10.0\r\n         */\r\n        this.gamepads = [];\r\n\r\n        /**\r\n         * An internal event queue.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#queue\r\n         * @type {GamepadEvent[]}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this.queue = [];\r\n\r\n        /**\r\n         * Internal event handler.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#onGamepadHandler\r\n         * @type {function}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this.onGamepadHandler;\r\n\r\n        /**\r\n         * Internal Gamepad reference.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#_pad1\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this._pad1;\r\n\r\n        /**\r\n         * Internal Gamepad reference.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#_pad2\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this._pad2;\r\n\r\n        /**\r\n         * Internal Gamepad reference.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#_pad3\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this._pad3;\r\n\r\n        /**\r\n         * Internal Gamepad reference.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#_pad4\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this._pad4;\r\n\r\n        sceneInputPlugin.pluginEvents.once('boot', this.boot, this);\r\n        sceneInputPlugin.pluginEvents.on('start', this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#boot\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var game = this.scene.sys.game;\r\n        var settings = this.settings.input;\r\n        var config = game.config;\r\n\r\n        this.enabled = GetValue(settings, 'gamepad', config.inputGamepad) && game.device.input.gamepads;\r\n        this.target = GetValue(settings, 'gamepad.target', config.inputGamepadEventTarget);\r\n\r\n        this.sceneInputPlugin.pluginEvents.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#start\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (this.enabled)\r\n        {\r\n            this.startListeners();\r\n        }\r\n\r\n        this.sceneInputPlugin.pluginEvents.once('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if both this plugin and the Scene to which it belongs is active.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#isActive\r\n     * @since 3.10.0\r\n     *\r\n     * @return {boolean} `true` if the plugin and the Scene it belongs to is active.\r\n     */\r\n    isActive: function ()\r\n    {\r\n        return (this.enabled && this.scene.sys.isActive());\r\n    },\r\n\r\n    /**\r\n     * Starts the Gamepad Event listeners running.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#startListeners\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var _this = this;\r\n        var target = this.target;\r\n\r\n        var handler = function (event)\r\n        {\r\n            // console.log(event);\r\n\r\n            if (event.defaultPrevented || !_this.isActive())\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n\r\n            _this.refreshPads();\r\n\r\n            _this.queue.push(event);\r\n        };\r\n\r\n        this.onGamepadHandler = handler;\r\n\r\n        target.addEventListener('gamepadconnected', handler, false);\r\n        target.addEventListener('gamepaddisconnected', handler, false);\r\n\r\n        //  FF also supports gamepadbuttondown, gamepadbuttonup and gamepadaxismove but\r\n        //  nothing else does, and we can get those values via the gamepads anyway, so we will\r\n        //  until more browsers support this\r\n\r\n        //  Finally, listen for an update event from the Input Plugin\r\n        this.sceneInputPlugin.pluginEvents.on('update', this.update, this);\r\n    },\r\n\r\n    /**\r\n     * Stops the Gamepad Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#stopListeners\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        this.target.removeEventListener('gamepadconnected', this.onGamepadHandler);\r\n        this.target.removeEventListener('gamepaddisconnected', this.onGamepadHandler);\r\n\r\n        this.sceneInputPlugin.pluginEvents.off('update', this.update);\r\n    },\r\n\r\n    /**\r\n     * Disconnects all current Gamepads.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#disconnectAll\r\n     * @since 3.10.0\r\n     */\r\n    disconnectAll: function ()\r\n    {\r\n        for (var i = 0; i < this.gamepads.length; i++)\r\n        {\r\n            this.gamepads.connected = false;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Refreshes the list of connected Gamepads.\r\n     *\r\n     * This is called automatically when a gamepad is connected or disconnected,\r\n     * and during the update loop.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#refreshPads\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    refreshPads: function ()\r\n    {\r\n        var connectedPads = navigator.getGamepads();\r\n\r\n        if (!connectedPads)\r\n        {\r\n            this.disconnectAll();\r\n        }\r\n        else\r\n        {\r\n            var currentPads = this.gamepads;\r\n\r\n            for (var i = 0; i < connectedPads.length; i++)\r\n            {\r\n                var livePad = connectedPads[i];\r\n\r\n                //  Because sometimes they're null (yes, really)\r\n                if (!livePad)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                var id = livePad.id;\r\n                var index = livePad.index;\r\n                var currentPad = currentPads[index];\r\n\r\n                if (!currentPad)\r\n                {\r\n                    //  A new Gamepad, not currently stored locally\r\n                    var newPad = new Gamepad(this, livePad);\r\n\r\n                    currentPads[index] = newPad;\r\n\r\n                    if (!this._pad1)\r\n                    {\r\n                        this._pad1 = newPad;\r\n                    }\r\n                    else if (!this._pad2)\r\n                    {\r\n                        this._pad2 = newPad;\r\n                    }\r\n                    else if (!this._pad3)\r\n                    {\r\n                        this._pad3 = newPad;\r\n                    }\r\n                    else if (!this._pad4)\r\n                    {\r\n                        this._pad4 = newPad;\r\n                    }\r\n                }\r\n                else if (currentPad.id !== id)\r\n                {\r\n                    //  A new Gamepad with a different vendor string, but it has got the same index as an old one\r\n                    currentPad.destroy();\r\n\r\n                    currentPads[index] = new Gamepad(this, livePad);\r\n                }\r\n                else\r\n                {\r\n                    //  If neither of these, it's a pad we've already got, so update it\r\n                    currentPad.update(livePad);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns an array of all currently connected Gamepads.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#getAll\r\n     * @since 3.10.0\r\n     *\r\n     * @return {Phaser.Input.Gamepad.Gamepad[]} An array of all currently connected Gamepads.\r\n     */\r\n    getAll: function ()\r\n    {\r\n        var out = [];\r\n        var pads = this.gamepads;\r\n\r\n        for (var i = 0; i < pads.length; i++)\r\n        {\r\n            if (pads[i])\r\n            {\r\n                out.push(pads[i]);\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Looks-up a single Gamepad based on the given index value.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#getPad\r\n     * @since 3.10.0\r\n     *\r\n     * @param {number} index - The index of the Gamepad to get.\r\n     *\r\n     * @return {Phaser.Input.Gamepad.Gamepad} The Gamepad matching the given index, or undefined if none were found.\r\n     */\r\n    getPad: function (index)\r\n    {\r\n        var pads = this.gamepads;\r\n\r\n        for (var i = 0; i < pads.length; i++)\r\n        {\r\n            if (pads[i] && pads[i].index === index)\r\n            {\r\n                return pads[i];\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The internal update loop. Refreshes all connected gamepads and processes their events.\r\n     *\r\n     * Called automatically by the Input Manager, invoked from the Game step.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#update\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    update: function ()\r\n    {\r\n        if (!this.enabled)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.refreshPads();\r\n\r\n        var len = this.queue.length;\r\n\r\n        if (len === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var queue = this.queue.splice(0, len);\r\n\r\n        //  Process the event queue, dispatching all of the events that have stored up\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            var event = queue[i];\r\n            var pad = this.getPad(event.gamepad.index);\r\n\r\n            if (event.type === 'gamepadconnected')\r\n            {\r\n                this.emit('connected', pad, event);\r\n            }\r\n            else if (event.type === 'gamepaddisconnected')\r\n            {\r\n                this.emit('disconnected', pad, event);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Shuts the Gamepad Plugin down.\r\n     * All this does is remove any listeners bound to it.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#shutdown\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.disconnectAll();\r\n\r\n        this.removeAllListeners();\r\n    },\r\n\r\n    /**\r\n     * Destroys this Gamepad Plugin, disconnecting all Gamepads and releasing internal references.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#destroy\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        for (var i = 0; i < this.gamepads.length; i++)\r\n        {\r\n            if (this.gamepads[i])\r\n            {\r\n                this.gamepads[i].destroy();\r\n            }\r\n        }\r\n\r\n        this.gamepads = [];\r\n\r\n        this.scene = null;\r\n        this.settings = null;\r\n        this.sceneInputPlugin = null;\r\n        this.target = null;\r\n    },\r\n\r\n    /**\r\n     * The total number of connected game pads.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#total\r\n     * @type {integer}\r\n     * @since 3.10.0\r\n     */\r\n    total: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.gamepads.length;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * A reference to the first connected Gamepad.\r\n     *\r\n     * This will be undefined if either no pads are connected, or the browser\r\n     * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n     * is plugged in, but hasn't yet had any buttons pressed on it.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#pad1\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.10.0\r\n     */\r\n    pad1: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._pad1;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * A reference to the second connected Gamepad.\r\n     *\r\n     * This will be undefined if either no pads are connected, or the browser\r\n     * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n     * is plugged in, but hasn't yet had any buttons pressed on it.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#pad2\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.10.0\r\n     */\r\n    pad2: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._pad2;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * A reference to the third connected Gamepad.\r\n     *\r\n     * This will be undefined if either no pads are connected, or the browser\r\n     * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n     * is plugged in, but hasn't yet had any buttons pressed on it.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#pad3\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.10.0\r\n     */\r\n    pad3: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._pad3;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * A reference to the fourth connected Gamepad.\r\n     *\r\n     * This will be undefined if either no pads are connected, or the browser\r\n     * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n     * is plugged in, but hasn't yet had any buttons pressed on it.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#pad4\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.10.0\r\n     */\r\n    pad4: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._pad4;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * An instance of the Gamepad Plugin class, if enabled via the `input.gamepad` Scene or Game Config property.\r\n * Use this to create access Gamepads connected to the browser and respond to gamepad buttons.\r\n *\r\n * @name Phaser.Input.InputPlugin#gamepad\r\n * @type {?Phaser.Input.Gamepad.GamepadPlugin}\r\n * @since 3.10.0\r\n */\r\nInputPluginCache.register('GamepadPlugin', GamepadPlugin, 'gamepad', 'gamepad', 'inputGamepad');\r\n\r\nmodule.exports = GamepadPlugin;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","EventEmitter","Gamepad","GetValue","InputPluginCache","GamepadPlugin","Extends","initialize","sceneInputPlugin","call","scene","settings","sys","enabled","gamepads","queue","pluginEvents","once","boot","on","start","game","input","config","inputGamepad","device","target","inputGamepadEventTarget","destroy","startListeners","shutdown","isActive","_this","handler","event","defaultPrevented","refreshPads","push","onGamepadHandler","addEventListener","update","stopListeners","removeEventListener","off","disconnectAll","i","length","connected","connectedPads","navigator","getGamepads","currentPads","livePad","id","index","currentPad","newPad","_pad1","_pad2","_pad3","_pad4","getAll","out","pads","getPad","len","splice","pad","gamepad","type","emit","removeAllListeners","total","get","pad1","pad2","pad3","pad4","register"]
}
