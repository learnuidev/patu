{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$Fill.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOpH,IAAIC,eAAiBH,OAAA,CAAQ,mEAAR,CAArB,CACII,qBAAuBJ,OAAA,CAAQ,yEAAR,CAD3B,CAEIK,iBAAmBL,OAAA,CAAQ,qEAAR,CAuCvBC,OAAAC,QAAA,CApBWI,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAeC,KAAf,CAAsBC,KAAtB,CAA6BC,MAA7B,CAAqCC,gBAArC,CAAuDC,KAAvD,CACpB,CAKI,IAJA,IAAIC;AAA4D,EAA5DA,GAAoBD,KAAAE,eAAAC,QAAA,CAA6BT,KAA7B,CAAxB,CAEIU,MAAQd,cAAA,CAAeK,KAAf,CAAsBC,KAAtB,CAA6BC,KAA7B,CAAoCC,MAApC,CAA4C,IAA5C,CAAkDE,KAAlD,CAFZ,CAISK,EAAI,CAAb,CAAgBA,CAAhB,CAAoBD,KAAAE,OAApB,CAAkCD,CAAA,EAAlC,CAEID,KAAA,CAAMC,CAAN,CAAAX,MAEA,CAFiBA,KAEjB,CAAAF,gBAAA,CAAiBY,KAAA,CAAMC,CAAN,CAAjB,CAA2BJ,gBAA3B,CAGAF,iBAAJ,EAGIR,oBAAA,CAAqBI,KAArB,CAA6B,CAA7B,CAAgCC,KAAhC,CAAwC,CAAxC,CAA2CC,KAA3C,CAAmD,CAAnD,CAAsDC,MAAtD,CAA+D,CAA/D,CAAkEE,KAAlE,CAfR,CA7BoH;",
"sources":["node_modules/Phaser/src/tilemaps/components/Fill.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$Fill\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\nvar SetTileCollision = require('./SetTileCollision');\r\n\r\n/**\r\n * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n * Collision information in the region will be recalculated.\r\n *\r\n * @function Phaser.Tilemaps.Components.Fill\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} index - The tile index to fill the area with.\r\n * @param {integer} tileX - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} tileY - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} width - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} height - How many tiles tall from the `tileY` index the area will be.\r\n * @param {boolean} recalculateFaces - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The tile layer to use. If not given the current layer is used.\r\n */\r\nvar Fill = function (index, tileX, tileY, width, height, recalculateFaces, layer)\r\n{\r\n    var doesIndexCollide = (layer.collideIndexes.indexOf(index) !== -1);\r\n\r\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\r\n\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        tiles[i].index = index;\r\n\r\n        SetTileCollision(tiles[i], doesIndexCollide);\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        // Recalculate the faces within the area and neighboring tiles\r\n        CalculateFacesWithin(tileX - 1, tileY - 1, width + 2, height + 2, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = Fill;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GetTilesWithin","CalculateFacesWithin","SetTileCollision","Fill","index","tileX","tileY","width","height","recalculateFaces","layer","doesIndexCollide","collideIndexes","indexOf","tiles","i","length"]
}
