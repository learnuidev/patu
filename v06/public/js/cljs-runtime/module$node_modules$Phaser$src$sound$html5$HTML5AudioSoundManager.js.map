{
"version":3,
"file":"module$node_modules$Phaser$src$sound$html5$HTML5AudioSoundManager.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/sound/html5/HTML5AudioSoundManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$sound$html5$HTML5AudioSoundManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar BaseSoundManager = require('../BaseSoundManager');\r\nvar Class = require('../../utils/Class');\r\nvar HTML5AudioSound = require('./HTML5AudioSound');\r\n\r\n/**\r\n * HTML5 Audio implementation of the Sound Manager.\r\n *\r\n * @class HTML5AudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberOf Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\r\nvar HTML5AudioSoundManager = new Class({\r\n\r\n    Extends: BaseSoundManager,\r\n\r\n    initialize:\r\n\r\n    function HTML5AudioSoundManager (game)\r\n    {\r\n        /**\r\n         * Flag indicating whether if there are no idle instances of HTML5 Audio tag,\r\n         * for any particular sound, if one of the used tags should be hijacked and used\r\n         * for succeeding playback or if succeeding Phaser.Sound.HTML5AudioSound#play\r\n         * call should be ignored.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#override\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.override = true;\r\n\r\n        /**\r\n         * Value representing time difference, in seconds, between calling\r\n         * play method on an audio tag and when it actually starts playing.\r\n         * It is used to achieve more accurate delayed sound playback.\r\n         *\r\n         * You might need to tweak this value to get the desired results\r\n         * since audio play delay varies depending on the browser/platform.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#audioPlayDelay\r\n         * @type {number}\r\n         * @default 0.1\r\n         * @since 3.0.0\r\n         */\r\n        this.audioPlayDelay = 0.1;\r\n\r\n        /**\r\n         * A value by which we should offset the loop end marker of the\r\n         * looping sound to compensate for lag, caused by changing audio\r\n         * tag playback position, in order to achieve gapless looping.\r\n         *\r\n         * You might need to tweak this value to get the desired results\r\n         * since loop lag varies depending on the browser/platform.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#loopEndOffset\r\n         * @type {number}\r\n         * @default 0.05\r\n         * @since 3.0.0\r\n         */\r\n        this.loopEndOffset = 0.05;\r\n\r\n        /**\r\n         * An array for keeping track of all the sounds\r\n         * that were paused when game lost focus.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#onBlurPausedSounds\r\n         * @type {Phaser.Sound.HTML5AudioSound[]}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.onBlurPausedSounds = [];\r\n\r\n        this.locked = 'ontouchstart' in window;\r\n\r\n        /**\r\n         * A queue of all actions performed on sound objects while audio was locked.\r\n         * Once the audio gets unlocked, after an explicit user interaction,\r\n         * all actions will be performed in chronological order.\r\n         * Array of object types: { sound: Phaser.Sound.HTML5AudioSound, name: string, value?: * }\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#lockedActionsQueue\r\n         * @type {array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.lockedActionsQueue = this.locked ? [] : null;\r\n\r\n        /**\r\n         * Property that actually holds the value of global mute\r\n         * for HTML5 Audio sound manager implementation.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#_mute\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._mute = false;\r\n\r\n        /**\r\n         * Property that actually holds the value of global volume\r\n         * for HTML5 Audio sound manager implementation.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#_volume\r\n         * @type {boolean}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this._volume = 1;\r\n\r\n        BaseSoundManager.call(this, game);\r\n    },\r\n\r\n    /**\r\n     * Adds a new sound into the sound manager.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSound} The new sound instance.\r\n     */\r\n    add: function (key, config)\r\n    {\r\n        var sound = new HTML5AudioSound(this, key, config);\r\n\r\n        this.sounds.push(sound);\r\n\r\n        return sound;\r\n    },\r\n\r\n    /**\r\n     * Unlocks HTML5 Audio loading and playback on mobile\r\n     * devices on the initial explicit user interaction.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#unlock\r\n     * @since 3.0.0\r\n     */\r\n    unlock: function ()\r\n    {\r\n        this.locked = false;\r\n\r\n        var _this = this;\r\n\r\n        this.game.cache.audio.entries.each(function (key, tags)\r\n        {\r\n            for (var i = 0; i < tags.length; i++)\r\n            {\r\n                if (tags[i].dataset.locked === 'true')\r\n                {\r\n                    _this.locked = true;\r\n\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        if (!this.locked)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var moved = false;\r\n\r\n        var detectMove = function ()\r\n        {\r\n            moved = true;\r\n        };\r\n\r\n        var unlock = function ()\r\n        {\r\n            if (moved)\r\n            {\r\n                moved = false;\r\n                return;\r\n            }\r\n\r\n            document.body.removeEventListener('touchmove', detectMove);\r\n            document.body.removeEventListener('touchend', unlock);\r\n\r\n            var lockedTags = [];\r\n\r\n            _this.game.cache.audio.entries.each(function (key, tags)\r\n            {\r\n                for (var i = 0; i < tags.length; i++)\r\n                {\r\n                    var tag = tags[i];\r\n\r\n                    if (tag.dataset.locked === 'true')\r\n                    {\r\n                        lockedTags.push(tag);\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            if (lockedTags.length === 0)\r\n            {\r\n                return;\r\n            }\r\n\r\n            var lastTag = lockedTags[lockedTags.length - 1];\r\n\r\n            lastTag.oncanplaythrough = function ()\r\n            {\r\n                lastTag.oncanplaythrough = null;\r\n\r\n                lockedTags.forEach(function (tag)\r\n                {\r\n                    tag.dataset.locked = 'false';\r\n                });\r\n\r\n                _this.unlocked = true;\r\n            };\r\n\r\n            lockedTags.forEach(function (tag)\r\n            {\r\n                tag.load();\r\n            });\r\n        };\r\n\r\n        this.once('unlocked', function ()\r\n        {\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                if (sound.currentMarker === null && sound.duration === 0)\r\n                {\r\n                    sound.duration = sound.tags[0].duration;\r\n                }\r\n\r\n                sound.totalDuration = sound.tags[0].duration;\r\n            });\r\n\r\n            while (this.lockedActionsQueue.length)\r\n            {\r\n                var lockedAction = this.lockedActionsQueue.shift();\r\n\r\n                if (lockedAction.sound[lockedAction.prop].apply)\r\n                {\r\n                    lockedAction.sound[lockedAction.prop].apply(lockedAction.sound, lockedAction.value || []);\r\n                }\r\n                else\r\n                {\r\n                    lockedAction.sound[lockedAction.prop] = lockedAction.value;\r\n                }\r\n            }\r\n\r\n        }, this);\r\n\r\n        document.body.addEventListener('touchmove', detectMove, false);\r\n        document.body.addEventListener('touchend', unlock, false);\r\n    },\r\n\r\n    /**\r\n     * Method used internally for pausing sound manager if\r\n     * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#onBlur\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: function ()\r\n    {\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            if (sound.isPlaying)\r\n            {\r\n                this.onBlurPausedSounds.push(sound);\r\n                sound.onBlur();\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Method used internally for resuming sound manager if\r\n     * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#onFocus\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: function ()\r\n    {\r\n        this.onBlurPausedSounds.forEach(function (sound)\r\n        {\r\n            sound.onFocus();\r\n        });\r\n\r\n        this.onBlurPausedSounds.length = 0;\r\n    },\r\n\r\n    /**\r\n     * Calls Phaser.Sound.BaseSoundManager#destroy method\r\n     * and cleans up all HTML5 Audio related stuff.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        BaseSoundManager.prototype.destroy.call(this);\r\n\r\n        this.onBlurPausedSounds.length = 0;\r\n        this.onBlurPausedSounds = null;\r\n    },\r\n\r\n    /**\r\n     * Method used internally by Phaser.Sound.HTML5AudioSound class methods and property setters\r\n     * to check if sound manager is locked and then either perform action immediately or queue it\r\n     * to be performed once the sound manager gets unlocked.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#isLocked\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Sound object on which to perform queued action.\r\n     * @param {string} prop - Name of the method to be called or property to be assigned a value to.\r\n     * @param {*} [value] - An optional parameter that either holds an array of arguments to be passed to the method call or value to be set to the property.\r\n     *\r\n     * @return {boolean} Whether the sound manager is locked.\r\n     */\r\n    isLocked: function (sound, prop, value)\r\n    {\r\n        if (sound.tags[0].dataset.locked === 'true')\r\n        {\r\n            this.lockedActionsQueue.push({\r\n                sound: sound,\r\n                prop: prop,\r\n                value: value\r\n            });\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSoundManager#muteEvent\r\n     * @param {Phaser.Sound.HTML5AudioSoundManager} soundManager - Reference to the sound manager that emitted event.\r\n     * @param {boolean} value - An updated value of Phaser.Sound.HTML5AudioSoundManager#mute property.\r\n     */\r\n\r\n    /**\r\n     * Sets the muted state of all this Sound Manager.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#setMute\r\n     * @fires Phaser.Sound.HTML5AudioSoundManager#muteEvent\r\n     * @since 3.3.0\r\n     *\r\n     * @param {boolean} value - `true` to mute all sounds, `false` to unmute them.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSoundManager} This Sound Manager.\r\n     */\r\n    setMute: function (value)\r\n    {\r\n        this.mute = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#mute\r\n     * @type {boolean}\r\n     * @fires Phaser.Sound.HTML5AudioSoundManager#muteEvent\r\n     * @since 3.0.0\r\n     */\r\n    mute: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._mute;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._mute = value;\r\n\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                sound.updateMute();\r\n            });\r\n\r\n            this.emit('mute', this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * @event Phaser.Sound.HTML5AudioSoundManager#volumeEvent\r\n     * @param {Phaser.Sound.HTML5AudioSoundManager} soundManager - Reference to the sound manager that emitted event.\r\n     * @param {number} value - An updated value of Phaser.Sound.HTML5AudioSoundManager#volume property.\r\n     */\r\n\r\n    /**\r\n     * Sets the volume of this Sound Manager.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#setVolume\r\n     * @fires Phaser.Sound.HTML5AudioSoundManager#volumeEvent\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The global volume of this Sound Manager.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSoundManager} This Sound Manager.\r\n     */\r\n    setVolume: function (value)\r\n    {\r\n        this.volume = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#volume\r\n     * @type {number}\r\n     * @fires Phaser.Sound.HTML5AudioSoundManager#volumeEvent\r\n     * @since 3.0.0\r\n     */\r\n    volume: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._volume;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._volume = value;\r\n\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                sound.updateVolume();\r\n            });\r\n\r\n            this.emit('volume', this, value);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = HTML5AudioSoundManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","BaseSoundManager","Class","HTML5AudioSound","HTML5AudioSoundManager","Extends","initialize","game","override","audioPlayDelay","loopEndOffset","onBlurPausedSounds","lockedActionsQueue","locked","window","_mute","_volume","call","add","key","config","sound","sounds","push","unlock","_this","cache","audio","entries","each","tags","i","length","dataset","moved","detectMove","document","body","removeEventListener","lockedTags","tag","lastTag","oncanplaythrough","lastTag.oncanplaythrough","forEach","unlocked","load","once","forEachActiveSound","currentMarker","duration","totalDuration","lockedAction","shift","prop","apply","value","addEventListener","onBlur","isPlaying","onFocus","destroy","prototype","isLocked","setMute","mute","get","set","updateMute","emit","setVolume","volume","updateVolume"]
}
