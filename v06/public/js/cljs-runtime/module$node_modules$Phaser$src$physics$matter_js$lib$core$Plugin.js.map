{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$core$Plugin.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/core/Plugin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$core$Plugin\"] = function(global,require,module,exports) {\n/**\r\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\r\n*\r\n* @class Plugin\r\n*/\r\n\r\nvar Plugin = {};\r\n\r\nmodule.exports = Plugin;\r\n\r\nvar Common = require('./Common');\r\n\r\n(function() {\r\n\r\n    Plugin._registry = {};\r\n\r\n    /**\r\n     * Registers a plugin object so it can be resolved later by name.\r\n     * @method register\r\n     * @param plugin {} The plugin to register.\r\n     * @return {object} The plugin.\r\n     */\r\n    Plugin.register = function(plugin) {\r\n        if (!Plugin.isPlugin(plugin)) {\r\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\r\n        }\r\n\r\n        if (plugin.name in Plugin._registry) {\r\n            var registered = Plugin._registry[plugin.name],\r\n                pluginVersion = Plugin.versionParse(plugin.version).number,\r\n                registeredVersion = Plugin.versionParse(registered.version).number;\r\n\r\n            if (pluginVersion > registeredVersion) {\r\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\r\n                Plugin._registry[plugin.name] = plugin;\r\n            } else if (pluginVersion < registeredVersion) {\r\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\r\n            } else if (plugin !== registered) {\r\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\r\n            }\r\n        } else {\r\n            Plugin._registry[plugin.name] = plugin;\r\n        }\r\n\r\n        return plugin;\r\n    };\r\n\r\n    /**\r\n     * Resolves a dependency to a plugin object from the registry if it exists. \r\n     * The `dependency` may contain a version, but only the name matters when resolving.\r\n     * @method resolve\r\n     * @param dependency {string} The dependency.\r\n     * @return {object} The plugin if resolved, otherwise `undefined`.\r\n     */\r\n    Plugin.resolve = function(dependency) {\r\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\r\n    };\r\n\r\n    /**\r\n     * Returns a pretty printed plugin name and version.\r\n     * @method toString\r\n     * @param plugin {} The plugin.\r\n     * @return {string} Pretty printed plugin name and version.\r\n     */\r\n    Plugin.toString = function(plugin) {\r\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\r\n     * This means it must define the following properties:\r\n     * - `name`\r\n     * - `version`\r\n     * - `install`\r\n     * @method isPlugin\r\n     * @param obj {} The obj to test.\r\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\r\n     */\r\n    Plugin.isPlugin = function(obj) {\r\n        return obj && obj.name && obj.version && obj.install;\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\r\n     * @method isUsed\r\n     * @param module {} The module.\r\n     * @param name {string} The plugin name.\r\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\r\n     */\r\n    Plugin.isUsed = function(module, name) {\r\n        return module.used.indexOf(name) > -1;\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\r\n     * If `plugin.for` is not specified then it is assumed to be applicable.\r\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\r\n     * @method isFor\r\n     * @param plugin {} The plugin.\r\n     * @param module {} The module.\r\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\r\n     */\r\n    Plugin.isFor = function(plugin, module) {\r\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\r\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\r\n    };\r\n\r\n    /**\r\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\r\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\r\n     * Plugins may be specified either by their name or a reference to the plugin object.\r\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\r\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\r\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\r\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\r\n     * - A green tick \u2705 indicates a dependency was resolved and installed.\r\n     * - An orange diamond \ud83d\udd36 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\r\n     * - A red cross \u274c indicates a dependency could not be resolved.\r\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param module {} The module install plugins on.\r\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\r\n     */\r\n    Plugin.use = function(module, plugins) {\r\n        module.uses = (module.uses || []).concat(plugins || []);\r\n\r\n        if (module.uses.length === 0) {\r\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\r\n            return;\r\n        }\r\n\r\n        var dependencies = Plugin.dependencies(module),\r\n            sortedDependencies = Common.topologicalSort(dependencies),\r\n            status = [];\r\n\r\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\r\n            if (sortedDependencies[i] === module.name) {\r\n                continue;\r\n            }\r\n\r\n            var plugin = Plugin.resolve(sortedDependencies[i]);\r\n\r\n            if (!plugin) {\r\n                status.push('\u274c ' + sortedDependencies[i]);\r\n                continue;\r\n            }\r\n\r\n            if (Plugin.isUsed(module, plugin.name)) {\r\n                continue;\r\n            }\r\n\r\n            if (!Plugin.isFor(plugin, module)) {\r\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\r\n                plugin._warned = true;\r\n            }\r\n\r\n            if (plugin.install) {\r\n                plugin.install(module);\r\n            } else {\r\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\r\n                plugin._warned = true;\r\n            }\r\n\r\n            if (plugin._warned) {\r\n                status.push('\ud83d\udd36 ' + Plugin.toString(plugin));\r\n                delete plugin._warned;\r\n            } else {\r\n                status.push('\u2705 ' + Plugin.toString(plugin));\r\n            }\r\n\r\n            module.used.push(plugin.name);\r\n        }\r\n\r\n        if (status.length > 0 && !plugin.silent) {\r\n            Common.info(status.join('  '));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\r\n     * @method dependencies\r\n     * @param module {} The module.\r\n     * @return {object} A dependency graph.\r\n     */\r\n    Plugin.dependencies = function(module, tracked) {\r\n        var parsedBase = Plugin.dependencyParse(module),\r\n            name = parsedBase.name;\r\n\r\n        tracked = tracked || {};\r\n\r\n        if (name in tracked) {\r\n            return;\r\n        }\r\n\r\n        module = Plugin.resolve(module) || module;\r\n\r\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\r\n            if (Plugin.isPlugin(dependency)) {\r\n                Plugin.register(dependency);\r\n            }\r\n\r\n            var parsed = Plugin.dependencyParse(dependency),\r\n                resolved = Plugin.resolve(dependency);\r\n\r\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\r\n                Common.warn(\r\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\r\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\r\n                );\r\n\r\n                resolved._warned = true;\r\n                module._warned = true;\r\n            } else if (!resolved) {\r\n                Common.warn(\r\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\r\n                    Plugin.toString(parsedBase), 'could not be resolved.'\r\n                );\r\n\r\n                module._warned = true;\r\n            }\r\n\r\n            return parsed.name;\r\n        });\r\n\r\n        for (var i = 0; i < tracked[name].length; i += 1) {\r\n            Plugin.dependencies(tracked[name][i], tracked);\r\n        }\r\n\r\n        return tracked;\r\n    };\r\n\r\n    /**\r\n     * Parses a dependency string into its components.\r\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\r\n     * See documentation for `Plugin.versionParse` for a description of the format.\r\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\r\n     * @method dependencyParse\r\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\r\n     * @return {object} The dependency parsed into its components.\r\n     */\r\n    Plugin.dependencyParse = function(dependency) {\r\n        if (Common.isString(dependency)) {\r\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\r\n\r\n            if (!pattern.test(dependency)) {\r\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\r\n            }\r\n\r\n            return {\r\n                name: dependency.split('@')[0],\r\n                range: dependency.split('@')[1] || '*'\r\n            };\r\n        }\r\n\r\n        return {\r\n            name: dependency.name,\r\n            range: dependency.range || dependency.version\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Parses a version string into its components.  \r\n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\r\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\r\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\r\n     * Only the following range types are supported:\r\n     * - Tilde ranges e.g. `~1.2.3`\r\n     * - Caret ranges e.g. `^1.2.3`\r\n     * - Exact version e.g. `1.2.3`\r\n     * - Any version `*`\r\n     * @method versionParse\r\n     * @param range {string} The version string.\r\n     * @return {object} The version range parsed into its components.\r\n     */\r\n    Plugin.versionParse = function(range) {\r\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\r\n\r\n        if (!pattern.test(range)) {\r\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\r\n        }\r\n\r\n        var identifiers = range.split('-');\r\n        range = identifiers[0];\r\n\r\n        var isRange = isNaN(Number(range[0])),\r\n            version = isRange ? range.substr(1) : range,\r\n            parts = Common.map(version.split('.'), function(part) {\r\n                return Number(part);\r\n            });\r\n\r\n        return {\r\n            isRange: isRange,\r\n            version: version,\r\n            range: range,\r\n            operator: isRange ? range[0] : '',\r\n            parts: parts,\r\n            prerelease: identifiers[1],\r\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if `version` satisfies the given `range`.\r\n     * See documentation for `Plugin.versionParse` for a description of the format.\r\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\r\n     * @method versionSatisfies\r\n     * @param version {string} The version string.\r\n     * @param range {string} The range string.\r\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\r\n     */\r\n    Plugin.versionSatisfies = function(version, range) {\r\n        range = range || '*';\r\n\r\n        var rangeParsed = Plugin.versionParse(range),\r\n            rangeParts = rangeParsed.parts,\r\n            versionParsed = Plugin.versionParse(version),\r\n            versionParts = versionParsed.parts;\r\n\r\n        if (rangeParsed.isRange) {\r\n            if (rangeParsed.operator === '*' || version === '*') {\r\n                return true;\r\n            }\r\n\r\n            if (rangeParsed.operator === '~') {\r\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\r\n            }\r\n\r\n            if (rangeParsed.operator === '^') {\r\n                if (rangeParts[0] > 0) {\r\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\r\n                }\r\n\r\n                if (rangeParts[1] > 0) {\r\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\r\n                }\r\n\r\n                return versionParts[2] === rangeParts[2];\r\n            }\r\n        }\r\n\r\n        return version === range || version === '*';\r\n    };\r\n\r\n})();\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Plugin","Common","_registry","register","Plugin.register","plugin","isPlugin","warn","toString","name","registered","pluginVersion","versionParse","version","number","registeredVersion","resolve","Plugin.resolve","dependency","dependencyParse","Plugin.toString","range","Plugin.isPlugin","obj","install","isUsed","Plugin.isUsed","used","indexOf","isFor","Plugin.isFor","parsed","for","versionSatisfies","use","Plugin.use","plugins","uses","concat","length","dependencies","sortedDependencies","topologicalSort","status","i","_warned","push","silent","info","join","Plugin.dependencies","tracked","parsedBase","map","resolved","Plugin.dependencyParse","isString","pattern","test","split","Plugin.versionParse","identifiers","isRange","isNaN","Number","substr","parts","part","operator","prerelease","Plugin.versionSatisfies","rangeParsed","rangeParts","versionParsed","versionParts"]
}
