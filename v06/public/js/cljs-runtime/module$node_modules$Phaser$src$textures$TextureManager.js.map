{
"version":3,
"file":"module$node_modules$Phaser$src$textures$TextureManager.js",
"lineCount":17,
"mappings":"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",
"sources":["node_modules/Phaser/src/textures/TextureManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$textures$TextureManager\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar CanvasPool = require('../display/canvas/CanvasPool');\r\nvar CanvasTexture = require('./CanvasTexture');\r\nvar Class = require('../utils/Class');\r\nvar Color = require('../display/color/Color');\r\nvar CONST = require('../const');\r\nvar EventEmitter = require('eventemitter3');\r\nvar GenerateTexture = require('../create/GenerateTexture');\r\nvar GetValue = require('../utils/object/GetValue');\r\nvar Parser = require('./parsers');\r\nvar Texture = require('./Texture');\r\n\r\n/**\r\n * @callback EachTextureCallback\r\n *\r\n * @param {Phaser.Textures.Texture} texture - Each texture in Texture Manager.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Textures are managed by the global TextureManager. This is a singleton class that is\r\n * responsible for creating and delivering Textures and their corresponding Frames to Game Objects.\r\n *\r\n * Sprites and other Game Objects get the texture data they need from the TextureManager.\r\n *\r\n * Access it via `scene.textures`.\r\n *\r\n * @class TextureManager\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberOf Phaser.Textures\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - The Phaser.Game instance this Texture Manager belongs to.\r\n */\r\nvar TextureManager = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function TextureManager (game)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * The Game that this TextureManager belongs to.\r\n         *\r\n         * @name Phaser.Textures.TextureManager#game\r\n         * @type {Phaser.Game}\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * The name of this manager.\r\n         *\r\n         * @name Phaser.Textures.TextureManager#name\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.name = 'TextureManager';\r\n\r\n        /**\r\n         * An object that has all of textures that Texture Manager creates.\r\n         * Textures are assigned to keys so we can access to any texture that this object has directly by key value without iteration.\r\n         *\r\n         * @name Phaser.Textures.TextureManager#list\r\n         * @type {object}\r\n         * @default {}\r\n         * @since 3.0.0\r\n         */\r\n        this.list = {};\r\n\r\n        /**\r\n         * The temporary canvas element to save an pixel data of an arbitrary texture in getPixel() and getPixelAlpha() method.\r\n         *\r\n         * @name Phaser.Textures.TextureManager#_tempCanvas\r\n         * @type {HTMLCanvasElement}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._tempCanvas = CanvasPool.create2D(this, 1, 1);\r\n\r\n        /**\r\n         * The context of the temporary canvas element made to save an pixel data in getPixel() and getPixelAlpha() method.\r\n         *\r\n         * @name Phaser.Textures.TextureManager#_tempContext\r\n         * @type {CanvasRenderingContext2D}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._tempContext = this._tempCanvas.getContext('2d');\r\n\r\n        /**\r\n         * An counting value used for emitting 'ready' event after all of managers in game is loaded.\r\n         *\r\n         * @name Phaser.Textures.TextureManager#_pending\r\n         * @type {integer}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._pending = 0;\r\n\r\n        game.events.once('boot', this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Boot Handler called by Phaser.Game when it first starts up.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#boot\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        this._pending = 2;\r\n\r\n        this.on('onload', this.updatePending, this);\r\n        this.on('onerror', this.updatePending, this);\r\n\r\n        this.addBase64('__DEFAULT', this.game.config.defaultImage);\r\n        this.addBase64('__MISSING', this.game.config.missingImage);\r\n\r\n        this.game.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * After 'onload' or 'onerror' invoked twice, emit 'ready' event.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#updatePending\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    updatePending: function ()\r\n    {\r\n        this._pending--;\r\n\r\n        if (this._pending === 0)\r\n        {\r\n            this.off('onload');\r\n            this.off('onerror');\r\n\r\n            this.game.events.emit('texturesready');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Checks the given texture key and throws a console.warn if the key is already in use, then returns false.\r\n     * If you wish to avoid the console.warn then use `TextureManager.exists` instead.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#checkKey\r\n     * @since 3.7.0\r\n     *\r\n     * @param {string} key - The texture key to check.\r\n     *\r\n     * @return {boolean} `true` if it's safe to use the texture key, otherwise `false`.\r\n     */\r\n    checkKey: function (key)\r\n    {\r\n        if (this.exists(key))\r\n        {\r\n            // eslint-disable-next-line no-console\r\n            console.error('Texture key already in use: ' + key);\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Removes a Texture from the Texture Manager and destroys it. This will immediately\r\n     * clear all references to it from the Texture Manager, and if it has one, destroy its\r\n     * WebGLTexture. This will emit a `removetexture` event.\r\n     *\r\n     * Note: If you have any Game Objects still using this texture they will start throwing\r\n     * errors the next time they try to render. Make sure that removing the texture is the final\r\n     * step when clearing down to avoid this.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#remove\r\n     * @since 3.7.0\r\n     *\r\n     * @param {(string|Phaser.Textures.Texture)} key - The key of the Texture to remove, or a reference to it.\r\n     *\r\n     * @return {Phaser.Textures.TextureManager} The Texture Manager.\r\n     */\r\n    remove: function (key)\r\n    {\r\n        if (typeof key === 'string')\r\n        {\r\n            if (this.exists(key))\r\n            {\r\n                key = this.get(key);\r\n            }\r\n            else\r\n            {\r\n                console.warn('No texture found matching key: ' + key);\r\n                return this;\r\n            }\r\n        }\r\n\r\n        //  By this point key should be a Texture, if not, the following fails anyway\r\n        if (this.list.hasOwnProperty(key.key))\r\n        {\r\n            delete this.list[key.key];\r\n\r\n            key.destroy();\r\n\r\n            this.emit('removetexture', key.key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds a new Texture to the Texture Manager created from the given Base64 encoded data.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#addBase64\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {*} data - The Base64 encoded data.\r\n     * \r\n     * @return {this} This Texture Manager instance.\r\n     */\r\n    addBase64: function (key, data)\r\n    {\r\n        if (this.checkKey(key))\r\n        {\r\n            var _this = this;\r\n\r\n            var image = new Image();\r\n\r\n            image.onerror = function ()\r\n            {\r\n                _this.emit('onerror', key);\r\n            };\r\n\r\n            image.onload = function ()\r\n            {\r\n                var texture = _this.create(key, image);\r\n\r\n                Parser.Image(texture, 0);\r\n\r\n                _this.emit('addtexture', key, texture);\r\n\r\n                _this.emit('onload', key, texture);\r\n            };\r\n\r\n            image.src = data;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets an existing texture frame and converts it into a base64 encoded image and returns the base64 data.\r\n     * \r\n     * You can also provide the image type and encoder options.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#getBase64\r\n     * @since 3.12.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {(string|integer)} [frame] - The string-based name, or integer based index, of the Frame to get from the Texture.\r\n     * @param {string} [type='image/png'] - [description]\r\n     * @param {number} [encoderOptions=0.92] - [description]\r\n     * \r\n     * @return {string} The base64 encoded data, or an empty string if the texture frame could not be found.\r\n     */\r\n    getBase64: function (key, frame, type, encoderOptions)\r\n    {\r\n        if (type === undefined) { type = 'image/png'; }\r\n        if (encoderOptions === undefined) { encoderOptions = 0.92; }\r\n\r\n        var data = '';\r\n\r\n        var textureFrame = this.getFrame(key, frame);\r\n\r\n        if (textureFrame)\r\n        {\r\n            var cd = textureFrame.canvasData;\r\n\r\n            var canvas = CanvasPool.create2D(this, cd.width, cd.height);\r\n            var ctx = canvas.getContext('2d');\r\n\r\n            ctx.drawImage(\r\n                textureFrame.source.image,\r\n                cd.x,\r\n                cd.y,\r\n                cd.width,\r\n                cd.height,\r\n                0,\r\n                0,\r\n                cd.width,\r\n                cd.height\r\n            );\r\n\r\n            data = canvas.toDataURL(type, encoderOptions);\r\n\r\n            CanvasPool.remove(canvas);\r\n        }\r\n\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Adds a new Texture to the Texture Manager created from the given Image element.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#addImage\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {HTMLImageElement} source - The source Image element.\r\n     * @param {HTMLImageElement} [dataSource] - An optional data Image element.\r\n     *\r\n     * @return {?Phaser.Textures.Texture} The Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    addImage: function (key, source, dataSource)\r\n    {\r\n        var texture = null;\r\n\r\n        if (this.checkKey(key))\r\n        {\r\n            texture = this.create(key, source);\r\n\r\n            Parser.Image(texture, 0);\r\n\r\n            if (dataSource)\r\n            {\r\n                texture.setDataSource(dataSource);\r\n            }\r\n\r\n            this.emit('addtexture', key, texture);\r\n        }\r\n        \r\n        return texture;\r\n    },\r\n\r\n    /**\r\n     * Adds a Render Texture to the Texture Manager using the given key.\r\n     * This allows you to then use the Render Texture as a normal texture for texture based Game Objects like Sprites.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#addRenderTexture\r\n     * @since 3.12.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {Phaser.GameObjects.RenderTexture} renderTexture - The source Render Texture.\r\n     *\r\n     * @return {?Phaser.Textures.Texture} The Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    addRenderTexture: function (key, renderTexture)\r\n    {\r\n        var texture = null;\r\n\r\n        if (this.checkKey(key))\r\n        {\r\n            texture = this.create(key, renderTexture);\r\n\r\n            texture.add('__BASE', 0, 0, 0, renderTexture.width, renderTexture.height);\r\n\r\n            this.emit('addtexture', key, texture);\r\n        }\r\n        \r\n        return texture;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Texture using the given config values.\r\n     * Generated textures consist of a Canvas element to which the texture data is drawn.\r\n     * See the Phaser.Create function for the more direct way to create textures.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#generate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {object} config - The configuration object needed to generate the texture.\r\n     *\r\n     * @return {?Phaser.Textures.Texture} The Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    generate: function (key, config)\r\n    {\r\n        if (this.checkKey(key))\r\n        {\r\n            var canvas = CanvasPool.create(this, 1, 1);\r\n\r\n            config.canvas = canvas;\r\n\r\n            GenerateTexture(config);\r\n\r\n            return this.addCanvas(key, canvas);\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Creates a new Texture using a blank Canvas element of the size given.\r\n     *\r\n     * Canvas elements are automatically pooled and calling this method will\r\n     * extract a free canvas from the CanvasPool, or create one if none are available.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#createCanvas\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {integer} [width=256]- The width of the Canvas element.\r\n     * @param {integer} [height=256] - The height of the Canvas element.\r\n     *\r\n     * @return {?Phaser.Textures.CanvasTexture} The Canvas Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    createCanvas: function (key, width, height)\r\n    {\r\n        if (width === undefined) { width = 256; }\r\n        if (height === undefined) { height = 256; }\r\n\r\n        if (this.checkKey(key))\r\n        {\r\n            var canvas = CanvasPool.create(this, width, height, CONST.CANVAS, true);\r\n\r\n            return this.addCanvas(key, canvas);\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Canvas Texture object from an existing Canvas element\r\n     * and adds it to this Texture Manager, unless `skipCache` is true.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#addCanvas\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {HTMLCanvasElement} source - The Canvas element to form the base of the new Texture.\r\n     * @param {boolean} [skipCache=false] - Skip adding this Texture into the Cache?\r\n     *\r\n     * @return {?Phaser.Textures.CanvasTexture} The Canvas Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    addCanvas: function (key, source, skipCache)\r\n    {\r\n        if (skipCache === undefined) { skipCache = false; }\r\n\r\n        var texture = null;\r\n\r\n        if (skipCache)\r\n        {\r\n            texture = new CanvasTexture(this, key, source, source.width, source.height);\r\n        }\r\n        else if (this.checkKey(key))\r\n        {\r\n            texture = new CanvasTexture(this, key, source, source.width, source.height);\r\n\r\n            this.list[key] = texture;\r\n\r\n            this.emit('addtexture', key, texture);\r\n        }\r\n\r\n        return texture;\r\n    },\r\n\r\n    /**\r\n     * Adds a new Texture Atlas to this Texture Manager.\r\n     * It can accept either JSON Array or JSON Hash formats, as exported by Texture Packer and similar software.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#addAtlas\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {HTMLImageElement} source - The source Image element.\r\n     * @param {object} data - The Texture Atlas data.\r\n     * @param {HTMLImageElement} [dataSource] - An optional data Image element.\r\n     *\r\n     * @return {?Phaser.Textures.Texture} The Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    addAtlas: function (key, source, data, dataSource)\r\n    {\r\n        //  New Texture Packer format?\r\n        if (Array.isArray(data.textures) || Array.isArray(data.frames))\r\n        {\r\n            return this.addAtlasJSONArray(key, source, data, dataSource);\r\n        }\r\n        else\r\n        {\r\n            return this.addAtlasJSONHash(key, source, data, dataSource);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds a Texture Atlas to this Texture Manager.\r\n     * The frame data of the atlas must be stored in an Array within the JSON.\r\n     * This is known as a JSON Array in software such as Texture Packer.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#addAtlasJSONArray\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {(HTMLImageElement|HTMLImageElement[])} source - The source Image element/s.\r\n     * @param {(object|object[])} data - The Texture Atlas data/s.\r\n     * @param {HTMLImageElement} [dataSource] - An optional data Image element.\r\n     *\r\n     * @return {?Phaser.Textures.Texture} The Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    addAtlasJSONArray: function (key, source, data, dataSource)\r\n    {\r\n        var texture = null;\r\n\r\n        if (this.checkKey(key))\r\n        {\r\n            texture = this.create(key, source);\r\n\r\n            //  Multi-Atlas?\r\n            if (Array.isArray(data))\r\n            {\r\n                var singleAtlasFile = (data.length === 1); // multi-pack with one atlas file for all images\r\n\r\n                //  !! Assumes the textures are in the same order in the source array as in the json data !!\r\n                for (var i = 0; i < texture.source.length; i++)\r\n                {\r\n                    var atlasData = singleAtlasFile ? data[0] : data[i];\r\n\r\n                    Parser.JSONArray(texture, i, atlasData);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                Parser.JSONArray(texture, 0, data);\r\n            }\r\n\r\n            if (dataSource)\r\n            {\r\n                texture.setDataSource(dataSource);\r\n            }\r\n\r\n            this.emit('addtexture', key, texture);\r\n        }\r\n\r\n        return texture;\r\n    },\r\n\r\n    /**\r\n     * Adds a Texture Atlas to this Texture Manager.\r\n     * The frame data of the atlas must be stored in an Object within the JSON.\r\n     * This is known as a JSON Hash in software such as Texture Packer.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#addAtlasJSONHash\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {HTMLImageElement} source - The source Image element.\r\n     * @param {object} data - The Texture Atlas data.\r\n     * @param {HTMLImageElement} [dataSource] - An optional data Image element.\r\n     *\r\n     * @return {?Phaser.Textures.Texture} The Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    addAtlasJSONHash: function (key, source, data, dataSource)\r\n    {\r\n        var texture = null;\r\n\r\n        if (this.checkKey(key))\r\n        {\r\n            texture = this.create(key, source);\r\n\r\n            if (Array.isArray(data))\r\n            {\r\n                for (var i = 0; i < data.length; i++)\r\n                {\r\n                    Parser.JSONHash(texture, i, data[i]);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                Parser.JSONHash(texture, 0, data);\r\n            }\r\n\r\n            if (dataSource)\r\n            {\r\n                texture.setDataSource(dataSource);\r\n            }\r\n\r\n            this.emit('addtexture', key, texture);\r\n        }\r\n\r\n        return texture;\r\n    },\r\n\r\n    /**\r\n     * Adds a Texture Atlas to this Texture Manager, where the atlas data is given\r\n     * in the XML format.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#addAtlasXML\r\n     * @since 3.7.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {HTMLImageElement} source - The source Image element.\r\n     * @param {object} data - The Texture Atlas XML data.\r\n     * @param {HTMLImageElement} [dataSource] - An optional data Image element.\r\n     *\r\n     * @return {?Phaser.Textures.Texture} The Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    addAtlasXML: function (key, source, data, dataSource)\r\n    {\r\n        var texture = null;\r\n\r\n        if (this.checkKey(key))\r\n        {\r\n            texture = this.create(key, source);\r\n            \r\n            Parser.AtlasXML(texture, 0, data);\r\n\r\n            if (dataSource)\r\n            {\r\n                texture.setDataSource(dataSource);\r\n            }\r\n\r\n            this.emit('addtexture', key, texture);\r\n        }\r\n\r\n        return texture;\r\n    },\r\n\r\n    /**\r\n     * Adds a Unity Texture Atlas to this Texture Manager.\r\n     * The data must be in the form of a Unity YAML file.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#addUnityAtlas\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {HTMLImageElement} source - The source Image element.\r\n     * @param {object} data - The Texture Atlas data.\r\n     * @param {HTMLImageElement} [dataSource] - An optional data Image element.\r\n     *\r\n     * @return {?Phaser.Textures.Texture} The Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    addUnityAtlas: function (key, source, data, dataSource)\r\n    {\r\n        var texture = null;\r\n\r\n        if (this.checkKey(key))\r\n        {\r\n            texture = this.create(key, source);\r\n\r\n            Parser.UnityYAML(texture, 0, data);\r\n\r\n            if (dataSource)\r\n            {\r\n                texture.setDataSource(dataSource);\r\n            }\r\n\r\n            this.emit('addtexture', key, texture);\r\n        }\r\n\r\n        return texture;\r\n    },\r\n\r\n    /**\r\n     * @typedef {object} SpriteSheetConfig\r\n     * \r\n     * @property {integer} frameWidth - The fixed width of each frame.\r\n     * @property {integer} [frameHeight] - The fixed height of each frame. If not set it will use the frameWidth as the height.\r\n     * @property {integer} [startFrame=0] - Skip a number of frames. Useful when there are multiple sprite sheets in one Texture.\r\n     * @property {integer} [endFrame=-1] - The total number of frames to extract from the Sprite Sheet. The default value of -1 means \"extract all frames\".\r\n     * @property {integer} [margin=0] - If the frames have been drawn with a margin, specify the amount here.\r\n     * @property {integer} [spacing=0] - If the frames have been drawn with spacing between them, specify the amount here.\r\n     */\r\n\r\n    /**\r\n     * Adds a Sprite Sheet to this Texture Manager.\r\n     *\r\n     * In Phaser terminology a Sprite Sheet is a texture containing different frames, but each frame is the exact\r\n     * same size and cannot be trimmed or rotated.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#addSpriteSheet\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {HTMLImageElement} source - The source Image element.\r\n     * @param {SpriteSheetConfig} config - The configuration object for this Sprite Sheet.\r\n     *\r\n     * @return {?Phaser.Textures.Texture} The Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    addSpriteSheet: function (key, source, config)\r\n    {\r\n        var texture = null;\r\n\r\n        if (this.checkKey(key))\r\n        {\r\n            texture = this.create(key, source);\r\n\r\n            var width = texture.source[0].width;\r\n            var height = texture.source[0].height;\r\n\r\n            Parser.SpriteSheet(texture, 0, 0, 0, width, height, config);\r\n\r\n            this.emit('addtexture', key, texture);\r\n        }\r\n\r\n        return texture;\r\n    },\r\n\r\n    /**\r\n     * @typedef {object} SpriteSheetFromAtlasConfig\r\n     * \r\n     * @property {string} atlas - The key of the Texture Atlas in which this Sprite Sheet can be found.\r\n     * @property {string} frame - The key of the Texture Atlas Frame in which this Sprite Sheet can be found.\r\n     * @property {integer} frameWidth - The fixed width of each frame.\r\n     * @property {integer} [frameHeight] - The fixed height of each frame. If not set it will use the frameWidth as the height.\r\n     * @property {integer} [startFrame=0] - Skip a number of frames. Useful when there are multiple sprite sheets in one Texture.\r\n     * @property {integer} [endFrame=-1] - The total number of frames to extract from the Sprite Sheet. The default value of -1 means \"extract all frames\".\r\n     * @property {integer} [margin=0] - If the frames have been drawn with a margin, specify the amount here.\r\n     * @property {integer} [spacing=0] - If the frames have been drawn with spacing between them, specify the amount here.\r\n     */\r\n\r\n    /**\r\n     * Adds a Sprite Sheet to this Texture Manager, where the Sprite Sheet exists as a Frame within a Texture Atlas.\r\n     *\r\n     * In Phaser terminology a Sprite Sheet is a texture containing different frames, but each frame is the exact\r\n     * same size and cannot be trimmed or rotated.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#addSpriteSheetFromAtlas\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {SpriteSheetFromAtlasConfig} config - The configuration object for this Sprite Sheet.\r\n     *\r\n     * @return {?Phaser.Textures.Texture} The Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    addSpriteSheetFromAtlas: function (key, config)\r\n    {\r\n        if (!this.checkKey(key))\r\n        {\r\n            return null;\r\n        }\r\n\r\n        var atlasKey = GetValue(config, 'atlas', null);\r\n        var atlasFrame = GetValue(config, 'frame', null);\r\n\r\n        if (!atlasKey || !atlasFrame)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var atlas = this.get(atlasKey);\r\n        var sheet = atlas.get(atlasFrame);\r\n\r\n        if (sheet)\r\n        {\r\n            var texture = this.create(key, sheet.source.image);\r\n\r\n            if (sheet.trimmed)\r\n            {\r\n                //  If trimmed we need to help the parser adjust\r\n                Parser.SpriteSheetFromAtlas(texture, sheet, config);\r\n            }\r\n            else\r\n            {\r\n                Parser.SpriteSheet(texture, 0, sheet.cutX, sheet.cutY, sheet.cutWidth, sheet.cutHeight, config);\r\n            }\r\n\r\n            this.emit('addtexture', key, texture);\r\n\r\n            return texture;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Creates a new Texture using the given source and dimensions.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {HTMLImageElement} source - The source Image element.\r\n     * @param {integer} width - The width of the Texture.\r\n     * @param {integer} height - The height of the Texture.\r\n     *\r\n     * @return {?Phaser.Textures.Texture} The Texture that was created, or `null` if the key is already in use.\r\n     */\r\n    create: function (key, source, width, height)\r\n    {\r\n        var texture = null;\r\n\r\n        if (this.checkKey(key))\r\n        {\r\n            texture = new Texture(this, key, source, width, height);\r\n\r\n            this.list[key] = texture;\r\n        }\r\n\r\n        return texture;\r\n    },\r\n\r\n    /**\r\n     * Checks the given key to see if a Texture using it exists within this Texture Manager.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#exists\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     *\r\n     * @return {boolean} Returns `true` if a Texture matching the given key exists in this Texture Manager.\r\n     */\r\n    exists: function (key)\r\n    {\r\n        return (this.list.hasOwnProperty(key));\r\n    },\r\n\r\n    /**\r\n     * Returns a Texture from the Texture Manager that matches the given key.\r\n     * If the key is undefined it will return the `__DEFAULT` Texture.\r\n     * If the key is given, but not found, it will return the `__MISSING` Texture.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     *\r\n     * @return {Phaser.Textures.Texture} The Texture that was created.\r\n     */\r\n    get: function (key)\r\n    {\r\n        if (key === undefined) { key = '__DEFAULT'; }\r\n\r\n        if (this.list[key])\r\n        {\r\n            return this.list[key];\r\n        }\r\n        else\r\n        {\r\n            return this.list['__MISSING'];\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Takes a Texture key and Frame name and returns a clone of that Frame if found.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#cloneFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {(string|integer)} frame - The string or index of the Frame to be cloned.\r\n     *\r\n     * @return {Phaser.Textures.Frame} A Clone of the given Frame.\r\n     */\r\n    cloneFrame: function (key, frame)\r\n    {\r\n        if (this.list[key])\r\n        {\r\n            return this.list[key].get(frame).clone();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Takes a Texture key and Frame name and returns a reference to that Frame, if found.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#getFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {(string|integer)} [frame] - The string-based name, or integer based index, of the Frame to get from the Texture.\r\n     *\r\n     * @return {Phaser.Textures.Frame} A Texture Frame object.\r\n     */\r\n    getFrame: function (key, frame)\r\n    {\r\n        if (this.list[key])\r\n        {\r\n            return this.list[key].get(frame);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns an array with all of the keys of all Textures in this Texture Manager.\r\n     * The output array will exclude the `__DEFAULT` and `__MISSING` keys.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#getTextureKeys\r\n     * @since 3.0.0\r\n     *\r\n     * @return {string[]} An array containing all of the Texture keys stored in this Texture Manager.\r\n     */\r\n    getTextureKeys: function ()\r\n    {\r\n        var output = [];\r\n\r\n        for (var key in this.list)\r\n        {\r\n            if (key !== '__DEFAULT' && key !== '__MISSING')\r\n            {\r\n                output.push(key);\r\n            }\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Given a Texture and an `x` and `y` coordinate this method will return a new\r\n     * Color object that has been populated with the color and alpha values of the pixel\r\n     * at that location in the Texture.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#getPixel\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} x - The x coordinate of the pixel within the Texture.\r\n     * @param {integer} y - The y coordinate of the pixel within the Texture.\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {(string|integer)} frame - The string or index of the Frame.\r\n     *\r\n     * @return {?Phaser.Display.Color} A Color object populated with the color values of the requested pixel,\r\n     * or `null` if the coordinates were out of bounds.\r\n     */\r\n    getPixel: function (x, y, key, frame)\r\n    {\r\n        var textureFrame = this.getFrame(key, frame);\r\n\r\n        if (textureFrame)\r\n        {\r\n            //  Adjust for trim (if not trimmed x and y are just zero)\r\n            x -= textureFrame.x;\r\n            y -= textureFrame.y;\r\n\r\n            var data = textureFrame.data.cut;\r\n\r\n            x += data.x;\r\n            y += data.y;\r\n\r\n            if (x >= data.x && x < data.r && y >= data.y && y < data.b)\r\n            {\r\n                var ctx = this._tempContext;\r\n\r\n                ctx.clearRect(0, 0, 1, 1);\r\n                ctx.drawImage(textureFrame.source.image, x, y, 1, 1, 0, 0, 1, 1);\r\n\r\n                var rgb = ctx.getImageData(0, 0, 1, 1);\r\n\r\n                return new Color(rgb.data[0], rgb.data[1], rgb.data[2], rgb.data[3]);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Given a Texture and an `x` and `y` coordinate this method will return a value between 0 and 255\r\n     * corresponding to the alpha value of the pixel at that location in the Texture. If the coordinate\r\n     * is out of bounds it will return null.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#getPixelAlpha\r\n     * @since 3.10.0\r\n     *\r\n     * @param {integer} x - The x coordinate of the pixel within the Texture.\r\n     * @param {integer} y - The y coordinate of the pixel within the Texture.\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {(string|integer)} frame - The string or index of the Frame.\r\n     *\r\n     * @return {integer} A value between 0 and 255, or `null` if the coordinates were out of bounds.\r\n     */\r\n    getPixelAlpha: function (x, y, key, frame)\r\n    {\r\n        var textureFrame = this.getFrame(key, frame);\r\n\r\n        if (textureFrame)\r\n        {\r\n            //  Adjust for trim (if not trimmed x and y are just zero)\r\n            x -= textureFrame.x;\r\n            y -= textureFrame.y;\r\n\r\n            var data = textureFrame.data.cut;\r\n\r\n            x += data.x;\r\n            y += data.y;\r\n\r\n            if (x >= data.x && x < data.r && y >= data.y && y < data.b)\r\n            {\r\n                var ctx = this._tempContext;\r\n\r\n                ctx.clearRect(0, 0, 1, 1);\r\n                ctx.drawImage(textureFrame.source.image, x, y, 1, 1, 0, 0, 1, 1);\r\n    \r\n                var rgb = ctx.getImageData(0, 0, 1, 1);\r\n    \r\n                return rgb.data[3];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Sets the given Game Objects `texture` and `frame` properties so that it uses\r\n     * the Texture and Frame specified in the `key` and `frame` arguments to this method.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#setTexture\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object the texture would be set on.\r\n     * @param {string} key - The unique string-based key of the Texture.\r\n     * @param {(string|integer)} frame - The string or index of the Frame.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object the texture was set on.\r\n     */\r\n    setTexture: function (gameObject, key, frame)\r\n    {\r\n        if (this.list[key])\r\n        {\r\n            gameObject.texture = this.list[key];\r\n            gameObject.frame = gameObject.texture.get(frame);\r\n        }\r\n\r\n        return gameObject;\r\n    },\r\n\r\n    /**\r\n     * Changes the key being used by a Texture to the new key provided.\r\n     * \r\n     * The old key is removed, allowing it to be re-used.\r\n     * \r\n     * Game Objects are linked to Textures by a reference to the Texture object, so\r\n     * all existing references will be retained.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#renameTexture\r\n     * @since 3.12.0\r\n     *\r\n     * @param {string} currentKey - The current string-based key of the Texture you wish to rename.\r\n     * @param {string} newKey - The new unique string-based key to use for the Texture.\r\n     *\r\n     * @return {boolean} `true` if the Texture key was successfully renamed, otherwise `false`.\r\n     */\r\n    renameTexture: function (currentKey, newKey)\r\n    {\r\n        var texture = this.get(currentKey);\r\n\r\n        if (texture && currentKey !== newKey)\r\n        {\r\n            texture.key = newKey;\r\n\r\n            this.list[newKey] = texture;\r\n\r\n            delete this.list[currentKey];\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Passes all Textures to the given callback.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#each\r\n     * @since 3.0.0\r\n     *\r\n     * @param {EachTextureCallback} callback - The callback function to be sent the Textures.\r\n     * @param {object} scope - The value to use as `this` when executing the callback.\r\n     * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n     */\r\n    each: function (callback, scope)\r\n    {\r\n        var args = [ null ];\r\n\r\n        for (var i = 1; i < arguments.length; i++)\r\n        {\r\n            args.push(arguments[i]);\r\n        }\r\n\r\n        for (var texture in this.list)\r\n        {\r\n            args[0] = this.list[texture];\r\n\r\n            callback.apply(scope, args);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys the Texture Manager and all Textures stored within it.\r\n     *\r\n     * @method Phaser.Textures.TextureManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        for (var texture in this.list)\r\n        {\r\n            this.list[texture].destroy();\r\n        }\r\n\r\n        this.list = {};\r\n\r\n        this.game = null;\r\n\r\n        CanvasPool.remove(this._tempCanvas);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TextureManager;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","CanvasPool","CanvasTexture","Class","Color","CONST","EventEmitter","GenerateTexture","GetValue","Parser","Texture","TextureManager","Extends","initialize","game","call","name","list","_tempCanvas","create2D","_tempContext","getContext","_pending","events","once","boot","on","updatePending","addBase64","config","defaultImage","missingImage","destroy","off","emit","checkKey","key","exists","console","error","remove","get","warn","hasOwnProperty","data","_this","image","Image","onerror","image.onerror","onload","image.onload","texture","create","src","getBase64","frame","type","encoderOptions","undefined","textureFrame","getFrame","cd","canvasData","canvas","width","height","ctx","drawImage","source","x","y","toDataURL","addImage","dataSource","setDataSource","addRenderTexture","renderTexture","add","generate","addCanvas","createCanvas","CANVAS","skipCache","addAtlas","Array","isArray","textures","frames","addAtlasJSONArray","addAtlasJSONHash","singleAtlasFile","length","i","JSONArray","atlasData","JSONHash","addAtlasXML","AtlasXML","addUnityAtlas","UnityYAML","addSpriteSheet","SpriteSheet","addSpriteSheetFromAtlas","atlasKey","atlasFrame","sheet","atlas","trimmed","SpriteSheetFromAtlas","cutX","cutY","cutWidth","cutHeight","cloneFrame","clone","getTextureKeys","output","push","getPixel","cut","r","b","clearRect","rgb","getImageData","getPixelAlpha","setTexture","gameObject","renameTexture","currentKey","newKey","each","callback","scope","args","arguments","apply"]
}
