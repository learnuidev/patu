{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$group$Group.js",
"lineCount":18,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/group/Group.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$group$Group\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Actions = require('../../actions/');\r\nvar Class = require('../../utils/Class');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\nvar Range = require('../../utils/array/Range');\r\nvar Set = require('../../structs/Set');\r\nvar Sprite = require('../sprite/Sprite');\r\n\r\n/**\r\n * @callback GroupCallback\r\n *\r\n * @param {Phaser.GameObjects.GameObject} item - A group member\r\n */\r\n\r\n/**\r\n * @callback GroupMultipleCreateCallback\r\n *\r\n * @param {Phaser.GameObjects.GameObject[]} items - The newly created group members\r\n */\r\n\r\n/**\r\n * @typedef {object} GroupConfig\r\n *\r\n * @property {?object} [classType=Sprite] - Sets {@link Phaser.GameObjects.Group#classType}.\r\n * @property {?boolean} [active=true] - Sets {@link Phaser.GameObjects.Group#active}.\r\n * @property {?number} [maxSize=-1] - Sets {@link Phaser.GameObjects.Group#maxSize}.\r\n * @property {?string} [defaultKey=null] - Sets {@link Phaser.GameObjects.Group#defaultKey}.\r\n * @property {?(string|integer)} [defaultFrame=null] - Sets {@link Phaser.GameObjects.Group#defaultFrame}.\r\n * @property {?boolean} [runChildUpdate=false] - Sets {@link Phaser.GameObjects.Group#runChildUpdate}.\r\n * @property {?GroupCallback} [createCallback=null] - Sets {@link Phaser.GameObjects.Group#createCallback}.\r\n * @property {?GroupCallback} [removeCallback=null] - Sets {@link Phaser.GameObjects.Group#removeCallback}.\r\n * @property {?GroupMultipleCreateCallback} [createMultipleCallback=null] - Sets {@link Phaser.GameObjects.Group#createMultipleCallback}.\r\n */\r\n\r\n/**\r\n * @typedef {object} GroupCreateConfig\r\n *\r\n * The total number of objects created will be\r\n *\r\n *     key.length * frame.length * frameQuantity * (yoyo ? 2 : 1) * (1 + repeat)\r\n *\r\n * In the simplest case, 1 + `repeat` objects will be created.\r\n *\r\n * If `max` is positive, then the total created will not exceed `max`.\r\n *\r\n * `key` is required. {@link Phaser.GameObjects.Group#defaultKey} is not used.\r\n *\r\n * @property {?object} [classType] - The class of each new Game Object.\r\n * @property {string} [key] - The texture key of each new Game Object.\r\n * @property {?(string|integer)} [frame=null] - The texture frame of each new Game Object.\r\n * @property {?boolean} [visible=true] - The visible state of each new Game Object.\r\n * @property {?boolean} [active=true] - The active state of each new Game Object.\r\n * @property {?number} [repeat=0] - The number of times each `key` \u00d7 `frame` combination will be *repeated* (after the first combination).\r\n * @property {?boolean} [randomKey=false] - Select a `key` at random.\r\n * @property {?boolean} [randomFrame=false] - Select a `frame` at random.\r\n * @property {?boolean} [yoyo=false] - Select keys and frames by moving forward then backward through `key` and `frame`.\r\n * @property {?number} [frameQuantity=1] - The number of times each `frame` should be combined with one `key`.\r\n * @property {?number} [max=0] - The maximum number of new Game Objects to create. 0 is no maximum.\r\n * @property {?object} [setXY]\r\n * @property {?number} [setXY.x=0] - The horizontal position of each new Game Object.\r\n * @property {?number} [setXY.y=0] - The vertical position of each new Game Object.\r\n * @property {?number} [setXY.stepX=0] - Increment each Game Object's horizontal position from the previous by this amount, starting from `setXY.x`.\r\n * @property {?number} [setXY.stepY=0] - Increment each Game Object's vertical position from the previous by this amount, starting from `setXY.y`.\r\n * @property {?object} [setRotation]\r\n * @property {?number} [setRotation.value=0] - Rotation of each new Game Object.\r\n * @property {?number} [setRotation.step=0] - Increment each Game Object's rotation from the previous by this amount, starting at `setRotation.value`.\r\n * @property {?object} [setScale]\r\n * @property {?number} [setScale.x=0] - The horizontal scale of each new Game Object.\r\n * @property {?number} [setScale.y=0] - The vertical scale of each new Game Object.\r\n * @property {?number} [setScale.stepX=0] - Increment each Game Object's horizontal scale from the previous by this amount, starting from `setScale.x`.\r\n * @property {?number} [setScale.stepY=0] - Increment each Game object's vertical scale from the previous by this amount, starting from `setScale.y`.\r\n * @property {?object} [setAlpha]\r\n * @property {?number} [setAlpha.value=0] - The alpha value of each new Game Object.\r\n * @property {?number} [setAlpha.step=0] - Increment each Game Object's alpha from the previous by this amount, starting from `setAlpha.value`.\r\n * @property {?*} [hitArea] - A geometric shape that defines the hit area for the Game Object.\r\n * @property {?HitAreaCallback} [hitAreaCallback] - A callback to be invoked when the Game Object is interacted with.\r\n * @property {?(false|GridAlignConfig)} [gridAlign=false] - Align the new Game Objects in a grid using these settings.\r\n *\r\n * @see Phaser.Actions.GridAlign\r\n * @see Phaser.Actions.SetAlpha\r\n * @see Phaser.Actions.SetHitArea\r\n * @see Phaser.Actions.SetRotation\r\n * @see Phaser.Actions.SetScale\r\n * @see Phaser.Actions.SetXY\r\n * @see Phaser.GameObjects.Group#createFromConfig\r\n * @see Phaser.Utils.Array.Range\r\n */\r\n\r\n/**\r\n * @classdesc A Group is a way for you to create, manipulate, or recycle similar Game Objects.\r\n *\r\n * Group membership is non-exclusive. A Game Object can belong to several groups, one group, or none.\r\n *\r\n * Groups themselves aren't displayable, and can't be positioned, rotated, scaled, or hidden.\r\n *\r\n * @class Group\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n * @param {Phaser.Scene} scene - The scene this group belongs to.\r\n * @param {(Phaser.GameObjects.GameObject[]|GroupConfig|GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n * @param {GroupConfig|GroupCreateConfig} [config] - Settings for this group. If `key` is set, Phaser.GameObjects.Group#createMultiple is also called with these settings.\r\n *\r\n * @see Phaser.Physics.Arcade.Group\r\n * @see Phaser.Physics.Arcade.StaticGroup\r\n */\r\nvar Group = new Class({\r\n\r\n    initialize:\r\n\r\n    function Group (scene, children, config)\r\n    {\r\n        //  They can pass in any of the following as the first argument:\r\n\r\n        //  1) A single child\r\n        //  2) An array of children\r\n        //  3) A config object\r\n        //  4) An array of config objects\r\n\r\n        //  Or they can pass in a child, or array of children AND a config object\r\n\r\n        if (config)\r\n        {\r\n            //  config has been set, are the children an array?\r\n\r\n            if (children && !Array.isArray(children))\r\n            {\r\n                children = [ children ];\r\n            }\r\n        }\r\n        else if (Array.isArray(children))\r\n        {\r\n            //  No config, so let's check the children argument\r\n\r\n            if (IsPlainObject(children[0]))\r\n            {\r\n                //  It's an array of plain config objects\r\n                config = children;\r\n                children = null;\r\n            }\r\n        }\r\n        else if (IsPlainObject(children))\r\n        {\r\n            //  Children isn't an array. Is it a config object though?\r\n            config = children;\r\n            children = null;\r\n        }\r\n\r\n        /**\r\n         * This scene this group belongs to.\r\n         *\r\n         * @name Phaser.GameObjects.Group#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * Members of this group.\r\n         *\r\n         * @name Phaser.GameObjects.Group#children\r\n         * @type {Phaser.Structs.Set.<Phaser.GameObjects.GameObject>}\r\n         * @since 3.0.0\r\n         */\r\n        this.children = new Set(children);\r\n\r\n        /**\r\n         * A flag identifying this object as a group.\r\n         *\r\n         * @name Phaser.GameObjects.Group#isParent\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.isParent = true;\r\n\r\n        /**\r\n         * The class to create new group members from.\r\n         *\r\n         * @name Phaser.GameObjects.Group#classType\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         * @default Phaser.GameObjects.Sprite\r\n         */\r\n        this.classType = GetFastValue(config, 'classType', Sprite);\r\n\r\n        /**\r\n         * Whether this group runs its {@link Phaser.GameObjects.Group#preUpdate} method\r\n         * (which may update any members).\r\n         *\r\n         * @name Phaser.GameObjects.Group#active\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.active = GetFastValue(config, 'active', true);\r\n\r\n        /**\r\n         * The maximum size of this group, if used as a pool. -1 is no limit.\r\n         *\r\n         * @name Phaser.GameObjects.Group#maxSize\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         * @default -1\r\n         */\r\n        this.maxSize = GetFastValue(config, 'maxSize', -1);\r\n\r\n        /**\r\n         * A default texture key to use when creating new group members.\r\n         *\r\n         * This is used in {@link Phaser.GameObjects.Group#create}\r\n         * but not in {@link Phaser.GameObjects.Group#createMultiple}.\r\n         *\r\n         * @name Phaser.GameObjects.Group#defaultKey\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultKey = GetFastValue(config, 'defaultKey', null);\r\n\r\n        /**\r\n         * A default texture frame to use when creating new group members.\r\n         *\r\n         * @name Phaser.GameObjects.Group#defaultFrame\r\n         * @type {(string|integer)}\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultFrame = GetFastValue(config, 'defaultFrame', null);\r\n\r\n        /**\r\n         * Whether to call the update method of any members.\r\n         *\r\n         * @name Phaser.GameObjects.Group#runChildUpdate\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Group#preUpdate\r\n         */\r\n        this.runChildUpdate = GetFastValue(config, 'runChildUpdate', false);\r\n\r\n        /**\r\n         * A function to be called when adding or creating group members.\r\n         *\r\n         * @name Phaser.GameObjects.Group#createCallback\r\n         * @type {?GroupCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.createCallback = GetFastValue(config, 'createCallback', null);\r\n\r\n        /**\r\n         * A function to be called when removing group members.\r\n         *\r\n         * @name Phaser.GameObjects.Group#removeCallback\r\n         * @type {?GroupCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.removeCallback = GetFastValue(config, 'removeCallback', null);\r\n\r\n        /**\r\n         * A function to be called when creating several group members at once.\r\n         *\r\n         * @name Phaser.GameObjects.Group#createMultipleCallback\r\n         * @type {?GroupMultipleCreateCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.createMultipleCallback = GetFastValue(config, 'createMultipleCallback', null);\r\n\r\n        if (config)\r\n        {\r\n            this.createMultiple(config);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Creates a new Game Object and adds it to this group, unless the group {@link Phaser.GameObjects.Group#isFull is full}.\r\n     *\r\n     * Calls {@link Phaser.GameObjects.Group#createCallback}.\r\n     *\r\n     * @method Phaser.GameObjects.Group#create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal position of the new Game Object in the world.\r\n     * @param {number} [y=0] - The vertical position of the new Game Object in the world.\r\n     * @param {string} [key=defaultKey] - The texture key of the new Game Object.\r\n     * @param {(string|integer)} [frame=defaultFrame] - The texture frame of the new Game Object.\r\n     * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of the new Game Object.\r\n     * @param {boolean} [active=true] - The {@link Phaser.GameObjects.GameObject#active} state of the new Game Object.\r\n     *\r\n     * @return {any} The new Game Object (usually a Sprite, etc.).\r\n     */\r\n    create: function (x, y, key, frame, visible, active)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (key === undefined) { key = this.defaultKey; }\r\n        if (frame === undefined) { frame = this.defaultFrame; }\r\n        if (visible === undefined) { visible = true; }\r\n        if (active === undefined) { active = true; }\r\n\r\n        //  Pool?\r\n        if (this.isFull())\r\n        {\r\n            return null;\r\n        }\r\n\r\n        var child = new this.classType(this.scene, x, y, key, frame);\r\n\r\n        this.scene.sys.displayList.add(child);\r\n\r\n        if (child.preUpdate)\r\n        {\r\n            this.scene.sys.updateList.add(child);\r\n        }\r\n\r\n        child.visible = visible;\r\n        child.setActive(active);\r\n\r\n        this.add(child);\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * Creates several Game Objects and adds them to this group.\r\n     *\r\n     * If the group becomes {@link Phaser.GameObjects.Group#isFull}, no further Game Objects are created.\r\n     *\r\n     * Calls {@link Phaser.GameObjects.Group#createMultipleCallback} and {@link Phaser.GameObjects.Group#createCallback}.\r\n     *\r\n     * @method Phaser.GameObjects.Group#createMultiple\r\n     * @since 3.0.0\r\n     *\r\n     * @param {GroupCreateConfig|GroupCreateConfig[]} config - Creation settings. This can be a single configuration object or an array of such objects, which will be applied in turn.\r\n     *\r\n     * @return {any[]} The newly created Game Objects.\r\n     */\r\n    createMultiple: function (config)\r\n    {\r\n        if (this.isFull())\r\n        {\r\n            return [];\r\n        }\r\n\r\n        if (!Array.isArray(config))\r\n        {\r\n            config = [ config ];\r\n        }\r\n\r\n        var output = [];\r\n\r\n        if (config[0].key)\r\n        {\r\n            for (var i = 0; i < config.length; i++)\r\n            {\r\n                var entries = this.createFromConfig(config[i]);\r\n    \r\n                output = output.concat(entries);\r\n            }\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * A helper for {@link Phaser.GameObjects.Group#createMultiple}.\r\n     *\r\n     * @method Phaser.GameObjects.Group#createFromConfig\r\n     * @since 3.0.0\r\n     *\r\n     * @param {GroupCreateConfig} options - Creation settings.\r\n     *\r\n     * @return {any[]} The newly created Game Objects.\r\n     */\r\n    createFromConfig: function (options)\r\n    {\r\n        if (this.isFull())\r\n        {\r\n            return [];\r\n        }\r\n\r\n        this.classType = GetFastValue(options, 'classType', this.classType);\r\n\r\n        var key = GetFastValue(options, 'key', undefined);\r\n        var frame = GetFastValue(options, 'frame', null);\r\n        var visible = GetFastValue(options, 'visible', true);\r\n        var active = GetFastValue(options, 'active', true);\r\n\r\n        var entries = [];\r\n\r\n        //  Can't do anything without at least a key\r\n        if (key === undefined)\r\n        {\r\n            return entries;\r\n        }\r\n        else\r\n        {\r\n            if (!Array.isArray(key))\r\n            {\r\n                key = [ key ];\r\n            }\r\n\r\n            if (!Array.isArray(frame))\r\n            {\r\n                frame = [ frame ];\r\n            }\r\n        }\r\n\r\n        //  Build an array of key frame pairs to loop through\r\n\r\n        var repeat = GetFastValue(options, 'repeat', 0);\r\n        var randomKey = GetFastValue(options, 'randomKey', false);\r\n        var randomFrame = GetFastValue(options, 'randomFrame', false);\r\n        var yoyo = GetFastValue(options, 'yoyo', false);\r\n        var quantity = GetFastValue(options, 'frameQuantity', 1);\r\n        var max = GetFastValue(options, 'max', 0);\r\n\r\n        //  If a grid is set we use that to override the quantity?\r\n\r\n        var range = Range(key, frame, {\r\n            max: max,\r\n            qty: quantity,\r\n            random: randomKey,\r\n            randomB: randomFrame,\r\n            repeat: repeat,\r\n            yoyo: yoyo\r\n        });\r\n\r\n        for (var c = 0; c < range.length; c++)\r\n        {\r\n            var created = this.create(0, 0, range[c].a, range[c].b, visible, active);\r\n\r\n            if (!created)\r\n            {\r\n                break;\r\n            }\r\n\r\n            entries.push(created);\r\n        }\r\n\r\n        //  Post-creation options (applied only to those items created in this call):\r\n\r\n        var x = GetValue(options, 'setXY.x', 0);\r\n        var y = GetValue(options, 'setXY.y', 0);\r\n        var stepX = GetValue(options, 'setXY.stepX', 0);\r\n        var stepY = GetValue(options, 'setXY.stepY', 0);\r\n\r\n        Actions.SetXY(entries, x, y, stepX, stepY);\r\n\r\n        var rotation = GetValue(options, 'setRotation.value', 0);\r\n        var stepRotation = GetValue(options, 'setRotation.step', 0);\r\n\r\n        Actions.SetRotation(entries, rotation, stepRotation);\r\n\r\n        var scaleX = GetValue(options, 'setScale.x', 1);\r\n        var scaleY = GetValue(options, 'setScale.y', scaleX);\r\n        var stepScaleX = GetValue(options, 'setScale.stepX', 0);\r\n        var stepScaleY = GetValue(options, 'setScale.stepY', 0);\r\n\r\n        Actions.SetScale(entries, scaleX, scaleY, stepScaleX, stepScaleY);\r\n\r\n        var alpha = GetValue(options, 'setAlpha.value', 1);\r\n        var stepAlpha = GetValue(options, 'setAlpha.step', 0);\r\n\r\n        Actions.SetAlpha(entries, alpha, stepAlpha);\r\n\r\n        var hitArea = GetFastValue(options, 'hitArea', null);\r\n        var hitAreaCallback = GetFastValue(options, 'hitAreaCallback', null);\r\n\r\n        if (hitArea)\r\n        {\r\n            Actions.SetHitArea(entries, hitArea, hitAreaCallback);\r\n        }\r\n\r\n        var grid = GetFastValue(options, 'gridAlign', false);\r\n\r\n        if (grid)\r\n        {\r\n            Actions.GridAlign(entries, grid);\r\n        }\r\n\r\n        if (this.createMultipleCallback)\r\n        {\r\n            this.createMultipleCallback.call(this, entries);\r\n        }\r\n\r\n        return entries;\r\n    },\r\n\r\n    /**\r\n     * Updates any group members, if {@link Phaser.GameObjects.Group#runChildUpdate} is enabled.\r\n     *\r\n     * @method Phaser.GameObjects.Group#preUpdate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp.\r\n     * @param {number} delta - The delta time elapsed since the last frame.\r\n     */\r\n    preUpdate: function (time, delta)\r\n    {\r\n        if (!this.runChildUpdate || this.children.size === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        //  Because a Group child may mess with the length of the Group during its update\r\n        var temp = this.children.entries.slice();\r\n\r\n        for (var i = 0; i < temp.length; i++)\r\n        {\r\n            var item = temp[i];\r\n\r\n            if (item.active)\r\n            {\r\n                item.update(time, delta);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds a Game Object to this group.\r\n     *\r\n     * Calls {@link Phaser.GameObjects.Group#createCallback}.\r\n     *\r\n     * @method Phaser.GameObjects.Group#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object to add.\r\n     * @param {boolean} [addToScene=false] - Also add the Game Object to the scene.\r\n     *\r\n     * @return {Phaser.GameObjects.Group} This Group object.\r\n     */\r\n    add: function (child, addToScene)\r\n    {\r\n        if (addToScene === undefined) { addToScene = false; }\r\n\r\n        if (this.isFull())\r\n        {\r\n            return this;\r\n        }\r\n\r\n        this.children.set(child);\r\n\r\n        if (this.createCallback)\r\n        {\r\n            this.createCallback.call(this, child);\r\n        }\r\n\r\n        if (addToScene)\r\n        {\r\n            this.scene.sys.displayList.add(child);\r\n\r\n            if (child.preUpdate)\r\n            {\r\n                this.scene.sys.updateList.add(child);\r\n            }\r\n        }\r\n\r\n        child.on('destroy', this.remove, this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds several Game Objects to this group.\r\n     *\r\n     * Calls {@link Phaser.GameObjects.Group#createCallback}.\r\n     *\r\n     * @method Phaser.GameObjects.Group#addMultiple\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject[]} children - The Game Objects to add.\r\n     * @param {boolean} [addToScene=false] - Also add the Game Objects to the scene.\r\n     *\r\n     * @return {Phaser.GameObjects.Group} This group.\r\n     */\r\n    addMultiple: function (children, addToScene)\r\n    {\r\n        if (addToScene === undefined) { addToScene = false; }\r\n\r\n        if (Array.isArray(children))\r\n        {\r\n            for (var i = 0; i < children.length; i++)\r\n            {\r\n                this.add(children[i], addToScene);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes a member of this Group and optionally removes it from the Scene and / or destroys it.\r\n     *\r\n     * Calls {@link Phaser.GameObjects.Group#removeCallback}.\r\n     *\r\n     * @method Phaser.GameObjects.Group#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object to remove.\r\n     * @param {boolean} [removeFromScene=false] - Optionally remove the Group member from the Scene it belongs to.\r\n     * @param {boolean} [destroyChild=false] - Optionally call destroy on the removed Group member.\r\n     *\r\n     * @return {Phaser.GameObjects.Group} This Group object.\r\n     */\r\n    remove: function (child, removeFromScene, destroyChild)\r\n    {\r\n        if (removeFromScene === undefined) { removeFromScene = false; }\r\n        if (destroyChild === undefined) { destroyChild = false; }\r\n\r\n        if (!this.children.contains(child))\r\n        {\r\n            return this;\r\n        }\r\n\r\n        this.children.delete(child);\r\n\r\n        if (this.removeCallback)\r\n        {\r\n            this.removeCallback.call(this, child);\r\n        }\r\n\r\n        child.off('destroy', this.remove, this);\r\n\r\n        if (destroyChild)\r\n        {\r\n            child.destroy();\r\n        }\r\n        else if (removeFromScene)\r\n        {\r\n            child.scene.sys.displayList.remove(child);\r\n\r\n            if (child.preUpdate)\r\n            {\r\n                child.scene.sys.updateList.remove(child);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes all members of this Group and optionally removes them from the Scene and / or destroys them.\r\n     *\r\n     * Does not call {@link Phaser.GameObjects.Group#removeCallback}.\r\n     *\r\n     * @method Phaser.GameObjects.Group#clear\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [removeFromScene=false] - Optionally remove each Group member from the Scene.\r\n     * @param {boolean} [destroyChild=false] - Optionally call destroy on the removed Group members.\r\n     *\r\n     * @return {Phaser.GameObjects.Group} This group.\r\n     */\r\n    clear: function (removeFromScene, destroyChild)\r\n    {\r\n        if (removeFromScene === undefined) { removeFromScene = false; }\r\n        if (destroyChild === undefined) { destroyChild = false; }\r\n\r\n        var children = this.children;\r\n\r\n        for (var i = 0; i < children.size; i++)\r\n        {\r\n            var gameObject = children.entries[i];\r\n\r\n            gameObject.off('destroy', this.remove, this);\r\n\r\n            if (destroyChild)\r\n            {\r\n                gameObject.destroy();\r\n            }\r\n            else if (removeFromScene)\r\n            {\r\n                gameObject.scene.sys.displayList.remove(gameObject);\r\n\r\n                if (gameObject.preUpdate)\r\n                {\r\n                    gameObject.scene.sys.updateList.remove(gameObject);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.children.clear();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Tests if a Game Object is a member of this group.\r\n     *\r\n     * @method Phaser.GameObjects.Group#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - A Game Object.\r\n     *\r\n     * @return {boolean} True if the Game Object is a member of this group.\r\n     */\r\n    contains: function (child)\r\n    {\r\n        return this.children.contains(child);\r\n    },\r\n\r\n    /**\r\n     * All members of the group.\r\n     *\r\n     * @method Phaser.GameObjects.Group#getChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject[]} The group members.\r\n     */\r\n    getChildren: function ()\r\n    {\r\n        return this.children.entries;\r\n    },\r\n\r\n    /**\r\n     * The number of members of the group.\r\n     *\r\n     * @method Phaser.GameObjects.Group#getLength\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer}\r\n     */\r\n    getLength: function ()\r\n    {\r\n        return this.children.size;\r\n    },\r\n\r\n    /**\r\n     * Scans the Group, from top to bottom, for the first member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\r\n     * assigns `x` and `y`, and returns the member.\r\n     *\r\n     * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\r\n     * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n     *\r\n     * @method Phaser.GameObjects.Group#getFirst\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [state=false] - The {@link Phaser.GameObjects.GameObject#active} value to match.\r\n     * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n     * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n     * @param {number} [y] - The vertical position of the Game Object in the world.\r\n     * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n     * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n     * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n     *\r\n     * @return {?any} The first matching group member, or a newly created member, or null.\r\n     */\r\n    getFirst: function (state, createIfNull, x, y, key, frame, visible)\r\n    {\r\n        return this.getHandler(true, 1, state, createIfNull, x, y, key, frame, visible);\r\n    },\r\n\r\n    /**\r\n     * Scans the Group, from top to bottom, for the nth member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\r\n     * assigns `x` and `y`, and returns the member.\r\n     *\r\n     * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\r\n     * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n     *\r\n     * @method Phaser.GameObjects.Group#getFirstNth\r\n     * @since 3.6.0\r\n     *\r\n     * @param {integer} nth - The nth matching Group member to search for.\r\n     * @param {boolean} [state=false] - The {@link Phaser.GameObjects.GameObject#active} value to match.\r\n     * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n     * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n     * @param {number} [y] - The vertical position of the Game Object in the world.\r\n     * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n     * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n     * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n     *\r\n     * @return {?any} The first matching group member, or a newly created member, or null.\r\n     */\r\n    getFirstNth: function (nth, state, createIfNull, x, y, key, frame, visible)\r\n    {\r\n        return this.getHandler(true, nth, state, createIfNull, x, y, key, frame, visible);\r\n    },\r\n\r\n    /**\r\n     * Scans the Group for the last member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\r\n     * assigns `x` and `y`, and returns the member.\r\n     *\r\n     * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\r\n     * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n     *\r\n     * @method Phaser.GameObjects.Group#getLast\r\n     * @since 3.6.0\r\n     *\r\n     * @param {boolean} [state=false] - The {@link Phaser.GameObjects.GameObject#active} value to match.\r\n     * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n     * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n     * @param {number} [y] - The vertical position of the Game Object in the world.\r\n     * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n     * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n     * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n     *\r\n     * @return {?any} The first matching group member, or a newly created member, or null.\r\n     */\r\n    getLast: function (state, createIfNull, x, y, key, frame, visible)\r\n    {\r\n        return this.getHandler(false, 1, state, createIfNull, x, y, key, frame, visible);\r\n    },\r\n\r\n    /**\r\n     * Scans the Group for the last nth member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\r\n     * assigns `x` and `y`, and returns the member.\r\n     *\r\n     * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\r\n     * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n     *\r\n     * @method Phaser.GameObjects.Group#getLastNth\r\n     * @since 3.6.0\r\n     *\r\n     * @param {integer} nth - The nth matching Group member to search for.\r\n     * @param {boolean} [state=false] - The {@link Phaser.GameObjects.GameObject#active} value to match.\r\n     * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n     * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n     * @param {number} [y] - The vertical position of the Game Object in the world.\r\n     * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n     * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n     * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n     *\r\n     * @return {?any} The first matching group member, or a newly created member, or null.\r\n     */\r\n    getLastNth: function (nth, state, createIfNull, x, y, key, frame, visible)\r\n    {\r\n        return this.getHandler(false, nth, state, createIfNull, x, y, key, frame, visible);\r\n    },\r\n\r\n    /**\r\n     * Scans the group for the last member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\r\n     * assigns `x` and `y`, and returns the member.\r\n     *\r\n     * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\r\n     * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n     *\r\n     * @method Phaser.GameObjects.Group#getHandler\r\n     * @private\r\n     * @since 3.6.0\r\n     *\r\n     * @param {boolean} forwards - Search front to back or back to front?\r\n     * @param {integer} nth - Stop matching after nth successful matches.\r\n     * @param {boolean} [state=false] - The {@link Phaser.GameObjects.GameObject#active} value to match.\r\n     * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n     * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n     * @param {number} [y] - The vertical position of the Game Object in the world.\r\n     * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n     * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n     * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n     *\r\n     * @return {?any} The first matching group member, or a newly created member, or null.\r\n     */\r\n    getHandler: function (forwards, nth, state, createIfNull, x, y, key, frame, visible)\r\n    {\r\n        if (state === undefined) { state = false; }\r\n        if (createIfNull === undefined) { createIfNull = false; }\r\n\r\n        var gameObject;\r\n\r\n        var i;\r\n        var total = 0;\r\n        var children = this.children.entries;\r\n\r\n        if (forwards)\r\n        {\r\n            for (i = 0; i < children.length; i++)\r\n            {\r\n                gameObject = children[i];\r\n\r\n                if (gameObject.active === state)\r\n                {\r\n                    total++;\r\n\r\n                    if (total === nth)\r\n                    {\r\n                        break;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    gameObject = null;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (i = children.length - 1; i >= 0; i--)\r\n            {\r\n                gameObject = children[i];\r\n\r\n                if (gameObject.active === state)\r\n                {\r\n                    total++;\r\n\r\n                    if (total === nth)\r\n                    {\r\n                        break;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    gameObject = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (gameObject)\r\n        {\r\n            if (typeof(x) === 'number')\r\n            {\r\n                gameObject.x = x;\r\n            }\r\n\r\n            if (typeof(y) === 'number')\r\n            {\r\n                gameObject.y = y;\r\n            }\r\n\r\n            return gameObject;\r\n        }\r\n\r\n        //  Got this far? We need to create or bail\r\n        if (createIfNull)\r\n        {\r\n            return this.create(x, y, key, frame, visible);\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Scans the group for the first member that has an {@link Phaser.GameObjects.GameObject#active} state set to `false`,\r\n     * assigns `x` and `y`, and returns the member.\r\n     *\r\n     * If no inactive member is found and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\r\n     * The new Game Object will have its active state set to `true`.\r\n     * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n     *\r\n     * @method Phaser.GameObjects.Group#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n     * @param {number} [y] - The vertical position of the Game Object in the world.\r\n     * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n     * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n     * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n     *\r\n     * @return {?any} The first inactive group member, or a newly created member, or null.\r\n     */\r\n    get: function (x, y, key, frame, visible)\r\n    {\r\n        return this.getFirst(false, true, x, y, key, frame, visible);\r\n    },\r\n\r\n    /**\r\n     * Scans the group for the first member that has an {@link Phaser.GameObjects.GameObject#active} state set to `true`,\r\n     * assigns `x` and `y`, and returns the member.\r\n     *\r\n     * If no active member is found and `createIfNull` is `true` and the group isn't full then it will create a new one using `x`, `y`, `key`, `frame`, and `visible`.\r\n     * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n     *\r\n     * @method Phaser.GameObjects.Group#getFirstAlive\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n     * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n     * @param {number} [y] - The vertical position of the Game Object in the world.\r\n     * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n     * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n     * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n     *\r\n     * @return {any} The first active group member, or a newly created member, or null.\r\n     */\r\n    getFirstAlive: function (createIfNull, x, y, key, frame, visible)\r\n    {\r\n        return this.getFirst(true, createIfNull, x, y, key, frame, visible);\r\n    },\r\n\r\n    /**\r\n     * Scans the group for the first member that has an {@link Phaser.GameObjects.GameObject#active} state set to `false`,\r\n     * assigns `x` and `y`, and returns the member.\r\n     *\r\n     * If no inactive member is found and `createIfNull` is `true` and the group isn't full then it will create a new one using `x`, `y`, `key`, `frame`, and `visible`.\r\n     * The new Game Object will have an active state set to `true`.\r\n     * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n     *\r\n     * @method Phaser.GameObjects.Group#getFirstDead\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n     * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n     * @param {number} [y] - The vertical position of the Game Object in the world.\r\n     * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n     * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n     * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n     *\r\n     * @return {any} The first inactive group member, or a newly created member, or null.\r\n     */\r\n    getFirstDead: function (createIfNull, x, y, key, frame, visible)\r\n    {\r\n        return this.getFirst(false, createIfNull, x, y, key, frame, visible);\r\n    },\r\n\r\n    /**\r\n     * {@link Phaser.GameObjects.Components.Animation#play Plays} an animation for all members of this group.\r\n     *\r\n     * @method Phaser.GameObjects.Group#playAnimation\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The string-based key of the animation to play.\r\n     * @param {string} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n     *\r\n     * @return {Phaser.GameObjects.Group} This Group object.\r\n     */\r\n    playAnimation: function (key, startFrame)\r\n    {\r\n        Actions.PlayAnimation(this.children.entries, key, startFrame);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Whether this group's size at its {@link Phaser.GameObjects.Group#maxSize maximum}.\r\n     *\r\n     * @method Phaser.GameObjects.Group#isFull\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} True if the number of members equals {@link Phaser.GameObjects.Group#maxSize}.\r\n     */\r\n    isFull: function ()\r\n    {\r\n        if (this.maxSize === -1)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return (this.children.size >= this.maxSize);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Counts the number of active (or inactive) group members.\r\n     *\r\n     * @method Phaser.GameObjects.Group#countActive\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [value=true] - Count active (true) or inactive (false) group members.\r\n     *\r\n     * @return {integer} The number of group members with an active state matching the `active` argument.\r\n     */\r\n    countActive: function (value)\r\n    {\r\n        if (value === undefined) { value = true; }\r\n\r\n        var total = 0;\r\n\r\n        for (var i = 0; i < this.children.size; i++)\r\n        {\r\n            if (this.children.entries[i].active === value)\r\n            {\r\n                total++;\r\n            }\r\n        }\r\n\r\n        return total;\r\n    },\r\n\r\n    /**\r\n     * Counts the number of in-use (active) group members.\r\n     *\r\n     * @method Phaser.GameObjects.Group#getTotalUsed\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The number of group members with an active state of true.\r\n     */\r\n    getTotalUsed: function ()\r\n    {\r\n        return this.countActive();\r\n    },\r\n\r\n    /**\r\n     * The difference of {@link Phaser.GameObjects.Group#maxSize} and the number of active group members.\r\n     *\r\n     * This represents the number of group members that could be created or reactivated before reaching the size limit.\r\n     *\r\n     * @method Phaser.GameObjects.Group#getTotalFree\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} maxSize minus the number of active group numbers; or a large number (if maxSize is -1).\r\n     */\r\n    getTotalFree: function ()\r\n    {\r\n        var used = this.getTotalUsed();\r\n        var capacity = (this.maxSize === -1) ? 999999999999 : this.maxSize;\r\n\r\n        return (capacity - used);\r\n    },\r\n\r\n    /**\r\n     * Sets the depth of each group member.\r\n     *\r\n     * @method Phaser.GameObjects.Group#setDepth\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The amount to set the property to.\r\n     * @param {number} step - This is added to the `value` amount, multiplied by the iteration counter.\r\n     *\r\n     * @return {Phaser.GameObjects.Group} This Group object.\r\n     */\r\n    setDepth: function (value, step)\r\n    {\r\n        Actions.SetDepth(this.children.entries, value, step);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Deactivates a member of this group.\r\n     *\r\n     * @method Phaser.GameObjects.Group#kill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - A member of this group.\r\n     */\r\n    kill: function (gameObject)\r\n    {\r\n        if (this.children.contains(gameObject))\r\n        {\r\n            gameObject.setActive(false);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Deactivates and hides a member of this group.\r\n     *\r\n     * @method Phaser.GameObjects.Group#killAndHide\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - A member of this group.\r\n     */\r\n    killAndHide: function (gameObject)\r\n    {\r\n        if (this.children.contains(gameObject))\r\n        {\r\n            gameObject.setActive(false);\r\n            gameObject.setVisible(false);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Toggles (flips) the visible state of each member of this group.\r\n     *\r\n     * @method Phaser.GameObjects.Group#toggleVisible\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Group} This Group object.\r\n     */\r\n    toggleVisible: function ()\r\n    {\r\n        Actions.ToggleVisible(this.children.entries);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Empties this group and removes it from the Scene.\r\n     *\r\n     * Does not call {@link Phaser.GameObjects.Group#removeCallback}.\r\n     *\r\n     * @method Phaser.GameObjects.Group#destroy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [destroyChildren=false] - Also {@link Phaser.GameObjects.GameObject#destroy} each group member.\r\n     */\r\n    destroy: function (destroyChildren)\r\n    {\r\n        if (destroyChildren === undefined) { destroyChildren = false; }\r\n\r\n        //  This Game Object had already been destroyed\r\n        if (!this.scene || this.ignoreDestroy)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (destroyChildren)\r\n        {\r\n            var children = this.children;\r\n\r\n            for (var i = 0; i < children.size; i++)\r\n            {\r\n                var gameObject = children.entries[i];\r\n\r\n                //  Remove the event hook first or it'll go all recursive hell on us\r\n                gameObject.off('destroy', this.remove, this);\r\n\r\n                gameObject.destroy();\r\n            }\r\n        }\r\n\r\n        this.children.clear();\r\n\r\n        this.scene = undefined;\r\n        this.children = undefined;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Group;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Actions","Class","GetFastValue","GetValue","IsPlainObject","Range","Set","Sprite","Group","initialize","scene","children","config","Array","isArray","isParent","classType","active","maxSize","defaultKey","defaultFrame","runChildUpdate","createCallback","removeCallback","createMultipleCallback","createMultiple","create","x","y","key","frame","visible","undefined","isFull","child","sys","displayList","add","preUpdate","updateList","setActive","output","i","length","entries","createFromConfig","concat","options","repeat","randomKey","randomFrame","yoyo","quantity","max","range","qty","random","randomB","c","created","a","b","push","stepX","stepY","SetXY","rotation","stepRotation","SetRotation","scaleX","scaleY","stepScaleX","stepScaleY","SetScale","alpha","stepAlpha","SetAlpha","hitArea","hitAreaCallback","SetHitArea","grid","GridAlign","call","time","delta","size","temp","slice","item","update","addToScene","set","on","remove","addMultiple","removeFromScene","destroyChild","contains","delete","off","destroy","clear","gameObject","getChildren","getLength","getFirst","state","createIfNull","getHandler","getFirstNth","nth","getLast","getLastNth","forwards","total","get","getFirstAlive","getFirstDead","playAnimation","startFrame","PlayAnimation","countActive","value","getTotalUsed","getTotalFree","used","capacity","setDepth","step","SetDepth","kill","killAndHide","setVisible","toggleVisible","ToggleVisible","destroyChildren","ignoreDestroy"]
}
