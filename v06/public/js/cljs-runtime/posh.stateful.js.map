{"version":3,"sources":["posh/stateful.cljc"],"mappings":"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","names":["posh.stateful/get-posh-atom","posh-item","cljs.core/meta","posh.stateful/poshdb->conn","poshdb","cljs.core/deref","posh.lib.db/poshdb->attrs","posh.stateful/new-posh","dcfg","retrieve","cljs.core.atom","posh.core/empty-tree","posh.stateful/add-db","posh-atom","db-id","conn","schema","opts","cljs.core/with-meta","cljs.core/reset!","posh.core.add_db","posh.stateful/add-pull","pull-pattern","eid","posh.core/add-pull","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","posh.stateful/add-q","seq47550","G__47551","cljs.core/first","cljs.core/next","self__4723__auto__","query","args","cljs.core.remove","cljs.core/nil?","cljs.core.map","cljs.core.apply","cljs.core.partial","posh.core/add-q","posh.stateful/add-filter-tx","tx-patterns","p1__47554#","cljs.core.swap_BANG_","posh.core/add-filter-tx","posh.stateful/add-filter-pull","p1__47556#","posh.core/add-filter-pull","posh.stateful/add-filter-q","seq47558","G__47559","p1__47557#","posh.core/add-filter-q","posh.stateful/rm","posh.core/remove-item","posh.stateful/transact","tx","posh.core/add-tx","posh.stateful/transact-all!","posh.core/process-tx!","posh.stateful/cache","posh-query","cljs.core.get","posh.stateful/results","posh.stateful/reload-patterns","posh.stateful/pass-patterns","posh.stateful/datoms","posh.stateful/datoms-t"],"sourcesContent":["(ns posh.stateful\n  (:require [posh.core :as p]\n            [posh.lib.db :as db]\n            [posh.lib.update :as u]))\n\n(defn get-posh-atom [posh-item]\n  (:posh (meta posh-item)))\n\n(defn poshdb->conn [poshdb]\n  (:conn (db/poshdb->attrs @(get-posh-atom poshdb) poshdb)))\n\n(defn new-posh [dcfg retrieve]\n  (atom (p/empty-tree dcfg retrieve)))\n\n(defn add-db [posh-atom db-id conn schema opts]\n  (with-meta\n    (:return (reset! posh-atom (p/add-db @posh-atom db-id conn schema opts)))\n    {:posh posh-atom}))\n\n;;;;;;;;; adding queries  ;;;;;;;;;;\n\n(defn add-pull [poshdb pull-pattern eid]\n  (let [posh-atom (get-posh-atom poshdb)]\n    (with-meta\n      (:return (reset! posh-atom (p/add-pull @posh-atom poshdb pull-pattern eid)))\n      {:posh posh-atom})))\n\n(defn add-q [query & args]\n  (let [posh-atom (first (remove nil? (map get-posh-atom args)))]\n    (with-meta\n      (:return (reset! posh-atom (apply (partial p/add-q @posh-atom query) args)))\n      {:posh posh-atom})))\n\n\n;;;;;;;;; adding filters  ;;;;;;;;;;\n\n(defn add-filter-tx [poshdb tx-patterns]\n  (let [posh-atom (get-posh-atom poshdb)]\n    (with-meta\n      (:return (swap! posh-atom #(p/add-filter-tx % poshdb tx-patterns)))\n      {:posh posh-atom})))\n\n(defn add-filter-pull [poshdb pull-pattern eid]\n  (let [posh-atom (get-posh-atom poshdb)]\n    (with-meta\n      (:return (swap! posh-atom #(p/add-filter-pull % poshdb pull-pattern eid)))\n      {:posh posh-atom})))\n\n(defn add-filter-q [query & args]\n  (let [posh-atom (first (remove nil? (map get-posh-atom args)))]\n    (with-meta\n      (:return (swap! posh-atom #(apply p/add-filter-q % query args)))\n      {:posh posh-atom})))\n\n;;;; removing item ;;;;\n\n(defn rm [posh-item]\n  (let [posh-atom (get-posh-atom posh-item)]\n    (reset! posh-atom (p/remove-item @posh-atom posh-item))))\n\n;;;;;;;;;; TX ;;;;;;;;;;;;;\n\n;; just adds tx to posh, call process-transact! to actually do them\n\n\n(defn transact [posh-item tx]\n  (let [posh-atom (get-posh-atom posh-item)]\n    (do\n      (reset! posh-atom (p/add-tx @posh-atom posh-item tx))\n      true)))\n\n(defn transact-all! [posh-atom]\n  (reset! posh-atom (p/process-tx! @posh-atom)))\n\n\n;;;;;;;;;  get info from a query ;;;;;;;;;;;;;;;\n(defn cache [posh-query]\n  (get (:cache @(get-posh-atom posh-query)) posh-query))\n\n(defn results [posh-query]\n  (:results (get (:cache @(get-posh-atom posh-query)) posh-query)))\n\n(defn reload-patterns [posh-query]\n  (:reload-patterns (get (:cache @(get-posh-atom posh-query)) posh-query)))\n\n(defn pass-patterns [posh-query]\n  (:pass-patterns (get (:cache @(get-posh-atom posh-query)) posh-query)))\n\n(defn datoms [posh-query]\n  (:datoms (get (:cache @(get-posh-atom posh-query)) posh-query)))\n\n(defn datoms-t [posh-query]\n  (:datoms-t (get (:cache @(get-posh-atom posh-query)) posh-query)))\n\n"]}