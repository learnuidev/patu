{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$TileToWorldXY.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,iEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO7H,IAAIC,aAAeH,OAAA,CAAQ,iEAAR,CAAnB,CACII,aAAeJ,OAAA,CAAQ,iEAAR,CADnB,CAEIK,QAAUL,OAAA,CAAQ,6CAAR,CA6BdC,OAAAC,QAAA,CAVoBI,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAeC,KAAf,CAAsBC,MAAtB,CAA8BC,KAA9B,CAC7B,CACkBC,IAAAA,EAAd,GAAIH,KAAJ,GAA2BA,KAA3B,CAAmC,IAAIJ,OAAJ,CAAY,CAAZ,CAAe,CAAf,CAAnC,CAEAI,MAAAI,EAAA,CAAUV,YAAA,CAAaI,KAAb,CAAoBG,MAApB,CAA4BC,KAA5B,CACVF;KAAAK,EAAA,CAAUV,YAAA,CAAaI,KAAb,CAAoBE,MAApB,CAA4BC,KAA5B,CAEV,OAAOF,MANX,CA7B6H;",
"sources":["node_modules/Phaser/src/tilemaps/components/TileToWorldXY.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$TileToWorldXY\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar TileToWorldX = require('./TileToWorldX');\r\nvar TileToWorldY = require('./TileToWorldY');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n * layer's position, scale and scroll. This will return a new Vector2 object or update the given\r\n * `point` object.\r\n *\r\n * @function Phaser.Tilemaps.Components.TileToWorldXY\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {Phaser.Math.Vector2} The XY location in world coordinates.\r\n */\r\nvar TileToWorldXY = function (tileX, tileY, point, camera, layer)\r\n{\r\n    if (point === undefined) { point = new Vector2(0, 0); }\r\n\r\n    point.x = TileToWorldX(tileX, camera, layer);\r\n    point.y = TileToWorldY(tileY, camera, layer);\r\n\r\n    return point;\r\n};\r\n\r\nmodule.exports = TileToWorldXY;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","TileToWorldX","TileToWorldY","Vector2","TileToWorldXY","tileX","tileY","point","camera","layer","undefined","x","y"]
}
