{
"version":3,
"file":"module$node_modules$Phaser$src$geom$polygon$Earcut.js",
"lineCount":19,
"mappings":"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",
"sources":["node_modules/Phaser/src/geom/polygon/Earcut.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$geom$polygon$Earcut\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\n//  2.1.1 (Mar 17, 2016)\r\n\r\n/*\r\nISC License\r\n\r\nCopyright (c) 2016, Mapbox\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any purpose\r\nwith or without fee is hereby granted, provided that the above copyright notice\r\nand this permission notice appear in all copies.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\r\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\r\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\r\nTHIS SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = earcut;\r\n\r\n/*\r\nvertices is a flat array of vertice coordinates like [x0,y0, x1,y1, x2,y2, ...].\r\nholes is an array of hole indices if any (e.g. [5, 8] for a 12-vertice input would mean one hole with vertices 5\u20137 and another with 8\u201311).\r\ndimensions is the number of coordinates per vertice in the input array (2 by default).\r\nEach group of three vertice indices in the resulting array forms a triangle.\r\n */\r\n\r\nfunction earcut(data, holeIndices, dim) {\r\n\r\n    dim = dim || 2;\r\n\r\n    var hasHoles = holeIndices && holeIndices.length,\r\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\r\n        outerNode = linkedList(data, 0, outerLen, dim, true),\r\n        triangles = [];\r\n\r\n    if (!outerNode) return triangles;\r\n\r\n    var minX, minY, maxX, maxY, x, y, size;\r\n\r\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\r\n\r\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n    if (data.length > 80 * dim) {\r\n        minX = maxX = data[0];\r\n        minY = maxY = data[1];\r\n\r\n        for (var i = dim; i < outerLen; i += dim) {\r\n            x = data[i];\r\n            y = data[i + 1];\r\n            if (x < minX) minX = x;\r\n            if (y < minY) minY = y;\r\n            if (x > maxX) maxX = x;\r\n            if (y > maxY) maxY = y;\r\n        }\r\n\r\n        // minX, minY and size are later used to transform coords into integers for z-order calculation\r\n        size = Math.max(maxX - minX, maxY - minY);\r\n    }\r\n\r\n    earcutLinked(outerNode, triangles, dim, minX, minY, size);\r\n\r\n    return triangles;\r\n}\r\n\r\n// create a circular doubly linked list from polygon points in the specified winding order\r\nfunction linkedList(data, start, end, dim, clockwise) {\r\n    var i, last;\r\n\r\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\r\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\r\n    } else {\r\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\r\n    }\r\n\r\n    if (last && equals(last, last.next)) {\r\n        removeNode(last);\r\n        last = last.next;\r\n    }\r\n\r\n    return last;\r\n}\r\n\r\n// eliminate colinear or duplicate points\r\nfunction filterPoints(start, end) {\r\n    if (!start) return start;\r\n    if (!end) end = start;\r\n\r\n    var p = start,\r\n        again;\r\n    do {\r\n        again = false;\r\n\r\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\r\n            removeNode(p);\r\n            p = end = p.prev;\r\n            if (p === p.next) return null;\r\n            again = true;\r\n\r\n        } else {\r\n            p = p.next;\r\n        }\r\n    } while (again || p !== end);\r\n\r\n    return end;\r\n}\r\n\r\n// main ear slicing loop which triangulates a polygon (given as a linked list)\r\nfunction earcutLinked(ear, triangles, dim, minX, minY, size, pass) {\r\n    if (!ear) return;\r\n\r\n    // interlink polygon nodes in z-order\r\n    if (!pass && size) indexCurve(ear, minX, minY, size);\r\n\r\n    var stop = ear,\r\n        prev, next;\r\n\r\n    // iterate through ears, slicing them one by one\r\n    while (ear.prev !== ear.next) {\r\n        prev = ear.prev;\r\n        next = ear.next;\r\n\r\n        if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {\r\n            // cut off the triangle\r\n            triangles.push(prev.i / dim);\r\n            triangles.push(ear.i / dim);\r\n            triangles.push(next.i / dim);\r\n\r\n            removeNode(ear);\r\n\r\n            // skipping the next vertice leads to less sliver triangles\r\n            ear = next.next;\r\n            stop = next.next;\r\n\r\n            continue;\r\n        }\r\n\r\n        ear = next;\r\n\r\n        // if we looped through the whole remaining polygon and can't find any more ears\r\n        if (ear === stop) {\r\n            // try filtering points and slicing again\r\n            if (!pass) {\r\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1);\r\n\r\n            // if this didn't work, try curing all small self-intersections locally\r\n            } else if (pass === 1) {\r\n                ear = cureLocalIntersections(ear, triangles, dim);\r\n                earcutLinked(ear, triangles, dim, minX, minY, size, 2);\r\n\r\n            // as a last resort, try splitting the remaining polygon into two\r\n            } else if (pass === 2) {\r\n                splitEarcut(ear, triangles, dim, minX, minY, size);\r\n            }\r\n\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// check whether a polygon node forms a valid ear with adjacent nodes\r\nfunction isEar(ear) {\r\n    var a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\r\n\r\n    // now make sure we don't have other points inside the potential ear\r\n    var p = ear.next.next;\r\n\r\n    while (p !== ear.prev) {\r\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n            area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.next;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction isEarHashed(ear, minX, minY, size) {\r\n    var a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\r\n\r\n    // triangle bbox; min & max are calculated like this for speed\r\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\r\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\r\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\r\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\r\n\r\n    // z-order range for the current triangle bbox;\r\n    var minZ = zOrder(minTX, minTY, minX, minY, size),\r\n        maxZ = zOrder(maxTX, maxTY, minX, minY, size);\r\n\r\n    // first look for points inside the triangle in increasing z-order\r\n    var p = ear.nextZ;\r\n\r\n    while (p && p.z <= maxZ) {\r\n        if (p !== ear.prev && p !== ear.next &&\r\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n            area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.nextZ;\r\n    }\r\n\r\n    // then look for points in decreasing z-order\r\n    p = ear.prevZ;\r\n\r\n    while (p && p.z >= minZ) {\r\n        if (p !== ear.prev && p !== ear.next &&\r\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n            area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.prevZ;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// go through all polygon nodes and cure small local self-intersections\r\nfunction cureLocalIntersections(start, triangles, dim) {\r\n    var p = start;\r\n    do {\r\n        var a = p.prev,\r\n            b = p.next.next;\r\n\r\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\r\n\r\n            triangles.push(a.i / dim);\r\n            triangles.push(p.i / dim);\r\n            triangles.push(b.i / dim);\r\n\r\n            // remove two nodes involved\r\n            removeNode(p);\r\n            removeNode(p.next);\r\n\r\n            p = start = b;\r\n        }\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    return p;\r\n}\r\n\r\n// try splitting polygon into two and triangulate them independently\r\nfunction splitEarcut(start, triangles, dim, minX, minY, size) {\r\n    // look for a valid diagonal that divides the polygon into two\r\n    var a = start;\r\n    do {\r\n        var b = a.next.next;\r\n        while (b !== a.prev) {\r\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\r\n                // split the polygon in two by the diagonal\r\n                var c = splitPolygon(a, b);\r\n\r\n                // filter colinear points around the cuts\r\n                a = filterPoints(a, a.next);\r\n                c = filterPoints(c, c.next);\r\n\r\n                // run earcut on each half\r\n                earcutLinked(a, triangles, dim, minX, minY, size);\r\n                earcutLinked(c, triangles, dim, minX, minY, size);\r\n                return;\r\n            }\r\n            b = b.next;\r\n        }\r\n        a = a.next;\r\n    } while (a !== start);\r\n}\r\n\r\n// link every hole into the outer loop, producing a single-ring polygon without holes\r\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\r\n    var queue = [],\r\n        i, len, start, end, list;\r\n\r\n    for (i = 0, len = holeIndices.length; i < len; i++) {\r\n        start = holeIndices[i] * dim;\r\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n        list = linkedList(data, start, end, dim, false);\r\n        if (list === list.next) list.steiner = true;\r\n        queue.push(getLeftmost(list));\r\n    }\r\n\r\n    queue.sort(compareX);\r\n\r\n    // process holes from left to right\r\n    for (i = 0; i < queue.length; i++) {\r\n        eliminateHole(queue[i], outerNode);\r\n        outerNode = filterPoints(outerNode, outerNode.next);\r\n    }\r\n\r\n    return outerNode;\r\n}\r\n\r\nfunction compareX(a, b) {\r\n    return a.x - b.x;\r\n}\r\n\r\n// find a bridge between vertices that connects hole with an outer ring and and link it\r\nfunction eliminateHole(hole, outerNode) {\r\n    outerNode = findHoleBridge(hole, outerNode);\r\n    if (outerNode) {\r\n        var b = splitPolygon(outerNode, hole);\r\n        filterPoints(b, b.next);\r\n    }\r\n}\r\n\r\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\nfunction findHoleBridge(hole, outerNode) {\r\n    var p = outerNode,\r\n        hx = hole.x,\r\n        hy = hole.y,\r\n        qx = -Infinity,\r\n        m;\r\n\r\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\r\n    // segment's endpoint with lesser x will be potential connection point\r\n    do {\r\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\r\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\r\n            if (x <= hx && x > qx) {\r\n                qx = x;\r\n                if (x === hx) {\r\n                    if (hy === p.y) return p;\r\n                    if (hy === p.next.y) return p.next;\r\n                }\r\n                m = p.x < p.next.x ? p : p.next;\r\n            }\r\n        }\r\n        p = p.next;\r\n    } while (p !== outerNode);\r\n\r\n    if (!m) return null;\r\n\r\n    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint\r\n\r\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\r\n    // if there are no points found, we have a valid connection;\r\n    // otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n    var stop = m,\r\n        mx = m.x,\r\n        my = m.y,\r\n        tanMin = Infinity,\r\n        tan;\r\n\r\n    p = m.next;\r\n\r\n    while (p !== stop) {\r\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\r\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\r\n\r\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\r\n\r\n            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {\r\n                m = p;\r\n                tanMin = tan;\r\n            }\r\n        }\r\n\r\n        p = p.next;\r\n    }\r\n\r\n    return m;\r\n}\r\n\r\n// interlink polygon nodes in z-order\r\nfunction indexCurve(start, minX, minY, size) {\r\n    var p = start;\r\n    do {\r\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, size);\r\n        p.prevZ = p.prev;\r\n        p.nextZ = p.next;\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    p.prevZ.nextZ = null;\r\n    p.prevZ = null;\r\n\r\n    sortLinked(p);\r\n}\r\n\r\n// Simon Tatham's linked list merge sort algorithm\r\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\nfunction sortLinked(list) {\r\n    var i, p, q, e, tail, numMerges, pSize, qSize,\r\n        inSize = 1;\r\n\r\n    do {\r\n        p = list;\r\n        list = null;\r\n        tail = null;\r\n        numMerges = 0;\r\n\r\n        while (p) {\r\n            numMerges++;\r\n            q = p;\r\n            pSize = 0;\r\n            for (i = 0; i < inSize; i++) {\r\n                pSize++;\r\n                q = q.nextZ;\r\n                if (!q) break;\r\n            }\r\n            qSize = inSize;\r\n\r\n            while (pSize > 0 || (qSize > 0 && q)) {\r\n\r\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\r\n                    e = p;\r\n                    p = p.nextZ;\r\n                    pSize--;\r\n                } else {\r\n                    e = q;\r\n                    q = q.nextZ;\r\n                    qSize--;\r\n                }\r\n\r\n                if (tail) tail.nextZ = e;\r\n                else list = e;\r\n\r\n                e.prevZ = tail;\r\n                tail = e;\r\n            }\r\n\r\n            p = q;\r\n        }\r\n\r\n        tail.nextZ = null;\r\n        inSize *= 2;\r\n\r\n    } while (numMerges > 1);\r\n\r\n    return list;\r\n}\r\n\r\n// z-order of a point given coords and size of the data bounding box\r\nfunction zOrder(x, y, minX, minY, size) {\r\n    // coords are transformed into non-negative 15-bit integer range\r\n    x = 32767 * (x - minX) / size;\r\n    y = 32767 * (y - minY) / size;\r\n\r\n    x = (x | (x << 8)) & 0x00FF00FF;\r\n    x = (x | (x << 4)) & 0x0F0F0F0F;\r\n    x = (x | (x << 2)) & 0x33333333;\r\n    x = (x | (x << 1)) & 0x55555555;\r\n\r\n    y = (y | (y << 8)) & 0x00FF00FF;\r\n    y = (y | (y << 4)) & 0x0F0F0F0F;\r\n    y = (y | (y << 2)) & 0x33333333;\r\n    y = (y | (y << 1)) & 0x55555555;\r\n\r\n    return x | (y << 1);\r\n}\r\n\r\n// find the leftmost node of a polygon ring\r\nfunction getLeftmost(start) {\r\n    var p = start,\r\n        leftmost = start;\r\n    do {\r\n        if (p.x < leftmost.x) leftmost = p;\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    return leftmost;\r\n}\r\n\r\n// check if a point lies within a convex triangle\r\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\r\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\r\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\r\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\r\n}\r\n\r\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\nfunction isValidDiagonal(a, b) {\r\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&\r\n           locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);\r\n}\r\n\r\n// signed area of a triangle\r\nfunction area(p, q, r) {\r\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n}\r\n\r\n// check if two points are equal\r\nfunction equals(p1, p2) {\r\n    return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n// check if two segments intersect\r\nfunction intersects(p1, q1, p2, q2) {\r\n    if ((equals(p1, q1) && equals(p2, q2)) ||\r\n        (equals(p1, q2) && equals(p2, q1))) return true;\r\n    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&\r\n           area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;\r\n}\r\n\r\n// check if a polygon diagonal intersects any polygon segments\r\nfunction intersectsPolygon(a, b) {\r\n    var p = a;\r\n    do {\r\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n                intersects(p, p.next, a, b)) return true;\r\n        p = p.next;\r\n    } while (p !== a);\r\n\r\n    return false;\r\n}\r\n\r\n// check if a polygon diagonal is locally inside the polygon\r\nfunction locallyInside(a, b) {\r\n    return area(a.prev, a, a.next) < 0 ?\r\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\r\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\r\n}\r\n\r\n// check if the middle point of a polygon diagonal is inside the polygon\r\nfunction middleInside(a, b) {\r\n    var p = a,\r\n        inside = false,\r\n        px = (a.x + b.x) / 2,\r\n        py = (a.y + b.y) / 2;\r\n    do {\r\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\r\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\r\n            inside = !inside;\r\n        p = p.next;\r\n    } while (p !== a);\r\n\r\n    return inside;\r\n}\r\n\r\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\nfunction splitPolygon(a, b) {\r\n    var a2 = new Node(a.i, a.x, a.y),\r\n        b2 = new Node(b.i, b.x, b.y),\r\n        an = a.next,\r\n        bp = b.prev;\r\n\r\n    a.next = b;\r\n    b.prev = a;\r\n\r\n    a2.next = an;\r\n    an.prev = a2;\r\n\r\n    b2.next = a2;\r\n    a2.prev = b2;\r\n\r\n    bp.next = b2;\r\n    b2.prev = bp;\r\n\r\n    return b2;\r\n}\r\n\r\n// create a node and optionally link it with previous one (in a circular doubly linked list)\r\nfunction insertNode(i, x, y, last) {\r\n    var p = new Node(i, x, y);\r\n\r\n    if (!last) {\r\n        p.prev = p;\r\n        p.next = p;\r\n\r\n    } else {\r\n        p.next = last.next;\r\n        p.prev = last;\r\n        last.next.prev = p;\r\n        last.next = p;\r\n    }\r\n    return p;\r\n}\r\n\r\nfunction removeNode(p) {\r\n    p.next.prev = p.prev;\r\n    p.prev.next = p.next;\r\n\r\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\r\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\r\n}\r\n\r\nfunction Node(i, x, y) {\r\n    // vertice index in coordinates array\r\n    this.i = i;\r\n\r\n    // vertex coordinates\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    // previous and next vertice nodes in a polygon ring\r\n    this.prev = null;\r\n    this.next = null;\r\n\r\n    // z-order curve value\r\n    this.z = null;\r\n\r\n    // previous and next nodes in z-order\r\n    this.prevZ = null;\r\n    this.nextZ = null;\r\n\r\n    // indicates whether this is a steiner point\r\n    this.steiner = false;\r\n}\r\n\r\n// return a percentage difference between the polygon area and its triangulation area;\r\n// used to verify correctness of triangulation\r\nearcut.deviation = function (data, holeIndices, dim, triangles) {\r\n    var hasHoles = holeIndices && holeIndices.length;\r\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\r\n\r\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\r\n    if (hasHoles) {\r\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\r\n            var start = holeIndices[i] * dim;\r\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\r\n        }\r\n    }\r\n\r\n    var trianglesArea = 0;\r\n    for (i = 0; i < triangles.length; i += 3) {\r\n        var a = triangles[i] * dim;\r\n        var b = triangles[i + 1] * dim;\r\n        var c = triangles[i + 2] * dim;\r\n        trianglesArea += Math.abs(\r\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\r\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\r\n    }\r\n\r\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\r\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\r\n};\r\n\r\nfunction signedArea(data, start, end, dim) {\r\n    var sum = 0;\r\n    for (var i = start, j = end - dim; i < end; i += dim) {\r\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\r\n        j = i;\r\n    }\r\n    return sum;\r\n}\r\n\r\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\r\nearcut.flatten = function (data) {\r\n    var dim = data[0][0].length,\r\n        result = {vertices: [], holes: [], dimensions: dim},\r\n        holeIndex = 0;\r\n\r\n    for (var i = 0; i < data.length; i++) {\r\n        for (var j = 0; j < data[i].length; j++) {\r\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\r\n        }\r\n        if (i > 0) {\r\n            holeIndex += data[i - 1].length;\r\n            result.holes.push(holeIndex);\r\n        }\r\n    }\r\n    return result;\r\n};\n};"],
"names":["shadow$provide","global","require","module","exports","earcut","data","holeIndices","dim","hasHoles","length","outerLen","outerNode","linkedList","triangles","maxX","queue","len","i","start","end","list","next","steiner","push","getLeftmost","sort","compareX","findHoleBridge","hole","b","splitPolygon","filterPoints","minX","minY","maxY","x","y","size","Math","max","earcutLinked","clockwise","signedArea","last","insertNode","equals","removeNode","again","p","area","prev","ear","pass","z","zOrder","prevZ","nextZ","numMerges","pSize","qSize","inSize","tail","q","e","stop","a","c","maxTX","maxTY","minZ","minTX","minTY","maxZ","pointInTriangle","intersects","locallyInside","inside","px","py","hx","hy","qx","Infinity","m","mx","my","tanMin","tan","abs","leftmost","ax","ay","bx","by","cx","cy","r","p1","p2","q1","q2","a2","Node","b2","an","bp","sum","j","deviation","earcut.deviation","polygonArea","trianglesArea","flatten","earcut.flatten","result","vertices","holes","dimensions","holeIndex","d"]
}
