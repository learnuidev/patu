{"version":3,"sources":["datascript/impl/entity.cljc"],"mappings":"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","names":["datascript.impl.entity/entid","db","eid","cljs.core/sequential?","cljs.core/Keyword","datascript.db/entid","js/Error","datascript.impl.entity/entity","datascript.db/db?","temp__5735__auto__","e","G__28435","G__28436","G__28437","G__28438","datascript.impl.entity/->Entity","cljs.core/volatile!","datascript.impl.entity/entity-attr","a","datoms","datascript.db/multival?","datascript.db/ref?","p1__28444#","p2__28445#","cljs.core.reduce","cljs.core.conj","p1__28446#","p2__28447#","cljs.core/first","datascript.impl.entity/-lookup-backwards","attr","not-found","temp__5733__auto__","cljs.core/not-empty","datascript.db/-search","datascript.db/component?","p1__28452#","p2__28453#","datascript.impl.entity/multival->js","val","cljs.core/to-array","datascript.impl.entity/js-seq","datascript.impl.entity/touch","iter__4529__auto__","s__28485","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__28487","cljs.core/chunk-buffer","i__28486","vec__28500","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28484","cljs.core/chunk-rest","vec__28522","cljs.core/cons","cljs.core/rest","cljs.core/deref","v","unused__9542__auto__","self__","G__28686","args28545","cljs.core/aclone","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","datascript.impl.entity/Entity","touched","cache","this","cljs.core/pr-str*","other","datascript.impl.entity/equiv-entity","cljs.core/es6-iterator","cljs.core/keys","cljs.core/es6-entries-iterator","cljs.core.map","cljs.core/second","cljs.core._EQ_","datascript.db/reverse-ref?","datascript.db/reverse-ref","G__28634","datascript.impl.entity/lookup-entity","f","seq__28550","chunk__28551","count__28552","i__28553","vec__28574","c__4556__auto__","cljs.core/chunk-first","vec__28583","cljs.core/next","use-as-this","seq__28588","chunk__28589","count__28590","i__28591","vec__28618","vec__28628","o","_","cljs.core/hash","k","cljs.core.not_EQ_","writer","opts","cljs.core/-pr-writer","cljs.core.assoc","datascript.impl.entity/entity?","x","that","var_args","G__28736","datascript.impl.entity.lookup_entity","temp__5737__auto__","fexpr__28741","value","cljs.core/vreset!","datascript.impl.entity/touch-components","a->v","cljs.core/reduce-kv","acc","cljs.core/set","datascript.impl.entity/datoms->cache","part","cljs.core.partition_by","goog/exportSymbol"],"sourcesContent":["(ns ^:no-doc datascript.impl.entity\n  (:refer-clojure :exclude [keys get])\n  (:require [#?(:cljs cljs.core :clj clojure.core) :as c]\n            [datascript.db :as db]))\n\n(declare entity ->Entity equiv-entity lookup-entity touch)\n\n(defn- entid [db eid]\n  (when (or (number? eid)\n            (sequential? eid)\n            (keyword? eid))\n    (db/entid db eid)))\n\n(defn entity [db eid]\n  {:pre [(db/db? db)]}\n  (when-let [e (entid db eid)]\n    (->Entity db e (volatile! false) (volatile! {}))))\n\n(defn- entity-attr [db a datoms]\n  (if (db/multival? db a)\n    (if (db/ref? db a)\n      (reduce #(conj %1 (entity db (:v %2))) #{} datoms)\n      (reduce #(conj %1 (:v %2)) #{} datoms))\n    (if (db/ref? db a)\n      (entity db (:v (first datoms)))\n      (:v (first datoms)))))\n\n(defn- -lookup-backwards [db eid attr not-found]\n  (if-let [datoms (not-empty (db/-search db [nil attr eid]))]\n    (if (db/component? db attr)\n      (entity db (:e (first datoms)))\n      (reduce #(conj %1 (entity db (:e %2))) #{} datoms))\n    not-found))\n\n#?(:cljs\n   (defn- multival->js [val]\n     (when val (to-array val))))\n\n#?(:cljs\n   (defn- js-seq [e]\n     (touch e)\n     (for [[a v] @(.-cache e)]\n       (if (db/multival? (.-db e) a)\n         [a (multival->js v)]\n         [a v]))))\n\n(deftype Entity [db eid touched cache]\n  #?@(:cljs\n      [Object\n       (toString [this]\n                 (pr-str* this))\n       (equiv [this other]\n              (equiv-entity this other))\n\n       ;; js/map interface\n       (keys [this]\n             (es6-iterator (c/keys this)))\n       (entries [this]\n                (es6-entries-iterator (js-seq this)))\n       (values [this]\n               (es6-iterator (map second (js-seq this))))\n       (has [this attr]\n            (not (nil? (.get this attr))))\n       (get [this attr]\n            (if (= attr \":db/id\")\n              eid\n              (if (db/reverse-ref? attr)\n                (-> (-lookup-backwards db eid (db/reverse-ref attr) nil)\n                    multival->js)\n                (cond-> (lookup-entity this attr)\n                  (db/multival? db attr) multival->js))))\n       (forEach [this f]\n                (doseq [[a v] (js-seq this)]\n                  (f v a this)))\n       (forEach [this f use-as-this]\n                (doseq [[a v] (js-seq this)]\n                  (.call f use-as-this v a this)))\n\n       ;; js fallbacks\n       (key_set   [this] (to-array (c/keys this)))\n       (entry_set [this] (to-array (map to-array (js-seq this))))\n       (value_set [this] (to-array (map second (js-seq this))))\n\n       IEquiv\n       (-equiv [this o] (equiv-entity this o))\n\n       IHash\n       (-hash [_]\n              (hash eid)) ;; db?\n\n       ISeqable\n       (-seq [this]\n             (touch this)\n             (seq @cache))\n\n       ICounted\n       (-count [this]\n               (touch this)\n               (count @cache))\n\n       ILookup\n       (-lookup [this attr]           (lookup-entity this attr nil))\n       (-lookup [this attr not-found] (lookup-entity this attr not-found))\n\n       IAssociative\n       (-contains-key? [this k]\n                       (not= ::nf (lookup-entity this k ::nf)))\n\n       IFn\n       (-invoke [this k]\n                (lookup-entity this k))\n       (-invoke [this k not-found]\n                (lookup-entity this k not-found))\n\n       IPrintWithWriter\n       (-pr-writer [_ writer opts]\n                   (-pr-writer (assoc @cache :db/id eid) writer opts))]\n\n      :clj\n      [Object\n       (toString [e]      (pr-str (assoc @cache :db/id eid)))\n       (hashCode [e]      (hash eid)) ; db?\n       (equals [e o]      (equiv-entity e o))\n\n       clojure.lang.Seqable\n       (seq [e]           (touch e) (seq @cache))\n\n       clojure.lang.Associative\n       (equiv [e o]       (equiv-entity e o))\n       (containsKey [e k] (not= ::nf (lookup-entity e k ::nf)))\n       (entryAt [e k]     (some->> (lookup-entity e k) (clojure.lang.MapEntry. k)))\n\n       (empty [e]         (throw (UnsupportedOperationException.)))\n       (assoc [e k v]     (throw (UnsupportedOperationException.)))\n       (cons  [e [k v]]   (throw (UnsupportedOperationException.)))\n       (count [e]         (touch e) (count @(.-cache e)))\n\n       clojure.lang.ILookup\n       (valAt [e k]       (lookup-entity e k))\n       (valAt [e k not-found] (lookup-entity e k not-found))\n\n       clojure.lang.IFn\n       (invoke [e k]      (lookup-entity e k))\n       (invoke [e k not-found] (lookup-entity e k not-found))\n       ]))\n\n(defn entity? [x] (instance? Entity x))\n\n#?(:clj\n   (defmethod print-method Entity [e, ^java.io.Writer w]\n     (.write w (str e))))\n\n(defn- equiv-entity [^Entity this that]\n  (and\n   (instance? Entity that)\n   ;; (= db  (.-db ^Entity that))\n   (= (.-eid this) (.-eid ^Entity that))))\n\n(defn- lookup-entity\n  ([this attr] (lookup-entity this attr nil))\n  ([^Entity this attr not-found]\n   (if (= attr :db/id)\n     (.-eid this)\n     (if (db/reverse-ref? attr)\n       (-lookup-backwards (.-db this) (.-eid this) (db/reverse-ref attr) not-found)\n       (if-some [v (@(.-cache this) attr)]\n         v\n         (if @(.-touched this)\n           not-found\n           (if-some [datoms (not-empty (db/-search (.-db this) [(.-eid this) attr]))]\n             (let [value (entity-attr (.-db this) attr datoms)]\n               (vreset! (.-cache this) (assoc @(.-cache this) attr value))\n               value)\n             not-found)))))))\n\n(defn touch-components [db a->v]\n  (reduce-kv (fn [acc a v]\n               (assoc acc a\n                 (if (db/component? db a)\n                   (if (db/multival? db a)\n                     (set (map touch v))\n                     (touch v))\n                   v)))\n             {} a->v))\n\n(defn- datoms->cache [db datoms]\n  (reduce (fn [acc part]\n    (let [a (:a (first part))]\n      (assoc acc a (entity-attr db a part))))\n    {} (partition-by :a datoms)))\n\n(defn touch [^Entity e]\n  {:pre [(entity? e)]}\n  (when-not @(.-touched e)\n    (when-let [datoms (not-empty (db/-search (.-db e) [(.-eid e)]))]\n      (vreset! (.-cache e) (->> datoms\n                                (datoms->cache (.-db e))\n                                (touch-components (.-db e))))\n      (vreset! (.-touched e) true)))\n  e)\n\n#?(:cljs (goog/exportSymbol \"datascript.impl.entity.Entity\" Entity))\n"]}