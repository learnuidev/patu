{
"version":3,
"file":"module$node_modules$Phaser$src$cameras$2d$effects$Pan.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/cameras/2d/effects/Pan.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$cameras$2d$effects$Pan\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../../math/Clamp');\r\nvar Class = require('../../../utils/Class');\r\nvar Vector2 = require('../../../math/Vector2');\r\nvar EaseMap = require('../../../math/easing/EaseMap');\r\n\r\n/**\r\n * @classdesc\r\n * A Camera Pan effect.\r\n *\r\n * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\r\n * over the duration and with the ease specified.\r\n *\r\n * Only the camera scroll is moved. None of the objects it is displaying are impacted, i.e. their positions do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect if required.\r\n *\r\n * @class Pan\r\n * @memberOf Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.11.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\r\nvar Pan = new Class({\r\n\r\n    initialize:\r\n\r\n    function Pan (camera)\r\n    {\r\n        /**\r\n         * The Camera this effect belongs to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @readOnly\r\n         * @since 3.11.0\r\n         */\r\n        this.camera = camera;\r\n\r\n        /**\r\n         * Is this effect actively running?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#isRunning\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @default false\r\n         * @since 3.11.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * The duration of the effect, in milliseconds.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#duration\r\n         * @type {integer}\r\n         * @readOnly\r\n         * @default 0\r\n         * @since 3.11.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * The starting scroll coordinates to pan the camera from.\r\n         * \r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#source\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.11.0\r\n         */\r\n        this.source = new Vector2();\r\n\r\n        /**\r\n         * The constantly updated value based on zoom.\r\n         * \r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#current\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.11.0\r\n         */\r\n        this.current = new Vector2();\r\n\r\n        /**\r\n         * The destination scroll coordinates to pan the camera to.\r\n         * \r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#destination\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.11.0\r\n         */\r\n        this.destination = new Vector2();\r\n\r\n        /**\r\n         * The ease function to use during the pan.\r\n         * \r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#ease\r\n         * @type {function}\r\n         * @since 3.11.0\r\n         */\r\n        this.ease;\r\n\r\n        /**\r\n         * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#progress\r\n         * @type {number}\r\n         * @since 3.11.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Effect elapsed timer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#_elapsed\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._elapsed = 0;\r\n\r\n        /**\r\n         * @callback CameraPanCallback\r\n         *\r\n         * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.\r\n         * @param {number} progress - The progress of the effect. A value between 0 and 1.\r\n         * @param {number} x - The Camera's new scrollX coordinate.\r\n         * @param {number} y - The Camera's new scrollY coordinate.\r\n         */\r\n\r\n        /**\r\n         * This callback is invoked every frame for the duration of the effect.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#_onUpdate\r\n         * @type {?CameraPanCallback}\r\n         * @private\r\n         * @default null\r\n         * @since 3.11.0\r\n         */\r\n        this._onUpdate;\r\n\r\n        /**\r\n         * On Complete callback scope.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#_onUpdateScope\r\n         * @type {any}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._onUpdateScope;\r\n    },\r\n\r\n    /**\r\n     * This event is fired when the pan effect begins to run on a camera.\r\n     *\r\n     * @event CameraPanStartEvent\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera that the effect began on.\r\n     * @param {Phaser.Cameras.Scene2D.Effects.Pan} effect - A reference to the effect instance.\r\n     * @param {integer} duration - The duration of the effect.\r\n     * @param {number} x - The destination scroll x coordinate.\r\n     * @param {number} y - The destination scroll y coordinate.\r\n     */\r\n\r\n    /**\r\n     * This event is fired when the pan effect completes.\r\n     *\r\n     * @event CameraPanCompleteEvent\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera that the effect began on.\r\n     * @param {Phaser.Cameras.Scene2D.Effects.Pan} effect - A reference to the effect instance.\r\n     */\r\n\r\n    /**\r\n     * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\r\n     * over the duration and with the ease specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Pan#start\r\n     * @fires CameraPanStartEvent\r\n     * @fires CameraPanCompleteEvent\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The destination x coordinate to scroll the center of the Camera viewport to.\r\n     * @param {number} y - The destination y coordinate to scroll the center of the Camera viewport to.\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {(string|function)} [ease='Linear'] - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.\r\n     * @param {boolean} [force=false] - Force the shake effect to start immediately, even if already running.\r\n     * @param {CameraPanCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n     * the current camera scroll x coordinate and the current camera scroll y coordinate.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n     */\r\n    start: function (x, y, duration, ease, force, callback, context)\r\n    {\r\n        if (duration === undefined) { duration = 1000; }\r\n        if (ease === undefined) { ease = EaseMap.Linear; }\r\n        if (force === undefined) { force = false; }\r\n        if (callback === undefined) { callback = null; }\r\n        if (context === undefined) { context = this.camera.scene; }\r\n\r\n        var cam = this.camera;\r\n\r\n        if (!force && this.isRunning)\r\n        {\r\n            return cam;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this.duration = duration;\r\n        this.progress = 0;\r\n\r\n        //  Starting from\r\n        this.source.set(cam.scrollX, cam.scrollY);\r\n\r\n        //  Destination\r\n        this.destination.set(x, y);\r\n\r\n        //  Zoom factored version\r\n        cam.getScroll(x, y, this.current);\r\n\r\n        //  Using this ease\r\n        if (typeof ease === 'string' && EaseMap.hasOwnProperty(ease))\r\n        {\r\n            this.ease = EaseMap[ease];\r\n        }\r\n        else if (typeof ease === 'function')\r\n        {\r\n            this.ease = ease;\r\n        }\r\n\r\n        this._elapsed = 0;\r\n\r\n        this._onUpdate = callback;\r\n        this._onUpdateScope = context;\r\n\r\n        this.camera.emit('camerapanstart', this.camera, this, duration, x, y);\r\n\r\n        return cam;\r\n    },\r\n\r\n    /**\r\n     * The main update loop for this effect. Called automatically by the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Pan#update\r\n     * @since 3.11.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._elapsed += delta;\r\n\r\n        var progress = Clamp(this._elapsed / this.duration, 0, 1);\r\n\r\n        this.progress = progress;\r\n\r\n        var cam = this.camera;\r\n\r\n        if (this._elapsed < this.duration)\r\n        {\r\n            var v = this.ease(progress);\r\n\r\n            cam.getScroll(this.destination.x, this.destination.y, this.current);\r\n\r\n            var x = this.source.x + ((this.current.x - this.source.x) * v);\r\n            var y = this.source.y + ((this.current.y - this.source.y) * v);\r\n\r\n            cam.setScroll(x, y);\r\n\r\n            if (this._onUpdate)\r\n            {\r\n                this._onUpdate.call(this._onUpdateScope, cam, progress, x, y);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            cam.centerOn(this.destination.x, this.destination.y);\r\n\r\n            if (this._onUpdate)\r\n            {\r\n                this._onUpdate.call(this._onUpdateScope, cam, progress, cam.scrollX, cam.scrollY);\r\n            }\r\n    \r\n            this.effectComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called internally when the effect completes.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Pan#effectComplete\r\n     * @since 3.11.0\r\n     */\r\n    effectComplete: function ()\r\n    {\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n\r\n        this.isRunning = false;\r\n\r\n        this.camera.emit('camerapancomplete', this.camera, this);\r\n    },\r\n\r\n    /**\r\n     * Resets this camera effect.\r\n     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Pan#reset\r\n     * @since 3.11.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.isRunning = false;\r\n\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n    },\r\n\r\n    /**\r\n     * Destroys this effect, releasing it from the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Pan#destroy\r\n     * @since 3.11.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.camera = null;\r\n        this.source = null;\r\n        this.destination = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Pan;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Clamp","Class","Vector2","EaseMap","Pan","initialize","camera","isRunning","duration","source","current","destination","_elapsed","progress","start","x","y","ease","force","callback","context","undefined","Linear","scene","cam","set","scrollX","scrollY","getScroll","hasOwnProperty","_onUpdate","_onUpdateScope","emit","update","time","delta","v","setScroll","call","centerOn","effectComplete","reset","destroy"]
}
