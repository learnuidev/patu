{
"version":3,
"file":"module$node_modules$$formatjs$ecma402_abstract$NumberFormat$ComputeExponentForMagnitude.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,wFAAA,CAA4G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEpJC,MAAAC,eAAA,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAAI,4BAAA,CAAsC,IAAK,EA6D3CJ,QAAAI,4BAAA,CAvDAA,QAAoC,CAACC,YAAD,CAAeC,SAAf,CAA0BC,EAA1B,CAA8B,CAC1DC,EAAAA,CAAmBD,EAAAC,iBACnBC,GAAAA,CAAgBD,EAAA,CAAiBH,YAAjB,CAF0C,KAGvBK,eAAiBD,EAAAC,eAHM,CAGwBC,gBAAkBF,EAAAE,gBACxG,QADeF,EAAAG,SACf,EACI,KAAK,UAAL,CACI,MAAO,EACX,MAAK,YAAL,CACI,MAAON,UACX;KAAK,aAAL,CACI,MAAmC,EAAnC,CAAOO,IAAAC,MAAA,CAAWR,SAAX,CAAuB,CAAvB,CACX,SAGQS,YAAAA,CAAiBN,EAAAM,eAArB,KAAgFC,gBAAkBP,EAAAO,gBAEpF,WAAd,GAF2DP,EAAAQ,MAE3D,EAAgD,MAAhD,GAA4BD,eAA5B,CAGIE,YAHJ,CAGmBC,CAFAT,cAAAU,QAAAC,SAAA,CAAgCV,eAAhC,CAEAQ,EADXT,cAAAU,QAAAC,SAAA,CAAgCX,cAAAU,QAAAE,GAAA,CAA0B,CAA1B,CAAhC,CACWH,OAHnB,EAMQI,EAEJ,CAFcb,cAAAU,QAAAG,QAAA,CAA+BZ,eAA/B,CAEd,EADID,cAAAU,QAAAG,QAAA,CAA+Bb,cAAAU,QAAAE,GAAA,CAA0B,CAA1B,CAA/B,CACJ,CAAAJ,YAAA,CAAkC,MAAnB,GAAAH,YAAA,CAA4BQ,EAAAC,KAA5B,CAA2CD,EAAAJ,MAR9D,CAUA,IAAI,CAACD,YAAL,CACI,MAAO,EAEPO;EAAAA,CAAMC,MAAA,CAAOb,IAAAc,IAAA,CAAS,EAAT,CAAarB,SAAb,CAAP,CACNsB,UAAAA,CAAa3B,MAAA4B,KAAA,CAAYX,YAAZ,CACjB,IAAIO,EAAJ,CAAUG,SAAA,CAAW,CAAX,CAAV,CACI,MAAO,EAEX,IAAIH,EAAJ,CAAUG,SAAA,CAAWA,SAAAE,OAAX,CAA+B,CAA/B,CAAV,CACI,MAAOF,UAAA,CAAWA,SAAAE,OAAX,CAA+B,CAA/B,CAAAA,OAAP,CAAkD,CAElDC,GAAAA,CAAIH,SAAAI,QAAA,CAAmBP,EAAnB,CACR,IAAU,EAAV,GAAIM,EAAJ,CACI,MAAO,EAIPE,UAAAA,CAAeL,SAAA,CAAWG,EAAX,CAGnB,OAAuB,GAAvB,GADqBb,YAAA,CAAae,SAAb,CAAAC,MACrB,CACW,CADX,CAIQD,SAAAH,OAJR,CAKIZ,YAAA,CAAae,SAAb,CAAAC,MAAAC,MAAA,CAAuC,IAAvC,CAAA,CAA6C,CAA7C,CAAAL,OA/CZ,CAJ8D,CATkF;",
"sources":["node_modules/@formatjs/ecma402-abstract/NumberFormat/ComputeExponentForMagnitude.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$formatjs$ecma402_abstract$NumberFormat$ComputeExponentForMagnitude\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ComputeExponentForMagnitude = void 0;\n/**\n * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a\n * number of the given magnitude (power of ten of the most significant digit) according to the\n * locale and the desired notation (scientific, engineering, or compact).\n */\nfunction ComputeExponentForMagnitude(numberFormat, magnitude, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    var internalSlots = getInternalSlots(numberFormat);\n    var notation = internalSlots.notation, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;\n    switch (notation) {\n        case 'standard':\n            return 0;\n        case 'scientific':\n            return magnitude;\n        case 'engineering':\n            return Math.floor(magnitude / 3) * 3;\n        default: {\n            // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a\n            // number of the given magnitude in compact notation for the current locale.\n            var compactDisplay = internalSlots.compactDisplay, style = internalSlots.style, currencyDisplay = internalSlots.currencyDisplay;\n            var thresholdMap = void 0;\n            if (style === 'currency' && currencyDisplay !== 'name') {\n                var currency = dataLocaleData.numbers.currency[numberingSystem] ||\n                    dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];\n                thresholdMap = currency.short;\n            }\n            else {\n                var decimal = dataLocaleData.numbers.decimal[numberingSystem] ||\n                    dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];\n                thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;\n            }\n            if (!thresholdMap) {\n                return 0;\n            }\n            var num = String(Math.pow(10, magnitude));\n            var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed\n            if (num < thresholds[0]) {\n                return 0;\n            }\n            if (num > thresholds[thresholds.length - 1]) {\n                return thresholds[thresholds.length - 1].length - 1;\n            }\n            var i = thresholds.indexOf(num);\n            if (i === -1) {\n                return 0;\n            }\n            // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats\n            // Special handling if the pattern is precisely `0`.\n            var magnitudeKey = thresholds[i];\n            // TODO: do we need to handle plural here?\n            var compactPattern = thresholdMap[magnitudeKey].other;\n            if (compactPattern === '0') {\n                return 0;\n            }\n            // Example: in zh-TW, `10000000` maps to `0000\u842c`. So we need to return 8 - 4 = 4 here.\n            return (magnitudeKey.length -\n                thresholdMap[magnitudeKey].other.match(/0+/)[0].length);\n        }\n    }\n}\nexports.ComputeExponentForMagnitude = ComputeExponentForMagnitude;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ComputeExponentForMagnitude","numberFormat","magnitude","_a","getInternalSlots","internalSlots","dataLocaleData","numberingSystem","notation","Math","floor","compactDisplay","currencyDisplay","style","thresholdMap","short","numbers","currency","nu","decimal","long","num","String","pow","thresholds","keys","length","i","indexOf","magnitudeKey","other","match"]
}
