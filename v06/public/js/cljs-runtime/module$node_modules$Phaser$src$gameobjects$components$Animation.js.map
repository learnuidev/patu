{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$components$Animation.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/components/Animation.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$components$Animation\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\n\r\n/**\r\n * This event is dispatched when an animation starts playing.\r\n * \r\n * Listen for it on the Game Object: `sprite.on('animationstart', listener)`\r\n *\r\n * @event Phaser.GameObjects.Components.Animation#onStartEvent\r\n * @param {Phaser.Animations.Animation} animation - Reference to the currently playing animation.\r\n * @param {Phaser.Animations.AnimationFrame} frame - Reference to the current Animation Frame.\r\n * @param {Phaser.GameObjects.Sprite} gameObject - Reference to the Game Object on which the event occurred.\r\n */\r\n\r\n/**\r\n * This event is dispatched when an animation restarts.\r\n * \r\n * Listen for it on the Game Object: `sprite.on('animationrestart', listener)`\r\n *\r\n * @event Phaser.GameObjects.Components.Animation#onRestartEvent\r\n * @param {Phaser.Animations.Animation} animation - Reference to the currently playing animation.\r\n * @param {Phaser.Animations.AnimationFrame} frame - Reference to the current Animation Frame.\r\n * @param {Phaser.GameObjects.Sprite} gameObject - Reference to the Game Object on which the event occurred.\r\n */\r\n\r\n/**\r\n * This event is dispatched when an animation repeats.\r\n * \r\n * Listen for it on the Game Object: `sprite.on('animationrepeat', listener)`\r\n *\r\n * @event Phaser.GameObjects.Components.Animation#onRepeatEvent\r\n * @param {Phaser.Animations.Animation} animation - Reference to the currently playing animation.\r\n * @param {Phaser.Animations.AnimationFrame} frame - Reference to the current Animation Frame.\r\n * @param {integer} repeatCount - The number of times this animation has repeated.\r\n * @param {Phaser.GameObjects.Sprite} gameObject - Reference to the Game Object on which the event occurred.\r\n */\r\n\r\n/**\r\n * This event is dispatched when an animation updates. This happens when the animation frame changes,\r\n * based on the animation frame rate and other factors like timeScale and delay.\r\n * \r\n * Listen for it on the Game Object: `sprite.on('animationupdate', listener)`\r\n *\r\n * @event Phaser.GameObjects.Components.Animation#onUpdateEvent\r\n * @param {Phaser.Animations.Animation} animation - Reference to the currently playing animation.\r\n * @param {Phaser.Animations.AnimationFrame} frame - Reference to the current Animation Frame.\r\n * @param {Phaser.GameObjects.Sprite} gameObject - Reference to the Game Object on which the event occurred.\r\n */\r\n\r\n/**\r\n * This event is dispatched when an animation completes playing, either naturally or via Animation.stop.\r\n * \r\n * Listen for it on the Game Object: `sprite.on('animationcomplete', listener)`\r\n *\r\n * @event Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n * @param {Phaser.Animations.Animation} animation - Reference to the currently playing animation.\r\n * @param {Phaser.Animations.AnimationFrame} frame - Reference to the current Animation Frame.\r\n * @param {Phaser.GameObjects.Sprite} gameObject - Reference to the Game Object on which the event occurred.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A Game Object Animation Controller.\r\n *\r\n * This controller lives as an instance within a Game Object, accessible as `sprite.anims`.\r\n *\r\n * @class Animation\r\n * @memberOf Phaser.GameObjects.Components\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} parent - The Game Object to which this animation controller belongs.\r\n */\r\nvar Animation = new Class({\r\n\r\n    initialize:\r\n\r\n    function Animation (parent)\r\n    {\r\n        /**\r\n         * The Game Object to which this animation controller belongs.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#parent\r\n         * @type {Phaser.GameObjects.GameObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent = parent;\r\n\r\n        /**\r\n         * A reference to the global Animation Manager.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#animationManager\r\n         * @type {Phaser.Animations.AnimationManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.animationManager = parent.scene.sys.anims;\r\n\r\n        this.animationManager.once('remove', this.remove, this);\r\n\r\n        /**\r\n         * Is an animation currently playing or not?\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#isPlaying\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.isPlaying = false;\r\n\r\n        /**\r\n         * The current Animation loaded into this Animation Controller.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#currentAnim\r\n         * @type {?Phaser.Animations.Animation}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.currentAnim = null;\r\n\r\n        /**\r\n         * The current AnimationFrame being displayed by this Animation Controller.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#currentFrame\r\n         * @type {?Phaser.Animations.AnimationFrame}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.currentFrame = null;\r\n\r\n        /**\r\n         * Time scale factor.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_timeScale\r\n         * @type {number}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this._timeScale = 1;\r\n\r\n        /**\r\n         * The frame rate of playback in frames per second.\r\n         * The default is 24 if the `duration` property is `null`.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#frameRate\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.frameRate = 0;\r\n\r\n        /**\r\n         * How long the animation should play for, in milliseconds.\r\n         * If the `frameRate` property has been set then it overrides this value,\r\n         * otherwise the `frameRate` is derived from `duration`.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#duration\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * ms per frame, not including frame specific modifiers that may be present in the Animation data.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#msPerFrame\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.msPerFrame = 0;\r\n\r\n        /**\r\n         * Skip frames if the time lags, or always advanced anyway?\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#skipMissedFrames\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.skipMissedFrames = true;\r\n\r\n        /**\r\n         * A delay before starting playback, in milliseconds.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_delay\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._delay = 0;\r\n\r\n        /**\r\n         * Number of times to repeat the animation (-1 for infinity)\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_repeat\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._repeat = 0;\r\n\r\n        /**\r\n         * Delay before the repeat starts, in milliseconds.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_repeatDelay\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._repeatDelay = 0;\r\n\r\n        /**\r\n         * Should the animation yoyo? (reverse back down to the start) before repeating?\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_yoyo\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._yoyo = false;\r\n\r\n        /**\r\n         * Will the playhead move forwards (`true`) or in reverse (`false`).\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#forward\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.forward = true;\r\n\r\n        /**\r\n         * An Internal trigger that's play the animation in reverse mode ('true') or not ('false'),\r\n         * needed because forward can be changed by yoyo feature.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#forward\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.12.0\r\n         */\r\n        this._reverse = false;\r\n\r\n        /**\r\n         * Internal time overflow accumulator.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#accumulator\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accumulator = 0;\r\n\r\n        /**\r\n         * The time point at which the next animation frame will change.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#nextTick\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.nextTick = 0;\r\n\r\n        /**\r\n         * An internal counter keeping track of how many repeats are left to play.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#repeatCounter\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.repeatCounter = 0;\r\n\r\n        /**\r\n         * An internal flag keeping track of pending repeats.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#pendingRepeat\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.pendingRepeat = false;\r\n\r\n        /**\r\n         * Is the Animation paused?\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_paused\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._paused = false;\r\n\r\n        /**\r\n         * Was the animation previously playing before being paused?\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_wasPlaying\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._wasPlaying = false;\r\n\r\n        /**\r\n         * Internal property tracking if this Animation is waiting to stop.\r\n         *\r\n         * 0 = No\r\n         * 1 = Waiting for ms to pass\r\n         * 2 = Waiting for repeat\r\n         * 3 = Waiting for specific frame\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_pendingStop\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.4.0\r\n         */\r\n        this._pendingStop = 0;\r\n\r\n        /**\r\n         * Internal property used by _pendingStop.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_pendingStopValue\r\n         * @type {any}\r\n         * @private\r\n         * @since 3.4.0\r\n         */\r\n        this._pendingStopValue;\r\n    },\r\n\r\n    /**\r\n     * Sets the amount of time, in milliseconds, that the animation will be delayed before starting playback.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setDelay\r\n     * @since 3.4.0\r\n     *\r\n     * @param {integer} [value=0] - The amount of time, in milliseconds, to wait before starting playback.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    setDelay: function (value)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n\r\n        this._delay = value;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Gets the amount of time, in milliseconds that the animation will be delayed before starting playback.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getDelay\r\n     * @since 3.4.0\r\n     *\r\n     * @return {integer} The amount of time, in milliseconds, the Animation will wait before starting playback.\r\n     */\r\n    getDelay: function ()\r\n    {\r\n        return this._delay;\r\n    },\r\n\r\n    /**\r\n     * Waits for the specified delay, in milliseconds, then starts playback of the requested animation.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#delayedPlay\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} delay - The delay, in milliseconds, to wait before starting the animation playing.\r\n     * @param {string} key - The key of the animation to play.\r\n     * @param {integer} [startFrame=0] - The frame of the animation to start from.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    delayedPlay: function (delay, key, startFrame)\r\n    {\r\n        this.play(key, true, startFrame);\r\n\r\n        this.nextTick += delay;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Returns the key of the animation currently loaded into this component.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getCurrentKey\r\n     * @since 3.0.0\r\n     *\r\n     * @return {string} The key of the Animation loaded into this component.\r\n     */\r\n    getCurrentKey: function ()\r\n    {\r\n        if (this.currentAnim)\r\n        {\r\n            return this.currentAnim.key;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal method used to load an animation into this component.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#load\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the animation to load.\r\n     * @param {integer} [startFrame=0] - The start frame of the animation to load.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    load: function (key, startFrame)\r\n    {\r\n        if (startFrame === undefined) { startFrame = 0; }\r\n\r\n        if (this.isPlaying)\r\n        {\r\n            this.stop();\r\n        }\r\n\r\n        //  Load the new animation in\r\n        this.animationManager.load(this, key, startFrame);\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Pause the current animation and set the `isPlaying` property to `false`.\r\n     * You can optionally pause it at a specific frame.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} [atFrame] - An optional frame to set after pausing the animation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    pause: function (atFrame)\r\n    {\r\n        if (!this._paused)\r\n        {\r\n            this._paused = true;\r\n            this._wasPlaying = this.isPlaying;\r\n            this.isPlaying = false;\r\n        }\r\n\r\n        if (atFrame !== undefined)\r\n        {\r\n            this.updateFrame(atFrame);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Resumes playback of a paused animation and sets the `isPlaying` property to `true`.\r\n     * You can optionally tell it to start playback from a specific frame.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} [fromFrame] - An optional frame to set before restarting playback.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    resume: function (fromFrame)\r\n    {\r\n        if (this._paused)\r\n        {\r\n            this._paused = false;\r\n            this.isPlaying = this._wasPlaying;\r\n        }\r\n\r\n        if (fromFrame !== undefined)\r\n        {\r\n            this.updateFrame(fromFrame);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * `true` if the current animation is paused, otherwise `false`.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#isPaused\r\n     * @readOnly\r\n     * @type {boolean}\r\n     * @since 3.4.0\r\n     */\r\n    isPaused: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._paused;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Plays an Animation on the Game Object that owns this Animation Component.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#play\r\n     * @fires Phaser.GameObjects.Components.Animation#onStartEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The string-based key of the animation to play, as defined previously in the Animation Manager.\r\n     * @param {boolean} [ignoreIfPlaying=false] - If an animation is already playing then ignore this call.\r\n     * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    play: function (key, ignoreIfPlaying, startFrame)\r\n    {\r\n        if (ignoreIfPlaying === undefined) { ignoreIfPlaying = false; }\r\n        if (startFrame === undefined) { startFrame = 0; }\r\n\r\n        if (ignoreIfPlaying && this.isPlaying && this.currentAnim.key === key)\r\n        {\r\n            return this.parent;\r\n        }\r\n\r\n        this.forward = true;\r\n        this._reverse = false;\r\n\r\n        return this._startAnimation(key, startFrame);\r\n    },\r\n\r\n    /**\r\n     * Plays an Animation (in reverse mode) on the Game Object that owns this Animation Component.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#playReverse\r\n     * @fires Phaser.GameObjects.Components.Animation#onStartEvent\r\n     * @since 3.12.0\r\n     *\r\n     * @param {string} key - The string-based key of the animation to play, as defined previously in the Animation Manager.\r\n     * @param {boolean} [ignoreIfPlaying=false] - If an animation is already playing then ignore this call.\r\n     * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    playReverse: function (key, ignoreIfPlaying, startFrame)\r\n    {\r\n        if (ignoreIfPlaying === undefined) { ignoreIfPlaying = false; }\r\n        if (startFrame === undefined) { startFrame = 0; }\r\n\r\n        if (ignoreIfPlaying && this.isPlaying && this.currentAnim.key === key)\r\n        {\r\n            return this.parent;\r\n        }\r\n\r\n        this.forward = false;\r\n        this._reverse = true;\r\n\r\n        return this._startAnimation(key, startFrame);\r\n    },\r\n\r\n    /**\r\n     * Load an Animation and fires 'onStartEvent' event,\r\n     * extracted from 'play' method\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#_startAnimation\r\n     * @fires Phaser.GameObjects.Components.Animation#onStartEvent\r\n     * @since 3.12.0\r\n     *\r\n     * @param {string} key - The string-based key of the animation to play, as defined previously in the Animation Manager.\r\n     * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    _startAnimation: function (key, startFrame)\r\n    {\r\n        this.load(key, startFrame);\r\n\r\n        var anim = this.currentAnim;\r\n        var gameObject = this.parent;\r\n\r\n        //  Should give us 9,007,199,254,740,991 safe repeats\r\n        this.repeatCounter = (this._repeat === -1) ? Number.MAX_VALUE : this._repeat;\r\n\r\n        anim.getFirstTick(this);\r\n\r\n        this.isPlaying = true;\r\n        this.pendingRepeat = false;\r\n\r\n        if (anim.showOnStart)\r\n        {\r\n            gameObject.visible = true;\r\n        }\r\n\r\n        gameObject.emit('animationstart', this.currentAnim, this.currentFrame, gameObject);\r\n\r\n        return gameObject;\r\n    },\r\n\r\n    /**\r\n     * Reverse an Animation that is already playing on the Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#reverse\r\n     * @since 3.12.0\r\n     *\r\n     * @param {string} key - The string-based key of the animation to play, as defined previously in the Animation Manager.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    reverse: function (key)\r\n    {\r\n        if (!this.isPlaying || this.currentAnim.key !== key) { return this.parent; }\r\n        this._reverse = !this._reverse;\r\n        this.forward = !this.forward;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Returns a value between 0 and 1 indicating how far this animation is through, ignoring repeats and yoyos.\r\n     * If the animation has a non-zero repeat defined, `getProgress` and `getTotalProgress` will be different\r\n     * because `getProgress` doesn't include any repeats or repeat delays, whereas `getTotalProgress` does.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getProgress\r\n     * @since 3.4.0\r\n     *\r\n     * @return {number} The progress of the current animation, between 0 and 1.\r\n     */\r\n    getProgress: function ()\r\n    {\r\n        var p = this.currentFrame.progress;\r\n\r\n        if (!this.forward)\r\n        {\r\n            p = 1 - p;\r\n        }\r\n\r\n        return p;\r\n    },\r\n\r\n    /**\r\n     * Takes a value between 0 and 1 and uses it to set how far this animation is through playback.\r\n     * Does not factor in repeats or yoyos, but does handle playing forwards or backwards.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setProgress\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} [value=0] - The progress value, between 0 and 1.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    setProgress: function (value)\r\n    {\r\n        if (!this.forward)\r\n        {\r\n            value = 1 - value;\r\n        }\r\n\r\n        this.setCurrentFrame(this.currentAnim.getFrameByProgress(value));\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Handle the removal of an animation from the Animation Manager.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The key of the removed Animation.\r\n     * @param {Phaser.Animations.Animation} [animation] - The removed Animation.\r\n     */\r\n    remove: function (key, animation)\r\n    {\r\n        if (animation === undefined) { animation = this.currentAnim; }\r\n\r\n        if (this.isPlaying && animation.key === this.currentAnim.key)\r\n        {\r\n            this.stop();\r\n\r\n            this.setCurrentFrame(this.currentAnim.frames[0]);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Gets the number of times that the animation will repeat\r\n     * after its first iteration. For example, if returns 1, the animation will\r\n     * play a total of twice (the initial play plus 1 repeat).\r\n     * A value of -1 means the animation will repeat indefinitely.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getRepeat\r\n     * @since 3.4.0\r\n     *\r\n     * @return {integer} The number of times that the animation will repeat.\r\n     */\r\n    getRepeat: function ()\r\n    {\r\n        return this._repeat;\r\n    },\r\n\r\n    /**\r\n     * Sets the number of times that the animation should repeat\r\n     * after its first iteration. For example, if repeat is 1, the animation will\r\n     * play a total of twice (the initial play plus 1 repeat).\r\n     * To repeat indefinitely, use -1. repeat should always be an integer.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setRepeat\r\n     * @since 3.4.0\r\n     *\r\n     * @param {integer} value - The number of times that the animation should repeat.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    setRepeat: function (value)\r\n    {\r\n        this._repeat = value;\r\n\r\n        this.repeatCounter = 0;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Gets the amount of delay between repeats, if any.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getRepeatDelay\r\n     * @since 3.4.0\r\n     *\r\n     * @return {number} The delay between repeats.\r\n     */\r\n    getRepeatDelay: function ()\r\n    {\r\n        return this._repeatDelay;\r\n    },\r\n\r\n    /**\r\n     * Sets the amount of time in seconds between repeats.\r\n     * For example, if `repeat` is 2 and `repeatDelay` is 10, the animation will play initially,\r\n     * then wait for 10 seconds before repeating, then play again, then wait another 10 seconds\r\n     * before doing its final repeat.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setRepeatDelay\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} value - The delay to wait between repeats, in seconds.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    setRepeatDelay: function (value)\r\n    {\r\n        this._repeatDelay = value;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Restarts the current animation from its beginning, optionally including its delay value.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#restart\r\n     * @fires Phaser.GameObjects.Components.Animation#onRestartEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [includeDelay=false] - Whether to include the delay value of the animation when restarting.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    restart: function (includeDelay)\r\n    {\r\n        if (includeDelay === undefined) { includeDelay = false; }\r\n\r\n        this.currentAnim.getFirstTick(this, includeDelay);\r\n\r\n        this.forward = true;\r\n        this.isPlaying = true;\r\n        this.pendingRepeat = false;\r\n        this._paused = false;\r\n\r\n        //  Set frame\r\n        this.updateFrame(this.currentAnim.frames[0]);\r\n\r\n        var gameObject = this.parent;\r\n\r\n        gameObject.emit('animationrestart', this.currentAnim, this.currentFrame, gameObject);\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Immediately stops the current animation from playing and dispatches the `animationcomplete` event.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#stop\r\n     * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    stop: function ()\r\n    {\r\n        this._pendingStop = 0;\r\n\r\n        this.isPlaying = false;\r\n\r\n        var gameObject = this.parent;\r\n\r\n        gameObject.emit('animationcomplete', this.currentAnim, this.currentFrame, gameObject);\r\n\r\n        return gameObject;\r\n    },\r\n\r\n    /**\r\n     * Stops the current animation from playing after the specified time delay, given in milliseconds.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#stopAfterDelay\r\n     * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n     * @since 3.4.0\r\n     *\r\n     * @param {integer} delay - The number of milliseconds to wait before stopping this animation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    stopAfterDelay: function (delay)\r\n    {\r\n        this._pendingStop = 1;\r\n        this._pendingStopValue = delay;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Stops the current animation from playing when it next repeats.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#stopOnRepeat\r\n     * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n     * @since 3.4.0\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    stopOnRepeat: function ()\r\n    {\r\n        this._pendingStop = 2;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Stops the current animation from playing when it next sets the given frame.\r\n     * If this frame doesn't exist within the animation it will not stop it from playing.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#stopOnFrame\r\n     * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n     * @since 3.4.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} delay - The frame to check before stopping this animation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    stopOnFrame: function (frame)\r\n    {\r\n        this._pendingStop = 3;\r\n        this._pendingStopValue = frame;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Sets the Time Scale factor, allowing you to make the animation go go faster or slower than default.\r\n     * Where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setTimeScale\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} [value=1] - The time scale factor, where 1 is no change, 0.5 is half speed, etc.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    setTimeScale: function (value)\r\n    {\r\n        if (value === undefined) { value = 1; }\r\n\r\n        this._timeScale = value;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Gets the Time Scale factor.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getTimeScale\r\n     * @since 3.4.0\r\n     *\r\n     * @return {number} The Time Scale value.\r\n     */\r\n    getTimeScale: function ()\r\n    {\r\n        return this._timeScale;\r\n    },\r\n\r\n    /**\r\n     * Returns the total number of frames in this animation.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getTotalFrames\r\n     * @since 3.4.0\r\n     *\r\n     * @return {integer} The total number of frames in this animation.\r\n     */\r\n    getTotalFrames: function ()\r\n    {\r\n        return this.currentAnim.frames.length;\r\n    },\r\n\r\n    /**\r\n     * The internal update loop for the Animation Component.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.currentAnim || !this.isPlaying || this.currentAnim.paused)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.accumulator += delta * this._timeScale;\r\n\r\n        if (this._pendingStop === 1)\r\n        {\r\n            this._pendingStopValue -= delta;\r\n\r\n            if (this._pendingStopValue <= 0)\r\n            {\r\n                return this.currentAnim.completeAnimation(this);\r\n            }\r\n        }\r\n\r\n        if (this.accumulator >= this.nextTick)\r\n        {\r\n            this.currentAnim.setFrame(this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the given Animation Frame as being the current frame\r\n     * and applies it to the parent Game Object, adjusting its size and origin as needed.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setCurrentFrame\r\n     * @since 3.4.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} animationFrame - The Animation Frame to set as being current.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n     */\r\n    setCurrentFrame: function (animationFrame)\r\n    {\r\n        var gameObject = this.parent;\r\n\r\n        this.currentFrame = animationFrame;\r\n\r\n        gameObject.texture = animationFrame.frame.texture;\r\n        gameObject.frame = animationFrame.frame;\r\n\r\n        if (gameObject.isCropped)\r\n        {\r\n            gameObject.frame.updateCropUVs(gameObject._crop, gameObject.flipX, gameObject.flipY);\r\n        }\r\n\r\n        gameObject.setSizeToFrame();\r\n\r\n        if (animationFrame.frame.customPivot)\r\n        {\r\n            gameObject.setOrigin(animationFrame.frame.pivotX, animationFrame.frame.pivotY);\r\n        }\r\n        else\r\n        {\r\n            gameObject.updateDisplayOrigin();\r\n        }\r\n\r\n        return gameObject;\r\n    },\r\n\r\n    /**\r\n     * Internal frame change handler.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#updateFrame\r\n     * @fires Phaser.GameObjects.Components.Animation#onUpdateEvent\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} animationFrame - The animation frame to change to.\r\n     */\r\n    updateFrame: function (animationFrame)\r\n    {\r\n        var gameObject = this.setCurrentFrame(animationFrame);\r\n\r\n        if (this.isPlaying)\r\n        {\r\n            if (animationFrame.setAlpha)\r\n            {\r\n                gameObject.alpha = animationFrame.alpha;\r\n            }\r\n\r\n            var anim = this.currentAnim;\r\n\r\n            gameObject.emit('animationupdate', anim, animationFrame, gameObject);\r\n\r\n            if (this._pendingStop === 3 && this._pendingStopValue === animationFrame)\r\n            {\r\n                this.currentAnim.completeAnimation(this);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets if the current Animation will yoyo when it reaches the end.\r\n     * A yoyo'ing animation will play through consecutively, and then reverse-play back to the start again.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setYoyo\r\n     * @since 3.4.0\r\n     *\r\n     * @param {boolean} [value=false] - `true` if the animation should yoyo, `false` to not.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n     */\r\n    setYoyo: function (value)\r\n    {\r\n        if (value === undefined) { value = false; }\r\n\r\n        this._yoyo = value;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Gets if the current Animation will yoyo when it reaches the end.\r\n     * A yoyo'ing animation will play through consecutively, and then reverse-play back to the start again.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getYoyo\r\n     * @since 3.4.0\r\n     *\r\n     * @return {boolean} `true` if the animation is set to yoyo, `false` if not.\r\n     */\r\n    getYoyo: function ()\r\n    {\r\n        return this._yoyo;\r\n    },\r\n\r\n    /**\r\n     * Destroy this Animation component.\r\n     *\r\n     * Unregisters event listeners and cleans up its references.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.animationManager.off('remove', this.remove, this);\r\n\r\n        this.animationManager = null;\r\n        this.parent = null;\r\n\r\n        this.currentAnim = null;\r\n        this.currentFrame = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Animation;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Animation","Class","initialize","parent","animationManager","scene","sys","anims","once","remove","isPlaying","currentFrame","currentAnim","_timeScale","msPerFrame","duration","frameRate","skipMissedFrames","_repeatDelay","_repeat","_delay","_yoyo","forward","_reverse","repeatCounter","nextTick","accumulator","_wasPlaying","_paused","pendingRepeat","_pendingStop","setDelay","value","undefined","getDelay","delayedPlay","delay","key","startFrame","play","getCurrentKey","load","stop","pause","atFrame","updateFrame","resume","fromFrame","isPaused","get","ignoreIfPlaying","_startAnimation","playReverse","anim","gameObject","Number","MAX_VALUE","getFirstTick","showOnStart","visible","emit","reverse","getProgress","p","progress","setProgress","setCurrentFrame","getFrameByProgress","animation","frames","getRepeat","setRepeat","getRepeatDelay","setRepeatDelay","restart","includeDelay","stopAfterDelay","_pendingStopValue","stopOnRepeat","stopOnFrame","frame","setTimeScale","getTimeScale","getTotalFrames","length","update","time","delta","paused","completeAnimation","setFrame","animationFrame","texture","isCropped","updateCropUVs","_crop","flipX","flipY","setSizeToFrame","customPivot","setOrigin","pivotX","pivotY","updateDisplayOrigin","setAlpha","alpha","setYoyo","getYoyo","destroy","off"]
}
