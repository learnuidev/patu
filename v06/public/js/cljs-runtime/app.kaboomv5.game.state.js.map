{"version":3,"sources":["app/kaboomv5/game/state.cljs"],"mappings":";;;;;AAKA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAYC;AACZ,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAcE;AACd,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAiBG;AAGjB,AAAAH,AAAA,AAAA,AAAA,AAAA,AAAoB,AAAAI,AAAA,AAAA,AAAW,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAJ,AAAAI;AAAA,AAAAA;AAAA,AAAA,AAAAJ,AAAAI;AAAX,AAAW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAC/B,AAAAN,AAAA,AAAA,AAAA,AAAA,AAAkBE;AAElB,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAoB,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAAA;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAMpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAKL,AAEA,AAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAW,AAACC,AAAKP;;AAC1B,AAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAY,AAAA,AAACF;;AACtB,AAAA,AAAAN,AAAAC,AAAAC,AAAAC,AAAAM;AAAA;AAAA,AAAA,AAASC,AAAgB,AAAA,AAACJ;;AAE1B","names":["cljs.spec.alpha/def-impl","cljs.core/keyword?","cljs.core/map?","cljs.core/boolean?","cljs.spec.alpha/nilable-impl","cljs.spec.alpha/map-spec-impl","G__26619","G__26621","app.kaboomv5.game.state/init-state","js/app","js/app.kaboomv5","js/app.kaboomv5.game","js/app.kaboomv5.game.state","js/app.kaboomv5.game.state.game-state","app.kaboomv5.game.state/game-state","cljs.core.atom","js/app.kaboomv5.game.state.scene-state","app.kaboomv5.game.state/scene-state","js/app.kaboomv5.game.state.component-state","app.kaboomv5.game.state/component-state"],"sourcesContent":["(ns app.kaboomv5.game.state\n  (:require [app.kaboomv5.math.core :as math]\n            [app.kaboomv5.app.utils :refer [html-canvas? html-body?]]\n            [cljs.spec.alpha :as s]))\n;; 0 Spec\n(s/def ::id keyword?)\n(s/def ::opts map?)\n(s/def ::loaded? boolean?)\n\n; (s/def ::cur-scene (s/nilable keyword?))\n(s/def ::next-scene (s/nilable (s/keys :opt-un [::id ::opts])))\n(s/def ::comp-reg map?)\n\n(s/def ::game-state (s/keys :opt-un [::id\n                                     ::opts\n                                     ::loaded?\n                                     ::next-scene\n                                     ::comp-reg]))\n\n(def init-state\n  {:loaded? false\n   ; :cur-scene :scene/main\n   :next-scene nil\n   :comp-reg {}})\n(comment\n  (s/valid? ::game-state init-state))\n(defonce game-state (atom init-state))\n(defonce scene-state (atom {}))\n(defonce component-state (atom {}))\n\n(comment\n  @game-state\n  @scene-state)\n"]}