{
"version":3,
"file":"module$node_modules$Phaser$src$physics$impact$Body.js",
"lineCount":8,
"mappings":"AAAAA,cAAA,mDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO3GC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,SAAWJ,OAAA,CAAQ,wDAAR,CAAf,CACIK,YAAcL,OAAA,CAAQ,2DAAR,CADlB,CAEIM,KAAON,OAAA,CAAQ,oDAAR,CAFX,CAGIO,aAAeP,OAAA,CAAQ,4DAAR,CA2CfQ,QAAAA,CAAO,IAAIL,MAAJ,CAAU,CAEjBM,WAEAD,QAAc,CAACE,KAAD;AAAQC,CAAR,CAAWC,CAAX,CAAcC,EAAd,CAAkBC,EAAlB,CACd,CACeC,IAAAA,EAAX,GAAIF,EAAJ,GAAwBA,EAAxB,CAA6B,EAA7B,CACWE,KAAAA,EAAX,GAAID,EAAJ,GAAwBA,EAAxB,CAA6BD,EAA7B,CASA,KAAAH,MAAA,CAAaA,KAUb,KAAAM,WAAA,CAAkB,IAUlB,KAAAC,QAAA,CAAe,CAAA,CAkBf,KAAAC,GAAA,CAAUR,KAAAS,UAAA,EAUV,KAAAC,KAAA,CAAY,EASZ,KAAAC,KAAA,CAAY,CAAEV,EAAGE,EAAL,CAASD,EAAGE,EAAZ,CASZ,KAAAQ,OAAA,CAAc,CAAEX,EAAG,CAAL,CAAQC,EAAG,CAAX,CASd,KAAAW,IAAA,CAAW,CAAEZ,EAAGA,CAAL,CAAQC,EAAGA,CAAX,CASX,KAAAY,KAAA,CAAY,CAAEb,EAAGA,CAAL,CAAQC,EAAGA,CAAX,CASZ,KAAAa,IAAA,CAAW,CAAEd,EAAG,CAAL,CAAQC,EAAG,CAAX,CASX,KAAAc,MAAA,CAAa,CAAEf,EAAG,CAAL,CAAQC,EAAG,CAAX,CASb,KAAAe,SAAA,CAAgB,CAAEhB,EAAG,CAAL,CAAQC,EAAG,CAAX,CAShB,KAAAgB,OAAA,CAAc,CAAEjB,EAAGD,KAAAmB,SAAAC,aAAL,CAAkClB,EAAGF,KAAAmB,SAAAE,aAArC,CAUd,KAAAC,SAAA,CAAgB,CAAA,CAShB,KAAAC,cAAA,CAAqBvB,KAAAmB,SAAAI,cASrB,KAAAC,WAAA,CAAkBxB,KAAAmB,SAAAK,WASlB,KAAAC,kBAAA,CAAyBzB,KAAAmB,SAAAM,kBA8BzB;IAAAC,UAAA,CAVA,IAAAC,SAUA,CApBA,IAAAC,YAoBA,CApBmB,CAsCnB,KAAAC,aAAA,CATA,IAAAC,KASA,CATYlC,IAAAmC,KAkBZ,KAAAC,SAAA,CAAgBtC,QAAAuC,MAShB,KAAAC,cAAA,CAAqBlC,KAAAmB,SAAAe,cASrB,KAAAC,kBAAA,CAAyBnC,KAAAmB,SAAAgB,kBASzB,KAAAC,eAAA,CAAsBpC,KAAAmB,SAAAkB,eAkBtB,KAAAC,cAAA,CAAqB,CAAEC,IAAK,gBAAP,CAA0BC,IAAK,kBAA/B,CA9QzB,CALiB,CA+RjBC,MAAOA,QAAS,CAACxC,CAAD,CAAIC,CAAJ,CAChB,CACI,IAAAW,IAAA,CAAW,CAAEZ,EAAGA,CAAL,CAAQC,EAAGA,CAAX,CACX,KAAAY,KAAA,CAAY,CAAEb,EAAGA,CAAL,CAAQC,EAAGA,CAAX,CACZ,KAAAa,IAAA,CAAW,CAAEd,EAAG,CAAL,CAAQC,EAAG,CAAX,CACX,KAAAc,MAAA,CAAa,CAAEf,EAAG,CAAL,CAAQC,EAAG,CAAX,CACb,KAAAe,SAAA,CAAgB,CAAEhB,EAAG,CAAL,CAAQC,EAAG,CAAX,CAChB,KAAAgB,OAAA,CAAc,CAAEjB,EAAG,GAAL,CAAUC,EAAG,GAAb,CAEd,KAAAoB,SAAA,CAAgB,CAAA,CAEhB;IAAAC,cAAA,CAAqB,CACrB,KAAAC,WAAA,CAAkB,CAClB,KAAAC,kBAAA,CAAyB,EAIzB,KAAAC,UAAA,CADA,IAAAC,SACA,CAFA,IAAAC,YAEA,CAFmB,CAKnB,KAAAC,aAAA,CADA,IAAAC,KACA,CADYlC,IAAAmC,KAEZ,KAAAC,SAAA,CAAgBtC,QAAAuC,MApBpB,CAhSiB,CA+TjBS,OAAQA,QAAS,CAACC,KAAD,CACjB,CACI,IAAI9B,IAAM,IAAAA,IAEV,KAAAC,KAAAb,EAAA,CAAcY,GAAAZ,EACd,KAAAa,KAAAZ,EAAA,CAAcW,GAAAX,EAEd,KAAAa,IAAAb,EAAA,EAAc,IAAAF,MAAA4C,QAAd,CAAmCD,KAAnC,CAA2C,IAAApB,cAE3C,KAAAR,IAAAd,EAAA,CAAaN,WAAA,CAAYgD,KAAZ,CAAmB,IAAA5B,IAAAd,EAAnB,CAA+B,IAAAe,MAAAf,EAA/B,CAA6C,IAAAgB,SAAAhB,EAA7C,CAA8D,IAAAiB,OAAAjB,EAA9D,CACb,KAAAc,IAAAb,EAAA,CAAaP,WAAA,CAAYgD,KAAZ,CAAmB,IAAA5B,IAAAb,EAAnB,CAA+B,IAAAc,MAAAd,EAA/B,CAA6C,IAAAe,SAAAf,EAA7C,CAA8D,IAAAgB,OAAAhB,EAA9D,CAKT2C,MAAAA,CAAM,IAAA7C,MAAA8C,aAAAC,MAAA,CAA8BlC,GAAAZ,EAA9B;AAAqCY,GAAAX,EAArC,CAHD,IAAAa,IAAAd,EAGC,CAHY0C,KAGZ,CAFD,IAAA5B,IAAAb,EAEC,CAFYyC,KAEZ,CAAoD,IAAAhC,KAAAV,EAApD,CAAiE,IAAAU,KAAAT,EAAjE,CAEN,KAAA8C,oBAAA,CAAyBH,KAAzB,CAAJ,EAEIhD,YAAA,CAAa,IAAb,CAAmBgD,KAAnB,CAKJ,IAFII,KAEJ,CAFS,IAAA3C,WAET,CAEI2C,KAAAhD,EACA,CADQY,GAAAZ,EACR,CADgB,IAAAW,OAAAX,EAChB,CADiCgD,KAAAC,eACjC,CADqDD,KAAAE,OACrD,CAAAF,KAAA/C,EAAA,CAAQW,GAAAX,EAAR,CAAgB,IAAAU,OAAAV,EAAhB,CAAiC+C,KAAAG,eAAjC,CAAqDH,KAAAI,OAGrD,KAAAC,eAAJ,EAEI,IAAAA,eAAA,CAAoB,IAApB,CA/BR,CAhUiB,CA2WjBC,UAAWA,QAAS,CAACC,OAAD,CACpB,CACI,IAAI3C,IAAM,IAAAA,IAEN,KAAAqB,cAAJ,GAEIsB,OAAAC,UAAA,CAAkB,CAAlB,CAAqB,IAAArB,eAArB,CAA0C,CAA1C,CACA,CAAAoB,OAAAE,WAAA,CAAmB7C,GAAAZ,EAAnB,CAA0BY,GAAAX,EAA1B,CAAiC,IAAAS,KAAAV,EAAjC,CAA8C,IAAAU,KAAAT,EAA9C,CAHJ,CAMA,IAAI,IAAAiC,kBAAJ,CACA,CACI,IAAIlC;AAAIY,GAAAZ,EAAJA,CAAY,IAAAU,KAAAV,EAAZA,CAA0B,CAC1BC,IAAAA,CAAIW,GAAAX,EAAJA,CAAY,IAAAS,KAAAT,EAAZA,CAA0B,CAE9BsD,QAAAC,UAAA,CAAkB,CAAlB,CAAqB,IAAAzD,MAAAmB,SAAAwC,mBAArB,CAA6D,CAA7D,CACAH,QAAAI,YAAA,CAAoB3D,CAApB,CAAuBC,GAAvB,CAA0BD,CAA1B,CAA8B,IAAAc,IAAAd,EAA9B,CAA0CC,GAA1C,CAA8C,IAAAa,IAAAb,EAA9C,CALJ,CAVJ,CA5WiB,CAuYjB2D,cAAeA,QAAS,EACxB,CACI,MAAQ,KAAA3B,cAAR,EAA8B,IAAAC,kBADlC,CAxYiB,CAoZjB2B,SAAUA,QAAS,EACnB,CACI,MAAQ,CAAC,IAAAvD,QAAT,EAAwC,CAAxC,GAA0B,IAAAuB,KAA1B,EAAmE,CAAnE,GAA6C,IAAAD,aAA7C,EAA0F,CAA1F,GAAwE,IAAAG,SAD5E,CArZiB,CAmajB+B,QAASA,QAAS,CAACC,KAAD,CAClB,CACI,MAAO,EACH,IAAAnD,IAAAZ,EADG,EACW+D,KAAAnD,IAAAZ,EADX,CACyB+D,KAAArD,KAAAV,EADzB,EAEH,IAAAY,IAAAZ,EAFG,CAEU,IAAAU,KAAAV,EAFV,EAEyB+D,KAAAnD,IAAAZ,EAFzB,EAGH,IAAAY,IAAAX,EAHG,EAGW8D,KAAAnD,IAAAX,EAHX,CAGyB8D,KAAArD,KAAAT,EAHzB,EAIH,IAAAW,IAAAX,EAJG,CAIU,IAAAS,KAAAT,EAJV;AAIyB8D,KAAAnD,IAAAX,EAJzB,CADX,CApaiB,CA0bjB+D,UAAWA,QAAS,CAAChE,CAAD,CAAIC,CAAJ,CAAOgE,KAAP,CAAcC,MAAd,CACpB,CACI,IAAAtD,IAAAZ,EAAA,CAAaA,CACb,KAAAY,IAAAX,EAAA,CAAaA,CACb,KAAAS,KAAAV,EAAA,CAAciE,KACd,KAAAvD,KAAAT,EAAA,CAAciE,MAEd,OAAO,KANX,CA3biB,CA4cjBC,OAAQA,QAAS,EACjB,CAiBI,MAhBaC,CACT3D,KAAM,IAAAA,KADG2D,CAET1D,KAAM,CAAEV,EAAG,IAAAU,KAAAV,EAAL,CAAkBC,EAAG,IAAAS,KAAAT,EAArB,CAFGmE,CAGTxD,IAAK,CAAEZ,EAAG,IAAAY,IAAAZ,EAAL,CAAiBC,EAAG,IAAAW,IAAAX,EAApB,CAHImE,CAITtD,IAAK,CAAEd,EAAG,IAAAc,IAAAd,EAAL,CAAiBC,EAAG,IAAAa,IAAAb,EAApB,CAJImE,CAKTrD,MAAO,CAAEf,EAAG,IAAAe,MAAAf,EAAL,CAAmBC,EAAG,IAAAc,MAAAd,EAAtB,CALEmE,CAMTpD,SAAU,CAAEhB,EAAG,IAAAgB,SAAAhB,EAAL,CAAsBC,EAAG,IAAAe,SAAAf,EAAzB,CANDmE,CAOTnD,OAAQ,CAAEjB,EAAG,IAAAiB,OAAAjB,EAAL,CAAoBC,EAAG,IAAAgB,OAAAhB,EAAvB,CAPCmE,CAQT9C,cAAe,IAAAA,cARN8C,CAST7C,WAAY,IAAAA,WATH6C,CAUT5C,kBAAmB,IAAAA,kBAVV4C,CAWTvC,KAAM,IAAAA,KAXGuC;AAYTxC,aAAc,IAAAA,aAZLwC,CAaTrC,SAAU,IAAAA,SAbDqC,CADjB,CA7ciB,CA0ejBC,SAAUA,QAAS,EACnB,EA3eiB,CAsfjBC,MAAOA,QAAS,EAChB,EAvfiB,CAmgBjBC,YAAaA,QAAS,CAACR,KAAD,CAAQS,IAAR,CACtB,CACQ,IAAAC,OAAJ,EAAmB,IAAAA,OAAAC,iBAAnB,EAEI,IAAAD,OAAAC,iBAAAC,KAAA,CAAkC,IAAAF,OAAAG,eAAlC,CAA8D,IAA9D,CAAoEb,KAApE,CAA2ES,IAA3E,CAHR,CApgBiB,CAqhBjBzB,oBAAqBA,QAAS,EAC9B,CACI,MAAO,CAAA,CADX,CAthBiB,CAgiBjB8B,QAASA,QAAS,EAClB,CACI,IAAA9E,MAAA+E,OAAA,CAAkB,IAAlB,CAEA,KAAAxE,QAAA,CAAe,CAAA,CAMf,KAAAmE,OAAA,CAFA,IAAApE,WAEA,CAJA,IAAAN,MAIA,CAJa,IALjB,CAjiBiB,CAAV,CA+iBXT,OAAAC,QAAA,CAAiBM,OArmB8F;",
"sources":["node_modules/Phaser/src/physics/impact/Body.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$impact$Body\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar COLLIDES = require('./COLLIDES');\r\nvar GetVelocity = require('./GetVelocity');\r\nvar TYPE = require('./TYPE');\r\nvar UpdateMotion = require('./UpdateMotion');\r\n\r\n/**\r\n * @callback BodyUpdateCallback\r\n *\r\n * @param {Phaser.Physics.Impact.Body} body - [description]\r\n */\r\n\r\n/**\r\n * @typedef {object} JSONImpactBody\r\n * @todo Replace object types\r\n *\r\n * @property {string} name - [description]\r\n * @property {object} size - [description]\r\n * @property {object} pos - [description]\r\n * @property {object} vel - [description]\r\n * @property {object} accel - [description]\r\n * @property {object} friction - [description]\r\n * @property {object} maxVel - [description]\r\n * @property {number} gravityFactor - [description]\r\n * @property {number} bounciness - [description]\r\n * @property {number} minBounceVelocity - [description]\r\n * @property {Phaser.Physics.Impact.TYPE} type - [description]\r\n * @property {Phaser.Physics.Impact.TYPE} checkAgainst - [description]\r\n * @property {Phaser.Physics.Impact.COLLIDES} collides - [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * An Impact.js compatible physics body.\r\n * This re-creates the properties you'd get on an Entity and the math needed to update them.\r\n *\r\n * @class Body\r\n * @memberOf Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - [description]\r\n * @param {number} x - [description]\r\n * @param {number} y - [description]\r\n * @param {number} [sx=16] - [description]\r\n * @param {number} [sy=16] - [description]\r\n */\r\nvar Body = new Class({\r\n\r\n    initialize:\r\n\r\n    function Body (world, x, y, sx, sy)\r\n    {\r\n        if (sx === undefined) { sx = 16; }\r\n        if (sy === undefined) { sy = sx; }\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#world\r\n         * @type {Phaser.Physics.Impact.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#gameObject\r\n         * @type {Phaser.GameObjects.GameObject}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.gameObject = null;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * The ImpactBody, ImpactSprite or ImpactImage object that owns this Body, if any.\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#parent\r\n         * @type {?(Phaser.Physics.Impact.ImpactBody|Phaser.Physics.Impact.ImpactImage|Phaser.Physics.Impact.ImpactSprite)}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#id\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.id = world.getNextID();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#name\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.name = '';\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#size\r\n         * @type {{x: number, y: number}}\r\n         * @since 3.0.0\r\n         */\r\n        this.size = { x: sx, y: sy };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#offset\r\n         * @type {{x: number, y: number}}\r\n         * @since 3.0.0\r\n         */\r\n        this.offset = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#pos\r\n         * @type {{x: number, y: number}}\r\n         * @since 3.0.0\r\n         */\r\n        this.pos = { x: x, y: y };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#last\r\n         * @type {{x: number, y: number}}\r\n         * @since 3.0.0\r\n         */\r\n        this.last = { x: x, y: y };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#vel\r\n         * @type {{x: number, y: number}}\r\n         * @since 3.0.0\r\n         */\r\n        this.vel = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#accel\r\n         * @type {{x: number, y: number}}\r\n         * @since 3.0.0\r\n         */\r\n        this.accel = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#friction\r\n         * @type {{x: number, y: number}}\r\n         * @since 3.0.0\r\n         */\r\n        this.friction = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#maxVel\r\n         * @type {{x: number, y: number}}\r\n         * @since 3.0.0\r\n         */\r\n        this.maxVel = { x: world.defaults.maxVelocityX, y: world.defaults.maxVelocityY };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#standing\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.standing = false;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#gravityFactor\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.gravityFactor = world.defaults.gravityFactor;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#bounciness\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.bounciness = world.defaults.bounciness;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#minBounceVelocity\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.minBounceVelocity = world.defaults.minBounceVelocity;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#accelGround\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelGround = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#accelAir\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelAir = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#jumpSpeed\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.jumpSpeed = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#type\r\n         * @type {Phaser.Physics.Impact.TYPE}\r\n         * @since 3.0.0\r\n         */\r\n        this.type = TYPE.NONE;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#checkAgainst\r\n         * @type {Phaser.Physics.Impact.TYPE}\r\n         * @since 3.0.0\r\n         */\r\n        this.checkAgainst = TYPE.NONE;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#collides\r\n         * @type {Phaser.Physics.Impact.COLLIDES}\r\n         * @since 3.0.0\r\n         */\r\n        this.collides = COLLIDES.NEVER;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#debugShowBody\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugShowBody = world.defaults.debugShowBody;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#debugShowVelocity\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugShowVelocity = world.defaults.debugShowVelocity;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#debugBodyColor\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugBodyColor = world.defaults.bodyDebugColor;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#updateCallback\r\n         * @type {?BodyUpdateCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.updateCallback;\r\n\r\n        /**\r\n         * min 44 deg, max 136 deg\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#slopeStanding\r\n         * @type {{ min: number, max: number }}\r\n         * @since 3.0.0\r\n         */\r\n        this.slopeStanding = { min: 0.767944870877505, max: 2.3736477827122884 };\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     */\r\n    reset: function (x, y)\r\n    {\r\n        this.pos = { x: x, y: y };\r\n        this.last = { x: x, y: y };\r\n        this.vel = { x: 0, y: 0 };\r\n        this.accel = { x: 0, y: 0 };\r\n        this.friction = { x: 0, y: 0 };\r\n        this.maxVel = { x: 100, y: 100 };\r\n\r\n        this.standing = false;\r\n\r\n        this.gravityFactor = 1;\r\n        this.bounciness = 0;\r\n        this.minBounceVelocity = 40;\r\n\r\n        this.accelGround = 0;\r\n        this.accelAir = 0;\r\n        this.jumpSpeed = 0;\r\n\r\n        this.type = TYPE.NONE;\r\n        this.checkAgainst = TYPE.NONE;\r\n        this.collides = COLLIDES.NEVER;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    update: function (delta)\r\n    {\r\n        var pos = this.pos;\r\n\r\n        this.last.x = pos.x;\r\n        this.last.y = pos.y;\r\n\r\n        this.vel.y += this.world.gravity * delta * this.gravityFactor;\r\n\r\n        this.vel.x = GetVelocity(delta, this.vel.x, this.accel.x, this.friction.x, this.maxVel.x);\r\n        this.vel.y = GetVelocity(delta, this.vel.y, this.accel.y, this.friction.y, this.maxVel.y);\r\n\r\n        var mx = this.vel.x * delta;\r\n        var my = this.vel.y * delta;\r\n\r\n        var res = this.world.collisionMap.trace(pos.x, pos.y, mx, my, this.size.x, this.size.y);\r\n\r\n        if (this.handleMovementTrace(res))\r\n        {\r\n            UpdateMotion(this, res);\r\n        }\r\n\r\n        var go = this.gameObject;\r\n\r\n        if (go)\r\n        {\r\n            go.x = (pos.x - this.offset.x) + go.displayOriginX * go.scaleX;\r\n            go.y = (pos.y - this.offset.y) + go.displayOriginY * go.scaleY;\r\n        }\r\n\r\n        if (this.updateCallback)\r\n        {\r\n            this.updateCallback(this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#drawDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphic - [description]\r\n     */\r\n    drawDebug: function (graphic)\r\n    {\r\n        var pos = this.pos;\r\n\r\n        if (this.debugShowBody)\r\n        {\r\n            graphic.lineStyle(1, this.debugBodyColor, 1);\r\n            graphic.strokeRect(pos.x, pos.y, this.size.x, this.size.y);\r\n        }\r\n\r\n        if (this.debugShowVelocity)\r\n        {\r\n            var x = pos.x + this.size.x / 2;\r\n            var y = pos.y + this.size.y / 2;\r\n\r\n            graphic.lineStyle(1, this.world.defaults.velocityDebugColor, 1);\r\n            graphic.lineBetween(x, y, x + this.vel.x, y + this.vel.y);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#willDrawDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    willDrawDebug: function ()\r\n    {\r\n        return (this.debugShowBody || this.debugShowVelocity);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#skipHash\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    skipHash: function ()\r\n    {\r\n        return (!this.enabled || (this.type === 0 && this.checkAgainst === 0 && this.collides === 0));\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#touches\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body} other - [description]\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    touches: function (other)\r\n    {\r\n        return !(\r\n            this.pos.x >= other.pos.x + other.size.x ||\r\n            this.pos.x + this.size.x <= other.pos.x ||\r\n            this.pos.y >= other.pos.y + other.size.y ||\r\n            this.pos.y + this.size.y <= other.pos.y\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Reset the size and position of the physics body.\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#resetSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to position the body.\r\n     * @param {number} y - The y coordinate to position the body.\r\n     * @param {number} width - The width of the body.\r\n     * @param {number} height - The height of the body.\r\n     *\r\n     * @return {Phaser.Physics.Impact.Body} This Body object.\r\n     */\r\n    resetSize: function (x, y, width, height)\r\n    {\r\n        this.pos.x = x;\r\n        this.pos.y = y;\r\n        this.size.x = width;\r\n        this.size.y = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {JSONImpactBody} [description]\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var output = {\r\n            name: this.name,\r\n            size: { x: this.size.x, y: this.size.y },\r\n            pos: { x: this.pos.x, y: this.pos.y },\r\n            vel: { x: this.vel.x, y: this.vel.y },\r\n            accel: { x: this.accel.x, y: this.accel.y },\r\n            friction: { x: this.friction.x, y: this.friction.y },\r\n            maxVel: { x: this.maxVel.x, y: this.maxVel.y },\r\n            gravityFactor: this.gravityFactor,\r\n            bounciness: this.bounciness,\r\n            minBounceVelocity: this.minBounceVelocity,\r\n            type: this.type,\r\n            checkAgainst: this.checkAgainst,\r\n            collides: this.collides\r\n        };\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#fromJSON\r\n     * @todo Code it!\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} config - [description]\r\n     */\r\n    fromJSON: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * Can be overridden by user code\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#check\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body} other - [description]\r\n     */\r\n    check: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * Can be overridden by user code\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#collideWith\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body} other - [description]\r\n     * @param {string} axis - [description]\r\n     */\r\n    collideWith: function (other, axis)\r\n    {\r\n        if (this.parent && this.parent._collideCallback)\r\n        {\r\n            this.parent._collideCallback.call(this.parent._callbackScope, this, other, axis);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Can be overridden by user code but must return a boolean.\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#handleMovementTrace\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} res - [description]\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    handleMovementTrace: function ()\r\n    {\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.world.remove(this);\r\n\r\n        this.enabled = false;\r\n\r\n        this.world = null;\r\n\r\n        this.gameObject = null;\r\n\r\n        this.parent = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Body;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","COLLIDES","GetVelocity","TYPE","UpdateMotion","Body","initialize","world","x","y","sx","sy","undefined","gameObject","enabled","id","getNextID","name","size","offset","pos","last","vel","accel","friction","maxVel","defaults","maxVelocityX","maxVelocityY","standing","gravityFactor","bounciness","minBounceVelocity","jumpSpeed","accelAir","accelGround","checkAgainst","type","NONE","collides","NEVER","debugShowBody","debugShowVelocity","debugBodyColor","bodyDebugColor","slopeStanding","min","max","reset","update","delta","gravity","res","collisionMap","trace","handleMovementTrace","go","displayOriginX","scaleX","displayOriginY","scaleY","updateCallback","drawDebug","graphic","lineStyle","strokeRect","velocityDebugColor","lineBetween","willDrawDebug","skipHash","touches","other","resetSize","width","height","toJSON","output","fromJSON","check","collideWith","axis","parent","_collideCallback","call","_callbackScope","destroy","remove"]
}
