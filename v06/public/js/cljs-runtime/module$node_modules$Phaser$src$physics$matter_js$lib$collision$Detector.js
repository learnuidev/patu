shadow$provide.module$node_modules$Phaser$src$physics$matter_js$lib$collision$Detector=function(global,require,module,exports){var Detector={};module.exports=Detector;var SAT=require("module$node_modules$Phaser$src$physics$matter_js$lib$collision$SAT"),Pair=require("module$node_modules$Phaser$src$physics$matter_js$lib$collision$Pair"),Bounds=require("module$node_modules$Phaser$src$physics$matter_js$lib$geometry$Bounds");(function(){Detector.collisions=function(broadphasePairs,engine){var collisions=
[],pairsTable=engine.pairs.table;engine=engine.metrics;for(var i=0;i<broadphasePairs.length;i++){var bodyA=broadphasePairs[i][0],bodyB=broadphasePairs[i][1];if((!bodyA.isStatic&&!bodyA.isSleeping||!bodyB.isStatic&&!bodyB.isSleeping)&&Detector.canCollide(bodyA.collisionFilter,bodyB.collisionFilter)&&(engine.midphaseTests+=1,Bounds.overlaps(bodyA.bounds,bodyB.bounds)))for(var j=1<bodyA.parts.length?1:0;j<bodyA.parts.length;j++)for(var partA=bodyA.parts[j],k=1<bodyB.parts.length?1:0;k<bodyB.parts.length;k++){var partB=
bodyB.parts[k];if(partA===bodyA&&partB===bodyB||Bounds.overlaps(partA.bounds,partB.bounds)){var pairId=Pair.id(partA,partB);pairId=pairsTable[pairId];partB=SAT.collides(partA,partB,pairId&&pairId.isActive?pairId.collision:null);engine.narrowphaseTests+=1;partB.reused&&(engine.narrowReuseCount+=1);partB.collided&&(collisions.push(partB),engine.narrowDetections+=1)}}}return collisions};Detector.canCollide=function(filterA,filterB){return filterA.group===filterB.group&&0!==filterA.group?0<filterA.group:
0!==(filterA.mask&filterB.category)&&0!==(filterB.mask&filterA.category)}})()}
//# sourceMappingURL=module$node_modules$Phaser$src$physics$matter_js$lib$collision$Detector.js.map
