{
"version":3,
"file":"module$node_modules$Phaser$src$input$keyboard$KeyboardPlugin.js",
"lineCount":9,
"mappings":"AAAAA,cAAA,6DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOrHC,OAAAA,CAAQH,OAAA,CAAQ,4CAAR,CACZ,KAAII,aAAeJ,OAAA,CAAQ,yCAAR,CAAnB,CACIK,SAAWL,OAAA,CAAQ,sDAAR,CACXM,OAAAA,CAAmBN,OAAA,CAAQ,uDAAR,CACvB,KAAIO,IAAMP,OAAA,CAAQ,wDAAR,CAAV,CACIQ,SAAWR,OAAA,CAAQ,6DAAR,CADf;AAEIS,SAAWT,OAAA,CAAQ,8DAAR,CAFf,CAGIU,OAASV,OAAA,CAAQ,2DAAR,CAHb,CAIIW,eAAiBX,OAAA,CAAQ,mEAAR,CAJrB,CAKIY,aAAeZ,OAAA,CAAQ,iEAAR,CALnB,CAMIa,UAAYb,OAAA,CAAQ,oDAAR,CA2CZc,QAAAA,CAAiB,IAAIX,OAAJ,CAAU,CAE3BY,QAASX,YAFkB,CAI3BY,WAEAF,QAAwB,CAACG,gBAAD,CACxB,CACIb,YAAAc,KAAA,CAAkB,IAAlB,CASA;IAAAC,MAAA,CAAaF,gBAAAE,MASb,KAAAC,SAAA,CAAgB,IAAAD,MAAAE,IAAAD,SAShB,KAAAH,iBAAA,CAAwBA,gBAWxB,KAAAK,QAAA,CAAe,CAAA,CAmBf,KAAAC,KAAA,CAAY,EASZ,KAAAC,OAAA,CAAc,EAUd,KAAAC,MAAA,CAAa,EAoBb,KAAAC,KAAA,CAAY,CAEZT,iBAAAU,aAAAC,KAAA,CAAmC,MAAnC,CAA2C,IAAAC,KAA3C,CAAsD,IAAtD,CACAZ,iBAAAU,aAAAG,GAAA,CAAiC,OAAjC,CAA0C,IAAAC,MAA1C,CAAsD,IAAtD,CApGJ,CAP2B,CAsH3BF,KAAMA,QAAS,EACf,CACI,IAAIT,SAAW,IAAAA,SAAAY,MAAf,CACIC,OAAS,IAAAd,MAAAE,IAAAa,KAAAD,OAEb,KAAAX,QAAA,CAAejB,QAAA,CAASe,QAAT,CAAmB,UAAnB,CAA+Ba,MAAAE,cAA/B,CACf,KAAAC,OAAA,CAAc/B,QAAA,CAASe,QAAT,CAAmB,iBAAnB,CAAsCa,MAAAI,yBAAtC,CAEd;IAAApB,iBAAAU,aAAAC,KAAA,CAAwC,SAAxC,CAAmD,IAAAU,QAAnD,CAAiE,IAAjE,CAPJ,CAvH2B,CA0I3BP,MAAOA,QAAS,EAChB,CACQ,IAAAT,QAAJ,EAEI,IAAAiB,eAAA,EAGJ,KAAAtB,iBAAAU,aAAAC,KAAA,CAAwC,UAAxC,CAAoD,IAAAY,SAApD,CAAmE,IAAnE,CANJ,CA3I2B,CA4J3BC,SAAUA,QAAS,EACnB,CACI,MAAQ,KAAAnB,QAAR,EAAwB,IAAAH,MAAAE,IAAAoB,SAAA,EAD5B,CA7J2B,CAyK3BF,eAAgBA,QAAS,EACzB,CACI,IAAIG,MAAQ,IAAZ,CAEIC,QAAUA,QAAS,CAACC,KAAD,CACvB,CACI,GAAIC,CAAAD,KAAAC,iBAAJ,EAA+BH,KAAAD,SAAA,EAA/B,CAAA,CAMAC,KAAAjB,MAAAqB,KAAA,CAAiBF,KAAjB,CAEA,KAAIG,IAAML,KAAAnB,KAAA,CAAWqB,KAAAI,QAAX,CAEND,IAAJ,EAAWA,GAAAE,eAAX,EAEIL,KAAAK,eAAA,EAZJ,CADJ,CAkBA,KAAAC,aAAA,CAAoBP,OAEpB;IAAAP,OAAAe,iBAAA,CAA6B,SAA7B,CAAwCR,OAAxC,CAAiD,CAAA,CAAjD,CACA,KAAAP,OAAAe,iBAAA,CAA6B,OAA7B,CAAsCR,OAAtC,CAA+C,CAAA,CAA/C,CAGA,KAAA1B,iBAAAU,aAAAG,GAAA,CAAsC,QAAtC,CAAgD,IAAAsB,OAAhD,CAA6D,IAA7D,CA5BJ,CA1K2B,CAiN3BC,cAAeA,QAAS,EACxB,CACI,IAAAjB,OAAAkB,oBAAA,CAAgC,SAAhC,CAA2C,IAAAJ,aAA3C,CACA,KAAAd,OAAAkB,oBAAA,CAAgC,OAAhC,CAAyC,IAAAJ,aAAzC,CAEA,KAAAjC,iBAAAU,aAAA4B,IAAA,CAAuC,QAAvC,CAAiD,IAAAH,OAAjD,CAJJ,CAlN2B,CA6O3BI,iBAAkBA,QAAS,EAC3B,CACI,MAAO,KAAAC,QAAA,CAAa,CAChBC,GAAIlD,QAAAmD,GADY,CAEhBC,KAAMpD,QAAAqD,KAFU,CAGhBC,KAAMtD,QAAAuD,KAHU,CAIhBC,MAAOxD,QAAAyD,MAJS,CAKhBC,MAAO1D,QAAA2D,MALS;AAMhBC,MAAO5D,QAAA6D,MANS,CAAb,CADX,CA9O2B,CAqR3BZ,QAASA,QAAS,CAAClC,IAAD,CAClB,CACI,IAAI+C,OAAS,EAEb,IAAoB,QAApB,GAAI,MAAO/C,KAAX,CACA,CACIA,IAAA,CAAOA,IAAAgD,MAAA,CAAW,GAAX,CAEP,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBjD,IAAAkD,OAApB,CAAiCD,CAAA,EAAjC,CACA,CACI,IAAIE,WAAanD,IAAA,CAAKiD,CAAL,CAAAG,KAAA,EAEbD,WAAJ,GAEIJ,MAAA,CAAOI,UAAP,CAFJ,CAEyB,IAAAE,OAAA,CAAYF,UAAZ,CAFzB,CAHJ,CAJJ,CADA,IAgBI,KAAS3B,CAAT,GAAgBxB,KAAhB,CAEI+C,MAAA,CAAOvB,CAAP,CAAA,CAAc,IAAA6B,OAAA,CAAYrD,IAAA,CAAKwB,CAAL,CAAZ,CAItB,OAAOuB,OAzBX,CAtR2B,CAgU3BM,OAAQA,QAAS,CAAC7B,GAAD,CACjB,CACI,IAAIxB,KAAO,IAAAA,KAEX,IAAIwB,GAAJ,WAAmBxC,IAAnB,CACA,CACI,IAAIsE,IAAMtD,IAAAuD,QAAA,CAAa/B,GAAb,CAEA,GAAV,CAAI8B,GAAJ,CAEItD,IAAA,CAAKsD,GAAL,CAFJ,CAEgB9B,GAFhB,CAMIxB,IAAA,CAAKwB,GAAAC,QAAL,CANJ,CAMwBD,GAGxB,OAAOA,IAZX,CAemB,QAAnB,GAAI,MAAOA,IAAX,GAEIA,GAFJ,CAEUvC,QAAA,CAASuC,GAAAgC,YAAA,EAAT,CAFV,CAKKxD,KAAA,CAAKwB,GAAL,CAAL;CAEIxB,IAAA,CAAKwB,GAAL,CAFJ,CAEgB,IAAIxC,GAAJ,CAAQwC,GAAR,CAFhB,CAKA,OAAOxB,KAAA,CAAKwB,GAAL,CA7BX,CAjU2B,CA2W3BiC,UAAWA,QAAS,CAACjC,GAAD,CACpB,CACI,IAAIxB,KAAO,IAAAA,KAEX,IAAIwB,GAAJ,WAAmBxC,IAAnB,CACA,CACI,IAAIsE,IAAMtD,IAAAuD,QAAA,CAAa/B,GAAb,CAEA,GAAV,CAAI8B,GAAJ,GAEI,IAAAtD,KAAA,CAAUsD,GAAV,CAFJ,CAEqBI,IAAAA,EAFrB,CAHJ,CADA,IASwB,QAAnB,GAAI,MAAOlC,IAAX,GAEDA,GAFC,CAEKvC,QAAA,CAASuC,GAAAgC,YAAA,EAAT,CAFL,CAKDxD,KAAA,CAAKwB,GAAL,CAAJ,GAEIxB,IAAA,CAAKwB,GAAL,CAFJ,CAEgBkC,IAAAA,EAFhB,CAjBJ,CA5W2B,CAwa3BC,YAAaA,QAAS,CAAC3D,IAAD,CAAOU,MAAP,CACtB,CACI,MAAO,KAAIxB,QAAJ,CAAa,IAAb,CAAmBc,IAAnB,CAAyBU,MAAzB,CADX,CAza2B,CA+b3BkD,UAAWA,QAAS,CAACpC,GAAD,CAAMqC,QAAN,CACpB,CACI,MAAI,KAAA9D,QAAJ,EAAoByB,GAAAsC,OAApB,GAEQC,QAEA,CAFIzE,SAAA,CAAU,IAAAa,KAAV,CAAsBqB,GAAAwC,SAAtB,CAAoCH,QAApC,CAEJ,CAAAE,QAAA,CAAIvC,GAAAyC,MAJZ,GAMQzC,GAAAyC,MAEO,CAFKF,QAEL,CAAA,CAAA,CARf,EAYO,CAAA,CAbX,CAhc2B,CAyd3BlC,OAAQA,QAAS,CAAC1B,IAAD,CACjB,CACI,IAAAA,KAAA;AAAYA,IAER+D,KAAAA,CAAM,IAAAhE,MAAAgD,OAEV,IAAK,IAAAnD,QAAL,EAA6B,CAA7B,GAAqBmE,IAArB,CAYA,IALA,IAAIhE,MAAQ,IAAAA,MAAAiE,OAAA,CAAkB,CAAlB,CAAqBD,IAArB,CAAZ,CAEIlE,KAAO,IAAAA,KAFX,CAKSiD,EAAI,CAAb,CAAgBA,CAAhB,CAAoBiB,IAApB,CAAyBjB,CAAA,EAAzB,CACA,CACI,IAAI5B,MAAQnB,KAAA,CAAM+C,CAAN,CAAZ,CACImB,KAAO/C,KAAAI,QAEQ,UAAnB,GAAIJ,KAAAgD,KAAJ,EAEQ,CAAAlF,MAAA,CAAOiF,IAAP,CAQJ,EARoCV,IAAAA,EAQpC,GARqB1D,IAAA,CAAKoE,IAAL,CAQrB,EARuE,CAAA,CAQvE,GARiDpE,IAAA,CAAKoE,IAAL,CAAAN,OAQjD,GALI,IAAAQ,KAAA,CAAUjD,KAAAgD,KAAV,CAAsBhD,KAAtB,CAEA,CAAA,IAAAiD,KAAA,CAAU,UAAV,CAAuBnF,MAAA,CAAOiF,IAAP,CAAvB,CAAqC/C,KAArC,CAGJ,EAAIrB,IAAA,CAAKoE,IAAL,CAAJ,EAEIhF,cAAA,CAAeY,IAAA,CAAKoE,IAAL,CAAf,CAA2B/C,KAA3B,CAZR,GAkBI,IAAAiD,KAAA,CAAUjD,KAAAgD,KAAV,CAAsBhD,KAAtB,CAIA,CAFA,IAAAiD,KAAA,CAAU,QAAV,CAAqBnF,MAAA,CAAOiF,IAAP,CAArB,CAAmC/C,KAAnC,CAEA,CAAIrB,IAAA,CAAKoE,IAAL,CAAJ,EAEI/E,YAAA,CAAaW,IAAA,CAAKoE,IAAL,CAAb,CAAyB/C,KAAzB,CAxBR,CAJJ,CAlBJ,CA1d2B,CAshB3BJ,SAAUA,QAAS,EACnB,CACI,IAAAa,cAAA,EAEA;IAAAyC,mBAAA,EAHJ,CAvhB2B,CAoiB3BxD,QAASA,QAAS,EAClB,CACI,IAAAE,SAAA,EAEA,KAAAjB,KAAA,CAAY,EACZ,KAAAC,OAAA,CAAc,EACd,KAAAC,MAAA,CAAa,EAKb,KAAAW,OAAA,CADA,IAAAnB,iBACA,CAFA,IAAAG,SAEA,CAHA,IAAAD,MAGA,CAHa,IAPjB,CAriB2B,CAAV,CA4jBrBb,OAAAyF,SAAA,CAA0B,gBAA1B,CAA4CjF,OAA5C,CAA4D,UAA5D,CAAwE,UAAxE,CAAoF,eAApF,CAEAb,OAAAC,QAAA,CAAiBY,OA1nBwG;",
"sources":["node_modules/Phaser/src/input/keyboard/KeyboardPlugin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$input$keyboard$KeyboardPlugin\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar InputPluginCache = require('../InputPluginCache');\r\nvar Key = require('./keys/Key');\r\nvar KeyCodes = require('./keys/KeyCodes');\r\nvar KeyCombo = require('./combo/KeyCombo');\r\nvar KeyMap = require('./keys/KeyMap');\r\nvar ProcessKeyDown = require('./keys/ProcessKeyDown');\r\nvar ProcessKeyUp = require('./keys/ProcessKeyUp');\r\nvar SnapFloor = require('../../math/snap/SnapFloor');\r\n\r\n/**\r\n * @classdesc\r\n * The Keyboard Plugin is an input plugin that belongs to the Scene-owned Input system.\r\n * \r\n * Its role is to listen for native DOM Keyboard Events and then process them.\r\n * \r\n * You do not need to create this class directly, the Input system will create an instance of it automatically.\r\n * \r\n * You can access it from within a Scene using `this.input.keyboard`. For example, you can do:\r\n *\r\n * ```javascript\r\n * this.input.keyboard.on('keydown', callback, context);\r\n * ```\r\n *\r\n * Or, to listen for a specific key:\r\n * \r\n * ```javascript\r\n * this.input.keyboard.on('keydown_A', callback, context);\r\n * ```\r\n *\r\n * You can also create Key objects, which you can then poll in your game loop:\r\n *\r\n * ```javascript\r\n * var spaceBar = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\r\n * ```\r\n *\r\n * _Note_: Many keyboards are unable to process certain combinations of keys due to hardware limitations known as ghosting.\r\n * See http://www.html5gamedevs.com/topic/4876-impossible-to-use-more-than-2-keyboard-input-buttons-at-the-same-time/ for more details.\r\n *\r\n * Also please be aware that certain browser extensions can disable or override Phaser keyboard handling.\r\n * For example the Chrome extension vimium is known to disable Phaser from using the D key, while EverNote disables the backtick key.\r\n * And there are others. So, please check your extensions before opening Phaser issues about keys that don't work.\r\n *\r\n * @class KeyboardPlugin\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberOf Phaser.Input.Keyboard\r\n * @constructor\r\n * @since 3.10.0\r\n *\r\n * @param {Phaser.Input.InputPlugin} sceneInputPlugin - A reference to the Scene Input Plugin that the KeyboardPlugin belongs to.\r\n */\r\nvar KeyboardPlugin = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function KeyboardPlugin (sceneInputPlugin)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the Scene that this Input Plugin is responsible for.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardPlugin#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.10.0\r\n         */\r\n        this.scene = sceneInputPlugin.scene;\r\n\r\n        /**\r\n         * A reference to the Scene Systems Settings.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardPlugin#settings\r\n         * @type {Phaser.Scenes.Settings.Object}\r\n         * @since 3.10.0\r\n         */\r\n        this.settings = this.scene.sys.settings;\r\n\r\n        /**\r\n         * A reference to the Scene Input Plugin that created this Keyboard Plugin.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardPlugin#sceneInputPlugin\r\n         * @type {Phaser.Input.InputPlugin}\r\n         * @since 3.10.0\r\n         */\r\n        this.sceneInputPlugin = sceneInputPlugin;\r\n\r\n        /**\r\n         * A boolean that controls if the Keyboard Plugin is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardPlugin#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.10.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * The Keyboard Event target, as defined in the Scene or Game Config.\r\n         * Typically the browser window, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardPlugin#target\r\n         * @type {any}\r\n         * @since 3.10.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * An array of Key objects to process.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardPlugin#keys\r\n         * @type {Phaser.Input.Keyboard.Key[]}\r\n         * @since 3.10.0\r\n         */\r\n        this.keys = [];\r\n\r\n        /**\r\n         * An array of KeyCombo objects to process.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardPlugin#combos\r\n         * @type {Phaser.Input.Keyboard.KeyCombo[]}\r\n         * @since 3.10.0\r\n         */\r\n        this.combos = [];\r\n\r\n        /**\r\n         * An internal event queue.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardPlugin#queue\r\n         * @type {KeyboardEvent[]}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this.queue = [];\r\n\r\n        /**\r\n         * Internal event handler.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardPlugin#onKeyHandler\r\n         * @type {function}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this.onKeyHandler;\r\n\r\n        /**\r\n         * Internal time value.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardPlugin#time\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this.time = 0;\r\n\r\n        sceneInputPlugin.pluginEvents.once('boot', this.boot, this);\r\n        sceneInputPlugin.pluginEvents.on('start', this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#boot\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var settings = this.settings.input;\r\n        var config = this.scene.sys.game.config;\r\n\r\n        this.enabled = GetValue(settings, 'keyboard', config.inputKeyboard);\r\n        this.target = GetValue(settings, 'keyboard.target', config.inputKeyboardEventTarget);\r\n\r\n        this.sceneInputPlugin.pluginEvents.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#start\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (this.enabled)\r\n        {\r\n            this.startListeners();\r\n        }\r\n\r\n        this.sceneInputPlugin.pluginEvents.once('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if both this plugin and the Scene to which it belongs is active.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#isActive\r\n     * @since 3.10.0\r\n     *\r\n     * @return {boolean} `true` if the plugin and the Scene it belongs to is active.\r\n     */\r\n    isActive: function ()\r\n    {\r\n        return (this.enabled && this.scene.sys.isActive());\r\n    },\r\n\r\n    /**\r\n     * Starts the Keyboard Event listeners running.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#startListeners\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        var handler = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.isActive())\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n\r\n            _this.queue.push(event);\r\n\r\n            var key = _this.keys[event.keyCode];\r\n\r\n            if (key && key.preventDefault)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n\r\n        };\r\n\r\n        this.onKeyHandler = handler;\r\n\r\n        this.target.addEventListener('keydown', handler, false);\r\n        this.target.addEventListener('keyup', handler, false);\r\n\r\n        //  Finally, listen for an update event from the Input Plugin\r\n        this.sceneInputPlugin.pluginEvents.on('update', this.update, this);\r\n    },\r\n\r\n    /**\r\n     * Stops the Keyboard Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#stopListeners\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        this.target.removeEventListener('keydown', this.onKeyHandler);\r\n        this.target.removeEventListener('keyup', this.onKeyHandler);\r\n\r\n        this.sceneInputPlugin.pluginEvents.off('update', this.update);\r\n    },\r\n\r\n    /**\r\n     * @typedef {object} CursorKeys\r\n     * @memberOf Phaser.Input.Keyboard\r\n     * \r\n     * @property {Phaser.Input.Keyboard.Key} [up] - A Key object mapping to the UP arrow key.\r\n     * @property {Phaser.Input.Keyboard.Key} [down] - A Key object mapping to the DOWN arrow key.\r\n     * @property {Phaser.Input.Keyboard.Key} [left] - A Key object mapping to the LEFT arrow key.\r\n     * @property {Phaser.Input.Keyboard.Key} [right] - A Key object mapping to the RIGHT arrow key.\r\n     * @property {Phaser.Input.Keyboard.Key} [space] - A Key object mapping to the SPACE BAR key.\r\n     * @property {Phaser.Input.Keyboard.Key} [shift] - A Key object mapping to the SHIFT key.\r\n     */\r\n\r\n    /**\r\n     * Creates and returns an object containing 4 hotkeys for Up, Down, Left and Right, and also Space Bar and shift.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#createCursorKeys\r\n     * @since 3.10.0\r\n     *\r\n     * @return {CursorKeys} An object containing the properties: `up`, `down`, `left`, `right`, `space` and `shift`.\r\n     */\r\n    createCursorKeys: function ()\r\n    {\r\n        return this.addKeys({\r\n            up: KeyCodes.UP,\r\n            down: KeyCodes.DOWN,\r\n            left: KeyCodes.LEFT,\r\n            right: KeyCodes.RIGHT,\r\n            space: KeyCodes.SPACE,\r\n            shift: KeyCodes.SHIFT\r\n        });\r\n    },\r\n\r\n    /**\r\n     * A practical way to create an object containing user selected hotkeys.\r\n     *\r\n     * For example:\r\n     *\r\n     * ```javascript\r\n     * this.input.keyboard.addKeys({ 'up': Phaser.Input.Keyboard.KeyCodes.W, 'down': Phaser.Input.Keyboard.KeyCodes.S });\r\n     * ```\r\n     * \r\n     * would return an object containing the properties (`up` and `down`) mapped to W and S {@link Phaser.Input.Keyboard.Key} objects.\r\n     *\r\n     * You can also pass in a comma-separated string:\r\n     * \r\n     * ```javascript\r\n     * this.input.keyboard.addKeys('W,S,A,D');\r\n     * ```\r\n     *\r\n     * Which will return an object with the properties W, S, A and D mapped to the relevant Key objects.\r\n     *\r\n     * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#addKeys\r\n     * @since 3.10.0\r\n     *\r\n     * @param {(object|string)} keys - An object containing Key Codes, or a comma-separated string.\r\n     *\r\n     * @return {object} An object containing Key objects mapped to the input properties.\r\n     */\r\n    addKeys: function (keys)\r\n    {\r\n        var output = {};\r\n\r\n        if (typeof keys === 'string')\r\n        {\r\n            keys = keys.split(',');\r\n\r\n            for (var i = 0; i < keys.length; i++)\r\n            {\r\n                var currentKey = keys[i].trim();\r\n\r\n                if (currentKey)\r\n                {\r\n                    output[currentKey] = this.addKey(currentKey);\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (var key in keys)\r\n            {\r\n                output[key] = this.addKey(keys[key]);\r\n            }\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Adds a Key object to this Keyboard Plugin.\r\n     *\r\n     * The given argument can be either an existing Key object, a string, such as `A` or `SPACE`, or a key code value.\r\n     *\r\n     * If a Key object is given, and one already exists matching the same key code, the existing one is replaced with the new one.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#addKey\r\n     * @since 3.10.0\r\n     *\r\n     * @param {(Phaser.Input.Keyboard.Key|string|integer)} key - Either a Key object, a string, such as `A` or `SPACE`, or a key code value.\r\n     *\r\n     * @return {Phaser.Input.Keyboard.Key} The newly created Key object, or a reference to it if it already existed in the keys array.\r\n     */\r\n    addKey: function (key)\r\n    {\r\n        var keys = this.keys;\r\n\r\n        if (key instanceof Key)\r\n        {\r\n            var idx = keys.indexOf(key);\r\n\r\n            if (idx > -1)\r\n            {\r\n                keys[idx] = key;\r\n            }\r\n            else\r\n            {\r\n                keys[key.keyCode] = key;\r\n            }\r\n\r\n            return key;\r\n        }\r\n\r\n        if (typeof key === 'string')\r\n        {\r\n            key = KeyCodes[key.toUpperCase()];\r\n        }\r\n\r\n        if (!keys[key])\r\n        {\r\n            keys[key] = new Key(key);\r\n        }\r\n\r\n        return keys[key];\r\n    },\r\n\r\n    /**\r\n     * Removes a Key object from this Keyboard Plugin.\r\n     *\r\n     * The given argument can be either a Key object, a string, such as `A` or `SPACE`, or a key code value.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#removeKey\r\n     * @since 3.10.0\r\n     *\r\n     * @param {(Phaser.Input.Keyboard.Key|string|integer)} key - Either a Key object, a string, such as `A` or `SPACE`, or a key code value.\r\n     */\r\n    removeKey: function (key)\r\n    {\r\n        var keys = this.keys;\r\n\r\n        if (key instanceof Key)\r\n        {\r\n            var idx = keys.indexOf(key);\r\n\r\n            if (idx > -1)\r\n            {\r\n                this.keys[idx] = undefined;\r\n            }\r\n        }\r\n        else if (typeof key === 'string')\r\n        {\r\n            key = KeyCodes[key.toUpperCase()];\r\n        }\r\n\r\n        if (keys[key])\r\n        {\r\n            keys[key] = undefined;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Creates a new KeyCombo.\r\n     * \r\n     * A KeyCombo will listen for a specific string of keys from the Keyboard, and when it receives them\r\n     * it will emit a `keycombomatch` event from this Keyboard Plugin.\r\n     *\r\n     * The keys to be listened for can be defined as:\r\n     *\r\n     * A string (i.e. 'ATARI')\r\n     * An array of either integers (key codes) or strings, or a mixture of both\r\n     * An array of objects (such as Key objects) with a public 'keyCode' property\r\n     *\r\n     * For example, to listen for the Konami code (up, up, down, down, left, right, left, right, b, a, enter)\r\n     * you could pass the following array of key codes:\r\n     *\r\n     * ```javascript\r\n     * this.input.keyboard.createCombo([ 38, 38, 40, 40, 37, 39, 37, 39, 66, 65, 13 ], { resetOnMatch: true });\r\n     *\r\n     * this.input.keyboard.on('keycombomatch', function (event) {\r\n     *     console.log('Konami Code entered!');\r\n     * });\r\n     * ```\r\n     *\r\n     * Or, to listen for the user entering the word PHASER:\r\n     *\r\n     * ```javascript\r\n     * this.input.keyboard.createCombo('PHASER');\r\n     * ```\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#createCombo\r\n     * @since 3.10.0\r\n     *\r\n     * @param {(string|integer[]|object[])} keys - The keys that comprise this combo.\r\n     * @param {KeyComboConfig} [config] - A Key Combo configuration object.\r\n     *\r\n     * @return {Phaser.Input.Keyboard.KeyCombo} The new KeyCombo object.\r\n     */\r\n    createCombo: function (keys, config)\r\n    {\r\n        return new KeyCombo(this, keys, config);\r\n    },\r\n\r\n    /**\r\n     * Checks if the given Key object is currently being held down.\r\n     * \r\n     * The difference between this method and checking the `Key.isDown` property directly is that you can provide\r\n     * a duration to this method. For example, if you wanted a key press to fire a bullet, but you only wanted\r\n     * it to be able to fire every 100ms, then you can call this method with a `duration` of 100 and it\r\n     * will only return `true` every 100ms.\r\n     * \r\n     * If the Keyboard Plugin has been disabled, this method will always return `false`.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#checkDown\r\n     * @since 3.11.0\r\n     *\r\n     * @param {Phaser.Input.Keyboard.Key} key - A Key object.\r\n     * @param {number} [duration=0] - The duration which must have elapsed before this Key is considered as being down.\r\n     * \r\n     * @return {boolean} `True` if the Key is down within the duration specified, otherwise `false`.\r\n     */\r\n    checkDown: function (key, duration)\r\n    {\r\n        if (this.enabled && key.isDown)\r\n        {\r\n            var t = SnapFloor(this.time - key.timeDown, duration);\r\n\r\n            if (t > key._tick)\r\n            {\r\n                key._tick = t;\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Internal update handler called by the Input Manager, which is in turn invoked by the Game step.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#update\r\n     * @private\r\n     * @since 3.10.0\r\n     * \r\n     * @param {number} time - The game loop time value.\r\n     */\r\n    update: function (time)\r\n    {\r\n        this.time = time;\r\n\r\n        var len = this.queue.length;\r\n\r\n        if (!this.enabled || len === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        //  Clears the queue array, and also means we don't work on array data that could potentially\r\n        //  be modified during the processing phase\r\n        var queue = this.queue.splice(0, len);\r\n\r\n        var keys = this.keys;\r\n\r\n        //  Process the event queue, dispatching all of the events that have stored up\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            var event = queue[i];\r\n            var code = event.keyCode;\r\n\r\n            if (event.type === 'keydown')\r\n            {\r\n                if (KeyMap[code] && (keys[code] === undefined || keys[code].isDown === false))\r\n                {\r\n                    //  Will emit a keyboard or keyup event\r\n                    this.emit(event.type, event);\r\n\r\n                    this.emit('keydown_' + KeyMap[code], event);\r\n                }\r\n\r\n                if (keys[code])\r\n                {\r\n                    ProcessKeyDown(keys[code], event);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                //  Will emit a keyboard or keyup event\r\n                this.emit(event.type, event);\r\n\r\n                this.emit('keyup_' + KeyMap[code], event);\r\n\r\n                if (keys[code])\r\n                {\r\n                    ProcessKeyUp(keys[code], event);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Shuts the Keyboard Plugin down.\r\n     * All this does is remove any listeners bound to it.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#shutdown\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.removeAllListeners();\r\n    },\r\n\r\n    /**\r\n     * Destroys this Keyboard Plugin instance and all references it holds, plus clears out local arrays.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardPlugin#destroy\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.keys = [];\r\n        this.combos = [];\r\n        this.queue = [];\r\n\r\n        this.scene = null;\r\n        this.settings = null;\r\n        this.sceneInputPlugin = null;\r\n        this.target = null;\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * An instance of the Keyboard Plugin class, if enabled via the `input.keyboard` Scene or Game Config property.\r\n * Use this to create Key objects and listen for keyboard specific events.\r\n *\r\n * @name Phaser.Input.InputPlugin#keyboard\r\n * @type {?Phaser.Input.Keyboard.KeyboardPlugin}\r\n * @since 3.10.0\r\n */\r\nInputPluginCache.register('KeyboardPlugin', KeyboardPlugin, 'keyboard', 'keyboard', 'inputKeyboard');\r\n\r\nmodule.exports = KeyboardPlugin;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","EventEmitter","GetValue","InputPluginCache","Key","KeyCodes","KeyCombo","KeyMap","ProcessKeyDown","ProcessKeyUp","SnapFloor","KeyboardPlugin","Extends","initialize","sceneInputPlugin","call","scene","settings","sys","enabled","keys","combos","queue","time","pluginEvents","once","boot","on","start","input","config","game","inputKeyboard","target","inputKeyboardEventTarget","destroy","startListeners","shutdown","isActive","_this","handler","event","defaultPrevented","push","key","keyCode","preventDefault","onKeyHandler","addEventListener","update","stopListeners","removeEventListener","off","createCursorKeys","addKeys","up","UP","down","DOWN","left","LEFT","right","RIGHT","space","SPACE","shift","SHIFT","output","split","i","length","currentKey","trim","addKey","idx","indexOf","toUpperCase","removeKey","undefined","createCombo","checkDown","duration","isDown","t","timeDown","_tick","len","splice","code","type","emit","removeAllListeners","register"]
}
