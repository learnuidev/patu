{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$parsers$tiled$ParseObject.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,kEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO9H,IAAIC,KAAOH,OAAA,CAAQ,4DAAR,CAAX,CACII,SAAWJ,OAAA,CAAQ,gEAAR,CADf,CAGIK,WAAaA,QAAS,CAACC,CAAD,CAAI,CAAE,MAAO,CAAEC,EAAGD,CAAAC,EAAL,CAAUC,EAAGF,CAAAE,EAAb,CAAT,CAH9B,CAKIC,kBAAoB,2DAAA,MAAA,CAAA,GAAA,CAgExBR,OAAAC,QAAA,CAlDkBQ,QAAS,CAACC,WAAD,CAAcC,OAAd,CAAuBC,OAAvB,CAC3B,CACoBC,IAAAA,EAAhB,GAAIF,OAAJ,GAA6BA,OAA7B,CAAuC,CAAvC,CACgBE,KAAAA,EAAhB;AAAID,OAAJ,GAA6BA,OAA7B,CAAuC,CAAvC,CAEA,KAAIE,aAAeZ,IAAA,CAAKQ,WAAL,CAAkBF,iBAAlB,CAEnBM,aAAAR,EAAA,EAAkBK,OAClBG,aAAAP,EAAA,EAAkBK,OAEdF,YAAAK,IAAJ,EAGQC,WAIJ,CAJcb,QAAA,CAASO,WAAAK,IAAT,CAId,CAHAD,YAAAC,IAGA,CAHmBC,WAAAD,IAGnB,CAFAD,YAAAG,kBAEA,CAFiCD,WAAAC,kBAEjC,CADAH,YAAAI,gBACA,CAD+BF,WAAAE,gBAC/B,CAAAJ,YAAAK,oBAAA,CAAmCH,WAAAG,oBAPvC,EASST,WAAAU,SAAJ,CAEDN,YAAAM,SAFC,CAEuBV,WAAAU,SAAAC,IAAA,CAAyBjB,UAAzB,CAFvB,CAIIM,WAAAY,QAAJ,CAEDR,YAAAQ,QAFC;AAEsBZ,WAAAY,QAAAD,IAAA,CAAwBjB,UAAxB,CAFtB,CAIIM,WAAAa,QAAJ,EAEDT,YAAAS,QAEA,CAFuBb,WAAAa,QAEvB,CADAT,YAAAU,MACA,CADqBd,WAAAc,MACrB,CAAAV,YAAAW,OAAA,CAAsBf,WAAAe,OAJrB,EAMIf,WAAAgB,KAAJ,EAEDZ,YAAAU,MAEA,CAFqBd,WAAAc,MAErB,CADAV,YAAAW,OACA,CADsBf,WAAAe,OACtB,CAAAX,YAAAY,KAAA,CAAoBhB,WAAAgB,KAJnB,GASDZ,YAAAa,UAEA,CAFyB,CAAA,CAEzB,CADAb,YAAAU,MACA,CADqBd,WAAAc,MACrB,CAAAV,YAAAW,OAAA,CAAsBf,WAAAe,OAXrB,CAcL,OAAOX,aA9CX,CA3B8H;",
"sources":["node_modules/Phaser/src/tilemaps/parsers/tiled/ParseObject.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$parsers$tiled$ParseObject\"] = function(global,require,module,exports) {\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar Pick = require('./Pick');\r\nvar ParseGID = require('./ParseGID');\r\n\r\nvar copyPoints = function (p) { return { x: p.x, y: p.y }; };\r\n\r\nvar commonObjectProps = [ 'id', 'name', 'type', 'rotation', 'properties', 'visible', 'x', 'y', 'width', 'height' ];\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseObject\r\n * @since 3.0.0\r\n *\r\n * @param {object} tiledObject - [description]\r\n * @param {number} [offsetX=0] - [description]\r\n * @param {number} [offsetY=0] - [description]\r\n *\r\n * @return {object} [description]\r\n */\r\nvar ParseObject = function (tiledObject, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    var parsedObject = Pick(tiledObject, commonObjectProps);\r\n\r\n    parsedObject.x += offsetX;\r\n    parsedObject.y += offsetY;\r\n\r\n    if (tiledObject.gid)\r\n    {\r\n        //  Object tiles\r\n        var gidInfo = ParseGID(tiledObject.gid);\r\n        parsedObject.gid = gidInfo.gid;\r\n        parsedObject.flippedHorizontal = gidInfo.flippedHorizontal;\r\n        parsedObject.flippedVertical = gidInfo.flippedVertical;\r\n        parsedObject.flippedAntiDiagonal = gidInfo.flippedAntiDiagonal;\r\n    }\r\n    else if (tiledObject.polyline)\r\n    {\r\n        parsedObject.polyline = tiledObject.polyline.map(copyPoints);\r\n    }\r\n    else if (tiledObject.polygon)\r\n    {\r\n        parsedObject.polygon = tiledObject.polygon.map(copyPoints);\r\n    }\r\n    else if (tiledObject.ellipse)\r\n    {\r\n        parsedObject.ellipse = tiledObject.ellipse;\r\n        parsedObject.width = tiledObject.width;\r\n        parsedObject.height = tiledObject.height;\r\n    }\r\n    else if (tiledObject.text)\r\n    {\r\n        parsedObject.width = tiledObject.width;\r\n        parsedObject.height = tiledObject.height;\r\n        parsedObject.text = tiledObject.text;\r\n    }\r\n    else\r\n    {\r\n        // Otherwise, assume it is a rectangle\r\n        parsedObject.rectangle = true;\r\n        parsedObject.width = tiledObject.width;\r\n        parsedObject.height = tiledObject.height;\r\n    }\r\n\r\n    return parsedObject;\r\n};\r\n\r\nmodule.exports = ParseObject;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Pick","ParseGID","copyPoints","p","x","y","commonObjectProps","ParseObject","tiledObject","offsetX","offsetY","undefined","parsedObject","gid","gidInfo","flippedHorizontal","flippedVertical","flippedAntiDiagonal","polyline","map","polygon","ellipse","width","height","text","rectangle"]
}
