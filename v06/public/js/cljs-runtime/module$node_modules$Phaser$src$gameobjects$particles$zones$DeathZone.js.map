{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$particles$zones$DeathZone.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,qEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA+C7HC,MAAAA,CAAY,KAxCJH,OAAAI,CAAQ,4CAARA,CAwCI,EAAU,CAEtBC,WAEAF,QAAmB,CAACG,MAAD,CAASC,WAAT,CACnB,CASI,IAAAD,OAAA,CAAcA,MAUd,KAAAC,YAAA,CAAmBA,WAnBvB,CALsB,CAqCtBC,SAAUA,QAAS,CAACC,QAAD,CACnB,CAGI,OAFIC,QAEJ,CAFiB,IAAAJ,OAAAK,SAAA,CAAqBF,QAAAG,EAArB,CAAiCH,QAAAI,EAAjC,CAEjB,GAAsB,IAAAN,YAAtB,EAA0C,CAACG,QAA3C,EAAyD,CAAC,IAAAH,YAH9D,CAtCsB,CAAV,CA8ChBN,OAAAC,QAAA,CAAiBC,MA7FgH;",
"sources":["node_modules/Phaser/src/gameobjects/particles/zones/DeathZone.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$particles$zones$DeathZone\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\n\r\n/**\r\n * @callback DeathZoneSourceCallback\r\n *\r\n * @param {number} x - The x coordinate of the particle to check against this source area.\r\n * @param {number} y - The y coordinate of the particle to check against this source area.\r\n *\r\n * @return {boolean} - True if the coordinates are within the source area.\r\n */\r\n\r\n/**\r\n * @typedef {object} DeathZoneSource\r\n *\r\n * @property {DeathZoneSourceCallback} contains\r\n *\r\n * @see Phaser.Geom.Circle\r\n * @see Phaser.Geom.Ellipse\r\n * @see Phaser.Geom.Polygon\r\n * @see Phaser.Geom.Rectangle\r\n * @see Phaser.Geom.Triangle\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A Death Zone.\r\n *\r\n * A Death Zone is a special type of zone that will kill a Particle as soon as it either enters, or leaves, the zone.\r\n *\r\n * The zone consists of a `source` which could be a Geometric shape, such as a Rectangle or Ellipse, or your own\r\n * object as long as it includes a `contains` method for which the Particles can be tested against.\r\n *\r\n * @class DeathZone\r\n * @memberOf Phaser.GameObjects.Particles.Zones\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {DeathZoneSource} source - An object instance that has a `contains` method that returns a boolean when given `x` and `y` arguments.\r\n * @param {boolean} killOnEnter - Should the Particle be killed when it enters the zone? `true` or leaves it? `false`\r\n */\r\nvar DeathZone = new Class({\r\n\r\n    initialize:\r\n\r\n    function DeathZone (source, killOnEnter)\r\n    {\r\n        /**\r\n         * An object instance that has a `contains` method that returns a boolean when given `x` and `y` arguments.\r\n         * This could be a Geometry shape, such as `Phaser.Geom.Circle`, or your own custom object.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Zones.DeathZone#source\r\n         * @type {DeathZoneSource}\r\n         * @since 3.0.0\r\n         */\r\n        this.source = source;\r\n\r\n        /**\r\n         * Set to `true` if the Particle should be killed if it enters this zone.\r\n         * Set to `false` to kill the Particle if it leaves this zone.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Zones.DeathZone#killOnEnter\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.killOnEnter = killOnEnter;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given Particle will be killed or not by this zone.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Zones.DeathZone#willKill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.Particle} particle - The Particle to be checked against this zone.\r\n     *\r\n     * @return {boolean} Return `true` if the Particle is to be killed, otherwise return `false`.\r\n     */\r\n    willKill: function (particle)\r\n    {\r\n        var withinZone = this.source.contains(particle.x, particle.y);\r\n\r\n        return (withinZone && this.killOnEnter || !withinZone && !this.killOnEnter);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = DeathZone;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","DeathZone","Class","initialize","source","killOnEnter","willKill","particle","withinZone","contains","x","y"]
}
