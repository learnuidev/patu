{
"version":3,
"file":"module$node_modules$Phaser$src$math$Vector3.js",
"lineCount":8,
"mappings":"AAAAA,cAAA,4CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA2BxG,IAAIC,QAAU,KAjBFH,OAAAI,CAAQ,4CAARA,CAiBE,EAAU,CAEpBC,WAEAF,QAAiB,CAACG,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CACjB,CA6BI,IAAAA,EAAA,CAVA,IAAAD,EAUA,CApBA,IAAAD,EAoBA,CApBS,CAsBQ,SAAjB,GAAI,MAAOA,EAAX,EAEI,IAAAA,EAEA,CAFSA,CAAAA,EAET,EAFgB,CAEhB,CADA,IAAAC,EACA,CADSD,CAAAC,EACT,EADgB,CAChB,CAAA,IAAAC,EAAA,CAASF,CAAAE,EAAT,EAAgB,CAJpB,GAQI,IAAAF,EAEA,CAFSA,CAET,EAFc,CAEd,CADA,IAAAC,EACA,CADSA,CACT,EADc,CACd,CAAA,IAAAC,EAAA,CAASA,CAAT,EAAc,CAVlB,CA/BJ,CALoB,CA4DpBC,GAAIA,QAAS,EACb,CACI,IAAAH,EAAA,CAAS,CACT,KAAAC,EAAA,CAAS,CACT,KAAAC,EAAA,CAAS,CAET,OAAO,KALX,CA7DoB,CA6EpBE,MAAOA,QAAS,EAChB,CACI,MAAO,KAAIP,OAAJ,CAAY,IAAAG,EAAZ,CAAoB,IAAAC,EAApB,CAA4B,IAAAC,EAA5B,CADX,CA9EoB,CA6FpBG,aAAcA,QAAS,CAACC,CAAD,CAAIC,CAAJ,CACvB,CACI,IAAIC,GAAKF,CAAAN,EAAT,CACIS,GAAKH,CAAAL,EACLS,EAAAA,CAAKJ,CAAAJ,EACT,KAAIS,GAAKJ,CAAAP,EAAT,CACIY;AAAKL,CAAAN,EACLY,EAAAA,CAAKN,CAAAL,EAET,KAAAF,EAAA,CAASS,EAAT,CAAcI,CAAd,CAAmBH,CAAnB,CAAwBE,EACxB,KAAAX,EAAA,CAASS,CAAT,CAAcC,EAAd,CAAmBH,EAAnB,CAAwBK,CACxB,KAAAX,EAAA,CAASM,EAAT,CAAcI,EAAd,CAAmBH,EAAnB,CAAwBE,EAExB,OAAO,KAZX,CA9FoB,CAyHpBG,OAAQA,QAAS,CAACC,CAAD,CACjB,CACI,MAAS,KAAAf,EAAT,GAAoBe,CAAAf,EAApB,EAA6B,IAAAC,EAA7B,GAAwCc,CAAAd,EAAxC,EAAiD,IAAAC,EAAjD,GAA4Da,CAAAb,EADhE,CA1HoB,CAwIpBc,KAAMA,QAAS,CAACC,GAAD,CACf,CACI,IAAAjB,EAAA,CAASiB,GAAAjB,EACT,KAAAC,EAAA,CAASgB,GAAAhB,EACT,KAAAC,EAAA,CAASe,GAAAf,EAAT,EAAkB,CAElB,OAAO,KALX,CAzIoB,CA6JpBgB,IAAKA,QAAS,CAAClB,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CACd,CACqB,QAAjB,GAAI,MAAOF,EAAX,EAEI,IAAAA,EAEA,CAFSA,CAAAA,EAET,EAFgB,CAEhB,CADA,IAAAC,EACA,CADSD,CAAAC,EACT,EADgB,CAChB,CAAA,IAAAC,EAAA,CAASF,CAAAE,EAAT,EAAgB,CAJpB,GAQI,IAAAF,EAEA,CAFSA,CAET,EAFc,CAEd,CADA,IAAAC,EACA,CADSA,CACT,EADc,CACd,CAAA,IAAAC,EAAA,CAASA,CAAT,EAAc,CAVlB,CAaA,OAAO,KAdX,CA9JoB,CAyLpBiB,IAAKA,QAAS,CAACJ,CAAD,CACd,CACI,IAAAf,EAAA,EAAUe,CAAAf,EACV,KAAAC,EAAA,EAAUc,CAAAd,EACV,KAAAC,EAAA,EAAUa,CAAAb,EAAV,EAAiB,CAEjB,OAAO,KALX,CA1LoB,CA4MpBkB,SAAUA,QAAS,CAACL,CAAD,CACnB,CACI,IAAAf,EAAA,EAAUe,CAAAf,EACV,KAAAC,EAAA,EAAUc,CAAAd,EACV,KAAAC,EAAA,EAAUa,CAAAb,EAAV,EAAiB,CAEjB,OAAO,KALX,CA7MoB,CAiOpBmB,SAAUA,QAAS,CAACN,CAAD,CACnB,CACI,IAAAf,EAAA;AAAUe,CAAAf,EACV,KAAAC,EAAA,EAAUc,CAAAd,EACV,KAAAC,EAAA,EAAUa,CAAAb,EAAV,EAAiB,CAEjB,OAAO,KALX,CAlOoB,CAoPpBoB,MAAOA,QAAS,CAACA,KAAD,CAChB,CACQC,QAAA,CAASD,KAAT,CAAJ,EAEI,IAAAtB,EAEA,EAFUsB,KAEV,CADA,IAAArB,EACA,EADUqB,KACV,CAAA,IAAApB,EAAA,EAAUoB,KAJd,EAUI,IAAApB,EAVJ,CASI,IAAAD,EATJ,CAQI,IAAAD,EARJ,CAQa,CAKb,OAAO,KAdX,CArPoB,CAkRpBwB,OAAQA,QAAS,CAACT,CAAD,CACjB,CACI,IAAAf,EAAA,EAAUe,CAAAf,EACV,KAAAC,EAAA,EAAUc,CAAAd,EACV,KAAAC,EAAA,EAAUa,CAAAb,EAAV,EAAiB,CAEjB,OAAO,KALX,CAnRoB,CAmSpBuB,OAAQA,QAAS,EACjB,CACI,IAAAzB,EAAA,CAAS,CAAC,IAAAA,EACV,KAAAC,EAAA,CAAS,CAAC,IAAAA,EACV,KAAAC,EAAA,CAAS,CAAC,IAAAA,EAEV,OAAO,KALX,CApSoB,CAsTpBwB,SAAUA,QAAS,CAACX,CAAD,CACnB,CACI,IAAIY,GAAKZ,CAAAf,EAAL2B,CAAW,IAAA3B,EAAf,CACI4B,GAAKb,CAAAd,EAAL2B,CAAW,IAAA3B,EACX4B,EAAAA,CAAKd,CAAAb,EAAL2B,CAAW,IAAA3B,EAAX2B,EAAqB,CAEzB,OAAOC,KAAAC,KAAA,CAAUJ,EAAV,CAAeA,EAAf,CAAoBC,EAApB,CAAyBA,EAAzB,CAA8BC,CAA9B,CAAmCA,CAAnC,CALX,CAvToB,CAyUpBG,WAAYA,QAAS,CAACjB,CAAD,CACrB,CACI,IAAIY,GAAKZ,CAAAf,EAAL2B,CAAW,IAAA3B,EAAf,CACI4B,GAAKb,CAAAd,EAAL2B,CAAW,IAAA3B,EACX4B,EAAAA,CAAKd,CAAAb,EAAL2B,CAAW,IAAA3B,EAAX2B,EAAqB,CAEzB,OAAOF,GAAP,CAAYA,EAAZ,CAAiBC,EAAjB,CAAsBA,EAAtB;AAA2BC,CAA3B,CAAgCA,CALpC,CA1UoB,CA0VpBI,OAAQA,QAAS,EACjB,CACI,IAAIjC,EAAI,IAAAA,EAAR,CACIC,EAAI,IAAAA,EADR,CAEIC,EAAI,IAAAA,EAER,OAAO4B,KAAAC,KAAA,CAAU/B,CAAV,CAAcA,CAAd,CAAkBC,CAAlB,CAAsBA,CAAtB,CAA0BC,CAA1B,CAA8BA,CAA9B,CALX,CA3VoB,CA2WpBgC,SAAUA,QAAS,EACnB,CACI,IAAIlC,EAAI,IAAAA,EAAR,CACIC,EAAI,IAAAA,EADR,CAEIC,EAAI,IAAAA,EAER,OAAOF,EAAP,CAAWA,CAAX,CAAeC,CAAf,CAAmBA,CAAnB,CAAuBC,CAAvB,CAA2BA,CAL/B,CA5WoB,CA8XpBiC,UAAWA,QAAS,EACpB,CACI,IAAInC,EAAI,IAAAA,EAAR,CACIC,EAAI,IAAAA,EADR,CAEIC,EAAI,IAAAA,EAFR,CAGIkC,IAAMpC,CAANoC,CAAUpC,CAAVoC,CAAcnC,CAAdmC,CAAkBnC,CAAlBmC,CAAsBlC,CAAtBkC,CAA0BlC,CAEpB,EAAV,CAAIkC,GAAJ,GAEIA,GAIA,CAJM,CAIN,CAJUN,IAAAC,KAAA,CAAUK,GAAV,CAIV,CAFA,IAAApC,EAEA,CAFSA,CAET,CAFaoC,GAEb,CADA,IAAAnC,EACA,CADSA,CACT,CADamC,GACb,CAAA,IAAAlC,EAAA,CAASA,CAAT,CAAakC,GANjB,CASA,OAAO,KAfX,CA/XoB,CA2ZpBC,IAAKA,QAAS,CAACtB,CAAD,CACd,CACI,MAAO,KAAAf,EAAP,CAAgBe,CAAAf,EAAhB,CAAsB,IAAAC,EAAtB,CAA+Bc,CAAAd,EAA/B,CAAqC,IAAAC,EAArC,CAA8Ca,CAAAb,EADlD,CA5ZoB,CA0apBoC,MAAOA,QAAS,CAACvB,CAAD,CAChB,CACI,IAAIP,GAAK,IAAAR,EAAT,CACIS,GAAK,IAAAR,EADT,CAEIS,GAAK,IAAAR,EAFT,CAGIS,GAAKI,CAAAf,EAHT,CAIIY,GAAKG,CAAAd,EACLY,EAAAA,CAAKE,CAAAb,EAET,KAAAF,EAAA,CAASS,EAAT,CAAcI,CAAd,CAAmBH,EAAnB,CAAwBE,EACxB,KAAAX,EAAA,CAASS,EAAT,CAAcC,EAAd,CAAmBH,EAAnB,CAAwBK,CACxB,KAAAX,EAAA,CAASM,EAAT,CAAcI,EAAd,CAAmBH,EAAnB,CAAwBE,EAExB,OAAO,KAZX,CA3aoB;AAucpB4B,KAAMA,QAAS,CAACxB,CAAD,CAAIyB,CAAJ,CACf,CACcC,IAAAA,EAAV,GAAID,CAAJ,GAAuBA,CAAvB,CAA2B,CAA3B,CAEA,KAAIhC,GAAK,IAAAR,EAAT,CACIS,GAAK,IAAAR,EADT,CAEIS,GAAK,IAAAR,EAET,KAAAF,EAAA,CAASQ,EAAT,CAAcgC,CAAd,EAAmBzB,CAAAf,EAAnB,CAAyBQ,EAAzB,CACA,KAAAP,EAAA,CAASQ,EAAT,CAAc+B,CAAd,EAAmBzB,CAAAd,EAAnB,CAAyBQ,EAAzB,CACA,KAAAP,EAAA,CAASQ,EAAT,CAAc8B,CAAd,EAAmBzB,CAAAb,EAAnB,CAAyBQ,EAAzB,CAEA,OAAO,KAXX,CAxcoB,CAgepBgC,cAAeA,QAAS,CAACC,GAAD,CACxB,CACI,IAAI3C,EAAI,IAAAA,EAAR,CACIC,EAAI,IAAAA,EADR,CAEIC,EAAI,IAAAA,EACJ0C,IAAAA,CAAID,GAAAE,IAER,KAAA7C,EAAA,CAASA,CAAT,CAAa4C,GAAA,CAAE,CAAF,CAAb,CAAoB3C,CAApB,CAAwB2C,GAAA,CAAE,CAAF,CAAxB,CAA+B1C,CAA/B,CAAmC0C,GAAA,CAAE,CAAF,CACnC,KAAA3C,EAAA,CAASD,CAAT,CAAa4C,GAAA,CAAE,CAAF,CAAb,CAAoB3C,CAApB,CAAwB2C,GAAA,CAAE,CAAF,CAAxB,CAA+B1C,CAA/B,CAAmC0C,GAAA,CAAE,CAAF,CACnC,KAAA1C,EAAA,CAASF,CAAT,CAAa4C,GAAA,CAAE,CAAF,CAAb,CAAoB3C,CAApB,CAAwB2C,GAAA,CAAE,CAAF,CAAxB,CAA+B1C,CAA/B,CAAmC0C,GAAA,CAAE,CAAF,CAEnC,OAAO,KAVX,CAjeoB,CAwfpBE,cAAeA,QAAS,CAACH,GAAD,CACxB,CACI,IAAI3C,EAAI,IAAAA,EAAR,CACIC,EAAI,IAAAA,EADR,CAEIC,EAAI,IAAAA,EACJ0C,IAAAA,CAAID,GAAAE,IAER,KAAA7C,EAAA,CAAS4C,GAAA,CAAE,CAAF,CAAT,CAAgB5C,CAAhB,CAAoB4C,GAAA,CAAE,CAAF,CAApB,CAA2B3C,CAA3B,CAA+B2C,GAAA,CAAE,CAAF,CAA/B,CAAsC1C,CAAtC,CAA0C0C,GAAA,CAAE,EAAF,CAC1C,KAAA3C,EAAA,CAAS2C,GAAA,CAAE,CAAF,CAAT,CAAgB5C,CAAhB,CAAoB4C,GAAA,CAAE,CAAF,CAApB,CAA2B3C,CAA3B,CAA+B2C,GAAA,CAAE,CAAF,CAA/B,CAAsC1C,CAAtC,CAA0C0C,GAAA,CAAE,EAAF,CAC1C,KAAA1C,EAAA,CAAS0C,GAAA,CAAE,CAAF,CAAT;AAAgB5C,CAAhB,CAAoB4C,GAAA,CAAE,CAAF,CAApB,CAA2B3C,CAA3B,CAA+B2C,GAAA,CAAE,EAAF,CAA/B,CAAuC1C,CAAvC,CAA2C0C,GAAA,CAAE,EAAF,CAE3C,OAAO,KAVX,CAzfoB,CAghBpBG,qBAAsBA,QAAS,CAACJ,GAAD,CAC/B,CACI,IAAI3C,EAAI,IAAAA,EAAR,CACIC,EAAI,IAAAA,EADR,CAEIC,EAAI,IAAAA,EACJ0C,IAAAA,CAAID,GAAAE,IAGR,KAAIG,GAAMhD,CAANgD,CAAUJ,GAAA,CAAE,CAAF,CAAVI,CAAmB/C,CAAnB+C,CAAuBJ,GAAA,CAAE,CAAF,CAAvBI,CAAgC9C,CAAhC8C,CAAoCJ,GAAA,CAAE,CAAF,CAApCI,CAA4CJ,GAAA,CAAE,EAAF,CAAhD,CACIK,GAAMjD,CAANiD,CAAUL,GAAA,CAAE,CAAF,CAAVK,CAAmBhD,CAAnBgD,CAAuBL,GAAA,CAAE,CAAF,CAAvBK,CAAgC/C,CAAhC+C,CAAoCL,GAAA,CAAE,EAAF,CAApCK,CAA6CL,GAAA,CAAE,EAAF,CADjD,CAEIM,GAAMlD,CAANkD,CAAUN,GAAA,CAAE,CAAF,CAAVM,CAAmBjD,CAAnBiD,CAAuBN,GAAA,CAAE,CAAF,CAAvBM,CAAgChD,CAAhCgD,CAAoCN,GAAA,CAAE,EAAF,CAApCM,CAA6CN,GAAA,CAAE,EAAF,CAEjD,KAAA5C,EAAA,EALUA,CAKV,CALc4C,GAAA,CAAE,CAAF,CAKd,CALuB3C,CAKvB,CAL2B2C,GAAA,CAAE,CAAF,CAK3B,CALoC1C,CAKpC,CALwC0C,GAAA,CAAE,CAAF,CAKxC,CALgDA,GAAA,CAAE,EAAF,CAKhD,EAAcM,EACd,KAAAjD,EAAA,CAAS+C,EAAT,CAAcE,EACd,KAAAhD,EAAA,CAAS+C,EAAT,CAAcC,EAEd,OAAO,KAfX,CAjhBoB,CA6iBpBC,cAAeA,QAAS,CAACC,CAAD,CACxB,CAEI,IAAIpD,EAAI,IAAAA,EAAR,CACIC,EAAI,IAAAA,EADR,CAEIC,EAAI,IAAAA,EAFR,CAGImD,GAAKD,CAAApD,EAHT,CAIIsD,GAAKF,CAAAnD,EAJT,CAKIsD,GAAKH,CAAAlD,EACLsD,EAAAA,CAAKJ,CAAAK,EAGT,KAAIC,GAAKF,CAALE,CAAU1D,CAAV0D,CAAcJ,EAAdI,CAAmBxD,CAAnBwD,CAAuBH,EAAvBG,CAA4BzD,CAAhC,CACI0D,GAAKH,CAALG,CAAU1D,CAAV0D,CAAcJ,EAAdI,CAAmB3D,CAAnB2D,CAAuBN,EAAvBM,CAA4BzD,CADhC,CAEI0D,GAAKJ,CAALI,CAAU1D,CAAV0D,CAAcP,EAAdO,CAAmB3D,CAAnB2D,CAAuBN,EAAvBM,CAA4B5D,CAC5B6D,EAAAA,CAAK,CAACR,EAANQ,CAAW7D,CAAX6D,CAAeP,EAAfO,CAAoB5D,CAApB4D,CAAwBN,EAAxBM,CAA6B3D,CAGjC,KAAAF,EAAA,CAAS0D,EAAT,CAAcF,CAAd,CAAmBK,CAAnB,CAAwB,CAACR,EAAzB;AAA8BM,EAA9B,CAAmC,CAACJ,EAApC,CAAyCK,EAAzC,CAA8C,CAACN,EAC/C,KAAArD,EAAA,CAAS0D,EAAT,CAAcH,CAAd,CAAmBK,CAAnB,CAAwB,CAACP,EAAzB,CAA8BM,EAA9B,CAAmC,CAACP,EAApC,CAAyCK,EAAzC,CAA8C,CAACH,EAC/C,KAAArD,EAAA,CAAS0D,EAAT,CAAcJ,CAAd,CAAmBK,CAAnB,CAAwB,CAACN,EAAzB,CAA8BG,EAA9B,CAAmC,CAACJ,EAApC,CAAyCK,EAAzC,CAA8C,CAACN,EAE/C,OAAO,KArBX,CA9iBoB,CAilBpBS,QAASA,QAAS,CAACnB,GAAD,CAClB,CACI,IAAI3C,EAAI,IAAAA,EAAR,CACIC,EAAI,IAAAA,EADR,CAEIC,EAAI,IAAAA,EACJ0C,IAAAA,CAAID,GAAAE,IAGR,KAAIkB,IAAMnB,GAAA,CAAE,CAAF,CAAV,CACIoB,IAAMpB,GAAA,CAAE,CAAF,CADV,CAIIqB,IAAMrB,GAAA,CAAE,CAAF,CAJV,CAKIsB,IAAMtB,GAAA,CAAE,CAAF,CALV,CAQIuB,IAAMvB,GAAA,CAAE,CAAF,CARV,CASIwB,IAAMxB,GAAA,CAAE,EAAF,CATV,CAYIyB,IAAMzB,GAAA,CAAE,EAAF,CAZV,CAaI0B,IAAM1B,GAAA,CAAE,EAAF,CAbV,CAgBI2B,GAAK,CAALA,EAAUvE,CAAVuE,CAdM3B,GAAA4B,CAAE,CAAFA,CAcND,CAAoBtE,CAApBsE,CAVM3B,GAAA6B,CAAE,CAAFA,CAUNF,CAA8BrE,CAA9BqE,CANM3B,GAAA8B,CAAE,EAAFA,CAMNH,CAFM3B,GAAA+B,CAAE,EAAFA,CAENJ,CAEJ,KAAAvE,EAAA,EAAUA,CAAV,CAnBU4C,GAAAgC,CAAE,CAAFA,CAmBV,CAAoB3E,CAApB,CAfU2C,GAAAiC,CAAE,CAAFA,CAeV,CAA8B3E,CAA9B,CAXU0C,GAAAkC,CAAE,CAAFA,CAWV,CAPUlC,GAAAmC,CAAE,EAAFA,CAOV,EAA+CR,EAC/C,KAAAtE,EAAA,EAAUD,CAAV,CAAc+D,GAAd,CAAoB9D,CAApB,CAAwBgE,GAAxB,CAA8B/D,CAA9B,CAAkCiE,GAAlC,CAAwCE,GAAxC,EAA+CE,EAC/C,KAAArE,EAAA,EAAUF,CAAV,CAAcgE,GAAd,CAAoB/D,CAApB,CAAwBiE,GAAxB,CAA8BhE,CAA9B,CAAkCkE,GAAlC,CAAwCE,GAAxC,EAA+CC,EAE/C,OAAO,KA7BX,CAllBoB,CAooBpBS,UAAWA,QAAS,CAACC,QAAD,CAAWC,iBAAX,CACpB,CAII,IAAIC,WAAaF,QAAAxB,EAAjB,CAGIxD,EAAKkF,UAALlF;AAAkB,IAAAA,EAAlBA,CAA2B,CAA3BA,CALQgF,QAAAhF,EAEZ,CAIIC,EAAI,IAAAA,EAER,KAAAF,EAAA,CAAU,CAAV,EAJQ,IAAAA,EAIR,CATYiF,QAAAjF,EASZ,EAPgBiF,QAAA/E,EAOhB,CAA+B,CAC/B,KAAAD,EAAA,CAAU,CAAV,CAAcA,CAAd,CAAmBkF,UAAnB,CAAgC,CAChC,KAAAjF,EAAA,CAAS,CAAT,CAAaA,CAAb,CAAiB,CAEjB,OAAO,KAAA4D,QAAA,CAAaoB,iBAAb,CAdX,CAroBoB,CA8pBpBE,MAAOA,QAAS,EAChB,CAGI,IAAAlF,EAAA,CADA,IAAAD,EACA,CAFA,IAAAD,EAEA,CAFS,CAIT,OAAO,KALX,CA/pBoB,CAAV,CAivBdL,OAAAC,QAAA,CAAiBC,OA5wBuF;",
"sources":["node_modules/Phaser/src/math/Vector3.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$math$Vector3\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A representation of a vector in 3D space.\r\n *\r\n * A three-component vector.\r\n *\r\n * @class Vector3\r\n * @memberOf Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n */\r\nvar Vector3 = new Class({\r\n\r\n    initialize:\r\n\r\n    function Vector3 (x, y, z)\r\n    {\r\n        /**\r\n         * The x component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector3#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = 0;\r\n\r\n        /**\r\n         * The y component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector3#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = 0;\r\n\r\n        /**\r\n         * The z component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector3#z\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.z = 0;\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set this Vector to point up.\r\n     *\r\n     * Sets the y component of the vector to 1, and the others to 0.\r\n     *\r\n     * @method Phaser.Math.Vector3#up\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    up: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 1;\r\n        this.z = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Make a clone of this Vector3.\r\n     *\r\n     * @method Phaser.Math.Vector3#clone\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} A new Vector3 object containing this Vectors values.\r\n     */\r\n    clone: function ()\r\n    {\r\n        return new Vector3(this.x, this.y, this.z);\r\n    },\r\n\r\n    /**\r\n     * Calculate the cross (vector) product of two given Vectors.\r\n     *\r\n     * @method Phaser.Math.Vector3#crossVectors\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} a - The first Vector to multiply.\r\n     * @param {Phaser.Math.Vector3} b - The second Vector to multiply.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    crossVectors: function (a, b)\r\n    {\r\n        var ax = a.x;\r\n        var ay = a.y;\r\n        var az = a.z;\r\n        var bx = b.x;\r\n        var by = b.y;\r\n        var bz = b.z;\r\n\r\n        this.x = ay * bz - az * by;\r\n        this.y = az * bx - ax * bz;\r\n        this.z = ax * by - ay * bx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Check whether this Vector is equal to a given Vector.\r\n     *\r\n     * Performs a strict equality check against each Vector's components.\r\n     *\r\n     * @method Phaser.Math.Vector3#equals\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector3 to compare against.\r\n     *\r\n     * @return {boolean} True if the two vectors strictly match, otherwise false.\r\n     */\r\n    equals: function (v)\r\n    {\r\n        return ((this.x === v.x) && (this.y === v.y) && (this.z === v.z));\r\n    },\r\n\r\n    /**\r\n     * Copy the components of a given Vector into this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} src - The Vector to copy the components from.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        this.x = src.x;\r\n        this.y = src.y;\r\n        this.z = src.z || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the `x`, `y`, and `z` components of this Vector to the given `x`, `y`, and `z` values.\r\n     *\r\n     * @method Phaser.Math.Vector3#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} x - The x value to set for this Vector, or an object containing x, y and z components.\r\n     * @param {number} [y] - The y value to set for this Vector.\r\n     * @param {number} [z] - The z value to set for this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    set: function (x, y, z)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add a given Vector to this Vector. Addition is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector3#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to add to this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    add: function (v)\r\n    {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Subtract the given Vector from this Vector. Subtraction is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector3#subtract\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to subtract from this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    subtract: function (v)\r\n    {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise multiplication between this Vector and the given Vector.\r\n     *\r\n     * Multiplies this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to multiply this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    multiply: function (v)\r\n    {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        this.z *= v.z || 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale this Vector by the given value.\r\n     *\r\n     * @method Phaser.Math.Vector3#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} scale - The value to scale this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    scale: function (scale)\r\n    {\r\n        if (isFinite(scale))\r\n        {\r\n            this.x *= scale;\r\n            this.y *= scale;\r\n            this.z *= scale;\r\n        }\r\n        else\r\n        {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.z = 0;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise division between this Vector and the given Vector.\r\n     *\r\n     * Divides this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#divide\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to divide this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    divide: function (v)\r\n    {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        this.z /= v.z || 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Negate the `x`, `y` and `z` components of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#negate\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    negate: function ()\r\n    {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#distance\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector.\r\n     */\r\n    distance: function (v)\r\n    {\r\n        var dx = v.x - this.x;\r\n        var dy = v.y - this.y;\r\n        var dz = v.z - this.z || 0;\r\n\r\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector, squared.\r\n     *\r\n     * @method Phaser.Math.Vector3#distanceSq\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector, squared.\r\n     */\r\n    distanceSq: function (v)\r\n    {\r\n        var dx = v.x - this.x;\r\n        var dy = v.y - this.y;\r\n        var dz = v.z - this.z || 0;\r\n\r\n        return dx * dx + dy * dy + dz * dz;\r\n    },\r\n\r\n    /**\r\n     * Calculate the length (or magnitude) of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#length\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector.\r\n     */\r\n    length: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Vector squared.\r\n     *\r\n     * @method Phaser.Math.Vector3#lengthSq\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector, squared.\r\n     */\r\n    lengthSq: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n\r\n        return x * x + y * y + z * z;\r\n    },\r\n\r\n    /**\r\n     * Normalize this Vector.\r\n     *\r\n     * Makes the vector a unit length vector (magnitude of 1) in the same direction.\r\n     *\r\n     * @method Phaser.Math.Vector3#normalize\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    normalize: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var len = x * x + y * y + z * z;\r\n\r\n        if (len > 0)\r\n        {\r\n            len = 1 / Math.sqrt(len);\r\n\r\n            this.x = x * len;\r\n            this.y = y * len;\r\n            this.z = z * len;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the dot product of this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#dot\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector3 to dot product with this Vector3.\r\n     *\r\n     * @return {number} The dot product of this Vector and `v`.\r\n     */\r\n    dot: function (v)\r\n    {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    },\r\n\r\n    /**\r\n     * Calculate the cross (vector) product of this Vector (which will be modified) and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#cross\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector to cross product with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    cross: function (v)\r\n    {\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var bx = v.x;\r\n        var by = v.y;\r\n        var bz = v.z;\r\n\r\n        this.x = ay * bz - az * by;\r\n        this.y = az * bx - ax * bz;\r\n        this.z = ax * by - ay * bx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Linearly interpolate between this Vector and the given Vector.\r\n     *\r\n     * Interpolates this Vector towards the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#lerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector3 to interpolate towards.\r\n     * @param {number} [t=0] - The interpolation percentage, between 0 and 1.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    lerp: function (v, t)\r\n    {\r\n        if (t === undefined) { t = 0; }\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n\r\n        this.x = ax + t * (v.x - ax);\r\n        this.y = ay + t * (v.y - ay);\r\n        this.z = az + t * (v.z - az);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Vector3#transformMat3\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} mat - The Matrix3 to transform this Vector3 with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    transformMat3: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat.val;\r\n\r\n        this.x = x * m[0] + y * m[3] + z * m[6];\r\n        this.y = x * m[1] + y * m[4] + z * m[7];\r\n        this.z = x * m[2] + y * m[5] + z * m[8];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Vector3#transformMat4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector3 with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    transformMat4: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat.val;\r\n\r\n        this.x = m[0] * x + m[4] * y + m[8] * z + m[12];\r\n        this.y = m[1] * x + m[5] * y + m[9] * z + m[13];\r\n        this.z = m[2] * x + m[6] * y + m[10] * z + m[14];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Math.Vector3#transformCoordinates\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector3 with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    transformCoordinates: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat.val;\r\n\r\n        var tx = (x * m[0]) + (y * m[4]) + (z * m[8]) + m[12];\r\n        var ty = (x * m[1]) + (y * m[5]) + (z * m[9]) + m[13];\r\n        var tz = (x * m[2]) + (y * m[6]) + (z * m[10]) + m[14];\r\n        var tw = (x * m[3]) + (y * m[7]) + (z * m[11]) + m[15];\r\n\r\n        this.x = tx / tw;\r\n        this.y = ty / tw;\r\n        this.z = tz / tw;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Quaternion.\r\n     *\r\n     * @method Phaser.Math.Vector3#transformQuat\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Quaternion} q - The Quaternion to transform this Vector with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    transformQuat: function (q)\r\n    {\r\n        // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var qx = q.x;\r\n        var qy = q.y;\r\n        var qz = q.z;\r\n        var qw = q.w;\r\n\r\n        // calculate quat * vec\r\n        var ix = qw * x + qy * z - qz * y;\r\n        var iy = qw * y + qz * x - qx * z;\r\n        var iz = qw * z + qx * y - qy * x;\r\n        var iw = -qx * x - qy * y - qz * z;\r\n\r\n        // calculate result * inverse quat\r\n        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Multiplies this Vector3 by the specified matrix, applying a W divide. This is useful for projection,\r\n     * e.g. unprojecting a 2D point into 3D space.\r\n     *\r\n     * @method Phaser.Math.Vector3#project\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to multiply this Vector3 with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    project: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat.val;\r\n\r\n        var a00 = m[0];\r\n        var a01 = m[1];\r\n        var a02 = m[2];\r\n        var a03 = m[3];\r\n        var a10 = m[4];\r\n        var a11 = m[5];\r\n        var a12 = m[6];\r\n        var a13 = m[7];\r\n        var a20 = m[8];\r\n        var a21 = m[9];\r\n        var a22 = m[10];\r\n        var a23 = m[11];\r\n        var a30 = m[12];\r\n        var a31 = m[13];\r\n        var a32 = m[14];\r\n        var a33 = m[15];\r\n\r\n        var lw = 1 / (x * a03 + y * a13 + z * a23 + a33);\r\n\r\n        this.x = (x * a00 + y * a10 + z * a20 + a30) * lw;\r\n        this.y = (x * a01 + y * a11 + z * a21 + a31) * lw;\r\n        this.z = (x * a02 + y * a12 + z * a22 + a32) * lw;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Unproject this point from 2D space to 3D space.\r\n     * The point should have its x and y properties set to\r\n     * 2D screen space, and the z either at 0 (near plane)\r\n     * or 1 (far plane). The provided matrix is assumed to already\r\n     * be combined, i.e. projection * view * model.\r\n     *\r\n     * After this operation, this vector's (x, y, z) components will\r\n     * represent the unprojected 3D coordinate.\r\n     *\r\n     * @method Phaser.Math.Vector3#unproject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} viewport - Screen x, y, width and height in pixels.\r\n     * @param {Phaser.Math.Matrix4} invProjectionView - Combined projection and view matrix.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    unproject: function (viewport, invProjectionView)\r\n    {\r\n        var viewX = viewport.x;\r\n        var viewY = viewport.y;\r\n        var viewWidth = viewport.z;\r\n        var viewHeight = viewport.w;\r\n\r\n        var x = this.x - viewX;\r\n        var y = (viewHeight - this.y - 1) - viewY;\r\n        var z = this.z;\r\n\r\n        this.x = (2 * x) / viewWidth - 1;\r\n        this.y = (2 * y) / viewHeight - 1;\r\n        this.z = 2 * z - 1;\r\n\r\n        return this.project(invProjectionView);\r\n    },\r\n\r\n    /**\r\n     * Make this Vector the zero vector (0, 0, 0).\r\n     *\r\n     * @method Phaser.Math.Vector3#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\n/*\r\nVector3.Zero = function ()\r\n{\r\n    return new Vector3(0, 0, 0);\r\n};\r\n\r\nVector3.Up = function ()\r\n{\r\n    return new Vector3(0, 1.0, 0);\r\n};\r\n\r\nVector3.Copy = function (source)\r\n{\r\n    return new Vector3(source.x, source.y, source.z);\r\n};\r\n\r\nVector3.TransformCoordinates = function (vector, transformation)\r\n{\r\n    var x = (vector.x * transformation.m[0]) + (vector.y * transformation.m[4]) + (vector.z * transformation.m[8]) + transformation.m[12];\r\n    var y = (vector.x * transformation.m[1]) + (vector.y * transformation.m[5]) + (vector.z * transformation.m[9]) + transformation.m[13];\r\n    var z = (vector.x * transformation.m[2]) + (vector.y * transformation.m[6]) + (vector.z * transformation.m[10]) + transformation.m[14];\r\n    var w = (vector.x * transformation.m[3]) + (vector.y * transformation.m[7]) + (vector.z * transformation.m[11]) + transformation.m[15];\r\n\r\n    return new Vector3(x / w, y / w, z / w);\r\n};\r\n\r\nVector3.TransformNormal = function (vector, transformation)\r\n{\r\n    var x = (vector.x * transformation.m[0]) + (vector.y * transformation.m[4]) + (vector.z * transformation.m[8]);\r\n    var y = (vector.x * transformation.m[1]) + (vector.y * transformation.m[5]) + (vector.z * transformation.m[9]);\r\n    var z = (vector.x * transformation.m[2]) + (vector.y * transformation.m[6]) + (vector.z * transformation.m[10]);\r\n\r\n    return new Vector3(x, y, z);\r\n};\r\n\r\nVector3.Dot = function (left, right)\r\n{\r\n    return (left.x * right.x + left.y * right.y + left.z * right.z);\r\n};\r\n\r\nVector3.Cross = function (left, right)\r\n{\r\n    var x = left.y * right.z - left.z * right.y;\r\n    var y = left.z * right.x - left.x * right.z;\r\n    var z = left.x * right.y - left.y * right.x;\r\n\r\n    return new Vector3(x, y, z);\r\n};\r\n\r\nVector3.Normalize = function (vector)\r\n{\r\n    var newVector = Vector3.Copy(vector);\r\n    newVector.normalize();\r\n\r\n    return newVector;\r\n};\r\n\r\nVector3.Distance = function (value1, value2)\r\n{\r\n    return Math.sqrt(Vector3.DistanceSquared(value1, value2));\r\n};\r\n\r\nVector3.DistanceSquared = function (value1, value2)\r\n{\r\n    var x = value1.x - value2.x;\r\n    var y = value1.y - value2.y;\r\n    var z = value1.z - value2.z;\r\n\r\n    return (x * x) + (y * y) + (z * z);\r\n};\r\n*/\r\n\r\nmodule.exports = Vector3;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Vector3","Class","initialize","x","y","z","up","clone","crossVectors","a","b","ax","ay","az","bx","by","bz","equals","v","copy","src","set","add","subtract","multiply","scale","isFinite","divide","negate","distance","dx","dy","dz","Math","sqrt","distanceSq","length","lengthSq","normalize","len","dot","cross","lerp","t","undefined","transformMat3","mat","m","val","transformMat4","transformCoordinates","ty","tz","tw","transformQuat","q","qx","qy","qz","qw","w","ix","iy","iz","iw","project","a01","a02","a11","a12","a21","a22","a31","a32","lw","a03","a13","a23","a33","a00","a10","a20","a30","unproject","viewport","invProjectionView","viewHeight","reset"]
}
