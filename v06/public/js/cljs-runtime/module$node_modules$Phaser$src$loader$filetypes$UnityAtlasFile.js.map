{
"version":3,
"file":"module$node_modules$Phaser$src$loader$filetypes$UnityAtlasFile.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/Phaser/src/loader/filetypes/UnityAtlasFile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$loader$filetypes$UnityAtlasFile\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar ImageFile = require('./ImageFile.js');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\nvar MultiFile = require('../MultiFile.js');\r\nvar TextFile = require('./TextFile.js');\r\n\r\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.UnityAtlasFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within both the Loader and the Texture Manager.\r\n * @property {string} [textureURL] - The absolute or relative URL to load the texture image file from.\r\n * @property {string} [textureExtension='png'] - The default file extension to use for the image texture if no url is provided.\r\n * @property {XHRSettingsObject} [textureXhrSettings] - Extra XHR Settings specifically for the texture image file.\r\n * @property {string} [normalMap] - The filename of an associated normal map. It uses the same path and url to load as the texture image.\r\n * @property {string} [atlasURL] - The absolute or relative URL to load the atlas data file from.\r\n * @property {string} [atlasExtension='txt'] - The default file extension to use for the atlas data if no url is provided.\r\n * @property {XHRSettingsObject} [atlasXhrSettings] - Extra XHR Settings specifically for the atlas data file.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A single text file based Unity Texture Atlas File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#unityAtlas method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#unityAtlas.\r\n *\r\n * @class UnityAtlasFile\r\n * @extends Phaser.Loader.MultiFile\r\n * @memberOf Phaser.Loader.FileTypes\r\n * @constructor\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.UnityAtlasFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string|string[]} [textureURL] - The absolute or relative URL to load the texture image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {string} [atlasURL] - The absolute or relative URL to load the texture atlas data file from. If undefined or `null` it will be set to `<key>.txt`, i.e. if `key` was \"alien\" then the URL will be \"alien.txt\".\r\n * @param {XHRSettingsObject} [textureXhrSettings] - An XHR Settings configuration object for the atlas image file. Used in replacement of the Loaders default XHR Settings.\r\n * @param {XHRSettingsObject} [atlasXhrSettings] - An XHR Settings configuration object for the atlas data file. Used in replacement of the Loaders default XHR Settings.\r\n */\r\nvar UnityAtlasFile = new Class({\r\n\r\n    Extends: MultiFile,\r\n\r\n    initialize:\r\n\r\n    function UnityAtlasFile (loader, key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings)\r\n    {\r\n        var image;\r\n        var data;\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            image = new ImageFile(loader, {\r\n                key: key,\r\n                url: GetFastValue(config, 'textureURL'),\r\n                extension: GetFastValue(config, 'textureExtension', 'png'),\r\n                normalMap: GetFastValue(config, 'normalMap'),\r\n                xhrSettings: GetFastValue(config, 'textureXhrSettings')\r\n            });\r\n\r\n            data = new TextFile(loader, {\r\n                key: key,\r\n                url: GetFastValue(config, 'atlasURL'),\r\n                extension: GetFastValue(config, 'atlasExtension', 'txt'),\r\n                xhrSettings: GetFastValue(config, 'atlasXhrSettings')\r\n            });\r\n        }\r\n        else\r\n        {\r\n            image = new ImageFile(loader, key, textureURL, textureXhrSettings);\r\n            data = new TextFile(loader, key, atlasURL, atlasXhrSettings);\r\n        }\r\n\r\n        if (image.linkFile)\r\n        {\r\n            //  Image has a normal map\r\n            MultiFile.call(this, loader, 'unityatlas', key, [ image, data, image.linkFile ]);\r\n        }\r\n        else\r\n        {\r\n            MultiFile.call(this, loader, 'unityatlas', key, [ image, data ]);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.UnityAtlasFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        if (this.failed === 0 && !this.complete)\r\n        {\r\n            var image = this.files[0];\r\n            var text = this.files[1];\r\n            var normalMap = (this.files[2]) ? this.files[2].data : null;\r\n\r\n            this.loader.textureManager.addUnityAtlas(image.key, image.data, text.data, normalMap);\r\n\r\n            text.addToCache();\r\n\r\n            this.complete = true;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds a Unity YAML based Texture Atlas, or array of atlases, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.unityAtlas('mainmenu', 'images/MainMenu.png', 'images/MainMenu.txt');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\r\n * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\r\n *\r\n * Phaser expects the atlas data to be provided in a YAML formatted text file as exported from Unity.\r\n * \r\n * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.unityAtlas({\r\n *     key: 'mainmenu',\r\n *     textureURL: 'images/MainMenu.png',\r\n *     atlasURL: 'images/MainMenu.txt'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.UnityAtlasFileConfig` for more details.\r\n *\r\n * Once the atlas has finished loading you can use frames from it as textures for a Game Object by referencing its key:\r\n * \r\n * ```javascript\r\n * this.load.unityAtlas('mainmenu', 'images/MainMenu.png', 'images/MainMenu.json');\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'mainmenu', 'background');\r\n * ```\r\n *\r\n * To get a list of all available frames within an atlas please consult your Texture Atlas software.\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\r\n * then you can specify it by providing an array as the `url` where the second element is the normal map:\r\n * \r\n * ```javascript\r\n * this.load.unityAtlas('mainmenu', [ 'images/MainMenu.png', 'images/MainMenu-n.png' ], 'images/MainMenu.txt');\r\n * ```\r\n *\r\n * Or, if you are using a config object use the `normalMap` property:\r\n * \r\n * ```javascript\r\n * this.load.unityAtlas({\r\n *     key: 'mainmenu',\r\n *     textureURL: 'images/MainMenu.png',\r\n *     normalMap: 'images/MainMenu-n.png',\r\n *     atlasURL: 'images/MainMenu.txt'\r\n * });\r\n * ```\r\n *\r\n * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\r\n * Normal maps are a WebGL only feature.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Unity Atlas File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#unityAtlas\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.UnityAtlasFileConfig|Phaser.Loader.FileTypes.UnityAtlasFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string|string[]} [textureURL] - The absolute or relative URL to load the texture image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {string} [atlasURL] - The absolute or relative URL to load the texture atlas data file from. If undefined or `null` it will be set to `<key>.txt`, i.e. if `key` was \"alien\" then the URL will be \"alien.txt\".\r\n * @param {XHRSettingsObject} [textureXhrSettings] - An XHR Settings configuration object for the atlas image file. Used in replacement of the Loaders default XHR Settings.\r\n * @param {XHRSettingsObject} [atlasXhrSettings] - An XHR Settings configuration object for the atlas data file. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('unityAtlas', function (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings)\r\n{\r\n    var multifile;\r\n\r\n    //  Supports an Object file definition in the key argument\r\n    //  Or an array of objects in the key argument\r\n    //  Or a single entry where all arguments have been defined\r\n\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            multifile = new UnityAtlasFile(this, key[i]);\r\n\r\n            this.addFile(multifile.files);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        multifile = new UnityAtlasFile(this, key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings);\r\n\r\n        this.addFile(multifile.files);\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = UnityAtlasFile;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","FileTypesManager","GetFastValue","ImageFile","IsPlainObject","MultiFile","TextFile","UnityAtlasFile","Extends","initialize","loader","key","textureURL","atlasURL","textureXhrSettings","atlasXhrSettings","image","url","extension","normalMap","xhrSettings","data","linkFile","call","addToCache","failed","complete","files","text","textureManager","addUnityAtlas","register","Array","isArray","i","length","multifile","addFile"]
}
