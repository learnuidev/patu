{
"version":3,
"file":"module$node_modules$Phaser$src$physics$matter_js$lib$plugins$MatterWrap.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/Phaser/src/physics/matter-js/lib/plugins/MatterWrap.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$physics$matter_js$lib$plugins$MatterWrap\"] = function(global,require,module,exports) {\nvar Matter = require('../../CustomMain');\r\n\r\n/**\r\n * A coordinate wrapping plugin for matter.js.\r\n * See the readme for usage and examples.\r\n * @module MatterWrap\r\n */\r\nvar MatterWrap = {\r\n  // plugin meta\r\n  name: 'matter-wrap', // PLUGIN_NAME\r\n  version: '0.1.4', // PLUGIN_VERSION\r\n  for: 'matter-js@^0.13.1',\r\n  silent: true, // no console log please\r\n\r\n  // installs the plugin where `base` is `Matter`\r\n  // you should not need to call this directly.\r\n  install: function(base) {\r\n    base.after('Engine.update', function() {\r\n      MatterWrap.Engine.update(this);\r\n    });\r\n  },\r\n\r\n  Engine: {\r\n    /**\r\n     * Updates the engine by wrapping bodies and composites inside `engine.world`.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterWrap.Engine.update\r\n     * @param {Matter.Engine} engine The engine to update.\r\n     * @returns {void} No return value.\r\n     */\r\n    update: function(engine) {\r\n      var world = engine.world,\r\n        bodies = Matter.Composite.allBodies(world),\r\n        composites = Matter.Composite.allComposites(world);\r\n\r\n      for (var i = 0; i < bodies.length; i += 1) {\r\n        var body = bodies[i];\r\n\r\n        if (body.plugin.wrap) {\r\n          MatterWrap.Body.wrap(body, body.plugin.wrap);\r\n        }\r\n      }\r\n\r\n      for (i = 0; i < composites.length; i += 1) {\r\n        var composite = composites[i];\r\n\r\n        if (composite.plugin.wrap) {\r\n          MatterWrap.Composite.wrap(composite, composite.plugin.wrap);\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  Bounds: {\r\n    /**\r\n     * Returns a translation vector that wraps the `objectBounds` inside the `bounds`.\r\n     * @function MatterWrap.Bounds.wrap\r\n     * @param {Matter.Bounds} objectBounds The bounds of the object to wrap inside the bounds.\r\n     * @param {Matter.Bounds} bounds The bounds to wrap the body inside.\r\n     * @returns {?Matter.Vector} A translation vector (only if wrapping is required).\r\n     */\r\n    wrap: function(objectBounds, bounds) {\r\n      var x = null,\r\n        y = null;\r\n\r\n      if (typeof bounds.min.x !== 'undefined' && typeof bounds.max.x !== 'undefined') {\r\n        if (objectBounds.min.x > bounds.max.x) {\r\n          x = bounds.min.x - objectBounds.max.x;\r\n        } else if (objectBounds.max.x < bounds.min.x) {\r\n          x = bounds.max.x - objectBounds.min.x;\r\n        }\r\n      }\r\n\r\n      if (typeof bounds.min.y !== 'undefined' && typeof bounds.max.y !== 'undefined') {\r\n        if (objectBounds.min.y > bounds.max.y) {\r\n          y = bounds.min.y - objectBounds.max.y;\r\n        } else if (objectBounds.max.y < bounds.min.y) {\r\n          y = bounds.max.y - objectBounds.min.y;\r\n        }\r\n      }\r\n\r\n      if (x !== null || y !== null) {\r\n        return {\r\n          x: x || 0,\r\n          y: y || 0\r\n        };\r\n      }\r\n    }\r\n  },\r\n\r\n  Body: {\r\n    /**\r\n     * Wraps the `body` position such that it always stays within the given bounds. \r\n     * Upon crossing a boundary the body will appear on the opposite side of the bounds, \r\n     * while maintaining its velocity.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterWrap.Body.wrap\r\n     * @param {Matter.Body} body The body to wrap.\r\n     * @param {Matter.Bounds} bounds The bounds to wrap the body inside.\r\n     * @returns {?Matter.Vector} The translation vector that was applied (only if wrapping was required).\r\n     */\r\n    wrap: function(body, bounds) {\r\n      var translation = MatterWrap.Bounds.wrap(body.bounds, bounds);\r\n\r\n      if (translation) {\r\n        Matter.Body.translate(body, translation);\r\n      }\r\n\r\n      return translation;\r\n    }\r\n  },\r\n\r\n  Composite: {\r\n    /**\r\n     * Returns the union of the bounds of all of the composite's bodies\r\n     * (not accounting for constraints).\r\n     * @function MatterWrap.Composite.bounds\r\n     * @param {Matter.Composite} composite The composite.\r\n     * @returns {Matter.Bounds} The composite bounds.\r\n     */\r\n    bounds: function(composite) {\r\n      var bodies = Matter.Composite.allBodies(composite),\r\n        vertices = [];\r\n      \r\n      for (var i = 0; i < bodies.length; i += 1) {\r\n        var body = bodies[i];\r\n        vertices.push(body.bounds.min, body.bounds.max);\r\n      }\r\n\r\n      return Matter.Bounds.create(vertices);\r\n    },\r\n\r\n    /**\r\n     * Wraps the `composite` position such that it always stays within the given bounds. \r\n     * Upon crossing a boundary the composite will appear on the opposite side of the bounds, \r\n     * while maintaining its velocity.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterWrap.Composite.wrap\r\n     * @param {Matter.Composite} composite The composite to wrap.\r\n     * @param {Matter.Bounds} bounds The bounds to wrap the composite inside.\r\n     * @returns {?Matter.Vector} The translation vector that was applied (only if wrapping was required).\r\n     */\r\n    wrap: function(composite, bounds) {\r\n      var translation = MatterWrap.Bounds.wrap(\r\n        MatterWrap.Composite.bounds(composite), \r\n        bounds\r\n      );\r\n\r\n      if (translation) {\r\n        Matter.Composite.translate(composite, translation);\r\n      }\r\n\r\n      return translation;\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = MatterWrap;\r\n\r\n/**\r\n * @namespace Matter.Body\r\n * @see http://brm.io/matter-js/docs/classes/Body.html\r\n */\r\n\r\n/**\r\n * This plugin adds a new property `body.plugin.wrap` to instances of `Matter.Body`.  \r\n * This is a `Matter.Bounds` instance that specifies the wrapping region.\r\n * @property {Matter.Bounds} body.plugin.wrap\r\n * @memberof Matter.Body\r\n */\r\n\r\n/**\r\n * This plugin adds a new property `composite.plugin.wrap` to instances of `Matter.Composite`.  \r\n * This is a `Matter.Bounds` instance that specifies the wrapping region.\r\n * @property {Matter.Bounds} composite.plugin.wrap\r\n * @memberof Matter.Composite\r\n */\n};"],
"names":["shadow$provide","global","require","module","exports","Matter","MatterWrap","name","version","for","silent","install","base","after","Engine","update","engine","world","bodies","Composite","allBodies","composites","allComposites","i","length","body","plugin","wrap","Body","composite","Bounds","objectBounds","bounds","x","y","min","max","translation","translate","vertices","push","create"]
}
