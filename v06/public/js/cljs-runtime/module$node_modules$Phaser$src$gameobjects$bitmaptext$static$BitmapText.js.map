{
"version":3,
"file":"module$node_modules$Phaser$src$gameobjects$bitmaptext$static$BitmapText.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/Phaser/src/gameobjects/bitmaptext/static/BitmapText.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$gameobjects$bitmaptext$static$BitmapText\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\nvar Components = require('../../components');\r\nvar GameObject = require('../../GameObject');\r\nvar GetBitmapTextSize = require('../GetBitmapTextSize');\r\nvar ParseFromAtlas = require('../ParseFromAtlas');\r\nvar Render = require('./BitmapTextRender');\r\n\r\n/**\r\n * The font data for an individual character of a Bitmap Font.\r\n *\r\n * Describes the character's position, size, offset and kerning.\r\n *\r\n * @typedef {object} BitmapFontCharacterData\r\n *\r\n * @property {number} x - The x position of the character.\r\n * @property {number} y - The y position of the character.\r\n * @property {number} width - The width of the character.\r\n * @property {number} height - The height of the character.\r\n * @property {number} centerX - The center x position of the character.\r\n * @property {number} centerY - The center y position of the character.\r\n * @property {number} xOffset - The x offset of the character.\r\n * @property {number} yOffset - The y offset of the character.\r\n * @property {object} data - Extra data for the character.\r\n * @property {Object.<number>} kerning - Kerning values, keyed by character code.\r\n */\r\n\r\n/**\r\n * Bitmap Font data that can be used by a BitmapText Game Object.\r\n *\r\n * @typedef {object} BitmapFontData\r\n *\r\n * @property {string} font - The name of the font.\r\n * @property {number} size - The size of the font.\r\n * @property {number} lineHeight - The line height of the font.\r\n * @property {boolean} retroFont - Whether this font is a retro font (monospace).\r\n * @property {Object.<number, BitmapFontCharacterData>} chars - The character data of the font, keyed by character code. Each character datum includes a position, size, offset and more.\r\n */\r\n\r\n/**\r\n * @typedef {object} JSONBitmapText\r\n * @extends {JSONGameObject}\r\n *\r\n * @property {string} font - The name of the font.\r\n * @property {string} text - The text that this Bitmap Text displays.\r\n * @property {number} fontSize - The size of the font.\r\n * @property {number} letterSpacing - Adds / Removes spacing between characters.\r\n * @property {integer} align - The alignment of the text in a multi-line BitmapText object.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * BitmapText objects work by taking a texture file and an XML or JSON file that describes the font structure.\r\n * \r\n * During rendering for each letter of the text is rendered to the display, proportionally spaced out and aligned to\r\n * match the font structure.\r\n *\r\n * BitmapText objects are less flexible than Text objects, in that they have less features such as shadows, fills and the ability\r\n * to use Web Fonts, however you trade this flexibility for rendering speed. You can also create visually compelling BitmapTexts by\r\n * processing the font texture in an image editor, applying fills and any other effects required.\r\n *\r\n * To create multi-line text insert \\r, \\n or \\r\\n escape codes into the text string.\r\n *\r\n * To create a BitmapText data files you need a 3rd party app such as:\r\n *\r\n * BMFont (Windows, free): http://www.angelcode.com/products/bmfont/\r\n * Glyph Designer (OS X, commercial): http://www.71squared.com/en/glyphdesigner\r\n * Littera (Web-based, free): http://kvazars.com/littera/\r\n *\r\n * For most use cases it is recommended to use XML. If you wish to use JSON, the formatting should be equal to the result of\r\n * converting a valid XML file through the popular X2JS library. An online tool for conversion can be found here: http://codebeautify.org/xmltojson\r\n *\r\n * @class BitmapText\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Tint\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. It can only belong to one Scene at any given time.\r\n * @param {number} x - The x coordinate of this Game Object in world space.\r\n * @param {number} y - The y coordinate of this Game Object in world space.\r\n * @param {string} font - The key of the font to use from the Bitmap Font cache.\r\n * @param {(string|string[])} [text] - The string, or array of strings, to be set as the content of this Bitmap Text.\r\n * @param {number} [size] - The font size of this Bitmap Text.\r\n * @param {integer} [align=0] - The alignment of the text in a multi-line BitmapText object.\r\n */\r\nvar BitmapText = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.Depth,\r\n        Components.Mask,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.ScrollFactor,\r\n        Components.Texture,\r\n        Components.Tint,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Render\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function BitmapText (scene, x, y, font, text, size, align)\r\n    {\r\n        if (text === undefined) { text = ''; }\r\n        if (align === undefined) { align = 0; }\r\n\r\n        GameObject.call(this, scene, 'BitmapText');\r\n\r\n        /**\r\n         * The key of the Bitmap Font used by this Bitmap Text.\r\n         * To change the font after creation please use `setFont`.\r\n         *\r\n         * @name Phaser.GameObjects.BitmapText#font\r\n         * @type {string}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.font = font;\r\n\r\n        var entry = this.scene.sys.cache.bitmapFont.get(font);\r\n\r\n        /**\r\n         * The data of the Bitmap Font used by this Bitmap Text.\r\n         *\r\n         * @name Phaser.GameObjects.BitmapText#fontData\r\n         * @type {BitmapFontData}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.fontData = entry.data;\r\n\r\n        /**\r\n         * The text that this Bitmap Text object displays.\r\n         *\r\n         * @name Phaser.GameObjects.BitmapText#_text\r\n         * @type {string}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._text = '';\r\n\r\n        /**\r\n         * The font size of this Bitmap Text.\r\n         *\r\n         * @name Phaser.GameObjects.BitmapText#_fontSize\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._fontSize = size || this.fontData.size;\r\n\r\n        /**\r\n         * Adds / Removes spacing between characters.\r\n         *\r\n         * Can be a negative or positive number.\r\n         *\r\n         * @name Phaser.GameObjects.BitmapText#_letterSpacing\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.4.0\r\n         */\r\n        this._letterSpacing = 0;\r\n\r\n        /**\r\n         * Controls the alignment of each line of text in this BitmapText object.\r\n         * Only has any effect when this BitmapText contains multiple lines of text, split with carriage-returns.\r\n         * Has no effect with single-lines of text.\r\n         *\r\n         * See the methods `setLeftAlign`, `setCenterAlign` and `setRightAlign`.\r\n         *\r\n         * 0 = Left aligned (default)\r\n         * 1 = Middle aligned\r\n         * 2 = Right aligned\r\n         *\r\n         * The alignment position is based on the longest line of text.\r\n         *\r\n         * @name Phaser.GameObjects.BitmapText#_align\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._align = align;\r\n\r\n        /**\r\n         * An object that describes the size of this Bitmap Text.\r\n         *\r\n         * @name Phaser.GameObjects.BitmapText#_bounds\r\n         * @type {BitmapTextSize}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._bounds = GetBitmapTextSize(this, false, this._bounds);\r\n\r\n        /**\r\n         * An internal dirty flag for bounds calculation.\r\n         *\r\n         * @name Phaser.GameObjects.BitmapText#_dirty\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._dirty = false;\r\n\r\n        this.setTexture(entry.texture, entry.frame);\r\n        this.setPosition(x, y);\r\n        this.setOrigin(0, 0);\r\n        this.initPipeline();\r\n\r\n        this.setText(text);\r\n    },\r\n\r\n    /**\r\n     * Set the lines of text in this BitmapText to be left-aligned.\r\n     * This only has any effect if this BitmapText contains more than one line of text.\r\n     *\r\n     * @method Phaser.GameObjects.BitmapText#setLeftAlign\r\n     * @since 3.11.0\r\n     *\r\n     * @return {this} This BitmapText Object.\r\n     */\r\n    setLeftAlign: function ()\r\n    {\r\n        this._align = BitmapText.ALIGN_LEFT;\r\n\r\n        this._dirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the lines of text in this BitmapText to be center-aligned.\r\n     * This only has any effect if this BitmapText contains more than one line of text.\r\n     *\r\n     * @method Phaser.GameObjects.BitmapText#setCenterAlign\r\n     * @since 3.11.0\r\n     *\r\n     * @return {this} This BitmapText Object.\r\n     */\r\n    setCenterAlign: function ()\r\n    {\r\n        this._align = BitmapText.ALIGN_CENTER;\r\n\r\n        this._dirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the lines of text in this BitmapText to be right-aligned.\r\n     * This only has any effect if this BitmapText contains more than one line of text.\r\n     *\r\n     * @method Phaser.GameObjects.BitmapText#setRightAlign\r\n     * @since 3.11.0\r\n     *\r\n     * @return {this} This BitmapText Object.\r\n     */\r\n    setRightAlign: function ()\r\n    {\r\n        this._align = BitmapText.ALIGN_RIGHT;\r\n\r\n        this._dirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the font size of this Bitmap Text.\r\n     *\r\n     * @method Phaser.GameObjects.BitmapText#setFontSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} size - The font size to set.\r\n     *\r\n     * @return {this} This BitmapText Object.\r\n     */\r\n    setFontSize: function (size)\r\n    {\r\n        this._fontSize = size;\r\n\r\n        this._dirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the letter spacing between each character of this Bitmap Text.\r\n     * Can be a positive value to increase the space, or negative to reduce it.\r\n     * Spacing is applied after the kerning values have been set.\r\n     *\r\n     * @method Phaser.GameObjects.BitmapText#setLetterSpacing\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} [spacing=0] - The amount of horizontal space to add between each character.\r\n     *\r\n     * @return {this} This BitmapText Object.\r\n     */\r\n    setLetterSpacing: function (spacing)\r\n    {\r\n        if (spacing === undefined) { spacing = 0; }\r\n\r\n        this._letterSpacing = spacing;\r\n\r\n        this._dirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the textual content of this BitmapText.\r\n     *\r\n     * An array of strings will be converted into multi-line text. Use the align methods to change multi-line alignment.\r\n     *\r\n     * @method Phaser.GameObjects.BitmapText#setText\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|string[])} value - The string, or array of strings, to be set as the content of this BitmapText.\r\n     *\r\n     * @return {this} This BitmapText Object.\r\n     */\r\n    setText: function (value)\r\n    {\r\n        if (!value && value !== 0)\r\n        {\r\n            value = '';\r\n        }\r\n\r\n        if (Array.isArray(value))\r\n        {\r\n            value = value.join('\\n');\r\n        }\r\n\r\n        if (value !== this.text)\r\n        {\r\n            this._text = value.toString();\r\n\r\n            this._dirty = true;\r\n\r\n            this.updateDisplayOrigin();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the bounds of this Bitmap Text.\r\n     *\r\n     * An object is returned that contains the position, width and height of the Bitmap Text in local and global\r\n     * contexts.\r\n     *\r\n     * Local size is based on just the font size and a [0, 0] position.\r\n     *\r\n     * Global size takes into account the Game Object's scale, world position and display origin.\r\n     *\r\n     * Also in the object is data regarding the length of each line, should this be a multi-line BitmapText.\r\n     *\r\n     * @method Phaser.GameObjects.BitmapText#getTextBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [round] - Whether to round the results to the nearest integer.\r\n     *\r\n     * @return {BitmapTextSize} An object that describes the size of this Bitmap Text.\r\n     */\r\n    getTextBounds: function (round)\r\n    {\r\n        //  local = The BitmapText based on fontSize and 0x0 coords\r\n        //  global = The BitmapText, taking into account scale and world position\r\n        //  lines = The BitmapText line data\r\n\r\n        if (this._dirty)\r\n        {\r\n            GetBitmapTextSize(this, round, this._bounds);\r\n        }\r\n\r\n        return this._bounds;\r\n    },\r\n\r\n    /**\r\n     * Changes the font this BitmapText is using to render.\r\n     *\r\n     * The new texture is loaded and applied to the BitmapText. The existing test, size and alignment are preserved,\r\n     * unless overridden via the arguments.\r\n     *\r\n     * @method Phaser.GameObjects.BitmapText#setFont\r\n     * @since 3.11.0\r\n     *\r\n     * @param {string} font - The key of the font to use from the Bitmap Font cache.\r\n     * @param {number} [size] - The font size of this Bitmap Text. If not specified the current size will be used.\r\n     * @param {integer} [align=0] - The alignment of the text in a multi-line BitmapText object. If not specified the current alignment will be used.\r\n     *\r\n     * @return {this} This BitmapText Object.\r\n     */\r\n    setFont: function (key, size, align)\r\n    {\r\n        if (size === undefined) { size = this._fontSize; }\r\n        if (align === undefined) { align = this._align; }\r\n\r\n        if (key !== this.font)\r\n        {\r\n            var entry = this.scene.sys.cache.bitmapFont.get(key);\r\n\r\n            if (entry)\r\n            {\r\n                this.font = key;\r\n                this.fontData = entry.data;\r\n                this._fontSize = size;\r\n                this._align = align;\r\n\r\n                this.setTexture(entry.texture, entry.frame);\r\n\r\n                GetBitmapTextSize(this, false, this._bounds);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Controls the alignment of each line of text in this BitmapText object.\r\n     *\r\n     * Only has any effect when this BitmapText contains multiple lines of text, split with carriage-returns.\r\n     * Has no effect with single-lines of text.\r\n     *\r\n     * See the methods `setLeftAlign`, `setCenterAlign` and `setRightAlign`.\r\n     *\r\n     * 0 = Left aligned (default)\r\n     * 1 = Middle aligned\r\n     * 2 = Right aligned\r\n     *\r\n     * The alignment position is based on the longest line of text.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#align\r\n     * @type {integer}\r\n     * @since 3.11.0\r\n     */\r\n    align: {\r\n\r\n        set: function (value)\r\n        {\r\n            this._align = value;\r\n            this._dirty = true;\r\n        },\r\n\r\n        get: function ()\r\n        {\r\n            return this._align;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The text that this Bitmap Text object displays.\r\n     *\r\n     * You can also use the method `setText` if you want a chainable way to change the text content.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#text\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\r\n    text: {\r\n\r\n        set: function (value)\r\n        {\r\n            this.setText(value);\r\n        },\r\n\r\n        get: function ()\r\n        {\r\n            return this._text;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The font size of this Bitmap Text.\r\n     *\r\n     * You can also use the method `setFontSize` if you want a chainable way to change the font size.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#fontSize\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    fontSize: {\r\n\r\n        set: function (value)\r\n        {\r\n            this._fontSize = value;\r\n            this._dirty = true;\r\n        },\r\n\r\n        get: function ()\r\n        {\r\n            return this._fontSize;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Adds / Removes spacing between characters.\r\n     *\r\n     * Can be a negative or positive number.\r\n     *\r\n     * You can also use the method `setLetterSpacing` if you want a chainable way to change the letter spacing.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#letterSpacing\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    letterSpacing: {\r\n\r\n        set: function (value)\r\n        {\r\n            this._letterSpacing = value;\r\n            this._dirty = true;\r\n        },\r\n\r\n        get: function ()\r\n        {\r\n            return this._letterSpacing;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The width of this Bitmap Text.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#width\r\n     * @type {number}\r\n     * @readOnly\r\n     * @since 3.0.0\r\n     */\r\n    width: {\r\n\r\n        get: function ()\r\n        {\r\n            this.getTextBounds(false);\r\n\r\n            return this._bounds.global.width;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The height of this bitmap text.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#height\r\n     * @type {number}\r\n     * @readOnly\r\n     * @since 3.0.0\r\n     */\r\n    height: {\r\n\r\n        get: function ()\r\n        {\r\n            this.getTextBounds(false);\r\n\r\n            return this._bounds.global.height;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Build a JSON representation of this Bitmap Text.\r\n     *\r\n     * @method Phaser.GameObjects.BitmapText#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {JSONBitmapText} A JSON representation of this Bitmap Text.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var out = Components.ToJSON(this);\r\n\r\n        //  Extra data is added here\r\n\r\n        var data = {\r\n            font: this.font,\r\n            text: this.text,\r\n            fontSize: this.fontSize,\r\n            letterSpacing: this.letterSpacing,\r\n            align: this.align\r\n        };\r\n\r\n        out.data = data;\r\n\r\n        return out;\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Left align the text characters in a multi-line BitmapText object.\r\n *\r\n * @name Phaser.GameObjects.BitmapText.ALIGN_LEFT\r\n * @type {integer}\r\n * @since 3.11.0\r\n */\r\nBitmapText.ALIGN_LEFT = 0;\r\n\r\n/**\r\n * Center align the text characters in a multi-line BitmapText object.\r\n *\r\n * @name Phaser.GameObjects.BitmapText.ALIGN_CENTER\r\n * @type {integer}\r\n * @since 3.11.0\r\n */\r\nBitmapText.ALIGN_CENTER = 1;\r\n\r\n/**\r\n * Right align the text characters in a multi-line BitmapText object.\r\n *\r\n * @name Phaser.GameObjects.BitmapText.ALIGN_RIGHT\r\n * @type {integer}\r\n * @since 3.11.0\r\n */\r\nBitmapText.ALIGN_RIGHT = 2;\r\n\r\nBitmapText.ParseFromAtlas = ParseFromAtlas;\r\n\r\nmodule.exports = BitmapText;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Class","Components","GameObject","GetBitmapTextSize","ParseFromAtlas","Render","BitmapText","Extends","Mixins","Alpha","BlendMode","Depth","Mask","Origin","Pipeline","ScaleMode","ScrollFactor","Texture","Tint","Transform","Visible","initialize","scene","x","y","font","text","size","align","undefined","call","entry","sys","cache","bitmapFont","get","fontData","data","_text","_fontSize","_letterSpacing","_align","_bounds","_dirty","setTexture","texture","frame","setPosition","setOrigin","initPipeline","setText","setLeftAlign","ALIGN_LEFT","setCenterAlign","ALIGN_CENTER","setRightAlign","ALIGN_RIGHT","setFontSize","setLetterSpacing","spacing","value","Array","isArray","join","toString","updateDisplayOrigin","getTextBounds","round","setFont","key","set","fontSize","letterSpacing","width","height","toJSON","out","ToJSON"]
}
