{
"version":3,
"file":"module$node_modules$Phaser$src$tilemaps$components$RemoveTileAt.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,gEAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO5H,IAAIC,KAAOH,OAAA,CAAQ,8CAAR,CAAX,CACII,gBAAkBJ,OAAA,CAAQ,oEAAR,CADtB,CAEIK,iBAAmBL,OAAA,CAAQ,qEAAR,CA6CvBC,OAAAC,QAAA,CA3BmBI,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAeC,eAAf,CAAgCC,gBAAhC,CAAkDC,KAAlD,CAC5B,CAC4BC,IAAAA,EAAxB,GAAIH,eAAJ,GAAqCA,eAArC,CAAuD,CAAA,CAAvD,CACyBG,KAAAA,EAAzB;AAAIF,gBAAJ,GAAsCA,gBAAtC,CAAyD,CAAA,CAAzD,CACA,IAAI,CAACN,eAAA,CAAgBG,KAAhB,CAAuBC,KAAvB,CAA8BG,KAA9B,CAAL,CAA6C,MAAO,KAEpD,KAAIE,KAAOF,KAAAG,KAAA,CAAWN,KAAX,CAAA,CAAkBD,KAAlB,CACX,IAAa,IAAb,GAAIM,IAAJ,CAEI,MAAO,KAIPF,MAAAG,KAAA,CAAWN,KAAX,CAAA,CAAkBD,KAAlB,CAAA,CAA2BE,eAAA,CACrB,IADqB,CAErB,IAAIN,IAAJ,CAASQ,KAAT,CAAgB,EAAhB,CAAoBJ,KAApB,CAA2BC,KAA3B,CAAkCK,IAAAE,MAAlC,CAA8CF,IAAAG,OAA9C,CAINN,iBAAJ,EAAwBG,IAAxB,EAAgCA,IAAAI,SAAhC,EAEIZ,gBAAA,CAAiBE,KAAjB,CAAwBC,KAAxB,CAA+BG,KAA/B,CAGJ,OAAOE,KAvBX,CA5B4H;",
"sources":["node_modules/Phaser/src/tilemaps/components/RemoveTileAt.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$Phaser$src$tilemaps$components$RemoveTileAt\"] = function(global,require,module,exports) {\n/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Tile = require('../Tile');\r\nvar IsInLayerBounds = require('./IsInLayerBounds');\r\nvar CalculateFacesAt = require('./CalculateFacesAt');\r\n\r\n/**\r\n * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n * collision information.\r\n *\r\n * @function Phaser.Tilemaps.Components.RemoveTileAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - The x coordinate.\r\n * @param {integer} tileY - The y coordinate.\r\n * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {Phaser.Tilemaps.Tile} The Tile object that was removed.\r\n */\r\nvar RemoveTileAt = function (tileX, tileY, replaceWithNull, recalculateFaces, layer)\r\n{\r\n    if (replaceWithNull === undefined) { replaceWithNull = false; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n    if (!IsInLayerBounds(tileX, tileY, layer)) { return null; }\r\n\r\n    var tile = layer.data[tileY][tileX];\r\n    if (tile === null)\r\n    {\r\n        return null;\r\n    }\r\n    else\r\n    {\r\n        layer.data[tileY][tileX] = replaceWithNull\r\n            ? null\r\n            : new Tile(layer, -1, tileX, tileY, tile.width, tile.height);\r\n    }\r\n\r\n    // Recalculate faces only if the removed tile was a colliding tile\r\n    if (recalculateFaces && tile && tile.collides)\r\n    {\r\n        CalculateFacesAt(tileX, tileY, layer);\r\n    }\r\n\r\n    return tile;\r\n};\r\n\r\nmodule.exports = RemoveTileAt;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Tile","IsInLayerBounds","CalculateFacesAt","RemoveTileAt","tileX","tileY","replaceWithNull","recalculateFaces","layer","undefined","tile","data","width","height","collides"]
}
